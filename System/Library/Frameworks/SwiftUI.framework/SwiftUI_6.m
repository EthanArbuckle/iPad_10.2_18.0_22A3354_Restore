_OWORD *initializeWithTake for WindowGroup(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  _OWORD *v16;
  _OWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  v7 = v6 + 39;
  v8 = (unint64_t)a1 + v6 + 39;
  v9 = ~v6 & 0xFFFFFFFFFFFFFFF8;
  v10 = (_OWORD *)(v8 & v9);
  v11 = (_OWORD *)(((unint64_t)a2 + v7) & v9);
  if (*(_QWORD *)(v5 + 64) <= 0x10uLL)
    v12 = 16;
  else
    v12 = *(_QWORD *)(v5 + 64);
  v13 = *((unsigned __int8 *)v11 + v12);
  if (v13 >= 2)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X13 }
  }
  if (v13 == 1)
  {
    *v10 = *v11;
    v15 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *, _OWORD *))(v5 + 32))(v10, v11);
    v15 = 0;
  }
  *((_BYTE *)v10 + v12) = v15;
  v16 = (_OWORD *)(((unint64_t)v10 + v12 + 8) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_OWORD *)(((unint64_t)v11 + v12 + 8) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = (_QWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = (uint64_t *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  v22 = *v21;
  if ((unint64_t)*v21 < 0xFFFFFFFF)
  {
    *(_OWORD *)v20 = *(_OWORD *)v21;
  }
  else
  {
    v23 = v21[1];
    *(_QWORD *)v20 = v22;
    *(_QWORD *)(v20 + 8) = v23;
  }
  return a1;
}

uint64_t assignWithTake for WindowGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(a2 + 24) >= 0xFFFFFFFFuLL)
    {
      v6 = *(_BYTE *)(a2 + 16);
      v7 = *(_QWORD *)a1;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_BYTE *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = v6;
      outlined consume of Text.Storage(v7, v8, v9);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
LABEL_6:
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_DWORD *)(v12 + 80) & 0xF8;
  v14 = v13 + 39;
  v15 = v13 + 39 + a1;
  v16 = ~v13 & 0xFFFFFFFFFFFFFFF8;
  v17 = v15 & v16;
  v18 = (v14 + a2) & v16;
  if (*(_QWORD *)(v12 + 64) <= 0x10uLL)
    v19 = 16;
  else
    v19 = *(_QWORD *)(v12 + 64);
  if (v17 != v18)
  {
    v20 = *(unsigned __int8 *)(v17 + v19);
    if (v20 >= 2)
    {
      if (v19 <= 3)
        v21 = v19;
      else
        v21 = 4;
      __asm { BR              X12 }
    }
    if (v20 == 1)
      swift_release();
    else
      (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v17, v11);
    v22 = *(unsigned __int8 *)(v18 + v19);
    if (v22 >= 2)
    {
      if (v19 <= 3)
        v23 = v19;
      else
        v23 = 4;
      __asm { BR              X12 }
    }
    if (v22 == 1)
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
      v24 = 1;
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 32))(v17, v18, v11);
      v24 = 0;
    }
    *(_BYTE *)(v17 + v19) = v24;
  }
  v25 = (_QWORD *)(((v17 | 7) + v19 + 1) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_QWORD *)(((v18 | 7) + v19 + 1) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRelease();
  v27 = (_QWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFF8);
  v28 = (_QWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFF8);
  *v27 = *v28;
  v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  v30 = (unint64_t *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  v31 = *v30;
  if (*v29 < 0xFFFFFFFFuLL)
  {
    if (v31 >= 0xFFFFFFFF)
    {
      v33 = v30[1];
      *v29 = v31;
      v29[1] = v33;
      return a1;
    }
LABEL_33:
    *(_OWORD *)v29 = *(_OWORD *)v30;
    return a1;
  }
  if (v31 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_33;
  }
  v32 = v30[1];
  *v29 = v31;
  v29[1] = v32;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for WindowGroup(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  __int16 v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v13;
  unint64_t v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4 <= 0x10)
    v4 = 16;
  if (!a2)
    return 0;
  if (a2 < 0x7FFFFFFF)
    goto LABEL_23;
  v5 = *(_DWORD *)(v3 + 80) & 0xF8;
  v6 = ((((((v4 + ((unsigned __int16)(v5 + 39) & (unsigned __int16)~v5 & 0x1F8) + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  v7 = v6 & 0xFFFFFFF8;
  v8 = a2 - 2147483645;
  if ((v6 & 0xFFFFFFF8) != 0)
    v8 = 2;
  if (v8 >= 0x10000)
    v9 = 4;
  else
    v9 = 2;
  if (v8 < 0x100)
    v10 = 1;
  else
    v10 = v9;
  if (v10 == 4)
  {
    v11 = *(_DWORD *)(a1 + v6);
    if (v11)
      goto LABEL_19;
LABEL_23:
    v14 = *(_QWORD *)(a1 + 24);
    if (v14 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    if ((v14 + 1) >= 2)
      return v14;
    else
      return 0;
  }
  if (v10 != 2)
  {
    v11 = *(unsigned __int8 *)(a1 + v6);
    if (v11)
      goto LABEL_19;
    goto LABEL_23;
  }
  v11 = *(unsigned __int16 *)(a1 + v6);
  if (!v11)
    goto LABEL_23;
LABEL_19:
  v13 = v11 - 1;
  if (v7)
  {
    v13 = 0;
    LODWORD(v7) = *(_DWORD *)a1;
  }
  return (v7 | v13) + 0x7FFFFFFF;
}

void storeEnumTagSinglePayload for WindowGroup(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= 0x10)
    v6 = 16;
  v7 = ((((((v6
           + ((unsigned __int16)((*(_WORD *)(v5 + 80) & 0xF8) + 39) & (unsigned __int16)~(*(_WORD *)(v5 + 80) & 0xF8) & 0x1F8)
           + 8) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  if (a3 < 0x7FFFFFFF)
  {
    v10 = 0u;
  }
  else
  {
    v8 = a3 - 2147483645;
    if ((_DWORD)v7)
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v10 = 1;
    else
      v10 = v9;
  }
  if (a2 <= 0x7FFFFFFE)
    __asm { BR              X10 }
  if ((_DWORD)v7)
  {
    v11 = a2 - 0x7FFFFFFF;
    bzero(a1, v7);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1870D8004()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1870D800C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_WORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1870D8014);
}

void sub_1870D8020(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    *(_QWORD *)(v2 + 24) = a2;
}

void sub_1870D802C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

_UNKNOWN **sub_1870D8050()
{
  return &protocol witness table for WindowSceneList<A>;
}

_QWORD *initializeBufferWithCopyOfBuffer for WindowSceneList(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x1000F8) != 0
    || (v7 = *(_QWORD *)(v5 + 64),
        v8 = (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8,
        ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18))
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    v9 = (char *)a2 + 7;
    v10 = (_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)v4 + v7 + 7) & 0xFFFFFFFFFFFFF8);
    *v11 = *v10;
    v12 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    v13 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    v14 = *(_QWORD *)(v13 + 24);
    swift_retain();
    if (v14 < 0xFFFFFFFF)
    {
      v19 = *(_OWORD *)(v13 + 16);
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *(_OWORD *)(v12 + 16) = v19;
    }
    else
    {
      v15 = *(_QWORD *)v13;
      v16 = *(_QWORD *)(v13 + 8);
      v17 = *(_BYTE *)(v13 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v13, v16, v17);
      *(_QWORD *)v12 = v15;
      *(_QWORD *)(v12 + 8) = v16;
      *(_BYTE *)(v12 + 16) = v17;
      *(_QWORD *)(v12 + 24) = *(_QWORD *)(v13 + 24);
      swift_bridgeObjectRetain();
    }
    v20 = (_QWORD *)((v12 + 39) & 0xFFFFFFFFFFFFF8);
    v21 = (_QWORD *)((v13 + 39) & 0xFFFFFFFFFFFFFFF8);
    *v20 = *v21;
    v22 = v8 + 16;
    v23 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    v24 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v24 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v23 = *(_OWORD *)v24;
    }
    else
    {
      v25 = *(_QWORD *)(v24 + 8);
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *(_QWORD *)(v23 + 8) = v25;
      swift_retain();
    }
    v26 = (_QWORD *)(((unint64_t)v4 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
    v27 = (_QWORD *)((unint64_t)&v9[v22] & 0xFFFFFFFFFFFFFFF8);
    *v26 = *v27;
    v26[1] = v27[1];
    *(_QWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t assignWithCopy for WindowSceneList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_retain();
  swift_release();
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(v10 + 24);
  if (*(_QWORD *)(v9 + 24) < 0xFFFFFFFFuLL)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      v18 = *(_QWORD *)v10;
      v19 = *(_QWORD *)(v10 + 8);
      v20 = *(_BYTE *)(v10 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v10, v19, v20);
      *(_QWORD *)v9 = v18;
      *(_QWORD *)(v9 + 8) = v19;
      *(_BYTE *)(v9 + 16) = v20;
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v11 >= 0xFFFFFFFF)
    {
      v12 = *(_QWORD *)v10;
      v13 = *(_QWORD *)(v10 + 8);
      v14 = *(_BYTE *)(v10 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v10, v13, v14);
      v15 = *(_QWORD *)v9;
      v16 = *(_QWORD *)(v9 + 8);
      v17 = *(_BYTE *)(v9 + 16);
      *(_QWORD *)v9 = v12;
      *(_QWORD *)(v9 + 8) = v13;
      *(_BYTE *)(v9 + 16) = v14;
      outlined consume of Text.Storage(v15, v16, v17);
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined consume of Text.Storage(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  v21 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v21;
LABEL_8:
  v22 = (_QWORD *)((v9 + 39) & 0xFFFFFFFFFFFFF8);
  v23 = (_QWORD *)((v10 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v23;
  v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = (unint64_t *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  v26 = *v25;
  if (*v24 < 0xFFFFFFFFuLL)
  {
    if (v26 >= 0xFFFFFFFF)
    {
      v28 = v25[1];
      *v24 = v26;
      v24[1] = v28;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)v24 = *(_OWORD *)v25;
    goto LABEL_15;
  }
  if (v26 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  v27 = v25[1];
  *v24 = v26;
  v24[1] = v27;
  swift_retain();
  swift_release();
LABEL_15:
  v29 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v30 = (_QWORD *)((a1 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_QWORD *)((a2 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for WindowSceneList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  _OWORD *v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(((unint64_t)v9 + 39) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v10 + 39) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = *v15;
  if ((unint64_t)*v15 < 0xFFFFFFFF)
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
  }
  else
  {
    v17 = v15[1];
    *(_QWORD *)v14 = v16;
    *(_QWORD *)(v14 + 8) = v17;
  }
  v18 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v19 = (_OWORD *)((a1 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_OWORD *)((a2 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v20;
  *(_QWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for WindowSceneList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_release();
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v9 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v10 + 24) >= 0xFFFFFFFFuLL)
    {
      v11 = *(_BYTE *)(v10 + 16);
      v12 = *(_QWORD *)v9;
      v13 = *(_QWORD *)(v9 + 8);
      v14 = *(_BYTE *)(v9 + 16);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *(_BYTE *)(v9 + 16) = v11;
      outlined consume of Text.Storage(v12, v13, v14);
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined consume of Text.Storage(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  v15 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v15;
LABEL_6:
  v16 = (_QWORD *)((v9 + 39) & 0xFFFFFFFFFFFFF8);
  v17 = (_QWORD *)((v10 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (unint64_t *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  v20 = *v19;
  if (*v18 < 0xFFFFFFFFuLL)
  {
    if (v20 >= 0xFFFFFFFF)
    {
      v22 = v19[1];
      *v18 = v20;
      v18[1] = v22;
      goto LABEL_13;
    }
LABEL_12:
    *(_OWORD *)v18 = *(_OWORD *)v19;
    goto LABEL_13;
  }
  if (v20 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_12;
  }
  v21 = v19[1];
  *v18 = v20;
  v18[1] = v21;
  swift_release();
LABEL_13:
  v23 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v24 = (_QWORD *)((a1 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)((a2 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for WindowSceneList(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
             + 23) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1870D87D0 + 4 * byte_187C07EF2[v10]))();
  }
}

void storeEnumTagSinglePayload for WindowSceneList(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1870D8970()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1870D89E4);
}

void sub_1870D8978(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1870D8980);
  JUMPOUT(0x1870D89E4);
}

void sub_1870D89C0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1870D89E4);
}

void sub_1870D89C8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1870D89E4);
}

uint64_t sub_1870D89D0(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1870D89E4);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1870D89E0);
    JUMPOUT(0x1870D89DCLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for WindowGroupRootContent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WindowGroupRootContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X13 }
    }
    if (v9 != 1)
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 0;
      return v3;
    }
    v11 = a2[1];
    *v3 = *a2;
    v3[1] = v11;
    *((_BYTE *)v3 + v5) = 1;
  }
  swift_retain();
  return v3;
}

uint64_t destroy for WindowGroupRootContent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 0x10)
    v3 = 16;
  v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)
      return swift_release();
    else
      return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_1870D8BCC + 4 * byte_187C07F06[v5]))();
  }
}

_QWORD *initializeWithCopy for WindowGroupRootContent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_retain();
    v9 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v9 = 0;
  }
  *((_BYTE *)a1 + v5) = v9;
  return a1;
}

_QWORD *assignWithCopy for WindowGroupRootContent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_release();
    else
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      *((_BYTE *)a1 + v7) = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for WindowGroupRootContent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *a1 = *a2;
    v8 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(v4 + 32))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

_OWORD *assignWithTake for WindowGroupRootContent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_release();
    else
      (*(void (**)(_OWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for WindowGroupRootContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 16;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 0x10uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1870D91B0 + 4 * byte_187C07F29[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for WindowGroupRootContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for WindowGroupRootContent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 16;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 0x10uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1870D93EC + 4 * byte_187C07F37[v3]))();
}

void destructiveInjectEnumTag for WindowGroupRootContent(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 0x10uLL)
    v4 = 16;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t implicit closure #1 in static WindowSceneList._makeScene(scene:inputs:)(unsigned int a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;
  _BYTE v17[16];
  uint64_t List;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v8 = a2[1];
  v24 = *a2;
  v25 = v8;
  v26 = a2[2];
  v9 = _GraphInputs.environment.getter();
  v22 = a4;
  v23 = a5;
  type metadata accessor for WindowSceneList(255, a4, a5, v10);
  type metadata accessor for _GraphValue();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<String?>();
  v11 = _GraphValue.value.getter();
  v20 = a4;
  v21 = a5;
  type metadata accessor for Any.Type();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<Any.Type>();
  *(_QWORD *)&v24 = __PAIR64__(v9, a1);
  DWORD2(v24) = v11;
  HIDWORD(v24) = _GraphValue.value.getter();
  v25 = 0uLL;
  LOBYTE(v26) = -1;
  List = type metadata accessor for WindowSceneList.MakeList(0, a4, a5, v12);
  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowSceneList<A>.MakeList, List);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<SceneList>, (uint64_t)&type metadata for SceneList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v24, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)v17, List, MEMORY[0x1E0DEDCE8], v13, MEMORY[0x1E0DEDD18], v14);
  outlined consume of SceneID?(v25, *((uint64_t *)&v25 + 1), v26);
  return v16;
}

uint64_t partial apply for implicit closure #1 in static WindowSceneList._makeScene(scene:inputs:)()
{
  uint64_t v0;

  return implicit closure #1 in static WindowSceneList._makeScene(scene:inputs:)(*(_DWORD *)(v0 + 32), *(__int128 **)(v0 + 40), *(unsigned int *)(v0 + 48), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void type metadata accessor for _GraphValue<String?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<String?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<String?>);
  }
}

void type metadata accessor for _GraphValue<Any.Type>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<Any.Type>)
  {
    type metadata accessor for Any.Type();
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Any.Type>);
  }
}

uint64_t destroy for WindowSceneList.MakeList(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 32);
  if (v1 != 255)
    return outlined consume of SceneID(*(_QWORD *)(result + 16), *(_QWORD *)(result + 24), v1 & 1);
  return result;
}

uint64_t assignWithCopy for WindowSceneList.MakeList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 *v4;
  int v5;
  char v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v3 = a1 + 16;
  v4 = (__int128 *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    if (v5 == 255)
    {
      v7 = *v4;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_OWORD *)v3 = v7;
    }
    else
    {
      v14 = v5 & 1;
      v15 = *(_QWORD *)(a2 + 16);
      v16 = *(_QWORD *)(a2 + 24);
      outlined copy of SceneID(v15, v16, v5 & 1);
      *(_QWORD *)(a1 + 16) = v15;
      *(_QWORD *)(a1 + 24) = v16;
      *(_BYTE *)(a1 + 32) = v14;
    }
  }
  else if (v5 == 255)
  {
    outlined destroy of SceneID(a1 + 16);
    v6 = *((_BYTE *)v4 + 16);
    *(_OWORD *)v3 = *v4;
    *(_BYTE *)(v3 + 16) = v6;
  }
  else
  {
    v8 = v5 & 1;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    outlined copy of SceneID(v9, v10, v5 & 1);
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 24);
    v13 = *(_BYTE *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 32) = v8;
    outlined consume of SceneID(v11, v12, v13);
  }
  return a1;
}

uint64_t outlined destroy of SceneID(uint64_t a1)
{
  destroy for SceneID(a1);
  return a1;
}

uint64_t assignWithTake for WindowSceneList.MakeList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = a1 + 16;
  v4 = a2 + 16;
  v5 = *(unsigned __int8 *)(a1 + 32);
  if (v5 != 255)
  {
    v6 = *(unsigned __int8 *)(a2 + 32);
    if (v6 != 255)
    {
      v7 = *(_QWORD *)(a1 + 16);
      v8 = *(_QWORD *)(a1 + 24);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
      *(_BYTE *)(a1 + 32) = v6 & 1;
      outlined consume of SceneID(v7, v8, v5 & 1);
      return a1;
    }
    outlined destroy of SceneID(a1 + 16);
  }
  *(_OWORD *)v3 = *(_OWORD *)v4;
  *(_BYTE *)(v3 + 16) = *(_BYTE *)(v4 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for WindowSceneList.MakeList(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WindowSceneList.MakeList(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = ~(_BYTE)a2;
  }
  return result;
}

void Scene.allowsAutomationElements(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_1870D9A38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

uint64_t TabForEach<>._identifiedView.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  _QWORD *v21;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = v3;
  v27 = a3;
  v8 = a1[3];
  v10 = a1[5];
  v9 = a1[6];
  v11 = a1[7];
  v35 = a1[2];
  v7 = v35;
  v36 = v8;
  v37 = v10;
  v38 = v9;
  v39 = v11;
  v12 = type metadata accessor for ForEach();
  v13 = *(_QWORD *)(v12 - 8);
  v25 = v12;
  v26 = v13;
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)&v24 - v16;
  (*(void (**)(char *, uint64_t, double))(v18 + 16))((char *)&v24 - v16, v4, v15);
  v28 = v7;
  v29 = v8;
  v30 = a1[4];
  v19 = v30;
  v31 = v10;
  v32 = v9;
  v33 = v11;
  v34 = a2;
  KeyPath = swift_getKeyPath();
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = v7;
  v21[3] = v8;
  v21[4] = v19;
  v21[5] = v9;
  v21[6] = v11;
  v21[7] = a2;
  v21[8] = KeyPath;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_retain();
  mapForEach<A, B, C, D>(_:transform:)((uint64_t)v17, (uint64_t)partial apply for implicit closure #1 in TabForEach<>._identifiedView.getter, (uint64_t)v21, v7, v8, v10, AssociatedTypeWitness, v9, v11);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v17, v25);
}

uint64_t sub_1870D9C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 56))(*(_QWORD *)(a3 + a2 - 32));
}

uint64_t sub_1870D9C50()
{
  return 56;
}

__n128 sub_1870D9C5C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_1870D9C78()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in TabForEach<>._identifiedView.getter()
{
  return swift_getAtKeyPath();
}

uint64_t mapForEach<A, B, C, D>(_:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[0] = a7;
  v16[1] = a4;
  v16[2] = a5;
  v16[3] = a6;
  v16[4] = a8;
  v16[5] = a9;
  v10 = type metadata accessor for ForEach();
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  (*(void (**)(char *, uint64_t, double))(v13 + 16))((char *)v16 - v14, a1, v12);
  swift_retain();
  return ForEach.init<A>(_:transform:)();
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <> TabForEach<A, B, C, D>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return TabForEach<>._identifiedView.getter(a1, *(_QWORD *)(a2 - 8), a3);
}

uint64_t TabForEach<>.init(_:id:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v29[0] = a3;
  v29[1] = a4;
  v30 = a8;
  v14 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v17 + 8);
  v31 = v19;
  v32 = v18;
  v33 = v20;
  v34 = v21;
  v35 = a9;
  v22 = type metadata accessor for ForEach();
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)v29 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v16, a1, a5, v24);
  v31 = a2;
  ForEach.init(_:idGenerator:content:)();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, a5);
  v31 = a5;
  v32 = v18;
  v33 = a6;
  v34 = a7;
  v35 = a9;
  v27 = type metadata accessor for ForEach();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v30, v26, v27);
}

uint64_t TabForEach<>.init(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v30 = a6;
  v31 = a2;
  v32 = a3;
  v33 = a9;
  v28 = a10;
  v29 = a11;
  v17 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  KeyPath = a4;
  v43 = a5;
  v44 = a7;
  v45 = a8;
  v46 = AssociatedConformanceWitness;
  v21 = type metadata accessor for ForEach();
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)&v28 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, a1, a4, v23);
  v34 = a4;
  v35 = a5;
  v36 = v30;
  v37 = a7;
  v38 = a8;
  v39 = v28;
  v40 = v29;
  v41 = a12;
  KeyPath = swift_getKeyPath();
  ForEach.init(_:idGenerator:content:)();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, a4);
  KeyPath = a4;
  v43 = a5;
  v44 = a7;
  v45 = a8;
  v46 = AssociatedConformanceWitness;
  v26 = type metadata accessor for ForEach();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v33, v25, v26);
}

uint64_t key path getter for Identifiable.id : <A, B, C, D>A.Element()
{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_1870DA140()
{
  return 64;
}

__n128 sub_1870DA14C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

__n128 TabForEach<>.init(_:content:)@<Q0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, unint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 result;
  __int128 v23;
  _OWORD v24[3];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __n128 v31;
  __int128 v32;
  uint64_t v33;

  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a3;
  v14[3] = a4;
  v14[4] = a5;
  v14[5] = a6;
  v14[6] = a1;
  v14[7] = a2;
  type metadata accessor for Range<Int>();
  v16 = v15;
  v17 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  v18 = MEMORY[0x1E0DEB428];
  v19 = MEMORY[0x1E0DEB418];
  ForEach.init(_:idGenerator:content:)();
  v24[0] = v26;
  v24[1] = v27;
  v24[2] = v28;
  v25 = v29;
  *(_QWORD *)&v30 = v16;
  *((_QWORD *)&v30 + 1) = v19;
  v31.n128_u64[0] = a4;
  v31.n128_u64[1] = v17;
  *(_QWORD *)&v32 = v18;
  v20 = type metadata accessor for ForEach();
  (*(void (**)(__int128 *, _OWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(&v30, v24, v20);
  v21 = v33;
  result = v31;
  v23 = v32;
  *(_OWORD *)a7 = v30;
  *(__n128 *)(a7 + 16) = result;
  *(_OWORD *)(a7 + 32) = v23;
  *(_QWORD *)(a7 + 48) = v21;
  return result;
}

uint64_t sub_1870DA29C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned Int) -> (@out D)(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 48))(*a1);
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> TabForEach<A, B, C, D>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> TabForEach<A, B, C, D>, a1, &v4);
}

uint64_t associated type witness table accessor for TabContent.TabValue : Hashable in <> TabForEach<A, B, C, D>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 64);
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> TabForEach<A, B, C, D>(uint64_t a1)
{
  uint64_t AssociatedConformanceWitness;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], a1, &AssociatedConformanceWitness);
}

uint64_t instantiation function for generic protocol witness table for <> TabForEach<A, B, C, D>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> TabForEach<A, B, C, D>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for TabForEach()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ForEach();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TabForEach(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
    v14 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFF8);
    *v13 = *v14;
    v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
    v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
    *v15 = *v16;
    *(_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for TabForEach(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for TabForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TabForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  *v10 = *v11;
  swift_retain();
  swift_release();
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  swift_retain();
  swift_release();
  *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for TabForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for TabForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFF8uLL;
  *v10 = *(_QWORD *)v9;
  swift_release();
  v11 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v9 + 15) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  swift_release();
  *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TabForEach(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1870DA8DC + 4 * byte_187C08140[v10]))();
  }
}

void storeEnumTagSinglePayload for TabForEach(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1870DAA6C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1870DAAE4);
}

void sub_1870DAA74(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1870DAA7CLL);
  JUMPOUT(0x1870DAAE4);
}

void sub_1870DAABC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1870DAAE4);
}

void sub_1870DAAC4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1870DAAE4);
}

uint64_t sub_1870DAACC(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1870DAAE4);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1870DAAE0);
    JUMPOUT(0x1870DAAD8);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void type metadata accessor for TabForEach()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t static AnimatableModifier._makeView(modifier:inputs:body:)()
{
  static Animatable.makeAnimatable(value:inputs:)();
  _GraphValue.init(_:)();
  return static ViewModifier.makeView(modifier:inputs:body:)();
}

uint64_t static AnimatableModifier._makeViewList(modifier:inputs:body:)()
{
  static Animatable.makeAnimatable(value:inputs:)();
  _GraphValue.init(_:)();
  return static ViewModifier.makeViewList(modifier:inputs:body:)();
}

uint64_t View.sensoryFeedback<A>(_:trigger:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[2];
  uint64_t v26;
  __int128 v27;

  v23 = a5;
  v22 = a3;
  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for FeedbackGenerator(0, v13, v14, v13);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v21 - v18;
  v27 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, a4);
  v26 = 0;
  memset(v25, 0, sizeof(v25));
  v24 = 0;
  swift_weakInit();
  FeedbackGenerator.init(feedbackRequestContext:feedback:trigger:condition:implementation:)(&v24, (uint64_t *)&v27, (uint64_t)v12, 0, 0, (uint64_t)v25, a4, a6, v19);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FeedbackGenerator<A>, v15);
  View.platformSensoryFeedback<A>(_:)((uint64_t)v19, v22, v15, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
}

uint64_t type metadata accessor for FeedbackGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeedbackGenerator);
}

uint64_t FeedbackGenerator.init(feedbackRequestContext:feedback:trigger:condition:implementation:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  char *v20;
  uint64_t v21;

  v16 = *a2;
  v17 = a2[1];
  outlined init with take of FeedbackRequestContext(a1, a9);
  *((_QWORD *)a9 + 2) = v16;
  *((_QWORD *)a9 + 3) = v17;
  v19 = (int *)type metadata accessor for FeedbackGenerator(0, a7, a8, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(&a9[v19[10]], a3, a7);
  v20 = &a9[v19[11]];
  *(_QWORD *)v20 = a4;
  *((_QWORD *)v20 + 1) = a5;
  v21 = (uint64_t)&a9[v19[12]];
  outlined init with copy of PlatformSensoryFeedback?(a6, v21);
  *(_QWORD *)(v21 + 40) = 0;
  return outlined destroy of LocationBasedSensoryFeedback?(a6, &lazy cache variable for type metadata for PlatformSensoryFeedback?, &lazy cache variable for type metadata for PlatformSensoryFeedback);
}

uint64_t View.sensoryFeedback<A>(_:trigger:condition:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  __int128 v34;

  v30 = a7;
  v28 = a9;
  v29 = a5;
  v27 = a3;
  v14 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for FeedbackGenerator(0, v18, v19, v17);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v26 - v23;
  v34 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, a6);
  v33 = 0;
  memset(v32, 0, sizeof(v32));
  v31 = 0;
  swift_weakInit();
  swift_retain();
  FeedbackGenerator.init(feedbackRequestContext:feedback:trigger:condition:implementation:)(&v31, (uint64_t *)&v34, (uint64_t)v16, v27, a4, (uint64_t)v32, a6, a8, v24);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FeedbackGenerator<A>, v20);
  View.platformSensoryFeedback<A>(_:)((uint64_t)v24, v29, v20, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v20);
}

uint64_t View.sensoryFeedback<A>(trigger:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a6;
  v26 = a8;
  v27 = a4;
  v13 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for CustomFeedbackGenerator(0, v17, v18, v16);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v24 = (char *)&v26 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, a1, a5, v22);
  v29 = 0;
  swift_weakInit();
  swift_retain();
  CustomFeedbackGenerator.init(feedbackRequestContext:trigger:feedback:)(&v29, (uint64_t)v15, a2, a3, a5, a7, v24);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomFeedbackGenerator<A>, v19);
  View.platformSensoryFeedback<A>(_:)((uint64_t)v24, v27, v19, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v24, v19);
}

uint64_t type metadata accessor for CustomFeedbackGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CustomFeedbackGenerator);
}

uint64_t CustomFeedbackGenerator.init(feedbackRequestContext:trigger:feedback:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v13;
  int *v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  outlined init with take of FeedbackRequestContext(a1, a7);
  v14 = (int *)type metadata accessor for CustomFeedbackGenerator(0, a5, a6, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(&a7[v14[9]], a2, a5);
  v15 = &a7[v14[10]];
  *(_QWORD *)v15 = a3;
  *((_QWORD *)v15 + 1) = a4;
  v16 = (uint64_t)&a7[v14[11]];
  v18 = 0x3FFFFFFFCLL;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v18, v16, (uint64_t (*)(_QWORD))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?);
  *(_QWORD *)(v16 + 56) = 0;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v18, (uint64_t (*)(_QWORD))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?);
}

uint64_t sub_1870DB310(_QWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA28FeedbackRequestContextWriter33_C9541C03AF81FECFD19A57A1BB81CE81LLVyAA0F9Generator33_E5C2FE5C277CCA85C518490456542950LLVyqd__GGGAaBHPxAaBHD1__AlA0C8ModifierHPyHCHCTm(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for FeedbackGenerator, (uint64_t)&protocol conformance descriptor for FeedbackGenerator<A>);
}

uint64_t sub_1870DB324(_QWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA28FeedbackRequestContextWriter33_C9541C03AF81FECFD19A57A1BB81CE81LLVyAA0F9Generator33_E5C2FE5C277CCA85C518490456542950LLVyqd__GGGAaBHPxAaBHD1__AlA0C8ModifierHPyHCHCTm(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for CustomFeedbackGenerator, (uint64_t)&protocol conformance descriptor for CustomFeedbackGenerator<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA28FeedbackRequestContextWriter33_C9541C03AF81FECFD19A57A1BB81CE81LLVyAA0F9Generator33_E5C2FE5C277CCA85C518490456542950LLVyqd__GGGAaBHPxAaBHD1__AlA0C8ModifierHPyHCHCTm(_QWORD *a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = a1[2];
  v5 = a2(255, a1[1], a1[3]);
  v6 = MEMORY[0x18D75FFDC](a3, v5);
  type metadata accessor for FeedbackRequestContextWriter(255, v5, v6, v7);
  v8 = type metadata accessor for ModifiedContent();
  v10[0] = v4;
  v10[1] = &protocol witness table for FeedbackRequestContextWriter<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v10);
}

uint64_t type metadata completion function for CustomFeedbackGenerator()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for CustomFeedbackGenerator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  swift_weakDestroy();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v7 = (_QWORD *)((v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v7 >> 2 != 0xFFFFFFFFLL && v7[5])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v7 + 2));
  return swift_release();
}

_QWORD *initializeWithCopy for CustomFeedbackGenerator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  *a1 = *a2;
  swift_weakCopyInit();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  swift_retain();
  if (v16 >> 2 == 0xFFFFFFFF)
  {
    v17 = *(_OWORD *)v15;
    v18 = *(_OWORD *)(v15 + 16);
    v19 = *(_OWORD *)(v15 + 32);
    *(_QWORD *)(v14 + 48) = *(_QWORD *)(v15 + 48);
    *(_OWORD *)(v14 + 16) = v18;
    *(_OWORD *)(v14 + 32) = v19;
    *(_OWORD *)v14 = v17;
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
    v20 = (_OWORD *)(v14 + 16);
    v21 = (__int128 *)(v15 + 16);
    v22 = *(_QWORD *)(v15 + 40);
    if (v22)
    {
      *(_QWORD *)(v14 + 40) = v22;
      *(_QWORD *)(v14 + 48) = *(_QWORD *)(v15 + 48);
      (**(void (***)(_OWORD *, __int128 *))(v22 - 8))(v20, v21);
    }
    else
    {
      v23 = *v21;
      v24 = *(_OWORD *)(v15 + 32);
      *(_QWORD *)(v14 + 48) = *(_QWORD *)(v15 + 48);
      *v20 = v23;
      *(_OWORD *)(v14 + 32) = v24;
    }
  }
  *(_QWORD *)(v14 + 56) = *(_QWORD *)(v15 + 56);
  swift_retain();
  return a1;
}

_DWORD *assignWithCopy for CustomFeedbackGenerator(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_weakCopyAssign();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  v14 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(_QWORD *)v14 >> 2 == 0xFFFFFFFFLL)
  {
    if (v16 == 0x3FFFFFFFCLL)
    {
      v17 = *(_OWORD *)v15;
      v18 = *(_OWORD *)(v15 + 16);
      v19 = *(_OWORD *)(v15 + 32);
      *(_QWORD *)(v14 + 48) = *(_QWORD *)(v15 + 48);
      *(_OWORD *)(v14 + 16) = v18;
      *(_OWORD *)(v14 + 32) = v19;
      *(_OWORD *)v14 = v17;
    }
    else
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v23 = (_OWORD *)(v14 + 16);
      v24 = (__int128 *)(v15 + 16);
      v25 = *(_QWORD *)(v15 + 40);
      if (v25)
      {
        *(_QWORD *)(v14 + 40) = v25;
        *(_QWORD *)(v14 + 48) = *(_QWORD *)(v15 + 48);
        (**(void (***)(_OWORD *, __int128 *))(v25 - 8))(v23, v24);
      }
      else
      {
        v27 = *v24;
        v28 = *(_OWORD *)(v15 + 32);
        *(_QWORD *)(v14 + 48) = *(_QWORD *)(v15 + 48);
        *v23 = v27;
        *(_OWORD *)(v14 + 32) = v28;
      }
    }
  }
  else
  {
    if (v16 != 0x3FFFFFFFCLL)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v26 = *(_QWORD *)(v15 + 40);
      if (*(_QWORD *)(v14 + 40))
      {
        if (v26)
        {
          __swift_assign_boxed_opaque_existential_1((uint64_t *)(v14 + 16), (uint64_t *)(v15 + 16));
          goto LABEL_16;
        }
        __swift_destroy_boxed_opaque_existential_1(v14 + 16);
      }
      else if (v26)
      {
        *(_QWORD *)(v14 + 40) = v26;
        *(_QWORD *)(v14 + 48) = *(_QWORD *)(v15 + 48);
        (**(void (***)(uint64_t, uint64_t))(v26 - 8))(v14 + 16, v15 + 16);
        goto LABEL_16;
      }
      v29 = *(_OWORD *)(v15 + 16);
      v30 = *(_OWORD *)(v15 + 32);
      *(_QWORD *)(v14 + 48) = *(_QWORD *)(v15 + 48);
      *(_OWORD *)(v14 + 16) = v29;
      *(_OWORD *)(v14 + 32) = v30;
      goto LABEL_16;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8, (uint64_t (*)(_QWORD))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?));
    v21 = *(_OWORD *)(v15 + 16);
    v20 = *(_OWORD *)(v15 + 32);
    v22 = *(_OWORD *)v15;
    *(_QWORD *)(v14 + 48) = *(_QWORD *)(v15 + 48);
    *(_OWORD *)(v14 + 16) = v21;
    *(_OWORD *)(v14 + 32) = v20;
    *(_OWORD *)v14 = v22;
  }
LABEL_16:
  *(_QWORD *)(v14 + 56) = *(_QWORD *)(v15 + 56);
  swift_retain();
  swift_release();
  return a1;
}

void type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?))
  {
    type metadata accessor for IntelligenceAppIntentsPayloadProviding?(255, &lazy cache variable for type metadata for PlatformSensoryFeedback?, &lazy cache variable for type metadata for PlatformSensoryFeedback);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?));
  }
}

_QWORD *initializeWithTake for CustomFeedbackGenerator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  *a1 = *a2;
  swift_weakTakeInit();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_OWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_OWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = (_OWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_OWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v16 = v14[2];
  v15 = v14[3];
  v17 = v14[1];
  *v13 = *v14;
  v13[1] = v17;
  v13[2] = v16;
  v13[3] = v15;
  return a1;
}

_QWORD *assignWithTake for CustomFeedbackGenerator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  *a1 = *a2;
  swift_weakTakeAssign();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_OWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = v10 + v9;
  v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v11 = *(_OWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v14 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = v13 & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v14 >> 2 == 0xFFFFFFFFLL)
  {
    v16 = *(_OWORD *)v15;
    v17 = *(_OWORD *)(v15 + 16);
    v18 = *(_OWORD *)(v15 + 32);
    *(_QWORD *)(v14 + 48) = *(_QWORD *)(v15 + 48);
    *(_OWORD *)(v14 + 16) = v17;
    *(_OWORD *)(v14 + 32) = v18;
    *(_OWORD *)v14 = v16;
  }
  else if (*(_QWORD *)v15 >> 2 == 0xFFFFFFFFLL)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v14, (uint64_t (*)(_QWORD))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?));
    v20 = *(_OWORD *)(v15 + 16);
    v19 = *(_OWORD *)(v15 + 32);
    v21 = *(_OWORD *)v15;
    *(_QWORD *)(v14 + 48) = *(_QWORD *)(v15 + 48);
    *(_OWORD *)(v14 + 16) = v20;
    *(_OWORD *)(v14 + 32) = v19;
    *(_OWORD *)v14 = v21;
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
    if (*(_QWORD *)(v14 + 40))
      __swift_destroy_boxed_opaque_existential_1(v14 + 16);
    v22 = *(_OWORD *)(v15 + 16);
    v23 = *(_OWORD *)(v15 + 32);
    *(_QWORD *)(v14 + 48) = *(_QWORD *)(v15 + 48);
    *(_OWORD *)(v14 + 16) = v22;
    *(_OWORD *)(v14 + 32) = v23;
  }
  *(_QWORD *)(v14 + 56) = *(_QWORD *)(v15 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomFeedbackGenerator(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v13 = (a1 + v7 + 16) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)((v8 + v13) & 0xFFFFFFFFFFFFF8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v13);
    }
  }
  else
  {
    if (((((((v8 + ((v7 + 16) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 64) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1870DBB24 + 4 * byte_187C08260[v11]))();
  }
}

void storeEnumTagSinglePayload for CustomFeedbackGenerator(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 16) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFC0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 16) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFC0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 16) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 64);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1870DBCC4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1870DBD40);
}

void sub_1870DBCCC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1870DBCD4);
  JUMPOUT(0x1870DBD40);
}

void sub_1870DBD18()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1870DBD40);
}

void sub_1870DBD20()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1870DBD40);
}

uint64_t sub_1870DBD28@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a1)
    JUMPOUT(0x1870DBD40);
  if (a2 < 0x7FFFFFFF)
  {
    if ((a1 & 0x80000000) == 0)
      JUMPOUT(0x1870DBD3CLL);
    JUMPOUT(0x1870DBD34);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))((v6 + v5 + 16) & a3);
}

uint64_t type metadata completion function for FeedbackGenerator()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CustomFeedbackGenerator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  v5 = v4 + ((unsigned __int16)((v3 & 0xF8) + 23) & (unsigned __int16)~(v3 & 0xF8) & 0x1F8);
  swift_retain();
  return v5;
}

uint64_t destroy for FeedbackGenerator(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;

  swift_weakDestroy();
  v4 = (a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v6 = (v4 + *(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(v6);
  v7 = (_QWORD *)((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v7 >= 0xFFFFFFFFuLL)
    swift_release();
  v8 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v8 + 24))
    __swift_destroy_boxed_opaque_existential_1(v8);
  return swift_release();
}

_QWORD *initializeWithCopy for FeedbackGenerator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  v5 = (unint64_t)a2 + 23;
  *a1 = *a2;
  v6 = (unint64_t)a1 + 23;
  swift_weakCopyInit();
  v7 = (_OWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  *v7 = *(_OWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v7 + v9 + 16) & ~v9;
  v11 = (v9 + 16 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  (*(void (**)(uint64_t, unint64_t))(v8 + 16))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = (v12 + v10) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v12 + v11) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v14 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v15 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_QWORD *)(v13 + 8) = v15;
    swift_retain();
  }
  v16 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)(v17 + 24);
  if (v18)
  {
    *(_QWORD *)(v16 + 24) = v18;
    *(_QWORD *)(v16 + 32) = *(_QWORD *)(v17 + 32);
    (**(void (***)(unint64_t, unint64_t))(v18 - 8))(v16, v17);
  }
  else
  {
    v19 = *(_OWORD *)v17;
    v20 = *(_OWORD *)(v17 + 16);
    *(_QWORD *)(v16 + 32) = *(_QWORD *)(v17 + 32);
    *(_OWORD *)v16 = v19;
    *(_OWORD *)(v16 + 16) = v20;
  }
  *(_QWORD *)(v16 + 40) = *(_QWORD *)(v17 + 40);
  swift_retain();
  return a1;
}

_DWORD *assignWithCopy for FeedbackGenerator(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  __int128 v22;
  __int128 v23;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_weakCopyAssign();
  v6 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 16) & ~v9;
  v11 = ((unint64_t)v7 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = (_QWORD *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  v14 = (unint64_t *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = *v14;
  if (*v13 < 0xFFFFFFFFuLL)
  {
    if (v15 >= 0xFFFFFFFF)
    {
      v17 = v14[1];
      *v13 = v15;
      v13[1] = v17;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v15 >= 0xFFFFFFFF)
    {
      v16 = v14[1];
      *v13 = v15;
      v13[1] = v16;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)v13 = *(_OWORD *)v14;
LABEL_8:
  v18 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)(v19 + 24);
  if (!*(_QWORD *)(v18 + 24))
  {
    if (v20)
    {
      *(_QWORD *)(v18 + 24) = v20;
      *(_QWORD *)(v18 + 32) = *(_QWORD *)(v19 + 32);
      (**(void (***)(unint64_t, unint64_t))(v20 - 8))(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8, v19);
      goto LABEL_15;
    }
LABEL_14:
    v22 = *(_OWORD *)v19;
    v23 = *(_OWORD *)(v19 + 16);
    *(_QWORD *)(v18 + 32) = *(_QWORD *)(v19 + 32);
    *(_OWORD *)v18 = v22;
    *(_OWORD *)(v18 + 16) = v23;
    goto LABEL_15;
  }
  v21 = (uint64_t *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (!v20)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_1(v21, (uint64_t *)v19);
LABEL_15:
  *(_QWORD *)(v18 + 40) = *(_QWORD *)(v19 + 40);
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *initializeWithTake for FeedbackGenerator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;

  v5 = (unint64_t)a2 + 23;
  *a1 = *a2;
  v6 = (unint64_t)a1 + 23;
  swift_weakTakeInit();
  v7 = (_OWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  *v7 = *(_OWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v7 + v9 + 16) & ~v9;
  v11 = (v9 + 16 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  (*(void (**)(uint64_t, unint64_t))(v8 + 32))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = (v12 + v10) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v12 + v11) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v14 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v15 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_QWORD *)(v13 + 8) = v15;
  }
  v16 = (_OWORD *)((v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  v17 = (__int128 *)((v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  v18 = *v17;
  v19 = v17[2];
  v16[1] = v17[1];
  v16[2] = v19;
  *v16 = v18;
  return a1;
}

_QWORD *assignWithTake for FeedbackGenerator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;

  v5 = (unint64_t)a2 + 23;
  *a1 = *a2;
  v6 = (unint64_t)a1 + 23;
  swift_weakTakeAssign();
  v7 = (_OWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  *v7 = *(_OWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v7 + v9 + 16) & ~v9;
  v11 = (v9 + 16 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  (*(void (**)(uint64_t, unint64_t))(v8 + 40))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = (_QWORD *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  v14 = (unint64_t *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = *v14;
  if (*v13 < 0xFFFFFFFFuLL)
  {
    if (v15 >= 0xFFFFFFFF)
    {
      v17 = v14[1];
      *v13 = v15;
      v13[1] = v17;
      goto LABEL_8;
    }
  }
  else
  {
    if (v15 >= 0xFFFFFFFF)
    {
      v16 = v14[1];
      *v13 = v15;
      v13[1] = v16;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)v13 = *(_OWORD *)v14;
LABEL_8:
  v18 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v18 + 24))
    __swift_destroy_boxed_opaque_existential_1(v18);
  v19 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_OWORD *)v19;
  v21 = *(_OWORD *)(v19 + 16);
  *(_QWORD *)(v18 + 32) = *(_QWORD *)(v19 + 32);
  *(_OWORD *)v18 = v20;
  *(_OWORD *)(v18 + 16) = v21;
  *(_QWORD *)(v18 + 40) = *(_QWORD *)(v19 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FeedbackGenerator(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    v12 = (_QWORD *)((a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v12 + v7 + 16) & ~v7);
    }
    else
    {
      v13 = *v12 >> 2;
      if (v13 > 0x80000000)
        return -(int)v13;
      else
        return 0;
    }
  }
  else
  {
    if (((((((*(_QWORD *)(v4 + 64) + ((v7 + 32) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 48) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1870DC43C + 4 * byte_187C0826F[v10]))();
  }
}

void storeEnumTagSinglePayload for FeedbackGenerator(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 32) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFD0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 32) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFD0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + ((v7 + 32) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 48);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1870DC5D4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1870DC648);
}

void sub_1870DC5DC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1870DC5E4);
  JUMPOUT(0x1870DC648);
}

void sub_1870DC600()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1870DC648);
}

void sub_1870DC608()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1870DC648);
}

void sub_1870DC610(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x1870DC644);
      JUMPOUT(0x1870DC640);
    }
    JUMPOUT(0x1870DC61CLL);
  }
  JUMPOUT(0x1870DC648);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in FeedbackGenerator<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t FeedbackGenerator.implementation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE v6[40];

  v4 = v2 + *(int *)(a2 + 48);
  outlined init with copy of PlatformSensoryFeedback?(a1, (uint64_t)v6);
  if (*(_QWORD *)(v4 + 40))
    dispatch thunk of AnyLocation.set(_:transaction:)();
  outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v6, &lazy cache variable for type metadata for PlatformSensoryFeedback?, &lazy cache variable for type metadata for PlatformSensoryFeedback);
  return outlined destroy of LocationBasedSensoryFeedback?(a1, &lazy cache variable for type metadata for PlatformSensoryFeedback?, &lazy cache variable for type metadata for PlatformSensoryFeedback);
}

void (*FeedbackGenerator.implementation.modify(_QWORD *a1, uint64_t a2))(_QWORD **a1, char a2)
{
  uint64_t v2;
  void *v5;

  v5 = malloc(0x80uLL);
  *a1 = v5;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2 + *(int *)(a2 + 48), (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for State<PlatformSensoryFeedback?>);
  type metadata accessor for State<PlatformSensoryFeedback?>();
  State.wrappedValue.getter();
  return FeedbackGenerator.implementation.modify;
}

void FeedbackGenerator.implementation.modify(_QWORD **a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *a1;
  v3 = (uint64_t)(*a1 + 6);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of PlatformSensoryFeedback?((uint64_t)(*a1 + 6), (uint64_t)(v2 + 11));
    if (v2[5])
      dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined destroy of LocationBasedSensoryFeedback?((uint64_t)(v2 + 11), &lazy cache variable for type metadata for PlatformSensoryFeedback?, &lazy cache variable for type metadata for PlatformSensoryFeedback);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v2, (uint64_t (*)(_QWORD))type metadata accessor for State<PlatformSensoryFeedback?>);
    outlined destroy of LocationBasedSensoryFeedback?(v3, &lazy cache variable for type metadata for PlatformSensoryFeedback?, &lazy cache variable for type metadata for PlatformSensoryFeedback);
  }
  else
  {
    if (v2[5])
      dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined destroy of LocationBasedSensoryFeedback?(v3, &lazy cache variable for type metadata for PlatformSensoryFeedback?, &lazy cache variable for type metadata for PlatformSensoryFeedback);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v2, (uint64_t (*)(_QWORD))type metadata accessor for State<PlatformSensoryFeedback?>);
  }
  free(v2);
}

uint64_t FeedbackGenerator.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  void (*v52)(unint64_t, char *, uint64_t);
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[2];
  _QWORD v71[2];
  _QWORD v72[2];
  __int128 v73;

  v68 = a3;
  v5 = *(_QWORD *)(a2 + 16);
  v61 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v60 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority();
  v58 = *(_QWORD *)(v7 - 8);
  v59 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v55 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a2 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FeedbackGenerator<A>, a2, v14);
  v15 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for _TaskValueModifier<SensoryFeedback>(255);
  v16 = type metadata accessor for ModifiedContent();
  v66 = *(_QWORD *)(v16 - 8);
  v57 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v69 = (uint64_t)&v50 - v18;
  v19 = *(_QWORD *)(a2 + 24);
  v50 = v5;
  v20 = v19;
  v53 = v19;
  v63 = type metadata accessor for _ValueActionModifier2();
  v64 = type metadata accessor for ModifiedContent();
  v65 = type metadata accessor for ModifiedContent();
  v67 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65, v21);
  v56 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v62 = (char *)&v50 - v25;
  v26 = v3;
  v51 = v3;
  v73 = *(_OWORD *)(v3 + 16);
  v54 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v27 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54(v27, v26, a2);
  v28 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = v5;
  *(_QWORD *)(v29 + 24) = v20;
  v52 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v52(v29 + v28, v27, a2);
  v30 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v15);
  v31 = lazy protocol witness table accessor for type SensoryFeedback and conformance SensoryFeedback();
  v32 = (uint64_t)v55;
  static TaskPriority.userInitiated.getter();
  View.task<A>(id:priority:_:)((uint64_t)&v73, v32, (uint64_t)&async function pointer to partial apply for closure #1 in FeedbackGenerator.body(content:), v29, v15, (uint64_t)&type metadata for SensoryFeedback, v30, v31, v69);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v32, v59);
  v33 = v51;
  v34 = v60;
  v35 = v61;
  v36 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v60, v51 + *(int *)(a2 + 40), v50);
  v54(v27, v33, a2);
  v37 = swift_allocObject();
  v38 = v53;
  *(_QWORD *)(v37 + 16) = v36;
  *(_QWORD *)(v37 + 24) = v38;
  v52(v37 + v28, v27, a2);
  v72[0] = v30;
  v72[1] = &protocol witness table for _TaskValueModifier<A>;
  v39 = MEMORY[0x1E0CE2E70];
  v40 = v57;
  v41 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v57, v72);
  v42 = v56;
  v43 = v69;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v36);
  (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v43, v40);
  v44 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5300], v63);
  v71[0] = v41;
  v71[1] = v44;
  v70[0] = MEMORY[0x18D75FFDC](v39, v64, v71);
  v70[1] = MEMORY[0x1E0CE5EF8];
  v45 = v65;
  v46 = MEMORY[0x18D75FFDC](v39, v65, v70);
  v47 = (uint64_t)v62;
  static ViewBuilder.buildExpression<A>(_:)(v42, v45, v46);
  v48 = *(void (**)(char *, uint64_t))(v67 + 8);
  v48(v42, v45);
  static ViewBuilder.buildBlock<A>(_:)(v47, v45, v68);
  return ((uint64_t (*)(uint64_t, uint64_t))v48)(v47, v45);
}

uint64_t closure #1 in FeedbackGenerator.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  type metadata accessor for MainActor();
  v3[9] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in FeedbackGenerator.body(content:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD **, char);
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void (*v11)(_QWORD **, char);
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[40];

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 56);
  swift_release();
  v4 = type metadata accessor for FeedbackGenerator(0, v2, v1, v3);
  v6 = FeedbackGenerator.implementation.modify((_QWORD *)(v0 + 16), v4);
  v7 = *(_QWORD *)(v5 + 24);
  if (v7)
  {
    v8 = *(_QWORD *)(v5 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v5, *(_QWORD *)(v5 + 24));
    (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
  }
  v6((_QWORD **)(v0 + 16), 0);
  v9 = *(_QWORD **)(v0 + 48);
  outlined init with copy of FeedbackRequestContext(v9, (_QWORD *)(v0 + 16));
  FeedbackRequestContext.implementation(type:)(v9[2], v9[3], (uint64_t)v15);
  outlined destroy of FeedbackRequestContext(v0 + 16);
  FeedbackGenerator.implementation.setter((uint64_t)v15, v4);
  v11 = FeedbackGenerator.implementation.modify((_QWORD *)(v0 + 16), v4);
  v12 = *(_QWORD *)(v10 + 24);
  if (v12)
  {
    v13 = *(_QWORD *)(v10 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v10, *(_QWORD *)(v10 + 24));
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  }
  v11((_QWORD **)(v0 + 16), 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in FeedbackGenerator.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t (*v28)(char *, char *);
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t result;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  void (*v36)(_QWORD **, char);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[4];

  v41 = a1;
  v42 = a2;
  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v40 - v13;
  v17 = type metadata accessor for FeedbackGenerator(0, v15, v16, v15);
  v43 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v40 - v19;
  v22 = (uint64_t *)(a3 + *(int *)(v21 + 44));
  v23 = *v22;
  v24 = v22[1];
  if (!*v22)
  {
    outlined copy of AppIntentExecutor?(0);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
    v32 = v43;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v20, a3, v17);
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v33(v14, v41, a4);
    v33(v10, v42, a4);
    v34 = *(void (**)(char *, uint64_t))(v8 + 8);
    v34(v10, a4);
    v34(v14, a4);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v20, v17);
LABEL_6:
    v36 = FeedbackGenerator.implementation.modify(v44, v17);
    v37 = *(_QWORD *)(v35 + 24);
    if (v37)
    {
      v38 = *(_QWORD *)(v35 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v35, *(_QWORD *)(v35 + 24));
      (*(void (**)(uint64_t, uint64_t))(v38 + 24))(v37, v38);
    }
    return ((uint64_t (*)(_QWORD *, _QWORD))v36)(v44, 0);
  }
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = a4;
  v25[3] = a5;
  v25[4] = v23;
  v25[5] = v24;
  outlined copy of AppIntentExecutor?(v23);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed A) -> (@unowned Bool));
  v26 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v20, a3, v17);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v27(v14, v41, a4);
  v27(v10, v42, a4);
  v28 = *(uint64_t (**)(char *, char *))&v20[*(int *)(v17 + 44)];
  if (!v28)
  {
    v39 = *(void (**)(char *, uint64_t))(v8 + 8);
    v39(v10, a4);
    v39(v14, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v20, v17);
  }
  v29 = v28(v14, v10);
  v30 = *(void (**)(char *, uint64_t))(v8 + 8);
  v30(v10, a4);
  v30(v14, a4);
  result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v20, v17);
  if ((v29 & 1) != 0)
    goto LABEL_6;
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in CustomFeedbackGenerator<A>()
{
  return swift_getOpaqueTypeConformance2();
}

_QWORD *protocol witness for SensoryFeedbackGeneratorModifier.feedbackRequestContext.setter in conformance FeedbackGenerator<A>(_QWORD *a1)
{
  _QWORD *v1;

  return outlined assign with take of FeedbackRequestContext(a1, v1);
}

void (*CustomFeedbackGenerator.state.modify(_QWORD *a1, uint64_t a2))(_QWORD **a1, char a2)
{
  uint64_t v2;
  void *v5;

  v5 = malloc(0xB0uLL);
  *a1 = v5;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2 + *(int *)(a2 + 44), (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>);
  type metadata accessor for State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>(0);
  State.wrappedValue.getter();
  return CustomFeedbackGenerator.state.modify;
}

void CustomFeedbackGenerator.state.modify(_QWORD **a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);

  v2 = *a1;
  v3 = (uint64_t)(*a1 + 8);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)(*a1 + 8), (uint64_t)(v2 + 15), (uint64_t (*)(_QWORD))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?);
    if (v2[7])
      dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)(v2 + 15), (uint64_t (*)(_QWORD))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v2, (uint64_t (*)(_QWORD))type metadata accessor for State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>);
    v4 = v3;
    v5 = type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?;
  }
  else
  {
    if (v2[7])
      dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v3, (uint64_t (*)(_QWORD))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?);
    v5 = type metadata accessor for State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>;
    v4 = (uint64_t)v2;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v4, (uint64_t (*)(_QWORD))v5);
  free(v2);
}

uint64_t CustomFeedbackGenerator.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  _QWORD v45[2];

  v43 = a3;
  v5 = *(_QWORD *)(a2 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = *(_QWORD *)(v7 + 16);
  v36 = *(_QWORD *)(v8 - 8);
  v9 = v36;
  v11 = MEMORY[0x1E0C80A78](v10, v7);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v13;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomFeedbackGenerator<A>, v11);
  v14 = type metadata accessor for _ViewModifier_Content();
  v37 = *(_QWORD *)(a2 + 24);
  v38 = v14;
  v40 = type metadata accessor for _ValueActionModifier2();
  v41 = type metadata accessor for ModifiedContent();
  v15 = type metadata accessor for ModifiedContent();
  v42 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v39 = (char *)&v34 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v13, v3 + *(int *)(a2 + 36), v8, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2);
  v23 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v24 = swift_allocObject();
  v25 = v37;
  *(_QWORD *)(v24 + 16) = v8;
  *(_QWORD *)(v24 + 24) = v25;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v24 + v23, (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  v26 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v38);
  v27 = v35;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v27, v8);
  v28 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5300], v40);
  v45[0] = v26;
  v45[1] = v28;
  v29 = MEMORY[0x1E0CE2E70];
  v44[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v41, v45);
  v44[1] = MEMORY[0x1E0CE5EF8];
  v30 = MEMORY[0x18D75FFDC](v29, v15, v44);
  v31 = (uint64_t)v39;
  static ViewBuilder.buildExpression<A>(_:)(v18, v15, v30);
  v32 = *(void (**)(char *, uint64_t))(v42 + 8);
  v32(v18, v15);
  static ViewBuilder.buildBlock<A>(_:)(v31, v15, v43);
  return ((uint64_t (*)(uint64_t, uint64_t))v32)(v31, v15);
}

uint64_t closure #1 in CustomFeedbackGenerator.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  void (*v15)(_QWORD **, char);
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void (*v19)(_QWORD **, char);
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(_QWORD **, char);
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28[8];
  unint64_t v29;
  unint64_t v30;

  v8 = type metadata accessor for CustomFeedbackGenerator(0, a4, a5, a4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + *(int *)(v8 + 40)))(v28, a1, a2);
  v9 = v28[0];
  v27 = v28[1];
  v10 = a3 + *(int *)(v8 + 44);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v10, (uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>);
  type metadata accessor for State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>(0);
  State.wrappedValue.getter();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>);
  if ((v29 & 0xFFFFFFFFFFFFFFFCLL) == 0x3FFFFFFFCLL)
    v11 = 0x3FFFFFFFCLL;
  else
    v11 = v29;
  if ((v29 & 0xFFFFFFFFFFFFFFFCLL) == 0x3FFFFFFFCLL)
    v12 = 0;
  else
    v12 = v30;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v29, (uint64_t (*)(_QWORD))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?);
  v13 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  if (v11 >> 2 == 0xFFFFFFFF)
  {
    if (v13 == 0x3FFFFFFFCLL)
      goto LABEL_24;
  }
  else if (v13 != 0x3FFFFFFFCLL
         && (specialized static SensoryFeedback.FeedbackType.== infix(_:_:)(v11, v12, v9, v27) & 1) != 0)
  {
    goto LABEL_24;
  }
  v15 = CustomFeedbackGenerator.state.modify(v28, v8);
  if (*v14 >> 2 != 0xFFFFFFFFLL)
  {
    v16 = v14[5];
    if (v16)
    {
      v17 = v14[6];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v14 + 2), v14[5]);
      (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
    }
  }
  v15((_QWORD **)v28, 0);
  if (v13 == 0x3FFFFFFFCLL)
  {
    v28[0] = 0x3FFFFFFFCLL;
    memset(&v28[1], 0, 48);
  }
  else
  {
    v29 = v9;
    v30 = v27;
    closure #1 in closure #1 in CustomFeedbackGenerator.body(content:)(v28, (uint64_t)&v28[2], (uint64_t *)&v29);
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v28, (uint64_t)&v29, (uint64_t (*)(_QWORD))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?);
  if (*(_QWORD *)(v10 + 56))
    dispatch thunk of AnyLocation.set(_:transaction:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v29, (uint64_t (*)(_QWORD))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?);
  v19 = CustomFeedbackGenerator.state.modify(&v29, v8);
  if (*v18 >> 2 != 0xFFFFFFFFLL)
  {
    v20 = v18[5];
    if (v20)
    {
      v21 = v18[6];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v18 + 2), v18[5]);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
    }
  }
  v19((_QWORD **)&v29, 0);
LABEL_24:
  v23 = CustomFeedbackGenerator.state.modify(v28, v8);
  if (*v22 >> 2 != 0xFFFFFFFFLL)
  {
    v24 = v22[5];
    if (v24)
    {
      v25 = v22[6];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v22 + 2), v22[5]);
      (*(void (**)(uint64_t, uint64_t))(v25 + 24))(v24, v25);
    }
  }
  return ((uint64_t (*)(uint64_t *, _QWORD))v23)(v28, 0);
}

uint64_t closure #1 in closure #1 in CustomFeedbackGenerator.body(content:)(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int Attribute;
  int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12[2];

  v4 = *a3;
  v5 = a3[1];
  *a1 = *a3;
  a1[1] = v5;
  result = swift_weakLoadStrong();
  if (!result)
    goto LABEL_6;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)result + 80))(&v10, v4, v5);
  if (!v11)
  {
    swift_release();
    result = outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v10, &lazy cache variable for type metadata for LocationBasedSensoryFeedback?, (unint64_t *)&lazy cache variable for type metadata for LocationBasedSensoryFeedback);
    goto LABEL_6;
  }
  outlined init with take of OptionalBinaryInteger(&v10, (uint64_t)v12);
  Attribute = AGWeakAttributeGetAttribute();
  v8 = *MEMORY[0x1E0CFED28];
  swift_release();
  if (Attribute == v8)
  {
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
LABEL_6:
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  *(_QWORD *)(a2 + 24) = &type metadata for LocationBasedFeedbackAdaptor;
  *(_QWORD *)(a2 + 32) = &protocol witness table for LocationBasedFeedbackAdaptor;
  v9 = swift_allocObject();
  *(_QWORD *)a2 = v9;
  result = outlined init with take of OptionalBinaryInteger(v12, v9 + 24);
  *(_DWORD *)(v9 + 16) = Attribute;
  return result;
}

uint64_t instantiation function for generic protocol witness table for CustomFeedbackGenerator<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomFeedbackGenerator<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for FeedbackGenerator<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FeedbackGenerator<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *outlined assign with take of FeedbackRequestContext(_QWORD *a1, _QWORD *a2)
{
  assignWithTake for FeedbackRequestContext(a2, a1);
  return a2;
}

uint64_t sub_1870DDAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for CustomFeedbackGenerator(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  swift_weakDestroy();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8 + *(int *)(v6 + 36), v5);
  swift_release();
  v9 = (_QWORD *)(v8 + *(int *)(v6 + 44));
  if (*v9 >> 2 != 0xFFFFFFFFLL && v9[5])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v9 + 2));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CustomFeedbackGenerator.body(content:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in CustomFeedbackGenerator.body(content:)(a1, a2, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for CustomFeedbackGenerator, closure #1 in CustomFeedbackGenerator.body(content:));
}

void type metadata accessor for State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for State<(feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?>, (uint64_t (*)(uint64_t))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
}

void type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?)?, (uint64_t (*)(uint64_t))type metadata accessor for (feedback: SensoryFeedback, implementation: PlatformSensoryFeedback?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1870DDBC8()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocObject();
}

void type metadata accessor for _TaskValueModifier<SensoryFeedback>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _TaskValueModifier<SensoryFeedback>)
  {
    v2 = lazy protocol witness table accessor for type SensoryFeedback and conformance SensoryFeedback();
    v4 = type metadata accessor for _TaskValueModifier(a1, (uint64_t)&type metadata for SensoryFeedback, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _TaskValueModifier<SensoryFeedback>);
  }
}

unint64_t lazy protocol witness table accessor for type SensoryFeedback and conformance SensoryFeedback()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SensoryFeedback and conformance SensoryFeedback;
  if (!lazy protocol witness table cache variable for type SensoryFeedback and conformance SensoryFeedback)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SensoryFeedback, &type metadata for SensoryFeedback);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SensoryFeedback and conformance SensoryFeedback);
  }
  return result;
}

uint64_t partial apply for closure #1 in FeedbackGenerator.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FeedbackGenerator(0, v6, v7, a4) - 8) + 80);
  v9 = v4 + ((v8 + 32) & ~v8);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in FeedbackGenerator.body(content:)(v9, v6, v7);
}

uint64_t partial apply for closure #1 in FeedbackGenerator.body(content:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t objectdestroy_7Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for FeedbackGenerator(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*((_QWORD *)v6 - 1) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  swift_weakDestroy();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8 + v6[10], v5);
  if (*(_QWORD *)(v8 + v6[11]))
    swift_release();
  v9 = v8 + v6[12];
  if (*(_QWORD *)(v9 + 24))
    __swift_destroy_boxed_opaque_existential_1(v9);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in FeedbackGenerator.body(content:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in CustomFeedbackGenerator.body(content:)(a1, a2, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FeedbackGenerator, closure #2 in FeedbackGenerator.body(content:));
}

uint64_t partial apply for closure #1 in CustomFeedbackGenerator.body(content:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(a3(0, v7, v8) - 8) + 80);
  return a4(a1, a2, v4 + ((v9 + 32) & ~v9), v7, v8);
}

uint64_t sub_1870DDEB0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed A) -> (@unowned Bool)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 32))();
  *a1 = result & 1;
  return result;
}

void type metadata accessor for State<PlatformSensoryFeedback?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for State<PlatformSensoryFeedback?>)
  {
    type metadata accessor for IntelligenceAppIntentsPayloadProviding?(255, &lazy cache variable for type metadata for PlatformSensoryFeedback?, &lazy cache variable for type metadata for PlatformSensoryFeedback);
    v0 = type metadata accessor for State();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for State<PlatformSensoryFeedback?>);
  }
}

uint64_t outlined init with copy of PlatformSensoryFeedback?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for IntelligenceAppIntentsPayloadProviding?(0, &lazy cache variable for type metadata for PlatformSensoryFeedback?, &lazy cache variable for type metadata for PlatformSensoryFeedback);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *outlined init with copy of FeedbackRequestContext(_QWORD *a1, _QWORD *a2)
{
  initializeWithCopy for FeedbackRequestContext(a2, a1);
  return a2;
}

uint64_t outlined destroy of FeedbackRequestContext(uint64_t a1)
{
  destroy for FeedbackRequestContext();
  return a1;
}

_QWORD *outlined init with take of FeedbackRequestContext(_QWORD *a1, _QWORD *a2)
{
  initializeWithTake for FeedbackRequestContext(a2, a1);
  return a2;
}

uint64_t sub_1870DE074(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];

  v4 = type metadata accessor for CustomFeedbackGenerator(255, *a1, a1[1], a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomFeedbackGenerator<A>, v4);
  v5 = type metadata accessor for _ViewModifier_Content();
  v6 = type metadata accessor for _ValueActionModifier2();
  v7 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for ModifiedContent();
  v12[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v5);
  v12[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5300], v6);
  v9 = MEMORY[0x1E0CE2E70];
  v11[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v12);
  v11[1] = MEMORY[0x1E0CE5EF8];
  return MEMORY[0x18D75FFDC](v9, v8, v11);
}

uint64_t sub_1870DE174(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];

  v4 = type metadata accessor for FeedbackGenerator(255, *a1, a1[1], a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FeedbackGenerator<A>, v4);
  v5 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for _TaskValueModifier<SensoryFeedback>(255);
  v6 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for _ValueActionModifier2();
  v8 = type metadata accessor for ModifiedContent();
  v9 = type metadata accessor for ModifiedContent();
  v14[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v5);
  v14[1] = &protocol witness table for _TaskValueModifier<A>;
  v10 = MEMORY[0x1E0CE2E70];
  v13[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v14);
  v13[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5300], v7);
  v12[0] = MEMORY[0x18D75FFDC](v10, v8, v13);
  v12[1] = MEMORY[0x1E0CE5EF8];
  return MEMORY[0x18D75FFDC](v10, v9, v12);
}

unint64_t FillShapeStyle._apply(to:)(uint64_t a1)
{
  unint64_t v3;

  swift_retain();
  swift_retain();
  EnvironmentValues.backgroundMaterial.getter();
  if (v3 == 8)
  {
    swift_release();
    swift_release();
    __asm { BR              X10 }
  }
  swift_release();
  swift_release();
  *(_BYTE *)(a1 + 105) = 0;
  ForegroundMaterialStyle._apply(to:)();
  return outlined consume of Material?(v3);
}

void FillShapeStyle.Kind.resolve(in:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1870DE704()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  double v3;
  double v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  EnvironmentValues.colorScheme.getter();
  v7 = v1;
  v8 = v0;
  EnvironmentValues.colorSchemeContrast.getter();
  v3 = 0.2;
  if (v6)
    v3 = 0.28;
  v4 = 0.36;
  if (v6)
    v4 = 0.44;
  if (v9)
    v2.n128_f64[0] = v4;
  else
    v2.n128_f64[0] = v3;
  LOBYTE(v7) = 0;
  return MEMORY[0x18D75B6A4](&v7, 0.470588235, 0.470588235, 0.501960784, v2);
}

ValueMetadata *type metadata accessor for FillShapeStyle()
{
  return &type metadata for FillShapeStyle;
}

uint64_t View.onDrop(of:isTargeted:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[5];
  _BYTE v20[40];

  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a5;
  *(_QWORD *)(v16 + 24) = a6;
  v19[3] = &type metadata for ItemProviderDropAction;
  v19[4] = &protocol witness table for ItemProviderDropAction;
  v17 = (_QWORD *)swift_allocObject();
  v19[0] = v17;
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = partial apply for closure #1 in View.onDrop(of:isTargeted:perform:);
  v17[5] = v16;
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(a2, a3);
  swift_retain();
  DropModifier.init(isEnabled:of:isTargeted:perform:proposal:)(1, a1, a2, a3, a4, (uint64_t)v19, 0, 0, (uint64_t)v20);
  MEMORY[0x18D75B4AC](v20, a7, &type metadata for DropModifier, a8);
  return outlined destroy of DropModifier((uint64_t)v20);
}

{
  _QWORD *v16;
  _QWORD v18[5];
  _BYTE v19[40];

  v18[3] = &type metadata for ItemProviderDropAction;
  v18[4] = &protocol witness table for ItemProviderDropAction;
  v16 = (_QWORD *)swift_allocObject();
  v18[0] = v16;
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = a5;
  v16[5] = a6;
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(a2, a3);
  swift_retain();
  DropModifier.init(isEnabled:of:isTargeted:perform:proposal:)(1, a1, a2, a3, a4, (uint64_t)v18, 0, 0, (uint64_t)v19);
  MEMORY[0x18D75B4AC](v19, a7, &type metadata for DropModifier, a8);
  return outlined destroy of DropModifier((uint64_t)v19);
}

uint64_t sub_1870DEA4C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined destroy of DropModifier(uint64_t a1)
{
  destroy for _PresentationTransitionOutputs(a1);
  return a1;
}

uint64_t View.onDrop(of:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10[2];
  _OWORD v11[2];
  uint64_t v12;

  outlined init with copy of TableColumnList(a2, (uint64_t)v10);
  v9 = 0;
  v7 = 0u;
  v8 = 0u;
  outlined destroy of DropDelegate?((uint64_t)&v7);
  outlined init with take of OptionalBinaryInteger(v10, (uint64_t)&v7);
  v11[0] = v7;
  v11[1] = v8;
  v12 = v9;
  MEMORY[0x18D75B4AC](v11, a3, &type metadata for DropModifier, a4);
  return outlined destroy of DropModifier((uint64_t)v11);
}

uint64_t outlined destroy of DropDelegate?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for DropDelegate?(0, (unint64_t *)&lazy cache variable for type metadata for DropDelegate?, &lazy cache variable for type metadata for DropDelegate, (uint64_t)&protocol descriptor for DropDelegate, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t View.dropDestination<A>(for:action:isTargeted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD v25[5];
  _QWORD v26[2];
  char v27;

  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = a4;
  v16[5] = a5;
  swift_retain();
  Binding.init(get:set:)();
  v17 = v26[0];
  v18 = v26[1];
  v19 = v27;
  v20 = MEMORY[0x18D754DF8](a7, a9);
  v25[3] = type metadata accessor for TransferableDropAction(0, a7, a9, v21);
  v25[4] = &protocol witness table for TransferableDropAction<A>;
  v22 = (_QWORD *)swift_allocObject();
  v25[0] = v22;
  v22[2] = 0;
  v22[3] = 0;
  v22[4] = a2;
  v22[5] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  DropModifier.init(isEnabled:of:isTargeted:perform:proposal:)(1, v20, v17, v18, v19, (uint64_t)v25, 0, 0, (uint64_t)v26);
  MEMORY[0x18D75B4AC](v26, a6, &type metadata for DropModifier, a8);
  swift_release();
  swift_release();
  return outlined destroy of DropModifier((uint64_t)v26);
}

uint64_t TransferableDropAction.init(action:)()
{
  return 0;
}

uint64_t type metadata accessor for TransferableDropAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TransferableDropAction);
}

uint64_t objectdestroy_2Tm_2()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t View.dropDestination<A>(for:isEnabled:action:isTargeted:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v26[5];
  _QWORD v27[2];
  char v28;

  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = a5;
  v17[5] = a6;
  swift_retain();
  Binding.init(get:set:)();
  v18 = v27[0];
  v19 = v27[1];
  v20 = v28;
  v21 = MEMORY[0x18D754DF8](a8, a10);
  v26[3] = type metadata accessor for TransferableDropAction(0, a8, a10, v22);
  v26[4] = &protocol witness table for TransferableDropAction<A>;
  v23 = (_QWORD *)swift_allocObject();
  v26[0] = v23;
  v23[2] = 0;
  v23[3] = 0;
  v23[4] = a3;
  v23[5] = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  DropModifier.init(isEnabled:of:isTargeted:perform:proposal:)(a2, v21, v18, v19, v20, (uint64_t)v26, 0, 0, (uint64_t)v27);
  MEMORY[0x18D75B4AC](v27, a7, &type metadata for DropModifier, a9);
  swift_release();
  swift_release();
  return outlined destroy of DropModifier((uint64_t)v27);
}

uint64_t sub_1870DF038()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t View.dropDestination<A>(for:isEnabled:action:isTargeted:dropProposal:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD v28[5];
  _QWORD v29[2];
  char v30;

  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = 0;
  v19[3] = 0;
  v19[4] = a5;
  v19[5] = a6;
  swift_retain();
  Binding.init(get:set:)();
  v20 = v29[0];
  v21 = v29[1];
  v22 = v30;
  v23 = MEMORY[0x18D754DF8](a10, a12);
  v28[3] = type metadata accessor for TransferableDropAction(0, a10, a12, v24);
  v28[4] = &protocol witness table for TransferableDropAction<A>;
  v25 = (_QWORD *)swift_allocObject();
  v28[0] = v25;
  v25[2] = 0;
  v25[3] = 0;
  v25[4] = a3;
  v25[5] = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  DropModifier.init(isEnabled:of:isTargeted:perform:proposal:)(a2, v23, v20, v21, v22, (uint64_t)v28, a7, a8, (uint64_t)v29);
  MEMORY[0x18D75B4AC](v29, a9, &type metadata for DropModifier, a11);
  swift_release();
  swift_release();
  return outlined destroy of DropModifier((uint64_t)v29);
}

uint64_t objectdestroy_9Tm_0()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in View.dropDestination<A>(for:action:isTargeted:)(unsigned __int8 *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 32))(*a1);
}

void View.listRowDropDestination<A>(for:action:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t View.onDrop<A>(of:delegate:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;
  __int128 v22[3];

  outlined init with copy of TableColumnList(a2, (uint64_t)v22);
  v19 = 0;
  v17 = 0u;
  v18 = 0u;
  outlined destroy of DropDelegate?((uint64_t)&v17);
  outlined init with take of OptionalBinaryInteger(v22, (uint64_t)&v17);
  v20[0] = v17;
  v20[1] = v18;
  v21 = v19;
  DropPreviewModifier.init(base:preview:)((uint64_t)v20, a3, a4, (uint64_t)v22);
  v15 = type metadata accessor for DropPreviewModifier(0, a6, a8, v14);
  swift_retain();
  MEMORY[0x18D75B4AC](v22, a5, v15, a7);
  return (*(uint64_t (**)(__int128 *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v22, v15);
}

double DropPreview.center.getter(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 40));
}

uint64_t DropPreview.center.setter(uint64_t result, double a2, double a3)
{
  uint64_t v3;
  double *v4;

  v4 = (double *)(v3 + *(int *)(result + 40));
  *v4 = a2;
  v4[1] = a3;
  return result;
}

uint64_t (*DropPreview.center.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t DropPreview.init(center:_:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;

  v12 = type metadata accessor for DropPreview(0, a2, a3, a3);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4 + *(int *)(v12 + 36), 1, 1, a2);
  v14 = (double *)(a4 + *(int *)(v12 + 40));
  *v14 = a5;
  v14[1] = a6;
  a1(v13);
  type metadata accessor for DropPreview.Storage(0, a2, a3, v15);
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for DropPreview(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DropPreview);
}

uint64_t type metadata accessor for DropPreview.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DropPreview.Storage);
}

uint64_t DropPreview.view()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  void (**v11)(void);
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = v3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = type metadata accessor for DropPreview.Storage(0, v6, *(_QWORD *)(a1 + 24), a2);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (void (**)(void))((char *)&v15 - v10);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v15 - v10, v4, v7, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*v11)();
    return swift_release();
  }
  else
  {
    v14 = *(_QWORD *)(v6 - 8);
    (*(void (**)(uint64_t, void (**)(void), uint64_t))(v14 + 32))(a3, v11, v6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v6);
  }
}

double DefaultDragDropPreview.center.getter()
{
  id *v0;
  id v1;
  double v2;
  double v3;

  v1 = objc_msgSend(*v0, sel_target);
  objc_msgSend(v1, sel_center);
  v3 = v2;

  return v3;
}

uint64_t protocol witness for DropAction.cleanupAction.setter in conformance ItemProviderDropAction(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t result;

  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v2);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

Swift::Bool __swiftcall TransferableDropAction.perform(_:_:)(Swift::OpaquePointer a1, CGPoint a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CGFloat y;
  CGFloat x;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  NSObject *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  _QWORD *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  CGFloat *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char *v42;
  uint64_t (*v43)(uint64_t);
  char *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD aBlock[6];
  uint64_t v57;

  v8 = v7;
  v9 = v6;
  v49 = v3;
  v50 = v5;
  v10 = v4;
  v48 = v2;
  y = a2.y;
  x = a2.x;
  v14 = type metadata accessor for DispatchWorkItemFlags();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS();
  v52 = *(_QWORD *)(v19 - 8);
  v53 = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v51 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = dispatch_group_create();
  v57 = static Array._allocateUninitialized(_:)();
  type metadata accessor for Array();
  AtomicBox.init(wrappedValue:)();
  v23 = aBlock[0];
  if ((unint64_t)a1._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v25 = _CocoaArrayWrapper.endIndex.getter();
    v24 = v25;
    v54 = v18;
    v55 = v15;
    if (v25)
      goto LABEL_3;
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v24 = *(_QWORD *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  LOBYTE(v25) = swift_bridgeObjectRetain();
  v54 = v18;
  v55 = v15;
  if (!v24)
    goto LABEL_12;
LABEL_3:
  if (v24 < 1)
  {
    __break(1u);
    return v25;
  }
  v46 = v10;
  v47 = v14;
  if (((unint64_t)a1._rawValue & 0xC000000000000001) != 0)
  {
    v26 = 0;
    do
    {
      MEMORY[0x18D75E3BC](v26++, a1._rawValue);
      dispatch_group_enter(v22);
      v27 = (_QWORD *)swift_allocObject();
      v27[2] = v9;
      v27[3] = v8;
      v27[4] = v22;
      v27[5] = v23;
      v28 = v22;
      swift_retain();
      v29 = (void *)NSItemProvider.loadTransferable<A>(type:completionHandler:)();
      swift_unknownObjectRelease();

      swift_release();
    }
    while (v24 != v26);
  }
  else
  {
    v30 = 0;
    do
    {
      v31 = (void *)*((_QWORD *)a1._rawValue + v30++ + 4);
      v32 = v31;
      dispatch_group_enter(v22);
      v33 = (_QWORD *)swift_allocObject();
      v33[2] = v9;
      v33[3] = v8;
      v33[4] = v22;
      v33[5] = v23;
      v34 = v22;
      swift_retain();
      v35 = (void *)NSItemProvider.loadTransferable<A>(type:completionHandler:)();

      swift_release();
    }
    while (v24 != v30);
  }
  swift_bridgeObjectRelease();
  v10 = v46;
  v14 = v47;
LABEL_13:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v36 = (void *)static OS_dispatch_queue.main.getter();
  v37 = (CGFloat *)swift_allocObject();
  *((_QWORD *)v37 + 2) = v9;
  *((_QWORD *)v37 + 3) = v8;
  v39 = v48;
  v38 = v49;
  *((_QWORD *)v37 + 4) = v48;
  *((_QWORD *)v37 + 5) = v38;
  v40 = v50;
  *((_QWORD *)v37 + 6) = v10;
  *((_QWORD *)v37 + 7) = v40;
  *((_QWORD *)v37 + 8) = v23;
  v37[9] = x;
  v37[10] = y;
  aBlock[4] = partial apply for closure #2 in TransferableDropAction.perform(_:_:);
  aBlock[5] = v37;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_6;
  v41 = _Block_copy(aBlock);
  swift_retain();
  outlined copy of AppIntentExecutor?(v39);
  swift_retain();
  v42 = v51;
  static DispatchQoS.unspecified.getter();
  v57 = MEMORY[0x1E0DEE9D8];
  v43 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], v43, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v44 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v41);
  swift_release();

  (*(void (**)(char *, uint64_t))(v55 + 8))(v44, v14);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v42, v53);
  swift_release();
  LOBYTE(v25) = 1;
  return v25;
}

void closure #1 in TransferableDropAction.perform(_:_:)(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  void *v21;
  os_log_type_t v22;
  NSObject *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t *, _QWORD);
  uint64_t v34[4];
  uint64_t v35;

  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v34[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v34[-1] - v13;
  type metadata accessor for ContainerBackgroundHost(255, (unint64_t *)&lazy cache variable for type metadata for Error);
  v15 = type metadata accessor for Result();
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (void **)((char *)&v34[-1] - v18);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)&v34[-1] - v18, a1, v15, v17);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v21 = *v19;
    v22 = static os_log_type_t.fault.getter();
    v23 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v23, v22))
    {
      v24 = v21;
      v25 = v21;
      v26 = swift_slowAlloc();
      v27 = swift_slowAlloc();
      v34[0] = v27;
      *(_DWORD *)v26 = 136315394;
      v28 = _typeName(_:qualified:)();
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      swift_getErrorValue();
      v30 = Error.localizedDescription.getter();
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_186E48000, v23, v22, "Error loading %s: %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v27, -1, -1);
      MEMORY[0x18D760108](v26, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    (*(void (**)(char *, void **, uint64_t))(v8 + 32))(v14, v19, a4);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v14, a4);
    v35 = a3;
    swift_retain();
    type metadata accessor for Array();
    type metadata accessor for AtomicBox();
    v32 = (void (*)(uint64_t *, _QWORD))AtomicBox.wrappedValue.modify();
    Array.append(_:)();
    v32(v34, 0);
    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, a4);
  }
  dispatch_group_leave(a2);
}

uint64_t closure #2 in TransferableDropAction.perform(_:_:)(uint64_t (*a1)(uint64_t), double a2, double a3, uint64_t a4, void (*a5)(uint64_t, double, double))
{
  uint64_t result;
  uint64_t v10;

  type metadata accessor for Array();
  type metadata accessor for AtomicBox();
  AtomicBox.wrappedValue.getter();
  a5(v10, a2, a3);
  result = swift_bridgeObjectRelease();
  if (a1)
    return a1(result);
  return result;
}

uint64_t protocol witness for DropAction.perform(_:_:) in conformance TransferableDropAction<A>(Swift::OpaquePointer a1, double a2, double a3)
{
  TransferableDropAction.perform(_:_:)(a1, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2));
  return 1;
}

double DropInfo.location.getter()
{
  _QWORD *v0;

  return *((double *)__swift_project_boxed_opaque_existential_1(v0, v0[3]) + 2);
}

uint64_t DropInfo.localDragContexts.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  id v3;
  id v4;
  _OWORD v6[2];
  __int128 v7;
  __int128 v8;

  v1 = __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  v2 = (void *)MEMORY[0x18D760234](v1);
  if (!v2
    || (v3 = objc_msgSend(v2, sel_localDragSession),
        swift_unknownObjectRelease(),
        !v3))
  {
    v7 = 0u;
    v8 = 0u;
LABEL_10:
    outlined destroy of TableRowID?((uint64_t)&v7, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    return MEMORY[0x1E0DEE9D8];
  }
  v4 = objc_msgSend(v3, sel_localContext);
  swift_unknownObjectRelease();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  outlined init with take of Any?((uint64_t)v6, (uint64_t)&v7);
  if (!*((_QWORD *)&v8 + 1))
    goto LABEL_10;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [Any], MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  if (swift_dynamicCast())
    return *(_QWORD *)&v6[0];
  return MEMORY[0x1E0DEE9D8];
}

Swift::Bool __swiftcall DropInfo.hasItemsConforming(to:)(Swift::OpaquePointer to)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  Swift::Bool v5;

  v3 = __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  v4 = MEMORY[0x18D760234](v3);
  if (v4)
  {
    swift_getObjectType();
    v5 = UIDropSession.hasItemsConforming(to:)(to);
    swift_unknownObjectRelease();
    LOBYTE(v4) = v5;
  }
  return v4;
}

{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void (*v19)(char *, char *, uint64_t);
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  Swift::Bool v24;
  _QWORD v26[2];
  _QWORD *v27;
  char *v28;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v26 - v5;
  v7 = type metadata accessor for UTType();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v26 - v14;
  v16 = *((_QWORD *)to._rawValue + 2);
  if (v16)
  {
    v27 = v1;
    swift_bridgeObjectRetain();
    v26[1] = to._rawValue;
    v17 = (char *)to._rawValue + 40;
    v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v28 = v11;
    do
    {
      swift_bridgeObjectRetain();
      UTType.init(_:)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {
        outlined destroy of TableRowID?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for UTType?, (uint64_t)MEMORY[0x1E0DF0340], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
      }
      else
      {
        v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
        v19(v15, v6, v7);
        v19(v11, v15, v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v18 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
          v18 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1, v18, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
        v18[2] = v21 + 1;
        v22 = (unint64_t)v18
            + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
            + *(_QWORD *)(v8 + 72) * v21;
        v11 = v28;
        v19((char *)v22, v28, v7);
      }
      v17 += 16;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    v1 = v27;
  }
  else
  {
    v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v23 = __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  if (MEMORY[0x18D760234](v23))
  {
    swift_getObjectType();
    v24 = UIDropSession.hasItemsConforming(to:)((Swift::OpaquePointer)v18);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v24;
}

uint64_t DropInfo.itemProviders(for:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  if (!MEMORY[0x18D760234](v3))
    return MEMORY[0x1E0DEE9D8];
  swift_getObjectType();
  v4 = UIDropSession.itemProviders(for:)(a1);
  swift_unknownObjectRelease();
  return v4;
}

{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void (*v19)(char *, char *, uint64_t);
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD v26[2];
  _QWORD *v27;
  char *v28;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v26 - v5;
  v7 = type metadata accessor for UTType();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v26 - v14;
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v27 = v1;
    swift_bridgeObjectRetain();
    v26[1] = a1;
    v17 = a1 + 40;
    v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v28 = v11;
    do
    {
      swift_bridgeObjectRetain();
      UTType.init(_:)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {
        outlined destroy of TableRowID?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for UTType?, (uint64_t)MEMORY[0x1E0DF0340], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
      }
      else
      {
        v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
        v19(v15, v6, v7);
        v19(v11, v15, v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v18 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
          v18 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1, v18, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
        v18[2] = v21 + 1;
        v22 = (unint64_t)v18
            + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
            + *(_QWORD *)(v8 + 72) * v21;
        v11 = v28;
        v19((char *)v22, v28, v7);
      }
      v17 += 16;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    v1 = v27;
  }
  else
  {
    v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v23 = __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  if (MEMORY[0x18D760234](v23))
  {
    swift_getObjectType();
    v24 = UIDropSession.itemProviders(for:)((uint64_t)v18);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return v24;
}

Swift::Void __swiftcall DropInfo.setDropTargetLocation(_:at:)(CGPoint_optional _, Swift::Int at)
{
  _QWORD *v2;
  Swift::Bool is_nil;
  CGPoint_optional v5;

  is_nil = _.is_nil;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  v5.is_nil = is_nil;
  DropInfoAdaptor.setDropTargetLocation(_:at:)(v5, at);
}

Swift::Void __swiftcall DropInfo.setDropTargetTransform(_:at:)(CGAffineTransform_optional *_, Swift::Int at)
{
  _QWORD *v2;

  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  DropInfoAdaptor.setDropTargetTransform(_:at:)(_, at);
}

uint64_t DropDelegate.validateDrop(info:)()
{
  return 1;
}

void DropDelegate.dropUpdated(info:)(_BYTE *a1@<X8>)
{
  DropDelegate.dropUpdated(info:)(a1);
}

{
  *a1 = 4;
}

uint64_t FunctionalDropDelegate.performDrop(info:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  char v17;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v2 = v1;
  v4 = v1[4];
  if (v4)
  {
    v5 = v2[3];
    LOBYTE(v19) = 0;
    outlined copy of Binding<NavigationSplitViewColumn>?(v5, v4);
    outlined copy of Binding<NavigationSplitViewColumn>?(v5, v4);
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release_n();
    swift_release_n();
    outlined consume of Binding<NavigationSplitViewColumn>?(v5, v4);
  }
  v6 = v2[2];
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (MEMORY[0x18D760234](v7))
  {
    swift_getObjectType();
    v8 = UIDropSession.itemProviders(for:)(v6);
    swift_unknownObjectRelease();
  }
  else
  {
    v8 = MEMORY[0x1E0DEE9D8];
  }
  outlined init with copy of DropInfo((uint64_t)a1, (uint64_t)&v19);
  v9 = swift_allocObject();
  v10 = v20;
  *(_OWORD *)(v9 + 16) = v19;
  *(_OWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 48) = v21;
  v11 = (uint64_t)(v2 + 6);
  swift_beginAccess();
  v13 = v2[9];
  v12 = v2[10];
  __swift_mutable_project_boxed_opaque_existential_1(v11, v13);
  (*(void (**)(uint64_t (*)(_QWORD), uint64_t, uint64_t, uint64_t))(v12 + 16))(destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, v9, v13, v12);
  swift_endAccess();
  outlined init with copy of TableColumnList(v11, (uint64_t)&v19);
  v14 = *((_QWORD *)&v20 + 1);
  v15 = v21;
  __swift_project_boxed_opaque_existential_1(&v19, *((uint64_t *)&v20 + 1));
  v16 = (double *)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double))(v15 + 32))(v8, v14, v15, v16[2], v16[3]);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  return v17 & 1;
}

uint64_t FunctionalDropDelegate.dropUpdated(info:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  void (*v11)(uint64_t *__return_ptr, char *, uint64_t, double, double);
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  char v15;
  double *v16;
  uint64_t v17;

  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8], &lazy cache variable for type metadata for _ContiguousArrayStorage<DropProposal>, (uint64_t)&type metadata for DropProposal);
  v7 = *((_QWORD *)v5 + 2);
  v6 = *((_QWORD *)v5 + 3);
  v8 = v6 >> 1;
  v9 = v7 + 1;
  if (v6 >> 1 <= v7)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v5, &lazy cache variable for type metadata for _ContiguousArrayStorage<DropProposal>, (uint64_t)&type metadata for DropProposal);
    v6 = *((_QWORD *)v5 + 3);
    v8 = v6 >> 1;
  }
  *((_QWORD *)v5 + 2) = v9;
  v5[v7 + 32] = 2;
  v10 = v7 + 2;
  if (v8 < v10)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v10, 1, v5, &lazy cache variable for type metadata for _ContiguousArrayStorage<DropProposal>, (uint64_t)&type metadata for DropProposal);
  *((_QWORD *)v5 + 2) = v10;
  v5[v9 + 32] = 3;
  v11 = *(void (**)(uint64_t *__return_ptr, char *, uint64_t, double, double))(v2 + 88);
  if (v11)
  {
    v12 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    if (MEMORY[0x18D760234](v12))
    {
      swift_getObjectType();
      swift_retain();
      v13 = UIDropSession.registeredContentTypes()();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_retain();
      v13 = MEMORY[0x1E0DEE9E8];
    }
    v16 = (double *)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v11(&v17, v5, v13, v16[2], v16[3]);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v11);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v15 = v17;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v15 = 4;
  }
  *a2 = v15;
  return result;
}

SwiftUI::DropProposal __swiftcall DropProposal.init(operation:)(SwiftUI::DropProposal operation)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)operation.operation;
  return operation;
}

uint64_t FunctionalDropDelegate.__deallocating_deinit()
{
  uint64_t *v0;

  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v0[3], v0[4]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 6));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v0[11]);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for DropDelegate.validateDrop(info:) in conformance FunctionalDropDelegate(_QWORD *a1)
{
  uint64_t v1;
  Swift::OpaquePointer v2;
  _QWORD *v3;
  uint64_t result;
  Swift::Bool v5;

  v2._rawValue = *(void **)(*(_QWORD *)v1 + 16);
  v3 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  result = MEMORY[0x18D760234](v3);
  if (result)
  {
    swift_getObjectType();
    v5 = UIDropSession.hasItemsConforming(to:)(v2);
    swift_unknownObjectRelease();
    return v5;
  }
  return result;
}

uint64_t protocol witness for DropDelegate.performDrop(info:) in conformance FunctionalDropDelegate(_QWORD *a1)
{
  return FunctionalDropDelegate.performDrop(info:)(a1) & 1;
}

uint64_t protocol witness for DropDelegate.dropEntered(info:) in conformance FunctionalDropDelegate()
{
  return protocol witness for DropDelegate.dropEntered(info:) in conformance FunctionalDropDelegate();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 32);
  if (v2)
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(*(_QWORD *)(v1 + 24), v2);
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release_n();
    return swift_release_n();
  }
  return result;
}

uint64_t protocol witness for DropDelegate.dropUpdated(info:) in conformance FunctionalDropDelegate@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return FunctionalDropDelegate.dropUpdated(info:)(a1, a2);
}

uint64_t protocol witness for DropDelegate.dropExited(info:) in conformance FunctionalDropDelegate()
{
  return protocol witness for DropDelegate.dropEntered(info:) in conformance FunctionalDropDelegate();
}

BOOL static DropOperation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void DropOperation.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int DropOperation.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void DropProposal.operation.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t View.onDrop(of:isTargeted:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD v49[5];
  _BYTE v50[48];

  v44 = a5;
  v45 = a6;
  v46 = a2;
  v47 = a3;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v39 - v16;
  v18 = type metadata accessor for UTType();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v48 = (char *)&v39 - v25;
  v26 = *(_QWORD *)(a1 + 16);
  if (v26)
  {
    v40 = a4;
    v41 = a9;
    v42 = a7;
    v43 = a8;
    swift_bridgeObjectRetain();
    v39 = a1;
    v27 = a1 + 40;
    v28 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      swift_bridgeObjectRetain();
      UTType.init(_:)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
      {
        outlined destroy of TableRowID?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for UTType?, (uint64_t)MEMORY[0x1E0DF0340], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
      }
      else
      {
        v29 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
        v30 = v48;
        v29(v48, v17, v18);
        v29(v22, v30, v18);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v28 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v28 + 2) + 1, 1, v28, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
        v32 = *((_QWORD *)v28 + 2);
        v31 = *((_QWORD *)v28 + 3);
        if (v32 >= v31 >> 1)
          v28 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v28, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
        *((_QWORD *)v28 + 2) = v32 + 1;
        v29(&v28[((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(_QWORD *)(v19 + 72) * v32], v22, v18);
      }
      v27 += 16;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
    a8 = v43;
    a7 = v42;
    LOBYTE(a4) = v40;
  }
  else
  {
    v28 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v33 = swift_allocObject();
  v34 = v45;
  *(_QWORD *)(v33 + 16) = v44;
  *(_QWORD *)(v33 + 24) = v34;
  v49[3] = &type metadata for ItemProviderDropAction;
  v49[4] = &protocol witness table for ItemProviderDropAction;
  v35 = (_QWORD *)swift_allocObject();
  v49[0] = v35;
  v35[2] = 0;
  v35[3] = 0;
  v35[4] = partial apply for closure #1 in View.onDrop(of:isTargeted:perform:);
  v35[5] = v33;
  v37 = v46;
  v36 = v47;
  outlined copy of Binding<NavigationSplitViewColumn>?(v46, v47);
  swift_retain();
  DropModifier.init(isEnabled:of:isTargeted:perform:proposal:)(1, (uint64_t)v28, v37, v36, a4, (uint64_t)v49, 0, 0, (uint64_t)v50);
  MEMORY[0x18D75B4AC](v50, a7, &type metadata for DropModifier, a8);
  return outlined destroy of DropModifier((uint64_t)v50);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD v48[5];
  _BYTE v49[48];

  v43 = a5;
  v44 = a6;
  v45 = a2;
  v46 = a3;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v38 - v16;
  v18 = type metadata accessor for UTType();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v47 = (char *)&v38 - v25;
  v26 = *(_QWORD *)(a1 + 16);
  if (v26)
  {
    v39 = a4;
    v40 = a9;
    v41 = a7;
    v42 = a8;
    swift_bridgeObjectRetain();
    v38 = a1;
    v27 = a1 + 40;
    v28 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      swift_bridgeObjectRetain();
      UTType.init(_:)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
      {
        outlined destroy of TableRowID?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for UTType?, (uint64_t)MEMORY[0x1E0DF0340], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
      }
      else
      {
        v29 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
        v30 = v47;
        v29(v47, v17, v18);
        v29(v22, v30, v18);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v28 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v28 + 2) + 1, 1, v28, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
        v32 = *((_QWORD *)v28 + 2);
        v31 = *((_QWORD *)v28 + 3);
        if (v32 >= v31 >> 1)
          v28 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v28, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
        *((_QWORD *)v28 + 2) = v32 + 1;
        v29(&v28[((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(_QWORD *)(v19 + 72) * v32], v22, v18);
      }
      v27 += 16;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
    a8 = v42;
    a7 = v41;
    LOBYTE(a4) = v39;
  }
  else
  {
    v28 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v48[3] = &type metadata for ItemProviderDropAction;
  v48[4] = &protocol witness table for ItemProviderDropAction;
  v33 = (_QWORD *)swift_allocObject();
  v48[0] = v33;
  v33[2] = 0;
  v33[3] = 0;
  v34 = v44;
  v33[4] = v43;
  v33[5] = v34;
  v36 = v45;
  v35 = v46;
  outlined copy of Binding<NavigationSplitViewColumn>?(v45, v46);
  swift_retain();
  DropModifier.init(isEnabled:of:isTargeted:perform:proposal:)(1, (uint64_t)v28, v36, v35, a4, (uint64_t)v48, 0, 0, (uint64_t)v49);
  MEMORY[0x18D75B4AC](v49, a7, &type metadata for DropModifier, a8);
  return outlined destroy of DropModifier((uint64_t)v49);
}

uint64_t View.onDrop(of:delegate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD v32[4];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40[2];
  _OWORD v41[2];
  uint64_t v42;

  v35 = a2;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v32 - v12;
  v14 = type metadata accessor for UTType();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v36 = (char *)v32 - v21;
  v22 = *(_QWORD *)(a1 + 16);
  if (v22)
  {
    v32[3] = a5;
    v33 = a3;
    v34 = a4;
    v32[2] = v5;
    swift_bridgeObjectRetain();
    v32[1] = a1;
    v23 = a1 + 40;
    v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v25 = v18;
    do
    {
      swift_bridgeObjectRetain();
      UTType.init(_:)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
      {
        outlined destroy of TableRowID?((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for UTType?, (uint64_t)MEMORY[0x1E0DF0340], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
      }
      else
      {
        v26 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
        v27 = v36;
        v26(v36, v13, v14);
        v26(v18, v27, v14);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v24 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
        v29 = v24[2];
        v28 = v24[3];
        if (v29 >= v28 >> 1)
          v24 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1, v24, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
        v24[2] = v29 + 1;
        v30 = (unint64_t)v24
            + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))
            + *(_QWORD *)(v15 + 72) * v29;
        v18 = v25;
        v26((char *)v30, v25, v14);
      }
      v23 += 16;
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease();
    a3 = v33;
    a4 = v34;
  }
  outlined init with copy of TableColumnList(v35, (uint64_t)v40);
  swift_bridgeObjectRelease();
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  outlined destroy of DropDelegate?((uint64_t)&v37);
  outlined init with take of OptionalBinaryInteger(v40, (uint64_t)&v37);
  v41[0] = v37;
  v41[1] = v38;
  v42 = v39;
  MEMORY[0x18D75B4AC](v41, a3, &type metadata for DropModifier, a4);
  return outlined destroy of DropModifier((uint64_t)v41);
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<TableCellFormula>, (uint64_t (*)(uint64_t))type metadata accessor for TableCellFormula);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)>, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarStorage.Entry>, type metadata accessor for ToolbarStorage.Entry);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CommandsList.Item>, type metadata accessor for CommandsList.Item);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<UICellAccessory>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC1D38]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<IntelligenceElement>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC16F0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<CommandGroupPlacementBox>, type metadata accessor for CommandGroupPlacementBox);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(source: IndexPath, destination: IndexPath)>, (uint64_t (*)(uint64_t))type metadata accessor for (source: IndexPath, destination: IndexPath));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<MainMenuItem>, type metadata accessor for MainMenuItem);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<MainMenuItem.Template>, type metadata accessor for MainMenuItem.Template);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarStorage.Item>, type metadata accessor for ToolbarStorage.Item);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.HostedViewState.Key>, type metadata accessor for DisplayList.HostedViewState.Key);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<UpdateCoalescingCollectionView.UpdateInvalidation>, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<URL>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<WidgetAuxiliaryViewMetadata.Text.Metadata>, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ToolbarStorage.Entry, Int)>, (uint64_t (*)(uint64_t))type metadata accessor for (ToolbarStorage.Entry, Int));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TableCellFormula, id: TableColumnCustomizationID)>, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<KeyPress.Handler>, type metadata accessor for KeyPress.Handler);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t a6)
{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v7 = (char)result;
  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size_1(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 17;
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 4);
  }
  else
  {
    v12 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((v7 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[16 * v10])
      memmove(v15, v16, 16 * v10);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;

  v7 = (char)result;
  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size_1(v12);
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 48);
  }
  else
  {
    v12 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  if ((v7 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[48 * v10])
      memmove(v14, v15, 48 * v10);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;

  v7 = (char)result;
  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size_1(v12);
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 40);
  }
  else
  {
    v12 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  if ((v7 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[40 * v10])
      memmove(v14, v15, 40 * v10);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v7 = (char)result;
  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size_1(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 25;
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 3);
  }
  else
  {
    v12 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((v7 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[8 * v10])
      memmove(v15, v16, 8 * v10);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v15, v16, 8 * v10);
  }
  swift_bridgeObjectRelease();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;

  v7 = (char)result;
  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size_1(v12);
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 24);
  }
  else
  {
    v12 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  if ((v7 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[24 * v10])
      memmove(v14, v15, 24 * v10);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v7 = (char)result;
  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size_1(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 + 31;
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 6);
  }
  else
  {
    v12 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((v7 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[64 * v10])
      memmove(v15, v16, v10 << 6);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;

  v7 = (char)result;
  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size_1(v12);
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 40);
  }
  else
  {
    v12 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  if ((v7 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[40 * v10])
      memmove(v14, v15, 40 * v10);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;

  v7 = (char)result;
  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size_1(v12);
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * v13 - 64;
  }
  else
  {
    v12 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  if ((v7 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[v10])
      memmove(v14, v15, v10);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, v10);
  }
  swift_bridgeObjectRelease();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;

  v7 = (char)result;
  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size_1(v12);
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 120);
  }
  else
  {
    v12 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  if ((v7 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[120 * v10])
      memmove(v14, v15, 120 * v10);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = (char)result;
  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size_1(v12);
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 24);
  }
  else
  {
    v12 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  v16 = 24 * v10;
  if ((v7 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, v16);
  }
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), unint64_t *a6, void (*a7)(uint64_t))
{
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  size_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v11 = a4[3];
    v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v12 = a2;
    }
  }
  else
  {
    v12 = a2;
  }
  v13 = a4[2];
  if (v12 <= v13)
    v14 = a4[2];
  else
    v14 = v12;
  if (!v14)
  {
    v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  a5(0);
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, a6, a7);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 72);
  v18 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v19 = (_QWORD *)swift_allocObject();
  v20 = _swift_stdlib_malloc_size_1(v19);
  if (!v17 || (v20 - v18 == 0x8000000000000000 ? (v21 = v17 == -1) : (v21 = 0), v21))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v19[2] = v13;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v17);
LABEL_19:
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, a6, a7);
  v23 = *(_QWORD *)(v22 - 8);
  if ((a1 & 1) != 0)
  {
    if (v19 < a4
      || (v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80),
          (char *)v19 + v24 >= (char *)a4 + v24 + *(_QWORD *)(v23 + 72) * v13))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v19 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v19;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;

  v7 = (char)result;
  if ((a3 & 1) != 0)
  {
    v8 = a4[3];
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = a4[2];
  if (v9 <= v10)
    v11 = a4[2];
  else
    v11 = v9;
  if (v11)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v12 = (_QWORD *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size_1(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 17;
    v12[2] = v10;
    v12[3] = 2 * (v14 >> 4);
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v7 & 1) != 0)
  {
    if (v12 != a4 || v12 + 4 >= &a4[2 * v10 + 4])
      memmove(v12 + 4, a4 + 4, 16 * v10);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for ()();
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v12;
}

{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size_1(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 72);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v13 + 4 >= &a4[9 * v11 + 4])
      memmove(v13 + 4, a4 + 4, 72 * v11);
    a4[2] = 0;
  }
  else
  {
    a6(0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size_1(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 1;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 5);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v13 + 4 >= &a4[4 * v11 + 4])
      memmove(v13 + 4, a4 + 4, 32 * v11);
    a4[2] = 0;
  }
  else
  {
    a6(0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size_1(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v8 & 1) != 0)
  {
    if (v13 < a4 || v13 + 4 >= &a4[v11 + 4])
    {
      a6(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      a6(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    a6(0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size_1(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v13 + 4 >= &a4[v11 + 4])
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
  }
  else
  {
    a6(0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, void (*a5)(_QWORD))
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    a5(0);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size_1(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v9);
  }
  swift_bridgeObjectRelease();
  return v11;
}

{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    a5(0);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size_1(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 40 * v9;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v11;
}

unint64_t lazy protocol witness table accessor for type DropOperation and conformance DropOperation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DropOperation and conformance DropOperation;
  if (!lazy protocol witness table cache variable for type DropOperation and conformance DropOperation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DropOperation, &type metadata for DropOperation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DropOperation and conformance DropOperation);
  }
  return result;
}

uint64_t type metadata completion function for DropPreview(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  result = type metadata accessor for DropPreview.Storage(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    result = type metadata accessor for Optional();
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DropPreview(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  int v13;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  const void *v22;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (v7 <= 0x10)
    v8 = 16;
  else
    v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_DWORD *)(v6 + 80);
  v10 = v9;
  v11 = v8 + v9 + 1;
  if (*(_DWORD *)(v6 + 84))
    v12 = *(_QWORD *)(v6 + 64);
  else
    v12 = v7 + 1;
  v13 = v9 & 0x100000;
  if (v10 > 7 || v13 != 0 || ((v12 + 7 + (v11 & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v10 & 0xF8 ^ 0x1F8) & (v10 + 16)));
    swift_retain();
  }
  else
  {
    v17 = *((unsigned __int8 *)a2 + v8);
    if (v17 >= 2)
    {
      if (v8 <= 3)
        v18 = v8;
      else
        v18 = 4;
      __asm { BR              X13 }
    }
    v19 = ~v10;
    if (v17 == 1)
    {
      v20 = a2[1];
      *v4 = *a2;
      v4[1] = v20;
      swift_retain();
      v21 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
      v21 = 0;
    }
    *((_BYTE *)v4 + v8) = v21;
    v22 = (const void *)(((unint64_t)a2 + v11) & v19);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v22, 1, v5))
    {
      memcpy((void *)(((unint64_t)v4 + v11) & v19), v22, v12);
    }
    else
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v6 + 16))(((unint64_t)v4 + v11) & v19, v22, v5);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(((unint64_t)v4 + v11) & v19, 0, 1, v5);
    }
    *(_OWORD *)((v12 + 7 + (((unint64_t)v4 + v11) & v19)) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v22 + v12 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t destroy for DropPreview(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(a1 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X12 }
  }
  if (v6 == 1)
    swift_release();
  else
    (*(void (**)(uint64_t, _QWORD))(v4 + 8))(a1, *(_QWORD *)(a2 + 16));
  v8 = (a1 + v5 + *(unsigned __int8 *)(v4 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v4 + 8))(v8, v3);
  return result;
}

_QWORD *initializeWithCopy for DropPreview(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  int v17;
  size_t v18;
  unint64_t v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (v7 <= 0x10)
    v8 = 16;
  else
    v8 = *(_QWORD *)(v6 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X12 }
  }
  if (v9 == 1)
  {
    v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    swift_retain();
    v12 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
    v12 = 0;
  }
  *((_BYTE *)a1 + v8) = v12;
  v13 = *(unsigned __int8 *)(v6 + 80);
  v14 = v8 + v13 + 1;
  v15 = (void *)(((unint64_t)a1 + v14) & ~v13);
  v16 = (const void *)(((unint64_t)a2 + v14) & ~v13);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v16, 1, v5))
  {
    v17 = *(_DWORD *)(v6 + 84);
    if (v17)
      v18 = v7;
    else
      v18 = v7 + 1;
    memcpy(v15, v16, v18);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v15, v16, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
    v17 = *(_DWORD *)(v6 + 84);
  }
  if (v17)
    v19 = v7;
  else
    v19 = v7 + 1;
  *(_OWORD *)(((unint64_t)v15 + v19 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v16 + v19 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithCopy for DropPreview(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  size_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (v7 <= 0x10)
    v8 = 16;
  else
    v8 = *(_QWORD *)(v6 + 64);
  if (a1 != a2)
  {
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      swift_release();
    else
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      *((_BYTE *)a1 + v8) = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v8) = 0;
    }
  }
  v14 = *(unsigned __int8 *)(v6 + 80);
  v15 = v8 + v14 + 1;
  v16 = (void *)(((unint64_t)a1 + v15) & ~v14);
  v17 = (void *)(((unint64_t)a2 + v15) & ~v14);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v19 = v18(v16, 1, v5);
  v20 = v18(v17, 1, v5);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v16, v17, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
      goto LABEL_30;
    }
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v16, v17, v5);
      goto LABEL_30;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v16, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v21 = v7;
  else
    v21 = v7 + 1;
  memcpy(v16, v17, v21);
LABEL_30:
  if (*(_DWORD *)(v6 + 84))
    v22 = v7;
  else
    v22 = v7 + 1;
  v23 = (_QWORD *)(((unint64_t)v16 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v17 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  v23[1] = v24[1];
  return a1;
}

_OWORD *initializeWithTake for DropPreview(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  int v16;
  size_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (v7 <= 0x10)
    v8 = 16;
  else
    v8 = *(_QWORD *)(v6 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X12 }
  }
  if (v9 == 1)
  {
    *a1 = *a2;
    v11 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *, _OWORD *, _QWORD))(v6 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
    v11 = 0;
  }
  *((_BYTE *)a1 + v8) = v11;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = v8 + v12 + 1;
  v14 = (void *)(((unint64_t)a1 + v13) & ~v12);
  v15 = (const void *)(((unint64_t)a2 + v13) & ~v12);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v15, 1, v5))
  {
    v16 = *(_DWORD *)(v6 + 84);
    if (v16)
      v17 = v7;
    else
      v17 = v7 + 1;
    memcpy(v14, v15, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v14, v15, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
    v16 = *(_DWORD *)(v6 + 84);
  }
  if (v16)
    v18 = v7;
  else
    v18 = v7 + 1;
  *(_OWORD *)(((unint64_t)v14 + v18 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v15 + v18 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_OWORD *assignWithTake for DropPreview(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  size_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (v7 <= 0x10)
    v8 = 16;
  else
    v8 = *(_QWORD *)(v6 + 64);
  if (a1 != a2)
  {
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      swift_release();
    else
      (*(void (**)(_OWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      *a1 = *a2;
      v13 = 1;
    }
    else
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v13 = 0;
    }
    *((_BYTE *)a1 + v8) = v13;
  }
  v14 = *(unsigned __int8 *)(v6 + 80);
  v15 = v8 + v14 + 1;
  v16 = (void *)(((unint64_t)a1 + v15) & ~v14);
  v17 = (void *)(((unint64_t)a2 + v15) & ~v14);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v19 = v18(v16, 1, v5);
  v20 = v18(v17, 1, v5);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v16, v17, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
      goto LABEL_31;
    }
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v16, v17, v5);
      goto LABEL_31;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v16, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v21 = v7;
  else
    v21 = v7 + 1;
  memcpy(v16, v17, v21);
LABEL_31:
  if (*(_DWORD *)(v6 + 84))
    v22 = v7;
  else
    v22 = v7 + 1;
  v23 = (_QWORD *)(((unint64_t)v16 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v17 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  v23[1] = v24[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for DropPreview(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5 <= 0x10)
    v6 = 16;
  else
    v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_DWORD *)(v4 + 84);
  if (v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  if (v8 <= 0xFE)
    v9 = 254;
  else
    v9 = v8;
  if (v7)
    v10 = *(_QWORD *)(v4 + 64);
  else
    v10 = v5 + 1;
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v4 + 80);
  v12 = v6 + v11 + 1;
  if (v9 < a2)
  {
    if (((((v10 + (v12 & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v13 = 2;
    else
      v13 = a2 - v9 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    __asm { BR              X3 }
  }
  if (v8 > 0xFE)
  {
    v18 = (*(uint64_t (**)(uint64_t))(v4 + 48))((v12 + a1) & ~v11);
    if (v18 >= 2)
      return v18 - 1;
    else
      return 0;
  }
  else
  {
    v17 = *(unsigned __int8 *)(a1 + v6);
    if (v17 >= 2)
      return (v17 ^ 0xFF) + 1;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for DropPreview(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= 0x10)
    v9 = 16;
  else
    v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_DWORD *)(v7 + 84);
  if (v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v11 <= 0xFE)
    v12 = 254;
  else
    v12 = v11;
  v13 = *(unsigned __int8 *)(v7 + 80);
  if (!v10)
    ++v8;
  v14 = v9 + 1 + v13;
  if (v12 < a3)
  {
    v15 = a3 - v12;
    if ((((_DWORD)v8 + (v14 & ~(_DWORD)v13) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v16 = v15 + 1;
    else
      v16 = 2;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v6 = v17;
    else
      v6 = 0;
  }
  if (a2 > v12)
  {
    if ((((_DWORD)v8 + (v14 & ~(_DWORD)v13) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v18 = ~v12 + a2;
      bzero(a1, ((v8 + (v14 & ~v13) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *a1 = v18;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X17 }
}

uint64_t sub_1870E6A74@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void *v18;
  int v19;
  int v20;
  uint64_t result;

  v16[v17] = 0;
  if (a1)
  {
    if (v13 > 0xFE)
    {
      v18 = (void *)((unint64_t)&v16[v15] & v11);
      if (v13 >= a1)
      {
        return (*(uint64_t (**)(void *, _QWORD))(v12 + 56))(v18, a1 + 1);
      }
      else if ((_DWORD)v10)
      {
        if (v10 <= 3)
          v19 = v10;
        else
          v19 = 4;
        bzero(v18, v10);
        __asm { BR              X10 }
      }
    }
    else if (a1 > 0xFE)
    {
      if ((_DWORD)a2)
      {
        if (a2 <= 3)
          v20 = a2;
        else
          v20 = 4;
        bzero(v16, a2);
        __asm { BR              X10 }
      }
    }
    else
    {
      v16[v14] = -(char)a1;
    }
  }
  return result;
}

void sub_1870E6BA4()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1870E6BAC()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

ValueMetadata *type metadata accessor for DefaultDragDropPreview()
{
  return &type metadata for DefaultDragDropPreview;
}

ValueMetadata *type metadata accessor for DropInfo()
{
  return &type metadata for DropInfo;
}

uint64_t dispatch thunk of DropDelegate.validateDrop(info:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of DropDelegate.performDrop(info:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of DropDelegate.dropEntered(info:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of DropDelegate.dropUpdated(info:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of DropDelegate.dropExited(info:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of DropDelegate_Private.dropAnimationCompleted()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DropDelegate_Private.dropEnded(info:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t type metadata accessor for FunctionalDropDelegate()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for DropOperation()
{
  return &type metadata for DropOperation;
}

uint64_t storeEnumTagSinglePayload for DropOperation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1870E6CB0 + 4 * byte_187C084C4[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1870E6CE4 + 4 * byte_187C084BF[v4]))();
}

uint64_t sub_1870E6CE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870E6CEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1870E6CF4);
  return result;
}

uint64_t sub_1870E6D00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1870E6D08);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1870E6D0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870E6D14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DropProposal()
{
  return &type metadata for DropProposal;
}

uint64_t type metadata accessor for FilePromiseReceiver()
{
  return objc_opt_self();
}

uint64_t sub_1870E6D50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for DropModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_1870E6DA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for DropModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_1870E6DFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<DropOntoTraitKey>, (uint64_t)&type metadata for DropOntoTraitKey, (uint64_t)&protocol witness table for DropOntoTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<DropOntoTraitKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<DropOntoTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<DropOntoTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<DropOntoTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<DropOntoTraitKey>, (uint64_t)&type metadata for DropOntoTraitKey, (uint64_t)&protocol witness table for DropOntoTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<DropOntoTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t sub_1870E6EE4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for DropPreviewModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for DropPreviewModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t *initializeBufferWithCopyOfBuffer for DropPreview.Storage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X13 }
    }
    if (v9 != 1)
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 0;
      return v3;
    }
    v11 = a2[1];
    *v3 = *a2;
    v3[1] = v11;
    *((_BYTE *)v3 + v5) = 1;
  }
  swift_retain();
  return v3;
}

uint64_t destroy for DropPreview.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 0x10)
    v3 = 16;
  v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)
      return swift_release();
    else
      return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_1870E70A0 + 4 * byte_187C084CE[v5]))();
  }
}

_QWORD *initializeWithCopy for DropPreview.Storage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_retain();
    v9 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v9 = 0;
  }
  *((_BYTE *)a1 + v5) = v9;
  return a1;
}

_QWORD *assignWithCopy for DropPreview.Storage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_release();
    else
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      *((_BYTE *)a1 + v7) = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for DropPreview.Storage(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *a1 = *a2;
    v8 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(v4 + 32))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

_OWORD *assignWithTake for DropPreview.Storage(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_release();
    else
      (*(void (**)(_OWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for DropPreview.Storage(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 16;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 0x10uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1870E7684 + 4 * byte_187C084F1[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for DropPreview.Storage(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for DropPreview.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 16;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 0x10uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1870E78C0 + 4 * byte_187C084FF[v3]))();
}

uint64_t destroy for TransferableDropAction(_QWORD *a1)
{
  if (*a1)
    swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for TransferableDropAction(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (*a2)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for TransferableDropAction(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
LABEL_8:
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TransferableDropAction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  if (!*(_QWORD *)a1)
  {
    if (v4)
    {
      v6 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v6;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  swift_release();
LABEL_8:
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ItemProviderDropAction()
{
  return &type metadata for ItemProviderDropAction;
}

void partial apply for closure #1 in TransferableDropAction.perform(_:_:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in TransferableDropAction.perform(_:_:)(a1, *(NSObject **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16));
}

uint64_t sub_1870E850C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32))
    swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in TransferableDropAction.perform(_:_:)()
{
  uint64_t v0;

  return closure #2 in TransferableDropAction.perform(_:_:)(*(uint64_t (**)(uint64_t))(v0 + 32), *(double *)(v0 + 72), *(double *)(v0 + 80), *(_QWORD *)(v0 + 40), *(void (**)(uint64_t, double, double))(v0 + 48));
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), unint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    a5(0);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size_1(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 17;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 4);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v13 + 4 >= &a4[2 * v11 + 4])
      memmove(v13 + 4, a4 + 4, 16 * v11);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for ContainerBackgroundHost(0, a6);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, unint64_t *a5, unint64_t *a6, unint64_t *a7)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = *((_QWORD *)a4 + 3);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *((_QWORD *)a4 + 2);
  if (v10 <= v11)
    v12 = *((_QWORD *)a4 + 2);
  else
    v12 = v10;
  if (v12)
  {
    type metadata accessor for _ContiguousArrayStorage<UISceneConnectionOptionDefinition.Type>(0, a5, a6, a7);
    v13 = (char *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size_1(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 17;
    *((_QWORD *)v13 + 2) = v11;
    *((_QWORD *)v13 + 3) = 2 * (v15 >> 4);
  }
  else
  {
    v13 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v16 = v13 + 32;
  v17 = a4 + 32;
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v16 >= &v17[16 * v11])
      memmove(v16, v17, 16 * v11);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v16, v17, 16 * v11);
  }
  swift_bridgeObjectRelease();
  return v13;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = *((_QWORD *)a4 + 3);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *((_QWORD *)a4 + 2);
  if (v10 <= v11)
    v12 = *((_QWORD *)a4 + 2);
  else
    v12 = v10;
  if (v12)
  {
    a7(0, a5, a6, MEMORY[0x1E0DED1E8]);
    v13 = (char *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size_1(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    *((_QWORD *)v13 + 2) = v11;
    *((_QWORD *)v13 + 3) = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v16 = v13 + 32;
  v17 = a4 + 32;
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v16 >= &v17[8 * v11])
      memmove(v16, v17, 8 * v11);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v16, v17, 8 * v11);
  }
  swift_bridgeObjectRelease();
  return v13;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, unint64_t *a5, unint64_t *a6, uint64_t (*a7)(uint64_t, _QWORD *))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  size_t v17;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = *((_QWORD *)a4 + 3);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *((_QWORD *)a4 + 2);
  if (v10 <= v11)
    v12 = *((_QWORD *)a4 + 2);
  else
    v12 = v10;
  if (v12)
  {
    type metadata accessor for _ContiguousArrayStorage<ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>(0, a5, a6, a7);
    v13 = (char *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size_1(v13);
    *((_QWORD *)v13 + 2) = v11;
    *((_QWORD *)v13 + 3) = 2 * ((uint64_t)(v14 - 32) / 96);
  }
  else
  {
    v13 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v15 = v13 + 32;
  v16 = a4 + 32;
  v17 = 96 * v11;
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v15 >= &v16[v17])
      memmove(v15, v16, v17);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v15, v16, v17);
  }
  swift_bridgeObjectRelease();
  return v13;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), uint64_t a6, uint64_t a7, void (*a8)(_QWORD, uint64_t, _QWORD, uint64_t))
{
  char v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  uint64_t v19;

  v12 = (char)result;
  if ((a3 & 1) != 0)
  {
    v13 = a4[3];
    v14 = v13 >> 1;
    if ((uint64_t)(v13 >> 1) < a2)
    {
      if (v14 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v13 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v14 = a2;
    }
  }
  else
  {
    v14 = a2;
  }
  v15 = a4[2];
  if (v14 <= v15)
    v16 = a4[2];
  else
    v16 = v14;
  if (v16)
  {
    a5(0);
    v17 = (_QWORD *)swift_allocObject();
    v18 = _swift_stdlib_malloc_size_1(v17);
    v19 = v18 - 32;
    if (v18 < 32)
      v19 = v18 - 1;
    v17[2] = v15;
    v17[3] = 2 * (v19 >> 5);
  }
  else
  {
    v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v12 & 1) != 0)
  {
    if (v17 != a4 || v17 + 4 >= &a4[4 * v15 + 4])
      memmove(v17 + 4, a4 + 4, 32 * v15);
    a4[2] = 0;
  }
  else
  {
    a8(0, a6, MEMORY[0x1E0DEA968], a7);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v17;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, unint64_t *a6, uint64_t a7)
{
  char v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;

  v9 = (char)result;
  if ((a3 & 1) != 0)
  {
    v10 = a4[3];
    v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v11 = a2;
    }
  }
  else
  {
    v11 = a2;
  }
  v12 = a4[2];
  if (v11 <= v12)
    v13 = a4[2];
  else
    v13 = v11;
  if (v13)
  {
    type metadata accessor for DropDelegate?(0, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v14 = (_QWORD *)swift_allocObject();
    v15 = _swift_stdlib_malloc_size_1(v14);
    v14[2] = v12;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v9 & 1) != 0)
  {
    if (v14 != a4 || v14 + 4 >= &a4[5 * v12 + 4])
      memmove(v14 + 4, a4 + 4, 40 * v12);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for ContainerBackgroundHost(0, a6);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v14;
}

void type metadata accessor for _ContiguousArrayStorage<ClosedRange<CGFloat>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ClosedRange<CGFloat>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E0DEF040], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ClosedRange<CGFloat>>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<[_IncrementalLayout_Child]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<[_IncrementalLayout_Child]>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [_IncrementalLayout_Child], (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<[_IncrementalLayout_Child]>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Binding<Bool>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Binding<Bool>>);
  }
}

void type metadata accessor for [UIView]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [UIView])
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [UIView]);
  }
}

void type metadata accessor for _ContiguousArrayStorage<ListUpdate<Int, Int>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ListUpdate<Int, Int>>)
  {
    type metadata accessor for ListUpdate<Int, Int>(255, (unint64_t *)&lazy cache variable for type metadata for ListUpdate<Int, Int>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ListUpdate);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ListUpdate<Int, Int>>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(Int, Int)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, Int)>)
  {
    type metadata accessor for (Badge, Spacer)(255, (unint64_t *)&lazy cache variable for type metadata for (Int, Int));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, Int)>);
  }
}

unint64_t lazy protocol witness table accessor for type CountingIndex<Int> and conformance CountingIndex<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CountingIndex<Int> and conformance CountingIndex<A>;
  if (!lazy protocol witness table cache variable for type CountingIndex<Int> and conformance CountingIndex<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for CountingIndex<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE1E50]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1E60], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountingIndex<Int> and conformance CountingIndex<A>);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t, _QWORD *))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for ListUpdate<CountingIndex<Int>, CountingIndex<Int>>(255, a3, a4);
    v5 = type metadata accessor for _ContiguousArrayStorage();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void type metadata accessor for ListUpdate<CountingIndex<Int>, CountingIndex<Int>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  unint64_t v10;
  unint64_t v11;

  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for CountingIndex<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE1E50]);
    v9[0] = v6;
    v9[1] = v6;
    v10 = lazy protocol witness table accessor for type CountingIndex<Int> and conformance CountingIndex<A>();
    v11 = v10;
    v7 = a3(a1, v9);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void type metadata accessor for _ContiguousArrayStorage<Range<Int>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)>)
  {
    type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(255, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TableCellFormula, id: TableColumnCustomizationID)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(index: Int, element: TableCellFormula, id: TableColumnCustomizationID)>)
  {
    type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(255, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(index: Int, element: TableCellFormula, id: TableColumnCustomizationID)>);
  }
}

void type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata3;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v5)
      atomic_store(TupleTypeMetadata3, a2);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(String, String)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(String, String)>)
  {
    type metadata accessor for (Badge, Spacer)(255, (unint64_t *)&lazy cache variable for type metadata for (String, String));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<CollectionChanges<Int, Int>.Element>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CollectionChanges<Int, Int>.Element>)
  {
    type metadata accessor for ListUpdate<Int, Int>(255, &lazy cache variable for type metadata for CollectionChanges<Int, Int>.Element, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for CollectionChanges.Element);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CollectionChanges<Int, Int>.Element>);
  }
}

void type metadata accessor for ListUpdate<Int, Int>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD *))
{
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!*a2)
  {
    v6[0] = MEMORY[0x1E0DEB418];
    v6[1] = MEMORY[0x1E0DEB418];
    v6[2] = MEMORY[0x1E0DEB430];
    v6[3] = MEMORY[0x1E0DEB430];
    v4 = a3(0, v6);
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(StrongHash, DisplayList)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(StrongHash, DisplayList)>)
  {
    type metadata accessor for (Badge, Spacer)(255, (unint64_t *)&lazy cache variable for type metadata for (StrongHash, DisplayList));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(StrongHash, DisplayList)>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<UIKitProxyFocusItem>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<UIKitProxyFocusItem>)
  {
    type metadata accessor for ContainerBackgroundHost(255, (unint64_t *)&lazy cache variable for type metadata for UIKitProxyFocusItem);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<UIKitProxyFocusItem>);
  }
}

void type metadata accessor for WeakBox<DocumentViewController>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for WeakBox<DocumentViewController>, (uint64_t (*)(uint64_t))type metadata accessor for DocumentViewController, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
}

void type metadata accessor for [UIAccessibilityLocationDescriptor]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [UIAccessibilityLocationDescriptor])
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIAccessibilityLocationDescriptor);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [UIAccessibilityLocationDescriptor]);
  }
}

void type metadata accessor for _ContiguousArrayStorage<AccessibilityLinkElement>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityLinkElement>)
  {
    type metadata accessor for ContainerBackgroundHost(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLinkElement);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityLinkElement>);
  }
}

void type metadata accessor for WeakBox<UIGestureRecognizer>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WeakBox<UIGestureRecognizer>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
    v0 = type metadata accessor for WeakBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIGestureRecognizer>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(seed: Int, removeIndex: Int)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(seed: Int, removeIndex: Int)>)
  {
    type metadata accessor for (seed: Int, removeIndex: Int)(255, (unint64_t *)&lazy cache variable for type metadata for (seed: Int, removeIndex: Int));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(seed: Int, removeIndex: Int)>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<PresentationOptionsPreference?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<PresentationOptionsPreference?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PresentationOptionsPreference?>);
  }
}

uint64_t outlined init with copy of DropInfo(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1870EC298()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

void type metadata accessor for (key: String?, value: String)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: String?, value: String))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: String?, value: String));
  }
}

void type metadata accessor for (String?, String)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (String?, String))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String?, String));
  }
}

void type metadata accessor for HitTestTrace<UIView>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for HitTestTrace<UIView>)
  {
    v2 = type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v4 = type metadata accessor for HitTestTrace(a1, v2, (uint64_t)&protocol witness table for UIView, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for HitTestTrace<UIView>);
  }
}

void type metadata accessor for HitTestTrace<ViewResponder>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for HitTestTrace<ViewResponder>)
  {
    v2 = type metadata accessor for ViewResponder();
    v4 = type metadata accessor for HitTestTrace(a1, v2, (uint64_t)&protocol witness table for ViewResponder, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for HitTestTrace<ViewResponder>);
  }
}

void type metadata accessor for AnimatedValueTrack<CGPoint><A>.VectorPath.Element(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AnimatedValueTrack<CGPoint><A>.VectorPath.Element)
  {
    type metadata accessor for CGPoint(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E0CE8358]);
    v6 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AnimatedValueTrack<CGPoint><A>.VectorPath.Element);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(tag: String, item: String)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(tag: String, item: String)>)
  {
    type metadata accessor for (seed: Int, removeIndex: Int)(255, (unint64_t *)&lazy cache variable for type metadata for (tag: String, item: String));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(tag: String, item: String)>);
  }
}

void type metadata accessor for (seed: Int, removeIndex: Int)(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void type metadata accessor for _ContiguousArrayStorage<UISceneConnectionOptionDefinition.Type>(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for UISceneConnectionOptionDefinition.Type(255, a3, a4);
    v5 = type metadata accessor for _ContiguousArrayStorage();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t type metadata accessor for UISceneConnectionOptionDefinition.Type(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for ContainerBackgroundHost(255, a3);
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for (_Benchmark, [Double])()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (_Benchmark, [Double]))
  {
    type metadata accessor for ContainerBackgroundHost(255, &lazy cache variable for type metadata for _Benchmark);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [Double], MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_Benchmark, [Double]));
  }
}

void type metadata accessor for _ContiguousArrayStorage<WeakAttribute<SwipeActions.Value>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<WeakAttribute<SwipeActions.Value>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for WeakAttribute<SwipeActions.Value>, (uint64_t)&type metadata for SwipeActions.Value, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC40]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<WeakAttribute<SwipeActions.Value>>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<_RowVisitationContext<TableDataSourceAdaptor>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<_RowVisitationContext<TableDataSourceAdaptor>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _RowVisitationContext);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_RowVisitationContext<TableDataSourceAdaptor>>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<Range<String.Index>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Range<String.Index>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Range<String.Index>>);
  }
}

void type metadata accessor for (index: Int, element: TabCustomizationID, id: TabCustomizationID)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (index: Int, element: TabCustomizationID, id: TabCustomizationID))
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TabCustomizationID, id: TabCustomizationID));
  }
}

void type metadata accessor for _ContiguousArrayStorage<Int?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Int?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Int?>);
  }
}

uint64_t View.invalidatableContent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;
  char v7;

  KeyPath = swift_getKeyPath();
  v7 = 0;
  MEMORY[0x18D75B4AC](&KeyPath, a2, &type metadata for InvalidatableContentModifier, a3);
  return swift_release();
}

uint64_t one-time initialization function for pulsingAnimation()
{
  uint64_t v0;
  uint64_t result;

  static Animation.timingCurve(_:_:_:_:duration:)();
  Animation.repeatForever(autoreverses:)();
  swift_release();
  v0 = Animation.delay(_:)();
  result = swift_release();
  static InvalidatableContentModifier.pulsingAnimation = v0;
  return result;
}

uint64_t InvalidatableContentModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  outlined copy of Environment<Bool>.Content(v3, v4);
  specialized Environment.wrappedValue.getter(v3, v4, &v8);
  outlined consume of Environment<Bool>.Content(v3, v4);
  v5 = v8;
  if ((v8 & 4) != 0)
  {
    if (one-time initialization token for pulsingAnimation != -1)
      swift_once();
    result = swift_retain();
    v7 = xmmword_187C08780;
  }
  else
  {
    result = 0;
    v7 = 0uLL;
  }
  *(_OWORD *)a1 = v7;
  *(_QWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 24) = (v5 & 4) == 0;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InvalidatableContentModifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  result = __swift_destroy_boxed_opaque_existential_1(a1);
  *(_QWORD *)a2 = KeyPath;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t key path getter for EnvironmentValues.redactionReasons : EnvironmentValues@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.redactionReasons.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1870ECBB4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.redactionReasons.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.redactionReasons : EnvironmentValues()
{
  return EnvironmentValues.redactionReasons.setter();
}

uint64_t sub_1870ECC28()
{
  return EnvironmentValues.redactionReasons.setter();
}

uint64_t sub_1870ECC5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InvalidatableContentModifier and conformance InvalidatableContentModifier;
  if (!lazy protocol witness table cache variable for type InvalidatableContentModifier and conformance InvalidatableContentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InvalidatableContentModifier, &type metadata for InvalidatableContentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvalidatableContentModifier and conformance InvalidatableContentModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InvalidatableContentModifier and conformance InvalidatableContentModifier;
  if (!lazy protocol witness table cache variable for type InvalidatableContentModifier and conformance InvalidatableContentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InvalidatableContentModifier, &type metadata for InvalidatableContentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvalidatableContentModifier and conformance InvalidatableContentModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InvalidatableContentModifier and conformance InvalidatableContentModifier;
  if (!lazy protocol witness table cache variable for type InvalidatableContentModifier and conformance InvalidatableContentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InvalidatableContentModifier, &type metadata for InvalidatableContentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvalidatableContentModifier and conformance InvalidatableContentModifier);
  }
  return result;
}

ValueMetadata *type metadata accessor for InvalidatableContentModifier()
{
  return &type metadata for InvalidatableContentModifier;
}

unint64_t instantiation function for generic protocol witness table for InvalidatableContentModifier(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
  a1[2] = lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
  result = lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
  a1[3] = result;
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in InvalidatableContentModifier()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>, _ViewModifier_Content<InvalidatableContentModifier>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>, _ViewModifier_Content<InvalidatableContentModifier>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>, _ViewModifier_Content<InvalidatableContentModifier>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>, _ViewModifier_Content<InvalidatableContentModifier>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>> and conformance AppearanceAnimationView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>, MEMORY[0x1E0CE5940]);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<InvalidatableContentModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<InvalidatableContentModifier>, MEMORY[0x1E0CE5318]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>, _ViewModifier_Content<InvalidatableContentModifier>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>, _ViewModifier_Content<InvalidatableContentModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>, _ViewModifier_Content<InvalidatableContentModifier>>)
  {
    type metadata accessor for AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>();
    type metadata accessor for _ViewModifier_Content<InvalidatableContentModifier>();
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>, _ViewModifier_Content<InvalidatableContentModifier>>);
  }
}

void type metadata accessor for AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>)
  {
    type metadata accessor for _ViewModifier_Content<InvalidatableContentModifier>();
    type metadata accessor for ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<InvalidatableContentModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<InvalidatableContentModifier>, MEMORY[0x1E0CE5318]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>();
    v0 = type metadata accessor for AppearanceAnimationView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AppearanceAnimationView<_ViewModifier_Content<InvalidatableContentModifier>, ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>>);
  }
}

void type metadata accessor for _ViewModifier_Content<InvalidatableContentModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<InvalidatableContentModifier>)
  {
    lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<InvalidatableContentModifier>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>)
  {
    type metadata accessor for _ViewModifier_Content<InvalidatableContentModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<InvalidatableContentModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<InvalidatableContentModifier>, MEMORY[0x1E0CE5318]);
    v3[1] = MEMORY[0x1E0CE2BA8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<InvalidatableContentModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t ModalLink.isPresented.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (*(_QWORD *)(v2 + *(int *)(a2 + 56) + 8))
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

uint64_t ModalLink.$isPresented.getter()
{
  uint64_t v1;

  type metadata accessor for State<Bool>();
  State.projectedValue.getter();
  return v1;
}

void ModalLink.init(presenting:label:)()
{
  type metadata accessor for ModalLink();
}

uint64_t sub_1870ED18C(uint64_t a1)
{
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;

  v6 = v4 + *(int *)(a1 + 56);
  *(_BYTE *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  result = v1();
  v8 = (_QWORD *)(v4 + *(int *)(a1 + 52));
  *v8 = v3;
  v8[1] = v2;
  return result;
}

void type metadata accessor for ModalLink()
{
  JUMPOUT(0x18D75FF28);
}

void ModalLink.body.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v27 = a3;
  MEMORY[0x1E0C80A78](a1, a2);
  v23 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for Button(0, v23, *(_QWORD *)(v4 + 32), v5);
  v7 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  v26 = v7;
  MEMORY[0x1E0C80A78](v6, v8);
  v25 = (char *)&v21 - v9;
  v10 = *(_QWORD *)(a1 + 24);
  type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, v11, v12, v13);
  v15 = v14;
  v22 = *(_QWORD *)(a1 + 40);
  v16 = v22;
  v20 = lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>(v14, v17, v18, v19);
  v28 = v10;
  v29 = v15;
  v30 = v16;
  v31 = v20;
  type metadata accessor for SheetPresentationModifier();
}

void sub_1870ED2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)(v15 - 224) = a1;
  v16 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v15 - 248) = v16;
  *(_QWORD *)(v15 - 216) = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)(v15 - 272) = (char *)&a9 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  *(_QWORD *)(v15 - 232) = (char *)&a9 - v22;
  v23 = v12;
  v24 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v12 + 16))(v14, v9, v11, v21);
  v25 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v26 = (char *)swift_allocObject();
  v27 = *(_QWORD *)(v15 - 264);
  *((_QWORD *)v26 + 2) = v27;
  *((_QWORD *)v26 + 3) = v10;
  v28 = v13;
  *((_QWORD *)v26 + 4) = v13;
  v29 = *(_QWORD *)(v15 - 280);
  *((_QWORD *)v26 + 5) = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(&v26[v25], v14, v11);
  *(_QWORD *)(v15 - 176) = v27;
  *(_QWORD *)(v15 - 168) = v10;
  *(_QWORD *)(v15 - 160) = v28;
  *(_QWORD *)(v15 - 152) = v29;
  *(_QWORD *)(v15 - 144) = v24;
  Button.init(action:label:)((uint64_t)partial apply for closure #1 in ModalLink.body.getter, (uint64_t)v26, (void (*)(uint64_t))partial apply for closure #2 in ModalLink.body.getter, v15 - 192, v27, v28, *(_WORD **)(v15 - 240));
  ModalLink.$isPresented.getter();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, *(_QWORD *)(v15 - 256));
  View.sheet<A>(isPresented:onDismiss:content:)();
}

uint64_t sub_1870ED454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 208) + 8))(v0, v1);
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SheetPresentationModifier<A, B>, *(_QWORD *)(v4 - 224));
  *(_QWORD *)(v4 - 136) = v3;
  *(_QWORD *)(v4 - 128) = v5;
  v6 = *(_QWORD *)(v4 - 248);
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v4 - 136);
  v8 = *(_QWORD *)(v4 - 232);
  static ViewBuilder.buildExpression<A>(_:)(v2, v6, v7);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 216) + 8);
  v9(v2, v6);
  static ViewBuilder.buildBlock<A>(_:)(v8, v6, *(_QWORD *)(v4 - 200));
  return v9(v8, v6);
}

void type metadata accessor for NullSheetAnchor<SheetPreference.Key>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>)
  {
    v4 = type metadata accessor for NullSheetAnchor(0, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>);
  }
}

unint64_t lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;

  result = lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>;
  if (!lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>)
  {
    type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, a2, a3, a4);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NullSheetAnchor<A>, v5);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>);
  }
  return result;
}

void sub_1870ED5BC()
{
  type metadata accessor for ModalLink();
}

uint64_t sub_1870ED5EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v1 + ((v2 + 48) & ~v2));
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ModalLink.body.getter()
{
  type metadata accessor for ModalLink();
}

void sub_1870ED6A4()
{
  type metadata accessor for ModalLink();
}

uint64_t sub_1870ED6CC(uint64_t a1)
{
  return ModalLink.isPresented.setter(1, a1);
}

uint64_t closure #2 in ModalLink.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v8, v9, v10);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v7, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a2);
}

uint64_t partial apply for closure #2 in ModalLink.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in ModalLink.body.getter(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16), a1);
}

void ModalLink<>.init(_:presenting:)()
{
  type metadata accessor for ModalLink();
}

__n128 sub_1870ED7FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  char v14;
  __n128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v6 = v4 + *(int *)(a1 + 56);
  *(_BYTE *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  closure #1 in TextField<>.init<A>(_:value:format:prompt:)((uint64_t)&v13);
  v7 = (_QWORD *)(v4 + *(int *)(a1 + 52));
  *v7 = v2;
  v7[1] = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v14;
  v9 = v16;
  v10 = v17;
  v11 = v18;
  result = v15;
  *(_OWORD *)v3 = v13;
  *(_BYTE *)(v3 + 16) = v8;
  *(__n128 *)(v3 + 24) = result;
  *(_QWORD *)(v3 + 40) = v9;
  *(_BYTE *)(v3 + 48) = v10;
  *(_QWORD *)(v3 + 56) = v11;
  return result;
}

void ModalLink<>.init<A>(_:presenting:)()
{
  type metadata accessor for ModalLink();
}

__n128 sub_1870ED8FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __n128 result;
  __int128 v15;
  char v16;
  __n128 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v8 = v6 + *(int *)(a1 + 56);
  *(_BYTE *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  closure #1 in ModalLink<>.init<A>(_:presenting:)(v4, (uint64_t)&v15);
  v9 = (_QWORD *)(v6 + *(int *)(a1 + 52));
  *v9 = v3;
  v9[1] = v2;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v4, v1);
  v10 = v16;
  v11 = v18;
  v12 = v19;
  v13 = v20;
  result = v17;
  *(_OWORD *)v5 = v15;
  *(_BYTE *)(v5 + 16) = v10;
  *(__n128 *)(v5 + 24) = result;
  *(_QWORD *)(v5 + 40) = v11;
  *(_BYTE *)(v5 + 48) = v12;
  *(_QWORD *)(v5 + 56) = v13;
  return result;
}

uint64_t closure #1 in ModalLink<>.init<A>(_:presenting:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  result = Text.init<A>(_:)();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v8 & 1;
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ModalLink<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for ModalLink()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ModalLink(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    v14 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v13 = *(_BYTE *)v14;
    *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ModalLink(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ModalLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v10 = *(_BYTE *)v11;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ModalLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v10 = *(_BYTE *)v11;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for ModalLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ModalLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v10 = *(_BYTE *)(v9 & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)(v10 + 8) = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModalLink(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1870EDEAC + 4 * byte_187C08868[v10]))();
  }
}

void storeEnumTagSinglePayload for ModalLink(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1870EE02C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1870EE0A4);
}

void sub_1870EE034(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1870EE03CLL);
  JUMPOUT(0x1870EE0A4);
}

void sub_1870EE07C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1870EE0A4);
}

void sub_1870EE084()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1870EE0A4);
}

uint64_t sub_1870EE08C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1870EE0A4);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1870EE0A0);
    JUMPOUT(0x1870EE098);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void sub_1870EE0BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  type metadata accessor for Button(255, *a1, a1[2], a4);
  type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, v4, v5, v6);
  lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>(v7, v8, v9, v10);
  type metadata accessor for SheetPresentationModifier();
}

uint64_t sub_1870EE108(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[12];

  v3 = type metadata accessor for ModifiedContent();
  v5[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v1);
  v5[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SheetPresentationModifier<A, B>, a1);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v5);
}

void type metadata accessor for State<Bool>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for State<Bool>)
  {
    v0 = type metadata accessor for State();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>);
  }
}

void Gesture.sequenced<A>(before:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a5;
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v17, v15);
  v20 = (char *)&v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v20, v6, a2, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a6, v20, a2);
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = v22;
  type metadata accessor for SequenceGesture();
}

uint64_t sub_1870EE2A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void SequenceGesture.init(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for SequenceGesture();
}

uint64_t sub_1870EE338(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

void type metadata accessor for SequenceGesture()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t SequenceGesture.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t SequenceGesture.first.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*SequenceGesture.first.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SequenceGesture.second.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t SequenceGesture.second.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*SequenceGesture.second.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void static SequenceGesture._makeGesture(gesture:inputs:)()
{
  type metadata accessor for SequenceGesture();
}

void sub_1870EE4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t AssociatedTypeWitness;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  *(_QWORD *)(v9 + 104) = a1;
  *(_QWORD *)(v9 + 56) = type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  v14 = v12[13];
  v10[20] = v12[12];
  v10[21] = v14;
  v10[22] = v12[14];
  *(_OWORD *)((char *)v12 + 108) = *(_OWORD *)((char *)v12 + 236);
  v15 = v12[9];
  *v12 = v12[8];
  v12[1] = v15;
  v16 = v12[11];
  v12[2] = v12[10];
  v12[3] = v16;
  static Gesture.makeDebuggableGesture(gesture:inputs:)();
  v18 = v12[12];
  v17 = v12[13];
  v19 = v12[11];
  v12[4] = v18;
  v12[5] = v17;
  v20 = v12[13];
  v12[6] = v12[14];
  *(_OWORD *)((char *)v12 + 108) = *(_OWORD *)((char *)v12 + 236);
  v21 = v12[9];
  *v12 = v12[8];
  v12[1] = v21;
  v22 = v12[11];
  v24 = v12[8];
  v23 = v12[9];
  v25 = v12[10];
  v12[2] = v25;
  v12[3] = v22;
  v26 = *(_DWORD *)(v9 + 416);
  v27 = *(_DWORD *)(v9 + 420);
  v28 = *(_QWORD *)(v9 + 424);
  v29 = *(_DWORD *)(v9 + 432);
  v10[12] = v18;
  v10[13] = v20;
  v10[14] = v12[14];
  *(_OWORD *)((char *)v10 + 236) = *(_OWORD *)((char *)v12 + 236);
  v10[8] = v24;
  v10[9] = v23;
  v10[10] = v25;
  v10[11] = v19;
  outlined retain of _GestureInputs(v13 - 240);
  v30 = _GestureInputs.events.getter();
  *(_DWORD *)(v9 + 132) = v26;
  *(_DWORD *)(v9 + 136) = v27;
  *(_DWORD *)(v9 + 416) = v26;
  *(_DWORD *)(v9 + 420) = v27;
  *(_QWORD *)(v9 + 144) = v28;
  *(_QWORD *)(v9 + 424) = v28;
  *(_DWORD *)(v9 + 140) = v29;
  *(_DWORD *)(v9 + 432) = v29;
  v31 = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v9 + 32) = type metadata accessor for _GestureOutputs();
  v33 = _GestureOutputs.phase.getter();
  *(_DWORD *)(v9 + 416) = v30;
  *(_DWORD *)(v9 + 420) = v33;
  *(_QWORD *)(v9 + 88) = AssociatedTypeWitness;
  v36 = type metadata accessor for SequenceEvents(0, AssociatedTypeWitness, v34, v35);
  *(_QWORD *)(v9 + 224) = v36;
  *(_QWORD *)(v9 + 232) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SequenceEvents<A>, v36);
  type metadata accessor for Attribute<[EventID : EventType]>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9 + 416, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_5, v9 + 208, v36, MEMORY[0x1E0DEDCE8], v37, MEMORY[0x1E0DEDD18], v38);
  *(_QWORD *)(v9 + 64) = 0;
  v39 = _GestureInputs.events.setter();
  v41 = *(_DWORD *)(v9 + 664);
  if ((v41 & 2) == 0)
    *(_DWORD *)(v9 + 664) = v41 | 2;
  MEMORY[0x1E0C80A78](v39, v40);
  *(_QWORD *)(v9 + 24) = v31;
  v42 = *(_QWORD *)(v9 + 80);
  v43 = *(_QWORD *)(v9 + 96);
  *(_DWORD *)(v9 + 416) = *(_DWORD *)(v9 + 76);
  _GraphValue.subscript.getter();
  v44 = v12[5];
  v10[12] = v12[4];
  v10[13] = v44;
  v10[14] = v12[6];
  *(_OWORD *)((char *)v10 + 236) = *(_OWORD *)((char *)v12 + 108);
  v45 = v12[1];
  v10[8] = *v12;
  v10[9] = v45;
  v46 = v12[3];
  v10[10] = v12[2];
  v10[11] = v46;
  static Gesture.makeDebuggableGesture(gesture:inputs:)();
  v47 = *(_DWORD *)(v9 + 288);
  *(_DWORD *)(v9 + 76) = v47;
  v48 = *(_DWORD *)(v9 + 292);
  v49 = *(_QWORD *)(v9 + 296);
  *(_QWORD *)(v9 + 40) = v49;
  v50 = *(_DWORD *)(v9 + 304);
  *(_DWORD *)(v9 + 52) = v50;
  *(_DWORD *)(v9 + 56) = v48;
  *(_DWORD *)(v9 + 416) = *(_DWORD *)(v9 + 132);
  *(_DWORD *)(v9 + 420) = *(_DWORD *)(v9 + 136);
  *(_QWORD *)(v9 + 424) = *(_QWORD *)(v9 + 144);
  *(_DWORD *)(v9 + 432) = *(_DWORD *)(v9 + 140);
  *(_DWORD *)(v9 + 8) = _GestureOutputs.phase.getter();
  *(_DWORD *)(v9 + 416) = v47;
  *(_DWORD *)(v9 + 420) = v48;
  *(_QWORD *)(v9 + 424) = v49;
  *(_DWORD *)(v9 + 432) = v50;
  *(_QWORD *)(v9 + 32) = swift_getAssociatedTypeWitness();
  type metadata accessor for _GestureOutputs();
  LODWORD(v49) = _GestureOutputs.phase.getter();
  v51 = v12[13];
  v10[12] = v12[12];
  v10[13] = v51;
  v10[14] = v12[14];
  *(_OWORD *)((char *)v10 + 236) = *(_OWORD *)((char *)v12 + 236);
  v52 = v12[9];
  v10[8] = v12[8];
  v10[9] = v52;
  v53 = v12[11];
  v10[10] = v12[10];
  v10[11] = v53;
  v54 = _GestureInputs.resetSeed.getter();
  *(_QWORD *)(v9 + 16) = &a9;
  *(_DWORD *)(v9 + 288) = *(_DWORD *)(v9 + 8);
  *(_DWORD *)(v9 + 292) = v49;
  *(_QWORD *)(v9 + 296) = v54;
  MEMORY[0x1E0C80A78](v54, v55);
  v56 = *(_QWORD *)(v9 + 120);
  *(_QWORD *)(v9 + 416) = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v9 + 424) = v42;
  *(_QWORD *)(v9 + 432) = v56;
  *(_QWORD *)(v9 + 440) = v43;
  type metadata accessor for SequenceGesture.Value();
}

void sub_1870EE854(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[1] = a1;
  *(_QWORD *)(v5 - 32) = type metadata accessor for GesturePhase();
  v1[52] = v3;
  v1[53] = v6;
  v1[54] = v4;
  v1[55] = v2;
  type metadata accessor for SequencePhase();
}

uint64_t sub_1870EE880(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  *(_QWORD *)(v5 - 24) = a1;
  *(_QWORD *)(v5 - 16) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SequencePhase<A, B>, a1);
  v7 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 288, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, v3, a1, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  _GestureOutputs.init(phase:)();
  *(_BYTE *)(v1 + 199) = 4;
  v9 = v4[13];
  v2[4] = v4[12];
  v2[5] = v9;
  v2[6] = v4[14];
  *(_OWORD *)((char *)v2 + 108) = *(_OWORD *)((char *)v4 + 236);
  v10 = v4[9];
  *v2 = v4[8];
  v2[1] = v10;
  v11 = v4[11];
  v2[2] = v4[10];
  v2[3] = v11;
  v12 = *(_DWORD *)(v1 + 136);
  *(_DWORD *)(v1 + 176) = *(_DWORD *)(v1 + 132);
  *(_DWORD *)(v1 + 180) = v12;
  *(_QWORD *)(v1 + 184) = *(_QWORD *)(v1 + 144);
  *(_DWORD *)(v1 + 192) = *(_DWORD *)(v1 + 140);
  v13 = *(_DWORD *)(v1 + 56);
  *(_DWORD *)(v1 + 152) = *(_DWORD *)(v1 + 76);
  *(_DWORD *)(v1 + 156) = v13;
  *(_QWORD *)(v1 + 160) = *(_QWORD *)(v1 + 40);
  *(_DWORD *)(v1 + 168) = *(_DWORD *)(v1 + 52);
  type metadata accessor for _GestureOutputs();
  *(_BYTE *)(v1 + 416) = 1;
  _GestureOutputs.wrapDebugOutputs<A, B, C>(_:kind:properties:inputs:combiningOutputs:)();
  v14 = v4[5];
  v2[12] = v4[4];
  v2[13] = v14;
  v2[14] = v4[6];
  *(_OWORD *)((char *)v2 + 236) = *(_OWORD *)((char *)v4 + 108);
  v15 = v4[1];
  v2[8] = *v4;
  v2[9] = v15;
  v16 = v4[3];
  v2[10] = v4[2];
  v2[11] = v16;
  outlined release of _GestureInputs(v1 + 416);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void closure #1 in static SequenceGesture._makeGesture(gesture:inputs:)()
{
  type metadata accessor for SequenceGesture();
}

uint64_t sub_1870EEA64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v6[2] = a1;
  v7 = v1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v1, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

void partial apply for closure #1 in static SequenceGesture._makeGesture(gesture:inputs:)()
{
  closure #1 in static SequenceGesture._makeGesture(gesture:inputs:)();
}

uint64_t outlined retain of _GestureInputs(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 88);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = v2;
  swift_bridgeObjectRetain();
  return a1;
}

void closure #2 in static SequenceGesture._makeGesture(gesture:inputs:)()
{
  type metadata accessor for SequenceGesture();
}

uint64_t sub_1870EEB68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = v2 + *(int *)(a1 + 52);
  v7[2] = a1;
  v8 = v1;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v1, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v9;
}

void protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance SequenceGesture<A, B>()
{
  static SequenceGesture._makeGesture(gesture:inputs:)();
}

void static SequenceGesture.Value<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[7];
  uint64_t TupleTypeMetadata2;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v31[2] = a8;
  v35 = a7;
  v40 = a1;
  v41 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31[5] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, AssociatedTypeWitness);
  v31[1] = (char *)v31 - v13;
  v33 = v14;
  v15 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v31[4] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v16);
  v31[6] = (char *)v31 - v17;
  v36 = v15;
  v38 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v31[3] = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v34 = (char *)v31 - v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v37 = (char *)v31 - v26;
  v27 = swift_getAssociatedTypeWitness();
  v39 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v28);
  MEMORY[0x1E0C80A78](v29, v30);
  v42 = a3;
  v43 = a4;
  v44 = a5;
  v45 = a6;
  type metadata accessor for SequenceGesture.Value();
}

uint64_t sub_1870EEDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  void (*v21)(_BYTE *, _QWORD, uint64_t, double);
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  _QWORD *v28;
  void (*v29)(uint64_t, _BYTE *, uint64_t);
  uint64_t v30;
  void (*v31)(_BYTE *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  void (*v38)(uint64_t, uint64_t);
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_QWORD, uint64_t);
  uint64_t v49;
  char v50;
  void (*v51)(uint64_t, uint64_t);
  void (*v52)(uint64_t, uint64_t);
  _BYTE v53[96];

  v6 = a1;
  v7 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = &v53[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v53[-v12];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v5 - 184) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v16 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v15);
  v18 = &v53[-v17];
  v20 = &v53[*(int *)(v19 + 48) - v17];
  *(_QWORD *)(v5 - 192) = v7;
  v21 = *(void (**)(_BYTE *, _QWORD, uint64_t, double))(v7 + 16);
  v21(&v53[-v17], *(_QWORD *)(v5 - 136), v6, v16);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v21)(v20, *(_QWORD *)(v5 - 128), v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_QWORD *)(v5 - 136) = v3;
    *(_QWORD *)(v5 - 128) = v18;
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v21)(v9, v18, v6);
    v22 = *(_QWORD *)(v5 - 168);
    v23 = *(int *)(swift_getTupleTypeMetadata2() + 48);
    v24 = &v9[v23];
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v25 = &v20[v23];
      v27 = *(_QWORD *)(v5 - 144);
      v26 = *(_BYTE **)(v5 - 136);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v27 + 32))(v26, v20, v4);
      v28 = *(_QWORD **)(v5 - 152);
      v29 = (void (*)(uint64_t, _BYTE *, uint64_t))v28[4];
      v29(*(_QWORD *)(v5 - 160), v24, v22);
      v30 = *(_QWORD *)(v5 - 200);
      v29(v30, v25, v22);
      LOBYTE(v25) = dispatch thunk of static Equatable.== infix(_:_:)();
      v31 = *(void (**)(_BYTE *, uint64_t))(v27 + 8);
      v31(v9, v4);
      if ((v25 & 1) == 0)
      {
        v44 = (void (*)(uint64_t, uint64_t))v28[1];
        v44(v30, v22);
        v44(*(_QWORD *)(v5 - 160), v22);
        v31(v26, v4);
        v39 = 0;
        goto LABEL_13;
      }
      *(_QWORD *)(v5 - 176) = v4;
      *(_QWORD *)(v5 - 144) = v31;
      v32 = *(_QWORD *)(v5 - 224);
      v33 = v32 + *(int *)(*(_QWORD *)(v5 - 216) + 48);
      v34 = (void (*)(uint64_t, uint64_t, uint64_t))v28[2];
      v35 = *(_QWORD *)(v5 - 160);
      v34(v32, v35, v22);
      v34(v33, v30, v22);
      v36 = *(_QWORD *)(v5 - 232);
      v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
      if (v37(v32, 1, *(_QWORD *)(v5 - 208)) == 1)
      {
        v38 = (void (*)(uint64_t, uint64_t))v28[1];
        v38(v30, v22);
        v38(v35, v22);
        (*(void (**)(_QWORD, _QWORD))(v5 - 144))(*(_QWORD *)(v5 - 136), *(_QWORD *)(v5 - 176));
        if (v37(v33, 1, *(_QWORD *)(v5 - 208)) == 1)
        {
          v38(v32, v22);
          v39 = 1;
LABEL_13:
          v41 = *(_QWORD *)(v5 - 192);
          v18 = *(_BYTE **)(v5 - 128);
          goto LABEL_18;
        }
      }
      else
      {
        v45 = *(_QWORD *)(v5 - 248);
        v34(v45, v32, v22);
        v46 = *(_QWORD *)(v5 - 208);
        if (v37(v33, 1, v46) != 1)
        {
          v49 = *(_QWORD *)(v5 - 264);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v49, v33, v46);
          v50 = dispatch thunk of static Equatable.== infix(_:_:)();
          v51 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
          v51(v49, v46);
          v52 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 152) + 8);
          v52(*(_QWORD *)(v5 - 200), v22);
          v52(*(_QWORD *)(v5 - 160), v22);
          (*(void (**)(_QWORD, _QWORD))(v5 - 144))(*(_QWORD *)(v5 - 136), *(_QWORD *)(v5 - 176));
          v51(v45, v46);
          v52(v32, v22);
          v41 = *(_QWORD *)(v5 - 192);
          v18 = *(_BYTE **)(v5 - 128);
          if ((v50 & 1) != 0)
          {
            v39 = 1;
            goto LABEL_18;
          }
          goto LABEL_17;
        }
        v47 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v5 - 152) + 8);
        v47(*(_QWORD *)(v5 - 200), v22);
        v47(*(_QWORD *)(v5 - 160), v22);
        (*(void (**)(_QWORD, _QWORD))(v5 - 144))(*(_QWORD *)(v5 - 136), *(_QWORD *)(v5 - 176));
        (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v45, v46);
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 240) + 8))(v32, *(_QWORD *)(v5 - 216));
      v41 = *(_QWORD *)(v5 - 192);
      v18 = *(_BYTE **)(v5 - 128);
LABEL_17:
      v39 = 0;
      goto LABEL_18;
    }
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v5 - 152) + 8))(&v9[v23], v22);
    v40 = v4;
    v18 = *(_BYTE **)(v5 - 128);
  }
  else
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v21)(v13, v18, v6);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v42 = *(_QWORD *)(v5 - 144);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v42 + 32))(v2, v20, v4);
      v39 = dispatch thunk of static Equatable.== infix(_:_:)();
      v43 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
      v43(v2, v4);
      v43((uint64_t)v13, v4);
      v41 = *(_QWORD *)(v5 - 192);
      goto LABEL_18;
    }
    v9 = v13;
    v40 = v4;
  }
  v41 = *(_QWORD *)(v5 - 184);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v5 - 144) + 8))(v9, v40);
  v39 = 0;
  v6 = TupleTypeMetadata2;
LABEL_18:
  (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v18, v6);
  return v39 & 1;
}

uint64_t SequenceEvents.phase.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t Value;

  v2 = type metadata accessor for GesturePhase();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, Value, v2);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> SequenceGesture<A, B>.Value(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  static SequenceGesture.Value<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

unint64_t SequenceEvents.value.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int EnumCaseMultiPayload;
  uint64_t v7;

  v0 = type metadata accessor for GesturePhase();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v7 - v3;
  SequenceEvents.phase.getter((uint64_t)&v7 - v3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if (EnumCaseMultiPayload != 2)
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for [EventID : EventType]();
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

uint64_t SequencePhase.phase0.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t Value;

  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for GesturePhase();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t SequencePhase.phase1.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t Value;

  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for GesturePhase();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t SequencePhase.resetSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

unint64_t protocol witness for Rule.value.getter in conformance SequenceEvents<A>@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = SequenceEvents.value.getter();
  *a1 = result;
  return result;
}

void SequencePhase.updateValue()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[30];

  v27[28] = *MEMORY[0x1E0C80C00];
  v2 = a1[5];
  v3 = a1[3];
  v27[8] = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for GesturePhase();
  v27[11] = *(_QWORD *)(v4 - 8);
  v27[12] = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v27[4] = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v27[9] = (char *)v27 - v9;
  MEMORY[0x1E0C80A78](v10, v11);
  v27[10] = (char *)v27 - v12;
  v13 = a1[4];
  v14 = a1[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27[21] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, AssociatedTypeWitness);
  v27[13] = (char *)v27 - v16;
  v27[19] = v17;
  v18 = type metadata accessor for GesturePhase();
  v27[22] = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v27[7] = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  MEMORY[0x1E0C80A78](v23, v24);
  MEMORY[0x1E0C80A78](v25, v26);
  v27[24] = v14;
  v27[25] = v3;
  v27[26] = v13;
  v27[27] = v2;
  v27[20] = v2;
  type metadata accessor for SequenceGesture.Value();
}

uint64_t protocol witness for ResettableGestureRule.resetSeed.getter in conformance SequencePhase<A, B>()
{
  return SequencePhase.resetSeed.getter();
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.getter in conformance SequencePhase<A, B>()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 12);
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance SequencePhase<A, B>(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 12) = result;
  return result;
}

uint64_t (*protocol witness for ResettableGestureRule.lastResetSeed.modify in conformance SequencePhase<A, B>())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void protocol witness for static StatefulRule.initialValue.getter in conformance SequencePhase<A, B>()
{
  type metadata accessor for SequenceGesture.Value();
}

uint64_t sub_1870EFDF0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for GesturePhase();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 1, 1, v1);
}

uint64_t type metadata accessor for SequenceEvents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SequenceEvents);
}

void partial apply for closure #2 in static SequenceGesture._makeGesture(gesture:inputs:)()
{
  closure #2 in static SequenceGesture._makeGesture(gesture:inputs:)();
}

void type metadata accessor for SequenceGesture.Value()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for SequencePhase()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t outlined release of _GestureInputs(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 88);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

void base witness table accessor for Gesture in SequenceGesture<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in SequenceGesture<A, B>()
{
  return MEMORY[0x1E0CE83E8];
}

uint64_t getEnumTagSinglePayload for SequenceGesture(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1870F0010 + 4 * byte_187C088D8[v17 - 1]))();
}

void storeEnumTagSinglePayload for SequenceGesture(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata completion function for SequenceGesture.Value()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  _QWORD v3[6];

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    v3[4] = *(_QWORD *)(result - 8) + 64;
    swift_getAssociatedTypeWitness();
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v3[5] = v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SequenceGesture.Value(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  const void *v24;
  uint64_t v26;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8;
  v10 = v5 + v8;
  v11 = (v5 + v9) & ~v9;
  if (*(_DWORD *)(v7 + 84))
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = *(_QWORD *)(v7 + 64) + 1;
  if (v11 + v12 <= v5)
    v13 = v5;
  else
    v13 = v11 + v12;
  v14 = *(_DWORD *)(v4 + 80) | v8;
  v15 = (*(_BYTE *)(v4 + 80) | v8);
  v16 = v14 & 0x100000;
  if (v15 > 7 || v16 != 0 || v13 + 1 > 0x18)
  {
    v19 = *a2;
    *a1 = *a2;
    v20 = (_QWORD *)(v19 + ((v15 + 16) & ~v15));
    swift_retain();
  }
  else
  {
    v26 = v6;
    v21 = *((unsigned __int8 *)a2 + v13);
    v22 = a2;
    if (v21 >= 2)
    {
      if (v13 <= 3)
        v23 = v13;
      else
        v23 = 4;
      __asm { BR              X11 }
    }
    v20 = a1;
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v4 + 16))(a1, v22, AssociatedTypeWitness);
    if (v21 == 1)
    {
      v24 = (const void *)(((unint64_t)v22 + v10) & ~v9);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v24, 1, v26))
      {
        memcpy((void *)(((unint64_t)a1 + v10) & ~v9), v24, v12);
      }
      else
      {
        (*(void (**)(unint64_t, const void *, uint64_t))(v7 + 16))(((unint64_t)a1 + v10) & ~v9, v24, v26);
        (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(((unint64_t)a1 + v10) & ~v9, 0, 1, v26);
      }
      *((_BYTE *)a1 + v13) = 1;
    }
    else
    {
      *((_BYTE *)a1 + v13) = 0;
    }
  }
  return v20;
}

uint64_t destroy for SequenceGesture.Value(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v4 + v7;
  if (*(_DWORD *)(v6 + 84))
    v9 = *(_QWORD *)(v6 + 64);
  else
    v9 = *(_QWORD *)(v6 + 64) + 1;
  v10 = v9 + ((v4 + v7) & ~v7);
  if (v10 <= v4)
    v10 = v4;
  v11 = *(unsigned __int8 *)(a1 + v10);
  if (v11 >= 2)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  if (v11 == 1)
  {
    v14 = (v8 + a1) & ~v7;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v14, 1, v5);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
  }
  return result;
}

uint64_t initializeWithCopy for SequenceGesture.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  const void *v14;
  char v15;
  size_t __n;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v5 + v8;
  if (*(_DWORD *)(v7 + 84))
    v10 = *(_QWORD *)(v7 + 64);
  else
    v10 = *(_QWORD *)(v7 + 64) + 1;
  __n = v10;
  if (((v5 + v8) & ~v8) + v10 <= v5)
    v11 = v5;
  else
    v11 = ((v5 + v8) & ~v8) + v10;
  v12 = *(unsigned __int8 *)(a2 + v11);
  if (v12 >= 2)
  {
    if (v11 <= 3)
      v13 = v11;
    else
      v13 = 4;
    __asm { BR              X11 }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
  if (v12 == 1)
  {
    v14 = (const void *)((v9 + a2) & ~v8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v14, 1, v6))
    {
      memcpy((void *)((v9 + a1) & ~v8), v14, __n);
      v15 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, const void *, uint64_t))(v7 + 16))((v9 + a1) & ~v8, v14, v6);
      v15 = 1;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))((v9 + a1) & ~v8, 0, 1, v6);
    }
  }
  else
  {
    v15 = 0;
  }
  *(_BYTE *)(a1 + v11) = v15;
  return a1;
}

uint64_t assignWithCopy for SequenceGesture.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  const void *v17;
  char v18;
  size_t __n;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = v6 + v9;
    if (*(_DWORD *)(v8 + 84))
      v11 = *(_QWORD *)(v8 + 64);
    else
      v11 = *(_QWORD *)(v8 + 64) + 1;
    __n = v11;
    if (((v6 + v9) & ~v9) + v11 > v6)
      v6 = ((v6 + v9) & ~v9) + v11;
    v12 = *(unsigned __int8 *)(a1 + v6);
    if (v12 >= 2)
    {
      if (v6 <= 3)
        v13 = v6;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    v14 = ~v9;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    if (v12 == 1 && !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v10 + a1) & v14, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))((v10 + a1) & v14, v7);
    v15 = *(unsigned __int8 *)(a2 + v6);
    if (v15 >= 2)
    {
      if (v6 <= 3)
        v16 = v6;
      else
        v16 = 4;
      __asm { BR              X11 }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v15 == 1)
    {
      v17 = (const void *)((v10 + a2) & v14);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v17, 1, v7))
      {
        memcpy((void *)((v10 + a1) & v14), v17, __n);
        v18 = 1;
      }
      else
      {
        (*(void (**)(uint64_t, const void *, uint64_t))(v8 + 16))((v10 + a1) & v14, v17, v7);
        v18 = 1;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))((v10 + a1) & v14, 0, 1, v7);
      }
    }
    else
    {
      v18 = 0;
    }
    *(_BYTE *)(a1 + v6) = v18;
  }
  return a1;
}

uint64_t initializeWithTake for SequenceGesture.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  const void *v14;
  char v15;
  size_t __n;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v5 + v8;
  if (*(_DWORD *)(v7 + 84))
    v10 = *(_QWORD *)(v7 + 64);
  else
    v10 = *(_QWORD *)(v7 + 64) + 1;
  __n = v10;
  if (((v5 + v8) & ~v8) + v10 <= v5)
    v11 = v5;
  else
    v11 = ((v5 + v8) & ~v8) + v10;
  v12 = *(unsigned __int8 *)(a2 + v11);
  if (v12 >= 2)
  {
    if (v11 <= 3)
      v13 = v11;
    else
      v13 = 4;
    __asm { BR              X11 }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(a1, a2, AssociatedTypeWitness);
  if (v12 == 1)
  {
    v14 = (const void *)((v9 + a2) & ~v8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v14, 1, v6))
    {
      memcpy((void *)((v9 + a1) & ~v8), v14, __n);
      v15 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, const void *, uint64_t))(v7 + 32))((v9 + a1) & ~v8, v14, v6);
      v15 = 1;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))((v9 + a1) & ~v8, 0, 1, v6);
    }
  }
  else
  {
    v15 = 0;
  }
  *(_BYTE *)(a1 + v11) = v15;
  return a1;
}

uint64_t assignWithTake for SequenceGesture.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  const void *v17;
  char v18;
  size_t __n;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = v6 + v9;
    if (*(_DWORD *)(v8 + 84))
      v11 = *(_QWORD *)(v8 + 64);
    else
      v11 = *(_QWORD *)(v8 + 64) + 1;
    __n = v11;
    if (((v6 + v9) & ~v9) + v11 > v6)
      v6 = ((v6 + v9) & ~v9) + v11;
    v12 = *(unsigned __int8 *)(a1 + v6);
    if (v12 >= 2)
    {
      if (v6 <= 3)
        v13 = v6;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    v14 = ~v9;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    if (v12 == 1 && !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v10 + a1) & v14, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))((v10 + a1) & v14, v7);
    v15 = *(unsigned __int8 *)(a2 + v6);
    if (v15 >= 2)
    {
      if (v6 <= 3)
        v16 = v6;
      else
        v16 = 4;
      __asm { BR              X11 }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    if (v15 == 1)
    {
      v17 = (const void *)((v10 + a2) & v14);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v17, 1, v7))
      {
        memcpy((void *)((v10 + a1) & v14), v17, __n);
        v18 = 1;
      }
      else
      {
        (*(void (**)(uint64_t, const void *, uint64_t))(v8 + 32))((v10 + a1) & v14, v17, v7);
        v18 = 1;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))((v10 + a1) & v14, 0, 1, v7);
      }
    }
    else
    {
      v18 = 0;
    }
    *(_BYTE *)(a1 + v6) = v18;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SequenceGesture.Value(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unsigned int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = (v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_DWORD *)(v5 + 84);
  v8 = *(_QWORD *)(v5 + 64);
  if (!v7)
    ++v8;
  v9 = v8 + v6;
  if (v9 <= v4)
    v10 = v4;
  else
    v10 = v9;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_24;
  v11 = v10 + 1;
  v12 = 8 * (v10 + 1);
  if ((v10 + 1) <= 3)
  {
    v15 = ((a2 + ~(-1 << v12) - 254) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v15 < 2)
    {
LABEL_24:
      v17 = *(unsigned __int8 *)(a1 + v10);
      if (v17 >= 2)
        return (v17 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_24;
LABEL_17:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X11 }
  }
  return (v16 + 255);
}

void storeEnumTagSinglePayload for SequenceGesture.Value(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_DWORD *)(v7 + 84);
  v10 = *(_QWORD *)(v7 + 64);
  if (!v9)
    ++v10;
  v11 = v10 + v8;
  if (v11 <= v6)
    v11 = v6;
  v12 = v11 + 1;
  if (a3 < 0xFF)
  {
    v13 = 0u;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 + ~(-1 << (8 * v12)) - 254) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = 4u;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v14 = a2 - 255;
  if (v12 < 4)
  {
    if ((_DWORD)v11 != -1)
    {
      v16 = v14 & ~(-1 << (8 * v12));
      bzero(a1, v12);
      if ((_DWORD)v12 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }
      else if ((_DWORD)v12 == 2)
      {
        *(_WORD *)a1 = v16;
      }
      else
      {
        *a1 = v16;
      }
    }
  }
  else
  {
    bzero(a1, v11 + 1);
    *(_DWORD *)a1 = v14;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for SequenceGesture.Value(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = (v2 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_DWORD *)(v3 + 84);
  v6 = *(_QWORD *)(v3 + 64);
  if (!v5)
    ++v6;
  v7 = v6 + v4;
  if (v7 <= v2)
    v7 = v2;
  result = *(unsigned __int8 *)(a1 + v7);
  if (result >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for SequenceGesture.Value(_BYTE *a1, unsigned int a2)
{
  size_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  char v12;
  int v13;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  result = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(result - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(v6 + 64);
  if (!v8)
    ++v9;
  v10 = v9 + v7;
  if (v10 <= v4)
    v11 = v4;
  else
    v11 = v10;
  if (a2 > 1)
  {
    if (v11 <= 3)
      v12 = ((a2 - 2) >> (8 * v11)) + 2;
    else
      v12 = 2;
    a1[v11] = v12;
    if (v11 >= 4)
      v13 = 4;
    else
      v13 = v11;
    bzero(a1, v11);
    __asm { BR              X10 }
  }
  a1[v11] = a2;
  return result;
}

void base witness table accessor for StatefulRule in SequencePhase<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in SequencePhase<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in SequenceEvents<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void static SheetBehavior.navigationSplitViewForm.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.sheetBehavior(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for SheetBehavior()
{
  return &type metadata for SheetBehavior;
}

uint64_t storeEnumTagSinglePayload for SheetBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1870F16C8 + 4 * byte_187C08BCD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1870F16FC + 4 * byte_187C08BC8[v4]))();
}

uint64_t sub_1870F16FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870F1704(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1870F170CLL);
  return result;
}

uint64_t sub_1870F1718(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1870F1720);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1870F1724(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870F172C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SheetBehavior.Role()
{
  return &type metadata for SheetBehavior.Role;
}

unint64_t lazy protocol witness table accessor for type [SheetBehavior.Role] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [SheetBehavior.Role] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SheetBehavior.Role] and conformance [A])
  {
    type metadata accessor for [SheetBehavior.Role]();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SheetBehavior.Role] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [SheetBehavior.Role]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [SheetBehavior.Role])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [SheetBehavior.Role]);
  }
}

unint64_t lazy protocol witness table accessor for type SheetBehavior.Role and conformance SheetBehavior.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SheetBehavior.Role and conformance SheetBehavior.Role;
  if (!lazy protocol witness table cache variable for type SheetBehavior.Role and conformance SheetBehavior.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SheetBehavior.Role, &type metadata for SheetBehavior.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SheetBehavior.Role and conformance SheetBehavior.Role);
  }
  return result;
}

void static SheetBehavior.sheet.getter()
{
  static SheetBehavior.navigationSplitViewForm.getter();
}

void static SheetBehavior.form.getter()
{
  static SheetBehavior.navigationSplitViewForm.getter();
}

void __swiftcall PrototypePrintingCommands.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void PrototypePrintingCommands.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for Commands.Body : Commands in PrototypePrintingCommands()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PrototypePrintingCommands()
{
  return &type metadata for PrototypePrintingCommands;
}

_UNKNOWN **sub_1870F1888()
{
  return &protocol witness table for EmptyCommands;
}

uint64_t initializeWithCopy for WheelEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for WheelEvent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for WheelEvent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for WheelEvent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WheelEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for WheelEvent()
{
  return &type metadata for WheelEvent;
}

double protocol witness for EventType.init(_:) in conformance WheelEvent@<D0>(uint64_t a1@<X8>)
{
  double result;
  double v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for EventType();
  if (swift_dynamicCast())
  {
    result = v3;
    *(double *)a1 = v3;
    *(_BYTE *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)&result = 1;
    *(_OWORD *)(a1 + 16) = xmmword_187BFE310;
  }
  return result;
}

BOOL specialized static WheelEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;

  if (*(double *)a1 != *(double *)a2 || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8))
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(double *)(a1 + 24);
  v6 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    if (!v6)
      return v5 == *(double *)(a2 + 24);
    goto LABEL_13;
  }
  if (!v6)
  {
    swift_retain();
LABEL_13:
    swift_release();
    return 0;
  }
  if (v4 == v6)
    return v5 == *(double *)(a2 + 24);
  return 0;
}

uint64_t type metadata completion function for CustomHoverEffectModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for CustomHoverEffectModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || (((((v6 & 0xFFFFFFFFFFFFFFF8) + 57) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
    v10 = ((unint64_t)v4 + v6) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(_BYTE *)(v11 + 16);
    outlined copy of Environment<Bool>.Content(v12, v13);
    *(_QWORD *)(v10 + 8) = v12;
    *(_BYTE *)(v10 + 16) = v13;
    v14 = *(_QWORD *)(v11 + 24);
    v15 = *(_BYTE *)(v11 + 32);
    outlined copy of Environment<Bool>.Content(v14, v15);
    *(_QWORD *)(v10 + 24) = v14;
    *(_BYTE *)(v10 + 32) = v15;
    *(_BYTE *)(v10 + 33) = *(_BYTE *)(v11 + 33);
    v16 = (v10 + 41) & 0xFFFFFFFFFFFFFFF8;
    v17 = (v11 + 41) & 0xFFFFFFFFFFFFFFF8;
    v18 = *(_QWORD *)v17;
    *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
    *(_QWORD *)v16 = v18;
    v19 = (v10 + 57) & 0xFFFFFFFFFFFFFFF8;
    v20 = (v11 + 57) & 0xFFFFFFFFFFFFFFF8;
    v21 = *(_QWORD *)v20;
    *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
    *(_QWORD *)v19 = v21;
    *(_BYTE *)(v19 + 9) = *(_BYTE *)(v20 + 9);
    *(_QWORD *)((v19 + 17) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v20 + 17) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t destroy for CustomHoverEffectModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (*(_QWORD *)(v3 + 64) + a1) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(v4 + 24), *(_BYTE *)(v4 + 32));
}

uint64_t initializeWithCopy for CustomHoverEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  LOBYTE(v5) = *(_BYTE *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  outlined copy of Environment<Bool>.Content(v11, v5);
  *(_QWORD *)(v9 + 8) = v11;
  *(_BYTE *)(v9 + 16) = v5;
  v12 = *(_QWORD *)(v10 + 24);
  LOBYTE(v5) = *(_BYTE *)(v10 + 32);
  outlined copy of Environment<Bool>.Content(v12, v5);
  *(_QWORD *)(v9 + 24) = v12;
  *(_BYTE *)(v9 + 32) = v5;
  *(_BYTE *)(v9 + 33) = *(_BYTE *)(v10 + 33);
  v13 = (v9 + 41) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v10 + 41) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = v15;
  v16 = (v9 + 57) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v10 + 57) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 9) = *(_BYTE *)(v17 + 9);
  *(_QWORD *)((v16 + 17) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v17 + 17) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for CustomHoverEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  LOBYTE(v5) = *(_BYTE *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  outlined copy of Environment<Bool>.Content(v11, v5);
  v12 = *(_QWORD *)(v9 + 8);
  v13 = *(_BYTE *)(v9 + 16);
  *(_QWORD *)(v9 + 8) = v11;
  *(_BYTE *)(v9 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v12, v13);
  v14 = *(_QWORD *)(v10 + 24);
  LOBYTE(v5) = *(_BYTE *)(v10 + 32);
  outlined copy of Environment<Bool>.Content(v14, v5);
  v15 = *(_QWORD *)(v9 + 24);
  v16 = *(_BYTE *)(v9 + 32);
  *(_QWORD *)(v9 + 24) = v14;
  *(_BYTE *)(v9 + 32) = v5;
  outlined consume of Environment<Bool>.Content(v15, v16);
  *(_BYTE *)(v9 + 33) = *(_BYTE *)(v10 + 33);
  v17 = (v9 + 41) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v10 + 41) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = v19;
  v20 = (v9 + 57) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v10 + 57) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v20 = v22;
  *(_BYTE *)(v20 + 9) = *(_BYTE *)(v21 + 9);
  *(_QWORD *)((v20 + 17) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v21 + 17) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for CustomHoverEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v7 &= 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 16);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  *(_BYTE *)(v7 + 16) = v9;
  v10 = *(_BYTE *)(v8 + 32);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  *(_BYTE *)(v7 + 32) = v10;
  *(_BYTE *)(v7 + 33) = *(_BYTE *)(v8 + 33);
  v11 = (v7 + 41) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v8 + 41) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = v13;
  v14 = (v7 + 57) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v8 + 57) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v11) = *(_BYTE *)(v15 + 8);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = v11;
  *(_BYTE *)(v14 + 9) = *(_BYTE *)(v15 + 9);
  *(_QWORD *)((v14 + 17) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v15 + 17) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for CustomHoverEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v7) = *(_BYTE *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_BYTE *)(v9 + 16);
  *(_QWORD *)(v9 + 8) = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_BYTE *)(v9 + 16) = v7;
  outlined consume of Environment<Bool>.Content(v11, v12);
  v13 = *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v9 + 24);
  v15 = *(_BYTE *)(v9 + 32);
  *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
  *(_BYTE *)(v9 + 32) = v13;
  outlined consume of Environment<Bool>.Content(v14, v15);
  *(_BYTE *)(v9 + 33) = *(_BYTE *)(v10 + 33);
  v16 = (v9 + 41) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v10 + 41) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = v18;
  v19 = (v9 + 57) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v10 + 57) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_QWORD *)v19 = v21;
  *(_BYTE *)(v19 + 9) = *(_BYTE *)(v20 + 9);
  *(_QWORD *)((v19 + 17) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v20 + 17) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomHoverEffectModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 >= 0xFE)
      return (*(uint64_t (**)(void))(v4 + 48))();
    v12 = *(unsigned __int8 *)(v7 + a1);
    if (v12 >= 2)
      return ((v12 + 2147483646) & 0x7FFFFFFF) + 1;
    return 0;
  }
  if ((((((((v7 & 0xFFFFFFFFFFFFFFF8) + 57) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v8 = 2;
  else
    v8 = a2 - v6 + 1;
  if (v8 >= 0x10000)
    v9 = 4;
  else
    v9 = 2;
  if (v8 < 0x100)
    v9 = 1;
  if (v8 >= 2)
    v10 = v9;
  else
    v10 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1870F2208 + 4 * byte_187C08D50[v10]))();
}

void storeEnumTagSinglePayload for CustomHoverEffectModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if ((((((*(_DWORD *)(v5 + 64) & 0xFFFFFFF8) + 57) & 0xFFFFFFF8) + 17) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if ((((((*(_DWORD *)(v5 + 64) & 0xFFFFFFF8) + 57) & 0xFFFFFFF8) + 17) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, (((((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFFFF8) + 57) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1870F2384()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1870F238C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1870F2394);
}

void sub_1870F23C8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1870F23D0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_1870F23D8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
LABEL_2:
    JUMPOUT(0x1870F23E0);
  if (a3 < 0xFE)
  {
    *(_BYTE *)(v6 + v4) = a2 + 1;
    goto LABEL_2;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 56))(v6);
}

uint64_t type metadata accessor for CustomHoverEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CustomHoverEffectModifier);
}

void base witness table accessor for ViewModifier in CustomHoverEffectModifier<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in CustomHoverEffectModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t CustomHoverEffectModifier.hoverEffectState.getter@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = v2 + *(int *)(a1 + 44);
  v5 = *(_QWORD *)v4;
  v6 = *(_BYTE *)(v4 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v4, v6);
  specialized Environment.wrappedValue.getter(v5, v6, a2);
  return outlined consume of Environment<Bool>.Content(v5, v6);
}

uint64_t CustomHoverEffectModifier.body(content:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  _BYTE *v28;
  void (*v29)(_BYTE *, uint64_t, uint64_t, double);
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  char v37;
  char v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_BYTE *, uint64_t);
  _BYTE v45[4];
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  char v62;

  v4 = v3;
  v60 = a3;
  v53 = *((_QWORD *)a2 - 1);
  MEMORY[0x1E0C80A78](a1, a2);
  v52 = &v45[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v10, v7);
  v12 = &v45[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for CustomHoverEffectPrimitiveViewModifier(0, v8, *(_QWORD *)(v13 + 24), v14);
  v59 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = &v45[-v18];
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomHoverEffectModifier<A>, a2, v17);
  v54 = type metadata accessor for _ViewModifier_Content();
  v20 = type metadata accessor for ModifiedContent();
  v56 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = &v45[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  v28 = &v45[-v27];
  v57 = v9;
  v58 = v8;
  v29 = *(void (**)(_BYTE *, uint64_t, uint64_t, double))(v9 + 16);
  v55 = v12;
  v30 = v12;
  v31 = v8;
  v32 = v52;
  v33 = v53;
  v29(v30, v4, v31, v26);
  v51 = Namespace.wrappedValue.getter();
  v34 = a2[13];
  v50 = *(unsigned __int8 *)(v4 + a2[12]);
  v49 = *(_QWORD *)(v4 + v34);
  v48 = *(unsigned __int8 *)(v4 + v34 + 8);
  v35 = (uint64_t *)(v4 + a2[14]);
  v47 = *v35;
  v46 = *((unsigned __int8 *)v35 + 8);
  LODWORD(v9) = *(unsigned __int8 *)(v4 + a2[9]);
  (*(void (**)(_BYTE *, uint64_t, int *))(v33 + 16))(v32, v4, a2);
  if ((_DWORD)v9 == 1)
    v36 = UIKitButtonStyleModifier.ResolvedBody.isEnabled.getter((uint64_t)a2);
  else
    v36 = 0;
  (*(void (**)(_BYTE *, int *))(v33 + 8))(v32, a2);
  v37 = *(_BYTE *)(v4 + a2[15]);
  CustomHoverEffectModifier.hoverEffectState.getter((uint64_t)a2, &v62);
  v38 = v62;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v57 + 32))(v19, v55, v58);
  v39 = &v19[*(int *)(v15 + 36)];
  *(_QWORD *)v39 = v51;
  v39[8] = v50;
  *((_QWORD *)v39 + 2) = v49;
  v39[24] = v48;
  *((_QWORD *)v39 + 4) = v47;
  v39[40] = v46;
  v39[41] = v36 & 1;
  v39[42] = v37;
  v39[43] = v38;
  v40 = v54;
  v41 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v54);
  MEMORY[0x18D75B4AC](v19, v40, v15, v41);
  (*(void (**)(_BYTE *, uint64_t))(v59 + 8))(v19, v15);
  v61[0] = v41;
  v61[1] = &protocol witness table for CustomHoverEffectPrimitiveViewModifier<A>;
  v42 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v20, v61);
  static ViewBuilder.buildExpression<A>(_:)(v23, v20, v42);
  v43 = *(void (**)(_BYTE *, uint64_t))(v56 + 8);
  v43(v23, v20);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v28, v20, v60);
  return ((uint64_t (*)(_BYTE *, uint64_t))v43)(v28, v20);
}

uint64_t default argument 3 of CustomHoverEffectModifier.init(effect:isEnabled:isEnabledInEnvironment:hoverEffectState:isModifyingImageView:namespace:accessibilityID:background:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

int *CustomHoverEffectModifier.init(effect:isEnabled:isEnabledInEnvironment:hoverEffectState:isModifyingImageView:namespace:accessibilityID:background:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v19;
  char v20;
  uint64_t v21;
  int *result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v19 = *a5;
  v20 = *((_BYTE *)a5 + 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a13 - 8) + 32))(a9, a1, a13);
  result = (int *)type metadata accessor for CustomHoverEffectModifier(0, a13, a14, v21);
  *(_BYTE *)(a9 + result[9]) = a2;
  v23 = a9 + result[10];
  *(_QWORD *)v23 = a3;
  *(_BYTE *)(v23 + 8) = a4 & 1;
  v24 = a9 + result[11];
  *(_QWORD *)v24 = v19;
  *(_BYTE *)(v24 + 8) = v20;
  *(_BYTE *)(a9 + result[12]) = a6;
  v25 = a9 + result[13];
  *(_QWORD *)v25 = a7;
  *(_BYTE *)(v25 + 8) = a8 & 1;
  v26 = a9 + result[14];
  *(_QWORD *)v26 = a10;
  *(_BYTE *)(v26 + 8) = a11 & 1;
  *(_BYTE *)(a9 + result[15]) = a12;
  *(_QWORD *)(a9 + result[16]) = 0;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance CustomHoverEffectModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomHoverEffectModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t type metadata accessor for CustomHoverEffectPrimitiveViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CustomHoverEffectPrimitiveViewModifier);
}

double static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, double *a7@<X8>)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, _DWORD *, uint64_t *, double (*)@<D0>(uint64_t *@<X0>, double *@<X8>), uint64_t, uint64_t, uint64_t);
  double result;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  _DWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[16];
  uint64_t RootContext;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v30 = *a1;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = a2[5];
  v12 = a2[6];
  v13 = *((_DWORD *)a2 + 20);
  v42 = *a2;
  LODWORD(v43) = v9;
  v45 = *(_OWORD *)(a2 + 3);
  v44 = v10;
  v46 = v11;
  v47 = v12;
  v48 = *(_OWORD *)(a2 + 7);
  v49 = a2[9];
  v50 = v13;
  v40 = a5;
  v41 = a6;
  LODWORD(v51) = v30;
  type metadata accessor for CustomHoverEffectPrimitiveViewModifier(255, a5, a6, a4);
  type metadata accessor for _GraphValue();
  type metadata accessor for CustomHoverEffectPrimitiveViewModifier.RootContextOptions(0, a5, a6, v14);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  v15 = _GraphValue.value.getter();
  _DisplayList_Identity.init()();
  HIDWORD(v51) = v15;
  v34[0] = v30;
  v34[1] = v15;
  RootContext = type metadata accessor for CustomHoverEffectPrimitiveViewModifier.MakeRootContext(0, a5, a6, v16);
  v39 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomHoverEffectPrimitiveViewModifier<A>.MakeRootContext, RootContext);
  type metadata accessor for Attribute<HoverEffectContext>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v34, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_6, (uint64_t)v37, RootContext, MEMORY[0x1E0DEDCE8], v17, MEMORY[0x1E0DEDD18], v18);
  _CustomHoverEffectInputs.init(base:context:)();
  v19 = v51;
  v20 = v52;
  v21 = v53;
  v23 = v55;
  v22 = v56;
  v29 = v57;
  v27 = v54;
  v28 = v58;
  v35 = a5;
  v36 = a6;
  LODWORD(v51) = v30;
  _GraphValue.subscript.getter();
  v51 = v19;
  v52 = v20;
  v54 = v27;
  v53 = v21;
  v55 = v23;
  v56 = v22;
  v57 = v29;
  v58 = v28;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = a3;
  *(_QWORD *)(v24 + 24) = a4;
  v25 = *(void (**)(uint64_t *__return_ptr, _DWORD *, uint64_t *, double (*)@<D0>(uint64_t *@<X0>, double *@<X8>), uint64_t, uint64_t, uint64_t))(a6 + 32);
  swift_retain();
  v25(&v42, v34, &v51, partial apply for closure #3 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:), v24, a5, a6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)a7 = v42;
  result = v43;
  a7[1] = v43;
  return result;
}

uint64_t closure #1 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v7 = type metadata accessor for CustomHoverEffectPrimitiveViewModifier(0, a2, a3, a4);
  v8 = a1 + *(int *)(v7 + 36);
  v13[2] = v7;
  v14 = type metadata accessor for CustomHoverEffectPrimitiveViewModifier.RootContextOptions(0, a2, a3, v9);
  v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v13, v14, MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18], v11);
  return v15;
}

uint64_t closure #2 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for CustomHoverEffectPrimitiveViewModifier(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

double closure #3 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t *a1@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X1>, double *a3@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  v5 = *((_DWORD *)a1 + 2);
  v6 = a1[2];
  v7 = a1[5];
  v8 = a1[6];
  v22 = *a1;
  v23 = v5;
  v25 = *(_OWORD *)(a1 + 3);
  v24 = v6;
  v26 = v7;
  v27 = v8;
  v28 = *(_OWORD *)(a1 + 7);
  v29 = *(_OWORD *)(a1 + 9);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _CustomHoverEffectInputs.removeContextFromEnvironment()();
  v11 = v22;
  v12 = v23;
  v13 = v6;
  v14 = v25;
  v15 = v7;
  v16 = v8;
  v17 = v28;
  v18 = v29;
  v19 = DWORD2(v29);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRetain();
  a2(&v20, v9, &v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  *(_QWORD *)a3 = v20;
  result = v21;
  a3[1] = v21;
  return result;
}

uint64_t CustomHoverEffectPrimitiveViewModifier.MakeRootContext.options.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;

  type metadata accessor for CustomHoverEffectPrimitiveViewModifier.RootContextOptions(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  result = AGGraphGetValue();
  v5 = *(_BYTE *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_BYTE *)(result + 24);
  v8 = *(_QWORD *)(result + 32);
  v9 = *(_BYTE *)(result + 40);
  v10 = *(_BYTE *)(result + 41);
  v11 = *(_BYTE *)(result + 42);
  v12 = *(_BYTE *)(result + 43);
  *(_QWORD *)a3 = *(_QWORD *)result;
  *(_BYTE *)(a3 + 8) = v5;
  *(_QWORD *)(a3 + 16) = v6;
  *(_BYTE *)(a3 + 24) = v7;
  *(_QWORD *)(a3 + 32) = v8;
  *(_BYTE *)(a3 + 40) = v9;
  *(_BYTE *)(a3 + 41) = v10;
  *(_BYTE *)(a3 + 42) = v11;
  *(_BYTE *)(a3 + 43) = v12;
  return result;
}

uint64_t CustomHoverEffectPrimitiveViewModifier.MakeRootContext.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  unsigned int *v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  _DWORD v18[10];
  char v19;
  _DWORD v20[10];
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  _QWORD v25[5];
  char v26;

  v7 = v3[1];
  v22 = *v3;
  v6 = v22;
  v23 = v7;
  CustomHoverEffectPrimitiveViewModifier.MakeRootContext.options.getter(a1, a2, (uint64_t)v25);
  v8 = v25[0];
  v20[0] = v6;
  v20[1] = v7;
  CustomHoverEffectPrimitiveViewModifier.MakeRootContext.options.getter(a1, v9, (uint64_t)&v22);
  v10 = v24;
  v18[0] = v6;
  v18[1] = v7;
  CustomHoverEffectPrimitiveViewModifier.MakeRootContext.options.getter(a1, v11, (uint64_t)v20);
  v12 = v21;
  CustomHoverEffectPrimitiveViewModifier.MakeRootContext.options.getter(a1, v13, (uint64_t)v18);
  v14 = v19;
  v22 = v6;
  v23 = v7;
  result = CustomHoverEffectPrimitiveViewModifier.MakeRootContext.options.getter(a1, v15, (uint64_t)v25);
  v17 = v14 | ~v26;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = v8;
  *(_BYTE *)(a3 + 24) = v10;
  *(_BYTE *)(a3 + 25) = v12;
  *(_BYTE *)(a3 + 26) = v17 & 1;
  return result;
}

void protocol witness for static Rule.initialValue.getter in conformance CustomHoverEffectPrimitiveViewModifier<A>.MakeRootContext(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 26) = 0;
  *(_WORD *)(a1 + 24) = 2;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance CustomHoverEffectPrimitiveViewModifier<A>.MakeRootContext(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomHoverEffectPrimitiveViewModifier<A>.MakeRootContext, a1);
  return static AsyncAttribute.flags.getter();
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance CustomHoverEffectPrimitiveViewModifier<A>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  return static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance CustomHoverEffectPrimitiveViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomHoverEffectPrimitiveViewModifier<A>, a5);
  return static UnaryViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t key path getter for EnvironmentValues.hoverEffectState : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.hoverEffectState : EnvironmentValues()
{
  return EnvironmentValues.hoverEffectState.setter();
}

uint64_t sub_1870F3288()
{
  return EnvironmentValues.hoverEffectState.setter();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t type metadata completion function for CustomHoverEffectPrimitiveViewModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CustomHoverEffectPrimitiveViewModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 44 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = *(_OWORD *)((char *)v10 + 28);
    v12 = v10[1];
    v13 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *v10;
    v13[1] = v12;
    *(_OWORD *)((char *)v13 + 28) = v11;
  }
  return v4;
}

uint64_t initializeWithCopy for CustomHoverEffectPrimitiveViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *(_OWORD *)((char *)v8 + 28);
  v10 = v8[1];
  *v7 = *v8;
  v7[1] = v10;
  *(_OWORD *)((char *)v7 + 28) = v9;
  return a1;
}

uint64_t assignWithCopy for CustomHoverEffectPrimitiveViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  char v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  v9 = *(_BYTE *)(v8 + 24);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_BYTE *)(v7 + 24) = v9;
  v10 = *(_BYTE *)(v8 + 40);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  *(_BYTE *)(v7 + 40) = v10;
  *(_BYTE *)(v7 + 41) = *(_BYTE *)(v8 + 41);
  *(_BYTE *)(v7 + 42) = *(_BYTE *)(v8 + 42);
  *(_BYTE *)(v7 + 43) = *(_BYTE *)(v8 + 43);
  return a1;
}

uint64_t initializeWithTake for CustomHoverEffectPrimitiveViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *(_OWORD *)((char *)v8 + 28);
  v10 = v8[1];
  *v7 = *v8;
  v7[1] = v10;
  *(_OWORD *)((char *)v7 + 28) = v9;
  return a1;
}

uint64_t assignWithTake for CustomHoverEffectPrimitiveViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  char v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  v9 = *(_BYTE *)(v8 + 24);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_BYTE *)(v7 + 24) = v9;
  v10 = *(_BYTE *)(v8 + 40);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  *(_BYTE *)(v7 + 40) = v10;
  *(_BYTE *)(v7 + 41) = *(_BYTE *)(v8 + 41);
  *(_BYTE *)(v7 + 42) = *(_BYTE *)(v8 + 42);
  *(_BYTE *)(v7 + 43) = *(_BYTE *)(v8 + 43);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomHoverEffectPrimitiveViewModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2 && *((_BYTE *)a1 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 44))
    return v6 + *a1 + 1;
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v9 = *(unsigned __int8 *)((((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

double storeEnumTagSinglePayload for CustomHoverEffectPrimitiveViewModifier(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  double result;
  unint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE)
    v8 = 254;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(v6 + 64);
  v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 44;
  if (v8 >= a2)
  {
    if (v8 < a3)
      a1[v10] = 0;
    if (a2)
    {
      if (v7 < 0xFE)
      {
        v13 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
        if (a2 > 0xFE)
        {
          result = 0.0;
          *(_OWORD *)(v13 + 24) = 0u;
          *(_OWORD *)(v13 + 8) = 0u;
          *(_DWORD *)(v13 + 40) = 0;
          *(_QWORD *)v13 = a2 - 255;
        }
        else
        {
          *(_BYTE *)(v13 + 8) = a2 + 1;
        }
      }
      else
      {
        (*(void (**)(_BYTE *))(v6 + 56))(a1);
      }
    }
  }
  else
  {
    v11 = ~v8 + a2;
    bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 44);
    *(_DWORD *)a1 = v11;
    if (v8 < a3)
      a1[v10] = 1;
  }
  return result;
}

uint64_t sub_1870F3818(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for CustomHoverEffectModifier(255, *a1, v5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomHoverEffectModifier<A>, v6);
  v7 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for CustomHoverEffectPrimitiveViewModifier(255, v4, v5, v8);
  v9 = type metadata accessor for ModifiedContent();
  v11[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v7);
  v11[1] = &protocol witness table for CustomHoverEffectPrimitiveViewModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v11);
}

_UNKNOWN **base witness table accessor for ViewModifier in CustomHoverEffectPrimitiveViewModifier<A>()
{
  return &protocol witness table for CustomHoverEffectPrimitiveViewModifier<A>;
}

uint64_t partial apply for closure #1 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for CustomHoverEffectPrimitiveViewModifier.RootContextOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CustomHoverEffectPrimitiveViewModifier.RootContextOptions);
}

uint64_t type metadata accessor for CustomHoverEffectPrimitiveViewModifier.MakeRootContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CustomHoverEffectPrimitiveViewModifier.MakeRootContext);
}

void type metadata accessor for Attribute<HoverEffectContext>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<HoverEffectContext>)
  {
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<HoverEffectContext>);
  }
}

uint64_t partial apply for closure #2 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #2 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t sub_1870F3958()
{
  swift_release();
  return swift_deallocObject();
}

double partial apply for closure #3 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;

  return closure #3 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)(a1, *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(v2 + 16), a2);
}

uint64_t getEnumTagSinglePayload for CustomHoverEffectPrimitiveViewModifier.RootContextOptions(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 44))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomHoverEffectPrimitiveViewModifier.RootContextOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 44) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 44) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

void base witness table accessor for _AttributeBody in CustomHoverEffectPrimitiveViewModifier<A>.MakeRootContext()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t AnyNavigationLinkPresentedValue.view<A>(basedOn:applying:apparentPosition:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  _OWORD v14[2];
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_BYTE *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v12;
  v15 = v7;
  v16 = *(_OWORD *)(a1 + 40);
  v17 = v8;
  v18 = v9;
  v19 = v10;
  v20 = v11;
  return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 168))(v14, a2, a3, a4, a6, a7);
}

uint64_t AnyNavigationLinkPresentedValue.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for AnyNavigationLinkPresentedValueStorage(0, a2, a3, a4);
  v5 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 208) - 8) + 32))(v5 + *(_QWORD *)(*(_QWORD *)v5 + 224), a1);
  return v5;
}

uint64_t AnyNavigationLinkPresentedValueStorage.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 208) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 224), a1);
  return v2;
}

void AnyNavigationLinkPresentedValue.init<A>(_:)()
{
  type metadata accessor for AnyNavigationLinkCodablePresentedValueStorage();
}

uint64_t sub_1870F3B78()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 208) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 240), v0);
  return v1;
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 208) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 240), a1);
  return v2;
}

uint64_t AnyNavigationLinkPresentedValue.as<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a3, a3);
}

uint64_t AnyNavigationLinkPresentedValue.isSelected<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a1, a3, a4) & 1;
}

uint64_t AnyNavigationLinkPresentedValue.validateSelection<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 160))(a1, a3, a4);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyNavigationLinkPresentedValue()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyNavigationLinkPresentedValue()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = *v0;
  v2 = Hasher.init(_seed:)();
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v1 + 96))(v4, v2);
  AnyHashable.hash(into:)();
  outlined destroy of AnyHashable((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnyNavigationLinkPresentedValue()
{
  uint64_t v0;
  _QWORD v2[5];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v0 + 96))(v2);
  AnyHashable.hash(into:)();
  return outlined destroy of AnyHashable((uint64_t)v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyNavigationLinkPresentedValue()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = *v0;
  v2 = Hasher.init(_seed:)();
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v1 + 96))(v4, v2);
  AnyHashable.hash(into:)();
  outlined destroy of AnyHashable((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyNavigationLinkPresentedValue(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 176))(*a2) & 1;
}

void AnyNavigationLinkPresentedValueStorageBase.presentedType.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationLinkPresentedValueStorageBase.description.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationLinkPresentedValueStorageBase.hashableRepresentation.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationLinkPresentedValueStorageBase.presentationAction.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationLinkPresentedValueStorageBase.presentationInListAction.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationLinkPresentedValueStorageBase.as<A>(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationLinkPresentedValueStorageBase.append(to:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationLinkPresentedValueStorageBase.isSelected<A>(in:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationLinkPresentedValueStorageBase.validateSelection<A>(in:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationLinkPresentedValueStorageBase.view<A>(basedOn:applying:apparentPosition:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationLinkPresentedValueStorageBase.matches(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationLinkPresentedValueStorageBase.isOn(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for AnyNavigationLinkPresentedValueStorageBase()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for AnyNavigationLinkPresentedValueStorage()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t AnyNavigationLinkPresentedValueStorage.presentedType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 208);
}

unint64_t AnyNavigationLinkPresentedValueStorage.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  unint64_t v9;
  unint64_t v10;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 208);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 0;
  v10 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v9 = 0xD000000000000021;
  v10 = 0x8000000187BD7900;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2 + *(_QWORD *)(*(_QWORD *)v2 + 224), v3);
  v7._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t AnyNavigationLinkPresentedValueStorage.hashableRepresentation.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 208);
  v5 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v2 + *(_QWORD *)(v3 + 224), v4, v5);
  return AnyHashable.init<A>(_:)();
}

uint64_t AnyNavigationLinkPresentedValueStorage.presentationAction.getter@<X0>(uint64_t a1@<X8>)
{
  return AnyNavigationLinkPresentedValueStorage.presentationAction.getter(1, a1);
}

uint64_t AnyNavigationLinkPresentedValueStorage.presentationInListAction.getter@<X0>(uint64_t a1@<X8>)
{
  return AnyNavigationLinkPresentedValueStorage.presentationAction.getter(3, a1);
}

uint64_t AnyNavigationLinkPresentedValueStorage.presentationAction.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;

  v5 = *v2;
  v6 = (uint64_t)v2 + *(_QWORD *)(*v2 + 224);
  v7 = *(_QWORD *)(v5 + 208);
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v5 + 216);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(boxed_opaque_existential_1, v6, v7);
  *(_BYTE *)(a2 + 56) = a1;
  return result;
}

uint64_t AnyNavigationLinkPresentedValueStorage.as<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)v3 + 208);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v3 + *(_QWORD *)(v9 + 224), v6, v7);
  v11 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v11 ^ 1u, 1, a2);
}

uint64_t AnyNavigationLinkPresentedValueStorage.append(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 208);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, (uint64_t)v2 + *(_QWORD *)(v3 + 224), v4, v6);
  AnyNavigationPath.append<A>(_:)((uint64_t)v8, v4, *(_QWORD *)(v3 + 216));
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t AnyNavigationLinkPresentedValueStorage.append(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 208);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, (uint64_t)v3 + *(_QWORD *)(v7 + 224), v8, v10);
  v15 = a1;
  v16 = a2;
  v17 = a3;
  type metadata accessor for Binding<AnyNavigationPath>();
  MEMORY[0x18D75B9C8](&v18);
  AnyNavigationPath.append<A>(_:)((uint64_t)v12, v8, *(_QWORD *)(v7 + 216));
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v15 = v18;
  swift_retain();
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t AnyNavigationLinkPresentedValueStorage.isSelected<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v29[2];

  v29[0] = a3;
  v29[1] = a1;
  v5 = *(_QWORD *)v3;
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v29 - v9;
  v11 = *(_QWORD *)(v5 + 208);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v22 + 16))(v15, &v3[*(_QWORD *)(v5 + 224)], v11, v19);
  v23 = swift_dynamicCast();
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if (v23)
  {
    v24(v10, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v10, a2);
    v26 = type metadata accessor for SelectionManagerBox(0, a2, v29[0], v25);
    v27 = SelectionManagerBox.isSelected(_:)(v21, v26);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, a2);
  }
  else
  {
    v24(v10, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v27 = 0;
  }
  return v27 & 1;
}

uint64_t AnyNavigationLinkPresentedValueStorage.validateSelection<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v28[2];

  v28[0] = a3;
  v28[1] = a1;
  v5 = *(_QWORD *)v3;
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v28 - v9;
  v11 = *(_QWORD *)(v5 + 208);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v22 + 16))(v15, &v3[*(_QWORD *)(v5 + 224)], v11, v19);
  v23 = swift_dynamicCast();
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if ((v23 & 1) != 0)
  {
    v24(v10, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v10, a2);
    v26 = type metadata accessor for SelectionManagerBox(0, a2, v28[0], v25);
    if ((SelectionManagerBox.isSelected(_:)(v21, v26) & 1) == 0)
      SelectionManagerBox.select(_:)((uint64_t)v21, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v21, a2);
  }
  else
  {
    v24(v10, 1, 1, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t AnyNavigationLinkPresentedValueStorage.view<A>(basedOn:applying:apparentPosition:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v26[2];
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v12 = *(_QWORD *)(*(_QWORD *)v6 + 208);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 + 32);
  v18 = *(_QWORD *)(v16 + 56);
  v19 = *(_QWORD *)(v16 + 64);
  v20 = *(_BYTE *)(v16 + 72);
  v21 = *(_QWORD *)(v16 + 80);
  v22 = *(_OWORD *)(v16 + 16);
  v26[0] = *(_OWORD *)v16;
  v26[1] = v22;
  v27 = v17;
  v28 = *(_OWORD *)(v16 + 40);
  v29 = v18;
  v30 = v19;
  v31 = v20;
  v32 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v6 + *(_QWORD *)(v23 + 224), v12);
  v24 = ResolvedNavigationDestinations.view<A, B>(presenting:at:applying:)((uint64_t)v15, a4, a2, a3, v12, a5, a6);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return v24;
}

uint64_t AnyNavigationLinkPresentedValueStorage.matches(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 208);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v19 - v10;
  v12 = swift_dynamicCastClass();
  if (v12)
  {
    v13 = v12;
    v14 = (uint64_t)v2 + *(_QWORD *)(v3 + 224);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v11, v14, v4);
    v15(v7, v13 + *(_QWORD *)(*(_QWORD *)v13 + 224), v4);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v7, v4);
    v17(v11, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t AnyNavigationLinkPresentedValueStorage.isOn(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v3 = a1;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 208);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, (uint64_t)v2 + *(_QWORD *)(v4 + 224), v5, v7);
  LOBYTE(v3) = AnyNavigationPath.contains<A>(_:)((uint64_t)v9, v3, v5, *(_QWORD *)(v4 + 216));
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v3 & 1;
}

uint64_t AnyNavigationLinkPresentedValueStorage.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 208) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 224));
}

uint64_t AnyNavigationLinkPresentedValueStorage.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 208) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 224));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnyNavigationLinkPresentedValueStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyNavigationLinkPresentedValueStorage);
}

uint64_t type metadata completion function for AnyNavigationLinkCodablePresentedValueStorage()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

unint64_t AnyNavigationLinkCodablePresentedValueStorage.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  unint64_t v9;
  unint64_t v10;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 208);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 0;
  v10 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v9 = 0xD000000000000021;
  v10 = 0x8000000187BD7900;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2 + *(_QWORD *)(*(_QWORD *)v2 + 240), v3);
  v7._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.hashableRepresentation.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 208);
  v5 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v2 + *(_QWORD *)(v3 + 240), v4, v5);
  return AnyHashable.init<A>(_:)();
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.presentationAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 240);
  v5 = *(_QWORD *)(v3 + 208);
  *(_QWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 216);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v3 + 232);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a1);
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(boxed_opaque_existential_1, v4, v5);
  *(_BYTE *)(a1 + 56) = 2;
  return result;
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.presentationInListAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 240);
  v5 = *(_QWORD *)(v3 + 208);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v3 + 232);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a1);
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(boxed_opaque_existential_1, v4, v5);
  *(_BYTE *)(a1 + 56) = 3;
  return result;
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.as<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)v3 + 208);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v3 + *(_QWORD *)(v9 + 240), v6, v7);
  v11 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v11 ^ 1u, 1, a2);
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.append(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v3 = *v2;
  v4 = (*v2)[26];
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, (uint64_t)v2 + v3[30], v4, v6);
  AnyNavigationPath.append<A>(_:)((uint64_t)v8, v4, v3[27], v3[28], v3[29]);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.append(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = *v3;
  v8 = (*v3)[26];
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, (uint64_t)v3 + v7[30], v8, v10);
  v15 = a1;
  v16 = a2;
  v17 = a3;
  type metadata accessor for Binding<AnyNavigationPath>();
  MEMORY[0x18D75B9C8](&v18);
  AnyNavigationPath.append<A>(_:)((uint64_t)v12, v8, v7[27], v7[28], v7[29]);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v15 = v18;
  swift_retain();
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.isSelected<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v29[2];

  v29[0] = a3;
  v29[1] = a1;
  v5 = *(_QWORD *)v3;
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v29 - v9;
  v11 = *(_QWORD *)(v5 + 208);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v22 + 16))(v15, &v3[*(_QWORD *)(v5 + 240)], v11, v19);
  v23 = swift_dynamicCast();
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if (v23)
  {
    v24(v10, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v10, a2);
    v26 = type metadata accessor for SelectionManagerBox(0, a2, v29[0], v25);
    v27 = SelectionManagerBox.isSelected(_:)(v21, v26);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, a2);
  }
  else
  {
    v24(v10, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v27 = 0;
  }
  return v27 & 1;
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.validateSelection<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v28[2];

  v28[0] = a3;
  v28[1] = a1;
  v5 = *(_QWORD *)v3;
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v28 - v9;
  v11 = *(_QWORD *)(v5 + 208);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v22 + 16))(v15, &v3[*(_QWORD *)(v5 + 240)], v11, v19);
  v23 = swift_dynamicCast();
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if ((v23 & 1) != 0)
  {
    v24(v10, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v10, a2);
    v26 = type metadata accessor for SelectionManagerBox(0, a2, v28[0], v25);
    if ((SelectionManagerBox.isSelected(_:)(v21, v26) & 1) == 0)
      SelectionManagerBox.select(_:)((uint64_t)v21, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v21, a2);
  }
  else
  {
    v24(v10, 1, 1, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.view<A>(basedOn:applying:apparentPosition:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v26[2];
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v12 = *(_QWORD *)(*(_QWORD *)v6 + 208);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 + 32);
  v18 = *(_QWORD *)(v16 + 56);
  v19 = *(_QWORD *)(v16 + 64);
  v20 = *(_BYTE *)(v16 + 72);
  v21 = *(_QWORD *)(v16 + 80);
  v22 = *(_OWORD *)(v16 + 16);
  v26[0] = *(_OWORD *)v16;
  v26[1] = v22;
  v27 = v17;
  v28 = *(_OWORD *)(v16 + 40);
  v29 = v18;
  v30 = v19;
  v31 = v20;
  v32 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v6 + *(_QWORD *)(v23 + 240), v12);
  v24 = ResolvedNavigationDestinations.view<A, B>(presenting:at:applying:)((uint64_t)v15, a4, a2, a3, v12, a5, a6);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return v24;
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.matches(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 208);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v19 - v10;
  v12 = swift_dynamicCastClass();
  if (v12)
  {
    v13 = v12;
    v14 = (uint64_t)v2 + *(_QWORD *)(v3 + 240);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v11, v14, v4);
    v15(v7, v13 + *(_QWORD *)(*(_QWORD *)v13 + 240), v4);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v7, v4);
    v17(v11, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.isOn(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v3 = a1;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 208);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, (uint64_t)v2 + *(_QWORD *)(v4 + 240), v5, v7);
  LOBYTE(v3) = AnyNavigationPath.contains<A>(_:)((uint64_t)v9, v3, v5, *(_QWORD *)(v4 + 232));
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v3 & 1;
}

id AnyNavigationLinkCodablePresentedValueStorage.userActivityForOpeningScene(id:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v15;

  v6 = a3 & 1;
  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 208);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, (uint64_t)v3 + *(_QWORD *)(v7 + 240), v8, v10);
  v13 = specialized SceneNavigationStrategy_Phone.userActivityForOpeningWindow<A>(id:value:)(a1, a2, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return v13;
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 208) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 240));
}

uint64_t AnyNavigationLinkCodablePresentedValueStorage.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 208) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 240));
  return swift_deallocClassInstance();
}

void type metadata accessor for AnyNavigationLinkCodablePresentedValueStorage()
{
  JUMPOUT(0x18D75FF28);
}

BOOL specialized AnyNavigationLinkPresentedValue.canBeSelected<A>(in:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 80))() == a2;
}

void type metadata accessor for Binding<AnyNavigationPath>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<AnyNavigationPath>)
  {
    v0 = type metadata accessor for Binding();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>);
  }
}

ValueMetadata *type metadata accessor for AnyNavigationLinkPresentedValue()
{
  return &type metadata for AnyNavigationLinkPresentedValue;
}

unint64_t lazy protocol witness table accessor for type AnyNavigationLinkPresentedValue and conformance AnyNavigationLinkPresentedValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyNavigationLinkPresentedValue and conformance AnyNavigationLinkPresentedValue;
  if (!lazy protocol witness table cache variable for type AnyNavigationLinkPresentedValue and conformance AnyNavigationLinkPresentedValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyNavigationLinkPresentedValue, &type metadata for AnyNavigationLinkPresentedValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationLinkPresentedValue and conformance AnyNavigationLinkPresentedValue);
  }
  return result;
}

uint64_t destroy for NavigationStackViewSource(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 40);
  if (v2 >= 2)
    v2 = *(_DWORD *)result + 2;
  if (v2 == 1)
  {
    swift_release();
    result = *(_QWORD *)(v1 + 16);
    if (result != 1)
      return swift_release();
  }
  else if (!v2)
  {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

uint64_t initializeWithCopy for NavigationStackViewSource(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  __int128 v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(unsigned __int8 *)(a2 + 40);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  if (v4 == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v6 = (_OWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    swift_retain();
    if (v7 == 1)
    {
      *(_OWORD *)(a1 + 8) = *v6;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)v6;
      *(_QWORD *)(a1 + 16) = v7;
      swift_retain();
    }
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 40) = 1;
  }
  else if (v4)
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for NavigationStackViewSource(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      swift_release();
      if (*(_QWORD *)(a1 + 16) != 1)
        swift_release();
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = *((_QWORD *)a2 + 2);
      swift_retain();
      if (v7 == 1)
      {
        *(_OWORD *)(a1 + 8) = *(__int128 *)((char *)a2 + 8);
      }
      else
      {
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        swift_retain();
      }
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      v8 = *a2;
      v9 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      v6 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for NavigationStackViewSource(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      swift_release();
      if (*(_QWORD *)(a1 + 16) != 1)
        swift_release();
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationStackViewSource(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NavigationStackViewSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for NavigationStackViewSource(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t destructiveInjectEnumTag for NavigationStackViewSource(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NavigationStackViewSource()
{
  return &type metadata for NavigationStackViewSource;
}

void NavigationStackViewSource.hash(into:)()
{
  uint64_t v0;
  _BYTE v1[32];
  void (*v2)(_OWORD *__return_ptr, uint64_t);
  uint64_t v3;
  _OWORD v4[2];
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char v9;

  outlined init with copy of NavigationStackViewSource(v0, (uint64_t)&v6);
  if (!v9)
  {
    v4[0] = v6;
    v4[1] = v7;
    v5 = v8;
    Hasher._combine(_:)(1uLL);
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v4);
    return;
  }
  if (v9 != 1)
  {
    Hasher._combine(_:)(0);
    return;
  }
  *(_OWORD *)v1 = v6;
  *(_OWORD *)&v1[16] = v7;
  Hasher._combine(_:)(2uLL);
  if (!*(_QWORD *)v1)
  {
    Hasher._combine(_:)(0);
    if (*(_QWORD *)&v1[16] == 1)
      goto LABEL_5;
LABEL_9:
    v4[0] = *(_OWORD *)&v1[8];
    Hasher._combine(_:)(1u);
    _ViewList_ID.Canonical.hash(into:)();
    goto LABEL_10;
  }
  Hasher._combine(_:)(1u);
  v2 = *(void (**)(_OWORD *__return_ptr, uint64_t))(**(_QWORD **)v1 + 96);
  v3 = swift_retain();
  v2(v4, v3);
  AnyHashable.hash(into:)();
  outlined destroy of AnyHashable((uint64_t)v4);
  swift_release();
  if (*(_QWORD *)&v1[16] != 1)
    goto LABEL_9;
LABEL_5:
  Hasher._combine(_:)(0);
LABEL_10:
  Hasher._combine(_:)(*(Swift::UInt *)&v1[24]);
  swift_release();
  outlined consume of Text.LineStyle?(*(uint64_t *)&v1[8], *(uint64_t *)&v1[16]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NavigationStackViewSource()
{
  Hasher.init(_seed:)();
  NavigationStackViewSource.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NavigationStackViewSource()
{
  Hasher.init(_seed:)();
  NavigationStackViewSource.hash(into:)();
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type NavigationStackViewSource and conformance NavigationStackViewSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationStackViewSource and conformance NavigationStackViewSource;
  if (!lazy protocol witness table cache variable for type NavigationStackViewSource and conformance NavigationStackViewSource)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackViewSource, &type metadata for NavigationStackViewSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationStackViewSource and conformance NavigationStackViewSource);
  }
  return result;
}

uint64_t specialized static NavigationStackViewSource.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int8x16_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[40];
  char v18;
  _BYTE v19[40];
  char v20;

  outlined init with copy of NavigationStackViewSource(a1, (uint64_t)v17);
  outlined init with copy of NavigationStackViewSource(a2, (uint64_t)v19);
  if (!v18)
  {
    outlined init with copy of NavigationStackViewSource((uint64_t)v17, (uint64_t)&v15);
    if (!v20)
    {
      v10 = *(_OWORD *)v19;
      v11 = *(_OWORD *)&v19[16];
      v12 = *(_QWORD *)&v19[32];
      v6 = MEMORY[0x18D75E284](&v15, &v10);
      outlined destroy of AnyHashable((uint64_t)&v10);
      outlined destroy of AnyHashable((uint64_t)&v15);
      goto LABEL_13;
    }
    outlined destroy of AnyHashable((uint64_t)&v15);
    goto LABEL_11;
  }
  if (v18 == 1)
  {
    outlined init with copy of NavigationStackViewSource((uint64_t)v17, (uint64_t)&v15);
    v3 = *((_QWORD *)&v15 + 1);
    v4 = v16;
    if (v20 == 1)
    {
      v5 = *(_QWORD *)&v19[8];
      v10 = v15;
      v11 = v16;
      v13[0] = *(_QWORD *)v19;
      v13[1] = *(_QWORD *)&v19[8];
      v9 = *(_QWORD *)&v19[16];
      v14 = *(_OWORD *)&v19[16];
      v6 = specialized static NavigationLinkSelectionIdentifier.== infix(_:_:)(&v10, v13);
      swift_release();
      outlined consume of Text.LineStyle?(v5, v9);
      swift_release();
      outlined consume of Text.LineStyle?(v3, v4);
LABEL_13:
      outlined destroy of NavigationStackViewSource((uint64_t)v17);
      return v6 & 1;
    }
    swift_release();
    outlined consume of Text.LineStyle?(v3, v4);
    goto LABEL_11;
  }
  if (v20 != 2
    || (v7 = vorrq_s8(*(int8x16_t *)&v19[8], *(int8x16_t *)&v19[24]),
        *(_QWORD *)&vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)) | *(_QWORD *)v19))
  {
LABEL_11:
    outlined destroy of (NavigationStackViewSource, NavigationStackViewSource)((uint64_t)v17);
    v6 = 0;
    return v6 & 1;
  }
  outlined destroy of NavigationStackViewSource((uint64_t)v17);
  v6 = 1;
  return v6 & 1;
}

uint64_t outlined init with copy of NavigationStackViewSource(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for NavigationStackViewSource(a2, a1);
  return a2;
}

uint64_t outlined destroy of (NavigationStackViewSource, NavigationStackViewSource)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (NavigationStackViewSource, NavigationStackViewSource)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (NavigationStackViewSource, NavigationStackViewSource)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (NavigationStackViewSource, NavigationStackViewSource))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (NavigationStackViewSource, NavigationStackViewSource));
  }
}

void static DefaultListStyle._makeView<A>(value:inputs:)()
{
  type metadata accessor for _ListValue();
}

void sub_1870F6480()
{
  uint64_t v0;

  type metadata accessor for _GraphValue();
  *(_DWORD *)(v0 - 124) = _GraphValue.value.getter();
  type metadata accessor for List();
}

uint64_t sub_1870F64D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[3];
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;

  type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier>();
  v7 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier>();
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier>();
  v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier>();
  v10 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>();
  v11 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ListStyleWriter<PlainListStyle>, (uint64_t)&type metadata for PlainListStyle, (uint64_t)&protocol witness table for PlainListStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
  type metadata accessor for ModifiedContent();
  v13 = type metadata accessor for DefaultListStyle.Body(0, v2, v1, v12);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultListStyle.Body<A>, v13);
  _GraphValue.init<A>(_:)();
  v26[2] = v20;
  v27 = v19;
  v28 = v18;
  v29 = v4;
  v30 = v5;
  v31 = v17;
  v32 = v16;
  v33 = v3;
  v34 = v21;
  v26[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for List<A, B>, a1);
  v26[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier>);
  v14 = MEMORY[0x1E0CE2E70];
  v25[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v26);
  v25[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier>);
  v24[0] = MEMORY[0x18D75FFDC](v14, v8, v25);
  v24[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier>);
  v23[0] = MEMORY[0x18D75FFDC](v14, v9, v24);
  v23[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier>);
  v22[0] = MEMORY[0x18D75FFDC](v14, v10, v23);
  v22[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>);
  MEMORY[0x18D75FFDC](v14, v11, v22);
  return static ModifiedContent<>._makeView(view:inputs:)();
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, MEMORY[0x1E0CE5968], MEMORY[0x1E0CE5958], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ListStyleWriter<MultimodalListStyle>, (uint64_t)&type metadata for MultimodalListStyle, (uint64_t)&protocol witness table for MultimodalListStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<ClarityUIInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ListStyleWriter<InlineListStyle>, (uint64_t)&type metadata for InlineListStyle, (uint64_t)&protocol witness table for InlineListStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarStyleContext>);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ListStyleWriter<SidebarListStyle>, (uint64_t)&type metadata for SidebarListStyle, (uint64_t)&protocol witness table for SidebarListStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<ContentListStyleContext>);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ListStyleWriter<InsetListStyle>, (uint64_t)&type metadata for InsetListStyle, (uint64_t)&protocol witness table for InsetListStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ContentListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<ContentListStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ListStyleWriter<InsetGroupedListStyle>, (uint64_t)&type metadata for InsetGroupedListStyle, (uint64_t)&protocol witness table for InsetGroupedListStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for DefaultListStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DefaultListStyle.Body);
}

uint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    v5[0] = &protocol witness table for ListStyleWriter<A>;
    v5[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v4, v5);
    atomic_store(result, a1);
  }
  return result;
}

void static DefaultListStyle._makeViewList<A>(value:inputs:)()
{
  type metadata accessor for _ListValue();
}

void sub_1870F6C48()
{
  uint64_t v0;

  type metadata accessor for _GraphValue();
  *(_DWORD *)(v0 - 108) = _GraphValue.value.getter();
  type metadata accessor for List();
}

uint64_t sub_1870F6C88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[3];
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char v36;

  type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier>();
  v6 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier>();
  v7 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier>();
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier>();
  v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>();
  v10 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ListStyleWriter<PlainListStyle>, (uint64_t)&type metadata for PlainListStyle, (uint64_t)&protocol witness table for PlainListStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
  type metadata accessor for ModifiedContent();
  v12 = type metadata accessor for DefaultListStyle.Body(0, v2, v1, v11);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultListStyle.Body<A>, v12);
  _GraphValue.init<A>(_:)();
  v27[2] = v17;
  v28 = v16;
  v29 = v15;
  v30 = v3;
  v31 = v4;
  v32 = v22;
  v33 = v21;
  v34 = v20;
  v35 = v19;
  v36 = v18;
  v27[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for List<A, B>, a1);
  v27[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier>);
  v13 = MEMORY[0x1E0CE2E70];
  v26[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v27);
  v26[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier>);
  v25[0] = MEMORY[0x18D75FFDC](v13, v7, v26);
  v25[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier>);
  v24[0] = MEMORY[0x18D75FFDC](v13, v8, v25);
  v24[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier>);
  v23[0] = MEMORY[0x18D75FFDC](v13, v9, v24);
  v23[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>);
  MEMORY[0x18D75FFDC](v13, v10, v23);
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

void DefaultListStyle.Body.base.getter()
{
  type metadata accessor for _ListValue();
}

uint64_t sub_1870F6F54(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void DefaultListStyle.Body.value.getter(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[7];
  uint64_t v13;
  int v14;
  uint64_t v15;
  ValueMetadata *v16;
  uint64_t v17;
  _UNKNOWN **v18;
  uint64_t v19;

  v14 = a1;
  v15 = a5;
  v7 = type metadata accessor for SelectionManagerBox(255, a2, a3, a4);
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v7);
  v13 = type metadata accessor for _ListStyleConfiguration(0, v7, v8, v9);
  v12[1] = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v10);
  v12[5] = (char *)v12 - v11;
  v16 = &type metadata for DefaultListStyle;
  v17 = a2;
  v18 = &protocol witness table for DefaultListStyle;
  v19 = a3;
  type metadata accessor for _ListValue();
}

void sub_1870F7054(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v4 - 120) = v2;
  *(_QWORD *)(v4 - 112) = &type metadata for ListStyleContent;
  *(_QWORD *)(v4 - 104) = v3;
  *(_QWORD *)(v4 - 96) = &protocol witness table for ListStyleContent;
  type metadata accessor for List();
}

void sub_1870F70A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v9 - 304) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier>();
  v10 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v9 - 272) = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier>();
  v12 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v9 - 248) = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  *(_QWORD *)(v9 - 336) = (char *)&a9 - v14;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier>();
  v15 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v9 - 240) = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  *(_QWORD *)(v9 - 312) = (char *)&a9 - v17;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier>();
  v18 = type metadata accessor for ModifiedContent();
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v9 - 320) = v18;
  *(_QWORD *)(v9 - 224) = v19;
  MEMORY[0x1E0C80A78](v18, v20);
  *(_QWORD *)(v9 - 288) = (char *)&a9 - v21;
  type metadata accessor for StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>();
  v22 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v9 - 232) = v22;
  *(_QWORD *)(v9 - 216) = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  *(_QWORD *)(v9 - 264) = (char *)&a9 - v24;
  DefaultListStyle.Body.base.getter();
}

void sub_1870F7280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v4 - 328) + 32))(*(_QWORD *)(v4 - 296), v1, *(_QWORD *)(v4 - 280));
  List<>.init(_:)(v2, v3, v5, v0);
}

void sub_1870F72BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 - 120) = 2;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for List<A, B>, v0);
  View.listStyle<A, B>(_:idiom:)(v1 - 120, v2);
}

void sub_1870F730C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 304) + 8))(v1, v3);
  v5 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier>);
  *(_QWORD *)(v4 - 136) = v0;
  *(_QWORD *)(v4 - 128) = v5;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4 - 136);
  v6 = lazy protocol witness table accessor for type GroupedFormStyleContext and conformance GroupedFormStyleContext();
  View.listStyle<A, B>(_:in:)(v6, v7);
}

void sub_1870F7394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 272) + 8))(v2, v1);
  v6 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier>);
  *(_QWORD *)(v5 - 152) = v0;
  *(_QWORD *)(v5 - 144) = v6;
  v7 = MEMORY[0x18D75FFDC](v3, v4, v5 - 152);
  View.listStyle<A, B>(_:in:)(v7, v8);
}

void sub_1870F7414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 248) + 8))(v4, v2);
  *(_QWORD *)(v5 - 120) = 3;
  v6 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier>);
  *(_QWORD *)(v5 - 168) = v0;
  *(_QWORD *)(v5 - 160) = v6;
  MEMORY[0x18D75FFDC](v1, v3, v5 - 168);
  View.listStyle<A, B>(_:in:)(v5 - 120, v7);
}

void sub_1870F749C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 240) + 8))(v1, v3);
  v5 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier>);
  *(_QWORD *)(v4 - 184) = v0;
  *(_QWORD *)(v4 - 176) = v5;
  v6 = MEMORY[0x18D75FFDC](v2, *(_QWORD *)(v4 - 320), v4 - 184);
  View.listStyle<A, B>(_:if:)(v6, MEMORY[0x1E0CE4C18]);
}

uint64_t sub_1870F7524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 224) + 8))(v2, v3);
  *(_BYTE *)(v6 - 120) = v5;
  v7 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>);
  *(_QWORD *)(v6 - 200) = v0;
  *(_QWORD *)(v6 - 192) = v7;
  v8 = *(_QWORD *)(v6 - 232);
  v9 = MEMORY[0x18D75FFDC](v4, v8, v6 - 200);
  View.listStyle<A>(_:)(v6 - 120, v8, (uint64_t)&type metadata for PlainListStyle, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 216) + 8))(v1, v8);
}

void protocol witness for static Rule.initialValue.getter in conformance DefaultListStyle.Body<A>()
{
  type metadata accessor for List();
}

uint64_t sub_1870F7600()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ListStyleWriter<PlainListStyle>, (uint64_t)&type metadata for PlainListStyle, (uint64_t)&protocol witness table for PlainListStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
  v1 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 1, 1, v1);
}

void protocol witness for Rule.value.getter in conformance DefaultListStyle.Body<A>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  int *v3;

  DefaultListStyle.Body.value.getter(*v3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

ValueMetadata *type metadata accessor for DefaultListStyle()
{
  return &type metadata for DefaultListStyle;
}

void base witness table accessor for _AttributeBody in DefaultListStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

unint64_t lazy protocol witness table accessor for type GroupedFormStyleContext and conformance GroupedFormStyleContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupedFormStyleContext and conformance GroupedFormStyleContext;
  if (!lazy protocol witness table cache variable for type GroupedFormStyleContext and conformance GroupedFormStyleContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupedFormStyleContext, &type metadata for GroupedFormStyleContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupedFormStyleContext and conformance GroupedFormStyleContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupedFormStyleContext and conformance GroupedFormStyleContext;
  if (!lazy protocol witness table cache variable for type GroupedFormStyleContext and conformance GroupedFormStyleContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupedFormStyleContext, &type metadata for GroupedFormStyleContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupedFormStyleContext and conformance GroupedFormStyleContext);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for UpdateCollectionViewListCoordinator(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  _QWORD *v32;
  _QWORD *v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, _QWORD, uint64_t, int *);
  uint64_t v44;
  void *v45;
  id v46;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    v8 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v8;
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    v9 = a2[10];
    *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
    *(_QWORD *)(a1 + 80) = v9;
    swift_unknownObjectWeakCopyInit();
    v10 = *(int *)(a3 + 100);
    v11 = (char *)v4 + v10;
    v12 = (uint64_t)a2 + v10;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v16 = (int *)type metadata accessor for CollectionViewListDataSource(0, AssociatedTypeWitness, AssociatedConformanceWitness, v15);
    v17 = *((_QWORD *)v16 - 1);
    if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v17 + 48))(v12, 1, v16))
    {
      v18 = type metadata accessor for Optional();
      memcpy(v11, (const void *)v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
LABEL_15:
      v44 = *(int *)(a3 + 104);
      v45 = *(void **)((char *)a2 + v44);
      *(_QWORD *)((char *)v4 + v44) = v45;
      v46 = v45;
      return v4;
    }
    v51 = v17;
    v20 = *(_OWORD *)(v12 + 24);
    *(_OWORD *)(v11 + 24) = v20;
    (**(void (***)(char *, uint64_t))(v20 - 8))(v11, v12);
    v21 = *(void **)(v12 + 48);
    *((_QWORD *)v11 + 5) = *(_QWORD *)(v12 + 40);
    *((_QWORD *)v11 + 6) = v21;
    v22 = *(_QWORD *)(v12 + 64);
    *((_QWORD *)v11 + 7) = *(_QWORD *)(v12 + 56);
    *((_QWORD *)v11 + 8) = v22;
    v11[72] = *(_BYTE *)(v12 + 72);
    v23 = v16[9];
    v49 = v12 + v23;
    v50 = &v11[v23];
    v24 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    v48 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    v25 = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48(v50, v49, v24);
    v26 = v16[10];
    v27 = &v11[v26];
    v28 = v12 + v26;
    v29 = *(_QWORD *)(v12 + v26 + 8);
    if (v29)
    {
      if (v29 == 1)
      {
        v30 = *(_OWORD *)(v28 + 48);
        *((_OWORD *)v27 + 2) = *(_OWORD *)(v28 + 32);
        *((_OWORD *)v27 + 3) = v30;
        *(_DWORD *)(v27 + 63) = *(_DWORD *)(v28 + 63);
        v31 = *(_OWORD *)(v28 + 16);
        *(_OWORD *)v27 = *(_OWORD *)v28;
        *((_OWORD *)v27 + 1) = v31;
LABEL_14:
        v36 = v16[11];
        v37 = &v11[v36];
        v38 = (_QWORD *)(v12 + v36);
        v39 = v38[1];
        *(_QWORD *)v37 = *v38;
        *((_QWORD *)v37 + 1) = v39;
        v11[v16[12]] = *(_BYTE *)(v12 + v16[12]);
        v40 = v16[13];
        v41 = &v11[v40];
        v42 = v12 + v40;
        *(_QWORD *)v41 = *(_QWORD *)v42;
        v41[8] = *(_BYTE *)(v42 + 8);
        *(_QWORD *)&v11[v16[14]] = *(_QWORD *)(v12 + v16[14]);
        v43 = *(void (**)(char *, _QWORD, uint64_t, int *))(v51 + 56);
        swift_retain();
        swift_retain();
        v43(v11, 0, 1, v16);
        goto LABEL_15;
      }
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *((_QWORD *)v27 + 1) = v29;
      *((_QWORD *)v27 + 2) = *(_QWORD *)(v28 + 16);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)v27 = *(_OWORD *)v28;
      *((_QWORD *)v27 + 2) = *(_QWORD *)(v28 + 16);
    }
    v32 = v27 + 24;
    v33 = (_QWORD *)(v28 + 24);
    v34 = *(_BYTE *)(v28 + 64);
    if ((v34 & 1) != 0)
    {
      *v32 = *v33;
      swift_bridgeObjectRetain();
    }
    else
    {
      v35 = *(_OWORD *)(v28 + 48);
      *((_OWORD *)v27 + 3) = v35;
      (**(void (***)(_QWORD *, _QWORD *))(v35 - 8))(v32, v33);
    }
    v27[64] = v34;
    *(_WORD *)(v27 + 65) = *(_WORD *)(v28 + 65);
    goto LABEL_14;
  }
  v19 = *a2;
  *v4 = *a2;
  v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

_DWORD *assignWithCopy for UpdateCollectionViewListCoordinator(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD *v46;
  _QWORD *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(uint64_t *, _QWORD, uint64_t, int *);
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _QWORD *v62;
  _QWORD *v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char v75;
  uint64_t v76;
  void *v77;
  void *v78;
  id v79;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  char *v83;
  char *v84;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  a1[16] = a2[16];
  a1[17] = a2[17];
  a1[18] = a2[18];
  a1[19] = a2[19];
  a1[20] = a2[20];
  a1[21] = a2[21];
  a1[22] = a2[22];
  swift_unknownObjectWeakCopyAssign();
  v6 = *(int *)(a3 + 100);
  v7 = (uint64_t *)((char *)a1 + v6);
  v8 = (uint64_t *)((char *)a2 + v6);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v12 = (int *)type metadata accessor for CollectionViewListDataSource(0, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(uint64_t *, uint64_t, int *))(v13 + 48);
  v15 = v14(v7, 1, v12);
  v16 = v14(v8, 1, v12);
  if (!v15)
  {
    if (v16)
    {
      (*(void (**)(uint64_t *, int *))(v13 + 8))(v7, v12);
      goto LABEL_8;
    }
    __swift_assign_boxed_opaque_existential_1(v7, v8);
    *((_DWORD *)v7 + 10) = *((_DWORD *)v8 + 10);
    *((_DWORD *)v7 + 11) = *((_DWORD *)v8 + 11);
    v30 = (void *)v8[6];
    v31 = (void *)v7[6];
    v7[6] = (uint64_t)v30;
    v32 = v30;

    v7[7] = v8[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v7[8] = v8[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_BYTE *)v7 + 72) = *((_BYTE *)v8 + 72);
    v33 = v12[9];
    v34 = (char *)v7 + v33;
    v35 = (char *)v8 + v33;
    v36 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 24))(v34, v35, v36);
    v37 = v12[10];
    v38 = (uint64_t)v7 + v37;
    v39 = (char *)v8 + v37;
    v40 = *(uint64_t *)((char *)v7 + v37 + 8);
    v41 = *(uint64_t *)((char *)v8 + v37 + 8);
    if (v40 == 1)
    {
      if (v41 == 1)
      {
        *(_OWORD *)v38 = *(_OWORD *)v39;
        v42 = *((_OWORD *)v39 + 1);
        v43 = *((_OWORD *)v39 + 2);
        v44 = *((_OWORD *)v39 + 3);
        *(_DWORD *)(v38 + 63) = *(_DWORD *)(v39 + 63);
        *(_OWORD *)(v38 + 32) = v43;
        *(_OWORD *)(v38 + 48) = v44;
        *(_OWORD *)(v38 + 16) = v42;
LABEL_40:
        v69 = v12[11];
        v70 = (char *)v7 + v69;
        v71 = (char *)v8 + v69;
        *(uint64_t *)((char *)v7 + v69) = *(uint64_t *)((char *)v8 + v69);
        swift_retain();
        swift_release();
        *((_QWORD *)v70 + 1) = *((_QWORD *)v71 + 1);
        swift_retain();
        swift_release();
        *((_BYTE *)v7 + v12[12]) = *((_BYTE *)v8 + v12[12]);
        v72 = v12[13];
        v73 = (char *)v7 + v72;
        v74 = (char *)v8 + v72;
        v75 = v74[8];
        *(_QWORD *)v73 = *(_QWORD *)v74;
        v73[8] = v75;
        *(uint64_t *)((char *)v7 + v12[14]) = *(uint64_t *)((char *)v8 + v12[14]);
        goto LABEL_41;
      }
      if (v41)
      {
        *(_QWORD *)v38 = *(_QWORD *)v39;
        *(_QWORD *)(v38 + 8) = *((_QWORD *)v39 + 1);
        *(_QWORD *)(v38 + 16) = *((_QWORD *)v39 + 2);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v61 = *(_OWORD *)v39;
        *(_QWORD *)(v38 + 16) = *((_QWORD *)v39 + 2);
        *(_OWORD *)v38 = v61;
      }
      v62 = (_QWORD *)(v38 + 24);
      v63 = v39 + 24;
      v64 = v39[64];
      if ((v64 & 1) != 0)
      {
        *v62 = *v63;
        swift_bridgeObjectRetain();
      }
      else
      {
        v65 = *((_QWORD *)v39 + 6);
        *(_QWORD *)(v38 + 48) = v65;
        *(_QWORD *)(v38 + 56) = *((_QWORD *)v39 + 7);
        (**(void (***)(_QWORD *, _QWORD *))(v65 - 8))(v62, v63);
      }
      *(_BYTE *)(v38 + 64) = v64;
    }
    else
    {
      if (v41 == 1)
      {
        outlined destroy of TableHeaderView(v38);
        *(_OWORD *)v38 = *(_OWORD *)v39;
        v59 = *((_OWORD *)v39 + 2);
        v58 = *((_OWORD *)v39 + 3);
        v60 = *((_OWORD *)v39 + 1);
        *(_DWORD *)(v38 + 63) = *(_DWORD *)(v39 + 63);
        *(_OWORD *)(v38 + 32) = v59;
        *(_OWORD *)(v38 + 48) = v58;
        *(_OWORD *)(v38 + 16) = v60;
        goto LABEL_40;
      }
      if (v40)
      {
        if (v41)
        {
          *(_QWORD *)v38 = *(_QWORD *)v39;
          swift_retain();
          swift_release();
          *(_QWORD *)(v38 + 8) = *((_QWORD *)v39 + 1);
          swift_retain();
          swift_release();
          *(_QWORD *)(v38 + 16) = *((_QWORD *)v39 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined destroy of Binding<[SwiftUIAnySortComparator]>(v38);
          v66 = *((_QWORD *)v39 + 2);
          *(_OWORD *)v38 = *(_OWORD *)v39;
          *(_QWORD *)(v38 + 16) = v66;
        }
      }
      else if (v41)
      {
        *(_QWORD *)v38 = *(_QWORD *)v39;
        *(_QWORD *)(v38 + 8) = *((_QWORD *)v39 + 1);
        *(_QWORD *)(v38 + 16) = *((_QWORD *)v39 + 2);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v67 = *(_OWORD *)v39;
        *(_QWORD *)(v38 + 16) = *((_QWORD *)v39 + 2);
        *(_OWORD *)v38 = v67;
      }
      if (a1 != a2)
      {
        outlined destroy of TableColumnCollection.Backing(v38 + 24);
        if ((v39[64] & 1) != 0)
        {
          *(_QWORD *)(v38 + 24) = *((_QWORD *)v39 + 3);
          *(_BYTE *)(v38 + 64) = 1;
          swift_bridgeObjectRetain();
        }
        else
        {
          v68 = *((_QWORD *)v39 + 6);
          *(_QWORD *)(v38 + 48) = v68;
          *(_QWORD *)(v38 + 56) = *((_QWORD *)v39 + 7);
          (**(void (***)(uint64_t, uint64_t))(v68 - 8))(v38 + 24, (uint64_t)(v39 + 24));
          *(_BYTE *)(v38 + 64) = 0;
        }
      }
    }
    *(_BYTE *)(v38 + 65) = v39[65];
    *(_BYTE *)(v38 + 66) = v39[66];
    goto LABEL_40;
  }
  if (!v16)
  {
    v81 = a3;
    v17 = v8[3];
    v7[3] = v17;
    v7[4] = v8[4];
    (**(void (***)(char *, char *))(v17 - 8))((char *)v7, (char *)v8);
    v7[5] = v8[5];
    v18 = (void *)v8[6];
    v7[6] = (uint64_t)v18;
    v7[7] = v8[7];
    v7[8] = v8[8];
    *((_BYTE *)v7 + 72) = *((_BYTE *)v8 + 72);
    v19 = v12[9];
    v83 = (char *)v8 + v19;
    v84 = (char *)v7 + v19;
    v20 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    v82 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    v21 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v82(v84, v83, v20);
    v22 = v12[10];
    v23 = (char *)v7 + v22;
    v24 = (char *)v8 + v22;
    v25 = *(uint64_t *)((char *)v8 + v22 + 8);
    if (v25)
    {
      if (v25 == 1)
      {
        *(_OWORD *)v23 = *(_OWORD *)v24;
        v26 = *((_OWORD *)v24 + 1);
        v27 = *((_OWORD *)v24 + 2);
        v28 = *((_OWORD *)v24 + 3);
        *(_DWORD *)(v23 + 63) = *(_DWORD *)(v24 + 63);
        *((_OWORD *)v23 + 2) = v27;
        *((_OWORD *)v23 + 3) = v28;
        *((_OWORD *)v23 + 1) = v26;
LABEL_18:
        a3 = v81;
        v50 = v12[11];
        v51 = (char *)v7 + v50;
        v52 = (char *)v8 + v50;
        *(_QWORD *)v51 = *(_QWORD *)v52;
        *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
        *((_BYTE *)v7 + v12[12]) = *((_BYTE *)v8 + v12[12]);
        v53 = v12[13];
        v54 = (char *)v7 + v53;
        v55 = (char *)v8 + v53;
        v56 = *(_QWORD *)v55;
        v54[8] = v55[8];
        *(_QWORD *)v54 = v56;
        *(uint64_t *)((char *)v7 + v12[14]) = *(uint64_t *)((char *)v8 + v12[14]);
        v57 = *(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v13 + 56);
        swift_retain();
        swift_retain();
        v57(v7, 0, 1, v12);
        goto LABEL_41;
      }
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *((_QWORD *)v23 + 1) = *((_QWORD *)v24 + 1);
      *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v45 = *(_OWORD *)v24;
      *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
      *(_OWORD *)v23 = v45;
    }
    v46 = v23 + 24;
    v47 = v24 + 24;
    v48 = v24[64];
    if ((v48 & 1) != 0)
    {
      *v46 = *v47;
      swift_bridgeObjectRetain();
    }
    else
    {
      v49 = *((_QWORD *)v24 + 6);
      *((_QWORD *)v23 + 6) = v49;
      *((_QWORD *)v23 + 7) = *((_QWORD *)v24 + 7);
      (**(void (***)(_QWORD *, _QWORD *))(v49 - 8))(v46, v47);
    }
    v23[64] = v48;
    v23[65] = v24[65];
    v23[66] = v24[66];
    goto LABEL_18;
  }
LABEL_8:
  v29 = type metadata accessor for Optional();
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
LABEL_41:
  v76 = *(int *)(a3 + 104);
  v77 = *(void **)((char *)a2 + v76);
  v78 = *(void **)((char *)a1 + v76);
  *(_QWORD *)((char *)a1 + v76) = v77;
  v79 = v77;

  return a1;
}

uint64_t outlined destroy of Binding<[SwiftUIAnySortComparator]>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for Binding<[SwiftUIAnySortComparator]>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for UpdateCollectionViewListCoordinator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v8;
  swift_unknownObjectWeakTakeInit();
  v9 = *(int *)(a3 + 100);
  v10 = (_OWORD *)(a1 + v9);
  v11 = (_OWORD *)(a2 + v9);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = (int *)type metadata accessor for CollectionViewListDataSource(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v16 + 48))(v11, 1, v15))
  {
    v17 = type metadata accessor for Optional();
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = v11[3];
    v10[2] = v11[2];
    v10[3] = v18;
    *(_OWORD *)((char *)v10 + 57) = *(_OWORD *)((char *)v11 + 57);
    v19 = v11[1];
    *v10 = *v11;
    v10[1] = v19;
    v20 = v15[9];
    v21 = (char *)v10 + v20;
    v22 = (char *)v11 + v20;
    v23 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
    v24 = v15[10];
    v25 = (char *)v10 + v24;
    v26 = (char *)v11 + v24;
    v27 = *((_OWORD *)v26 + 3);
    *((_OWORD *)v25 + 2) = *((_OWORD *)v26 + 2);
    *((_OWORD *)v25 + 3) = v27;
    *(_DWORD *)(v25 + 63) = *(_DWORD *)(v26 + 63);
    v28 = *((_OWORD *)v26 + 1);
    *(_OWORD *)v25 = *(_OWORD *)v26;
    *((_OWORD *)v25 + 1) = v28;
    *(_OWORD *)((char *)v10 + v15[11]) = *(_OWORD *)((char *)v11 + v15[11]);
    *((_BYTE *)v10 + v15[12]) = *((_BYTE *)v11 + v15[12]);
    v29 = v15[13];
    v30 = (char *)v10 + v29;
    v31 = (char *)v11 + v29;
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    *(_QWORD *)((char *)v10 + v15[14]) = *(_QWORD *)((char *)v11 + v15[14]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v16 + 56))(v10, 0, 1, v15);
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 104)) = *(_QWORD *)(a2 + *(int *)(a3 + 104));
  return a1;
}

uint64_t assignWithTake for UpdateCollectionViewListCoordinator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(_OWORD *, uint64_t, int *);
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __int128 v38;
  void *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v8;
  swift_unknownObjectWeakTakeAssign();
  v9 = *(int *)(a3 + 100);
  v10 = (_OWORD *)(a1 + v9);
  v11 = (_OWORD *)(a2 + v9);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = (int *)type metadata accessor for CollectionViewListDataSource(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(_OWORD *, uint64_t, int *))(v16 + 48);
  v18 = v17(v10, 1, v15);
  v19 = v17(v11, 1, v15);
  if (!v18)
  {
    if (v19)
    {
      (*(void (**)(_OWORD *, int *))(v16 + 8))(v10, v15);
      goto LABEL_6;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    v38 = v11[1];
    *v10 = *v11;
    v10[1] = v38;
    *((_QWORD *)v10 + 4) = *((_QWORD *)v11 + 4);
    *((_QWORD *)v10 + 5) = *((_QWORD *)v11 + 5);
    v39 = (void *)*((_QWORD *)v10 + 6);
    *((_QWORD *)v10 + 6) = *((_QWORD *)v11 + 6);

    *((_QWORD *)v10 + 7) = *((_QWORD *)v11 + 7);
    swift_bridgeObjectRelease();
    *((_QWORD *)v10 + 8) = *((_QWORD *)v11 + 8);
    swift_bridgeObjectRelease();
    *((_BYTE *)v10 + 72) = *((_BYTE *)v11 + 72);
    v40 = v15[9];
    v41 = (char *)v10 + v40;
    v42 = (char *)v11 + v40;
    v43 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 40))(v41, v42, v43);
    v44 = v15[10];
    v45 = (uint64_t)v10 + v44;
    v46 = (char *)v11 + v44;
    v47 = *(_QWORD *)((char *)v10 + v44 + 8);
    if (v47 == 1)
      goto LABEL_11;
    v48 = *((_QWORD *)v46 + 1);
    if (v48 == 1)
    {
      outlined destroy of TableHeaderView(v45);
LABEL_11:
      v49 = *((_OWORD *)v46 + 3);
      *(_OWORD *)(v45 + 32) = *((_OWORD *)v46 + 2);
      *(_OWORD *)(v45 + 48) = v49;
      *(_DWORD *)(v45 + 63) = *(_DWORD *)(v46 + 63);
      v50 = *((_OWORD *)v46 + 1);
      *(_OWORD *)v45 = *(_OWORD *)v46;
      *(_OWORD *)(v45 + 16) = v50;
LABEL_20:
      v51 = v15[11];
      v52 = (char *)v10 + v51;
      v53 = (char *)v11 + v51;
      *(_QWORD *)((char *)v10 + v51) = *(_QWORD *)((char *)v11 + v51);
      swift_release();
      *((_QWORD *)v52 + 1) = *((_QWORD *)v53 + 1);
      swift_release();
      *((_BYTE *)v10 + v15[12]) = *((_BYTE *)v11 + v15[12]);
      v54 = v15[13];
      v55 = (char *)v10 + v54;
      v56 = (char *)v11 + v54;
      *(_QWORD *)v55 = *(_QWORD *)v56;
      v55[8] = v56[8];
      *(_QWORD *)((char *)v10 + v15[14]) = *(_QWORD *)((char *)v11 + v15[14]);
      goto LABEL_7;
    }
    if (v47)
    {
      if (v48)
      {
        *(_QWORD *)v45 = *(_QWORD *)v46;
        swift_release();
        *(_QWORD *)(v45 + 8) = *((_QWORD *)v46 + 1);
        swift_release();
        *(_QWORD *)(v45 + 16) = *((_QWORD *)v46 + 2);
        swift_bridgeObjectRelease();
LABEL_17:
        if (a1 != a2)
        {
          outlined destroy of TableColumnCollection.Backing(v45 + 24);
          *(_OWORD *)(v45 + 24) = *(_OWORD *)(v46 + 24);
          *(_OWORD *)(v45 + 40) = *(_OWORD *)(v46 + 40);
          *(_OWORD *)(v45 + 49) = *(_OWORD *)(v46 + 49);
        }
        *(_BYTE *)(v45 + 65) = v46[65];
        *(_BYTE *)(v45 + 66) = v46[66];
        goto LABEL_20;
      }
      outlined destroy of Binding<[SwiftUIAnySortComparator]>(v45);
    }
    *(_OWORD *)v45 = *(_OWORD *)v46;
    *(_QWORD *)(v45 + 16) = *((_QWORD *)v46 + 2);
    goto LABEL_17;
  }
  if (v19)
  {
LABEL_6:
    v34 = type metadata accessor for Optional();
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_7;
  }
  v20 = v11[3];
  v10[2] = v11[2];
  v10[3] = v20;
  *(_OWORD *)((char *)v10 + 57) = *(_OWORD *)((char *)v11 + 57);
  v21 = v11[1];
  *v10 = *v11;
  v10[1] = v21;
  v22 = v15[9];
  v23 = (char *)v10 + v22;
  v24 = (char *)v11 + v22;
  v25 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
  v26 = v15[10];
  v27 = (char *)v10 + v26;
  v28 = (char *)v11 + v26;
  v29 = *((_OWORD *)v28 + 3);
  *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
  *((_OWORD *)v27 + 3) = v29;
  *(_DWORD *)(v27 + 63) = *(_DWORD *)(v28 + 63);
  v30 = *((_OWORD *)v28 + 1);
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *((_OWORD *)v27 + 1) = v30;
  *(_OWORD *)((char *)v10 + v15[11]) = *(_OWORD *)((char *)v11 + v15[11]);
  *((_BYTE *)v10 + v15[12]) = *((_BYTE *)v11 + v15[12]);
  v31 = v15[13];
  v32 = (char *)v10 + v31;
  v33 = (char *)v11 + v31;
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  *(_QWORD *)((char *)v10 + v15[14]) = *(_QWORD *)((char *)v11 + v15[14]);
  (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v16 + 56))(v10, 0, 1, v15);
LABEL_7:
  v35 = *(int *)(a3 + 104);
  v36 = *(void **)(a1 + v35);
  *(_QWORD *)(a1 + v35) = *(_QWORD *)(a2 + v35);

  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateCollectionViewListCoordinator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870F87C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for CollectionViewListDataSource(255, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + *(int *)(a3 + 100), a2, v9);
  v12 = *(_QWORD *)(a1 + *(int *)(a3 + 104));
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateCollectionViewListCoordinator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870F88C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for CollectionViewListDataSource(255, AssociatedTypeWitness, AssociatedConformanceWitness, v10);
  result = type metadata accessor for Optional();
  v12 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v12 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a1 + *(int *)(a4 + 100), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 104)) = (a2 - 1);
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CollectionViewListRoot(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  void (*v43)(unint64_t, unint64_t, uint64_t);
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t __n;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  v13 = *(_QWORD *)(a3 + 24);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = v15 | 7;
  v17 = ((v15 + 16) & ~v15) + *(_QWORD *)(v14 + 64);
  v18 = v8 + v11;
  v19 = v15 | *(_DWORD *)(v7 + 80) & 0xF8 | v11;
  if (v19 <= 7
    && ((*(_DWORD *)(v14 + 80) | *(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) == 0
    && ((v17 + 7 + ((v15 + 8 + ((v12 + (v18 & ~v11) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~(v15 | 7))) & 0xFFFFFFFFFFFFFFF8)
     + 65 <= 0x18)
  {
    __n = ((v15 + 16) & ~v15) + *(_QWORD *)(v14 + 64);
    v51 = v15 + 8;
    v56 = v17 + 7;
    v57 = v13;
    v24 = ~v11;
    v53 = ~v16;
    v54 = *(_QWORD *)(v13 - 8);
    v52 = *(_DWORD *)(v14 + 84);
    v55 = ~v15;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    v25 = ((unint64_t)a1 + v18) & v24;
    v26 = ((unint64_t)a2 + v18) & v24;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(v25, v26, v9);
    v27 = (v25 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    v28 = (v26 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    v29 = *(_QWORD *)v28;
    *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
    *(_QWORD *)v27 = v29;
    v30 = (_QWORD *)((v25 + v12 + 23) & 0xFFFFFFFFFFFFFFF8);
    v31 = (_QWORD *)((v26 + v12 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v30 = *v31;
    v32 = (_QWORD *)(((unint64_t)v30 + v16 + 8) & v53);
    v33 = (_QWORD *)(((unint64_t)v31 + v16 + 8) & v53);
    v34 = (uint64_t *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v52 < 0)
    {
      v36 = v54;
      v38 = v57;
      v39 = (*(uint64_t (**)(unint64_t))(v54 + 48))(((unint64_t)v34 + v51) & v55);
      v35 = v55;
      v23 = a1;
      if (v39)
      {
LABEL_14:
        memcpy(v32, v33, __n);
LABEL_17:
        v44 = ((unint64_t)v32 + v56) & 0xFFFFFFFFFFFFFFF8;
        v45 = ((unint64_t)v33 + v56) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)v44 = *(_OWORD *)v45;
        v46 = *(_OWORD *)(v45 + 16);
        v47 = *(_OWORD *)(v45 + 32);
        v48 = *(_OWORD *)(v45 + 48);
        *(_BYTE *)(v44 + 64) = *(_BYTE *)(v45 + 64);
        *(_OWORD *)(v44 + 32) = v47;
        *(_OWORD *)(v44 + 48) = v48;
        *(_OWORD *)(v44 + 16) = v46;
        return v23;
      }
    }
    else
    {
      v36 = v54;
      v35 = v55;
      v37 = *v34;
      if ((unint64_t)*v34 >= 0xFFFFFFFF)
        LODWORD(v37) = -1;
      v38 = v57;
      v23 = a1;
      if ((_DWORD)v37 != -1)
        goto LABEL_14;
    }
    *v32 = *v33;
    v40 = (_QWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v40 = *v34;
    v41 = ((unint64_t)v40 + v51) & v35;
    v42 = ((unint64_t)v34 + v51) & v35;
    v43 = *(void (**)(unint64_t, unint64_t, uint64_t))(v36 + 16);
    swift_retain();
    swift_retain();
    v43(v41, v42, v38);
    goto LABEL_17;
  }
  v22 = *a2;
  *a1 = *a2;
  v23 = (uint64_t *)(v22 + (((v19 | 7) + 16) & ~(unint64_t)(v19 | 7)));
  swift_retain();
  return v23;
}

uint64_t assignWithCopy for CollectionViewListRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t (*v34)(unint64_t, uint64_t, uint64_t);
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void (*v40)(unint64_t, unint64_t, uint64_t);
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v49;
  uint64_t v50;
  uint64_t __n;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v7 + v10 + a1) & ~v10;
  v12 = (v7 + v10 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v11, v12, v8);
  v13 = *(_QWORD *)(v9 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  v19 = (_QWORD *)((v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_QWORD *)((v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v20;
  v21 = *(_QWORD *)(a3 + 24);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned int *)(v22 + 84);
  v24 = *(_DWORD *)(v22 + 80);
  v25 = v24 + 8;
  v26 = *(_DWORD *)(v22 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v27 = (_QWORD *)(((unint64_t)v19 + v24 + 8) & v26);
  v28 = (_QWORD *)(((unint64_t)v20 + v24 + 8) & v26);
  v29 = ~v24;
  v30 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  __n = ((v24 + 16) & ~v24) + *(_QWORD *)(v22 + 64);
  if ((v23 & 0x80000000) != 0)
  {
    v50 = a1;
    v34 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 48);
    v49 = v34(((unint64_t)v30 + v25) & v29, v23, v21);
    v31 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    v33 = v34(((unint64_t)v31 + v25) & v29, v23, v21);
    a1 = v50;
    if (!v49)
      goto LABEL_5;
LABEL_8:
    if (v33)
      goto LABEL_9;
    *v27 = *v28;
    *v30 = *v31;
    v36 = (unint64_t)v30 + v25;
    v37 = a1;
    v38 = v36 & v29;
    v39 = ((unint64_t)v31 + v25) & v29;
    v40 = *(void (**)(unint64_t, unint64_t, uint64_t))(v22 + 16);
    swift_retain();
    swift_retain();
    v41 = v38;
    a1 = v37;
    v40(v41, v39, v21);
LABEL_12:
    v35 = __n;
    goto LABEL_13;
  }
  v31 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  v32 = *v31;
  if (*v31 >= 0xFFFFFFFFuLL)
    LODWORD(v32) = -1;
  v33 = v32 + 1;
  if (*v30 <= 0xFFFFFFFEuLL)
    goto LABEL_8;
LABEL_5:
  if (!v33)
  {
    *v27 = *v28;
    swift_retain();
    swift_release();
    *v30 = *v31;
    swift_retain();
    swift_release();
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v22 + 24))(((unint64_t)v30 + v25) & v29, ((unint64_t)v31 + v25) & v29, v21);
    goto LABEL_12;
  }
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v22 + 8))(((unint64_t)v30 + v25) & v29, v21);
LABEL_9:
  v35 = __n;
  memcpy(v27, v28, __n);
LABEL_13:
  v42 = ((unint64_t)v27 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = ((unint64_t)v28 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v42 = *(_BYTE *)v43;
  v44 = *(_QWORD *)(v43 + 8);
  *(_BYTE *)(v42 + 16) = *(_BYTE *)(v43 + 16);
  *(_QWORD *)(v42 + 8) = v44;
  v45 = *(_QWORD *)(v43 + 24);
  *(_BYTE *)(v42 + 32) = *(_BYTE *)(v43 + 32);
  *(_QWORD *)(v42 + 24) = v45;
  v46 = *(_QWORD *)(v43 + 40);
  *(_BYTE *)(v42 + 48) = *(_BYTE *)(v43 + 48);
  *(_QWORD *)(v42 + 40) = v46;
  v47 = *(_QWORD *)(v43 + 56);
  *(_BYTE *)(v42 + 64) = *(_BYTE *)(v43 + 64);
  *(_QWORD *)(v42 + 56) = v47;
  return a1;
}

uint64_t initializeWithTake for CollectionViewListRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  size_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (v7 + v10 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v12, v13, v8);
  v14 = *(_QWORD *)(v9 + 64);
  v15 = v12 + v14;
  v16 = v13 + v14;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = v19;
  v20 = (_QWORD *)((v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)((v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = *(_QWORD *)(a3 + 24);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(_DWORD *)(v23 + 80);
  v25 = v24 + 8;
  v26 = *(_DWORD *)(v23 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v27 = (_QWORD *)(((unint64_t)v20 + v24 + 8) & v26);
  v28 = (_QWORD *)(((unint64_t)v21 + v24 + 8) & v26);
  v29 = ~v24;
  v30 = (v24 + 16) & ~v24;
  v31 = *(_QWORD *)(v23 + 64);
  v32 = (uint64_t *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v23 + 84) & 0x80000000) == 0)
  {
    v33 = *v32;
    if ((unint64_t)*v32 >= 0xFFFFFFFF)
      LODWORD(v33) = -1;
    v34 = v30 + v31;
    if ((_DWORD)v33 != -1)
      goto LABEL_5;
LABEL_7:
    *v27 = *v28;
    v35 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v35 = *v32;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v23 + 32))(((unint64_t)v35 + v25) & v29, ((unint64_t)v32 + v25) & v29, v22);
    goto LABEL_8;
  }
  v34 = v30 + v31;
  if (!(*(unsigned int (**)(unint64_t))(v23 + 48))(((unint64_t)v32 + v25) & v29))
    goto LABEL_7;
LABEL_5:
  memcpy(v27, v28, v34);
LABEL_8:
  v36 = ((unint64_t)v27 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = ((unint64_t)v28 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v36 = *(_OWORD *)v37;
  v38 = *(_OWORD *)(v37 + 16);
  v39 = *(_OWORD *)(v37 + 32);
  v40 = *(_OWORD *)(v37 + 48);
  *(_BYTE *)(v36 + 64) = *(_BYTE *)(v37 + 64);
  *(_OWORD *)(v36 + 32) = v39;
  *(_OWORD *)(v36 + 48) = v40;
  *(_OWORD *)(v36 + 16) = v38;
  return a1;
}

uint64_t assignWithTake for CollectionViewListRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t (*v34)(unint64_t, uint64_t, uint64_t);
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  uint64_t __n;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v7 + v10 + a1) & ~v10;
  v12 = (v7 + v10 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v11, v12, v8);
  v13 = *(_QWORD *)(v9 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  v19 = (_QWORD *)((v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_QWORD *)((v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v20;
  v21 = *(_QWORD *)(a3 + 24);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned int *)(v22 + 84);
  v24 = *(_DWORD *)(v22 + 80);
  v25 = v24 + 8;
  v26 = *(_DWORD *)(v22 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v27 = (_QWORD *)(((unint64_t)v19 + v24 + 8) & v26);
  v28 = (_QWORD *)(((unint64_t)v20 + v24 + 8) & v26);
  v29 = ~v24;
  v30 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  __n = ((v24 + 16) & ~v24) + *(_QWORD *)(v22 + 64);
  if ((v23 & 0x80000000) != 0)
  {
    v44 = a1;
    v34 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 48);
    v43 = v34(((unint64_t)v30 + v25) & v29, v23, v21);
    v31 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    v33 = v34(((unint64_t)v31 + v25) & v29, v23, v21);
    a1 = v44;
    if (!v43)
      goto LABEL_5;
LABEL_8:
    if (v33)
      goto LABEL_9;
    *v27 = *v28;
    *v30 = *v31;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v22 + 32))(((unint64_t)v30 + v25) & v29, ((unint64_t)v31 + v25) & v29, v21);
LABEL_12:
    v35 = __n;
    goto LABEL_13;
  }
  v31 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  v32 = *v31;
  if (*v31 >= 0xFFFFFFFFuLL)
    LODWORD(v32) = -1;
  v33 = v32 + 1;
  if (*v30 <= 0xFFFFFFFEuLL)
    goto LABEL_8;
LABEL_5:
  if (!v33)
  {
    *v27 = *v28;
    swift_release();
    *v30 = *v31;
    swift_release();
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v22 + 40))(((unint64_t)v30 + v25) & v29, ((unint64_t)v31 + v25) & v29, v21);
    goto LABEL_12;
  }
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v22 + 8))(((unint64_t)v30 + v25) & v29, v21);
LABEL_9:
  v35 = __n;
  memcpy(v27, v28, __n);
LABEL_13:
  v36 = ((unint64_t)v27 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = ((unint64_t)v28 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v36 = *(_BYTE *)v37;
  v38 = *(_QWORD *)(v37 + 8);
  *(_BYTE *)(v36 + 16) = *(_BYTE *)(v37 + 16);
  *(_QWORD *)(v36 + 8) = v38;
  v39 = *(_QWORD *)(v37 + 24);
  *(_BYTE *)(v36 + 32) = *(_BYTE *)(v37 + 32);
  *(_QWORD *)(v36 + 24) = v39;
  v40 = *(_QWORD *)(v37 + 40);
  *(_BYTE *)(v36 + 48) = *(_BYTE *)(v37 + 48);
  *(_QWORD *)(v36 + 40) = v40;
  v41 = *(_QWORD *)(v37 + 56);
  *(_BYTE *)(v36 + 64) = *(_BYTE *)(v37 + 64);
  *(_QWORD *)(v36 + 56) = v41;
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionViewListRoot(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unsigned int v35;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v8)
    v12 = v8;
  else
    v12 = *(_DWORD *)(v10 + 84);
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v14 = *(_DWORD *)(v13 + 84);
  if (v14 <= 0x7FFFFFFF)
    v15 = 0x7FFFFFFF;
  else
    v15 = *(_DWORD *)(v13 + 84);
  v16 = v15 - 1;
  if (v16 > v12)
    v12 = v16;
  if (!a2)
    return 0;
  v17 = v9;
  v18 = *(unsigned __int8 *)(v10 + 80);
  v19 = *(unsigned __int8 *)(v13 + 80);
  v20 = v19 | 7;
  v21 = *(_QWORD *)(v7 + 64) + v18;
  v22 = *(_QWORD *)(v10 + 64) + 23;
  v23 = v19 + 8;
  if (v12 < a2)
  {
    v24 = ((*(_QWORD *)(v13 + 64)
          + ((v19 + 16) & ~v19)
          + ((v23 + ((v22 + (v21 & ~v18)) & 0xFFFFFFFFFFFFFFF8)) & ~v20)
          + 7) & 0xFFFFFFFFFFFFFFF8)
        + 65;
    if (v24 < 4)
      v25 = ((a2 - v12 + 255) >> (8 * v24)) + 1;
    else
      v25 = 2;
    if (v25 >= 0x10000)
      v26 = 4;
    else
      v26 = 2;
    if (v25 < 0x100)
      v26 = 1;
    if (v25 >= 2)
      v27 = v26;
    else
      v27 = 0;
    __asm { BR              X7 }
  }
  if ((_DWORD)v8 == v12)
  {
    v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v30 = a1;
    v31 = v8;
    v32 = v6;
    return v29(v30, v31, v32);
  }
  v30 = (v21 + a1) & ~v18;
  if (v11 == v12)
  {
    v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    v31 = *(unsigned int *)(v10 + 84);
    v32 = v17;
    return v29(v30, v31, v32);
  }
  v33 = (unint64_t *)((((((v22 + v30) & 0xFFFFFFFFFFFFFFF8) + v20 + 8) & ~v20) + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v14 & 0x80000000) != 0)
  {
    v35 = (*(uint64_t (**)(unint64_t))(v13 + 48))(((unint64_t)v33 + v23) & ~v19);
  }
  else
  {
    v34 = *v33;
    if (v34 >= 0xFFFFFFFF)
      LODWORD(v34) = -1;
    v35 = v34 + 1;
  }
  if (v35 >= 2)
    return v35 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for CollectionViewListRoot(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  size_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;

  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(type metadata accessor for UICollectionLayoutListConfiguration.Appearance() - 8);
  if (*(_DWORD *)(v10 + 84) <= v9)
    v11 = v9;
  else
    v11 = *(_DWORD *)(v10 + 84);
  v12 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v12 + 84) <= 0x7FFFFFFFu)
    v13 = 0x7FFFFFFF;
  else
    v13 = *(_DWORD *)(v12 + 84);
  if (v13 - 1 <= v11)
    v14 = v11;
  else
    v14 = v13 - 1;
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = ((((v15 + 16) & ~v15)
        + *(_QWORD *)(v12 + 64)
        + ((v15
          + 8
          + ((*(_QWORD *)(v10 + 64)
            + 23
            + ((*(_QWORD *)(v8 + 64) + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))) & 0xFFFFFFFFFFFFFFF8)) & ~(v15 | 7))
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 65;
  if (v14 >= a3)
  {
    v18 = 0u;
    if (v14 >= a2)
      goto LABEL_22;
  }
  else
  {
    if (v16 <= 3)
      v17 = ((a3 - v14 + 255) >> (8 * v16)) + 1;
    else
      v17 = 2;
    if (v17 >= 0x10000)
      v18 = 4;
    else
      v18 = 2;
    if (v17 < 0x100)
      v18 = 1;
    if (v17 < 2)
      v18 = 0;
    if (v14 >= a2)
LABEL_22:
      __asm { BR              X26 }
  }
  if (v16 >= 4)
    v19 = ~v14 + a2;
  else
    v19 = (~(_BYTE)v14 + a2);
  bzero(a1, v16);
  if ((_DWORD)v16 == 1)
    *a1 = v19;
  else
    *(_DWORD *)a1 = v19;
  __asm { BR              X10 }
}

void sub_1870F97D4()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = v0;
  JUMPOUT(0x1870F9988);
}

void sub_1870F97DC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x1870F97E4);
  JUMPOUT(0x1870F9988);
}

void sub_1870F9840()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = v0;
  JUMPOUT(0x1870F9988);
}

void sub_1870F9848()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = v0;
  JUMPOUT(0x1870F9988);
}

uint64_t sub_1870F9850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_WORD *)(v13 + v16) = 0;
  if (!(_DWORD)v12)
    JUMPOUT(0x1870F9988);
  if ((_DWORD)v15 == v11)
  {
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
    v4 = v13;
    v5 = v12;
    v6 = v15;
    v7 = v14;
  }
  else
  {
    v4 = (a1 + v13) & a2;
    if ((_DWORD)v9 != v11)
      JUMPOUT(0x1870F985CLL);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v5 = v12;
    v6 = v9;
    v7 = a3;
  }
  return v3(v4, v5, v6, v7);
}

void sub_1870F9924()
{
  char v0;
  _BYTE *v1;

  *v1 = v0;
  JUMPOUT(0x1870F9988);
}

void sub_1870F9948()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
  JUMPOUT(0x1870F9988);
}

void sub_1870F9958()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
  JUMPOUT(0x1870F9988);
}

void sub_1870F9960()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
  JUMPOUT(0x1870F9988);
}

_UNKNOWN **base witness table accessor for View in CollectionViewListRoot<A, B>()
{
  return &protocol witness table for CollectionViewListRoot<A, B>;
}

void closure #1 in static CollectionViewListRoot._makeView(view:inputs:)()
{
  type metadata accessor for CollectionViewListRoot();
}

uint64_t sub_1870F99E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v6[2] = a1;
  v7 = v1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v1, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

uint64_t UpdateCollectionViewListCoordinator.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance CollectionViewListRoot<A, B>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionViewListRoot<A, B>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance CollectionViewListRoot<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionViewListRoot<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

unint64_t lazy protocol witness table accessor for type DisableListSections and conformance DisableListSections()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections;
  if (!lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableListSections, &type metadata for DisableListSections);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections;
  if (!lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableListSections, &type metadata for DisableListSections);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections;
  if (!lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableListSections, &type metadata for DisableListSections);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections;
  if (!lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableListSections, &type metadata for DisableListSections);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections;
  if (!lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableListSections, &type metadata for DisableListSections);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListConcatenatesFooters and conformance ListConcatenatesFooters()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters;
  if (!lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListConcatenatesFooters, &type metadata for ListConcatenatesFooters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters;
  if (!lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListConcatenatesFooters, &type metadata for ListConcatenatesFooters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters;
  if (!lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListConcatenatesFooters, &type metadata for ListConcatenatesFooters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters;
  if (!lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListConcatenatesFooters, &type metadata for ListConcatenatesFooters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters;
  if (!lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListConcatenatesFooters, &type metadata for ListConcatenatesFooters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters);
  }
  return result;
}

void partial apply for closure #1 in static CollectionViewListRoot._makeView(view:inputs:)()
{
  closure #1 in static CollectionViewListRoot._makeView(view:inputs:)();
}

void type metadata accessor for _GraphValue<CGFloat?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<CGFloat?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<CGFloat?>);
  }
}

void type metadata accessor for _GraphValue<UICollectionLayoutListConfiguration.Appearance>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<UICollectionLayoutListConfiguration.Appearance>)
  {
    type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<UICollectionLayoutListConfiguration.Appearance>);
  }
}

ValueMetadata *type metadata accessor for HoverEventDispatcher()
{
  return &type metadata for HoverEventDispatcher;
}

uint64_t HoverEventDispatcher.receiveEvents(_:manager:)(uint64_t a1, uint64_t a2)
{
  Swift::OpaquePointer *v2;
  Swift::OpaquePointer *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  Swift::UInt v24;
  Swift::UInt v25;
  Swift::OpaquePointer v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(__int128 *__return_ptr, uint64_t, uint64_t);
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(__int128 *, uint64_t, uint64_t);
  double v45;
  CGFloat v46;
  double v47;
  CGFloat v48;
  uint64_t v49;
  char v50;
  double v51;
  CGFloat v52;
  double v53;
  CGFloat v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(__int128 *, uint64_t, uint64_t);
  unint64_t v58;
  char v59;
  unint64_t v60;
  int v61;
  uint64_t rawValue;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _BYTE v70[40];
  _QWORD v71[3];
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[3];
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  _OWORD v78[2];
  uint64_t v79;
  _QWORD v80[2];
  __int128 v81;
  uint64_t v82;

  v3 = v2;
  v6 = a2 + 16;
  swift_beginAccess();
  if (!MEMORY[0x18D760234](v6))
    return MEMORY[0x1E0DEE9E8];
  v7 = *(_QWORD *)(a2 + 24);
  ObjectType = swift_getObjectType();
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);
  swift_unknownObjectRelease();
  result = MEMORY[0x1E0DEE9E8];
  if (!v9)
    return result;
  v82 = MEMORY[0x1E0DEE9E8];
  v63 = a1 + 64;
  v11 = 1 << *(_BYTE *)(a1 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(a1 + 64);
  v65 = (unint64_t)(v11 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v66 = 0;
  v64 = a1;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v66 << 6);
LABEL_11:
      v17 = *(_QWORD *)(a1 + 56);
      v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v16);
      v20 = *v18;
      v19 = v18[1];
      *(_QWORD *)&v77 = v20;
      *((_QWORD *)&v77 + 1) = v19;
      outlined init with copy of TableColumnList(v17 + 40 * v16, (uint64_t)v78);
      goto LABEL_30;
    }
    v21 = v66 + 1;
    if (__OFADD__(v66, 1))
    {
      __break(1u);
      goto LABEL_65;
    }
    if (v21 < v65)
    {
      v22 = *(_QWORD *)(v63 + 8 * v21);
      if (v22)
        goto LABEL_15;
      v23 = v66 + 2;
      ++v66;
      if (v21 + 1 < v65)
      {
        v22 = *(_QWORD *)(v63 + 8 * v23);
        if (v22)
          goto LABEL_18;
        v66 = v21 + 1;
        if (v21 + 2 < v65)
        {
          v22 = *(_QWORD *)(v63 + 8 * (v21 + 2));
          if (v22)
          {
            v21 += 2;
            goto LABEL_15;
          }
          v23 = v21 + 3;
          v66 = v21 + 2;
          if (v21 + 3 < v65)
            break;
        }
      }
    }
LABEL_29:
    v13 = 0;
    v79 = 0;
    memset(v78, 0, sizeof(v78));
    v77 = 0u;
LABEL_30:
    outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v77, (uint64_t)v80);
    v24 = v80[0];
    if (!v80[0])
    {
      swift_release();
      printEventBindings(_:)((Swift::OpaquePointer)v3->_rawValue);
      swift_release();
      return v82;
    }
    v25 = v80[1];
    outlined init with take of OptionalBinaryInteger(&v81, (uint64_t)v74);
    v26._rawValue = v3->_rawValue;
    if (*((_QWORD *)v3->_rawValue + 2))
    {
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
      if ((v28 & 1) != 0)
      {
        v29 = *(_QWORD *)(*((_QWORD *)v26._rawValue + 7) + 8 * v27);
        outlined init with copy of TableColumnList((uint64_t)v74, (uint64_t)v71);
        v30 = v72;
        v31 = v73;
        __swift_project_boxed_opaque_existential_1(v71, v72);
        v32 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v31 + 8);
        swift_retain_n();
        v32(&v77, v30, v31);
        if (v77 == 2 || v77 == 3)
        {
          swift_release();
          outlined init with copy of TableColumnList((uint64_t)v71, (uint64_t)&v77);
          type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
          type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for HitTestableEventType);
          if ((swift_dynamicCast() & 1) != 0)
          {
            outlined init with take of OptionalBinaryInteger(&v67, (uint64_t)v70);
            outlined init with copy of TableColumnList((uint64_t)v70, (uint64_t)&v67);
            HitTestableEvent.init(_:)();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
            HitTestableEvent.hitTestLocation.getter();
            v34 = v33;
            v36 = v35;
            swift_release();
            v37 = swift_retain();
            specialized HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(v37, 0, v34, v36);
            swift_release_n();
            v38 = 0;
          }
          else
          {
            v69 = 0;
            v67 = 0u;
            v68 = 0u;
            outlined destroy of HitTestableEventType?((uint64_t)&v67);
            v38 = v29;
          }
LABEL_55:
          v55 = v72;
          v56 = v73;
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v71, v72);
          *(_QWORD *)&v77 = v38;
          v57 = *(void (**)(__int128 *, uint64_t, uint64_t))(v56 + 32);
          swift_retain();
          v57(&v77, v55, v56);
          if (v38)
          {
            swift_retain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(Swift::OpaquePointer *)&v77 = (Swift::OpaquePointer)v3->_rawValue;
            v3->_rawValue = (void *)0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v38, v24, v25, isUniquelyReferenced_nonNull_native);
            v3->_rawValue = (void *)v77;
            swift_bridgeObjectRelease();
          }
          else
          {
            v58 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
            if ((v59 & 1) != 0)
            {
              v60 = v58;
              v61 = swift_isUniquelyReferenced_nonNull_native();
              rawValue = (uint64_t)v3->_rawValue;
              *(Swift::OpaquePointer *)&v77 = (Swift::OpaquePointer)v3->_rawValue;
              v3->_rawValue = (void *)0x8000000000000000;
              if (!v61)
              {
                specialized _NativeDictionary.copy()();
                rawValue = v77;
              }
              specialized _NativeDictionary._delete(at:)(v60, rawValue);
              v3->_rawValue = (void *)rawValue;
              swift_release();
              swift_bridgeObjectRelease();
            }
          }
          specialized Set._Variant.insert(_:)((Swift::UInt *)&v77, v24, v25);
          swift_release();
          swift_release();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
          a1 = v64;
          goto LABEL_8;
        }
        if (dispatch thunk of ResponderNode.bindEvent(_:)())
        {
          type metadata accessor for HoverResponder();
          ResponderNode.firstAncestor<A>(ofType:)();
          swift_release();
          v49 = v77;
          if (!(_QWORD)v77)
            goto LABEL_51;
          if (v29 != (_QWORD)v77)
          {
            swift_retain();
            goto LABEL_51;
          }
          v38 = v29;
        }
        else
        {
          v49 = 0;
LABEL_51:
          swift_release();
          v38 = v49;
        }
        swift_release();
        outlined init with copy of TableColumnList((uint64_t)v71, (uint64_t)&v77);
        type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
        type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for HitTestableEventType);
        if (swift_dynamicCast())
        {
          outlined init with take of OptionalBinaryInteger(&v67, (uint64_t)v70);
          outlined init with copy of TableColumnList((uint64_t)v70, (uint64_t)&v67);
          HitTestableEvent.init(_:)();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
          HitTestableEvent.hitTestLocation.getter();
          v52 = v51;
          v54 = v53;
          swift_release();
          swift_retain();
          swift_retain();
          specialized HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(v29, v49, v52, v54);
          swift_release();
          swift_release_n();
        }
        else
        {
          v69 = 0;
          v67 = 0u;
          v68 = 0u;
          outlined destroy of HitTestableEventType?((uint64_t)&v67);
          swift_release();
        }
        goto LABEL_55;
      }
    }
    v39 = v75;
    v40 = v76;
    __swift_project_boxed_opaque_existential_1(v74, v75);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v40 + 8))(&v77, v39, v40);
    if (v77 != 2 && v77 != 3)
    {
      if (dispatch thunk of ResponderNode.bindEvent(_:)())
      {
        type metadata accessor for HoverResponder();
        ResponderNode.firstAncestor<A>(ofType:)();
        swift_release();
        v41 = v77;
        if ((_QWORD)v77)
        {
          outlined init with copy of TableColumnList((uint64_t)v74, (uint64_t)v71);
          v42 = v72;
          v43 = v73;
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v71, v72);
          *(_QWORD *)&v77 = v41;
          v44 = *(void (**)(__int128 *, uint64_t, uint64_t))(v43 + 32);
          swift_retain_n();
          v44(&v77, v42, v43);
          outlined init with copy of TableColumnList((uint64_t)v71, (uint64_t)&v77);
          type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
          type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for HitTestableEventType);
          if (swift_dynamicCast())
          {
            outlined init with take of OptionalBinaryInteger(&v67, (uint64_t)v70);
            outlined init with copy of TableColumnList((uint64_t)v70, (uint64_t)&v67);
            HitTestableEvent.init(_:)();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
            HitTestableEvent.hitTestLocation.getter();
            v46 = v45;
            v48 = v47;
            swift_release();
            swift_retain();
            specialized HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(0, v41, v46, v48);
            swift_release();
          }
          else
          {
            v69 = 0;
            v67 = 0u;
            v68 = 0u;
            outlined destroy of HitTestableEventType?((uint64_t)&v67);
          }
          swift_retain();
          v50 = swift_isUniquelyReferenced_nonNull_native();
          *(Swift::OpaquePointer *)&v77 = (Swift::OpaquePointer)v3->_rawValue;
          v3->_rawValue = (void *)0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v41, v24, v25, v50);
          v3->_rawValue = (void *)v77;
          swift_bridgeObjectRelease();
          specialized Set._Variant.insert(_:)((Swift::UInt *)&v77, v24, v25);
          swift_release_n();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
        }
      }
    }
LABEL_8:
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
  }
  v22 = *(_QWORD *)(v63 + 8 * v23);
  if (v22)
  {
LABEL_18:
    v21 = v23;
LABEL_15:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v21 << 6);
    v66 = v21;
    goto LABEL_11;
  }
  while (1)
  {
    v21 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v21 >= v65)
    {
      v66 = v65 - 1;
      goto LABEL_29;
    }
    v22 = *(_QWORD *)(v63 + 8 * v21);
    ++v23;
    if (v22)
      goto LABEL_15;
  }
LABEL_65:
  __break(1u);
  return result;
}

uint64_t closure #3 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  if (!a1 || !a2)
    return 0;
  v4 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v6 = a2 >> 62;
    if (!(a2 >> 62))
    {
LABEL_5:
      v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v4)
        goto LABEL_6;
      goto LABEL_21;
    }
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4)
  {
LABEL_6:
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_7;
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
LABEL_21:
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8)
    goto LABEL_22;
LABEL_7:
  if ((a1 & 0xC000000000000001) != 0)
    goto LABEL_47;
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_49;
  }
  v4 = *(_QWORD *)(a1 + 32);
  swift_retain();
LABEL_10:
  swift_bridgeObjectRelease();
  if (v5 < v7)
  {
    v9 = v7 - v5;
    if (__OFSUB__(v7, v5))
      goto LABEL_51;
    if ((a2 & 0xC000000000000001) != 0)
      goto LABEL_52;
    if ((v9 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v6 = a2 & 0xFFFFFFFFFFFFFF8;
      if (v9 < *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        v10 = *(_QWORD *)(a2 + 8 * v9 + 32);
        swift_release();
        if (v10 == v4)
          return 0;
        goto LABEL_25;
      }
    }
    __break(1u);
    goto LABEL_57;
  }
  swift_release();
  do
  {
LABEL_23:
    if (v6)
    {
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter();
      v4 = v9;
      if (!v9)
        goto LABEL_38;
    }
    else
    {
      v6 = a2 & 0xFFFFFFFFFFFFFF8;
LABEL_25:
      v4 = *(_QWORD *)(v6 + 16);
      v9 = swift_bridgeObjectRetain();
      if (!v4)
      {
LABEL_38:
        v13 = swift_bridgeObjectRelease();
        goto LABEL_39;
      }
    }
    if ((a2 & 0xC000000000000001) != 0)
    {
LABEL_49:
      v6 = MEMORY[0x18D75E3BC](0, a2);
      goto LABEL_29;
    }
    if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v6 = *(_QWORD *)(a2 + 32);
      swift_retain();
LABEL_29:
      result = swift_bridgeObjectRelease();
      if (v7 < v5)
      {
        v12 = __OFSUB__(v5, v7);
        v5 -= v7;
        if (!v12)
        {
          if ((a1 & 0xC000000000000001) == 0)
          {
            if (v5 < 0)
            {
              __break(1u);
LABEL_60:
              __break(1u);
              return result;
            }
            if ((unint64_t)v5 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_60;
            v7 = *(_QWORD *)(a1 + 8 * v5 + 32);
            goto LABEL_35;
          }
LABEL_58:
          v7 = MEMORY[0x18D75E3BC](v5, a1);
          swift_unknownObjectRelease();
LABEL_35:
          v13 = swift_release();
          if (v7 == v6)
            return v5;
LABEL_39:
          if (((v4 | v8) & 0x8000000000000000) == 0)
            goto LABEL_40;
          goto LABEL_46;
        }
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      v13 = swift_release();
      if (((v4 | v8) & 0x8000000000000000) == 0)
      {
LABEL_40:
        MEMORY[0x1E0C80A78](v13, v14);
        v15 = specialized Sequence.prefix(while:)(0, v8, 0, v4, (uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in closure #3 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:));
        v16 = *(_QWORD *)(v15 + 16);
        if (v16)
          v5 = *(_QWORD *)(v15 + 16 * v16 + 16);
        else
          v5 = 0;
        swift_bridgeObjectRelease();
        return v5;
      }
LABEL_46:
      __break(1u);
LABEL_47:
      v4 = MEMORY[0x18D75E3BC](0, a1);
      goto LABEL_10;
    }
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    v19 = v6;
    v17 = MEMORY[0x18D75E3BC](v9, a2);
    swift_unknownObjectRelease();
    swift_release();
    v18 = v17 == v4;
    v6 = v19;
  }
  while (!v18);
  return 0;
}

unint64_t closure #1 in closure #3 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;

  if ((a3 & 0xC000000000000001) == 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      v6 = *(_QWORD *)(a3 + 8 * result + 32);
      result = swift_retain();
      if ((a4 & 0xC000000000000001) == 0)
        goto LABEL_5;
LABEL_10:
      v7 = MEMORY[0x18D75E3BC](a2, a4);
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_13;
  }
  result = MEMORY[0x18D75E3BC](result, a3);
  v6 = result;
  if ((a4 & 0xC000000000000001) != 0)
    goto LABEL_10;
LABEL_5:
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (*(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v7 = *(_QWORD *)(a4 + 8 * a2 + 32);
    swift_retain();
LABEL_8:
    swift_release();
    swift_release();
    return v6 == v7;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t closure #6 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for HoverResponder();
  result = swift_dynamicCastClass();
  v3 = result;
  if (result)
    result = swift_retain();
  *a1 = v3;
  return result;
}

BOOL closure #7 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(CGSize **a1, CGFloat a2, CGFloat a3)
{
  _OWORD v6[2];
  uint64_t v7;
  char v8;
  CGRect v9;
  CGPoint v10;

  if (BYTE1((*a1)[28].width) != 1)
    return 0;
  v9.size = (*a1)[17];
  memset(v6, 0, sizeof(v6));
  v9.origin.x = 0.0;
  v9.origin.y = 0.0;
  v7 = 0;
  v8 = 2;
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)v6);
  v10.x = a2;
  v10.y = a3;
  return CGRectContainsPoint(v9, v10);
}

uint64_t protocol witness for ForwardedEventDispatcher.reset() in conformance HoverEventDispatcher()
{
  unint64_t *v0;
  unint64_t v1;
  uint64_t result;

  v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  result = swift_bridgeObjectRelease();
  *v0 = v1;
  return result;
}

BOOL specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)(_QWORD *a1)
{
  return *a1 != 0;
}

uint64_t specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    *a2 = result;
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined init with take of (key: EventID, value: EventType)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for (key: EventID, value: EventType)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: EventID, value: EventType), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (key: EventID, value: EventType)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: EventID, value: EventType))
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for EventType);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: EventID, value: EventType));
  }
}

uint64_t outlined destroy of HitTestableEventType?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for HitTestableEventType?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for HitTestableEventType?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HitTestableEventType?)
  {
    type metadata accessor for CVarArg(255, &lazy cache variable for type metadata for HitTestableEventType);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HitTestableEventType?);
  }
}

uint64_t specialized Collection.firstIndex(where:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if (a1 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v5 = 0;
  if (v4)
  {
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = MEMORY[0x18D75E3BC](v5, a1);
      }
      else
      {
        v6 = *(_QWORD *)(a1 + 8 * v5 + 32);
        swift_retain();
      }
      swift_release();
      if (a2 && v6 == a2)
        break;
      v8 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_14:
        swift_bridgeObjectRetain();
        v4 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v5 = 0;
        if (!v4)
          return v5;
      }
      else
      {
        ++v5;
        if (v8 == v4)
          return 0;
      }
    }
  }
  return v5;
}

uint64_t specialized Sequence.prefix(while:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (a2 != result)
  {
    v6 = result;
    if (result >= a2)
    {
      __break(1u);
      return result;
    }
    v7 = a4;
    if (a4 != a3)
    {
      v9 = a2 - 1;
      v10 = MEMORY[0x1E0DEE9D8];
      while (v7 > a3)
      {
        if ((a5(v9, --v7) & 1) == 0)
          return v10;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1);
        v12 = *(_QWORD *)(v10 + 16);
        v11 = *(_QWORD *)(v10 + 24);
        if (v12 >= v11 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
        *(_QWORD *)(v10 + 16) = v12 + 1;
        v13 = v10 + 16 * v12;
        *(_QWORD *)(v13 + 32) = v9;
        *(_QWORD *)(v13 + 40) = v7;
        if (v6 == v9)
          return v10;
        if (v9 <= v6 || v9 > a2)
          goto LABEL_17;
        --v9;
        if (a3 == v7)
          return v10;
      }
      __break(1u);
LABEL_17:
      __break(1u);
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t specialized HoverEventDispatcher.dispatchNewAncestorsHoverCallbacks(oldHighestAncestor:newAncestors:point:)(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _BYTE *v22;
  __int128 v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  char v35;
  _BYTE v36[48];
  uint64_t v37;
  __int128 v38;
  __int128 v39;

  if (!a2)
    return result;
  v3 = result;
  swift_retain();
  v4 = swift_bridgeObjectRetain();
  v5 = specialized Collection.firstIndex(where:)(v4, v3);
  v7 = v6;
  result = swift_release();
  if ((v7 & 1) == 0)
  {
    if ((v5 & 0x8000000000000000) == 0)
    {
LABEL_4:
      if (!(a2 >> 62))
      {
        v8 = a2 & 0xFFFFFFFFFFFFFF8;
        goto LABEL_8;
      }
      swift_bridgeObjectRetain();
      v31 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if ((v31 & 0x8000000000000000) == 0)
      {
        swift_bridgeObjectRetain();
        v32 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v9 = 0;
        if (v32 >= v5)
          goto LABEL_9;
LABEL_38:
        __break(1u);
        return swift_unknownObjectRelease();
      }
LABEL_42:
      __break(1u);
      return result;
    }
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v8 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_4;
    goto LABEL_41;
  }
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_8:
  v9 = 1;
  if (*(_QWORD *)(v8 + 16) < v5)
    goto LABEL_38;
LABEL_9:
  if ((a2 & 0xC000000000000001) != 0 && v5)
  {
    type metadata accessor for HoverResponder();
    v10 = 0;
    do
    {
      v11 = v10 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v10);
      v10 = v11;
    }
    while (v5 != v11);
  }
  if ((v9 & 1) != 0)
  {
    v12 = 0;
    v13 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  }
  else
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.subscript.getter();
    v13 = v14;
    v12 = v15;
    v17 = v16;
    swift_bridgeObjectRelease_n();
    v5 = v17 >> 1;
  }
  if (v5 == v12)
    return swift_unknownObjectRelease();
  v18 = v5;
  while (!__OFSUB__(v18--, 1))
  {
    if (v18 < v12 || v18 >= v5)
      goto LABEL_33;
    v21 = *(_QWORD *)(v13 + 8 * v18);
    v22 = (_BYTE *)(v21 + 448);
    if (*(_BYTE *)(v21 + 449) == 1)
    {
      v37 = *(_QWORD *)(v21 + 232);
      v23 = *(_OWORD *)(v21 + 256);
      v38 = *(_OWORD *)(v21 + 240);
      v39 = v23;
      swift_beginAccess();
      v34 = 0;
      memset(v33, 0, sizeof(v33));
      v35 = 2;
      outlined init with copy of CoordinateSpace(v21 + 288, (uint64_t)v36);
      v36[41] = 4;
      swift_retain();
      swift_retain();
      ViewTransform.convert(_:point:)();
      v25 = v24;
      v27 = v26;
      outlined destroy of ViewTransform.Conversion((uint64_t)v33);
      swift_release();
      v29 = *(_QWORD *)(v21 + 208);
      v28 = *(_QWORD *)(v21 + 216);
      v30 = *(_BYTE *)(v21 + 224);
      if ((v30 & 1) != 0)
      {
        if ((*v22 & 1) == 0)
          goto LABEL_19;
      }
      else if ((*v22 & 1) == 0 && v25 == *(double *)(v21 + 432) && v27 == *(double *)(v21 + 440))
      {
        goto LABEL_19;
      }
      *(double *)(v21 + 432) = v25;
      *(double *)(v21 + 440) = v27;
      *v22 = 0;
      v19 = swift_allocObject();
      *(_QWORD *)(v19 + 16) = v29;
      *(_QWORD *)(v19 + 24) = v28;
      *(_BYTE *)(v19 + 32) = v30;
      *(double *)(v19 + 40) = v25;
      *(double *)(v19 + 48) = v27;
      *(_BYTE *)(v19 + 56) = 0;
      outlined copy of HoverCallback();
      outlined copy of HoverCallback();
      static Update.enqueueAction(_:)();
      swift_release();
      outlined consume of HoverCallback();
LABEL_19:
      swift_release();
    }
    if (v18 == v12)
      return swift_unknownObjectRelease();
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return swift_unknownObjectRelease();
}

uint64_t specialized HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(uint64_t result, uint64_t a2, CGFloat a3, CGFloat a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  void (*v14)(uint64_t *__return_ptr, char *);
  double v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD *__return_ptr, uint64_t *);
  unint64_t v23;
  void (*v24)(_QWORD *__return_ptr, uint64_t *);
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  Swift::Int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  CGFloat i;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  unint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD v72[3];
  uint64_t v73[5];
  char v74;
  _BYTE v75[56];
  CGFloat v76;
  _OWORD v77[2];
  double v78;
  uint64_t v79;
  __int128 v80;
  _BYTE v81[24];
  char v82;
  uint64_t (*v83)@<X0>(uint64_t *@<X8>);
  uint64_t v84;
  uint64_t (*v85)(CGFloat *);
  uint64_t v86;
  uint64_t (*v87)@<X0>(uint64_t *@<X0>, uint64_t *@<X8>);
  uint64_t v88;
  BOOL (*v89)(CGSize **);
  uint64_t v90;
  CGPoint v91;
  CGPoint v92;
  CGRect v93;
  CGRect v94;

  if (result)
  {
    type metadata accessor for HoverResponder();
    result = ResponderNode.firstAncestor<A>(ofType:)();
    v7 = v80;
    if (!a2)
    {
      if (!(_QWORD)v80)
        return result;
      v8 = 0;
      goto LABEL_21;
    }
  }
  else
  {
    if (!a2)
      return result;
    v7 = 0;
  }
  type metadata accessor for HoverResponder();
  result = ResponderNode.firstAncestor<A>(ofType:)();
  v8 = v80;
  if (!v7)
  {
    if (!(_QWORD)v80)
      return result;
    v71 = 0;
    v23 = 0;
    goto LABEL_35;
  }
  if ((_QWORD)v80 && v7 == (_QWORD)v80)
  {
    swift_retain();
    ResponderNode.sequence.getter();
    v71 = v7;
    swift_release();
    v9 = v80;
    v10 = BYTE8(v80);
    v11 = *(_OWORD *)v81;
    v12 = v81[16];
    v13 = swift_allocObject();
    *(CGFloat *)(v13 + 16) = a3;
    *(CGFloat *)(v13 + 24) = a4;
    *((_QWORD *)&v80 + 1) = v9;
    v81[0] = v10;
    *(_OWORD *)&v81[8] = v11;
    v82 = v12;
    v83 = closure #6 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:);
    v84 = 0;
    v85 = (uint64_t (*)(CGFloat *))specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    v86 = 0;
    v87 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    v88 = 0;
    LOBYTE(v80) = 0;
    v89 = partial apply for closure #7 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:);
    v90 = v13;
    v70 = v9;
    swift_retain_n();
    swift_retain_n();
    if ((v12 & 1) == 0)
    {
      v69 = v75;
      while (1)
      {
        while (1)
        {
          v14 = *(void (**)(uint64_t *__return_ptr, char *))&v81[8];
          swift_retain();
          v14(&v79, (char *)&v80 + 8);
          swift_release();
          if (!v79)
          {
            v82 = 1;
            goto LABEL_63;
          }
          ((void (*)(double *__return_ptr, uint64_t *))v83)(&v78, &v79);
          swift_release();
          v15 = v78;
          v76 = v78;
          if ((v85(&v76) & 1) != 0)
            break;
          swift_release();
        }
        v76 = v15;
        ((void (*)(uint64_t *__return_ptr, CGFloat *))v87)(&v79, &v76);
        swift_release();
        v16 = v79;
        v73[0] = v79;
        if ((((uint64_t (*)(uint64_t *))v89)(v73) & 1) == 0)
          break;
        if (*(_BYTE *)(v16 + 449) == 1)
        {
          v76 = *(double *)(v16 + 232);
          v17 = *(_OWORD *)(v16 + 256);
          v77[0] = *(_OWORD *)(v16 + 240);
          v77[1] = v17;
          swift_beginAccess();
          memset(v73, 0, sizeof(v73));
          v74 = 2;
          outlined init with copy of CoordinateSpace(v16 + 288, (uint64_t)v69);
          v75[41] = 4;
          swift_retain();
          ViewTransform.convert(_:point:)();
          v19 = v18;
          v21 = v20;
          outlined destroy of ViewTransform.Conversion((uint64_t)v73);
          swift_release();
          HoverResponder.updatePhase(_:)(v19, v21, 0);
        }
        swift_release();
        if (v80 == 1 || (v82 & 1) != 0)
          goto LABEL_63;
      }
      swift_release();
      LOBYTE(v80) = 1;
    }
LABEL_63:
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
LABEL_21:
  swift_retain();
  ResponderNode.sequence.getter();
  v71 = v7;
  swift_release();
  v22 = *(void (**)(_QWORD *__return_ptr, uint64_t *))v81;
  v23 = MEMORY[0x1E0DEE9D8];
  v76 = MEMORY[0x1E0DEE9D8];
  v73[0] = v80;
  LOBYTE(v73[1]) = BYTE8(v80);
  swift_retain();
  swift_retain();
  if ((v81[16] & 1) == 0)
  {
    swift_retain();
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))v81)(v72, v73);
    swift_release();
    if (v72[0])
    {
      type metadata accessor for HoverResponder();
      do
      {
        if (swift_dynamicCastClass())
        {
          MEMORY[0x18D75CF58]();
          if (*(_QWORD *)((*(_QWORD *)&v76 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)&v76 & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          swift_release();
        }
        swift_retain();
        v22(v72, v73);
        swift_release();
      }
      while (v72[0]);
      v23 = *(_QWORD *)&v76;
    }
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (!v8)
  {
    v27 = closure #3 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(v23, 0);
    v26 = 0;
    if (!v23)
      goto LABEL_83;
    v29 = v27;
    v8 = 0;
LABEL_49:
    v68 = v26;
    v69 = (_BYTE *)v8;
    v70 = v23 >> 62;
    if ((v28 & 1) != 0)
    {
      v42 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8];
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [HoverResponder], (uint64_t (*)(uint64_t))type metadata accessor for HoverResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
      v44 = v43;
      *(_QWORD *)&v81[8] = v43;
      *(_QWORD *)&v81[16] = lazy protocol witness table accessor for type [HoverResponder] and conformance [A](&lazy protocol witness table cache variable for type [HoverResponder] and conformance [A], &lazy cache variable for type metadata for [HoverResponder], v42, MEMORY[0x1E0DEAF38]);
      *(_QWORD *)&v80 = v23;
      swift_bridgeObjectRetain();
      goto LABEL_66;
    }
    v31 = &lazy cache variable for type metadata for ArraySlice<HoverResponder>;
    v32 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEBF30];
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ArraySlice<HoverResponder>, (uint64_t (*)(uint64_t))type metadata accessor for HoverResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEBF30]);
    *(_QWORD *)&v81[8] = v33;
    *(_QWORD *)&v81[16] = lazy protocol witness table accessor for type [HoverResponder] and conformance [A](&lazy protocol witness table cache variable for type ArraySlice<HoverResponder> and conformance ArraySlice<A>, &lazy cache variable for type metadata for ArraySlice<HoverResponder>, v32, MEMORY[0x1E0DEBF78]);
    v34 = swift_allocObject();
    *(_QWORD *)&v80 = v34;
    if (v29 < 0)
    {
      __break(1u);
    }
    else
    {
      v31 = (unint64_t *)v34;
      if (!(v23 >> 62))
      {
        v35 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = swift_bridgeObjectRetain();
        if (v35 >= v29)
          goto LABEL_53;
        goto LABEL_104;
      }
    }
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    if (result < 0)
    {
LABEL_105:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    v66 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v66 >= v29)
    {
LABEL_53:
      if ((v23 & 0xC000000000000001) != 0 && v29)
      {
        type metadata accessor for HoverResponder();
        v36 = 0;
        do
        {
          v37 = v36 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v36);
          v36 = v37;
        }
        while (v29 != v37);
      }
      if (v70)
      {
        swift_bridgeObjectRetain();
        v39 = _CocoaArrayWrapper.subscript.getter();
        v40 = v46;
        v38 = v47;
        v41 = v48;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v38 = 0;
        v39 = v23 & 0xFFFFFFFFFFFFFF8;
        v40 = (v23 & 0xFFFFFFFFFFFFFF8) + 32;
        v41 = (2 * v29) | 1;
      }
      v31[2] = v39;
      v31[3] = v40;
      v31[4] = v38;
      v31[5] = v41;
      v44 = *(_QWORD *)&v81[8];
LABEL_66:
      v49 = __swift_project_boxed_opaque_existential_1(&v80, v44);
      v50 = MEMORY[0x1E0C80A78](v49, v49);
      (*(void (**)(char *, double))(v52 + 16))((char *)&v67 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0), v50);
      v73[3] = swift_getAssociatedTypeWitness();
      v73[4] = swift_getAssociatedConformanceWitness();
      __swift_allocate_boxed_opaque_existential_1(v73);
      dispatch thunk of Sequence.makeIterator()();
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v73, v73[3]);
      dispatch thunk of IteratorProtocol.next()();
      for (i = v76; v76 != 0.0; i = v76)
      {
        if ((*(_BYTE *)(*(_QWORD *)&i + 448) & 1) == 0)
        {
          v54 = *(_BYTE *)(*(_QWORD *)&i + 224);
          v55 = *(_QWORD *)(*(_QWORD *)&i + 208);
          v56 = *(_QWORD *)(*(_QWORD *)&i + 216);
          *(_QWORD *)(*(_QWORD *)&i + 432) = 0;
          *(_QWORD *)(*(_QWORD *)&i + 440) = 0;
          *(_BYTE *)(*(_QWORD *)&i + 448) = 1;
          v57 = swift_allocObject();
          *(_QWORD *)(v57 + 16) = v55;
          *(_QWORD *)(v57 + 24) = v56;
          *(_BYTE *)(v57 + 32) = v54;
          *(_QWORD *)(v57 + 40) = 0;
          *(_QWORD *)(v57 + 48) = 0;
          *(_BYTE *)(v57 + 56) = 1;
          outlined copy of HoverCallback();
          outlined copy of HoverCallback();
          static Update.enqueueAction(_:)();
          swift_release();
          outlined consume of HoverCallback();
        }
        swift_release();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v73, v73[3]);
        dispatch thunk of IteratorProtocol.next()();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v80);
      v26 = v68;
      if (v68)
      {
        if (v70)
          goto LABEL_96;
        v58 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        for (; v58; v58 = _CocoaArrayWrapper.endIndex.getter())
        {
          if ((v23 & 0xC000000000000001) != 0)
          {
            v59 = 0;
            while (1)
            {
              v60 = MEMORY[0x18D75E3BC](v59, v23);
              v61 = v59 + 1;
              if (__OFADD__(v59, 1))
                break;
              v45 = v60;
              if (*(_BYTE *)(v60 + 449) == 1)
              {
                v76 = 0.0;
                *(_QWORD *)&v77[0] = 0;
                v62 = *(_OWORD *)(v60 + 256);
                *(_OWORD *)((char *)v77 + 8) = *(_OWORD *)(v60 + 272);
                memset(v81, 0, sizeof(v81));
                v80 = 0u;
                v82 = 2;
                v73[0] = *(_QWORD *)(v60 + 232);
                *(_OWORD *)&v73[1] = *(_OWORD *)(v60 + 240);
                *(_OWORD *)&v73[3] = v62;
                CGRect.convert(to:transform:)();
                outlined destroy of CoordinateSpace((uint64_t)&v80);
                v93.origin.x = v76;
                *(_OWORD *)&v93.origin.y = v77[0];
                v93.size.height = *(CGFloat *)&v77[1];
                v91.x = a3;
                v91.y = a4;
                if (CGRectContainsPoint(v93, v91))
                  goto LABEL_91;
              }
              swift_unknownObjectRelease();
              ++v59;
              if (v61 == v58)
                goto LABEL_97;
            }
            __break(1u);
          }
          else
          {
            v63 = v26;
            v64 = 0;
            while (1)
            {
              v26 = v64 + 1;
              if (__OFADD__(v64, 1))
                break;
              v45 = *(_QWORD *)(v23 + 8 * v64 + 32);
              if (*(_BYTE *)(v45 + 449) == 1)
              {
                v76 = 0.0;
                *(_QWORD *)&v77[0] = 0;
                v65 = *(_OWORD *)(v45 + 256);
                *(_OWORD *)((char *)v77 + 8) = *(_OWORD *)(v45 + 272);
                memset(v81, 0, sizeof(v81));
                v80 = 0u;
                v82 = 2;
                v73[0] = *(_QWORD *)(v45 + 232);
                *(_OWORD *)&v73[1] = *(_OWORD *)(v45 + 240);
                *(_OWORD *)&v73[3] = v65;
                swift_retain();
                CGRect.convert(to:transform:)();
                outlined destroy of CoordinateSpace((uint64_t)&v80);
                v94.origin.x = v76;
                *(_OWORD *)&v94.origin.y = v77[0];
                v94.size.height = *(CGFloat *)&v77[1];
                v92.x = a3;
                v92.y = a4;
                if (CGRectContainsPoint(v94, v92))
                {
                  v26 = v63;
LABEL_91:
                  swift_bridgeObjectRelease_n();
                  goto LABEL_98;
                }
                swift_release();
              }
              ++v64;
              if (v26 == v58)
              {
                swift_bridgeObjectRelease_n();
                v45 = 0;
                v26 = v63;
                goto LABEL_98;
              }
            }
          }
          __break(1u);
LABEL_96:
          swift_bridgeObjectRetain();
        }
LABEL_97:
        swift_bridgeObjectRelease_n();
        v45 = 0;
        goto LABEL_98;
      }
LABEL_83:
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
LABEL_35:
  swift_retain();
  ResponderNode.sequence.getter();
  swift_release();
  v24 = *(void (**)(_QWORD *__return_ptr, uint64_t *))v81;
  v25 = v81[16];
  v26 = MEMORY[0x1E0DEE9D8];
  v76 = MEMORY[0x1E0DEE9D8];
  v73[0] = v80;
  LOBYTE(v73[1]) = BYTE8(v80);
  swift_retain();
  swift_retain();
  if ((v25 & 1) == 0)
  {
    swift_retain();
    v24(v72, v73);
    swift_release();
    if (v72[0])
    {
      type metadata accessor for HoverResponder();
      do
      {
        if (swift_dynamicCastClass())
        {
          MEMORY[0x18D75CF58]();
          if (*(_QWORD *)((*(_QWORD *)&v76 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)&v76 & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          swift_release();
        }
        swift_retain();
        v24(v72, v73);
        swift_release();
      }
      while (v72[0]);
      v26 = *(_QWORD *)&v76;
    }
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v30 = closure #3 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(v23, v26);
  if (v23)
  {
    v29 = v30;
    goto LABEL_49;
  }
  v45 = 0;
  if (!v26)
    goto LABEL_83;
LABEL_98:
  specialized HoverEventDispatcher.dispatchNewAncestorsHoverCallbacks(oldHighestAncestor:newAncestors:point:)(v45, v26);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type [HoverResponder] and conformance [A](unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, a2, (uint64_t (*)(uint64_t))type metadata accessor for HoverResponder, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1870FC010()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1870FC034()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #7 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(CGSize **a1)
{
  uint64_t v1;

  return closure #7 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(a1, *(CGFloat *)(v1 + 16), *(CGFloat *)(v1 + 24));
}

uint64_t partial apply for closure #1 in HoverResponder.updatePhase(_:)()
{
  uint64_t v0;

  return closure #1 in HoverResponder.updatePhase(_:)(*(void (**)(BOOL))(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
}

unint64_t partial apply for closure #1 in closure #3 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #3 in HoverEventDispatcher.dispatchHoverCallbacks(oldResponder:newResponder:point:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

unint64_t lazy protocol witness table accessor for type HoverEvent and conformance HoverEvent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HoverEvent and conformance HoverEvent;
  if (!lazy protocol witness table cache variable for type HoverEvent and conformance HoverEvent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HoverEvent, &type metadata for HoverEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEvent and conformance HoverEvent);
  }
  return result;
}

void static DismissBehavior.interactive.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static DismissBehavior.destructive.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t Transaction.dismissBehavior.getter()
{
  return Transaction.subscript.getter();
}

uint64_t Transaction.dismissBehavior.setter()
{
  return Transaction.subscript.setter();
}

uint64_t (*Transaction.dismissBehavior.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;

  *a1 = v1;
  Transaction.subscript.getter();
  return Transaction.dismissBehavior.modify;
}

uint64_t Transaction.dismissBehavior.modify(uint64_t a1)
{
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a1 + 8);
  return Transaction.subscript.setter();
}

uint64_t sub_1870FC1A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = Transaction.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1870FC1F0()
{
  return Transaction.subscript.setter();
}

ValueMetadata *type metadata accessor for DismissBehavior()
{
  return &type metadata for DismissBehavior;
}

uint64_t storeEnumTagSinglePayload for DismissBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1870FC298 + 4 * byte_187C09695[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1870FC2CC + 4 * byte_187C09690[v4]))();
}

uint64_t sub_1870FC2CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870FC2D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1870FC2DCLL);
  return result;
}

uint64_t sub_1870FC2E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1870FC2F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1870FC2F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870FC2FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DismissBehavior.Role()
{
  return &type metadata for DismissBehavior.Role;
}

void *type metadata accessor for Transaction.DismissBehaviorKey()
{
  return &unk_1E1AB0A68;
}

unint64_t lazy protocol witness table accessor for type DismissBehavior.Role and conformance DismissBehavior.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DismissBehavior.Role and conformance DismissBehavior.Role;
  if (!lazy protocol witness table cache variable for type DismissBehavior.Role and conformance DismissBehavior.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DismissBehavior.Role, &type metadata for DismissBehavior.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DismissBehavior.Role and conformance DismissBehavior.Role);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SidebarStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1870FC3C0 + 4 * byte_187C09755[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1870FC3F4 + 4 * byte_187C09750[v4]))();
}

uint64_t sub_1870FC3F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870FC3FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1870FC404);
  return result;
}

uint64_t sub_1870FC410(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1870FC418);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1870FC41C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870FC424(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SidebarStatus()
{
  return &type metadata for SidebarStatus;
}

unint64_t lazy protocol witness table accessor for type SidebarStatus and conformance SidebarStatus()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SidebarStatus and conformance SidebarStatus;
  if (!lazy protocol witness table cache variable for type SidebarStatus and conformance SidebarStatus)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarStatus, &type metadata for SidebarStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarStatus and conformance SidebarStatus);
  }
  return result;
}

double static TableViewListCore.Configuration.sidebar(isInExpandedSplitView:)@<D0>(char a1@<W0>, _OWORD *a2@<X8>)
{
  char v3;
  __int128 v4;
  __int128 v5;
  double result;
  __int128 v7;
  _BOOL8 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[25];
  _OWORD v23[2];
  __int16 v24;

  v8 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1;
  else
    v3 = 2;
  memset(v23, 0, sizeof(v23));
  v24 = 1;
  OptionalEdgeInsets.init()();
  *(_QWORD *)&v17[0] = 2;
  outlined init with take of SectionInsetMode((uint64_t)v23, (uint64_t)v17 + 8);
  BYTE10(v18) = v3;
  *(_QWORD *)&v19 = v8;
  BYTE8(v19) = 0;
  *(_QWORD *)&v20 = v9;
  BYTE8(v20) = v10;
  *(_QWORD *)&v21 = v11;
  BYTE8(v21) = v12;
  *(_QWORD *)v22 = v13;
  v22[8] = v14;
  *(_QWORD *)&v22[16] = v15;
  v22[24] = v16;
  v4 = v21;
  a2[4] = v20;
  a2[5] = v4;
  a2[6] = *(_OWORD *)v22;
  *(_OWORD *)((char *)a2 + 105) = *(_OWORD *)&v22[9];
  v5 = v17[1];
  *a2 = v17[0];
  a2[1] = v5;
  result = *(double *)&v18;
  v7 = v19;
  a2[2] = v18;
  a2[3] = v7;
  return result;
}

void TableViewListCore.init(dataSource:selection:configuration:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TableViewListCore();
}

__n128 sub_1870FC614(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __n128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v5 = v1 + *(int *)(a1 + 52);
  type metadata accessor for Binding();
  v6 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, v2, v6);
  v7 = (_OWORD *)(v1 + *(int *)(a1 + 56));
  v7[4] = v13;
  v7[5] = v14;
  v7[6] = v15;
  *(_OWORD *)((char *)v7 + 105) = *(_OWORD *)(v3 + 105);
  *v7 = v9;
  v7[1] = v10;
  result = v11;
  v7[2] = v11;
  v7[3] = v12;
  return result;
}

uint64_t TableViewListCore.Configuration.TableViewConfiguration.sectionCornerRadius.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 42) == 1 || *(_QWORD *)v0 != 2)
    return 0;
  else
    return *MEMORY[0x1E0DC53D8];
}

uint64_t TableViewListCore.Configuration.TableViewConfiguration.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  Swift::UInt v7;
  Swift::UInt v8;
  Swift::UInt v10;
  Swift::UInt v11;
  Swift::UInt8 v12;

  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(unsigned __int8 *)(v0 + 40);
  v6 = *(unsigned __int8 *)(v0 + 41);
  v10 = *(unsigned __int8 *)(v0 + 42);
  v11 = *(_QWORD *)(v0 + 48);
  v12 = *(_BYTE *)(v0 + 56);
  Hasher._combine(_:)(*(_QWORD *)v0);
  if (v6 == 1)
  {
    if (v2 | v3 | v1 | v4 || v5)
      v7 = 13;
    else
      v7 = 3;
    Hasher._combine(_:)(v7);
    v8 = v10;
  }
  else
  {
    Hasher._combine(_:)(0x1FuLL);
    v8 = v10;
    if ((v5 & 1) == 0)
      EdgeInsets.hash(into:)();
  }
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  return OptionalEdgeInsets.hash(into:)();
}

uint64_t static TableViewListCore.Configuration.TableViewConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    goto LABEL_19;
  v2 = *(unsigned __int8 *)(a1 + 42);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(unsigned __int8 *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_BYTE *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_BYTE *)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 96);
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v14 = *(unsigned __int8 *)(a2 + 40);
  v15 = *(unsigned __int8 *)(a2 + 41);
  v16 = *(unsigned __int8 *)(a2 + 42);
  v17 = *(_QWORD *)(a2 + 48);
  v18 = *(unsigned __int8 *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 64);
  v38 = *(_BYTE *)(a2 + 72);
  v20 = *(_QWORD *)(a2 + 80);
  v37 = *(_BYTE *)(a2 + 88);
  v36 = *(_QWORD *)(a2 + 96);
  v35 = *(_BYTE *)(a2 + 104);
  v34 = *(_QWORD *)(a2 + 112);
  v21 = *(_BYTE *)(a2 + 120);
  v22 = *(_BYTE *)(a1 + 104);
  v23 = *(_QWORD *)(a1 + 112);
  v24 = *(_BYTE *)(a1 + 120);
  if (*(_BYTE *)(a1 + 41) == 1)
  {
    if (*(_QWORD *)(a1 + 24) | *(_QWORD *)(a1 + 16) | *(_QWORD *)(a1 + 8) | *(_QWORD *)(a1 + 32) || *(_BYTE *)(a1 + 40))
    {
      if ((v15 & 1) == 0 || !(v13 | v11 | v10 | v12) && !v14)
        goto LABEL_19;
    }
    else
    {
      v25 = 0;
      if (!v15 || v13 | v11 | v10 | v12 || v14)
        return v25 & 1;
    }
    if (v2 != v16)
    {
LABEL_19:
      v25 = 0;
      return v25 & 1;
    }
    goto LABEL_23;
  }
  if ((v15 & 1) != 0)
    goto LABEL_19;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v25 = 0;
    if ((v14 & 1) == 0 || v2 != v16)
      return v25 & 1;
    goto LABEL_23;
  }
  if ((v14 & 1) != 0)
    goto LABEL_19;
  v28 = v21;
  v29 = *(_QWORD *)(a1 + 96);
  v30 = *(_BYTE *)(a1 + 88);
  v31 = *(_QWORD *)(a1 + 80);
  v32 = *(_BYTE *)(a1 + 72);
  v33 = *(_QWORD *)(a1 + 64);
  v26 = static EdgeInsets.== infix(_:_:)();
  v25 = 0;
  if ((v26 & 1) != 0)
  {
    v5 = v33;
    v6 = v32;
    v7 = v31;
    v8 = v30;
    v9 = v29;
    v21 = v28;
    if (v2 == v16)
    {
LABEL_23:
      v25 = 0;
      if (v3 == v17 && ((v4 ^ v18) & 1) == 0)
      {
        v47 = v5;
        v48 = v6;
        v49 = v7;
        v50 = v8;
        v51 = v9;
        v52 = v22;
        v53 = v23;
        v54 = v24;
        v39 = v19;
        v40 = v38;
        v41 = v20;
        v42 = v37;
        v43 = v36;
        v44 = v35;
        v45 = v34;
        v46 = v21;
        v25 = MEMORY[0x18D7593E8](&v47, &v39);
      }
    }
  }
  return v25 & 1;
}

Swift::Int TableViewListCore.Configuration.TableViewConfiguration.hashValue.getter()
{
  Hasher.init(_seed:)();
  TableViewListCore.Configuration.TableViewConfiguration.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TableViewListCore<A, B>.Configuration.TableViewConfiguration()
{
  Hasher.init(_seed:)();
  TableViewListCore.Configuration.TableViewConfiguration.hash(into:)();
  return Hasher._finalize()();
}

double TableViewListCore.Configuration.init()@<D0>(_OWORD *a1@<X8>)
{
  char v2;
  __int128 v3;
  __int128 v4;
  double result;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[25];
  _OWORD v21[2];
  __int16 v22;

  memset(v21, 0, sizeof(v21));
  v22 = 256;
  v2 = static SemanticFeature.isEnabled.getter();
  OptionalEdgeInsets.init()();
  *(_QWORD *)&v15[0] = 0;
  outlined init with take of SectionInsetMode((uint64_t)v21, (uint64_t)v15 + 8);
  BYTE10(v16) = 0;
  *(_QWORD *)&v17 = 1;
  BYTE8(v17) = v2 & 1;
  *(_QWORD *)&v18 = v7;
  BYTE8(v18) = v8;
  *(_QWORD *)&v19 = v9;
  BYTE8(v19) = v10;
  *(_QWORD *)v20 = v11;
  v20[8] = v12;
  *(_QWORD *)&v20[16] = v13;
  v20[24] = v14;
  v3 = v19;
  a1[4] = v18;
  a1[5] = v3;
  a1[6] = *(_OWORD *)v20;
  *(_OWORD *)((char *)a1 + 105) = *(_OWORD *)&v20[9];
  v4 = v15[1];
  *a1 = v15[0];
  a1[1] = v4;
  result = *(double *)&v16;
  v6 = v17;
  a1[2] = v16;
  a1[3] = v6;
  return result;
}

double TableViewListCore.Configuration.init(insetMode:padding:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  double result;
  __int128 v15;
  _OWORD v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[25];

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = a2[2];
  v7 = *((_BYTE *)a2 + 24);
  v8 = a2[4];
  v9 = *((_BYTE *)a2 + 40);
  v10 = a2[6];
  v11 = *((_BYTE *)a2 + 56);
  *(_QWORD *)&v16[0] = 1;
  outlined init with take of SectionInsetMode(a1, (uint64_t)v16 + 8);
  BYTE10(v17) = 0;
  *(_QWORD *)&v18 = 1;
  BYTE8(v18) = 0;
  *(_QWORD *)&v19 = v4;
  BYTE8(v19) = v5;
  *(_QWORD *)&v20 = v6;
  BYTE8(v20) = v7;
  *(_QWORD *)v21 = v8;
  v21[8] = v9;
  *(_QWORD *)&v21[16] = v10;
  v21[24] = v11;
  v12 = v16[1];
  *a3 = v16[0];
  a3[1] = v12;
  v13 = v20;
  a3[4] = v19;
  a3[5] = v13;
  a3[6] = *(_OWORD *)v21;
  *(_OWORD *)((char *)a3 + 105) = *(_OWORD *)&v21[9];
  result = *(double *)&v17;
  v15 = v18;
  a3[2] = v17;
  a3[3] = v15;
  return result;
}

double static TableViewListCore.Configuration.inset(isInExpandedSplitView:)@<D0>(char a1@<W0>, _OWORD *a2@<X8>)
{
  char v3;
  __int128 v4;
  __int128 v5;
  double result;
  __int128 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  _OWORD v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[25];
  _OWORD v22[2];
  char v23;
  BOOL v24;

  if ((a1 & 1) != 0)
    v3 = 3;
  else
    v3 = 0;
  memset(v22, 0, sizeof(v22));
  v23 = a1;
  v24 = (a1 & 1) == 0;
  OptionalEdgeInsets.init()();
  *(_QWORD *)&v16[0] = 0;
  outlined init with take of SectionInsetMode((uint64_t)v22, (uint64_t)v16 + 8);
  BYTE10(v17) = v3;
  *(_QWORD *)&v18 = 1;
  BYTE8(v18) = 0;
  *(_QWORD *)&v19 = v8;
  BYTE8(v19) = v9;
  *(_QWORD *)&v20 = v10;
  BYTE8(v20) = v11;
  *(_QWORD *)v21 = v12;
  v21[8] = v13;
  *(_QWORD *)&v21[16] = v14;
  v21[24] = v15;
  v4 = v20;
  a2[4] = v19;
  a2[5] = v4;
  a2[6] = *(_OWORD *)v21;
  *(_OWORD *)((char *)a2 + 105) = *(_OWORD *)&v21[9];
  v5 = v16[1];
  *a2 = v16[0];
  a2[1] = v5;
  result = *(double *)&v17;
  v7 = v18;
  a2[2] = v17;
  a2[3] = v7;
  return result;
}

void static TableViewListCore._makeView(view:inputs:)(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  __int128 v17;
  __int128 v18;
  char v19;
  double v20;
  char *v21;
  uint64_t v22;
  char *v23;
  int v24;
  _DWORD v25[16];
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43;

  v30 = a5;
  v31 = a6;
  v28 = a7;
  v43 = *MEMORY[0x1E0C80C00];
  v27 = type metadata accessor for ListScrollable.DataSourceProvider(0, a3, a5, a4);
  MEMORY[0x1E0C80A78](v27, v11);
  v26 = (char *)v25 - v12;
  v13 = (int *)type metadata accessor for BridgedListState(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (double *)((char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = *a1;
  v17 = a2[3];
  v39 = a2[2];
  v40 = v17;
  v41 = a2[4];
  v42 = *((_DWORD *)a2 + 20);
  v18 = a2[1];
  v37 = *a2;
  v38 = v18;
  v19 = static SemanticFeature.isEnabled.getter();
  v20 = 15.0;
  if ((v19 & 1) != 0)
    v20 = 16.0;
  *v16 = v20;
  v21 = (char *)v16 + v13[5];
  v22 = type metadata accessor for BridgedListState.ScrollTarget(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v23 = (char *)v16 + v13[6];
  *((_OWORD *)v23 + 5) = 0u;
  *((_OWORD *)v23 + 6) = 0u;
  *((_OWORD *)v23 + 3) = 0u;
  *((_OWORD *)v23 + 4) = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  *((_OWORD *)v23 + 2) = 0u;
  *(_OWORD *)v23 = 0u;
  v23[112] = 1;
  *(_DWORD *)((char *)v16 + v13[7]) = 0;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for External<BridgedListState>, type metadata accessor for BridgedListState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<BridgedListState> and conformance External<A>, (uint64_t)&lazy cache variable for type metadata for External<BridgedListState>, (uint64_t)type metadata accessor for BridgedListState, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v24 = Attribute.init<A>(body:value:flags:update:)();
  v25[13] = v24;
  outlined destroy of BridgedListState((uint64_t)v16);
  v32 = v24;
  swift_unknownObjectWeakInit();
  v33 = a3;
  v34 = a4;
  v35 = v30;
  v36 = v31;
  type metadata accessor for TableViewListCore.UpdateBridgedState();
}

void sub_1870FCFE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v4[12] = a1;
  v4[13] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableViewListCore<A, B>.UpdateBridgedState, a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<UInt32>, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 384, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_8, v1 + 336, a1, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1 + 384, a1);
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 480);
  static AGAttributeFlags.transactional.getter();
  AGGraphGetFlags();
  AGGraphSetFlags();
  swift_unknownObjectWeakInit();
  v4[28] = v6;
  v4[29] = v5;
  v4[30] = v2;
  v4[31] = v3;
  type metadata accessor for TableViewListCore.ScrollViewProvider();
}

void sub_1870FD0C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[8] = a1;
  v4[9] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableViewListCore<A, B>.ScrollViewProvider, a1);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<UIScrollView?>, (uint64_t (*)(uint64_t))type metadata accessor for UIScrollView?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 384, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_7, v1 + 304, a1, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  *(_QWORD *)(v1 + 24) = v2;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1 + 384, a1);
  *(_DWORD *)(v1 + 100) = *(_DWORD *)(v1 + 480);
  *(_QWORD *)(v1 + 56) = type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  type metadata accessor for [Scrollable](0, (unint64_t *)&lazy cache variable for type metadata for External<Scrollable>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<Scrollable> and conformance External<A>();
  *(_DWORD *)(v1 + 96) = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v1 + 384) = *(_DWORD *)(v1 + 92);
  v4[28] = v5;
  v4[29] = v3;
  v9 = *(_QWORD *)(v1 + 120);
  v4[30] = *(_QWORD *)(v1 + 112);
  v4[31] = v9;
  type metadata accessor for TableViewListCore();
}

void sub_1870FD1E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  int v20;

  *(_QWORD *)(v9 + 40) = type metadata accessor for _GraphValue();
  v17 = _GraphValue.value.getter();
  v18 = *(_OWORD *)(v9 + 624);
  *(_OWORD *)(v13 + 256) = *(_OWORD *)(v9 + 608);
  *(_OWORD *)(v13 + 272) = v18;
  *(_OWORD *)(v13 + 288) = *(_OWORD *)(v9 + 640);
  *(_DWORD *)(v9 + 560) = *(_DWORD *)(v16 - 112);
  v19 = *(_OWORD *)(v9 + 592);
  *(_OWORD *)(v13 + 224) = *(_OWORD *)(v9 + 576);
  *(_OWORD *)(v13 + 240) = v19;
  swift_getKeyPath();
  v20 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_QWORD *)(v9 + 8) = &a9;
  *(_DWORD *)(v9 + 384) = v17;
  *(_DWORD *)(v9 + 388) = *(_DWORD *)(v9 + 36);
  *(_DWORD *)(v9 + 392) = v14;
  *(_DWORD *)(v9 + 396) = v20;
  *(_QWORD *)(v13 + 224) = v15;
  *(_QWORD *)(v13 + 232) = v10;
  *(_QWORD *)(v9 + 104) = v10;
  *(_QWORD *)(v13 + 240) = v12;
  *(_QWORD *)(v13 + 248) = v11;
  type metadata accessor for ListRepresentable();
}

void sub_1870FD284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  type metadata accessor for StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>();
  v4[2] = type metadata accessor for ModifiedContent();
  v4[28] = v5;
  v4[29] = v1;
  *(_QWORD *)(v0 + 16) = v5;
  v4[30] = v3;
  v4[31] = v2;
  type metadata accessor for TableViewListCore.MakeRepresentable();
}

void sub_1870FD2C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  __int128 v14;
  __int128 v15;
  int v16;
  int v17;

  *(_QWORD *)(v4 + 24) = a1;
  *(_QWORD *)(v4 + 32) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableViewListCore<A, B>.MakeRepresentable, a1);
  v8 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 384, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, v1 + 256, a1, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 480);
  v10 = *(_OWORD *)(v1 + 608);
  v11 = *(_OWORD *)(v1 + 624);
  *(_OWORD *)(v4 + 256) = v10;
  *(_OWORD *)(v4 + 272) = v11;
  v12 = *(_OWORD *)(v1 + 640);
  *(_OWORD *)(v4 + 288) = v12;
  v13 = *(_DWORD *)(v6 - 112);
  *(_DWORD *)(v1 + 560) = v13;
  v14 = *(_OWORD *)(v1 + 576);
  v15 = *(_OWORD *)(v1 + 592);
  *(_OWORD *)(v4 + 224) = v14;
  *(_OWORD *)(v4 + 240) = v15;
  *(_QWORD *)(v1 + 24) = v1 + 528;
  *(_OWORD *)(v4 + 160) = v10;
  *(_OWORD *)(v4 + 176) = v11;
  *(_OWORD *)(v4 + 192) = v12;
  *(_DWORD *)(v1 + 464) = v13;
  *(_OWORD *)(v4 + 128) = v14;
  *(_OWORD *)(v4 + 144) = v15;
  outlined retain of _ViewInputs(v6 - 192);
  v16 = _ViewInputs.environment.getter();
  v17 = *(_DWORD *)(v1 + 52);
  *(_DWORD *)(v1 + 136) = v16;
  *(_DWORD *)(v1 + 140) = v17;
  *(_QWORD *)(v4 + 128) = v5;
  *(_QWORD *)(v4 + 136) = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v4 + 144) = v3;
  *(_QWORD *)(v4 + 152) = v2;
  type metadata accessor for TableViewListCore.EnvironmentTransform();
}

uint64_t sub_1870FD3A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  _QWORD *v39;
  _BYTE v40[96];

  *(_QWORD *)(v1 + 240) = a1;
  *(_QWORD *)(v1 + 248) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableViewListCore<A, B>.EnvironmentTransform, a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<EnvironmentValues>, MEMORY[0x1E0CE3E78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 136, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), v1 + 224, a1, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  _ViewInputs.environment.setter();
  _ViewInputs.scrollable.setter();
  PreferenceKeys.remove<A>(_:)();
  _GraphValue.init(_:)();
  v10 = *(_QWORD *)(v4 + 240);
  v11 = *(_DWORD *)(v1 + 488);
  v12 = *(_DWORD *)(v1 + 560);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(v4 + 224);
  *(_QWORD *)(v4 + 144) = v10;
  *(_OWORD *)(v4 + 152) = *(_OWORD *)(v4 + 248);
  *(_OWORD *)(v4 + 168) = *(_OWORD *)(v1 + 520);
  *(_OWORD *)(v4 + 184) = *(_OWORD *)(v1 + 536);
  *(_QWORD *)(v4 + 200) = *(_QWORD *)(v1 + 552);
  *(_DWORD *)(v1 + 392) = v11;
  *(_DWORD *)(v1 + 464) = v12;
  v13 = lazy protocol witness table accessor for type StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v4 + 112) = &protocol witness table for ListRepresentable<A, B>;
  *(_QWORD *)(v4 + 120) = v13;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v1 + 368);
  static View.makeDebuggableView(view:inputs:)();
  v14 = AGCreateWeakAttribute();
  v15 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 192) = v15;
  *(_QWORD *)(v1 + 200) = v5;
  v16 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 208) = v16;
  *(_QWORD *)(v1 + 216) = v3;
  *(_DWORD *)(v1 + 384) = *(_DWORD *)(v1 + 92);
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v17 = AGCreateWeakAttribute();
  v18 = *(uint64_t **)(v1 + 64);
  *v18 = v17;
  swift_storeEnumTagMultiPayload();
  v19 = AGCreateWeakAttribute();
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v4 + 136) = *(_QWORD *)(v1 + 144);
  _ViewOutputs.subscript.getter();
  v20 = AGCreateWeakAttribute();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<UInt32>, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = 0;
  v23 = type metadata accessor for ListScrollable(0, v15, v16, v22);
  *(_QWORD *)(v4 + 152) = v23;
  *(_QWORD *)(v4 + 160) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListScrollable<A>, v23);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v1 + 384));
  ListScrollable.init(state:dataSourceProvider:scrollView:children:lastUpdateSeed:)(v14, (uint64_t)v18, v19, v20, v21, v15, v16, boxed_opaque_existential_1);
  AGGraphSetValue();
  __swift_destroy_boxed_opaque_existential_1(v1 + 384);
  v25 = *(_QWORD *)(v1 + 624);
  *(_QWORD *)(v1 + 160) = v25;
  v26 = *(_DWORD *)(v6 - 136);
  *(_DWORD *)(v1 + 168) = v26;
  *(_QWORD *)(v4 + 128) = v25;
  *(_DWORD *)(v1 + 392) = v26;
  v27 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(v1 + 160);
  *(_DWORD *)(v1 + 392) = *(_DWORD *)(v1 + 168);
  v28 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((v28 & 1) != 0 || (v27 & 1) != 0)
  {
    UnaryScrollablePreferenceProvider.init(scrollable:)();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [Scrollable](0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider();
    v30 = Attribute.init<A>(body:value:flags:update:)();
    *(_BYTE *)(v1 + 384) = 0;
    v28 = _ViewOutputs.subscript.setter();
    if ((v27 & 1) != 0)
    {
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
      v31 = Dictionary.init(minimumCapacity:)();
      *(_BYTE *)(v1 + 384) = 0;
      *(_DWORD *)(v1 + 388) = v30;
      *(_QWORD *)(v4 + 136) = v31;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<AccessibilityScrollableModifier> and conformance External<A>, (uint64_t)&lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      _GraphValue.init(_:)();
      v32 = *(_DWORD *)(v1 + 132);
      v33 = *(_QWORD *)(v1 + 136);
      v34 = *(_QWORD *)(v1 + 144);
      *(_QWORD *)(v4 + 128) = *(_QWORD *)(v1 + 160);
      *(_DWORD *)(v1 + 392) = *(_DWORD *)(v1 + 168);
      swift_bridgeObjectRetain();
      v35 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
      if ((v35 & 1) != 0)
        specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v32, (__int128 *)(v6 - 192), v33, v34, 0);
      swift_bridgeObjectRelease();
      *(_BYTE *)(v1 + 384) = (v35 & 1) == 0;
      v28 = _ViewOutputs.subscript.setter();
    }
  }
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(v1 + 160);
  *(_DWORD *)(v1 + 392) = *(_DWORD *)(v1 + 168);
  MEMORY[0x1E0C80A78](v28, v29);
  v36 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)&v40[-48] = v15;
  *(_QWORD *)&v40[-40] = v36;
  v37 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)&v40[-32] = v16;
  *(_QWORD *)&v40[-24] = v37;
  *(_DWORD *)&v40[-16] = *(_DWORD *)(v1 + 100);
  outlined retain of [Text.Modifier](v1 + 160);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v39 = *(_QWORD **)(v1 + 80);
  *v39 = *(_QWORD *)(v1 + 136);
  v39[1] = *(_QWORD *)(v1 + 144);
  return result;
}

void closure #1 in static TableViewListCore._makeView(view:inputs:)()
{
  type metadata accessor for TableViewListCore();
}

uint64_t sub_1870FDA10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v6[2] = a1;
  v7 = v1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v1, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

void implicit closure #2 in static TableViewListCore._makeView(view:inputs:)()
{
  type metadata accessor for TableViewListCore.ScrollViewPreferenceProvider();
}

uint64_t sub_1870FDAAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  _QWORD v6[5];
  unsigned int v7;

  v6[2] = a1;
  v6[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableViewListCore<A, B>.ScrollViewPreferenceProvider, a1);
  type metadata accessor for Attribute<[ContentScrollViewBox]>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v5, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v6, a1, MEMORY[0x1E0DEDCE8], v2, MEMORY[0x1E0DEDD18], v3);
  return v7;
}

void TableViewListCore.ScrollViewProvider.value.getter()
{
  JUMPOUT(0x18D760234);
}

void protocol witness for Rule.value.getter in conformance TableViewListCore<A, B>.ScrollViewProvider()
{
  TableViewListCore.ScrollViewProvider.value.getter();
}

uint64_t sub_1870FDB54(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t TableViewListCore.ScrollViewPreferenceProvider.value.getter()
{
  uint64_t v0;
  _BYTE v2[48];

  type metadata accessor for UIScrollView?();
  if (!*(_QWORD *)AGGraphGetValue())
    return MEMORY[0x1E0DEE9D8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentScrollViewBox>, (uint64_t)&type metadata for ContentScrollViewBox, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_187BF9830;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  memset(&v2[16], 0, 25);
  outlined init with take of ContentScrollViewBox((uint64_t)v2, v0 + 32);
  return v0;
}

void TableViewListCore.MakeRepresentable.core.getter()
{
  type metadata accessor for TableViewListCore();
}

uint64_t sub_1870FDC70(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

uint64_t protocol witness for Rule.value.getter in conformance TableViewListCore<A, B>.ScrollViewPreferenceProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = TableViewListCore.ScrollViewPreferenceProvider.value.getter();
  *a1 = result;
  return result;
}

void TableViewListCore.MakeRepresentable.value.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[58];

  v17[21] = a2;
  v17[19] = a1;
  v17[17] = a7;
  v17[1] = type metadata accessor for Binding();
  v11 = type metadata accessor for Optional();
  v17[9] = *(_QWORD *)(v11 - 8);
  v17[10] = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v17[20] = (char *)v17 - v13;
  v17[8] = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17[18] = (char *)v17 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[40] = a3;
  v17[41] = a4;
  v17[42] = a5;
  v17[43] = a6;
  type metadata accessor for ListRepresentable();
}

void sub_1870FDDC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9[12] = *(_QWORD *)(a1 - 8);
  v9[13] = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  v9[11] = (char *)&a9 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  *v10 = v13;
  v10[1] = v12;
  v10[2] = v11;
  v10[3] = v14;
  type metadata accessor for TableViewListCore();
}

void sub_1870FDE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9[4] = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9[7] = (char *)&a9 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v9[6] = (char *)&a9 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v9[5] = (char *)&a9 - v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v23 = type metadata accessor for Optional();
  v9[2] = *(_QWORD *)(v23 - 8);
  v9[3] = v23;
  MEMORY[0x1E0C80A78](v23, v24);
  v9[15] = v13;
  v9[16] = v12;
  v9[14] = v11;
  v9[22] = v10;
  TableViewListCore.MakeRepresentable.core.getter();
}

void sub_1870FDF28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v7 = v1 + *(int *)(v6 + 52);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v7, 1, v3))
  {
    v8 = *(void (**)(uint64_t, uint64_t))(v0[4] + 8);
    v0[4] = v8;
    v8(v1, v6);
    v9 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v7, v3);
    v10 = *(void (**)(uint64_t, uint64_t))(v0[4] + 8);
    v0[4] = v10;
    v10(v1, v6);
    MEMORY[0x18D75B9C8](v3);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v3);
    v9 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0[14] - 8) + 56))(v2, v9, 1, v0[14]);
  (*(void (**)(uint64_t, _QWORD))(v0[2] + 8))(v2, v0[3]);
  TableViewListCore.MakeRepresentable.core.getter();
}

void sub_1870FE014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 64) + 16))(*(_QWORD *)(v0 + 144), v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v0 + 32))(v1, v3);
  TableViewListCore.MakeRepresentable.core.getter();
}

void sub_1870FE060()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;

  (*(void (**)(_QWORD, uint64_t, _QWORD))(v0[9] + 16))(v0[20], v1 + *(int *)(v3 + 52), v0[10]);
  v2(v1, v3);
  TableViewListCore.MakeRepresentable.core.getter();
}

void sub_1870FE0A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v6 = (_OWORD *)(v1 + *(int *)(v4 + 56));
  v7 = v6[5];
  v8 = (_OWORD *)(v5 - 224);
  v8[4] = v6[4];
  v8[5] = v7;
  v8[6] = v6[6];
  *(_OWORD *)((char *)v8 + 105) = *(_OWORD *)((char *)v6 + 105);
  v9 = v6[1];
  *v8 = *v6;
  v8[1] = v9;
  v10 = v6[3];
  v8[2] = v6[2];
  v8[3] = v10;
  v3(v1, v4);
  v11 = *(_OWORD *)(v5 - 144);
  *(_OWORD *)(v0 + 256) = *(_OWORD *)(v5 - 160);
  *(_OWORD *)(v0 + 272) = v11;
  *(_OWORD *)(v0 + 288) = *(_OWORD *)(v5 - 128);
  *(_OWORD *)(v0 + 297) = *(_OWORD *)(v5 - 119);
  v12 = *(_OWORD *)(v5 - 208);
  *(_OWORD *)(v0 + 192) = *(_OWORD *)(v5 - 224);
  *(_OWORD *)(v0 + 208) = v12;
  v13 = *(_OWORD *)(v5 - 176);
  *(_OWORD *)(v0 + 224) = *(_OWORD *)(v5 - 192);
  *(_OWORD *)(v0 + 240) = v13;
  AGCreateWeakAttribute();
  AGCreateWeakAttribute();
  AGGraphGetValue();
  ListRepresentable.init(dataSource:selection:configuration:updateBridgedState:scrollViewProvider:stackBehavior:)(*(_QWORD *)(v0 + 144), v2, *(_QWORD *)(v0 + 88));
}

uint64_t sub_1870FE184()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = static Edge.Set.all.getter();
  *(_QWORD *)(v0 + 192) = 1;
  *(_BYTE *)(v0 + 200) = v2;
  v3 = type metadata accessor for StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>();
  v4 = *(_QWORD *)(v0 + 104);
  MEMORY[0x18D75B4AC](v0 + 192, v4, v3, &protocol witness table for ListRepresentable<A, B>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 96) + 8))(v1, v4);
}

void ListRepresentable.init(dataSource:selection:configuration:updateBridgedState:scrollViewProvider:stackBehavior:)(uint64_t a1@<X0>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for ListRepresentable();
}

__n128 sub_1870FE294(int *a1)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __n128 result;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __n128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[25];

  v8 = v3 + a1[13];
  type metadata accessor for Binding();
  v9 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, v6, v9);
  v10 = (_OWORD *)(v3 + a1[14]);
  v10[4] = v17;
  v10[5] = v18;
  v10[6] = *(_OWORD *)v19;
  *(_OWORD *)((char *)v10 + 105) = *(_OWORD *)&v19[9];
  *v10 = v13;
  v10[1] = v14;
  result = v15;
  v10[2] = v15;
  v10[3] = v16;
  *(_QWORD *)(v3 + a1[15]) = v5;
  *(_QWORD *)(v3 + a1[16]) = v4;
  v12 = v3 + a1[17];
  *(_QWORD *)v12 = v2;
  *(_BYTE *)(v12 + 8) = v1;
  *(_BYTE *)(v12 + 9) = HIBYTE(v1) & 1;
  return result;
}

uint64_t TableViewListCore.UpdateBridgedState.bridgedState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;

  type metadata accessor for BridgedListState(0);
  Value = AGGraphGetValue();
  return outlined init with copy of BridgedListState(Value, a1);
}

void protocol witness for static Rule.initialValue.getter in conformance TableViewListCore<A, B>.MakeRepresentable()
{
  type metadata accessor for ListRepresentable();
}

uint64_t sub_1870FE3B0()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>();
  v1 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 1, 1, v1);
}

void protocol witness for Rule.value.getter in conformance TableViewListCore<A, B>.MakeRepresentable(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  TableViewListCore.MakeRepresentable.value.getter(*v2, v2[1], a1[2], a1[3], a1[4], a1[5], a2);
}

_DWORD *TableViewListCore.UpdateBridgedState.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  _DWORD *result;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = type metadata accessor for BridgedListState(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v13 - v7;
  if (!AGGraphGetOutputValue())
    goto LABEL_4;
  TableViewListCore.UpdateBridgedState.bridgedState.getter((uint64_t)v8);
  v9 = *(_DWORD *)&v8[*(int *)(v1 + 28)];
  outlined destroy of BridgedListState((uint64_t)v8);
  result = (_DWORD *)AGGraphGetOutputValue();
  if (!result)
  {
    __break(1u);
    return result;
  }
  if (v9 != *result)
  {
LABEL_4:
    v11 = AGCreateWeakAttribute();
    AGGraphClearUpdate();
    closure #1 in TableViewListCore.UpdateBridgedState.updateValue()(v0, v11, &v14);
    AGGraphSetUpdate();
    TableViewListCore.UpdateBridgedState.bridgedState.getter((uint64_t)v4);
    v12 = *(_DWORD *)&v4[*(int *)(v1 + 28)];
    outlined destroy of BridgedListState((uint64_t)v4);
    v13 = v12;
    return (_DWORD *)AGGraphSetOutputValue();
  }
  return result;
}

void closure #1 in TableViewListCore.UpdateBridgedState.updateValue()(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v5;
  void *v6;

  v5 = MEMORY[0x18D760234](a1 + 8);
  v6 = (void *)v5;
  if (v5)
  {
    *(_QWORD *)(v5 + OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_bridgedState) = a2;
    UpdateCoalescingTableView.updateContent()();

  }
  *a3 = v6 == 0;
}

uint64_t TableViewListCore.EnvironmentTransform.value.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t Value;
  uint64_t v7;
  _QWORD v9[2];

  v2 = type metadata accessor for BridgedListState(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (_QWORD *)((char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  ScrollBehaviorModifier.ChildEnvironment.environment.getter(a1);
  Value = AGGraphGetValue();
  outlined init with copy of BridgedListState(Value, (uint64_t)v5);
  v7 = *v5;
  outlined destroy of BridgedListState((uint64_t)v5);
  v9[1] = v7;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListMarginKey>, (uint64_t)&type metadata for ListMarginKey, (uint64_t)&protocol witness table for ListMarginKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListMarginKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListMarginKey>, (uint64_t)&type metadata for ListMarginKey, (uint64_t)&protocol witness table for ListMarginKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (a1[1])
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance TableViewListCore<A, B>.EnvironmentTransform@<X0>(_QWORD *a1@<X8>)
{
  return TableViewListCore.EnvironmentTransform.value.getter(a1);
}

void protocol witness for static View._makeView(view:inputs:) in conformance TableViewListCore<A, B>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  static TableViewListCore._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance TableViewListCore<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableViewListCore<A, B>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TableViewListCore<A, B>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableViewListCore<A, B>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance TableViewListCore<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableViewListCore<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

void ListRepresentable.makeCoordinator()()
{
  type metadata accessor for UITableViewListCoordinator();
}

void sub_1870FE888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = *(int *)(v11 + 56);
  v14 = v12 + *(int *)(v11 + 52);
  a9 = 0;
  a10 = 0;
  a11 = 0;
  specialized UITableViewListCoordinator.__allocating_init(dataSource:selection:transaction:editMode:sidebarStatus:)(v12, v14, 1, &a9, *(unsigned __int8 *)(v12 + v13 + 42));
}

void ListRepresentable.makeViewProvider(context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;

  v46 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v45 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[2];
  v9 = v5[3];
  v47 = *((unsigned __int8 *)v5 + 32);
  v10 = v5[5];
  v12 = *(int *)(v11 + 56);
  v48 = v2;
  v44 = v2 + v12;
  v13 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UpdateCoalescingTableView()), sel_initWithFrame_style_, *(_QWORD *)(v2 + v12), 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v13, sel_setDataSource_, v10);
  objc_msgSend(v13, sel_setDelegate_, v10);
  objc_msgSend(v13, sel_setEstimatedRowHeight_, *MEMORY[0x1E0DC53D8]);
  objc_msgSend(v13, sel_setSeparatorInsetReference_, 1);
  swift_unknownObjectWeakAssign();
  v50 = v6;
  v51 = v7;
  v52 = v8;
  v53 = v9;
  v54 = v47;
  v55 = v10;
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListRepresentable<A, B>, a2);
  v43 = a2;
  v16 = type metadata accessor for PlatformViewRepresentableContext(0, a2, v14, v15);
  specialized ReferenceFileDocumentConfiguration.document.getter();
  v17 = swift_retain();
  UITableViewListCoordinator.recordInitialTransactionIfNeeded(_:)(v17);
  swift_release();
  v50 = v6;
  v51 = v7;
  v52 = v8;
  v53 = v9;
  v54 = v47;
  v55 = v10;
  PlatformViewRepresentableContext.environment.getter(v16, v18, v49);
  if (v49[1])
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowSpacing>, (uint64_t)&type metadata for ListRowSpacing, (uint64_t)&protocol witness table for ListRowSpacing, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowSpacing>, (uint64_t)&type metadata for ListRowSpacing, (uint64_t)&protocol witness table for ListRowSpacing);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowSpacing>, (uint64_t)&type metadata for ListRowSpacing, (uint64_t)&protocol witness table for ListRowSpacing, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowSpacing>, (uint64_t)&type metadata for ListRowSpacing, (uint64_t)&protocol witness table for ListRowSpacing);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v19 = v51;
  v20 = &v13[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_rowSpacing];
  *(_QWORD *)v20 = v50;
  v20[8] = v19;
  v21 = v13;
  v25 = UITableViewListCoordinator.dragAndDropController.getter((uint64_t)v21, v22, v23, v24);
  objc_msgSend(v21, sel_setDragDelegate_, v25);

  v30 = UITableViewListCoordinator.dragAndDropController.getter(v26, v27, v28, v29);
  objc_msgSend(v21, sel_setDropDelegate_, v30);

  v31 = v45;
  v32 = *(unsigned __int8 *)(v44 + 42);
  v33 = v46;
  v34 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v48, v43);
  if (v32 != 1)
    v32 = v31[*(int *)(v34 + 56) + 42] == 2;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v31, v34);
  v35 = v21[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_isSidebarStyle];
  v21[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_isSidebarStyle] = v32;
  if (v32 != v35)
  {
    v36 = OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_needsUpdateAlignmentInsets;
    v21[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_needsUpdateAlignmentInsets] = 1;
    v37 = objc_msgSend(v21, sel__viewControllerForAncestor);
    if (v37)
    {
      v38 = v37;
      v39 = objc_msgSend(v37, sel_navigationController);

      if (v39)
      {

        v21[v36] = 0;
        objc_msgSend(v21, sel__notifyAlignedContentMarginChanged);
      }
    }
  }
  type metadata accessor for ListTableViewCell();
  objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_classForCoder);
  v40 = *(_QWORD *)(v34 + 24);
  v41 = *(_QWORD *)(v34 + 32);
  v42 = *(_QWORD *)(v34 + 40);
  v50 = *(_QWORD *)(v34 + 16);
  v51 = v40;
  v52 = v41;
  v53 = v42;
  type metadata accessor for UITableViewListCoordinator();
}

void *sub_1870FED20()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t Attribute;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v7 = static UITableViewListCoordinator.cellReuseIdentifier.getter();
  v8 = (void *)MEMORY[0x18D75CC88](v7);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_registerClass_forCellReuseIdentifier_, v0, v8);

  type metadata accessor for ListTableViewHeaderFooter();
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_classForCoder);
  v10 = static UITableViewListCoordinator.headerReuseIdentifier.getter();
  v11 = (void *)MEMORY[0x18D75CC88](v10);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_registerClass_forHeaderFooterViewReuseIdentifier_, v9, v11);

  Attribute = AGWeakAttributeGetAttribute();
  v14 = *MEMORY[0x1E0CFED28];
  if ((_DWORD)Attribute != *MEMORY[0x1E0CFED28])
  {
    MEMORY[0x1E0C80A78](Attribute, v13);
    *(_QWORD *)(v6 - 128) = v2;
    *(_QWORD *)(v6 - 120) = v3;
    *(_QWORD *)(v6 - 112) = v4;
    *(_QWORD *)(v6 - 104) = v5;
    type metadata accessor for TableViewListCore.UpdateBridgedState();
  }
  v15 = AGWeakAttributeGetAttribute();
  if ((_DWORD)v15 != v14)
  {
    MEMORY[0x1E0C80A78](v15, v16);
    *(_QWORD *)(v6 - 128) = v2;
    *(_QWORD *)(v6 - 120) = v3;
    *(_QWORD *)(v6 - 112) = v4;
    *(_QWORD *)(v6 - 104) = v5;
    type metadata accessor for TableViewListCore.ScrollViewProvider();
  }
  return v1;
}

void ListRepresentable.updateViewProvider(_:context:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[10];
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[38];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[11];

  v4 = v3;
  v35 = a1;
  v7 = *(_QWORD *)(a3 + 16);
  v28[5] = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v28[4] = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 32);
  v12 = type metadata accessor for ShadowListDataSource(0, v7, v10, v11);
  v28[6] = *(_QWORD *)(v12 - 8);
  v28[7] = v12;
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v28[3] = (char *)v28 - v15;
  v16 = *a2;
  v17 = a2[2];
  v18 = a2[3];
  v19 = *((unsigned __int8 *)a2 + 32);
  v20 = a2[5];
  v33 = a2[1];
  v34 = v16;
  *(_QWORD *)&v37 = v16;
  *((_QWORD *)&v37 + 1) = v33;
  v31 = v18;
  v32 = v17;
  *(_QWORD *)&v38 = v17;
  *((_QWORD *)&v38 + 1) = v18;
  v30 = v19;
  LOBYTE(v39) = v19;
  *((_QWORD *)&v39 + 1) = v20;
  v21 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListRepresentable<A, B>, a3, v14);
  v29 = type metadata accessor for PlatformViewRepresentableContext(0, a3, v21, v22);
  PlatformViewRepresentableContext.environment.getter(v29, v23, v36);
  v28[1] = v36[0];
  v24 = (__int128 *)(v4 + *(int *)(a3 + 56));
  v25 = v24[5];
  v41 = v24[4];
  v42 = v25;
  v43[0] = v24[6];
  *(_OWORD *)((char *)v43 + 9) = *(__int128 *)((char *)v24 + 105);
  v26 = v24[1];
  v37 = *v24;
  v38 = v26;
  v27 = v24[3];
  v39 = v24[2];
  v40 = v27;
  v28[8] = v7;
  v28[2] = v10;
  UpdateCoalescingTableView.applyValues<A, B>(from:)();
}

void sub_1870FF090()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  char v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v0 + 72) = v3;
  v6 = *(int *)(v3 + 52);
  v7 = v5;
  *(_QWORD *)(v0 + 128) = v1;
  v8 = v1 + v6;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x78);
  swift_beginAccess();
  type metadata accessor for Binding();
  v11 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v10, v8, v11);
  swift_endAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>, (uint64_t)&type metadata for EditModeKey, (uint64_t)&protocol witness table for EditModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>, (uint64_t)&type metadata for EditModeKey, (uint64_t)&protocol witness table for EditModeKey);
  swift_retain_n();
  if (v7)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v12 = *(_BYTE *)(v0 + 464);
  v13 = (char *)v2 + *(_QWORD *)((*v9 & *v2) + 0x80);
  v14 = *(_QWORD *)v13;
  v15 = *((_QWORD *)v13 + 1);
  *(_OWORD *)v13 = *(_OWORD *)(v0 + 448);
  v13[16] = v12;
  v16 = outlined consume of Binding<NavigationSplitViewColumn>?(v14, v15);
  *((_BYTE *)v2 + *(_QWORD *)((*v9 & *v2) + 0x90)) = *(_BYTE *)(v4 + 42);
  UITableViewListCoordinator.dragAndDropController.getter(v16, v17, v18, v19);
  v20 = *(_QWORD *)(v0 + 32);
  v21 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 40) + 16))(v20, *(_QWORD *)(v0 + 128), v21);
  ShadowListDataSource.init(_:)(v20, v21);
}

uint64_t sub_1870FF28C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v8 = (char *)v1 + *(_QWORD *)((*v7 & *v1) + 0x60);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(v0 + 48) + 40))(v8, v4, *(_QWORD *)(v0 + 56));
  swift_endAccess();

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>, (uint64_t)&type metadata for RefreshAction.Key, (uint64_t)&protocol witness table for RefreshAction.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>, (uint64_t)&type metadata for RefreshAction.Key, (uint64_t)&protocol witness table for RefreshAction.Key);
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v9 = *(_QWORD *)(v0 + 448);
  v10 = *(_QWORD *)(v0 + 456);
  v11 = *(_QWORD *)(v0 + 464);
  v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v12;
  v13[3] = v9;
  v13[4] = v10;
  v13[5] = v11;
  swift_retain();
  outlined copy of AppIntentExecutor?(v9);
  static Update.enqueueAction(_:)();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v9);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>, (uint64_t)&type metadata for EnvironmentValues.SafeAreaTransitionStateKey, (uint64_t)&protocol witness table for EnvironmentValues.SafeAreaTransitionStateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>, (uint64_t)&type metadata for EnvironmentValues.SafeAreaTransitionStateKey, (uint64_t)&protocol witness table for EnvironmentValues.SafeAreaTransitionStateKey);
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release();
  v14 = MEMORY[0x18D760234](v0 + 448);
  v15 = *(_QWORD *)(v0 + 456);
  outlined destroy of weak FallbackResponderProvider?(v0 + 448);
  swift_release();
  swift_release();
  v16 = *(char **)(v0 + 136);
  if (v14)
  {
    v17 = (uint64_t *)&v16[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_safeAreaTransitionState];
    *v17 = v14;
    v17[1] = v15;
    swift_unknownObjectRelease();
  }
  v18 = v6 + *(int *)(*(_QWORD *)(v0 + 72) + 68);
  v19 = *(_QWORD *)v18;
  v20 = *(_BYTE *)(v18 + 8);
  LOBYTE(v18) = *(_BYTE *)(v18 + 9);
  v21 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v22 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x98);
  *(_QWORD *)v22 = v19;
  v22[8] = v20;
  v22[9] = v18;
  v23 = *(_QWORD *)((*v21 & *v2) + 0xA0);
  v24 = *(_QWORD *)((char *)v2 + v23);
  *(_QWORD *)(v0 + 144) = v3;
  *(_QWORD *)(v0 + 152) = v5;
  swift_retain();
  swift_retain();
  ScrollEnvironmentProperties.init(environment:)(v0 + 144, v0 + 448);
  v25 = (int *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties);
  swift_beginAccess();
  outlined init with copy of ScrollEnvironmentProperties(v25, v0 + 144);
  swift_beginAccess();
  outlined assign with copy of ScrollEnvironmentProperties(v0 + 448, (uint64_t)v25);
  swift_endAccess();
  ScrollViewHelper.didChangeProperties(from:)(v0 + 144);
  outlined destroy of ScrollEnvironmentProperties(v0 + 448);
  outlined destroy of ScrollEnvironmentProperties(v0 + 144);
  v26 = *(_QWORD *)((char *)v2 + v23);
  *(_QWORD *)(v0 + 144) = v3;
  *(_QWORD *)(v0 + 152) = v5;
  EnvironmentValues.contentMarginProxy.getter(v0 + 448);
  v27 = (_OWORD *)(v26 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins);
  v27[12] = *(_OWORD *)(v0 + 640);
  v27[13] = *(_OWORD *)(v0 + 656);
  v27[14] = *(_OWORD *)(v0 + 672);
  *(_OWORD *)((char *)v27 + 233) = *(_OWORD *)(v0 + 681);
  v27[8] = *(_OWORD *)(v0 + 576);
  v27[9] = *(_OWORD *)(v0 + 592);
  v27[10] = *(_OWORD *)(v0 + 608);
  v27[11] = *(_OWORD *)(v0 + 624);
  v27[4] = *(_OWORD *)(v0 + 512);
  v27[5] = *(_OWORD *)(v0 + 528);
  v27[6] = *(_OWORD *)(v0 + 544);
  v27[7] = *(_OWORD *)(v0 + 560);
  *v27 = *(_OWORD *)(v0 + 448);
  v27[1] = *(_OWORD *)(v0 + 464);
  v27[2] = *(_OWORD *)(v0 + 480);
  v27[3] = *(_OWORD *)(v0 + 496);
  ScrollViewHelper.didChangeMargins(from:)();
  v28 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 144) = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 152) = v28;
  v29 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 160) = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 168) = v29;
  *(_BYTE *)(v0 + 176) = *(_DWORD *)(v0 + 92);
  *(_QWORD *)(v0 + 184) = v2;
  v30 = specialized ReferenceFileDocumentConfiguration.document.getter();
  swift_retain();
  UITableViewListCoordinator.updateUITableView(_:to:transaction:)(v16, v6, v30);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t ListRepresentable.overrideSizeThatFits(_:in:platformView:)(uint64_t result, uint64_t *a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  int v12;
  int v13;
  int v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;

  v5 = v4 + *(int *)(a4 + 68);
  if (*(_BYTE *)(v5 + 9) == 1)
  {
    if (*(_QWORD *)v5 | *(unsigned __int8 *)(v5 + 8))
    {
      v7 = (_QWORD *)result;
      v8 = *a2;
      v9 = *((_BYTE *)a2 + 8);
      v10 = a2[2];
      v11 = *((_BYTE *)a2 + 24);
      _ProposedSize.width.getter();
      v13 = v12;
      v21 = v8;
      v22 = v9;
      v23 = v10;
      v24 = v11;
      result = _ProposedSize.height.getter();
      if (((v13 | v14) & 1) != 0)
      {
        v15 = v14;
        v16 = &a3[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_cachedIdealSize];
        if ((a3[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_cachedIdealSize + 16] & 1) != 0)
        {
          v19 = 0;
          v20 = 0;
          AGGraphClearUpdate();
          specialized closure #1 in UpdateCoalescingTableView.idealSize()(a3, (double *)&v19);
          AGGraphSetUpdate();
          result = swift_beginAccess();
          v18 = v19;
          v17 = v20;
          *(_QWORD *)v16 = v19;
          *((_QWORD *)v16 + 1) = v17;
          v16[16] = 0;
          if ((v13 & 1) == 0)
          {
LABEL_9:
            if ((v15 & 1) != 0)
              v7[1] = v17;
            return result;
          }
        }
        else
        {
          v18 = *(_QWORD *)v16;
          v17 = *((_QWORD *)v16 + 1);
          if ((v13 & 1) == 0)
            goto LABEL_9;
        }
        *v7 = v18;
        goto LABEL_9;
      }
    }
  }
  return result;
}

uint64_t ListRepresentable._identifiedViewTree(in:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int8x16_t *v9;
  id v10;
  void *v11;
  uint64_t result;
  void *v13;
  id v14;
  int8x16_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  int8x16_t v20[10];
  char v21;
  _BYTE v22[176];

  objc_msgSend(a1, sel_layoutIfNeeded);
  v4 = objc_msgSend(a1, sel_visibleCells);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITableViewCell);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      v19 = a2;
      v7 = (char *)MEMORY[0x1E0DEE9D8];
      v8 = 4;
      do
      {
        if ((v5 & 0xC000000000000001) != 0)
          v10 = (id)MEMORY[0x18D75E3BC](v8 - 4, v5);
        else
          v10 = *(id *)(v5 + 8 * v8);
        v11 = v10;
        a2 = v8 - 3;
        if (__OFADD__(v8 - 4, 1))
        {
          __break(1u);
          goto LABEL_21;
        }
        type metadata accessor for ListTableViewCell();
        result = swift_dynamicCastClassUnconditional();
        v13 = *(void **)(result + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host);
        if (!v13)
        {
          __break(1u);
          return result;
        }
        type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>(0);
        lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>();
        v14 = v13;
        ViewRendererHost.preferenceValue<A>(_:)();

        outlined init with copy of _IdentifiedViewTree((uint64_t)v22, (uint64_t)v20);
        if (v21 == 2
          && (v15 = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v20[2], v20[6]), vorrq_s8(v20[4], v20[8])), vorrq_s8(vorrq_s8(v20[3], v20[7]), vorrq_s8(v20[5], v20[9]))), vorrq_s8(v20[0], v20[1])), !*(_QWORD *)&vorr_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL))))
        {
          outlined destroy of _IdentifiedViewTree((uint64_t)v22);

          v9 = v20;
        }
        else
        {
          outlined destroy of _IdentifiedViewTree((uint64_t)v20);
          outlined init with copy of _IdentifiedViewTree((uint64_t)v22, (uint64_t)v20);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
          v17 = *((_QWORD *)v7 + 2);
          v16 = *((_QWORD *)v7 + 3);
          if (v17 >= v16 >> 1)
            v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v7);
          *((_QWORD *)v7 + 2) = v17 + 1;
          outlined init with take of _IdentifiedViewTree((__int128 *)v20[0].i8, (uint64_t)&v7[168 * v17 + 32]);

          v9 = (int8x16_t *)v22;
        }
        outlined destroy of _IdentifiedViewTree((uint64_t)v9);
        ++v8;
      }
      while (a2 != v6);
      result = swift_bridgeObjectRelease();
      a2 = v19;
      if (!*((_QWORD *)v7 + 2))
        goto LABEL_23;
      goto LABEL_19;
    }
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
  }
  result = swift_bridgeObjectRelease();
  v7 = (char *)MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
  {
LABEL_23:
    result = swift_bridgeObjectRelease();
    v7 = 0;
    *(_QWORD *)(a2 + 152) = 0;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    v18 = 2;
    *(_OWORD *)(a2 + 8) = 0u;
    goto LABEL_24;
  }
LABEL_19:
  v18 = 1;
LABEL_24:
  *(_QWORD *)a2 = v7;
  *(_BYTE *)(a2 + 160) = v18;
  return result;
}

void protocol witness for PlatformViewRepresentable.makeViewProvider(context:) in conformance ListRepresentable<A, B>(uint64_t a1, uint64_t a2)
{
  ListRepresentable.makeViewProvider(context:)(a1, a2);
}

uint64_t sub_1870FFD5C(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void protocol witness for PlatformViewRepresentable.updateViewProvider(_:context:) in conformance ListRepresentable<A, B>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  ListRepresentable.updateViewProvider(_:context:)(*a1, a2, a3);
}

id protocol witness for static PlatformViewRepresentable.dismantleViewProvider(_:coordinator:) in conformance ListRepresentable<A, B>(void **a1)
{
  return specialized static ListRepresentable.dismantleViewProvider(_:coordinator:)(*a1);
}

void protocol witness for PlatformViewRepresentable.makeCoordinator() in conformance ListRepresentable<A, B>()
{
  ListRepresentable.makeCoordinator()();
}

uint64_t sub_1870FFD9C(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t protocol witness for PlatformViewRepresentable._identifiedViewTree(in:) in conformance ListRepresentable<A, B>@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return ListRepresentable._identifiedViewTree(in:)(*a1, a2);
}

uint64_t protocol witness for PlatformViewRepresentable.overrideSizeThatFits(_:in:platformView:) in conformance ListRepresentable<A, B>(uint64_t a1, uint64_t *a2, char **a3, uint64_t a4)
{
  return ListRepresentable.overrideSizeThatFits(_:in:platformView:)(a1, a2, *a3, a4);
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ListUsesLegacySafeAreaPropagation()
{
  static Semantics.v3_2.getter();
  return (isLinkedOnOrAfter(_:)() & 1) == 0;
}

void type metadata accessor for TableViewListCore.Configuration.TableViewConfiguration()
{
  JUMPOUT(0x18D75FF28);
}

void base witness table accessor for Equatable in TableViewListCore<A, B>.Configuration.TableViewConfiguration()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for TableViewListCore()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata completion function for TableViewListCore()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Binding();
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableViewListCore(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(uint64_t, unint64_t, uint64_t);
  _OWORD *v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v7 + 64);
  v10 = (v8 | 7) + *(_QWORD *)(v6 + 64);
  v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 <= 7
    && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) == 0
    && ((v9 + (v10 & ~(v8 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 121 <= 0x18)
  {
    v15 = ~(v8 | 7);
    v16 = *(unsigned int *)(v7 + 84);
    v17 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v18 = (_QWORD *)(((unint64_t)v4 + v10) & v15);
    v19 = ((unint64_t)a2 + v10) & v15;
    v20 = (uint64_t *)((v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v16 & 0x80000000) != 0)
    {
      v23 = v16;
      v24 = v18;
      v25 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)v20 + v8 + 8) & v17, v23, v5);
      v18 = v24;
      if (v25)
      {
LABEL_14:
        v22 = (unint64_t)v18;
        memcpy(v18, (const void *)v19, v9);
LABEL_17:
        v31 = (_OWORD *)(((v22 | 7) + v9) & 0xFFFFFFFFFFFFFFF8);
        v32 = (__int128 *)(((v19 | 7) + v9) & 0xFFFFFFFFFFFFFFF8);
        v33 = *v32;
        v34 = v32[1];
        v35 = v32[3];
        v31[2] = v32[2];
        v31[3] = v35;
        *v31 = v33;
        v31[1] = v34;
        v36 = v32[4];
        v37 = v32[5];
        v38 = v32[6];
        *(_OWORD *)((char *)v31 + 105) = *(__int128 *)((char *)v32 + 105);
        v31[5] = v37;
        v31[6] = v38;
        v31[4] = v36;
        return v4;
      }
    }
    else
    {
      v21 = *v20;
      if ((unint64_t)*v20 >= 0xFFFFFFFF)
        LODWORD(v21) = -1;
      if ((_DWORD)v21 != -1)
        goto LABEL_14;
    }
    *v18 = *(_QWORD *)v19;
    v26 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v26 = *v20;
    v27 = v8 + 8;
    v28 = ((unint64_t)v26 + v8 + 8) & v17;
    v29 = ((unint64_t)v20 + v27) & v17;
    v30 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    v22 = (unint64_t)v18;
    swift_retain();
    swift_retain();
    v30(v28, v29, v5);
    goto LABEL_17;
  }
  v14 = *a2;
  *v4 = *a2;
  v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
  swift_retain();
  return v4;
}

uint64_t initializeWithCopy for TableViewListCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  size_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, unint64_t, uint64_t);
  _OWORD *v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 | 7) + v7;
  v12 = (_QWORD *)((v11 + a1) & ~(v10 | 7));
  v13 = (_QWORD *)((v11 + a2) & ~(v10 | 7));
  v14 = ~v10;
  v15 = (v10 + 16) & ~v10;
  v16 = *(_QWORD *)(v9 + 64);
  v17 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v9 + 84) & 0x80000000) == 0)
  {
    v18 = *v17;
    if ((unint64_t)*v17 >= 0xFFFFFFFF)
      LODWORD(v18) = -1;
    v19 = v15 + v16;
    if ((_DWORD)v18 != -1)
      goto LABEL_5;
LABEL_7:
    *v12 = *v13;
    v20 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v20 = *v17;
    v21 = v10 + 8;
    v22 = ((unint64_t)v20 + v10 + 8) & v14;
    v23 = ((unint64_t)v17 + v21) & v14;
    v24 = *(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16);
    swift_retain();
    swift_retain();
    v24(v22, v23, v8);
    goto LABEL_8;
  }
  v19 = v15 + v16;
  if (!(*(unsigned int (**)(unint64_t))(v9 + 48))(((unint64_t)v17 + v10 + 8) & v14))
    goto LABEL_7;
LABEL_5:
  memcpy(v12, v13, v19);
LABEL_8:
  v25 = (_OWORD *)(((unint64_t)v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  v26 = (__int128 *)(((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  v27 = *v26;
  v28 = v26[1];
  v29 = v26[3];
  v25[2] = v26[2];
  v25[3] = v29;
  *v25 = v27;
  v25[1] = v28;
  v30 = v26[4];
  v31 = v26[5];
  v32 = v26[6];
  *(_OWORD *)((char *)v25 + 105) = *(__int128 *)((char *)v26 + 105);
  v25[5] = v31;
  v25[6] = v32;
  v25[4] = v30;
  return a1;
}

uint64_t assignWithCopy for TableViewListCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t (*v22)(unint64_t, uint64_t, uint64_t);
  uint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(unint64_t, uint64_t, uint64_t);
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 | 7) + v7;
  v12 = (_QWORD *)((v11 + a1) & ~(v10 | 7));
  v13 = (_QWORD *)((v11 + a2) & ~(v10 | 7));
  v14 = *(unsigned int *)(v9 + 84);
  v15 = ~v10;
  v16 = *(_QWORD *)(v9 + 64);
  v17 = ((v10 + 16) & ~v10) + v16;
  v18 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v42 = v8;
  if ((v14 & 0x80000000) != 0)
  {
    v40 = ((v10 + 16) & ~v10) + v16;
    v41 = a1;
    v22 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
    v39 = v22(((unint64_t)v18 + v10 + 8) & v15, v14, v8);
    v23 = v8;
    v19 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    v17 = v40;
    v21 = v22(((unint64_t)v19 + v10 + 8) & v15, v14, v23);
    a1 = v41;
    if (!v39)
    {
LABEL_5:
      if (!v21)
      {
        *v12 = *v13;
        swift_retain();
        swift_release();
        *v18 = *v19;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 24))(((unint64_t)v18 + v10 + 8) & v15, ((unint64_t)v19 + v10 + 8) & v15, v42);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v9 + 8))(((unint64_t)v18 + v10 + 8) & v15, v42);
      goto LABEL_9;
    }
  }
  else
  {
    v19 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    v20 = *v19;
    if (*v19 >= 0xFFFFFFFFuLL)
      LODWORD(v20) = -1;
    v21 = v20 + 1;
    if (*v18 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v21)
  {
    *v12 = *v13;
    *v18 = *v19;
    v24 = (unint64_t)v18 + v10 + 8;
    v25 = v17;
    v26 = v24 & v15;
    v27 = ((unint64_t)v19 + v10 + 8) & v15;
    v28 = *(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 16);
    swift_retain();
    swift_retain();
    v29 = v26;
    v17 = v25;
    v28(v29, v27, v42);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v12, v13, v17);
LABEL_12:
  v30 = ((unint64_t)v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = ((unint64_t)v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v32 = *(_OWORD *)(v31 + 8);
  v33 = *(_OWORD *)(v31 + 24);
  *(_WORD *)(v30 + 40) = *(_WORD *)(v31 + 40);
  *(_OWORD *)(v30 + 24) = v33;
  *(_OWORD *)(v30 + 8) = v32;
  *(_BYTE *)(v30 + 42) = *(_BYTE *)(v31 + 42);
  *(_QWORD *)(v30 + 48) = *(_QWORD *)(v31 + 48);
  *(_BYTE *)(v30 + 56) = *(_BYTE *)(v31 + 56);
  v34 = *(_QWORD *)(v31 + 64);
  *(_BYTE *)(v30 + 72) = *(_BYTE *)(v31 + 72);
  *(_QWORD *)(v30 + 64) = v34;
  v35 = *(_QWORD *)(v31 + 80);
  *(_BYTE *)(v30 + 88) = *(_BYTE *)(v31 + 88);
  *(_QWORD *)(v30 + 80) = v35;
  v36 = *(_QWORD *)(v31 + 96);
  *(_BYTE *)(v30 + 104) = *(_BYTE *)(v31 + 104);
  *(_QWORD *)(v30 + 96) = v36;
  v37 = *(_QWORD *)(v31 + 112);
  *(_BYTE *)(v30 + 120) = *(_BYTE *)(v31 + 120);
  *(_QWORD *)(v30 + 112) = v37;
  return a1;
}

uint64_t initializeWithTake for TableViewListCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  size_t v19;
  _QWORD *v20;
  _OWORD *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 | 7) + v7;
  v12 = (_QWORD *)((v11 + a1) & ~(v10 | 7));
  v13 = (_QWORD *)((v11 + a2) & ~(v10 | 7));
  v14 = ~v10;
  v15 = (v10 + 16) & ~v10;
  v16 = *(_QWORD *)(v9 + 64);
  v17 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v9 + 84) & 0x80000000) == 0)
  {
    v18 = *v17;
    if ((unint64_t)*v17 >= 0xFFFFFFFF)
      LODWORD(v18) = -1;
    v19 = v15 + v16;
    if ((_DWORD)v18 != -1)
      goto LABEL_5;
LABEL_7:
    *v12 = *v13;
    v20 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v20 = *v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))(((unint64_t)v20 + v10 + 8) & v14, ((unint64_t)v17 + v10 + 8) & v14, v8);
    goto LABEL_8;
  }
  v19 = v15 + v16;
  if (!(*(unsigned int (**)(unint64_t))(v9 + 48))(((unint64_t)v17 + v10 + 8) & v14))
    goto LABEL_7;
LABEL_5:
  memcpy(v12, v13, v19);
LABEL_8:
  v21 = (_OWORD *)(((unint64_t)v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  v22 = (__int128 *)(((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  v23 = *v22;
  v24 = v22[1];
  v25 = v22[3];
  v21[2] = v22[2];
  v21[3] = v25;
  *v21 = v23;
  v21[1] = v24;
  v26 = v22[4];
  v27 = v22[5];
  v28 = v22[6];
  *(_OWORD *)((char *)v21 + 105) = *(__int128 *)((char *)v22 + 105);
  v21[5] = v27;
  v21[6] = v28;
  v21[4] = v26;
  return a1;
}

uint64_t assignWithTake for TableViewListCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t (*v20)(unint64_t, uint64_t, uint64_t);
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  size_t v31;
  uint64_t v32;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + *(_QWORD *)(v6 + 64);
  v11 = (_QWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + a2) & ~(v9 | 7));
  v13 = *(unsigned int *)(v8 + 84);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = ((v9 + 16) & ~v9) + v14;
  v16 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v32 = ~v9;
  if ((v13 & 0x80000000) != 0)
  {
    v31 = ((v9 + 16) & ~v9) + v14;
    v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    v30 = v20(((unint64_t)v16 + v9 + 8) & ~v9, v13, v7);
    v17 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    v19 = v20(((unint64_t)v17 + v9 + 8) & ~v9, v13, v7);
    v15 = v31;
    if (!v30)
    {
LABEL_5:
      if (!v19)
      {
        *v11 = *v12;
        swift_release();
        *v16 = *v17;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(((unint64_t)v16 + v9 + 8) & v32, ((unint64_t)v17 + v9 + 8) & v32, v7);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v16 + v9 + 8) & v32, v7);
      goto LABEL_9;
    }
  }
  else
  {
    v17 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    v18 = *v17;
    if (*v17 >= 0xFFFFFFFFuLL)
      LODWORD(v18) = -1;
    v19 = v18 + 1;
    if (*v16 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v19)
  {
    *v11 = *v12;
    *v16 = *v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v16 + v9 + 8) & v32, ((unint64_t)v17 + v9 + 8) & v32, v7);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v11, v12, v15);
LABEL_12:
  v21 = ((unint64_t)v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = ((unint64_t)v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v23 = *(_OWORD *)(v22 + 8);
  v24 = *(_OWORD *)(v22 + 24);
  *(_WORD *)(v21 + 40) = *(_WORD *)(v22 + 40);
  *(_OWORD *)(v21 + 24) = v24;
  *(_OWORD *)(v21 + 8) = v23;
  *(_BYTE *)(v21 + 42) = *(_BYTE *)(v22 + 42);
  *(_QWORD *)(v21 + 48) = *(_QWORD *)(v22 + 48);
  *(_BYTE *)(v21 + 56) = *(_BYTE *)(v22 + 56);
  v25 = *(_QWORD *)(v22 + 64);
  *(_BYTE *)(v21 + 72) = *(_BYTE *)(v22 + 72);
  *(_QWORD *)(v21 + 64) = v25;
  v26 = *(_QWORD *)(v22 + 80);
  *(_BYTE *)(v21 + 88) = *(_BYTE *)(v22 + 88);
  *(_QWORD *)(v21 + 80) = v26;
  v27 = *(_QWORD *)(v22 + 96);
  *(_BYTE *)(v21 + 104) = *(_BYTE *)(v22 + 104);
  *(_QWORD *)(v21 + 96) = v27;
  v28 = *(_QWORD *)(v22 + 112);
  *(_BYTE *)(v21 + 120) = *(_BYTE *)(v22 + 120);
  *(_QWORD *)(v21 + 112) = v28;
  return a1;
}

uint64_t getEnumTagSinglePayload for TableViewListCore(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  unsigned int v22;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = v8 - 1;
  if (v8 - 1 <= v5)
    v10 = *(_DWORD *)(v4 + 84);
  else
    v10 = v8 - 1;
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = v11 | 7;
  v13 = (v11 | 7) + *(_QWORD *)(v4 + 64);
  if (v10 < a2)
  {
    v14 = ((*(_QWORD *)(v6 + 64) + ((v11 + 16) & ~v11) + (v13 & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8) + 121;
    v15 = (a2 - v10 + 255) >> (8 * v14);
    if (v14 < 4)
      v16 = v15 + 1;
    else
      v16 = 2;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v18 = v17;
    else
      v18 = 0;
    __asm { BR              X6 }
  }
  if (v5 >= v9)
    __asm { BR              X3 }
  v20 = (unint64_t *)((((v13 + a1) & ~v12) + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0x80000000) != 0)
  {
    v22 = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)v20 + v11 + 8) & ~v11);
  }
  else
  {
    v21 = *v20;
    if (v21 >= 0xFFFFFFFF)
      LODWORD(v21) = -1;
    v22 = v21 + 1;
  }
  if (v22 >= 2)
    return v22 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for TableViewListCore(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if ((v7 - 1) <= *(_DWORD *)(v5 + 84))
    v8 = *(_DWORD *)(v5 + 84);
  else
    v8 = v7 - 1;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = ((((v9 + 16) & ~v9) + *(_QWORD *)(v6 + 64) + (((v9 | 7) + *(_QWORD *)(v5 + 64)) & ~(v9 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 121;
  if (v8 >= a3)
  {
    v13 = 0u;
    if (v8 >= a2)
      goto LABEL_20;
  }
  else
  {
    if (v10 <= 3)
      v11 = ((a3 - v8 + 255) >> (8 * v10)) + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    if (v8 >= a2)
LABEL_20:
      __asm { BR              X6 }
  }
  if (v10 >= 4)
    v14 = ~v8 + a2;
  else
    v14 = (~(_BYTE)v8 + a2);
  bzero(a1, ((((v9 + 16) & ~v9) + *(_QWORD *)(v6 + 64) + (((v9 | 7) + *(_QWORD *)(v5 + 64)) & ~(v9 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8)+ 121);
  if ((_DWORD)v10 == 1)
    *a1 = v14;
  else
    *(_DWORD *)a1 = v14;
  __asm { BR              X10 }
}

void sub_187100BE0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187100D64);
}

void sub_187100BE8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187100BF0);
  JUMPOUT(0x187100D64);
}

void sub_187100C80()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187100D64);
}

void sub_187100C88()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187100D64);
}

uint64_t sub_187100C90@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, size_t a3@<X8>)
{
  void *v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_WORD *)(v10 + v11) = 0;
  if (!a2)
    goto LABEL_10;
  if (v6 < v8)
  {
    v3 = (void *)((v9 + v10) & a1);
    if (v8 >= a2)
      JUMPOUT(0x187100C9CLL);
    if ((_DWORD)a3)
    {
      if (a3 <= 3)
        v4 = a3;
      else
        v4 = 4;
      bzero(v3, a3);
      __asm { BR              X10 }
    }
LABEL_10:
    JUMPOUT(0x187100D64);
  }
  return (*(uint64_t (**)(uint64_t))(v7 + 56))(v10);
}

void sub_187100CFC()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x187100D64);
}

void sub_187100D20()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x187100D64);
}

void sub_187100D28()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x187100D64);
}

void sub_187100D38()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x187100D64);
}

uint64_t getEnumTagSinglePayload for TableViewListCore.Configuration.TableViewConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 121))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 56);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TableViewListCore.Configuration.TableViewConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 120) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 121) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 121) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = a2 + 1;
  }
  return result;
}

void type metadata accessor for TableViewListCore.Configuration()
{
  JUMPOUT(0x18D75FF28);
}

_UNKNOWN **base witness table accessor for View in TableViewListCore<A, B>()
{
  return &protocol witness table for TableViewListCore<A, B>;
}

uint64_t lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a4(255, a2, a3, MEMORY[0x1E0CFECF8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v6);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for TableViewListCore.UpdateBridgedState()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for TableViewListCore.ScrollViewProvider()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>)
  {
    lazy protocol witness table accessor for type ListUsesLegacySafeAreaPropagation and conformance ListUsesLegacySafeAreaPropagation();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListUsesLegacySafeAreaPropagation and conformance ListUsesLegacySafeAreaPropagation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListUsesLegacySafeAreaPropagation and conformance ListUsesLegacySafeAreaPropagation;
  if (!lazy protocol witness table cache variable for type ListUsesLegacySafeAreaPropagation and conformance ListUsesLegacySafeAreaPropagation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListUsesLegacySafeAreaPropagation, &unk_1E1B02FC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListUsesLegacySafeAreaPropagation and conformance ListUsesLegacySafeAreaPropagation);
  }
  return result;
}

void type metadata accessor for TableViewListCore.MakeRepresentable()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for TableViewListCore.EnvironmentTransform()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier>();
    v2[0] = MEMORY[0x1E0CE65D8];
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<ListUsesLegacySafeAreaPropagation, _SafeAreaRegionsIgnoringLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void partial apply for closure #1 in static TableViewListCore._makeView(view:inputs:)()
{
  closure #1 in static TableViewListCore._makeView(view:inputs:)();
}

void partial apply for implicit closure #2 in static TableViewListCore._makeView(view:inputs:)()
{
  implicit closure #2 in static TableViewListCore._makeView(view:inputs:)();
}

void type metadata accessor for TableViewListCore.ScrollViewPreferenceProvider()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for Attribute<[ContentScrollViewBox]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<[ContentScrollViewBox]>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for [ContentScrollViewBox], (uint64_t)&type metadata for ContentScrollViewBox, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<[ContentScrollViewBox]>);
  }
}

void *type metadata accessor for ListUsesLegacySafeAreaPropagation()
{
  return &unk_1E1B02FC0;
}

uint64_t type metadata completion function for ListRepresentable()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Binding();
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ListRepresentable(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(uint64_t, unint64_t, uint64_t);
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v7 + 64);
  v10 = (v8 | 7) + *(_QWORD *)(v6 + 64);
  v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 <= 7
    && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) == 0
    && ((((((v9 + (v10 & ~(v8 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 135) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 10 <= 0x18)
  {
    v15 = ~(v8 | 7);
    v16 = *(unsigned int *)(v7 + 84);
    v17 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v18 = (_QWORD *)(((unint64_t)v4 + v10) & v15);
    v19 = ((unint64_t)a2 + v10) & v15;
    v20 = (uint64_t *)((v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v16 & 0x80000000) != 0)
    {
      v23 = v16;
      v24 = v18;
      v25 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)v20 + v8 + 8) & v17, v23, v5);
      v18 = v24;
      if (v25)
      {
LABEL_14:
        v22 = (unint64_t)v18;
        memcpy(v18, (const void *)v19, v9);
LABEL_17:
        v31 = ((v22 | 7) + v9) & 0xFFFFFFFFFFFFFFF8;
        v32 = ((v19 | 7) + v9) & 0xFFFFFFFFFFFFFFF8;
        v33 = *(_OWORD *)v32;
        v34 = *(_OWORD *)(v32 + 16);
        v35 = *(_OWORD *)(v32 + 48);
        *(_OWORD *)(v31 + 32) = *(_OWORD *)(v32 + 32);
        *(_OWORD *)(v31 + 48) = v35;
        *(_OWORD *)v31 = v33;
        *(_OWORD *)(v31 + 16) = v34;
        v36 = *(_OWORD *)(v32 + 64);
        v37 = *(_OWORD *)(v32 + 80);
        v38 = *(_OWORD *)(v32 + 96);
        *(_OWORD *)(v31 + 105) = *(_OWORD *)(v32 + 105);
        *(_OWORD *)(v31 + 80) = v37;
        *(_OWORD *)(v31 + 96) = v38;
        *(_OWORD *)(v31 + 64) = v36;
        *(_QWORD *)(v31 + 124) = *(_QWORD *)(v32 + 124);
        v39 = (_QWORD *)((v31 + 135) & 0xFFFFFFFFFFFFFCLL);
        v40 = (_QWORD *)((v32 + 135) & 0xFFFFFFFFFFFFFCLL);
        *v39 = *v40;
        v41 = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8;
        v42 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
        v43 = *(_QWORD *)v41;
        *(_WORD *)(v42 + 8) = *(_WORD *)(v41 + 8);
        *(_QWORD *)v42 = v43;
        return v4;
      }
    }
    else
    {
      v21 = *v20;
      if ((unint64_t)*v20 >= 0xFFFFFFFF)
        LODWORD(v21) = -1;
      if ((_DWORD)v21 != -1)
        goto LABEL_14;
    }
    *v18 = *(_QWORD *)v19;
    v26 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v26 = *v20;
    v27 = v8 + 8;
    v28 = ((unint64_t)v26 + v8 + 8) & v17;
    v29 = ((unint64_t)v20 + v27) & v17;
    v30 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    v22 = (unint64_t)v18;
    swift_retain();
    swift_retain();
    v30(v28, v29, v5);
    goto LABEL_17;
  }
  v14 = *a2;
  *v4 = *a2;
  v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
  swift_retain();
  return v4;
}

uint64_t destroy for TableViewListCore(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ~v8;
  v10 = (uint64_t *)((((v5 + (v8 | 7)) & ~(v8 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v7 + 48))(((unint64_t)v10 + v8 + 8) & v9);
    if ((_DWORD)result)
      return result;
LABEL_7:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v10 + v8 + 8) & v9, v6);
  }
  v11 = *v10;
  if ((unint64_t)*v10 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  result = (v11 + 1);
  if ((_DWORD)v11 == -1)
    goto LABEL_7;
  return result;
}

uint64_t initializeWithCopy for ListRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  size_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, unint64_t, uint64_t);
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 | 7) + v7;
  v12 = (_QWORD *)((v11 + a1) & ~(v10 | 7));
  v13 = (_QWORD *)((v11 + a2) & ~(v10 | 7));
  v14 = ~v10;
  v15 = (v10 + 16) & ~v10;
  v16 = *(_QWORD *)(v9 + 64);
  v17 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v9 + 84) & 0x80000000) == 0)
  {
    v18 = *v17;
    if ((unint64_t)*v17 >= 0xFFFFFFFF)
      LODWORD(v18) = -1;
    v19 = v15 + v16;
    if ((_DWORD)v18 != -1)
      goto LABEL_5;
LABEL_7:
    *v12 = *v13;
    v20 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v20 = *v17;
    v21 = v10 + 8;
    v22 = ((unint64_t)v20 + v10 + 8) & v14;
    v23 = ((unint64_t)v17 + v21) & v14;
    v24 = *(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16);
    swift_retain();
    swift_retain();
    v24(v22, v23, v8);
    goto LABEL_8;
  }
  v19 = v15 + v16;
  if (!(*(unsigned int (**)(unint64_t))(v9 + 48))(((unint64_t)v17 + v10 + 8) & v14))
    goto LABEL_7;
LABEL_5:
  memcpy(v12, v13, v19);
LABEL_8:
  v25 = ((unint64_t)v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(_OWORD *)v26;
  v28 = *(_OWORD *)(v26 + 16);
  v29 = *(_OWORD *)(v26 + 48);
  *(_OWORD *)(v25 + 32) = *(_OWORD *)(v26 + 32);
  *(_OWORD *)(v25 + 48) = v29;
  *(_OWORD *)v25 = v27;
  *(_OWORD *)(v25 + 16) = v28;
  v30 = *(_OWORD *)(v26 + 64);
  v31 = *(_OWORD *)(v26 + 80);
  v32 = *(_OWORD *)(v26 + 96);
  *(_OWORD *)(v25 + 105) = *(_OWORD *)(v26 + 105);
  *(_OWORD *)(v25 + 80) = v31;
  *(_OWORD *)(v25 + 96) = v32;
  *(_OWORD *)(v25 + 64) = v30;
  *(_QWORD *)(v25 + 124) = *(_QWORD *)(v26 + 124);
  v33 = (_QWORD *)((v25 + 135) & 0xFFFFFFFFFFFFFCLL);
  v34 = (_QWORD *)((v26 + 135) & 0xFFFFFFFFFFFFFCLL);
  *v33 = *v34;
  v35 = ((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8;
  v36 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  v37 = *(_QWORD *)v35;
  *(_WORD *)(v36 + 8) = *(_WORD *)(v35 + 8);
  *(_QWORD *)v36 = v37;
  return a1;
}

uint64_t assignWithCopy for ListRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t (*v22)(unint64_t, uint64_t, uint64_t);
  uint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(unint64_t, uint64_t, uint64_t);
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 | 7) + v7;
  v12 = (_QWORD *)((v11 + a1) & ~(v10 | 7));
  v13 = (_QWORD *)((v11 + a2) & ~(v10 | 7));
  v14 = *(unsigned int *)(v9 + 84);
  v15 = ~v10;
  v16 = *(_QWORD *)(v9 + 64);
  v17 = ((v10 + 16) & ~v10) + v16;
  v18 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v47 = v8;
  if ((v14 & 0x80000000) != 0)
  {
    v45 = ((v10 + 16) & ~v10) + v16;
    v46 = a1;
    v22 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
    v44 = v22(((unint64_t)v18 + v10 + 8) & v15, v14, v8);
    v23 = v8;
    v19 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    v17 = v45;
    v21 = v22(((unint64_t)v19 + v10 + 8) & v15, v14, v23);
    a1 = v46;
    if (!v44)
    {
LABEL_5:
      if (!v21)
      {
        *v12 = *v13;
        swift_retain();
        swift_release();
        *v18 = *v19;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 24))(((unint64_t)v18 + v10 + 8) & v15, ((unint64_t)v19 + v10 + 8) & v15, v47);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v9 + 8))(((unint64_t)v18 + v10 + 8) & v15, v47);
      goto LABEL_9;
    }
  }
  else
  {
    v19 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    v20 = *v19;
    if (*v19 >= 0xFFFFFFFFuLL)
      LODWORD(v20) = -1;
    v21 = v20 + 1;
    if (*v18 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v21)
  {
    *v12 = *v13;
    *v18 = *v19;
    v24 = (unint64_t)v18 + v10 + 8;
    v25 = v17;
    v26 = v24 & v15;
    v27 = ((unint64_t)v19 + v10 + 8) & v15;
    v28 = *(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 16);
    swift_retain();
    swift_retain();
    v29 = v26;
    v17 = v25;
    v28(v29, v27, v47);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v12, v13, v17);
LABEL_12:
  v30 = ((unint64_t)v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = ((unint64_t)v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v32 = *(_OWORD *)(v31 + 8);
  v33 = *(_OWORD *)(v31 + 24);
  *(_WORD *)(v30 + 40) = *(_WORD *)(v31 + 40);
  *(_OWORD *)(v30 + 24) = v33;
  *(_OWORD *)(v30 + 8) = v32;
  *(_BYTE *)(v30 + 42) = *(_BYTE *)(v31 + 42);
  *(_QWORD *)(v30 + 48) = *(_QWORD *)(v31 + 48);
  *(_BYTE *)(v30 + 56) = *(_BYTE *)(v31 + 56);
  v34 = *(_QWORD *)(v31 + 64);
  *(_BYTE *)(v30 + 72) = *(_BYTE *)(v31 + 72);
  *(_QWORD *)(v30 + 64) = v34;
  v35 = *(_QWORD *)(v31 + 80);
  *(_BYTE *)(v30 + 88) = *(_BYTE *)(v31 + 88);
  *(_QWORD *)(v30 + 80) = v35;
  v36 = *(_QWORD *)(v31 + 96);
  *(_BYTE *)(v30 + 104) = *(_BYTE *)(v31 + 104);
  *(_QWORD *)(v30 + 96) = v36;
  v37 = *(_QWORD *)(v31 + 112);
  *(_BYTE *)(v30 + 120) = *(_BYTE *)(v31 + 120);
  *(_QWORD *)(v30 + 112) = v37;
  *(_DWORD *)(v30 + 124) = *(_DWORD *)(v31 + 124);
  *(_DWORD *)(v30 + 128) = *(_DWORD *)(v31 + 128);
  v38 = (_DWORD *)((v30 + 135) & 0xFFFFFFFFFFFFFFFCLL);
  v39 = (_DWORD *)((v31 + 135) & 0xFFFFFFFFFFFFFFFCLL);
  *v38 = *v39;
  v38[1] = v39[1];
  v40 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
  v41 = ((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8;
  v42 = *(_QWORD *)v40;
  *(_WORD *)(v41 + 8) = *(_WORD *)(v40 + 8);
  *(_QWORD *)v41 = v42;
  return a1;
}

uint64_t initializeWithTake for ListRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 | 7) + v7;
  v12 = (_QWORD *)((v11 + a1) & ~(v10 | 7));
  v13 = (_QWORD *)((v11 + a2) & ~(v10 | 7));
  v14 = ~v10;
  v15 = (v10 + 16) & ~v10;
  v16 = *(_QWORD *)(v9 + 64);
  v17 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v9 + 84) & 0x80000000) == 0)
  {
    v18 = *v17;
    if ((unint64_t)*v17 >= 0xFFFFFFFF)
      LODWORD(v18) = -1;
    v19 = v15 + v16;
    if ((_DWORD)v18 != -1)
      goto LABEL_5;
LABEL_7:
    *v12 = *v13;
    v20 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v20 = *v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))(((unint64_t)v20 + v10 + 8) & v14, ((unint64_t)v17 + v10 + 8) & v14, v8);
    goto LABEL_8;
  }
  v19 = v15 + v16;
  if (!(*(unsigned int (**)(unint64_t))(v9 + 48))(((unint64_t)v17 + v10 + 8) & v14))
    goto LABEL_7;
LABEL_5:
  memcpy(v12, v13, v19);
LABEL_8:
  v21 = ((unint64_t)v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = ((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_OWORD *)v22;
  v24 = *(_OWORD *)(v22 + 16);
  v25 = *(_OWORD *)(v22 + 48);
  *(_OWORD *)(v21 + 32) = *(_OWORD *)(v22 + 32);
  *(_OWORD *)(v21 + 48) = v25;
  *(_OWORD *)v21 = v23;
  *(_OWORD *)(v21 + 16) = v24;
  v26 = *(_OWORD *)(v22 + 64);
  v27 = *(_OWORD *)(v22 + 80);
  v28 = *(_OWORD *)(v22 + 96);
  *(_OWORD *)(v21 + 105) = *(_OWORD *)(v22 + 105);
  *(_OWORD *)(v21 + 80) = v27;
  *(_OWORD *)(v21 + 96) = v28;
  *(_OWORD *)(v21 + 64) = v26;
  *(_QWORD *)(v21 + 124) = *(_QWORD *)(v22 + 124);
  v29 = (_QWORD *)((v21 + 135) & 0xFFFFFFFFFFFFFCLL);
  v30 = (_QWORD *)((v22 + 135) & 0xFFFFFFFFFFFFFCLL);
  *v29 = *v30;
  v31 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v32 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = *(_QWORD *)v31;
  *(_WORD *)(v32 + 8) = *(_WORD *)(v31 + 8);
  *(_QWORD *)v32 = v33;
  return a1;
}

uint64_t assignWithTake for ListRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t (*v20)(unint64_t, uint64_t, uint64_t);
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v35;
  size_t v36;
  uint64_t v37;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + *(_QWORD *)(v6 + 64);
  v11 = (_QWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + a2) & ~(v9 | 7));
  v13 = *(unsigned int *)(v8 + 84);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = ((v9 + 16) & ~v9) + v14;
  v16 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v37 = ~v9;
  if ((v13 & 0x80000000) != 0)
  {
    v36 = ((v9 + 16) & ~v9) + v14;
    v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    v35 = v20(((unint64_t)v16 + v9 + 8) & ~v9, v13, v7);
    v17 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    v19 = v20(((unint64_t)v17 + v9 + 8) & ~v9, v13, v7);
    v15 = v36;
    if (!v35)
    {
LABEL_5:
      if (!v19)
      {
        *v11 = *v12;
        swift_release();
        *v16 = *v17;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(((unint64_t)v16 + v9 + 8) & v37, ((unint64_t)v17 + v9 + 8) & v37, v7);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v16 + v9 + 8) & v37, v7);
      goto LABEL_9;
    }
  }
  else
  {
    v17 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    v18 = *v17;
    if (*v17 >= 0xFFFFFFFFuLL)
      LODWORD(v18) = -1;
    v19 = v18 + 1;
    if (*v16 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v19)
  {
    *v11 = *v12;
    *v16 = *v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v16 + v9 + 8) & v37, ((unint64_t)v17 + v9 + 8) & v37, v7);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v11, v12, v15);
LABEL_12:
  v21 = ((unint64_t)v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = ((unint64_t)v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v23 = *(_OWORD *)(v22 + 8);
  v24 = *(_OWORD *)(v22 + 24);
  *(_WORD *)(v21 + 40) = *(_WORD *)(v22 + 40);
  *(_OWORD *)(v21 + 24) = v24;
  *(_OWORD *)(v21 + 8) = v23;
  *(_BYTE *)(v21 + 42) = *(_BYTE *)(v22 + 42);
  *(_QWORD *)(v21 + 48) = *(_QWORD *)(v22 + 48);
  *(_BYTE *)(v21 + 56) = *(_BYTE *)(v22 + 56);
  v25 = *(_QWORD *)(v22 + 64);
  *(_BYTE *)(v21 + 72) = *(_BYTE *)(v22 + 72);
  *(_QWORD *)(v21 + 64) = v25;
  v26 = *(_QWORD *)(v22 + 80);
  *(_BYTE *)(v21 + 88) = *(_BYTE *)(v22 + 88);
  *(_QWORD *)(v21 + 80) = v26;
  v27 = *(_QWORD *)(v22 + 96);
  *(_BYTE *)(v21 + 104) = *(_BYTE *)(v22 + 104);
  *(_QWORD *)(v21 + 96) = v27;
  v28 = *(_QWORD *)(v22 + 112);
  *(_BYTE *)(v21 + 120) = *(_BYTE *)(v22 + 120);
  *(_QWORD *)(v21 + 112) = v28;
  *(_DWORD *)(v21 + 124) = *(_DWORD *)(v22 + 124);
  *(_DWORD *)(v21 + 128) = *(_DWORD *)(v22 + 128);
  v29 = (_DWORD *)((v21 + 135) & 0xFFFFFFFFFFFFFFFCLL);
  v30 = (_DWORD *)((v22 + 135) & 0xFFFFFFFFFFFFFFFCLL);
  *v29 = *v30;
  v29[1] = v30[1];
  v31 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v32 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = *(_QWORD *)v31;
  *(_WORD *)(v32 + 8) = *(_WORD *)(v31 + 8);
  *(_QWORD *)v32 = v33;
  return a1;
}

uint64_t getEnumTagSinglePayload for ListRepresentable(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t *v19;
  unint64_t v20;
  unsigned int v21;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = v8 - 1;
  if (v8 - 1 <= v5)
    v10 = *(_DWORD *)(v4 + 84);
  else
    v10 = v8 - 1;
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = v11 | 7;
  v13 = (v11 | 7) + *(_QWORD *)(v4 + 64);
  if (v10 < a2)
  {
    v14 = (a2 - v10 + 0xFFFF) >> (8
                                * (((((((*(_BYTE *)(v6 + 64) + ((v11 + 16) & ~(_BYTE)v11) + (v13 & ~(_BYTE)v12) + 7) & 0xF8)
                                     - 121) & 0xFC)
                                   + 15) & 0xF8)
                                 + 10));
    if (((((((*(_DWORD *)(v6 + 64) + (((_DWORD)v11 + 16) & ~(_DWORD)v11) + (v13 & ~(_DWORD)v12) + 7) & 0xFFFFFFF8)
           + 135) & 0xFFFFFFFC)
         + 15) & 0xFFFFFFF8)
       + 10 <= 3)
      v15 = v14 + 1;
    else
      v15 = 2;
    if (v15 >= 0x10000)
      v16 = 4;
    else
      v16 = 2;
    if (v15 < 0x100)
      v16 = 1;
    if (v15 >= 2)
      v17 = v16;
    else
      v17 = 0;
    __asm { BR              X6 }
  }
  if (v5 >= v9)
    __asm { BR              X3 }
  v19 = (unint64_t *)((((v13 + a1) & ~v12) + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0x80000000) != 0)
  {
    v21 = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)v19 + v11 + 8) & ~v11);
  }
  else
  {
    v20 = *v19;
    if (v20 >= 0xFFFFFFFF)
      LODWORD(v20) = -1;
    v21 = v20 + 1;
  }
  if (v21 >= 2)
    return v21 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for ListRepresentable(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if ((v7 - 1) <= *(_DWORD *)(v5 + 84))
    v8 = *(_DWORD *)(v5 + 84);
  else
    v8 = v7 - 1;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = ((((((((v9 + 16) & ~v9) + *(_QWORD *)(v6 + 64) + (((v9 | 7) + *(_QWORD *)(v5 + 64)) & ~(v9 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 135) & 0xFFFFFFFFFFFFFFFCLL)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 10;
  if (v8 >= a3)
  {
    v13 = 0u;
    if (v8 >= a2)
      goto LABEL_20;
  }
  else
  {
    if (v10 <= 3)
      v11 = ((a3 - v8 + 0xFFFF) >> (8
                                  * (((((((((v9 + 16) & ~(_BYTE)v9)
                                         + *(_BYTE *)(v6 + 64)
                                         + (((v9 | 7) + *(_BYTE *)(v5 + 64)) & ~(v9 | 7))
                                         + 7) & 0xF8)
                                       - 121) & 0xFC)
                                     + 15) & 0xF8)
                                   + 10)))
          + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    if (v8 >= a2)
LABEL_20:
      __asm { BR              X6 }
  }
  v14 = ~v8 + a2;
  bzero(a1, ((((((((v9 + 16) & ~v9) + *(_QWORD *)(v6 + 64) + (((v9 | 7) + *(_QWORD *)(v5 + 64)) & ~(v9 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8)+ 135) & 0xFFFFFFFFFFFFFFFCLL)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 10);
  if (v10 > 3)
    *a1 = v14;
  else
    *(_WORD *)a1 = v14;
  __asm { BR              X11 }
}

void sub_187102118(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x18710229CLL);
}

void sub_187102120(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187102128);
  JUMPOUT(0x18710229CLL);
}

void sub_1871021B8(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x18710229CLL);
}

void sub_1871021C0(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x18710229CLL);
}

uint64_t sub_1871021C8@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, size_t a3@<X8>)
{
  void *v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_WORD *)(v10 + v11) = 0;
  if (!a2)
    goto LABEL_10;
  if (v6 < v8)
  {
    v3 = (void *)((v9 + v10) & a1);
    if (v8 >= a2)
      JUMPOUT(0x1871021D4);
    if ((_DWORD)a3)
    {
      if (a3 <= 3)
        v4 = a3;
      else
        v4 = 4;
      bzero(v3, a3);
      __asm { BR              X10 }
    }
LABEL_10:
    JUMPOUT(0x18710229CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v7 + 56))(v10);
}

void sub_187102234()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x18710229CLL);
}

void sub_187102258()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x18710229CLL);
}

void sub_187102260()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x18710229CLL);
}

void sub_187102270()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x18710229CLL);
}

uint64_t destroy for TableViewListCore.UpdateBridgedState()
{
  return swift_unknownObjectWeakDestroy();
}

_DWORD *assignWithCopy for TableViewListCore.UpdateBridgedState(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

_DWORD *initializeWithTake for TableViewListCore.UpdateBridgedState(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakTakeInit();
  return a1;
}

_DWORD *assignWithTake for TableViewListCore.UpdateBridgedState(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

void base witness table accessor for _AttributeBody in TableViewListCore<A, B>.ScrollViewPreferenceProvider()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in TableViewListCore<A, B>.EnvironmentTransform()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in TableViewListCore<A, B>.MakeRepresentable()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in TableViewListCore<A, B>.ScrollViewProvider()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in TableViewListCore<A, B>.UpdateBridgedState()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined init with take of ContentScrollViewBox(uint64_t a1, uint64_t a2)
{
  initializeWithTake for ContentScrollViewBox(a2, a1, (uint64_t)&type metadata for ContentScrollViewBox);
  return a2;
}

void type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for _UIHostingView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
  }
}

id specialized static ListRepresentable.dismantleViewProvider(_:coordinator:)(void *a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = objc_msgSend(a1, sel_refreshControl);
  if (v2)
  {
    v3 = v2;
    type metadata accessor for UIKitRefreshControl();
    v4 = swift_dynamicCastClass();
    if (v4)
    {
      v5 = (void *)v4;
      if (*(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_currentTask))
      {
        v6 = swift_retain();
        MEMORY[0x18D75D204](v6, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
        swift_release();
      }
      objc_msgSend(v5, sel_endRefreshing);
    }

  }
  return objc_msgSend(a1, sel_setRefreshControl_, 0);
}

uint64_t sub_187102518()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_18710253C()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in UIScrollView.updateRefreshControl(_:)()
{
  uint64_t *v0;

  closure #1 in UIScrollView.updateRefreshControl(_:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t partial apply for closure #2 in ListRepresentable.makeViewProvider(context:)()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  __int128 v13[2];
  char v14;

  outlined init with copy of TableColumnCollection.Backing(v1, (uint64_t)v13);
  if ((v14 & 1) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)&v13[0] + 16);
    swift_bridgeObjectRelease();
    if (v3)
    {
LABEL_3:
      TableColumnCollection.subscript.getter(0, a1);
      v4 = type metadata accessor for TableColumnCollection.Entry(0);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 0, 1, v4);
    }
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v13, (uint64_t)v10);
    v6 = v11;
    v7 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    if (v8)
      goto LABEL_3;
  }
  v9 = type metadata accessor for TableColumnCollection.Entry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, 1, 1, v9);
}

{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  void (*v13)(_BYTE *, uint64_t);
  uint64_t v14;
  void (*v16)(_BYTE *, _QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[32];

  v2 = type metadata accessor for AttributedString.Runs.Index();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF150];
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v21[-v10];
  type metadata accessor for AttributedString.Runs();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], MEMORY[0x1E0CAF180]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, v3, MEMORY[0x1E0CAF158]);
  v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  v13 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v13(v7, v2);
  if ((v12 & 1) != 0)
  {
    v13(v11, v2);
    v14 = type metadata accessor for AttributedString.Runs.Run();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
  else
  {
    v16 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
    v18 = v17;
    v19 = type metadata accessor for AttributedString.Runs.Run();
    v20 = *(_QWORD *)(v19 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a1, v18, v19);
    v16(v21, 0);
    v13(v11, v2);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(a1, 0, 1, v19);
  }
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  _BYTE v8[96];

  result = specialized Dictionary.startIndex.getter();
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_BYTE *)(a2 + 96) = -1;
  }
  else
  {
    v7 = specialized Dictionary.subscript.getter((uint64_t)v8, result, v5, 0, a1);
    *(_QWORD *)a2 = v7;
    outlined init with copy of NavigationDestinationPresentation((uint64_t)v8, a2 + 8);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v7, (uint64_t (*)(_QWORD))type metadata accessor for (key: Namespace.ID, value: NavigationDestinationPresentation));
  }
  return result;
}

{
  uint64_t result;
  int v5;
  char v6;

  result = specialized Set.startIndex.getter(a1);
  if ((v6 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result != 1 << *(_BYTE *)(a1 + 32))
    return specialized Set.subscript.getter(result, v5, a1, a2);
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t WeakValue;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  if ((a2 & 1) == 0)
  {
    WeakValue = AGGraphGetWeakValue();
    if (!WeakValue || !*(_QWORD *)(*(_QWORD *)WeakValue + 16))
      goto LABEL_4;
LABEL_6:
    PlatformItemCollection.subscript.getter(0, a1, a2 & 1, a3);
    v7 = type metadata accessor for PlatformItemList.Item();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a3;
    v10 = 0;
    return v8(v9, v10, 1, v7);
  }
  if (*(_QWORD *)(a1 + 16))
    goto LABEL_6;
LABEL_4:
  v7 = type metadata accessor for PlatformItemList.Item();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v9 = a3;
  v10 = 1;
  return v8(v9, v10, 1, v7);
}

uint64_t specialized Collection.first.getter(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v4 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v5 = __CocoaSet.startIndex.getter();
    v7 = v6;
    v8 = __CocoaSet.endIndex.getter();
    v10 = MEMORY[0x18D75E1DC](v5, v7, v8, v9);
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
    {
LABEL_3:
      outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v5, v7, v4 != 0);
      return 0;
    }
LABEL_7:
    specialized Set.subscript.getter(v5, v7, v4 != 0, a1, a2);
    v11 = v15;
    outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v5, v7, v4 != 0);
    return v11;
  }
  result = specialized _NativeSet.startIndex.getter(a1);
  if ((v14 & 1) == 0)
  {
    v7 = v13;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v13)
    {
      v5 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
        goto LABEL_3;
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t specialized Collection.first.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9[3];

  v2 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      if ((v2 & 0xC000000000000001) != 0)
      {
        v5 = MEMORY[0x18D75E3BC](0, v2);
        v4 = v5;
      }
      else
      {
        if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_13:
          __break(1u);
          return result;
        }
        v4 = *(_QWORD *)(v2 + 32);
        v5 = swift_retain();
      }
      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v4 + 120))(&v7, v5);
      result = swift_release();
      if (v8)
      {
        outlined init with take of Decodable & Encodable & Hashable(&v7, (uint64_t)v9);
        return outlined init with take of Decodable & Encodable & Hashable(v9, a2);
      }
      goto LABEL_13;
    }
  }
  else if (*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

unint64_t specialized Collection.first.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v5;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
        _StringObject.sharedUTF8.getter();
      v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, Swift::UInt a2, Swift::UInt a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16[2];
  uint64_t v17;

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of OptionalBinaryInteger((__int128 *)a1, (uint64_t)v16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of LocationBasedSensoryFeedback?(a1, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType);
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v10 & 1) != 0)
    {
      v11 = v9;
      v12 = swift_isUniquelyReferenced_nonNull_native();
      v13 = *v3;
      v15 = *v4;
      *v4 = 0x8000000000000000;
      if ((v12 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v13 = v15;
      }
      outlined init with take of OptionalBinaryInteger((__int128 *)(*(_QWORD *)(v13 + 56) + 40 * v11), (uint64_t)v16);
      specialized _NativeDictionary._delete(at:)(v11, v13);
      *v4 = v13;
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = 0;
      memset(v16, 0, sizeof(v16));
    }
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v16, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, Swift::UInt32 a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[11];

  v3 = v2;
  if (*(_QWORD *)(a1 + 16))
  {
    outlined init with take of ConfirmationDialog(a1, (uint64_t)v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t)&type metadata for ConfirmationDialog);
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v11 = v13;
      }
      outlined init with take of ConfirmationDialog(*(_QWORD *)(v11 + 56) + 176 * v9, (uint64_t)v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v14, 0, 169);
    }
    return outlined destroy of AccessibilityTableContext?((uint64_t)v14, &lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t)&type metadata for ConfirmationDialog);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v3 = v2;
  if (*(_QWORD *)(a1 + 8) == 1)
  {
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v6 & 1) != 0)
    {
      v7 = v5;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v9 = *v2;
      v22 = *v3;
      *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v9 = v22;
      }
      v10 = *(_QWORD *)(v9 + 56) + 120 * v7;
      v12 = *(_OWORD *)(v10 + 32);
      v11 = *(_OWORD *)(v10 + 48);
      v13 = *(_OWORD *)(v10 + 16);
      v24 = *(_OWORD *)v10;
      v25 = v13;
      v26 = v12;
      v27 = v11;
      v14 = *(_OWORD *)(v10 + 64);
      v15 = *(_OWORD *)(v10 + 80);
      v16 = *(_OWORD *)(v10 + 96);
      v31 = *(_QWORD *)(v10 + 112);
      v29 = v15;
      v30 = v16;
      v28 = v14;
      specialized _NativeDictionary._delete(at:)(v7, v9);
      *v3 = v9;
      swift_bridgeObjectRelease();
    }
    else
    {
      v24 = xmmword_187BF9840;
      v25 = 0u;
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      v30 = 0u;
      v31 = 0;
    }
    return outlined destroy of AccessibilityTableContext?((uint64_t)&v24, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
  }
  else
  {
    v17 = *(_OWORD *)(a1 + 80);
    v28 = *(_OWORD *)(a1 + 64);
    v29 = v17;
    v30 = *(_OWORD *)(a1 + 96);
    v31 = *(_QWORD *)(a1 + 112);
    v18 = *(_OWORD *)(a1 + 16);
    v24 = *(_OWORD *)a1;
    v25 = v18;
    v19 = *(_OWORD *)(a1 + 48);
    v26 = *(_OWORD *)(a1 + 32);
    v27 = v19;
    v20 = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v24, a2, v20);
    *v2 = v23;
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v15);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v13;
    return swift_bridgeObjectRelease();
  }
  else
  {
    v7 = MEMORY[0x1E0DEE9B8];
    outlined destroy of AccessibilityTableContext?(a1, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v9 & 1) != 0)
    {
      v10 = v8;
      v11 = swift_isUniquelyReferenced_nonNull_native();
      v12 = *v2;
      v14 = *v3;
      *v3 = 0x8000000000000000;
      if ((v11 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v12 = v14;
      }
      outlined init with take of Any((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v10), v15);
      specialized _NativeDictionary._delete(at:)(v10, v12);
      *v3 = v12;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v15, 0, sizeof(v15));
    }
    return outlined destroy of AccessibilityTableContext?((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for Any?, v7 + 8);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  char v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD v20[4];
  char v21;
  char v22[8];
  unint64_t v23;
  unsigned __int8 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v3 = v2;
  v5 = MEMORY[0x1E0DEB940];
  outlined init with take of WeakBox<Swift.AnyObject>(a1, (uint64_t)v20, &lazy cache variable for type metadata for NavigationSplitViewColumnWidth?, (uint64_t)&type metadata for NavigationSplitViewColumnWidth, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v6 = v20[0];
  v7 = v20[1];
  v8 = v20[2];
  v9 = v20[3];
  v10 = v21;
  outlined init with take of WeakBox<Swift.AnyObject>(a1, (uint64_t)v22, &lazy cache variable for type metadata for NavigationSplitViewColumnWidth?, (uint64_t)&type metadata for NavigationSplitViewColumnWidth, (uint64_t (*)(_QWORD, uint64_t))v5);
  if (v23 >> 1 != 0xFFFFFFFF || v24 >= 2u)
  {
    *(_QWORD *)&v25 = v6;
    *((_QWORD *)&v25 + 1) = v7;
    v26 = v8;
    v27 = v9;
    v28 = v10;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v25, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v19;
    return swift_bridgeObjectRelease();
  }
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != 0)
  {
    v15 = result;
    v16 = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v3;
    *(_QWORD *)&v25 = *v3;
    *v3 = 0x8000000000000000;
    if (!v16)
    {
      specialized _NativeDictionary.copy()();
      v17 = v25;
    }
    specialized _NativeDictionary._delete(at:)(v15, v17);
    *v3 = v17;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized Dictionary.subscript.setter(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _OWORD v9[17];

  if (a1[264] == 255)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)a1, (unint64_t *)&lazy cache variable for type metadata for TabEntry?, (uint64_t)&type metadata for TabEntry);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v9);
    swift_bridgeObjectRelease();
    return outlined destroy of AccessibilityTableContext?((uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for TabEntry?, (uint64_t)&type metadata for TabEntry);
  }
  else
  {
    outlined init with take of TabEntry(a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

unint64_t specialized Dictionary.subscript.setter(uint64_t a1, Swift::UInt a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t result;
  char v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v2;
  if (a1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v12;
  }
  else
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v8 & 1) == 0)
      return result;
    v9 = result;
    v10 = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v2;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!v10)
    {
      specialized _NativeDictionary.copy()();
      v11 = v13;
    }
    specialized _NativeDictionary._delete(at:)(v9, v11);
    *v3 = v11;
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t SwiftUIGlueClass()
{
  return type metadata accessor for SwiftUIGlue(0);
}

uint64_t type metadata accessor for SwiftUIGlue(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SwiftUIGlue);
}

uint64_t SwiftUIGlue.maxVelocity(_:)()
{
  type metadata accessor for ViewGraph();
  MEMORY[0x18D75C5F8]();
  swift_beginAccess();
  ViewGraph.NextUpdate.maxVelocity(_:)();
  swift_endAccess();
  return swift_release();
}

uint64_t SwiftUIGlue.nextUpdate(nextTime:interval:reason:)(double *a1, uint64_t a2, double a3)
{
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  int v12;

  v5 = *a1;
  type metadata accessor for ViewGraph();
  v6 = MEMORY[0x18D75C5F8]();
  swift_beginAccess();
  v7 = *(double *)(v6 + 376);
  if (v5 < v7)
    v7 = v5;
  *(double *)(v6 + 376) = v7;
  v8 = swift_release();
  v9 = MEMORY[0x18D75C5F8](v8);
  swift_beginAccess();
  v10 = *(double *)(v9 + 384);
  if (a3 == 0.0)
  {
    if (v10 <= 0.0166666667)
      goto LABEL_9;
    v10 = INFINITY;
  }
  else if (v10 > a3)
  {
    v10 = a3;
  }
  *(double *)(v9 + 384) = v10;
LABEL_9:
  if ((a2 & 0x100000000) == 0)
    specialized Set._Variant.insert(_:)(&v12, a2);
  swift_endAccess();
  return swift_release();
}

Swift::Bool __swiftcall SwiftUIGlue.hasTestHost()()
{
  uint64_t v0;

  v0 = static _TestApp.host.getter();
  if (v0)
    swift_unknownObjectRelease();
  return v0 != 0;
}

uint64_t SwiftUIGlue.isInstantiated(graph:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = AGGraphRef.viewGraph()();
  swift_beginAccess();
  v1 = *(unsigned __int8 *)(v0 + 128);
  swift_release();
  return v1;
}

void SwiftUIGlue.defaultImplicitRootType.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0CE25D8];
  *a1 = MEMORY[0x1E0CE25F0];
  a1[1] = v1;
}

double SwiftUIGlue.defaultSpacing.getter()
{
  return 8.0;
}

uint64_t SwiftUIGlue.makeDefaultLayoutComputer()()
{
  type metadata accessor for ViewGraph();
  MEMORY[0x18D75C5F8]();
  ViewGraph.$defaultLayoutComputer.getter();
  swift_release();
  return CoreGlue.MakeDefaultLayoutComputerResult.init(_:)();
}

uint64_t SwiftUIGlue.makeDefaultLayoutComputer(graph:)()
{
  AGGraphRef.viewGraph()();
  ViewGraph.$defaultLayoutComputer.getter();
  swift_release();
  return CoreGlue.MakeDefaultLayoutComputerResult.init(_:)();
}

uint64_t SwiftUIGlue.startChildGeometries(_:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  void *v3;
  Class isa;

  swift_retain();
  CoreGlue.StartChildGeometriesParameters.origin.getter();
  lazy protocol witness table accessor for type BeginChildGeometries and conformance BeginChildGeometries();
  v0 = static ProtobufEncoder.encoding<A>(_:)();
  v2 = v1;
  swift_release();
  swift_retain();
  v3 = (void *)LayoutTrace.Recorder.graph.getter();
  swift_release();
  static AGNamedTraceEventID.childGeometries.getter();
  outlined copy of Data._Representation(v0, v2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  AGGraphAddNamedTraceEvent();

  outlined consume of Data._Representation(v0, v2);
  return outlined consume of Data._Representation(v0, v2);
}

uint64_t SwiftUIGlue.endChildGeometries(_:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  void *v4;
  Class isa;

  swift_retain();
  v0 = swift_bridgeObjectRetain();
  specialized EndChildGeometries.init(_:)(v0);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type EndChildGeometries and conformance EndChildGeometries();
  v1 = static ProtobufEncoder.encoding<A>(_:)();
  v3 = v2;
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  v4 = (void *)LayoutTrace.Recorder.graph.getter();
  swift_release();
  static AGNamedTraceEventID.childGeometries.getter();
  outlined copy of Data._Representation(v1, v3);
  isa = Data._bridgeToObjectiveC()().super.isa;
  AGGraphAddNamedTraceEvent();

  outlined consume of Data._Representation(v1, v3);
  return outlined consume of Data._Representation(v1, v3);
}

uint64_t SwiftUIGlue.makeLayoutView<A>(root:inputs:body:)()
{
  return static Layout.makeLayoutView(root:inputs:body:)();
}

uint64_t SwiftUIGlue.addDisplayListTreeValue(outputs:)()
{
  uint64_t result;

  result = _ViewOutputs.subscript.getter();
  if ((result & 0x100000000) != 0)
  {
    __break(1u);
  }
  else
  {
    result = AGSubgraphShouldRecordTree();
    if ((_DWORD)result)
      return AGSubgraphAddTreeValue();
  }
  return result;
}

uint64_t SwiftUIGlue.updateData(_:value:)()
{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  __int16 v3;
  char v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  uint64_t v9;

  AGTreeValueGetValue();
  v0 = MEMORY[0x1E0CE1148];
  Value = AGGraphGetValue();
  v2 = *(_QWORD *)Value;
  v3 = *(_WORD *)(Value + 8);
  v4 = *(_BYTE *)(Value + 10);
  v9 = v0;
  v6 = v2;
  v7 = v3;
  v8 = v4;
  swift_bridgeObjectRetain();
  return specialized Dictionary.subscript.setter((uint64_t)&v6, 8);
}

uint64_t SwiftUIGlue.makeForEachView<A, B, C>(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X7>, _QWORD *a4@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a1;
  LODWORD(v14) = *a1;
  type metadata accessor for ForEach();
  type metadata accessor for _GraphValue();
  v12 = type metadata accessor for ForEachSubviewCollection(255, a2, a3, v7);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>, v12);
  lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
  type metadata accessor for ForEach();
  type metadata accessor for _GraphValue();
  result = swift_dynamicCast();
  if ((_DWORD)result
    || (LODWORD(v14) = v6,
        v13 = type metadata accessor for ForEachSectionCollection(255, a2, a3, v10),
        MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSectionCollection<A>, v13),
        lazy protocol witness table accessor for type SectionConfiguration.ID and conformance SectionConfiguration.ID(),
        type metadata accessor for ForEach(),
        type metadata accessor for _GraphValue(),
        result = swift_dynamicCast(),
        (_DWORD)result))
  {
    MEMORY[0x1E0C80A78](result, v9);
    _GraphValue.subscript.getter();
    result = static AnyView._makeView(view:inputs:)();
    *a4 = v14;
    a4[1] = v15;
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  return result;
}

uint64_t closure #2 in SwiftUIGlue.makeForEachViewList<A, B, C>(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];
  uint64_t v16;
  ValueMetadata *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v16 = type metadata accessor for ForEachSectionCollection(255, a4, a7, a4);
  v17 = &type metadata for SectionConfiguration.ID;
  v18 = a4;
  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSectionCollection<A>, v16);
  v20 = lazy protocol witness table accessor for type SectionConfiguration.ID and conformance SectionConfiguration.ID();
  v15[2] = type metadata accessor for ForEach();
  v11 = MEMORY[0x1E0CE7518];
  v12 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a8, (uint64_t)v15, v11, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v13);
  return v16;
}

double SwiftUIGlue.makeForEachViewList<A, B, C>(view:inputs:)@<D0>(uint64_t a1@<X4>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v11;
  uint64_t v12;

  type metadata accessor for ForEach();
  type metadata accessor for _GraphValue();
  v11 = type metadata accessor for ForEachSubviewCollection(255, a1, a2, v5);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>, v11);
  lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
  type metadata accessor for ForEach();
  type metadata accessor for _GraphValue();
  v6 = swift_dynamicCast();
  if ((_DWORD)v6
    || (v12 = type metadata accessor for ForEachSectionCollection(255, a1, a2, v8),
        MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSectionCollection<A>, v12),
        lazy protocol witness table accessor for type SectionConfiguration.ID and conformance SectionConfiguration.ID(),
        type metadata accessor for ForEach(),
        type metadata accessor for _GraphValue(),
        v6 = swift_dynamicCast(),
        (_DWORD)v6))
  {
    MEMORY[0x1E0C80A78](v6, v7);
    _GraphValue.subscript.getter();
    static AnyView._makeViewList(view:inputs:)();
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 255;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_BYTE *)(a3 + 64) = 0;
  }
  return result;
}

uint64_t closure #1 in SwiftUIGlue.makeForEachView<A, B, C>(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];
  uint64_t v16;
  ValueMetadata *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v16 = type metadata accessor for ForEachSubviewCollection(255, a4, a7, a4);
  v17 = &type metadata for Subview.ID;
  v18 = a4;
  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>, v16);
  v20 = lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
  v15[2] = type metadata accessor for ForEach();
  v11 = MEMORY[0x1E0CE7518];
  v12 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a8, (uint64_t)v15, v11, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v13);
  return v16;
}

uint64_t SwiftUIGlue.defaultOpenURLAction(env:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = a1[1];
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  swift_retain();
  swift_retain();
  return OpenURLAction.init(isDefault:handler:)();
}

void closure #1 in SwiftUIGlue.defaultOpenURLAction(env:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  void *v8;
  id v9;
  NSURL *v10;
  objc_class *v11;
  Class isa;
  void *v13;
  id v14;
  NSURL *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v18 = a4;
  v19 = a5;
  v7 = (void *)EnvironmentValues.sceneSession.getter();
  if (v7
    && (v8 = v7, v9 = objc_msgSend(v7, sel_scene, v18, v19), v8, v9))
  {
    URL._bridgeToObjectiveC()(v10);
    isa = v11;
    v22 = a2;
    v23 = a3;
    v18 = MEMORY[0x1E0C809B0];
    v19 = 1107296256;
    v20 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    v21 = &block_descriptor_9_1;
    v13 = _Block_copy(&v18);
    swift_retain();
    swift_release();
    objc_msgSend(v9, sel_openURL_options_completionHandler_, isa, 0, v13);
    _Block_release(v13);
  }
  else
  {
    v14 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
    URL._bridgeToObjectiveC()(v15);
    v9 = v16;
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    type metadata accessor for UIApplicationOpenExternalURLOptionsKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIApplicationOpenExternalURLOptionsKey, (uint64_t)&protocol conformance descriptor for UIApplicationOpenExternalURLOptionsKey);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v22 = a2;
    v23 = a3;
    v18 = MEMORY[0x1E0C809B0];
    v19 = 1107296256;
    v20 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    v21 = &block_descriptor_6;
    v17 = _Block_copy(&v18);
    swift_retain();
    swift_release();
    objc_msgSend(v14, sel_openURL_options_completionHandler_, v9, isa, v17);
    _Block_release(v17);

  }
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t SwiftUIGlue.defaultOpenSensitiveURLAction()()
{
  return OpenURLAction.init(isDefault:handler:)();
}

void closure #1 in SwiftUIGlue.defaultOpenSensitiveURLAction()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  NSURL *v15;
  void *v16;
  void *v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  void *v22;
  id v23;
  uint64_t v24;
  id v25;
  _QWORD aBlock[6];

  v24 = a2;
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5, v8);
  v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CA5938]), sel_init);
  objc_msgSend(v25, sel_setSensitive_, 1);
  v9 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v10 = objc_msgSend(v9, sel_connectedScenes);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScene);
  lazy protocol witness table accessor for type UIScene and conformance NSObject();
  v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v12 = (void *)specialized Collection.first.getter(v11, &lazy cache variable for type metadata for UIScene);
  swift_bridgeObjectRelease();
  if (v12)
  {
    v13 = objc_msgSend(v12, sel__currentOpenApplicationEndpoint);

  }
  else
  {
    v13 = 0;
  }
  objc_msgSend(v25, sel_setTargetConnectionEndpoint_, v13, v24);

  v14 = objc_msgSend((id)objc_opt_self(), sel_defaultWorkspace);
  if (v14)
  {
    v16 = v14;
    URL._bridgeToObjectiveC()(v15);
    v18 = v17;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
    v19 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v20 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v20 + v19, (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
    v21 = (uint64_t *)(v20 + ((v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8));
    *v21 = v24;
    v21[1] = a3;
    aBlock[4] = partial apply for closure #1 in closure #1 in SwiftUIGlue.defaultOpenSensitiveURLAction();
    aBlock[5] = v20;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [String : Any]?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_7;
    v22 = _Block_copy(aBlock);
    v23 = v25;
    swift_retain();
    swift_release();
    objc_msgSend(v16, sel_openURL_configuration_completionHandler_, v18, v23, v22);

    _Block_release(v22);
  }
  else
  {

  }
}

uint64_t closure #1 in closure #1 in SwiftUIGlue.defaultOpenSensitiveURLAction()(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(BOOL))
{
  id v6;

  if (a2)
  {
    MEMORY[0x1E0C80A78](a1, a2);
    v6 = a2;
    static Log.internalWarning(_:)();

  }
  return a4(a2 == 0);
}

uint64_t implicit closure #1 in closure #1 in closure #1 in SwiftUIGlue.defaultOpenSensitiveURLAction()()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;

  _StringGuts.grow(_:)(42);
  v0._object = (void *)0x8000000187BD79D0;
  v0._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v0);
  type metadata accessor for URL();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x3A726F727245202ELL;
  v2._object = (void *)0xE900000000000020;
  String.append(_:)(v2);
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  return 0;
}

id SwiftUIGlue.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t SwiftUIGlue2Class()
{
  return type metadata accessor for SwiftUIGlue2(0);
}

Swift::Bool_optional __swiftcall SwiftUIGlue2.isStatusBarHidden()()
{
  id v0;
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  Swift::Bool_optional v7;

  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v1 = objc_msgSend(v0, sel_connectedScenes);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScene);
  lazy protocol witness table accessor for type UIScene and conformance NSObject();
  v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = (void *)specialized Collection.first.getter(v2, &lazy cache variable for type metadata for UIScene);
  swift_bridgeObjectRelease();
  if (!v3)
    return (Swift::Bool_optional)2;
  objc_opt_self();
  v4 = (void *)swift_dynamicCastObjCClass();
  if (v4)
  {
    v5 = objc_msgSend(v4, sel_statusBarManager);
    if (v5)
    {
      v6 = v5;
      v7.value = objc_msgSend(v5, sel_isStatusBarHidden);

    }
    else
    {
      v7.value = 0;
    }

  }
  else
  {

    return (Swift::Bool_optional)2;
  }
  return v7;
}

uint64_t SwiftUIGlue2.configureEmptyEnvironment(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;

  v1 = *a1;
  v2 = one-time initialization token for configuredForPlatform;
  result = swift_retain();
  if (v2 != -1)
    result = swift_once();
  v4 = static EnvironmentValues.configuredForPlatform;
  if (v1)
  {
    result = swift_release();
    if (v4)
      v5 = v1 == v4;
    else
      v5 = 0;
    if (!v5)
      return EnvironmentValues._configureForPlatform(traitCollection:)(0);
  }
  else if (static EnvironmentValues.configuredForPlatform)
  {
    swift_retain();
    return EnvironmentValues.plist.setter();
  }
  return result;
}

uint64_t SwiftUIGlue2.makeRootView(base:rootFocusScope:)()
{
  static EdgeInsets.zero.getter();
  _SafeAreaInsetsModifier.init(insets:nextInsets:)();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaInsetsModifier>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE5BC8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaInsetsModifier> and conformance <> ModifiedContent<A, B>();
  swift_retain();
  return AnyView.init<A>(_:)();
}

void SwiftUIGlue2.systemDefaultDynamicTypeSize.getter(char *a1@<X8>)
{
  id v2;
  char v3;
  char v4;

  v2 = (id)_UIApplicationDefaultContentSizeCategory();
  DynamicTypeSize.init(uiSizeCategory:)(v2, &v4);
  v3 = v4;
  if (v4 == 12)
    v3 = 3;
  *a1 = v3;
}

void SwiftUIGlue2.codableAttachmentCellType.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t SwiftUIGlue2.linkURL(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  _OWORD *v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;
  char v11;
  uint64_t v12;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;
  _OWORD v19[6];
  _OWORD v20[2];
  __int128 v21[2];
  _OWORD *v22;

  v3 = *(_OWORD *)(a1 + 16);
  v21[0] = *(_OWORD *)a1;
  v21[1] = v3;
  v4 = *(_OWORD **)(a1 + 32);
  v22 = v4;
  outlined retain of CoreGlue2.LinkURLParameters((uint64_t)v21);
  v5 = ResolvedStyledText.storage.getter();
  if (v5)
  {
    v6 = (void *)v5;
    swift_beginAccess();
    v7 = v4[6];
    v19[4] = v4[5];
    v19[5] = v7;
    v20[0] = v4[7];
    *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)((char *)v4 + 121);
    v8 = v4[2];
    v19[0] = v4[1];
    v19[1] = v8;
    v9 = v4[4];
    v19[2] = v4[3];
    v19[3] = v9;
    swift_beginAccess();
    outlined retain of CoreGlue2.LinkURLParameters((uint64_t)v21);
    outlined retain of TextLayoutProperties((uint64_t)v19);
    ResolvedStyledText.scaleFactorOverride.getter();
    v11 = v10;
    outlined release of ContextMenuResponderFilter((uint64_t)v21);
    CoreGlue2.LinkURLParameters.size.getter();
    ResolvedStyledText.linkURLMetrics(in:layoutMargins:)();
    if ((v11 & 1) != 0)
      TextLayoutProperties.minScaleFactor.getter();
    CoreGlue2.LinkURLParameters.size.getter();
    v15 = v14;
    v17 = v16;
    outlined retain of CoreGlue2.LinkURLParameters((uint64_t)v21);
    v18 = v6;
    specialized static NSLayoutManager.with<A>(_:drawingScale:size:layoutProperties:_:)(v18, (uint64_t)v19, v21, v18, a2, v15, v17);
    outlined release of ContextMenuResponderFilter((uint64_t)v21);

    return outlined release of TextLayoutProperties((uint64_t)v19);
  }
  else
  {
    outlined release of ContextMenuResponderFilter((uint64_t)v21);
    v12 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a2, 1, 1, v12);
  }
}

uint64_t closure #1 in SwiftUIGlue2.linkURL(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  __int128 v23;
  CGFloat v24;
  CGFloat v25;
  uint64_t v26;
  uint64_t v28;
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  CGPoint v33;
  CGRect v34;

  v10 = a3[1];
  v30 = *a3;
  v31 = v10;
  v32 = *((_QWORD *)a3 + 4);
  CoreGlue2.LinkURLParameters.point.getter();
  v11 = (unint64_t)objc_msgSend(a1, sel_characterIndexForPoint_inTextContainer_fractionOfDistanceBetweenInsertionPoints_, a2, 0);
  if ((v11 & 0x8000000000000000) != 0)
    goto LABEL_6;
  v12 = v11;
  if (v11 == NSNotFound.getter())
    goto LABEL_6;
  v13 = objc_msgSend(a1, sel_glyphRangeForCharacterRange_actualCharacterRange_, v12, 1, 0);
  objc_msgSend(a1, sel_boundingRectForGlyphRange_inTextContainer_, v13, v14, a2);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = a3[1];
  v30 = *a3;
  v31 = v23;
  v32 = *((_QWORD *)a3 + 4);
  CoreGlue2.LinkURLParameters.point.getter();
  v33.x = v24;
  v33.y = v25;
  v34.origin.x = v16;
  v34.origin.y = v18;
  v34.size.width = v20;
  v34.size.height = v22;
  if (!CGRectContainsPoint(v34, v33))
  {
LABEL_6:
    v26 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(a5, 1, 1, v26);
  }
  else
  {
    if (objc_msgSend(a4, sel_attribute_atIndex_effectiveRange_, *MEMORY[0x1E0DC1160], v12, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v29, 0, sizeof(v29));
    }
    v28 = MEMORY[0x1E0DEE9B8] + 8;
    outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v29, (uint64_t)&v30, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined init with copy of Any?((uint64_t)&v30, (uint64_t)v29);
    URL.init(urlValue:)();
    return outlined destroy of AccessibilityTableContext?((uint64_t)&v30, (unint64_t *)&lazy cache variable for type metadata for Any?, v28);
  }
}

uint64_t SwiftUIGlue2.transformingEquivalentAttributes(_:)@<X0>(uint64_t a1@<X8>)
{
  return AttributedString.transformingUIKitAttributedForSwiftUI()(a1);
}

_QWORD *@objc SwiftUIGlue2.makeSummarySymbolHost(isOn:font:foregroundColor:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  _QWORD *v11;

  v8 = a4;
  v9 = a5;
  v10 = a1;
  v11 = specialized SwiftUIGlue2.makeSummarySymbolHost(isOn:font:foregroundColor:)(a3, v8, v9);

  return v11;
}

id @objc SwiftUIGlue.init()(void *a1)
{
  objc_super v2;

  v2.receiver = a1;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

unint64_t lazy protocol witness table accessor for type BeginChildGeometries and conformance BeginChildGeometries()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BeginChildGeometries and conformance BeginChildGeometries;
  if (!lazy protocol witness table cache variable for type BeginChildGeometries and conformance BeginChildGeometries)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BeginChildGeometries, &type metadata for BeginChildGeometries);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BeginChildGeometries and conformance BeginChildGeometries);
  }
  return result;
}

unint64_t _StringGuts.validateScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    result = _StringGuts.validateSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t _StringGuts.validateSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
    __break(1u);
  return result;
}

unint64_t _StringGuts.scalarAlignSlow(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v7 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL))
          goto LABEL_14;
      }
      else
      {
        v12 = result >> 16;
        v6 = _StringObject.sharedUTF8.getter();
        v5 = v12;
        if (v12 == v10)
          goto LABEL_14;
      }
      if ((*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          v7 = v5 - 1;
          v8 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      v7 = v5;
      return v7 << 16;
    }
    v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v9 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v9)
      return _StringGuts.foreignScalarAlign(_:)();
  }
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  specialized Set.subscript.getter(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  id v16;
  unint64_t *v17;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter() == *(_DWORD *)(a4 + 36))
      {
        __CocoaSet.Index.element.getter();
        type metadata accessor for NSObject(0, a5);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        a5 = v17;
        swift_unknownObjectRelease();
        v9 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v10 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v9 & ~v10;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v11 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v12 = static NSObject.== infix(_:_:)();

          if ((v12 & 1) == 0)
          {
            v13 = ~v10;
            do
            {
              v7 = (v7 + 1) & v13;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v14 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v15 = static NSObject.== infix(_:_:)();

            }
            while ((v15 & 1) == 0);
          }

LABEL_20:
          v16 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  MEMORY[0x18D75E218](a1, a2, v8);
  type metadata accessor for NSObject(0, a5);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
}

uint64_t specialized Set.subscript.getter@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (result < 0 || 1 << *(_BYTE *)(a3 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
    return outlined init with copy of AnyHashable(*(_QWORD *)(a3 + 48) + 40 * result, a4);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type EndChildGeometries and conformance EndChildGeometries()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EndChildGeometries and conformance EndChildGeometries;
  if (!lazy protocol witness table cache variable for type EndChildGeometries and conformance EndChildGeometries)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EndChildGeometries, &type metadata for EndChildGeometries);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EndChildGeometries and conformance EndChildGeometries);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SectionConfiguration.ID and conformance SectionConfiguration.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionConfiguration.ID and conformance SectionConfiguration.ID;
  if (!lazy protocol witness table cache variable for type SectionConfiguration.ID and conformance SectionConfiguration.ID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionConfiguration.ID, &type metadata for SectionConfiguration.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionConfiguration.ID and conformance SectionConfiguration.ID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionConfiguration.ID and conformance SectionConfiguration.ID;
  if (!lazy protocol witness table cache variable for type SectionConfiguration.ID and conformance SectionConfiguration.ID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionConfiguration.ID, &type metadata for SectionConfiguration.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionConfiguration.ID and conformance SectionConfiguration.ID);
  }
  return result;
}

uint64_t partial apply for closure #2 in SwiftUIGlue.makeForEachView<A, B, C>(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #2 in SwiftUIGlue.makeForEachView<A, B, C>(view:inputs:)(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, closure #2 in SwiftUIGlue.makeForEachViewList<A, B, C>(view:inputs:));
}

uint64_t partial apply for closure #1 in SwiftUIGlue.makeForEachView<A, B, C>(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #2 in SwiftUIGlue.makeForEachView<A, B, C>(view:inputs:)(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, closure #1 in SwiftUIGlue.makeForEachView<A, B, C>(view:inputs:));
}

uint64_t partial apply for closure #1 in SwiftUIGlue.makeForEachViewList<A, B, C>(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #2 in SwiftUIGlue.makeForEachView<A, B, C>(view:inputs:)(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_6, closure #1 in SwiftUIGlue.makeForEachView<A, B, C>(view:inputs:));
}

uint64_t sub_187106BD8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in SwiftUIGlue.defaultOpenURLAction(env:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  closure #1 in SwiftUIGlue.defaultOpenURLAction(env:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t type metadata accessor for SwiftUIGlue2(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SwiftUIGlue2);
}

unint64_t lazy protocol witness table accessor for type UIScene and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UIScene and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UIScene and conformance NSObject)
  {
    v1 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIScene);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIScene and conformance NSObject);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaInsetsModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaInsetsModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaInsetsModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaInsetsModifier>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE5BC8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = MEMORY[0x1E0CE7508];
    v2[1] = MEMORY[0x1E0CE5BC0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaInsetsModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined retain of CoreGlue2.LinkURLParameters(uint64_t a1)
{
  swift_retain();
  return a1;
}

_QWORD *specialized SwiftUIGlue2.makeSummarySymbolHost(isOn:font:foregroundColor:)(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  char v12;
  void *v13;
  void *v14;

  v4 = a2;
  v5 = a3;
  _IntelligenceSupport.AnimatingSummarySymbol.init(isOn:font:foregroundColor:)();
  v6 = objc_allocWithZone((Class)type metadata accessor for _IntelligenceSupport.SummarySymbolHost());
  v7 = specialized _UIHostingView.init(rootView:)(v12, v13, v14);

  v8 = (_QWORD *)((char *)v7 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v7) + 0x108));
  swift_beginAccess();
  v9 = *v8;
  *v8 = 0;
  if (v9)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
    v10 = v7;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
  return v7;
}

uint64_t type metadata completion function for SwiftUIGlue()
{
  return type metadata completion function for SwiftUIGlue();
}

{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for SwiftUIGlue()
{
  return type metadata accessor for SwiftUIGlue(0);
}

uint64_t type metadata completion function for SwiftUIGlue2()
{
  return type metadata completion function for SwiftUIGlue();
}

uint64_t ObjC metadata update function for SwiftUIGlue2()
{
  return type metadata accessor for SwiftUIGlue2(0);
}

void type metadata accessor for CommandOperation?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for WeakBox<PlatformDocument>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for WeakBox<PlatformDocument>?, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for WeakBox<PlatformDocument>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
}

uint64_t outlined init with take of NavigationDestinationPresentation(uint64_t a1, uint64_t a2)
{
  __swift_memcpy89_8(a2, a1);
  return a2;
}

uint64_t outlined init with copy of NavigationDestinationPresentation(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for NavigationDestinationPresentation(a2, a1);
  return a2;
}

void type metadata accessor for (key: Namespace.ID, value: NavigationDestinationPresentation)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: Namespace.ID, value: NavigationDestinationPresentation))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: Namespace.ID, value: NavigationDestinationPresentation));
  }
}

void type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>)
  {
    v2 = lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol();
    v4 = type metadata accessor for _UIHostingView(a1, MEMORY[0x1E0CE4F50], v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>);
  }
}

unint64_t lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol;
  if (!lazy protocol witness table cache variable for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4F40], MEMORY[0x1E0CE4F50]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol);
  }
  return result;
}

uint64_t sub_187107084()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in SwiftUIGlue.defaultOpenSensitiveURLAction()(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return closure #1 in closure #1 in SwiftUIGlue.defaultOpenSensitiveURLAction()(a1, a2, v2 + v6, *(uint64_t (**)(BOOL))(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in SwiftUIGlue.defaultOpenSensitiveURLAction()()
{
  return implicit closure #1 in closure #1 in closure #1 in SwiftUIGlue.defaultOpenSensitiveURLAction()();
}

uint64_t outlined init with take of UpdateViewDestinationRequest(uint64_t a1, uint64_t a2)
{
  initializeWithTake for UpdateViewDestinationRequest(a2, a1);
  return a2;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result, uint64_t (*a2)(void), unint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v4 = *(_QWORD *)(result + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v9 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(v9 + 16))
      goto LABEL_5;
    goto LABEL_10;
  }
  result = a2();
  v5 = result;
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_10:
    if (!v4)
      goto LABEL_11;
    goto LABEL_13;
  }
LABEL_5:
  if ((*(_QWORD *)(v5 + 24) >> 1) - *(_QWORD *)(v5 + 16) < v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  type metadata accessor for CVarArg(0, a3);
  result = swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_11:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
  v10 = *(_QWORD *)(v5 + 16);
  v11 = __OFADD__(v10, v4);
  v12 = v10 + v4;
  if (!v11)
  {
    *(_QWORD *)(v5 + 16) = v12;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:), (void (*)(_QWORD))type metadata accessor for [BLSAlwaysOnTimeline]);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v5 = v20 + v3;
    if (!__OFADD__(v20, v3))
      goto LABEL_5;
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v4 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v5 = v4 + v3;
  if (__OFADD__(v4, v3))
    goto LABEL_24;
LABEL_5:
  v6 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v6;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v9 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v5 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v8 = 1;
  }
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 <= v5)
    v10 = v5;
  swift_bridgeObjectRetain();
  v11 = MEMORY[0x18D75E3C8](v8, v10, 1, v6);
  swift_bridgeObjectRelease();
  *v1 = v11;
  v9 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (*(_QWORD *)(v9 + 24) >> 1) - v12;
  result = specialized Array._copyContents(initializing:)(v9 + 8 * v12 + 32, v13, a1);
  if (v15 < v3)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v16 = v15;
  if (v15 < 1)
    goto LABEL_19;
  v17 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v18 = __OFADD__(v17, v15);
  v19 = v17 + v15;
  if (!v18)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
LABEL_19:
    swift_bridgeObjectRelease();
    if (v16 != v13)
      return specialized Array._endMutation()();
LABEL_26:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityNode], (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t))type metadata accessor for NavigationDestinationResolverBase, &lazy cache variable for type metadata for [NavigationDestinationResolverBase], (unint64_t *)&lazy protocol witness table cache variable for type [NavigationDestinationResolverBase] and conformance [A], (unint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t))type metadata accessor for NavigationPath_ItemBoxBase, &lazy cache variable for type metadata for [NavigationPath_ItemBoxBase], &lazy protocol witness table cache variable for type [NavigationPath_ItemBoxBase] and conformance [A], (unint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:), (void (*)(_QWORD))type metadata accessor for [UIView]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:), (void (*)(_QWORD))type metadata accessor for [UIBarButtonItem]);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v5 = v20 + v3;
    if (!__OFADD__(v20, v3))
      goto LABEL_5;
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v4 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v5 = v4 + v3;
  if (__OFADD__(v4, v3))
    goto LABEL_24;
LABEL_5:
  v6 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v6;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v9 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v5 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v8 = 1;
  }
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 <= v5)
    v10 = v5;
  swift_bridgeObjectRetain();
  v11 = MEMORY[0x18D75E3C8](v8, v10, 1, v6);
  swift_bridgeObjectRelease();
  *v1 = v11;
  v9 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (*(_QWORD *)(v9 + 24) >> 1) - v12;
  result = specialized Array._copyContents(initializing:)(v9 + 8 * v12 + 32, v13, a1);
  if (v15 < v3)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v16 = v15;
  if (v15 < 1)
    goto LABEL_19;
  v17 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v18 = __OFADD__(v17, v15);
  v19 = v17 + v15;
  if (!v18)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
LABEL_19:
    swift_bridgeObjectRelease();
    if (v16 != v13)
      return specialized Array._endMutation()();
LABEL_26:
    type metadata accessor for [UIResponder & _UIGestureRecognizerContainer]();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:), (void (*)(_QWORD))type metadata accessor for [NSLayoutConstraint]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:));
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t *v5;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = *v5;
  if (*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v14 = v13 + v11;
    if (!__OFADD__(v13, v11))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  v14 = v13 + v11;
  if (__OFADD__(v13, v11))
    goto LABEL_23;
LABEL_5:
  v12 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v5 = v12;
  v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v13 = 1;
  }
  v23 = v11;
  v11 = (uint64_t)a2;
  a2 = (uint64_t (*)(uint64_t))a3;
  a3 = a4;
  a4 = a5;
  if (v12 >> 62)
    goto LABEL_25;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14)
      v17 = v14;
    swift_bridgeObjectRetain();
    v12 = MEMORY[0x18D75E3C8](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *v5 = v12;
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = a3;
    a3 = (unint64_t *)a2;
    a2 = (uint64_t (*)(uint64_t))v11;
    v11 = v23;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v16 + 8 * *(_QWORD *)(v16 + 16) + 32, (*(_QWORD *)(v16 + 24) >> 1) - *(_QWORD *)(v16 + 16), a1, a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v19 < 1)
    goto LABEL_19;
  v20 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = __OFADD__(v20, v19);
  v22 = v20 + v19;
  if (!v21)
  {
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, unint64_t))
{
  unint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_23;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if (v6 >> 62)
    goto LABEL_25;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain();
    v6 = MEMORY[0x18D75E3C8](v7, v11, 1, v6);
    swift_bridgeObjectRelease();
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result, uint64_t (*a2)(void), void (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v4 = *(_QWORD *)(result + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v9 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(v9 + 16))
      goto LABEL_5;
    goto LABEL_10;
  }
  result = a2();
  v5 = result;
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_10:
    if (!v4)
      goto LABEL_11;
    goto LABEL_13;
  }
LABEL_5:
  if ((*(_QWORD *)(v5 + 24) >> 1) - *(_QWORD *)(v5 + 16) < v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  a3(0);
  result = swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_11:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
  v10 = *(_QWORD *)(v5 + 16);
  v11 = __OFADD__(v10, v4);
  v12 = v10 + v4;
  if (!v11)
  {
    *(_QWORD *)(v5 + 16) = v12;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

void specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  int64_t v21;
  int isUniquelyReferenced_nonNull_native;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t (*v32)(_QWORD);
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  uint64_t (*v38)(void);
  int64_t v39;
  uint64_t v40;
  uint64_t (*v41)(void);
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  void (*v46)(char *, char *, uint64_t);
  int64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(_QWORD);
  unsigned int v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t, uint64_t);
  char *v60;
  void (*v61)(char *, char *, uint64_t);
  int64_t v62;
  unsigned int (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _BYTE v68[32];
  uint64_t v69;
  uint64_t v70;

  v67 = type metadata accessor for IntelligenceElement();
  v3 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67, v4);
  v66 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IntelligenceElement?, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v65 = (uint64_t)&v58 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v58 - v16;
  v18 = *(_QWORD *)(a1 + 16);
  v19 = (_QWORD *)*v1;
  v20 = *(_QWORD *)(*v1 + 16);
  v21 = v20 + v18;
  if (__OFADD__(v20, v18))
  {
    __break(1u);
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v1 = (uint64_t)v19;
    if (!isUniquelyReferenced_nonNull_native || (v23 = v19[3] >> 1, v23 < v21))
    {
      if (v20 <= v21)
        v24 = v20 + v18;
      else
        v24 = v20;
      v19 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v24, 1, v19);
      *v1 = (uint64_t)v19;
      v23 = v19[3] >> 1;
    }
    v25 = v19[2];
    v21 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v20 = *(_QWORD *)(v3 + 72);
    v26 = v23 - v25;
    v27 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v69, (uint64_t)v19 + v21 + v20 * v25, v23 - v25, a1);
    if (v27 >= v18)
    {
      if (!v27)
        goto LABEL_12;
      v28 = v19[2];
      v29 = __OFADD__(v28, v27);
      v30 = v28 + v27;
      if (!v29)
      {
        v19[2] = v30;
LABEL_12:
        if (v27 != v26)
        {
          swift_bridgeObjectRelease();
          return;
        }
        goto LABEL_16;
      }
      __break(1u);
LABEL_22:
      v38 = MEMORY[0x1E0DC16F0];
      v60 = v10;
      while (1)
      {
        outlined destroy of TableRowID?(a1, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, (uint64_t)v38, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
        v43 = *v1;
        v44 = *(_QWORD *)(*v1 + 24);
        v45 = v44 >> 1;
        if ((uint64_t)(v44 >> 1) < v26 + 1)
        {
          v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v26 + 1, 1, (_QWORD *)*v1);
          *v1 = v43;
          v45 = *(_QWORD *)(v43 + 24) >> 1;
        }
        outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)v17, (uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, (uint64_t)MEMORY[0x1E0DC16F0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
        if (v63(v10, 1, v67) != 1)
          break;
        v40 = v67;
LABEL_29:
        outlined destroy of TableRowID?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, (uint64_t)MEMORY[0x1E0DC16F0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
        v39 = v26;
LABEL_24:
        *(_QWORD *)(*v1 + 16) = v39;
        a1 = v65;
        v41 = MEMORY[0x1E0DC16F0];
        outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)v17, v65, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, (uint64_t)MEMORY[0x1E0DC16F0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
        v42 = v63((char *)a1, 1, v40);
        v38 = v41;
        if (v42 == 1)
          goto LABEL_20;
      }
      v46 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
      if (v26 <= v45)
        v47 = v45;
      else
        v47 = v26;
      v61 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
      v62 = v47;
      v64 = v43 + v21 + v20 * v26;
      v48 = v66;
      v40 = v67;
      while (1)
      {
        v49 = v10;
        v50 = v40;
        v51 = v40;
        v52 = v26;
        v26 = (int64_t)v46;
        v46(v48, v49, v50);
        if (v62 == v52)
        {
          (*(void (**)(char *, uint64_t))(v3 + 8))(v48, v51);
          v39 = v62;
          v26 = v62;
          v40 = v51;
          v10 = v60;
          goto LABEL_24;
        }
        v53 = v52;
        outlined destroy of TableRowID?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, (uint64_t)MEMORY[0x1E0DC16F0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
        ((void (*)(uint64_t, char *, uint64_t))v26)(v64, v48, v51);
        if (v70)
        {
          v54 = v70 - 1;
          v10 = v60;
          if (__OFSUB__(v70, 1))
          {
            __break(1u);
LABEL_42:
            v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
            v35 = v17;
            v36 = 1;
            v33 = v67;
LABEL_19:
            v59 = v34;
            v34(v35, v36, 1, v33);
            a1 = v65;
            outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)v17, v65, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, (uint64_t)MEMORY[0x1E0DC16F0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
            v63 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
            if (v63((char *)a1, 1, v33) == 1)
            {
LABEL_20:
              v37 = MEMORY[0x1E0DC16F0];
              outlined destroy of TableRowID?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, (uint64_t)MEMORY[0x1E0DC16F0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
              swift_bridgeObjectRelease();
              outlined destroy of TableRowID?(a1, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, (uint64_t)v37, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
              return;
            }
            goto LABEL_22;
          }
          v55 = v52;
          --v70;
          v56 = specialized Array.subscript.read((uint64_t)v68, v54, v69);
          v40 = v67;
          (*(void (**)(char *))(v3 + 16))(v17);
          ((void (*)(_BYTE *, _QWORD))v56)(v68, 0);
          v59(v17, 0, 1, v40);
        }
        else
        {
          v40 = v51;
          v59(v17, 1, 1, v51);
          v55 = v53;
          v10 = v60;
        }
        outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)v17, (uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for IntelligenceElement?, (uint64_t)MEMORY[0x1E0DC16F0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
        v57 = v63(v10, 1, v40);
        v64 += v20;
        v26 = v55 + 1;
        v48 = v66;
        v46 = v61;
        if (v57 == 1)
          goto LABEL_29;
      }
    }
  }
  __break(1u);
LABEL_16:
  v26 = v19[2];
  if (!v70)
    goto LABEL_42;
  v31 = v70 - 1;
  if (!__OFSUB__(v70, 1))
  {
    --v70;
    v32 = specialized Array.subscript.read((uint64_t)v68, v31, v69);
    v33 = v67;
    (*(void (**)(char *))(v3 + 16))(v17);
    ((void (*)(_BYTE *, _QWORD))v32)(v68, 0);
    v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v35 = v17;
    v36 = 0;
    goto LABEL_19;
  }
  __break(1u);
}

{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_17;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v8 = *((_QWORD *)v3 + 3) >> 1, v8 < v5))
  {
    if (v4 <= v5)
      v9 = v4 + v2;
    else
      v9 = v4;
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    *v1 = v3;
    v8 = *((_QWORD *)v3 + 3) >> 1;
  }
  v10 = v8 - *((_QWORD *)v3 + 2);
  if (*(_QWORD *)(a1 + 16))
  {
    if (v10 >= v2)
    {
      swift_arrayInitWithCopy();
      if (!v2)
        goto LABEL_14;
      v11 = *((_QWORD *)v3 + 2);
      v12 = __OFADD__(v11, v2);
      v13 = v11 + v2;
      if (!v12)
      {
        *((_QWORD *)v3 + 2) = v13;
        goto LABEL_14;
      }
LABEL_20:
      __break(1u);
      return;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v2)
  {
    __break(1u);
    goto LABEL_19;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  if (v2 == v10)
  {
LABEL_17:
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [Any], MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    *v1 = v3;
  }
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v7 = a4 >> 1;
  v8 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_11;
  v5 = a3;
  v6 = *v4;
  if (*v4 >> 62)
    goto LABEL_12;
  v9 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  v10 = v9 + v8;
  if (!__OFADD__(v9, v8))
    goto LABEL_4;
LABEL_14:
  __break(1u);
LABEL_15:
  v12 = 1;
LABEL_16:
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v15 <= v10)
    v15 = v10;
  swift_bridgeObjectRetain();
  v6 = MEMORY[0x18D75E3C8](v12, v15, 1, v6);
  result = swift_bridgeObjectRelease();
  *v4 = v6;
  v13 = v6 & 0xFFFFFFFFFFFFFF8;
  if (v7 == v5)
  {
    while (v8 > 0)
    {
      __break(1u);
LABEL_11:
      __break(1u);
LABEL_12:
      swift_bridgeObjectRetain();
      v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v10 = v14 + v8;
      if (__OFADD__(v14, v8))
        goto LABEL_14;
LABEL_4:
      v6 = *v4;
      result = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *v4 = v6;
      v12 = 0;
      if (!(_DWORD)result || (v6 & 0x8000000000000000) != 0 || (v6 & 0x4000000000000000) != 0)
        goto LABEL_16;
      v13 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v10 > *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        goto LABEL_15;
      if (v7 != v5)
        goto LABEL_21;
    }
    goto LABEL_25;
  }
LABEL_21:
  if ((*(_QWORD *)(v13 + 24) >> 1) - *(_QWORD *)(v13 + 16) < v8)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
    result = swift_arrayInitWithCopy();
    if (v8 <= 0)
    {
LABEL_25:
      swift_unknownObjectRelease();
      return specialized Array._endMutation()();
    }
    v16 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v17 = __OFADD__(v16, v8);
    v18 = v16 + v8;
    if (!v17)
    {
      *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v18;
      goto LABEL_25;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, unint64_t), void (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)*v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v9 = v24 + v7;
    if (!__OFADD__(v24, v7))
      goto LABEL_5;
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v9 = v8 + v7;
  if (__OFADD__(v8, v7))
    goto LABEL_24;
LABEL_5:
  v10 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v3 = v10;
  v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v10 & 0x8000000000000000) == 0
    && (v10 & 0x4000000000000000) == 0)
  {
    v13 = v10 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v12 = 1;
  }
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v14 <= v9)
    v14 = v9;
  swift_bridgeObjectRetain();
  v15 = MEMORY[0x18D75E3C8](v12, v14, 1, v10);
  swift_bridgeObjectRelease();
  *v3 = v15;
  v13 = v15 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (*(_QWORD *)(v13 + 24) >> 1) - v16;
  result = a2(v13 + 8 * v16 + 32, v17, a1);
  if (v19 < v7)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v20 = v19;
  if (v19 < 1)
    goto LABEL_19;
  v21 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v22 = __OFADD__(v21, v19);
  v23 = v21 + v19;
  if (!v22)
  {
    *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v23;
LABEL_19:
    swift_bridgeObjectRelease();
    if (v20 != v17)
      return specialized Array._endMutation()();
LABEL_26:
    a3(0);
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v4 = *(_QWORD *)(result + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v9 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(v9 + 16))
      goto LABEL_5;
    goto LABEL_10;
  }
  result = a2();
  v5 = result;
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_10:
    if (!v4)
      goto LABEL_11;
    goto LABEL_13;
  }
LABEL_5:
  v10 = (*(_QWORD *)(v5 + 24) >> 1) - *(_QWORD *)(v5 + 16);
  result = a3(0);
  if (v10 < v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_11:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
  v11 = *(_QWORD *)(v5 + 16);
  v12 = __OFADD__(v11, v4);
  v13 = v11 + v4;
  if (!v12)
  {
    *(_QWORD *)(v5 + 16) = v13;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t static PreviewModifier<>.makeSharedContext()()
{
  uint64_t v0;

  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 16) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void protocol witness for View.body.getter in conformance PreviewModifierContent()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static PreviewTrait<A>.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *boxed_opaque_existential_1;

  type metadata accessor for _ContiguousArrayStorage<PreviewModifier>();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v6 + 56) = a2;
  *(_QWORD *)(v6 + 64) = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v6 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
  lazy protocol witness table accessor for type PreviewModifierTrait and conformance PreviewModifierTrait();
  type metadata accessor for Preview.ViewTraits();
  return PreviewTrait.init(_:)();
}

void type metadata accessor for _ContiguousArrayStorage<PreviewModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<PreviewModifier>)
  {
    type metadata accessor for CVarArg(255, &lazy cache variable for type metadata for PreviewModifier);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PreviewModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type PreviewModifierTrait and conformance PreviewModifierTrait()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreviewModifierTrait and conformance PreviewModifierTrait;
  if (!lazy protocol witness table cache variable for type PreviewModifierTrait and conformance PreviewModifierTrait)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreviewModifierTrait, &type metadata for PreviewModifierTrait);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewModifierTrait and conformance PreviewModifierTrait);
  }
  return result;
}

uint64_t PreviewModifierViewModifier.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = type metadata accessor for NestedDynamicProperties(0, v6, a2, a3);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, double))(v12 + 16))((char *)&v14 - v10, v4, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a4, v11, v6);
}

uint64_t PreviewModifierViewModifier.init(modifier:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;

  NestedDynamicProperties.init(wrappedValue:)(a1, a3, a5);
  v10 = a5 + *(int *)(type metadata accessor for PreviewModifierViewModifier(0, a3, a4, v9) + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v10, a2, AssociatedTypeWitness);
}

uint64_t type metadata accessor for PreviewModifierViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PreviewModifierViewModifier);
}

void PreviewModifierViewModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  double v5;
  uint64_t v6;

  MEMORY[0x1E0C80A78](a1, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreviewModifierViewModifier<A>, a2, v5);
  v6 = type metadata accessor for _ViewModifier_Content();
  lazy protocol witness table accessor for type PreviewModifierContent and conformance PreviewModifierContent();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v6);
  type metadata accessor for StaticSourceWriter();
}

void sub_18710B15C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v5 - 192) = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  v12 = PreviewModifierViewModifier.modifier.getter(v4, v10, v11, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 40))(v12, v0 + *(int *)(v4 + 36), v1, v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 184) + 8))(v3, v1);
  *(_QWORD *)(v5 - 144) = v1;
  *(_QWORD *)(v5 - 136) = v2;
  swift_getAssociatedConformanceWitness();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for PreviewModifierContent, (uint64_t)partial apply for closure #1 in PreviewModifierViewModifier.body(content:));
}

uint64_t sub_18710B258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 176) + 8))(v3, v1);
  *(_QWORD *)(v6 - 128) = v2;
  *(_QWORD *)(v6 - 120) = &protocol witness table for StaticSourceWriter<A, B>;
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v6 - 128);
  static ViewBuilder.buildExpression<A>(_:)(v0, v5, v7);
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 192) + 8);
  v8(v0, v5);
  static ViewBuilder.buildBlock<A>(_:)(v4, v5, *(_QWORD *)(v6 - 168));
  return v8(v4, v5);
}

unint64_t lazy protocol witness table accessor for type PreviewModifierContent and conformance PreviewModifierContent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreviewModifierContent and conformance PreviewModifierContent;
  if (!lazy protocol witness table cache variable for type PreviewModifierContent and conformance PreviewModifierContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreviewModifierContent, &type metadata for PreviewModifierContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewModifierContent and conformance PreviewModifierContent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreviewModifierContent and conformance PreviewModifierContent;
  if (!lazy protocol witness table cache variable for type PreviewModifierContent and conformance PreviewModifierContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreviewModifierContent, &type metadata for PreviewModifierContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewModifierContent and conformance PreviewModifierContent);
  }
  return result;
}

uint64_t closure #1 in PreviewModifierViewModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = type metadata accessor for PreviewModifierViewModifier(255, a1, a2, a3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreviewModifierViewModifier<A>, v5);
  v6 = type metadata accessor for _ViewModifier_Content();
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v6);
  v8 = static ViewBuilder.buildExpression<A>(_:)(v7, v6, v7);
  return static ViewBuilder.buildBlock<A>(_:)(v8, v6, a4);
}

uint64_t partial apply for closure #1 in PreviewModifierViewModifier.body(content:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in PreviewModifierViewModifier.body(content:)(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t PreviewModifierTrait.value.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreviewModifierTrait.value.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*PreviewModifierTrait.value.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static PreviewModifierTrait.defaultValue.getter()
{
  return MEMORY[0x1E0DEE9D8];
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> static PreviewModifierTrait.combine(_:_:)()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  v0 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v0, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &lazy cache variable for type metadata for PreviewModifier);
}

unint64_t instantiation function for generic protocol witness table for PreviewModifierContent(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PreviewModifierContent and conformance PreviewModifierContent();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in PreviewModifierContent()
{
  return &protocol witness table for PreviewModifierContent;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PreviewModifierViewModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for PreviewTraitProtocol.value.getter in conformance PreviewModifierTrait@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreviewTraitProtocol.combine(_:_:) in conformance PreviewModifierTrait@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v5 = *a1;
  swift_bridgeObjectRetain();
  v3 = swift_bridgeObjectRetain();
  result = specialized Array.append<A>(contentsOf:)(v3, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &lazy cache variable for type metadata for PreviewModifier);
  *a2 = v5;
  return result;
}

uint64_t dispatch thunk of static PreviewModifier.makeSharedContext()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 32) + *(_QWORD *)(a3 + 32));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of PreviewModifier.body(content:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

ValueMetadata *type metadata accessor for PreviewModifierContent()
{
  return &type metadata for PreviewModifierContent;
}

uint64_t type metadata completion function for PreviewModifierViewModifier()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;

  AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for PreviewModifierViewModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(_QWORD *)(v9 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    v16 = AssociatedTypeWitness;
    v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t destroy for PreviewModifierViewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(a1, *(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(v3 + 64) + a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((v4 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

uint64_t initializeWithCopy for PreviewModifierViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for PreviewModifierViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for PreviewModifierViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for PreviewModifierViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for PreviewModifierViewModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = *(_QWORD *)(v6 + 64) + v12;
  if (a2 <= v11)
    goto LABEL_23;
  v14 = (v13 & ~v12) + *(_QWORD *)(v9 + 64);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_23:
      if (v11)
      {
        if (v7 >= v10)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + a1) & ~v12, v10, AssociatedTypeWitness);
      }
      return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_23;
LABEL_14:
  v18 = (v16 - 1) << v15;
  if (v14 > 3)
    v18 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v19 = v14;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v11 + v18 + 1;
}

void storeEnumTagSinglePayload for PreviewModifierViewModifier(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v12 = 0u;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (v10 < a2)
  {
    v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void sub_18710BEE0()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x18710BEC8);
}

void sub_18710BEF0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x18710BEC8);
}

void sub_18710BEF8()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x18710BEC8);
}

ValueMetadata *type metadata accessor for PreviewModifierTrait()
{
  return &type metadata for PreviewModifierTrait;
}

void sub_18710BF14(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *a1;
  v2 = a1[1];
  swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for PreviewModifierViewModifier(255, v1, v2, v3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreviewModifierViewModifier<A>, v4);
  v5 = type metadata accessor for _ViewModifier_Content();
  lazy protocol witness table accessor for type PreviewModifierContent and conformance PreviewModifierContent();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v5);
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_18710BFC4()
{
  uint64_t v0;
  _QWORD v2[14];

  v0 = type metadata accessor for ModifiedContent();
  v2[0] = swift_getAssociatedConformanceWitness();
  v2[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v2);
}

uint64_t specialized BidirectionalCollection._distance(from:to:)(uint64_t result, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  uint64_t v12;
  char v13;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  char v19;
  BOOL v21;
  uint64_t v22;
  char v23;

  if ((a6 & 1) != 0)
  {
    if ((a2 & 1) != 0)
      return 0;
    goto LABEL_44;
  }
  if ((a2 & 1) != 0)
    goto LABEL_5;
  if (result >= a5)
  {
    if (a5 < result)
      goto LABEL_30;
    if (a4)
    {
      if (a4 != 1)
      {
        if (a7 || a8 != 2)
          goto LABEL_24;
        if (!a3)
          return 0;
LABEL_30:
        if (result != a5)
          goto LABEL_5;
        if (a4)
        {
          if (a4 != 1)
          {
            if (a8 == 2 && !a7)
              return 0;
            goto LABEL_5;
          }
          if (a8 != 1)
          {
LABEL_5:
            v13 = a2 & 1;
            v15 = a8 == 2 && a7 == 0;
            v12 = -1;
            while (1)
            {
              result = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:)(result, v13 & 1);
              if ((v13 & 1) != 0 || result != a5)
                goto LABEL_13;
              if (v18)
              {
                if (v18 != 1)
                {
                  if (v15)
                    return v12;
                  goto LABEL_13;
                }
                if (a8 != 1)
                  goto LABEL_13;
              }
              else if (a8)
              {
                goto LABEL_13;
              }
              if (v17 == a7)
                return v12;
LABEL_13:
              v16 = __OFSUB__(v12--, 1);
              if (v16)
                goto LABEL_82;
            }
          }
        }
        else if (a8)
        {
          goto LABEL_5;
        }
        if (a3 == a7)
          return 0;
        goto LABEL_5;
      }
      if (a8 != 1)
        goto LABEL_30;
    }
    else if (a8)
    {
      if (a8 == 1)
        goto LABEL_24;
      goto LABEL_30;
    }
    if (a3 < a7)
      goto LABEL_24;
    if (a7 >= a3)
      return 0;
    goto LABEL_30;
  }
LABEL_24:
  if (result != a5)
    goto LABEL_44;
  if (!a4)
  {
    if (a8)
      goto LABEL_44;
LABEL_40:
    if (a3 == a7)
      return 0;
    goto LABEL_44;
  }
  if (a4 != 1)
  {
    if (a8 == 2 && !a7)
      return 0;
    goto LABEL_44;
  }
  if (a8 == 1)
    goto LABEL_40;
LABEL_44:
  v19 = 0;
  v21 = a8 == 2 && a7 == 0;
  v12 = 1;
  do
  {
    result = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(result, v19 & 1);
    if ((v19 & 1) != 0)
    {
      if ((a6 & 1) == 0)
        goto LABEL_52;
    }
    else if ((a6 & 1) != 0 || result != a5)
    {
      goto LABEL_52;
    }
    if (v23)
    {
      if (v23 != 1)
      {
        if (v21)
          return v12;
        goto LABEL_52;
      }
      if (a8 != 1)
        goto LABEL_52;
    }
    else if (a8)
    {
      goto LABEL_52;
    }
    if (v22 == a7)
      return v12;
LABEL_52:
    v16 = __OFADD__(v12++, 1);
  }
  while (!v16);
  __break(1u);
LABEL_82:
  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection._distance(from:to:)(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  BOOL v20;
  uint64_t v21;

  v10 = a3 & 1;
  if (result == a4)
  {
    v11 = 0x7FFFFFFFFFFFFFFFLL;
    if ((a6 & 1) == 0)
      v11 = a5;
    if ((a3 & 1) == 0 && v11 > a2)
      goto LABEL_6;
LABEL_11:
    if (result == a4)
    {
      v12 = 0;
      v13 = 0x7FFFFFFFFFFFFFFFLL;
      if ((a3 & 1) == 0)
        v13 = a2;
      if ((a6 & 1) != 0 || v13 <= a5)
        return v12;
    }
    else if (a4 >= result)
    {
      return 0;
    }
    if (result != a4)
      goto LABEL_46;
    if ((a3 & 1) == 0)
    {
      if ((a6 & 1) == 0 && a2 == a5)
        return 0;
      goto LABEL_46;
    }
    if ((a6 & 1) == 0)
    {
LABEL_46:
      v20 = (a6 & 1) == 0 || a9 != a4;
      v12 = -1;
      while (1)
      {
        v21 = result + v12;
        if (__OFSUB__(result + v12 + 1, 1))
          goto LABEL_66;
        if (v21 == a9)
        {
          if (!v20)
            return v12;
          a2 = 0;
        }
        else
        {
          if ((v10 & 1) != 0)
            goto LABEL_72;
          v17 = __OFSUB__(a2--, 1);
          if (v17)
            goto LABEL_69;
          if ((a6 & 1) == 0 && v21 == a4 && a2 == a5)
            return v12;
        }
        v10 = v21 == a9;
        v17 = __OFSUB__(v12--, 1);
        if (v17)
          goto LABEL_68;
      }
    }
    return 0;
  }
  if (result >= a4)
    goto LABEL_11;
LABEL_6:
  if (result == a4)
  {
    if ((a3 & 1) != 0)
    {
      if ((a6 & 1) != 0)
        return 0;
    }
    else if ((a6 & 1) == 0 && a2 == a5)
    {
      return 0;
    }
  }
  v14 = a9 + a10;
  if (__OFADD__(a9, a10))
    goto LABEL_70;
  v16 = (a6 & 1) == 0 || v14 != a4;
  v12 = 1;
  while (1)
  {
    v18 = result + v12;
    if (__OFADD__(result + v12 - 1, 1))
      break;
    if (v18 == v14)
    {
      if (!v16)
        return v12;
      a2 = 0;
    }
    else
    {
      if ((v10 & 1) != 0)
        goto LABEL_71;
      v17 = __OFADD__(a2++, 1);
      if (v17)
        goto LABEL_67;
      if ((a6 & 1) == 0 && v18 == a4 && a2 == a5)
        return v12;
    }
    v10 = v18 == v14;
    v17 = __OFADD__(v12++, 1);
    if (v17)
      goto LABEL_65;
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
  return result;
}

_QWORD *specialized BidirectionalCollection._distance(from:to:)(_QWORD *result, uint64_t a2, char a3, _QWORD *a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  _QWORD *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  BOOL v25;
  unint64_t v28;
  unint64_t v29;

  v8 = a2;
  v9 = result;
  v10 = a3 & 1;
  if (result != a4)
  {
    if ((uint64_t)result < (uint64_t)a4)
      goto LABEL_6;
LABEL_11:
    if (result == a4)
    {
      v12 = 0;
      v13 = 0x7FFFFFFFFFFFFFFFLL;
      if ((a3 & 1) == 0)
        v13 = a2;
      if ((a6 & 1) != 0 || v13 <= a5)
        return (_QWORD *)v12;
    }
    else if ((uint64_t)a4 >= (uint64_t)result)
    {
      return 0;
    }
    if (result == a4)
    {
      if ((a3 & 1) != 0)
      {
        if ((a6 & 1) == 0)
          goto LABEL_46;
        return 0;
      }
      if ((a6 & 1) == 0 && a2 == a5)
        return 0;
    }
LABEL_46:
    v23 = (_QWORD *)v6[26];
    v25 = (a6 & 1) == 0 || v23 != a4;
    v12 = -1;
    while (1)
    {
      if (v9 == v23)
      {
        if (!v25)
          return (_QWORD *)v12;
        v8 = 0;
        v10 = 1;
        v9 = (_QWORD *)v6[26];
      }
      else
      {
        v19 = __OFSUB__(v9, 1);
        v9 = (_QWORD *)((char *)v9 - 1);
        if (v19)
          goto LABEL_73;
        if (v9 == v23)
        {
          v8 = 0;
          v10 = 1;
          if (v9 == a4 && (a6 & 1) != 0)
            return (_QWORD *)v12;
        }
        else
        {
          if ((v10 & 1) != 0)
            goto LABEL_77;
          v19 = __OFSUB__(v8--, 1);
          if (v19)
            goto LABEL_74;
          if (v9 == a4)
          {
            v10 = 0;
            v9 = a4;
            if ((a6 & 1) == 0 && v8 == a5)
              return (_QWORD *)v12;
          }
          else
          {
            v10 = 0;
          }
        }
      }
      v19 = __OFSUB__(v12--, 1);
      if (v19)
        goto LABEL_71;
    }
  }
  v11 = 0x7FFFFFFFFFFFFFFFLL;
  if ((a6 & 1) == 0)
    v11 = a5;
  if ((a3 & 1) != 0 || v11 <= a2)
    goto LABEL_11;
LABEL_6:
  if (result == a4)
  {
    if ((a3 & 1) != 0)
    {
      if ((a6 & 1) == 0)
        goto LABEL_24;
    }
    else if ((a6 & 1) != 0 || a2 != a5)
    {
      goto LABEL_24;
    }
    return 0;
  }
LABEL_24:
  v14 = v6[26];
  v15 = v6[27];
  v16 = v14 + v15;
  if (!__OFADD__(v14, v15))
  {
    v28 = v6[28];
    v12 = 1;
    v17 = v6[22];
    v18 = v6[23];
    while (1)
    {
      v20 = (_QWORD *)((char *)v9 + v12);
      if (__OFADD__((char *)v9 + v12 - 1, 1))
        break;
      v21 = *(_QWORD *)(v18 + 16);
      if (v21 || (v21 = v16, *(_QWORD *)(v17 + 16)))
      {
        result = specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(&v29, v18, v17, v28, v16, v21);
        v21 = v29;
      }
      v22 = v20 == (_QWORD *)v21;
      if (v22)
      {
        v8 = 0;
        if ((a6 & 1) != 0 && v20 == a4)
          return (_QWORD *)v12;
      }
      else
      {
        if ((v10 & 1) != 0)
          goto LABEL_76;
        v19 = __OFADD__(v8++, 1);
        if (v19)
          goto LABEL_72;
        if ((a6 & 1) == 0 && v20 == a4 && v8 == a5)
          return (_QWORD *)v12;
      }
      v10 = v22;
      v19 = __OFADD__(v12++, 1);
      if (v19)
        goto LABEL_70;
    }
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
  }
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  uint64_t (*v13[4])();

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [UIView]();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type [UIView] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [UIView], MEMORY[0x1E0DEAF50]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            v12 = *v11;
            ((void (*)(uint64_t (**)(), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  uint64_t (*v13[4])();

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [BLSAlwaysOnTimeline]();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type [BLSAlwaysOnTimeline] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [BLSAlwaysOnTimeline], MEMORY[0x1E0DEAF50]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            v12 = *v11;
            ((void (*)(uint64_t (**)(), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for BLSAlwaysOnTimeline);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  void (*v13[4])(id *);

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityNode], (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
          lazy protocol witness table accessor for type [AccessibilityNode] and conformance [A](&lazy protocol witness table cache variable for type [AccessibilityNode] and conformance [A], (unint64_t *)&lazy cache variable for type metadata for [AccessibilityNode], (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNode);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            v12 = *v11;
            ((void (*)(void (**)(id *), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for AccessibilityNode();
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  uint64_t (*v13[4])();

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [UIMenuElement]();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type [UIMenuElement] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [UIMenuElement], MEMORY[0x1E0DEAF50]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            v12 = *v11;
            ((void (*)(uint64_t (**)(), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  uint64_t (*v13[4])();

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [NSObject & PlatformAccessibilityElementProtocol]();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type [NSObject & PlatformAccessibilityElementProtocol] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [NSObject & PlatformAccessibilityElementProtocol], MEMORY[0x1E0DEAF50]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            v12 = *v11;
            ((void (*)(uint64_t (**)(), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for UIViewController & _UIBacklightEnvironmentObserver(0, (unint64_t *)&lazy cache variable for type metadata for NSObject & PlatformAccessibilityElementProtocol, (uint64_t)&protocolRef__TtP7SwiftUI36PlatformAccessibilityElementProtocol_, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  uint64_t (*v13[4])();

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [UIViewController]();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type [UIViewController] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [UIViewController], MEMORY[0x1E0DEAF50]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            v12 = *v11;
            ((void (*)(uint64_t (**)(), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  uint64_t (*v13[4])();

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [UIViewController & _UIBacklightEnvironmentObserver]();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type [UIViewController & _UIBacklightEnvironmentObserver] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [UIViewController & _UIBacklightEnvironmentObserver], MEMORY[0x1E0DEAF50]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            v12 = *v11;
            ((void (*)(uint64_t (**)(), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for UIViewController & _UIBacklightEnvironmentObserver(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController & _UIBacklightEnvironmentObserver, (uint64_t)&protocolRef__UIBacklightEnvironmentObserver, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13[4])();

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [UIFocusEnvironment]();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type [UIFocusEnvironment] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [UIFocusEnvironment], MEMORY[0x1E0DEAF50]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            v12 = *v11;
            swift_unknownObjectRetain();
            ((void (*)(uint64_t (**)(), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusEnvironment);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13[4])();

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [UIFocusItem]();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type [UIFocusItem] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [UIFocusItem], MEMORY[0x1E0DEAF50]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            v12 = *v11;
            swift_unknownObjectRetain();
            ((void (*)(uint64_t (**)(), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusItem);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  uint64_t (*v13[4])();

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [UIBarButtonItem]();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type [UIBarButtonItem] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [UIBarButtonItem], MEMORY[0x1E0DEAF50]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            v12 = *v11;
            ((void (*)(uint64_t (**)(), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  uint64_t (*v13[4])();

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [UIResponder & _UIGestureRecognizerContainer]();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type [UIResponder & _UIGestureRecognizerContainer] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [UIResponder & _UIGestureRecognizerContainer], MEMORY[0x1E0DEAF50]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            v12 = *v11;
            ((void (*)(uint64_t (**)(), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for UIViewController & _UIBacklightEnvironmentObserver(0, &lazy cache variable for type metadata for UIResponder & _UIGestureRecognizerContainer, (uint64_t)&protocolRef__UIGestureRecognizerContainer, &lazy cache variable for type metadata for UIResponder);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  uint64_t (*v13[4])();

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [UIAccessibilityLocationDescriptor]();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type [UIAccessibilityLocationDescriptor] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [UIAccessibilityLocationDescriptor], MEMORY[0x1E0DEAF50]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            v12 = *v11;
            ((void (*)(uint64_t (**)(), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityLocationDescriptor);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  uint64_t (*v13[4])();

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [NSLayoutConstraint]();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type [NSLayoutConstraint] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [NSLayoutConstraint], MEMORY[0x1E0DEAF50]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            v12 = *v11;
            ((void (*)(uint64_t (**)(), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSLayoutConstraint);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13[4])();

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [_UISceneSettingsDiffAction]();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type [_UISceneSettingsDiffAction] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [_UISceneSettingsDiffAction], MEMORY[0x1E0DEAF50]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            v12 = *v11;
            swift_unknownObjectRetain();
            ((void (*)(uint64_t (**)(), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for _UISceneBSActionHandler(0, &lazy cache variable for type metadata for _UISceneSettingsDiffAction);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13[4])();

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [_UISceneBSActionHandler]();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type [_UISceneBSActionHandler] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [_UISceneBSActionHandler], MEMORY[0x1E0DEAF50]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            v12 = *v11;
            swift_unknownObjectRetain();
            ((void (*)(uint64_t (**)(), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for _UISceneBSActionHandler(0, &lazy cache variable for type metadata for _UISceneBSActionHandler);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for IncrementalLayoutCacheItem, &lazy cache variable for type metadata for [IncrementalLayoutCacheItem], &lazy protocol witness table cache variable for type [IncrementalLayoutCacheItem] and conformance [A], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

uint64_t specialized Array._copyContents(initializing:)(uint64_t result, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, unint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void (*v21)(_BYTE *, _QWORD);
  uint64_t *v22;
  uint64_t v23;
  _BYTE v24[32];

  v13 = result;
  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (v13)
  {
    if (v14)
    {
      swift_bridgeObjectRetain();
      v16 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v16 <= a2)
      {
        if (v15 >= 1)
        {
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a5, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
          v18 = v17;
          v19 = lazy protocol witness table accessor for type [AccessibilityNode] and conformance [A](a6, a5, a4);
          swift_bridgeObjectRetain();
          for (i = 0; i != v15; ++i)
          {
            v21 = (void (*)(_BYTE *, _QWORD))a7(v24, i, a3, v18, v19);
            v23 = *v22;
            swift_retain();
            v21(v24, 0);
            *(_QWORD *)(v13 + 8 * i) = v23;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        a4(0);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type [AccessibilityNode] and conformance [A](unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v5);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for [BLSAlwaysOnTimeline]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [BLSAlwaysOnTimeline])
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for BLSAlwaysOnTimeline);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [BLSAlwaysOnTimeline]);
  }
}

void type metadata accessor for [UIMenuElement]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [UIMenuElement])
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [UIMenuElement]);
  }
}

uint64_t outlined init with copy of LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>(0, &lazy cache variable for type metadata for LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC808]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>)
  {
    type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>> and conformance CountingIndexCollection<A>, (uint64_t (*)(uint64_t))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>, MEMORY[0x1E0CE5A00]);
    v0 = type metadata accessor for DefaultIndices();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>);
  }
}

uint64_t type metadata accessor for ListUpdate<CountingIndex<Int>, CountingIndex<Int>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ListUpdate<CountingIndex<Int>, CountingIndex<Int>>;
  if (!lazy cache variable for type metadata for ListUpdate<CountingIndex<Int>, CountingIndex<Int>>)
  {
    type metadata accessor for CountingIndex<Int>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CountingIndex<Int> and conformance CountingIndex<A>, (uint64_t (*)(uint64_t))type metadata accessor for CountingIndex<Int>, MEMORY[0x1E0CE1E60]);
    type metadata accessor for ListUpdate();
  }
  return result;
}

void type metadata accessor for CountingIndex<Int>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CountingIndex<Int>)
  {
    v0 = type metadata accessor for CountingIndex();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CountingIndex<Int>);
  }
}

uint64_t outlined destroy of LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;

  type metadata accessor for LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>();
    v7 = v6;
    v8 = type metadata accessor for ListUpdate<CountingIndex<Int>, CountingIndex<Int>>();
    v9 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>> and conformance DefaultIndices<A>, (uint64_t (*)(uint64_t))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, MEMORY[0x1E0DEA218]);
    v10 = a3(a1, v7, v8, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

void type metadata accessor for [UIBarButtonItem]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [UIBarButtonItem])
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [UIBarButtonItem]);
  }
}

void type metadata accessor for [_UISceneBSActionHandler]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [_UISceneBSActionHandler])
  {
    type metadata accessor for _UISceneBSActionHandler(255, &lazy cache variable for type metadata for _UISceneBSActionHandler);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [_UISceneBSActionHandler]);
  }
}

void type metadata accessor for [_UISceneSettingsDiffAction]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [_UISceneSettingsDiffAction])
  {
    type metadata accessor for _UISceneBSActionHandler(255, &lazy cache variable for type metadata for _UISceneSettingsDiffAction);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [_UISceneSettingsDiffAction]);
  }
}

uint64_t type metadata accessor for UIViewController & _UIBacklightEnvironmentObserver(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for NSObject(255, a4);
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for [UIFocusEnvironment]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [UIFocusEnvironment])
  {
    type metadata accessor for _UISceneBSActionHandler(255, (unint64_t *)&lazy cache variable for type metadata for UIFocusEnvironment);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [UIFocusEnvironment]);
  }
}

uint64_t type metadata accessor for _UISceneBSActionHandler(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for [UIFocusItem]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [UIFocusItem])
  {
    type metadata accessor for _UISceneBSActionHandler(255, (unint64_t *)&lazy cache variable for type metadata for UIFocusItem);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [UIFocusItem]);
  }
}

uint64_t outlined destroy of TableRowID(uint64_t a1)
{
  destroy for ToolbarItemPlacement.Role(a1);
  return a1;
}

void type metadata accessor for [UIViewController]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [UIViewController])
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [UIViewController]);
  }
}

void type metadata accessor for [NSLayoutConstraint]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [NSLayoutConstraint])
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for NSLayoutConstraint);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [NSLayoutConstraint]);
  }
}

uint64_t static PubliclyPrimitiveView._makeView(view:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  int v18;

  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_DWORD *)(a2 + 80);
  v18 = *a1;
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v8 = *(_OWORD *)(a2 + 40);
  v13 = *(_OWORD *)(a2 + 24);
  v14 = v8;
  v15 = *(_OWORD *)(a2 + 56);
  v16 = *(_QWORD *)(a2 + 72);
  v17 = v7;
  return static PubliclyPrimitiveView.defaultMakeView(view:inputs:)(&v18, &v10, a3, a4);
}

uint64_t static PubliclyPrimitiveView.defaultMakeView(view:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t Body;
  uint64_t AssociatedConformanceWitness;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  _BYTE v30[12];

  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = *((_DWORD *)a2 + 20);
  LODWORD(v21) = *a1;
  type metadata accessor for _GraphValue();
  v11 = a2[3];
  v12 = a2[4];
  v19 = *(_OWORD *)(a2 + 7);
  v20 = *(_OWORD *)(a2 + 5);
  v13 = a2[9];
  _GraphValue.value.getter();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Body = type metadata accessor for MakeBody(0, a3, a4, v15);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeBody<A>, Body);
  _GraphValue.init<A>(_:)();
  v21 = v7;
  v22 = v8;
  v23 = v9;
  v24 = v11;
  v25 = v12;
  v26 = v20;
  v27 = v19;
  v28 = v13;
  v29 = v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v30, &v21, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t static PubliclyPrimitiveView._viewListCount(inputs:)(__int128 *a1)
{
  int v1;
  uint64_t v2;
  __int128 v4;
  int v5;
  uint64_t v6;

  v1 = *((_DWORD *)a1 + 4);
  v2 = *((_QWORD *)a1 + 3);
  v4 = *a1;
  v5 = v1;
  v6 = v2;
  return static PubliclyPrimitiveView.defaultViewListCount(inputs:)((uint64_t *)&v4);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance MakeBody<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance <> Section<A, B, C>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int8x16_t v10;
  uint64_t v11;

  v7 = *(_QWORD *)(a4 - 24);
  v10 = vextq_s8(*(int8x16_t *)(a4 - 16), *(int8x16_t *)(a4 - 16), 8uLL);
  v11 = v7;
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, a3, &v10);
  return static PubliclyPrimitiveView._makeView(view:inputs:)(a1, a2, a3, v8);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance HSplitView<A>(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HSplitView<A>, a3);
  return static PubliclyPrimitiveView._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance HSplitView<A>(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HSplitView<A>, a3);
  return static PubliclyPrimitiveView._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance HSplitView<A>(__int128 *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance HSplitView<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for HSplitView<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance VSplitView<A>(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for VSplitView<A>, a3);
  return static PubliclyPrimitiveView._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance VSplitView<A>(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for VSplitView<A>, a3);
  return static PubliclyPrimitiveView._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance VSplitView<A>(__int128 *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance HSplitView<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for VSplitView<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _PullDownButton<A, B>(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PullDownButton<A, B>, a3);
  return static PubliclyPrimitiveView._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _PullDownButton<A, B>(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PullDownButton<A, B>, a3);
  return static PubliclyPrimitiveView._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _PullDownButton<A, B>(__int128 *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance HSplitView<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for _PullDownButton<A, B>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance NavigationView<A>(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationView<A>, a3);
  return static PubliclyPrimitiveView._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance NavigationView<A>(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationView<A>, a3);
  return static PubliclyPrimitiveView._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance NavigationView<A>(__int128 *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance HSplitView<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for NavigationView<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance HSplitView<A>(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](a4);
  return static PubliclyPrimitiveView._viewListCount(inputs:)(a1);
}

void ToolbarContent.hidden(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t CustomizableToolbarContent.visibility(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4;

  v4 = a1 == 2;
  return ToolbarContent.modifier<A>(_:)((uint64_t)&v4, a2, (uint64_t)&type metadata for ToolbarItemHiddenModifier, a3);
}

uint64_t View.toolbarItemVisibility(_:)()
{
  return View.preference<A>(key:value:)();
}

uint64_t sub_18710F1EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI14ToolbarContentRzlAA0c8ModifiedD0VyxAA0C18ItemHiddenModifier33_0FBE2E834C3D805C1A341AC0D8838906LLVGAaBHPxAaBHD1__AgA0cdH0HPyHCHCTm(a1, (uint64_t)&protocol conformance descriptor for <> ToolbarModifiedContent<A, B>, a3, a4);
}

uint64_t sub_18710F1F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI14ToolbarContentRzlAA0c8ModifiedD0VyxAA0C18ItemHiddenModifier33_0FBE2E834C3D805C1A341AC0D8838906LLVGAaBHPxAaBHD1__AgA0cdH0HPyHCHCTm(a1, (uint64_t)&protocol conformance descriptor for <> ToolbarModifiedContent<A, B>, a3, a4);
}

uint64_t get_witness_table_7SwiftUI14ToolbarContentRzlAA0c8ModifiedD0VyxAA0C18ItemHiddenModifier33_0FBE2E834C3D805C1A341AC0D8838906LLVGAaBHPxAaBHD1__AgA0cdH0HPyHCHCTm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v5 = a1[1];
  v6 = type metadata accessor for ToolbarModifiedContent(255, *a1, (uint64_t)&type metadata for ToolbarItemHiddenModifier, a4);
  v8[0] = v5;
  v8[1] = &protocol witness table for ToolbarItemHiddenModifier;
  return MEMORY[0x18D75FFDC](a2, v6, v8);
}

uint64_t sub_18710F258(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<ToolbarItemViewHiddenKey>, (uint64_t)&type metadata for ToolbarItemViewHiddenKey, (uint64_t)&protocol witness table for ToolbarItemViewHiddenKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _PreferenceWritingModifier<ToolbarItemViewHiddenKey> and conformance _PreferenceWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<ToolbarItemViewHiddenKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<ToolbarItemViewHiddenKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<ToolbarItemViewHiddenKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<ToolbarItemViewHiddenKey>, (uint64_t)&type metadata for ToolbarItemViewHiddenKey, (uint64_t)&protocol witness table for ToolbarItemViewHiddenKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE60F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<ToolbarItemViewHiddenKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarItemViewHiddenKey()
{
  return &type metadata for ToolbarItemViewHiddenKey;
}

uint64_t storeEnumTagSinglePayload for ToolbarItemHiddenModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18710F398 + 4 * byte_187C0A0B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18710F3CC + 4 * byte_187C0A0B0[v4]))();
}

uint64_t sub_18710F3CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18710F3D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18710F3DCLL);
  return result;
}

uint64_t sub_18710F3E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18710F3F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18710F3F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18710F3FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToolbarItemHiddenModifier()
{
  return &type metadata for ToolbarItemHiddenModifier;
}

uint64_t static ToolbarItemHiddenModifier._makeToolbar(content:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = *((_DWORD *)a2 + 6);
  v7 = *((_DWORD *)a2 + 7);
  v8 = *((_DWORD *)a2 + 8);
  v9 = *((_DWORD *)a2 + 9);
  v10 = a2[5];
  v11 = a2[6];
  v12 = *((_DWORD *)a2 + 14);
  v13 = a2[8];
  v14 = *((_DWORD *)a2 + 18);
  v26 = *a2;
  v27 = v4;
  v28 = v5;
  *(_QWORD *)&v29 = __PAIR64__(v7, v6);
  *((_QWORD *)&v29 + 1) = __PAIR64__(v9, v8);
  v30 = v10;
  v31 = v11;
  v32 = v12;
  v33 = v13;
  v34 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.environment.getter();
  type metadata accessor for _GraphValue<ToolbarItemHiddenModifier>();
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ToolbarItemHiddenModifier.ChildEnvironment and conformance ToolbarItemHiddenModifier.ChildEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphInputs.environment.setter();
  v17 = v26;
  v18 = v27;
  v19 = v5;
  v20 = v29;
  v21 = v10;
  v22 = v11;
  v23 = v32;
  v24 = v33;
  v25 = v34;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v15 = swift_bridgeObjectRetain();
  a3(v15, &v17);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t EnvironmentValues.toolbarItemIsHidden.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarItemIsHiddenKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarItemIsHiddenKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarItemHiddenModifier.ChildEnvironment@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *Value;
  uint64_t v3;

  Value = (_QWORD *)AGGraphGetValue();
  v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  return specialized EnvironmentValues.subscript.setter();
}

uint64_t EnvironmentValues.toolbarItemIsHidden.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarItemIsHiddenKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarItemIsHiddenKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarItemIsHiddenKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarItemIsHiddenKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

unsigned __int8 *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ToolbarItemViewHiddenKey(unsigned __int8 *result, _QWORD *(*a2)(uint64_t *__return_ptr))
{
  _BYTE *v2;
  int v3;
  uint64_t v4;

  v2 = result;
  v3 = *result;
  if (v3 == 2)
  {
    result = (unsigned __int8 *)a2(&v4);
    LOBYTE(v3) = v4;
  }
  *v2 = v3;
  return result;
}

void type metadata accessor for _GraphValue<ToolbarItemHiddenModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<ToolbarItemHiddenModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ToolbarItemHiddenModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ToolbarItemHiddenModifier.ChildEnvironment and conformance ToolbarItemHiddenModifier.ChildEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarItemHiddenModifier.ChildEnvironment and conformance ToolbarItemHiddenModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type ToolbarItemHiddenModifier.ChildEnvironment and conformance ToolbarItemHiddenModifier.ChildEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarItemHiddenModifier.ChildEnvironment, &unk_1E1AEC448);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarItemHiddenModifier.ChildEnvironment and conformance ToolbarItemHiddenModifier.ChildEnvironment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarItemIsHiddenKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarItemIsHiddenKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ToolbarItemIsHiddenKey()
{
  return &type metadata for EnvironmentValues.ToolbarItemIsHiddenKey;
}

void *type metadata accessor for ToolbarItemHiddenModifier.ChildEnvironment()
{
  return &unk_1E1AEC448;
}

void CustomizableToolbarContent.hidden(_:)()
{
  ToolbarContent.hidden(_:)();
}

void View.toolbarItemHidden(_:)()
{
  ToolbarContent.hidden(_:)();
}

void View.listRowHoverEffect(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.listRowHoverEffectDisabled(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static ListRowHoverEffectTraitKey.defaultValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static IgnoreListRowHoverEffectTraitsKey.defaultValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for ListRowHoverEffectTraitKey()
{
  return &type metadata for ListRowHoverEffectTraitKey;
}

ValueMetadata *type metadata accessor for ListRowHoverEffectEnabledTraitKey()
{
  return &type metadata for ListRowHoverEffectEnabledTraitKey;
}

ValueMetadata *type metadata accessor for IgnoreListRowHoverEffectTraitsKey()
{
  return &type metadata for IgnoreListRowHoverEffectTraitsKey;
}

uint64_t sub_18710FA64(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyAaBPAAE14truePreferenceyQrqd__mAA0G3KeyRd__Sb5ValueRtd__lFQOyADyxAA01_G15WritingModifierVyAA018ListRowHoverEffectgH0VGG_AA04Usesg5Basedlmn7EffectsH0VQo_AA06_TraitjK0VyAA06Ignorelmno6TraitsH0VGGAaBHPqd0__AaBHD3_ARHO_AwA0cK0HPyHCHCTm(a1, &lazy cache variable for type metadata for _PreferenceWritingModifier<ListRowHoverEffectPreferenceKey>, (uint64_t)&type metadata for ListRowHoverEffectPreferenceKey, (uint64_t)&protocol witness table for ListRowHoverEffectPreferenceKey, &lazy protocol witness table cache variable for type _PreferenceWritingModifier<ListRowHoverEffectPreferenceKey> and conformance _PreferenceWritingModifier<A>);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<IgnoreListRowHoverEffectTraitsKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<IgnoreListRowHoverEffectTraitsKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<IgnoreListRowHoverEffectTraitsKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IgnoreListRowHoverEffectTraitsKey>, (uint64_t)&type metadata for IgnoreListRowHoverEffectTraitsKey, (uint64_t)&protocol witness table for IgnoreListRowHoverEffectTraitsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<IgnoreListRowHoverEffectTraitsKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t sub_18710FAF0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyAaBPAAE14truePreferenceyQrqd__mAA0G3KeyRd__Sb5ValueRtd__lFQOyADyxAA01_G15WritingModifierVyAA018ListRowHoverEffectgH0VGG_AA04Usesg5Basedlmn7EffectsH0VQo_AA06_TraitjK0VyAA06Ignorelmno6TraitsH0VGGAaBHPqd0__AaBHD3_ARHO_AwA0cK0HPyHCHCTm(a1, &lazy cache variable for type metadata for _PreferenceWritingModifier<ListRowHoverEffectDisabledPreferenceKey>, (uint64_t)&type metadata for ListRowHoverEffectDisabledPreferenceKey, (uint64_t)&protocol witness table for ListRowHoverEffectDisabledPreferenceKey, &lazy protocol witness table cache variable for type _PreferenceWritingModifier<ListRowHoverEffectDisabledPreferenceKey> and conformance _PreferenceWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyAaBPAAE14truePreferenceyQrqd__mAA0G3KeyRd__Sb5ValueRtd__lFQOyADyxAA01_G15WritingModifierVyAA018ListRowHoverEffectgH0VGG_AA04Usesg5Basedlmn7EffectsH0VQo_AA06_TraitjK0VyAA06Ignorelmno6TraitsH0VGGAaBHPqd0__AaBHD3_ARHO_AwA0cK0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  ValueMetadata *v17;
  uint64_t v18;
  _UNKNOWN **v19;
  _QWORD v20[2];

  v9 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
  v10 = type metadata accessor for ModifiedContent();
  v20[0] = v9;
  v20[1] = lazy protocol witness table accessor for type _PreferenceWritingModifier<ListRowHoverEffectPreferenceKey> and conformance _PreferenceWritingModifier<A>(a5, a2, a3, a4);
  v11 = MEMORY[0x1E0CE2E70];
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v20);
  v16 = v10;
  v17 = &type metadata for UsesPreferenceBasedListRowHoverEffectsKey;
  v18 = v12;
  v19 = &protocol witness table for UsesPreferenceBasedListRowHoverEffectsKey;
  MEMORY[0x18D75FF88](255, &v16, MEMORY[0x1E0CE6E48], 0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IgnoreListRowHoverEffectTraitsKey>, (uint64_t)&type metadata for IgnoreListRowHoverEffectTraitsKey, (uint64_t)&protocol witness table for IgnoreListRowHoverEffectTraitsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v13 = type metadata accessor for ModifiedContent();
  v16 = v10;
  v17 = &type metadata for UsesPreferenceBasedListRowHoverEffectsKey;
  v18 = v12;
  v19 = &protocol witness table for UsesPreferenceBasedListRowHoverEffectsKey;
  v15[0] = swift_getOpaqueTypeConformance2();
  v15[1] = lazy protocol witness table accessor for type _TraitWritingModifier<IgnoreListRowHoverEffectTraitsKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](v11, v13, v15);
}

uint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<ListRowHoverEffectPreferenceKey> and conformance _PreferenceWritingModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE60F0], v6);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ListRowHoverEffectDisabledPreferenceKey()
{
  return &type metadata for ListRowHoverEffectDisabledPreferenceKey;
}

ValueMetadata *type metadata accessor for UsesPreferenceBasedListRowHoverEffectsKey()
{
  return &type metadata for UsesPreferenceBasedListRowHoverEffectsKey;
}

ValueMetadata *type metadata accessor for ListRowHoverEffectPreferenceKey()
{
  return &type metadata for ListRowHoverEffectPreferenceKey;
}

void static ListRowHoverEffectEnabledTraitKey.defaultValue.getter()
{
  static IgnoreListRowHoverEffectTraitsKey.defaultValue.getter();
}

id PPTTestBridge.host.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  v2 = MEMORY[0x18D760234](v0 + 2);
  if (!v2)
    return 0;
  v3 = (void *)v2;
  v4 = (id)specialized UIHostingController.host.getter();

  v6 = type metadata accessor for _UIHostingView(255, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v5);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v6);
  return v4;
}

id PPTTestBridge.testCase.didset()
{
  uint64_t v0;
  id result;

  *(_BYTE *)(v0 + 24) = 1;
  result = PPTTestBridge.host.getter();
  if (result)
  {
    swift_getObjectType();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    return (id)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t PPTTestBridge.testCase.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  outlined assign with copy of PPTTestCase?(a1, v1 + 32);
  swift_endAccess();
  PPTTestBridge.testCase.didset();
  return outlined destroy of PPTTestCase?(a1);
}

Swift::Void __swiftcall PPTTestBridge.runTest(_:options:)(Swift::String _, Swift::OpaquePointer options)
{
  void *object;
  uint64_t countAndFlagsBits;
  int v5;
  _QWORD v6[5];
  int v7;

  object = _._object;
  countAndFlagsBits = _._countAndFlagsBits;
  v5 = ++static PPTTestCase.lastTestSeed;
  v6[1] = &protocol witness table for PPTTestBridge<A>;
  swift_unknownObjectWeakInit();
  v6[2] = countAndFlagsBits;
  v6[3] = object;
  v6[4] = options._rawValue;
  v7 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PPTTestBridge.testCase.setter((uint64_t)v6);
}

void PPTTestBridge.platformWindow.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;

  v1 = (void *)MEMORY[0x18D760234](v0 + 16);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, sel_view);

    if (v3)
    {
      objc_msgSend(v3, sel_window);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::Void __swiftcall PPTTestBridge.startPPTTest(_:)(SwiftUI::PPTTestCase::Name a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;

  v1 = *(_QWORD *)a1.rawValue._countAndFlagsBits;
  v2 = *(_QWORD *)(a1.rawValue._countAndFlagsBits + 8);
  if ((static ProcessEnvironment.BOOL(forKey:defaultValue:)() & 1) != 0)
  {
    type metadata accessor for AGGraphRef(0);
    static AGGraphRef.startTracing(options:)();
  }
  else if ((static ProcessEnvironment.BOOL(forKey:defaultValue:)() & 1) != 0)
  {
    AGGraphStartProfiling();
  }
  v3 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v4 = (id)MEMORY[0x18D75CC88](v1, v2);
  objc_msgSend(v3, sel_startedTest_, v4);

}

Swift::Void __swiftcall PPTTestBridge.finishPPTTest(_:)(SwiftUI::PPTTestCase::Name a1)
{
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  id v5;
  void *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v1 = *(_QWORD *)a1.rawValue._countAndFlagsBits;
  v2 = *(void **)(a1.rawValue._countAndFlagsBits + 8);
  if ((static ProcessEnvironment.BOOL(forKey:defaultValue:)() & 1) != 0)
  {
    type metadata accessor for AGGraphRef(0);
    static AGGraphRef.stopTracing()();
  }
  else if ((static ProcessEnvironment.BOOL(forKey:defaultValue:)() & 1) != 0)
  {
    AGGraphStopProfiling();
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v3._countAndFlagsBits = v1;
    v3._object = v2;
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 0x6E6F7A672D67612ELL;
    v4._object = (void *)0xE800000000000000;
    String.append(_:)(v4);
    specialized String.withCString<A>(_:)(0x2D6870617267, 0xE600000000000000);
    swift_bridgeObjectRelease();
    AGGraphResetProfile();
  }
  v5 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v6 = (void *)MEMORY[0x18D75CC88](v1, v2);
  objc_msgSend(v5, sel_finishedTest_, v6);

  v7 = xmmword_187BF9840;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  v11 = 0;
  PPTTestBridge.testCase.setter((uint64_t)&v7);
}

uint64_t closure #1 in PPTTestBridge.finishPPTTest(_:)()
{
  return AGGraphArchiveJSON();
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) == 0 && ((a2 & 0x2000000000000000) != 0 || (a1 & 0x1000000000000000) != 0))
    return AGGraphArchiveJSON();
  else
    return _StringGuts._slowWithCString<A>(_:)();
}

Swift::Void __swiftcall PPTTestBridge.failPPTTest(_:reason:)(SwiftUI::PPTTestCase::Name _, Swift::String_optional reason)
{
  void *countAndFlagsBits;
  void *object;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  countAndFlagsBits = (void *)reason.value._countAndFlagsBits;
  object = _.rawValue._object;
  v4 = *(_QWORD *)_.rawValue._countAndFlagsBits;
  v5 = *(_QWORD *)(_.rawValue._countAndFlagsBits + 8);
  if ((static ProcessEnvironment.BOOL(forKey:defaultValue:)() & 1) != 0)
  {
    type metadata accessor for AGGraphRef(0);
    static AGGraphRef.stopTracing()();
  }
  else if ((static ProcessEnvironment.BOOL(forKey:defaultValue:)() & 1) != 0)
  {
    AGGraphStopProfiling();
    AGGraphResetProfile();
  }
  v6 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v7 = (void *)MEMORY[0x18D75CC88](v4, v5);
  if (countAndFlagsBits)
    countAndFlagsBits = (void *)MEMORY[0x18D75CC88](object, countAndFlagsBits);
  objc_msgSend(v6, sel_failedTest_withFailure_, v7, countAndFlagsBits);

  v8 = xmmword_187BF9840;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v12 = 0;
  PPTTestBridge.testCase.setter((uint64_t)&v8);
}

void protocol witness for PPTTestRunner.startPPTTest(_:) in conformance PPTTestBridge<A>(uint64_t a1, uint64_t a2)
{
  PPTTestBridge.startPPTTest(_:)(*(SwiftUI::PPTTestCase::Name *)&a1);
}

void protocol witness for PPTTestRunner.startedPPTSubTest(_:forTest:) in conformance PPTTestBridge<A>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  protocol witness for PPTTestRunner.startedPPTSubTest(_:forTest:) in conformance PPTTestBridge<A>(a1, a2, a3, a4, (SEL *)&selRef_startedSubTest_forTest_);
}

void protocol witness for PPTTestRunner.finishedPPTSubTest(_:forTest:) in conformance PPTTestBridge<A>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  protocol witness for PPTTestRunner.startedPPTSubTest(_:forTest:) in conformance PPTTestBridge<A>(a1, a2, a3, a4, (SEL *)&selRef_finishedSubTest_forTest_);
}

void protocol witness for PPTTestRunner.startedPPTSubTest(_:forTest:) in conformance PPTTestBridge<A>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;

  v6 = *a1;
  v7 = a1[1];
  v8 = *a2;
  v9 = a2[1];
  v10 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v11 = (void *)MEMORY[0x18D75CC88](v6, v7);
  v12 = (id)MEMORY[0x18D75CC88](v8, v9);
  objc_msgSend(v10, *a5, v11, v12);

}

uint64_t outlined assign with copy of PPTTestCase?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for PPTTestCase?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for CommandFlag()
{
  return &type metadata for CommandFlag;
}

uint64_t type metadata completion function for WithCommandFlag()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WithCommandFlag(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 8) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 8) & ~v5, ((unint64_t)a2 + v5 + 8) & ~v5);
  }
  return v3;
}

uint64_t destroy for WithCommandFlag(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for WithCommandFlag(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *assignWithCopy for WithCommandFlag(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *initializeWithTake for WithCommandFlag(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *assignWithTake for WithCommandFlag(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for WithCommandFlag(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 8) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 8) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1871108A0 + 4 * byte_187C0A448[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for WithCommandFlag(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for WithCommandFlag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WithCommandFlag);
}

uint64_t WithCommandFlag.SetFlag.list.getter(uint64_t a1)
{
  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1))
    return 0;
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

unint64_t lazy protocol witness table accessor for type CommandFlag and conformance CommandFlag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CommandFlag and conformance CommandFlag;
  if (!lazy protocol witness table cache variable for type CommandFlag and conformance CommandFlag)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandFlag, &type metadata for CommandFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandFlag and conformance CommandFlag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CommandFlag and conformance CommandFlag;
  if (!lazy protocol witness table cache variable for type CommandFlag and conformance CommandFlag)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandFlag, &type metadata for CommandFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandFlag and conformance CommandFlag);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for Commands.Body : Commands in WithCommandFlag<A>()
{
  return &protocol witness table for Never;
}

_QWORD *WithCommandFlag.SetFlag.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t Value;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = type metadata accessor for WithCommandFlag(0, a2, a3, a4);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (uint64_t *)((char *)&v29 - v8);
  v30 = type metadata accessor for CommandsList.Item.Value(0);
  MEMORY[0x1E0C80A78](v30, v10);
  v12 = (uint64_t *)((char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for CommandsList.Item(0);
  v31 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v29 - v19;
  v21 = WithCommandFlag.SetFlag.list.getter(a1);
  if (v21)
    v22 = (_QWORD *)v21;
  else
    v22 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  Value = AGGraphGetValue();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16))(v9, Value, v5);
  v24 = *v9;
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v9, v5);
  *v12 = v24;
  swift_storeEnumTagMultiPayload();
  DisplayList.Version.init(forUpdate:)();
  v25 = v32;
  outlined init with take of TableCellFormula((uint64_t)v12, (uint64_t)v20, type metadata accessor for CommandsList.Item.Value);
  *(_QWORD *)&v20[*(int *)(v13 + 20)] = v25;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v20, (uint64_t)v16, type metadata accessor for CommandsList.Item);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v22 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
  v27 = v22[2];
  v26 = v22[3];
  if (v27 >= v26 >> 1)
    v22 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v22);
  v22[2] = v27 + 1;
  outlined init with take of TableCellFormula((uint64_t)v16, (uint64_t)v22+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(_QWORD *)(v31 + 72) * v27, type metadata accessor for CommandsList.Item);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, type metadata accessor for CommandsList.Item);
  return v22;
}

_QWORD *protocol witness for Rule.value.getter in conformance WithCommandFlag<A>.SetFlag@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  _QWORD *result;

  result = WithCommandFlag.SetFlag.value.getter(*v3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  *a3 = result;
  return result;
}

uint64_t static WithCommandFlag._makeCommands(content:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t *v31;
  int v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;

  v31 = a5;
  v45 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD *)a2;
  v10 = *(_DWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v14 = *(_DWORD *)(a2 + 56);
  v35 = a3;
  v36 = a4;
  v30 = v8;
  LODWORD(v37) = v8;
  type metadata accessor for WithCommandFlag(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a2 + 32);
  _GraphValue.subscript.getter();
  v37 = v9;
  v38 = v10;
  v39 = v11;
  v40 = v15;
  v41 = v16;
  v42 = v13;
  v43 = v12;
  v44 = v14;
  (*(void (**)(unint64_t *__return_ptr, int *, unint64_t *, uint64_t, uint64_t))(a4 + 32))(&v33, &v32, &v37, a3, a4);
  v37 = v12;
  v38 = v14;
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
  {
    LODWORD(v37) = v30;
    v18 = _GraphValue.value.getter();
    v37 = v33;
    v38 = v34;
    v19 = PreferencesOutputs.subscript.getter();
    v21 = *MEMORY[0x1E0CFED28];
    if ((v19 & 0x100000000) == 0)
      v21 = v19;
    v37 = __PAIR64__(v21, v18);
    MEMORY[0x1E0C80A78](v19, v20);
    v28 = type metadata accessor for WithCommandFlag.SetFlag(0, a3, a4, v22);
    v29 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WithCommandFlag<A>.SetFlag, v28);
    type metadata accessor for Attribute<CommandsList>();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v37, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_8, (uint64_t)&v27, v28, MEMORY[0x1E0DEDCE8], v23, MEMORY[0x1E0DEDD18], v24);
    LOBYTE(v37) = 0;
    result = PreferencesOutputs.subscript.setter();
  }
  v25 = v34;
  v26 = v31;
  *v31 = v33;
  *((_DWORD *)v26 + 2) = v25;
  return result;
}

uint64_t closure #1 in static WithCommandFlag._makeCommands(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v6 = type metadata accessor for WithCommandFlag(0, a2, a3, a4);
  v7 = a1 + *(int *)(v6 + 36);
  v11[2] = v6;
  v11[3] = a2;
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, a2, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11[5];
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance WithCommandFlag<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  return static WithCommandFlag._makeCommands(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t partial apply for closure #1 in static WithCommandFlag._makeCommands(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static WithCommandFlag._makeCommands(content:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t closure #1 in AppGraph.supports(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v7 = type metadata accessor for CommandsList.Item.Value(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (uint64_t *)((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for CommandsList.Item(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_DWORD *)(a1 + 232) == *MEMORY[0x1E0CFED28])
  {
    v16 = MEMORY[0x1E0DEE9D8];
    v17 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (v17)
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    v21 = 0;
    goto LABEL_13;
  }
  AGGraphGetValue();
  v16 = swift_bridgeObjectRetain();
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
    goto LABEL_10;
LABEL_3:
  v22 = v16;
  v23 = a3;
  v24 = v3;
  v18 = v16 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v19 = *(_QWORD *)(v12 + 72);
  swift_bridgeObjectRetain();
  do
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v18, (uint64_t)v15, type metadata accessor for CommandsList.Item);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, (uint64_t)v10, type metadata accessor for CommandsList.Item.Value);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      if (*v10 == a2)
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, type metadata accessor for CommandsList.Item);
        result = swift_bridgeObjectRelease_n();
        v21 = 1;
        goto LABEL_12;
      }
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for CommandsList.Item.Value);
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, type metadata accessor for CommandsList.Item);
    v18 += v19;
    --v17;
  }
  while (v17);
  result = swift_bridgeObjectRelease_n();
  v21 = 0;
LABEL_12:
  a3 = v23;
LABEL_13:
  *a3 = v21;
  return result;
}

uint64_t type metadata accessor for WithCommandFlag.SetFlag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WithCommandFlag.SetFlag);
}

void type metadata accessor for Attribute<CommandsList>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<CommandsList>)
  {
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<CommandsList>);
  }
}

void base witness table accessor for _AttributeBody in WithCommandFlag<A>.SetFlag()
{
  JUMPOUT(0x18D75FFDCLL);
}

ValueMetadata *type metadata accessor for _CommandsInputs()
{
  return &type metadata for _CommandsInputs;
}

uint64_t initializeBufferWithCopyOfBuffer for _CommandsOutputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _CommandsOutputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for _CommandsOutputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for _CommandsOutputs()
{
  return &type metadata for _CommandsOutputs;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = MEMORY[0x1E0DEE9D8];
  v7 = MEMORY[0x1E0DEE9D8];
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      swift_getKeyPath();
      swift_getAtKeyPath();
      v5 = swift_release();
      if (v6)
      {
        MEMORY[0x18D75CF58](v5);
        if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v4 += 8;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = MEMORY[0x1E0DEE9D8];
  v7 = MEMORY[0x1E0DEE9D8];
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      swift_getKeyPath();
      swift_getAtKeyPath();
      v5 = swift_release();
      if (v6)
      {
        MEMORY[0x18D75CF58](v5);
        if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v4 += 8;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t i;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _BYTE v26[40];
  _BYTE v27[48];

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = MEMORY[0x1E0DEE9D8];
  if (v5)
    goto LABEL_31;
LABEL_6:
  v10 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v10 < v6)
    {
      v11 = *(_QWORD *)(v2 + 8 * v10);
      ++v8;
      if (v11)
        goto LABEL_21;
      v8 = v10 + 1;
      if (v10 + 1 >= v6)
        goto LABEL_32;
      v11 = *(_QWORD *)(v2 + 8 * v8);
      if (v11)
        goto LABEL_21;
      v8 = v10 + 2;
      if (v10 + 2 >= v6)
        goto LABEL_32;
      v11 = *(_QWORD *)(v2 + 8 * v8);
      if (v11)
        goto LABEL_21;
      v8 = v10 + 3;
      if (v10 + 3 >= v6)
        goto LABEL_32;
      v11 = *(_QWORD *)(v2 + 8 * v8);
      if (v11)
      {
LABEL_21:
        v5 = (v11 - 1) & v11;
        for (i = __clz(__rbit64(v11)) + (v8 << 6); ; i = v19 | (v8 << 6))
        {
          outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(a1 + 48) + 40 * i, (uint64_t)v27);
          outlined init with take of ToolbarPlacement.Role((uint64_t)v27, (uint64_t)v26);
          outlined init with copy of ToolbarPlacement.Role((uint64_t)v26, (uint64_t)&v20);
          if (*((_QWORD *)&v21 + 1) >= 7uLL)
          {
            v23 = v20;
            v24 = v21;
            v25 = v22;
          }
          else
          {
            v25 = 0;
            v23 = 0u;
            v24 = 0u;
            outlined destroy of ToolbarPlacement.Role((uint64_t)&v20);
          }
          outlined destroy of ToolbarPlacement.Role((uint64_t)v26);
          if (*((_QWORD *)&v24 + 1))
          {
            v20 = v23;
            v21 = v24;
            v22 = v25;
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1, (char *)v9);
              v9 = result;
            }
            v15 = *(_QWORD *)(v9 + 16);
            v14 = *(_QWORD *)(v9 + 24);
            if (v15 >= v14 >> 1)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, (char *)v9);
              v9 = result;
            }
            *(_QWORD *)(v9 + 16) = v15 + 1;
            v16 = v9 + 40 * v15;
            v17 = v20;
            v18 = v21;
            *(_QWORD *)(v16 + 64) = v22;
            *(_OWORD *)(v16 + 32) = v17;
            *(_OWORD *)(v16 + 48) = v18;
            if (!v5)
              goto LABEL_6;
          }
          else
          {
            result = outlined destroy of AccessibilityTableContext?((uint64_t)&v23, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
            if (!v5)
              goto LABEL_6;
          }
LABEL_31:
          v19 = __clz(__rbit64(v5));
          v5 &= v5 - 1;
        }
      }
      v12 = v10 + 4;
      if (v12 < v6)
      {
        v11 = *(_QWORD *)(v2 + 8 * v12);
        if (v11)
        {
          v8 = v12;
          goto LABEL_21;
        }
        while (1)
        {
          v8 = v12 + 1;
          if (__OFADD__(v12, 1))
            goto LABEL_34;
          if (v8 >= v6)
            break;
          v11 = *(_QWORD *)(v2 + 8 * v8);
          ++v12;
          if (v11)
            goto LABEL_21;
        }
      }
    }
LABEL_32:
    swift_release();
    return v9;
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

double AccessibilityGeometryStorage.updateFrame()()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  __int128 v3;
  _OWORD v4[2];
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;

  *(_BYTE *)(v0 + 17) = 0;
  if ((*(_BYTE *)(v0 + 80) & 1) == 0)
  {
    v1 = *(_QWORD *)(v0 + 24);
    if (v1 != 1)
    {
      v7 = 0uLL;
      v8 = *(_OWORD *)(v0 + 64);
      v5 = 0;
      memset(v4, 0, sizeof(v4));
      v6 = 2;
      swift_retain();
      CGRect.convert(to:transform:)();
      outlined destroy of CoordinateSpace((uint64_t)v4);
      outlined consume of Transaction?(v1);
      result = *(double *)&v7;
      v3 = v8;
      *(_OWORD *)(v0 + 88) = v7;
      *(_OWORD *)(v0 + 104) = v3;
      *(_BYTE *)(v0 + 120) = 0;
    }
  }
  return result;
}

uint64_t AccessibilityGeometryStorage.updatePath()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  unsigned __int8 v45;
  double v46;
  CGFloat v47;
  double v48;
  CGFloat v49;
  double v50;
  CGFloat v51;
  double v52;
  CGFloat v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  char v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  _OWORD v72[2];
  char v73;
  _OWORD v74[2];
  char v75;
  __int128 v76;
  __int128 v77;
  char v78;
  _OWORD v79[2];
  char v80;
  _OWORD v81[2];
  char v82;
  _BYTE v83[40];
  _BYTE v84[40];
  _QWORD v85[5];
  __int128 v86;
  __int128 v87;
  char v88;
  CGRect v89;
  CGRect v90;
  CGRect v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;
  CGRect v95;

  *(_BYTE *)(v0 + 16) = 0;
  v65 = 0u;
  v66 = 0u;
  v67 = 6;
  v1 = swift_bridgeObjectRetain();
  v2 = specialized Sequence.compactMap<A>(_:)(v1);
  swift_bridgeObjectRelease();
  if (v2 >> 62)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3)
      goto LABEL_3;
LABEL_26:
    swift_bridgeObjectRelease();
    v74[0] = v65;
    v74[1] = v66;
    v75 = v67;
    outlined init with take of Path.Storage((uint64_t)v74, (uint64_t)v85);
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v85, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    v36 = Path.isEmpty.getter();
    v37 = outlined retain of TableColumnCustomizationID.Base((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    if ((v36 & 1) != 0)
      return outlined retain of TableColumnCustomizationID.Base((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    v64 = 0;
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    v63 = -1;
    MEMORY[0x1E0C80A78](v37, v38);
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v85, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    Path.forEach(_:)();
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    if (v64 == 1)
    {
      v39 = v67;
      v40 = *(_QWORD *)(v59 + 144);
      v41 = *(_QWORD *)(v59 + 152);
      v42 = *(_QWORD *)(v59 + 160);
      v43 = *(_QWORD *)(v59 + 168);
      v44 = v66;
      *(_OWORD *)(v59 + 144) = v65;
      *(_OWORD *)(v59 + 160) = v44;
      v45 = *(_BYTE *)(v59 + 176);
      *(_BYTE *)(v59 + 176) = v39;
    }
    else
    {
      v72[0] = v65;
      v72[1] = v66;
      v73 = v67;
      outlined init with take of Path.Storage((uint64_t)v72, (uint64_t)&v86);
      outlined retain of TableColumnCustomizationID.Base((uint64_t)&v86, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
      Path.boundingRect.getter();
      v47 = v46;
      v49 = v48;
      v51 = v50;
      v53 = v52;
      outlined retain of TableColumnCustomizationID.Base((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      v93.origin.x = v47;
      v93.origin.y = v49;
      v93.size.width = v51;
      v93.size.height = v53;
      CGRectStandardize(v93);
      Path.init(roundedRect:cornerRadius:style:)();
      v54 = v68;
      v58 = v69;
      v55 = v70;
      v56 = v71;
      outlined retain of TableColumnCustomizationID.Base((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      v40 = *(_QWORD *)(v59 + 144);
      v41 = *(_QWORD *)(v59 + 152);
      v42 = *(_QWORD *)(v59 + 160);
      v43 = *(_QWORD *)(v59 + 168);
      *(_QWORD *)(v59 + 144) = v54;
      *(_OWORD *)(v59 + 152) = v58;
      *(_QWORD *)(v59 + 168) = v55;
      v45 = *(_BYTE *)(v59 + 176);
      *(_BYTE *)(v59 + 176) = v56;
    }
    return outlined consume of Path?(v40, v41, v42, v43, v45);
  }
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v3)
    goto LABEL_26;
LABEL_3:
  v57 = v2 & 0xC000000000000001;
  v4 = 4;
  while (1)
  {
    v5 = v4 - 4;
    if (v57)
    {
      result = MEMORY[0x18D75E3BC](v4 - 4, v2);
      v7 = v4 - 3;
      if (__OFADD__(v5, 1))
        goto LABEL_24;
    }
    else
    {
      result = swift_retain();
      v7 = v4 - 3;
      if (__OFADD__(v5, 1))
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    v8 = v2;
    v9 = *(_QWORD *)(v59 + 136);
    if (!v9)
    {
      type metadata accessor for AccessibilityGeometryStorage.PathObserver();
      v10 = swift_allocObject();
      swift_weakInit();
      swift_weakAssign();
      *(_QWORD *)(v59 + 136) = v10;
      result = swift_release();
      v9 = *(_QWORD *)(v59 + 136);
    }
    v86 = 0u;
    v87 = 0u;
    v88 = 6;
    v85[0] = 64;
    *(_QWORD *)&v62 = 0;
    v60 = 0u;
    v61 = 0u;
    BYTE8(v62) = 2;
    if (!v9)
      break;
    swift_retain();
    dispatch thunk of ViewResponder.addContentPath(to:kind:in:observer:)();
    swift_release();
    outlined destroy of CoordinateSpace((uint64_t)&v60);
    v81[0] = v86;
    v81[1] = v87;
    v82 = v88;
    outlined init with take of Path.Storage((uint64_t)v81, (uint64_t)v83);
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    v11 = Path.isEmpty.getter();
    result = outlined retain of TableColumnCustomizationID.Base((uint64_t)v81, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    if ((v11 & 1) != 0)
    {
      v85[0] = 1;
      *(_QWORD *)&v62 = 0;
      v60 = 0u;
      v61 = 0u;
      BYTE8(v62) = 2;
      if (!*(_QWORD *)(v59 + 136))
        goto LABEL_33;
      swift_retain();
      dispatch thunk of ViewResponder.addContentPath(to:kind:in:observer:)();
      swift_release();
      outlined destroy of CoordinateSpace((uint64_t)&v60);
    }
    v76 = v86;
    v77 = v87;
    v78 = v88;
    outlined init with take of Path.Storage((uint64_t)&v76, (uint64_t)v84);
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v84, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    if ((Path.isEmpty.getter() & 1) != 0)
    {
      outlined retain of TableColumnCustomizationID.Base((uint64_t)&v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      swift_release();
      outlined retain of TableColumnCustomizationID.Base((uint64_t)&v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      v2 = v8;
    }
    else
    {
      Path.boundingRect.getter();
      v90 = CGRectStandardize(v89);
      v2 = v8;
      if (!CGRectIsEmpty(v90))
      {
        Path.boundingRect.getter();
        v13 = v12;
        v15 = v14;
        v17 = v16;
        v19 = v18;
        v79[0] = v65;
        v79[1] = v66;
        v80 = v67;
        Path.boundingRect.getter();
        v94.origin.x = v20;
        v94.origin.y = v21;
        v94.size.width = v22;
        v94.size.height = v23;
        v91.origin.x = v13;
        v91.origin.y = v15;
        v91.size.width = v17;
        v91.size.height = v19;
        if (CGRectContainsRect(v91, v94))
        {
          outlined retain of TableColumnCustomizationID.Base((uint64_t)v79, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
          swift_release();
          outlined retain of TableColumnCustomizationID.Base((uint64_t)&v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
          v65 = v76;
          v66 = v77;
          v67 = v78;
          goto LABEL_5;
        }
        Path.boundingRect.getter();
        v25 = v24;
        v27 = v26;
        v29 = v28;
        v31 = v30;
        Path.boundingRect.getter();
        v95.origin.x = v32;
        v95.origin.y = v33;
        v95.size.width = v34;
        v95.size.height = v35;
        v92.origin.x = v25;
        v92.origin.y = v27;
        v92.size.width = v29;
        v92.size.height = v31;
        if (!CGRectContainsRect(v92, v95))
          Path.formTrivialUnion(_:)();
      }
      outlined retain of TableColumnCustomizationID.Base((uint64_t)&v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      swift_release();
      outlined retain of TableColumnCustomizationID.Base((uint64_t)&v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    }
LABEL_5:
    ++v4;
    if (v7 == v3)
      goto LABEL_26;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t Path.accessibilityUnion(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  __int128 v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  __int128 v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  _BYTE v30[40];
  _OWORD v31[2];
  char v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;

  result = Path.isEmpty.getter();
  if ((result & 1) == 0)
  {
    Path.boundingRect.getter();
    v34 = CGRectStandardize(v33);
    result = CGRectIsEmpty(v34);
    if ((result & 1) == 0)
    {
      Path.boundingRect.getter();
      v5 = v4;
      v7 = v6;
      v9 = v8;
      v11 = v10;
      v12 = *(_OWORD *)(v1 + 16);
      v31[0] = *(_OWORD *)v1;
      v31[1] = v12;
      v32 = *(_BYTE *)(v1 + 32);
      Path.boundingRect.getter();
      v37.origin.x = v13;
      v37.origin.y = v14;
      v37.size.width = v15;
      v37.size.height = v16;
      v35.origin.x = v5;
      v35.origin.y = v7;
      v35.size.width = v9;
      v35.size.height = v11;
      if (CGRectContainsRect(v35, v37))
      {
        outlined retain of TableColumnCustomizationID.Base((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
        v17 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)v1 = *(_OWORD *)a1;
        *(_OWORD *)(v1 + 16) = v17;
        *(_BYTE *)(v1 + 32) = *(_BYTE *)(a1 + 32);
        outlined init with take of Path.Storage(a1, (uint64_t)v30);
        return outlined retain of TableColumnCustomizationID.Base((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
      }
      else
      {
        Path.boundingRect.getter();
        v19 = v18;
        v21 = v20;
        v23 = v22;
        v25 = v24;
        Path.boundingRect.getter();
        v38.origin.x = v26;
        v38.origin.y = v27;
        v38.size.width = v28;
        v38.size.height = v29;
        v36.origin.x = v19;
        v36.origin.y = v21;
        v36.size.width = v23;
        v36.size.height = v25;
        result = CGRectContainsRect(v36, v38);
        if ((result & 1) == 0)
          return Path.formTrivialUnion(_:)();
      }
    }
  }
  return result;
}

uint64_t closure #1 in AccessibilityGeometryStorage.updatePath()(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t result;
  _QWORD v15[6];
  char v16;
  _BYTE v17[56];

  outlined init with take of Path.Element(a1, (uint64_t)v15);
  v5 = v15[0];
  v6 = v15[1];
  v7 = v15[2];
  v8 = v15[3];
  v9 = v15[4];
  v10 = v15[5];
  v11 = v16;
  v12 = *(unsigned __int8 *)(a2 + 48);
  result = outlined init with take of Path.Element(a1, (uint64_t)v17);
  if (v17[48] || !v12)
    goto LABEL_5;
  if (!__OFADD__(*a3, 1))
  {
    ++*a3;
LABEL_5:
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 24) = v8;
    *(_QWORD *)(a2 + 32) = v9;
    *(_QWORD *)(a2 + 40) = v10;
    *(_BYTE *)(a2 + 48) = v11;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityGeometryStorage.PathObserver.__deallocating_deinit()
{
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ContentPathObserver.respondersDidChange(for:) in conformance AccessibilityGeometryStorage.PathObserver()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityGeometryStorage.PathObserver);
  return TrivialContentPathObserver.respondersDidChange(for:)();
}

uint64_t protocol witness for ContentPathObserver.contentPathDidChange(for:changes:transform:finished:) in conformance AccessibilityGeometryStorage.PathObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityGeometryStorage.PathObserver, a6);
  return TrivialContentPathObserver.contentPathDidChange(for:changes:transform:finished:)();
}

uint64_t AccessibilityGeometryStorage.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;

  _StringGuts.grow(_:)(225);
  v1._object = (void *)0x8000000187BD7CB0;
  v1._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._object = (void *)0x8000000187BD7CD0;
  v2._countAndFlagsBits = 0x1000000000000015;
  String.append(_:)(v2);
  outlined copy of Transaction?(*(_QWORD *)(v0 + 24));
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ViewTransform?, MEMORY[0x1E0CE2248], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v4._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0xBF96E2202020200ALL;
  v5._object = (void *)0xAF203A657A697320;
  String.append(_:)(v5);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CGSize?, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, v3);
  v6._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x1000000000000016;
  v7._object = (void *)0x8000000187BD7CF0;
  String.append(_:)(v7);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, v3);
  v8._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x100000000000001BLL;
  v9._object = (void *)0x8000000187BD7D10;
  String.append(_:)(v9);
  if (*(_BYTE *)(v0 + 17))
    v10 = 1702195828;
  else
    v10 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 17))
    v11 = 0xE400000000000000;
  else
    v11 = 0xE500000000000000;
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x8000000187BD7D30;
  v13._countAndFlagsBits = 0x1000000000000015;
  String.append(_:)(v13);
  outlined copy of Path?(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), *(_BYTE *)(v0 + 176));
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Path?, MEMORY[0x1E0CE6B18], v3);
  v14._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x100000000000001ALL;
  v15._object = (void *)0x8000000187BD7D50;
  String.append(_:)(v15);
  if (*(_BYTE *)(v0 + 16))
    v16 = 1702195828;
  else
    v16 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 16))
    v17 = 0xE400000000000000;
  else
    v17 = 0xE500000000000000;
  v18 = v17;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0x1000000000000019;
  v19._object = (void *)0x8000000187BD7D70;
  String.append(_:)(v19);
  v20 = swift_bridgeObjectRetain();
  v21 = specialized Sequence.compactMap<A>(_:)(v20);
  swift_bridgeObjectRelease();
  v22 = type metadata accessor for ViewResponder();
  v23._countAndFlagsBits = MEMORY[0x18D75CF7C](v21, v22);
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0x1000000000000013;
  v24._object = (void *)0x8000000187BD7D90;
  String.append(_:)(v24);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for AccessibilityGeometryStorage.PathObserver?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityGeometryStorage.PathObserver, v3);
  swift_retain();
  v25._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t AccessibilityGeometryStorage.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of Transaction?(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of Path?(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), *(_BYTE *)(v0 + 176));
  swift_unknownObjectWeakDestroy();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AccessibilityGeometryStorage()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for AccessibilityGeometryStorage.PathObserver()
{
  return objc_opt_self();
}

_UNKNOWN **base witness table accessor for ViewModifier in CaptureViewRespondersModifier()
{
  return &protocol witness table for CaptureViewRespondersModifier;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityGeometryStorage()
{
  return AccessibilityGeometryStorage.description.getter();
}

void protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance IgnoreViewRespondersModifier(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 36) &= ~0x80u;
}

void protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance CaptureViewRespondersModifier(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 36) |= 0x80u;
}

_UNKNOWN **base witness table accessor for ViewModifier in IgnoreViewRespondersModifier()
{
  return &protocol witness table for IgnoreViewRespondersModifier;
}

_UNKNOWN **base witness table accessor for ContentPathObserver in AccessibilityGeometryStorage.PathObserver()
{
  return &protocol witness table for AccessibilityGeometryStorage.PathObserver;
}

void protocol witness for ViewModifier.body(content:) in conformance CaptureViewRespondersModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

uint64_t static AccessibilityFrameModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t result;
  unint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  char v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  int v40;
  unint64_t v42;
  int v43;
  int v44;
  unint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_DWORD *)(a2 + 24);
  v8 = *(_DWORD *)(a2 + 28);
  v10 = *(_DWORD *)(a2 + 32);
  v9 = *(_DWORD *)(a2 + 36);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v14 = *(_DWORD *)(a2 + 56);
  v13 = *(_DWORD *)(a2 + 60);
  v15 = *(_DWORD *)(a2 + 64);
  v16 = *(_DWORD *)(a2 + 68);
  v17 = *(_DWORD *)(a2 + 72);
  v18 = *(_DWORD *)(a2 + 76);
  v19 = *(_DWORD *)(a2 + 80);
  v45 = *(_QWORD *)a2;
  v40 = v5;
  v46 = v5;
  v39 = v6;
  v48 = v6;
  v49 = v7;
  v50 = v8;
  v51 = __PAIR64__(v9, v10);
  v38 = v9;
  v37 = v11;
  v52 = v11;
  v53 = v12;
  v54 = v14;
  v55 = v13;
  v35 = v15;
  v36 = v13;
  v56 = v15;
  v57 = v16;
  v33 = v17;
  v34 = v16;
  v58 = v17;
  v59 = v18;
  v31 = v19;
  v32 = v18;
  v60 = v19;
  a3(&v42, a1, &v45);
  v45 = v12;
  v46 = v14;
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v21 = v42;
  v22 = v43;
  v23 = v44;
  if ((result & 1) != 0)
  {
    v45 = v42;
    v46 = v43;
    v47 = v44;
    result = _ViewOutputs.subscript.getter();
    if ((result & 0x100000000) == 0)
    {
      v45 = v4;
      v46 = v40;
      v48 = v39;
      v49 = v7;
      v50 = v8;
      v51 = __PAIR64__(v38, v10);
      v52 = v37;
      v53 = v12;
      v54 = v14;
      v55 = v36;
      v56 = v35;
      v57 = v34;
      v58 = v33;
      v59 = v32;
      v60 = v31;
      v24 = result;
      swift_getKeyPath();
      v25 = _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      v45 = v21;
      v46 = v22;
      v47 = v23;
      v26 = _ViewOutputs.subscript.getter();
      v27 = *MEMORY[0x1E0CFED28];
      if ((v26 & 0x100000000) != 0)
        v28 = *MEMORY[0x1E0CFED28];
      else
        v28 = v26;
      AccessibilityAttachmentToken.init<A>(_:)();
      v29 = v45;
      v30 = v46;
      v45 = __PAIR64__(v25, v24);
      v46 = v28;
      v47 = v27;
      v48 = v29;
      LOBYTE(v49) = v30;
      v51 = 0;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type ViewResponderTransform and conformance ViewResponderTransform();
      Attribute.init<A>(body:value:flags:update:)();
      static AGAttributeFlags.removable.getter();
      AGGraphSetFlags();
      LOBYTE(v45) = 0;
      result = _ViewOutputs.subscript.setter();
      v21 = v42;
      v22 = v43;
      v23 = v44;
    }
  }
  *(_QWORD *)a4 = v21;
  *(_DWORD *)(a4 + 8) = v22;
  *(_DWORD *)(a4 + 12) = v23;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityFrameModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

uint64_t ViewResponderTransform.updateValue()()
{
  unint64_t v0;
  void *v1;
  unint64_t v2;
  unint64_t *Value;
  char v4;
  char v5;
  unint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t j;
  id v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t i;
  char *v24;
  void *v25;
  Swift::Int v26;
  void **v27;
  int v28;
  int v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  char v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  void *v48;
  uint64_t v49;
  char **v50;
  char *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  char v55;
  int v56;
  void *v57;
  uint64_t v58;
  char *v59;
  id v60;
  id v61;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;

  v2 = v0;
  v85 = *MEMORY[0x1E0C80C00];
  Value = (unint64_t *)AGGraphGetValue();
  v5 = v4;
  v6 = *Value;
  v7 = (void *)Value[1];
  v8 = *(_DWORD *)(v0 + 12);
  if (*(_BYTE *)AGGraphGetValue() != 1
    || (v9 = *MEMORY[0x1E0CFED28], v8 != (_DWORD)v9) && (*(_BYTE *)AGGraphGetValue() & 0x41) == 0)
  {
    swift_bridgeObjectRetain();
    goto LABEL_20;
  }
  swift_bridgeObjectRetain_n();
  v10 = v6 >> 62;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 == 1)
    {
LABEL_30:
      if ((v5 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v20 = 0;
        goto LABEL_44;
      }
      Hasher.init()();
      v21 = v10;
      if (v10)
      {
        swift_bridgeObjectRetain();
        v22 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v22)
        {
LABEL_34:
          if (v22 >= 1)
          {
            for (i = 0; i != v22; ++i)
            {
              if ((v6 & 0xC000000000000001) != 0)
                v24 = (char *)MEMORY[0x18D75E3BC](i, v6);
              else
                v24 = (char *)*(id *)(v6 + 8 * i + 32);
              v25 = v24;
              Hasher._combine(_:)(*(_QWORD *)&v24[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id]);

            }
            goto LABEL_43;
          }
LABEL_99:
          __break(1u);
          goto LABEL_100;
        }
      }
      else
      {
        v22 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v22)
          goto LABEL_34;
      }
LABEL_43:
      swift_bridgeObjectRelease();
      v26 = Hasher.finalize()();
      v20 = *(_QWORD *)(v2 + 32) != v26;
      *(_QWORD *)(v2 + 32) = v26;
      v10 = v21;
      v9 = v9;
LABEL_44:
      if (*(_DWORD *)(v2 + 8) == (_DWORD)v9
        || (type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]), v27 = (void **)AGGraphGetValue(), v29 = v28, v1 = *v27, swift_bridgeObjectRetain(), !v1))
      {
        swift_bridgeObjectRelease();
        v1 = (void *)MEMORY[0x1E0DEE9D8];
        if (!v20)
          goto LABEL_47;
      }
      else
      {
        swift_bridgeObjectRelease();
        if (((v20 | v29) & 1) == 0)
        {
LABEL_47:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          v77 = v6;
          v78 = v7;
          goto LABEL_20;
        }
      }
      v30 = *(unsigned __int8 *)(v2 + 24);
      if (v30 != 255)
      {
        v31 = (uint64_t *)(v2 + 16);
        LODWORD(v2) = v30 & 1;
LABEL_53:
        v9 = *v31;
        if (v10)
          goto LABEL_94;
        v32 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRelease_n();
        if (v32 != 1)
        {
          v42 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (!v42)
          {
LABEL_96:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_97:
            v83 = v6;
            v84 = v7;
            goto LABEL_20;
          }
          while (1)
          {
            v43 = 0;
            v44 = v6 & 0xC000000000000001;
            v70 = v2;
            v74 = v7;
            v71 = (unint64_t)v1;
            v72 = v42;
            while (1)
            {
              if (v44)
              {
                v45 = (char *)MEMORY[0x18D75E3BC](v43, v6);
              }
              else
              {
                if (v43 >= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
                  goto LABEL_93;
                v45 = (char *)*(id *)(v6 + 32 + 8 * v43);
              }
              v46 = v45;
              if (__OFADD__(v43++, 1))
                break;
              AccessibilityNode.visibility.getter((int *)&v83);
              if ((v83 & 4) != 0 || (v83 & 8) != 0 && (v83 & 0x400000000) == 0)
              {

                if (v43 == v42)
                  goto LABEL_96;
              }
              else
              {
                v48 = v7;
                v49 = v9;
                v50 = (char **)&v46[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
                swift_beginAccess();
                v51 = *v50;
                v52 = *((_QWORD *)*v50 + 2);
                if (v52)
                {
                  swift_bridgeObjectRetain();
                  v53 = (unsigned __int8 *)(v51 + 64);
                  v54 = (unsigned __int8 *)(v51 + 64);
                  do
                  {
                    v56 = *v54;
                    v54 += 40;
                    v55 = v56;
                    if (v56 != 255)
                    {
                      v83 = *((_QWORD *)v53 - 1);
                      LOBYTE(v84) = v55;
                      v81 = v49;
                      LOBYTE(v82) = v2;
                      if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        v9 = v49;
                        v7 = v48;
                        goto LABEL_87;
                      }
                    }
                    v53 = v54;
                    --v52;
                  }
                  while (v52);
                  swift_bridgeObjectRelease();
                }
                type metadata accessor for AnyAccessibilityPropertiesEntry();
                v81 = Dictionary.init(minimumCapacity:)();
                static AccessibilityAttachment.properties(_:)();
                swift_bridgeObjectRelease();
                v58 = v83;
                v57 = v84;
                v81 = v83;
                v82 = v84;
                AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(&v81);
                v59 = *v50;
                v60 = v57;
                swift_bridgeObjectRetain_n();
                v61 = v60;
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *v50 = v59;
                v73 = v61;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v59 + 2) + 1, 1, v59);
                  *v50 = v59;
                }
                v2 = *((_QWORD *)v59 + 2);
                v63 = *((_QWORD *)v59 + 3);
                if (v2 >= v63 >> 1)
                {
                  v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v63 > 1), v2 + 1, 1, v59);
                  *v50 = v59;
                }
                *((_QWORD *)v59 + 2) = v2 + 1;
                v64 = &v59[40 * v2];
                *((_QWORD *)v64 + 4) = v58;
                *((_QWORD *)v64 + 5) = v57;
                *((_QWORD *)v64 + 6) = 0;
                *((_QWORD *)v64 + 7) = v49;
                v9 = v49;
                LODWORD(v2) = v70;
                v64[64] = v70;
                v65 = &v46[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                v66 = *(_QWORD *)&v46[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                v67 = *(void **)&v46[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
                *(_QWORD *)v65 = 0;
                *((_QWORD *)v65 + 1) = 0;
                outlined consume of AccessibilityAttachment?(v66, v67);
                v46[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

                swift_bridgeObjectRelease_n();
                v7 = v74;
LABEL_87:
                v1 = (void *)v71;
                v83 = v9;
                LOBYTE(v84) = v2;
                AccessibilityNode.updateViewResponders(_:token:)(v71, &v83);

                v44 = v6 & 0xC000000000000001;
                v42 = v72;
                if (v43 == v72)
                  goto LABEL_96;
              }
            }
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            swift_bridgeObjectRetain();
            v69 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease_n();
            if (v69 == 1)
              break;
            swift_bridgeObjectRetain();
            v42 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v42)
              goto LABEL_96;
          }
        }
        if ((v6 & 0xC000000000000001) == 0)
        {
          if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
            __break(1u);
          v33 = (char *)*(id *)(v6 + 32);
          goto LABEL_58;
        }
LABEL_101:
        v33 = (char *)MEMORY[0x18D75E3BC](0, v6);
LABEL_58:
        v34 = v33;
        swift_bridgeObjectRelease();
        v35 = &v34[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        v36 = *(_QWORD *)v35;
        v37 = *(_QWORD *)(v36 + 16);
        if (v37)
        {
          swift_bridgeObjectRetain();
          v38 = (unsigned __int8 *)(v36 + 64);
          v39 = (unsigned __int8 *)(v36 + 64);
          do
          {
            v41 = *v39;
            v39 += 40;
            v40 = v41;
            if (v41 != 255)
            {
              v83 = *((_QWORD *)v38 - 1);
              LOBYTE(v84) = v40;
              v81 = v9;
              LOBYTE(v82) = v2;
              if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                goto LABEL_91;
              }
            }
            v38 = v39;
            --v37;
          }
          while (v37);
          swift_bridgeObjectRelease();
        }
        type metadata accessor for AnyAccessibilityPropertiesEntry();
        v81 = Dictionary.init(minimumCapacity:)();
        static AccessibilityAttachment.properties(_:)();
        swift_bridgeObjectRelease();
        v68 = v84;
        v81 = v83;
        v82 = v84;
        v79 = v9;
        v80 = v2;
        specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)(&v81, &v79);
        swift_bridgeObjectRelease();

LABEL_91:
        v83 = v9;
        LOBYTE(v84) = v2;
        AccessibilityNode.updateViewResponders(_:token:)((unint64_t)v1, &v83);
        swift_bridgeObjectRelease();

        goto LABEL_97;
      }
      if (AGGraphGetCurrentAttribute() != (_DWORD)v9)
      {
        v31 = (uint64_t *)&v77;
        AccessibilityAttachmentToken.init<A>(_:)();
        LODWORD(v2) = v78;
        goto LABEL_53;
      }
LABEL_100:
      __break(1u);
      goto LABEL_101;
    }
  }
  else
  {
    v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v11 == 1)
      goto LABEL_30;
  }
  v12 = *(_QWORD *)AGGraphGetValue();
  v76 = MEMORY[0x1E0DEE9D8];
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    if (v13)
    {
LABEL_8:
      v75 = v9;
      if (v13 < 1)
      {
        __break(1u);
        goto LABEL_99;
      }
      for (j = 0; j != v13; ++j)
      {
        if ((v12 & 0xC000000000000001) != 0)
          v15 = (id)MEMORY[0x18D75E3BC](j, v12);
        else
          v15 = *(id *)(v12 + 8 * j + 32);
        v1 = v15;
        AccessibilityNode.visibility.getter((int *)&v77);
        if ((v77 & 4) != 0 || (v77 & 8) != 0 && (v77 & 0x400000000) == 0)
        {

        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      v17 = v76;
      v9 = v75;
      v10 = v6 >> 62;
      if (v76 < 0)
        goto LABEL_41;
      goto LABEL_27;
    }
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  v17 = MEMORY[0x1E0DEE9D8];
  v10 = v6 >> 62;
  if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
  {
LABEL_41:
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_29;
  }
LABEL_27:
  if ((v17 & 0x4000000000000000) != 0)
    goto LABEL_41;
  v19 = *(_QWORD *)(v17 + 16);
LABEL_29:
  swift_release();
  if (v19 == 1)
    goto LABEL_30;
  swift_bridgeObjectRelease_n();
LABEL_20:
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ViewResponderTransform()
{
  return 0xD000000000000023;
}

void GeometryTransform.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t *Value;
  char v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  uint64_t *v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  char v44;
  int v45;
  uint64_t v46;
  void *v47;
  double v48;
  double v49;
  unsigned __int8 v50;
  __int128 v51;
  unsigned __int8 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v1 = v0;
  v63 = *MEMORY[0x1E0C80C00];
  Value = (unint64_t *)AGGraphGetValue();
  v4 = v3;
  v5 = *Value;
  v6 = Value[1];
  v7 = *(_DWORD *)(v1 + 20);
  if (*(_BYTE *)AGGraphGetValue() != 1
    || (v8 = *MEMORY[0x1E0CFED28], v7 != *MEMORY[0x1E0CFED28]) && (*(_BYTE *)AGGraphGetValue() & 0x41) == 0)
  {
    swift_bridgeObjectRetain();
LABEL_13:
    v60 = v5;
    *(_QWORD *)&v61 = v6;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    return;
  }
  if (!(v5 >> 62))
  {
    v9 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v9 == 1)
      goto LABEL_6;
    goto LABEL_12;
  }
  swift_bridgeObjectRetain_n();
  v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v12 != 1)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_6:
  if ((v5 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_37;
    }
    v10 = (char *)*(id *)(v5 + 32);
    if ((v4 & 1) == 0)
      goto LABEL_9;
LABEL_15:
    v11 = *(_QWORD *)&v10[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id] != *(_QWORD *)(v1 + 40);
    goto LABEL_16;
  }
  v10 = (char *)MEMORY[0x18D75E3BC](0, v5);
  if ((v4 & 1) != 0)
    goto LABEL_15;
LABEL_9:
  v11 = 0;
LABEL_16:
  v13 = (uint64_t *)AGGraphGetValue();
  v15 = v14;
  v16 = *v13;
  v17 = v13[1];
  v18 = v13[2];
  v19 = v13[3];
  v20 = (uint64_t *)AGGraphGetValue();
  v22 = v21;
  v23 = *v20;
  v24 = v20[1];
  v25 = AGGraphGetValue();
  v27 = v26;
  v28 = *(_QWORD *)v25;
  v51 = *(_OWORD *)(v25 + 8);
  v29 = *(_QWORD *)(v25 + 24);
  v30 = *(_QWORD *)(v25 + 32);
  swift_retain();
  v31 = swift_bridgeObjectRelease();
  v60 = v28;
  v61 = v51;
  *(_QWORD *)&v62 = v29;
  *((_QWORD *)&v62 + 1) = v30;
  v32 = v27 | v11 | v15;
  if ((v32 & 1) == 0 && (v22 & 1) == 0)
  {
    v53 = v5;
    *(_QWORD *)&v54 = v6;
    AGGraphSetOutputValue();
    swift_release();
    swift_bridgeObjectRelease();

    return;
  }
  v33 = *(unsigned __int8 *)(v1 + 32);
  if (v33 != 255)
  {
    v34 = (uint64_t *)(v1 + 24);
    v35 = v33 & 1;
    goto LABEL_23;
  }
  if (AGGraphGetCurrentAttribute() == v8)
LABEL_37:
    __break(1u);
  v34 = &v53;
  v31 = AccessibilityAttachmentToken.init<A>(_:)();
  v35 = v54;
LABEL_23:
  v36 = *v34;
  v50 = v27 | v22;
  v52 = v32 ^ 1;
  v53 = v23;
  *(_QWORD *)&v54 = v24;
  *(double *)&v37 = MEMORY[0x18D755E9C](v31);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v38, v37));
  v39 = &v10[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
  swift_beginAccess();
  v40 = *(_QWORD *)v39;
  v41 = *(_QWORD *)(v40 + 16);
  if (v41)
  {
    swift_bridgeObjectRetain();
    v42 = (unsigned __int8 *)(v40 + 64);
    v43 = (unsigned __int8 *)(v40 + 64);
    do
    {
      v45 = *v43;
      v43 += 40;
      v44 = v45;
      if (v45 != 255)
      {
        v53 = *((_QWORD *)v42 - 1);
        LOBYTE(v54) = v44;
        v58 = v36;
        LOBYTE(v59) = v35;
        if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
        {
          v46 = swift_bridgeObjectRelease();
          goto LABEL_31;
        }
      }
      v42 = v43;
      --v41;
    }
    while (v41);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  v58 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  v47 = (void *)v54;
  v58 = v53;
  v59 = v54;
  v56 = v36;
  v57 = v35;
  specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)(&v58, &v56);
  swift_bridgeObjectRelease();

LABEL_31:
  if ((v15 & 1) != 0)
  {
    v53 = v16;
    *(_QWORD *)&v54 = v17;
    *((_QWORD *)&v54 + 1) = v18;
    *(_QWORD *)&v55 = v19;
    v48 = MEMORY[0x18D75BE3C](v46);
    v53 = v36;
    LOBYTE(v54) = v35;
    AccessibilityNode.updateSize(_:token:)(&v53, v48, v49);
  }
  if (((v52 | v50) & 1) != 0)
  {
    v53 = v60;
    v54 = v61;
    v55 = v62;
    v58 = v36;
    LOBYTE(v59) = v35;
    swift_retain();
    AccessibilityNode.updateTransform(_:token:)(&v53, &v58);
    swift_release();
  }
  *(_QWORD *)(v1 + 40) = *(_QWORD *)&v10[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
  v53 = v5;
  *(_QWORD *)&v54 = v6;
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();

  swift_release();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeometryTransform()
{
  return 0xD00000000000001ELL;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<ViewRespondersKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<ViewRespondersKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<ViewRespondersKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<ViewRespondersKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<ViewRespondersKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CaptureViewRespondersModifier and conformance CaptureViewRespondersModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CaptureViewRespondersModifier and conformance CaptureViewRespondersModifier;
  if (!lazy protocol witness table cache variable for type CaptureViewRespondersModifier and conformance CaptureViewRespondersModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CaptureViewRespondersModifier, &type metadata for CaptureViewRespondersModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CaptureViewRespondersModifier and conformance CaptureViewRespondersModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IgnoreViewRespondersModifier and conformance IgnoreViewRespondersModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IgnoreViewRespondersModifier and conformance IgnoreViewRespondersModifier;
  if (!lazy protocol witness table cache variable for type IgnoreViewRespondersModifier and conformance IgnoreViewRespondersModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IgnoreViewRespondersModifier, &type metadata for IgnoreViewRespondersModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IgnoreViewRespondersModifier and conformance IgnoreViewRespondersModifier);
  }
  return result;
}

uint64_t outlined copy of Path?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 0xFF)
    return outlined copy of Path.Storage(a1, a2, a3, a4, a5);
  return a1;
}

uint64_t sub_18711371C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_187113740()
{
  return swift_weakAssign();
}

uint64_t specialized AccessibilityGeometryStorage.PathObserver.contentPathDidChange(for:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    *(_BYTE *)(result + 16) = 1;
    v2 = *(_QWORD *)(result + 144);
    v3 = *(_QWORD *)(v1 + 152);
    v4 = *(_QWORD *)(v1 + 160);
    v5 = *(_QWORD *)(v1 + 168);
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    v6 = *(_BYTE *)(v1 + 176);
    *(_BYTE *)(v1 + 176) = -1;
    outlined consume of Path?(v2, v3, v4, v5, v6);
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of Path?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 0xFF)
    return outlined consume of Path.Storage(a1, a2, a3, a4, a5);
  return a1;
}

uint64_t partial apply for closure #1 in AccessibilityGeometryStorage.updatePath()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in AccessibilityGeometryStorage.updatePath()(a1, *(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24));
}

uint64_t outlined init with take of Path.Element(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE6AD0] - 8) + 32))(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type External<AccessibilityNodeList> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<AccessibilityNodeList> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<AccessibilityNodeList> and conformance External<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for External<AccessibilityNodeList>, (uint64_t)&type metadata for AccessibilityNodeList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<AccessibilityNodeList> and conformance External<A>);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ViewResponderTransform(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewResponderTransform(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewResponderTransform()
{
  return &type metadata for ViewResponderTransform;
}

uint64_t getEnumTagSinglePayload for GeometryTransform(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GeometryTransform(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for GeometryTransform()
{
  return &type metadata for GeometryTransform;
}

ValueMetadata *type metadata accessor for AccessibilityFrameModifier()
{
  return &type metadata for AccessibilityFrameModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityFrameModifier()
{
  return &protocol witness table for AccessibilityFrameModifier;
}

uint64_t EnvironmentValues.findContext.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<FindContext.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FindContext.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<FindContext.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FindContext.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance FindContext.Key(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 256;
  *(_BYTE *)(a1 + 18) = 1;
}

uint64_t View.findNavigator(isPresented:)()
{
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_187113BB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  char v5;
  char v6;

  result = EnvironmentValues.findContext.getter();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 17) = v5 & 1;
  *(_BYTE *)(a1 + 18) = v6 & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.findContext : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  outlined copy of Binding<NavigationSplitViewColumn>?(*a1, v2);
  specialized EnvironmentValues.subscript.setter(v1, v2);
  return outlined consume of Binding<NavigationSplitViewColumn>?(v1, v2);
}

uint64_t View.findDisabled(_:)(char a1)
{
  return View.findDisabled(_:)(a1);
}

{
  swift_getKeyPath();
  *(_BYTE *)(swift_allocObject() + 16) = a1;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  return swift_release();
}

uint64_t sub_187113C98()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.findDisabled(_:)(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(result + 17) = (*(_BYTE *)(v1 + 16) & 1) == 0;
  return result;
}

uint64_t View.replaceDisabled(_:)(char a1)
{
  return View.findDisabled(_:)(a1);
}

uint64_t sub_187113D68()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.replaceDisabled(_:)(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(result + 18) = (*(_BYTE *)(v1 + 16) & 1) == 0;
  return result;
}

uint64_t sub_187113D8C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11FindContextVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<FindContext>, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8], &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<FindContext> and conformance _EnvironmentKeyWritingModifier<A>, MEMORY[0x1E0CE65C0]);
}

uint64_t sub_187113DB0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11FindContextVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<FindContext>, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0], &lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<FindContext> and conformance _EnvironmentKeyTransformModifier<A>, MEMORY[0x1E0CE66D8]);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11FindContextVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v9 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a2, (uint64_t)&type metadata for FindContext, a3);
  v10 = type metadata accessor for ModifiedContent();
  v12[0] = v9;
  v12[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<FindContext> and conformance _EnvironmentKeyWritingModifier<A>(a4, a2, a3, a5);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v12);
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<FindContext> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a2, (uint64_t)&type metadata for FindContext, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FindContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  }
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  return a1;
}

uint64_t assignWithCopy for FindContext(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    }
    else
    {
      outlined destroy of Binding<Bool>(a1);
      v5 = *((_BYTE *)a2 + 16);
      *(_OWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 16) = v5;
    }
  }
  else if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    v6 = *a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = v6;
  }
  *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
  *(_BYTE *)(a1 + 18) = *((_BYTE *)a2 + 18);
  return a1;
}

uint64_t outlined destroy of Binding<Bool>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 __swift_memcpy19_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FindContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    outlined destroy of Binding<Bool>(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = v4;
  swift_release();
LABEL_6:
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  return a1;
}

uint64_t getEnumTagSinglePayload for FindContext(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 19))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FindContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 19) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 19) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FindContext()
{
  return &type metadata for FindContext;
}

void type metadata accessor for EnvironmentPropertyKey<FindContext.Key>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<FindContext.Key>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FindContext.Key>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<FindContext.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<FindContext.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<FindContext.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<FindContext.Key>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FindContext.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for FindContext.Key()
{
  return &type metadata for FindContext.Key;
}

uint64_t AccessibilityNodeAttachment.attachment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t (*v17)(_QWORD);
  uint64_t result;
  uint64_t v19;
  _BYTE v20[16];

  v2 = v1;
  v4 = type metadata accessor for CodableAccessibilityAttachmentStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v20[-v11];
  v13 = type metadata accessor for AccessibilityNodeAttachment.Storage();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v20[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v16, v17);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result != 1)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v12, v16, v4);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v8, v12, v4);
    lazy protocol witness table accessor for type UIKitAccessibilityPropertyApplicator and conformance UIKitAccessibilityPropertyApplicator();
    v16 = v20;
    AccessibilityAttachment.init<A>(_:applicator:)();
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v12, v4);
  }
  v19 = *((_QWORD *)v16 + 1);
  *a1 = *(_QWORD *)v16;
  a1[1] = v19;
  return result;
}

void DisplayList.AccessibilityUpdater.createRoot()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  _DWORD *v6;
  void (*v7)(uint64_t *, _QWORD);
  int v8;
  void *v9;
  void *v10;
  uint64_t v11;
  char v12;
  uint64_t v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  if (MEMORY[0x18D760234](v0 + 24))
  {
    v2 = *(_QWORD *)(v0 + 32);
    v3 = objc_allocWithZone((Class)type metadata accessor for AccessibilityNode());
    v4 = swift_unknownObjectRetain();
    v5 = specialized AccessibilityNode.init(viewRendererHost:isFromDisplayList:)(v4, v2, 1);
    swift_unknownObjectRelease();
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    v16 = Dictionary.init(minimumCapacity:)();
    v7 = (void (*)(uint64_t *, _QWORD))AccessibilityProperties.visibility.modify();
    v8 = v6[1];
    if ((v8 & 2) == 0)
      v6[1] = v8 | 2;
    if ((*v6 & 2) == 0)
      *v6 |= 2u;
    v7(&v14, 0);
    static AccessibilityAttachment.properties(_:)();
    swift_bridgeObjectRelease();
    v9 = (void *)v15;
    v13[0] = v14;
    v13[1] = v15;
    v11 = 0;
    v12 = -1;
    specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)(v13, &v11);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

    v10 = *(void **)(v1 + 40);
    *(_QWORD *)(v1 + 40) = v5;

  }
}

void DisplayList.AccessibilityUpdater.update(item:state:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE0F78], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v4 = *(_QWORD *)(a1 + 48);
  DisplayList.Index.enter(identity:)();
  __asm { BR              X10 }
}

uint64_t sub_1871145F0(__n128 a1)
{
  uint64_t v1;
  __int128 *v2;
  int v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  __int16 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  int v57;
  char v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  __int128 v95;
  uint64_t v96;
  int v97;

  if (v6 >> 60 == 4)
  {
    *(__n128 *)(v1 + 128) = a1;
    v62 = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(v7 - 224) = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(v7 - 208) = v62;
    v63 = *(_BYTE *)(v6 + 48);
    v65 = v2[10];
    v64 = v2[11];
    v66 = v2[9];
    *(_OWORD *)(v1 + 560) = v65;
    *(_OWORD *)(v1 + 576) = v64;
    v67 = v2[11];
    *(_OWORD *)(v1 + 592) = v2[12];
    v69 = v2[6];
    v68 = v2[7];
    v70 = v2[5];
    *(_OWORD *)(v1 + 496) = v69;
    *(_OWORD *)(v1 + 512) = v68;
    v71 = v2[7];
    v73 = v2[8];
    v72 = v2[9];
    *(_OWORD *)(v1 + 528) = v73;
    *(_OWORD *)(v1 + 544) = v72;
    v75 = v2[2];
    v74 = v2[3];
    v76 = v2[1];
    *(_OWORD *)(v1 + 432) = v75;
    *(_OWORD *)(v1 + 448) = v74;
    v77 = v2[3];
    v79 = v2[4];
    v78 = v2[5];
    *(_OWORD *)(v1 + 464) = v79;
    *(_OWORD *)(v1 + 480) = v78;
    v80 = v2[1];
    v81 = *v2;
    *(_OWORD *)(v1 + 400) = *v2;
    *(_OWORD *)(v1 + 416) = v80;
    *(_OWORD *)(v1 + 336) = v65;
    *(_OWORD *)(v1 + 352) = v67;
    *(_OWORD *)(v1 + 368) = v2[12];
    *(_BYTE *)(v7 - 192) = v63;
    *(_QWORD *)(v1 + 608) = *((_QWORD *)v2 + 26);
    *(_OWORD *)(v1 + 272) = v69;
    *(_OWORD *)(v1 + 288) = v71;
    *(_OWORD *)(v1 + 80) = *(_OWORD *)(v1 + 568);
    *(_QWORD *)(v1 + 104) = *(_QWORD *)(v1 + 584);
    *(_QWORD *)(v1 + 160) = *(unsigned int *)(v1 + 592);
    *(_QWORD *)(v1 + 152) = *(unsigned __int8 *)(v1 + 596);
    *(_DWORD *)(v1 + 120) = v3;
    *(_QWORD *)(v1 + 56) = *(_QWORD *)(v1 + 552);
    *(_DWORD *)(v1 + 64) = *(_DWORD *)(v1 + 560);
    *(_DWORD *)(v1 + 72) = *(unsigned __int8 *)(v1 + 564);
    v82 = *(_QWORD *)(v1 + 544);
    v83 = *(_QWORD *)(v1 + 520);
    v84 = *(_QWORD *)(v1 + 440);
    *(_OWORD *)(v1 + 304) = v73;
    *(_OWORD *)(v1 + 320) = v66;
    *(_OWORD *)(v1 + 16) = *(_OWORD *)(v1 + 448);
    *(_OWORD *)(v1 + 208) = v75;
    *(_OWORD *)(v1 + 224) = v77;
    v85 = *(_QWORD *)(v1 + 464);
    v86 = *(_QWORD *)(v1 + 472);
    *(_OWORD *)(v1 + 240) = v79;
    *(_OWORD *)(v1 + 256) = v70;
    v87 = *(_QWORD *)(v1 + 424);
    v88 = *(_QWORD *)(v1 + 432);
    v89 = *(_BYTE *)(v1 + 416);
    v90 = *(_QWORD *)(v1 + 608);
    *(_QWORD *)(v1 + 40) = v82;
    *(_QWORD *)(v1 + 48) = v90;
    v91 = *(_QWORD *)(v1 + 600);
    *(_QWORD *)(v1 + 384) = *((_QWORD *)v2 + 26);
    *(_OWORD *)(v1 + 176) = v81;
    *(_OWORD *)(v1 + 192) = v76;
    outlined copy of DisplayList.Item.Value(v6, v4);
    outlined copy of DisplayList.Item.Value(v6, v4);
    outlined copy of DisplayList.Item.Value(v6, v4);
    *(_OWORD *)v1 = *(_OWORD *)(v1 + 528);
    v92 = *(_QWORD *)(v1 + 400);
    v93 = *(_QWORD *)(v1 + 408);
    outlined retain of TableColumnCustomizationID.Base(v7 - 224, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    outlined retain of DisplayList.AccessibilityUpdater.State(v1 + 400);
    closure #2 in DisplayList.AccessibilityUpdater.update(item:state:)((unsigned int *)(v1 + 176));
    *((_QWORD *)v2 + 25) = v91;
    v94 = *(_BYTE *)(v1 + 288);
    *(_QWORD *)(v1 + 624) = v92;
    *(_QWORD *)(v1 + 632) = v93;
    *(_BYTE *)(v1 + 640) = v89;
    *(_QWORD *)(v1 + 648) = v87;
    *(_QWORD *)(v1 + 656) = v88;
    *(_QWORD *)(v1 + 664) = v84;
    *(_OWORD *)(v1 + 672) = *(_OWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 688) = v85;
    *(_QWORD *)(v1 + 696) = v86;
    v95 = *(_OWORD *)(v1 + 272);
    *(_OWORD *)(v1 + 704) = *(_OWORD *)(v1 + 256);
    *(_OWORD *)(v1 + 720) = v95;
    *(_BYTE *)(v1 + 736) = v94;
    *(_QWORD *)(v1 + 744) = v83;
    *(_OWORD *)(v1 + 752) = *(_OWORD *)v1;
    v96 = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(v1 + 768) = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 776) = *(_QWORD *)(v1 + 56);
    v97 = *(_DWORD *)(v1 + 120);
    *(_DWORD *)(v1 + 784) = *(_DWORD *)(v1 + 64);
    *(_BYTE *)(v1 + 788) = *(_DWORD *)(v1 + 72);
    *(_OWORD *)(v1 + 792) = *(_OWORD *)(v1 + 80);
    *(_QWORD *)(v1 + 808) = *(_QWORD *)(v1 + 104);
    *(_BYTE *)(v1 + 820) = *(_QWORD *)(v1 + 152);
    *(_DWORD *)(v1 + 816) = *(_QWORD *)(v1 + 160);
    *(_QWORD *)(v1 + 824) = v91;
    *(_QWORD *)(v1 + 832) = v96;
    outlined release of DisplayList.AccessibilityUpdater.State(v1 + 624);
    outlined consume of DisplayList.Item.Value(v6, v4);
    outlined consume of DisplayList.Item.Value(v6, v4);
    outlined retain of TableColumnCustomizationID.Base(v7 - 224, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    LOBYTE(v3) = v97;
    outlined consume of DisplayList.Item.Value(v6, v4);
    a1 = *(__n128 *)(v1 + 128);
    *((_QWORD *)v2 + 26) = v96;
  }
  else if (v6 >> 60 == 9)
  {
    *(_DWORD *)(v1 + 120) = v3;
    *(__n128 *)(v1 + 128) = a1;
    v12 = *(_QWORD *)(v6 + 16);
    v14 = v2[10];
    v13 = v2[11];
    v15 = v2[9];
    *(_OWORD *)(v1 + 784) = v14;
    *(_OWORD *)(v1 + 800) = v13;
    v16 = v2[11];
    *(_OWORD *)(v1 + 816) = v2[12];
    v18 = v2[6];
    v17 = v2[7];
    v19 = v2[5];
    *(_OWORD *)(v1 + 720) = v18;
    *(_OWORD *)(v1 + 736) = v17;
    v20 = v2[7];
    v22 = v2[8];
    v21 = v2[9];
    *(_OWORD *)(v1 + 752) = v22;
    *(_OWORD *)(v1 + 768) = v21;
    v24 = v2[2];
    v23 = v2[3];
    v25 = v2[1];
    *(_OWORD *)(v1 + 656) = v24;
    *(_OWORD *)(v1 + 672) = v23;
    v26 = v2[3];
    v28 = v2[4];
    v27 = v2[5];
    *(_OWORD *)(v1 + 688) = v28;
    *(_OWORD *)(v1 + 704) = v27;
    v29 = v2[1];
    v30 = *v2;
    *(_OWORD *)(v1 + 624) = *v2;
    *(_OWORD *)(v1 + 640) = v29;
    *(_OWORD *)(v1 + 560) = v14;
    *(_OWORD *)(v1 + 576) = v16;
    *(_OWORD *)(v1 + 592) = v2[12];
    *(_OWORD *)(v1 + 496) = v18;
    *(_OWORD *)(v1 + 512) = v20;
    *(_OWORD *)(v1 + 528) = v22;
    *(_OWORD *)(v1 + 544) = v15;
    *(_OWORD *)(v1 + 432) = v24;
    *(_OWORD *)(v1 + 448) = v26;
    *(_QWORD *)(v1 + 832) = *((_QWORD *)v2 + 26);
    *(_OWORD *)(v1 + 464) = v28;
    *(_OWORD *)(v1 + 480) = v19;
    v31 = *(double *)(v1 + 648);
    v32 = *(double *)(v1 + 656);
    *(_QWORD *)(v1 + 104) = v2;
    *(_QWORD *)(v1 + 608) = *((_QWORD *)v2 + 26);
    *(_OWORD *)(v1 + 400) = v30;
    *(_OWORD *)(v1 + 416) = v25;
    *(_QWORD *)(v1 + 176) = v11;
    *(_QWORD *)(v1 + 184) = v10;
    *(_QWORD *)(v1 + 192) = v9;
    *(_QWORD *)(v1 + 200) = v8;
    *(_QWORD *)(v1 + 208) = *(_QWORD *)(v1 + 152);
    *(_QWORD *)(v1 + 216) = v6;
    v33 = *(_QWORD *)(v1 + 168);
    *(_QWORD *)(v1 + 224) = v4;
    *(_QWORD *)(v1 + 232) = v33;
    *(_BYTE *)(v1 + 242) = BYTE2(v5);
    *(_WORD *)(v1 + 240) = v5;
    *(_DWORD *)(v1 + 244) = *(_DWORD *)(v1 + 160);
    outlined copy of DisplayList.Item.Value(v6, v4);
    outlined copy of DisplayList.Item.Value(v6, v4);
    outlined copy of DisplayList.Item.Value(v6, v4);
    outlined retain of DisplayList.AccessibilityUpdater.State(v1 + 624);
    DisplayList.Item.frame.getter();
    v35 = v31 + v34;
    v37 = v32 + v36;
    *(double *)(v1 + 424) = v35;
    *(double *)(v1 + 432) = v37;
    v38 = *(_QWORD *)(v12 + 16);
    if (v38)
    {
      *(_DWORD *)(v1 + 116) = v5;
      *(_QWORD *)(v1 + 80) = v6;
      swift_bridgeObjectRetain();
      v39 = (_DWORD *)(v12 + 100);
      do
      {
        v40 = *(_QWORD *)(v39 - 9);
        v41 = *(_QWORD *)(v39 - 7);
        v42 = *(_QWORD *)(v39 - 5);
        v43 = *(_QWORD *)(v39 - 3);
        v44 = *((_BYTE *)v39 - 2);
        v45 = *((_WORD *)v39 - 2);
        v46 = *v39;
        *(_OWORD *)(v1 + 176) = *(_OWORD *)(v39 - 17);
        *(_OWORD *)(v1 + 192) = *(_OWORD *)(v39 - 13);
        *(_QWORD *)(v1 + 208) = v40;
        *(_QWORD *)(v1 + 216) = v41;
        *(_QWORD *)(v1 + 224) = v42;
        *(_QWORD *)(v1 + 232) = v43;
        *(_BYTE *)(v1 + 242) = v44;
        *(_WORD *)(v1 + 240) = v45;
        *(_DWORD *)(v1 + 244) = v46;
        outlined copy of DisplayList.Item.Value(v41, v42);
        DisplayList.AccessibilityUpdater.update(item:state:)(v1 + 176, v1 + 400);
        outlined consume of DisplayList.Item.Value(v41, v42);
        v39 += 18;
        --v38;
      }
      while (v38);
      swift_bridgeObjectRelease();
      v35 = *(double *)(v1 + 424);
      v37 = *(double *)(v1 + 432);
      v6 = *(_QWORD *)(v1 + 80);
    }
    v47 = *(_QWORD *)(v1 + 600);
    v48 = *(_QWORD *)(v1 + 608);
    v49 = *(_QWORD *)(v1 + 104);
    *(_QWORD *)(v49 + 200) = v47;
    v50 = *(_BYTE *)(v1 + 416);
    v51 = *(_QWORD *)(v1 + 440);
    v52 = *(_BYTE *)(v1 + 512);
    v53 = *(_QWORD *)(v1 + 520);
    v54 = *(_DWORD *)(v1 + 560);
    v55 = *(_BYTE *)(v1 + 564);
    v56 = *(_QWORD *)(v1 + 584);
    v57 = *(_DWORD *)(v1 + 592);
    v58 = *(_BYTE *)(v1 + 596);
    *(_OWORD *)(v1 + 176) = *(_OWORD *)(v1 + 400);
    *(_BYTE *)(v1 + 192) = v50;
    *(double *)(v1 + 200) = v35;
    *(double *)(v1 + 208) = v37;
    *(_QWORD *)(v1 + 216) = v51;
    v59 = *(_OWORD *)(v1 + 464);
    *(_OWORD *)(v1 + 224) = *(_OWORD *)(v1 + 448);
    *(_OWORD *)(v1 + 240) = v59;
    v60 = *(_OWORD *)(v1 + 496);
    *(_OWORD *)(v1 + 256) = *(_OWORD *)(v1 + 480);
    *(_OWORD *)(v1 + 272) = v60;
    *(_BYTE *)(v1 + 288) = v52;
    *(_QWORD *)(v1 + 296) = v53;
    v61 = *(_OWORD *)(v1 + 544);
    *(_OWORD *)(v1 + 304) = *(_OWORD *)(v1 + 528);
    *(_OWORD *)(v1 + 320) = v61;
    *(_DWORD *)(v1 + 336) = v54;
    *(_BYTE *)(v1 + 340) = v55;
    *(_OWORD *)(v1 + 344) = *(_OWORD *)(v1 + 568);
    *(_QWORD *)(v1 + 360) = v56;
    *(_BYTE *)(v1 + 372) = v58;
    *(_DWORD *)(v1 + 368) = v57;
    *(_QWORD *)(v1 + 376) = v47;
    *(_QWORD *)(v1 + 384) = v48;
    outlined release of DisplayList.AccessibilityUpdater.State(v1 + 176);
    outlined consume of DisplayList.Item.Value(v6, v4);
    outlined consume of DisplayList.Item.Value(v6, v4);
    outlined consume of DisplayList.Item.Value(v6, v4);
    *(_QWORD *)(v49 + 208) = v48;
    a1 = *(__n128 *)(v1 + 128);
    v3 = *(_DWORD *)(v1 + 120);
  }
  *(__n128 *)(v1 + 624) = a1;
  *(_BYTE *)(v1 + 640) = v3;
  return DisplayList.Index.leave(index:)();
}

uint64_t closure #2 in DisplayList.AccessibilityUpdater.update(item:state:)(unsigned int *a1)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char v9;
  int v10;
  void *v11;
  __int128 v12;
  uint64_t v14;
  char v15;
  __int128 v16;
  _BYTE v17[40];
  _OWORD v18[2];
  char v19;

  Path.offsetBy(dx:dy:)();
  v2 = a1 + 20;
  Path.accessibilityUnion(_:)((uint64_t)v17);
  v3 = *a1;
  v4 = (uint64_t *)(*((_QWORD *)a1 + 17) + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  v5 = *v4;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7 = (unsigned __int8 *)(v5 + 64);
    v8 = (unsigned __int8 *)(v5 + 64);
    do
    {
      v10 = *v8;
      v8 += 40;
      v9 = v10;
      if (v10 != 255)
      {
        *(_QWORD *)&v18[0] = *((_QWORD *)v7 - 1);
        BYTE8(v18[0]) = v9;
        *(_QWORD *)&v16 = v3;
        BYTE8(v16) = 1;
        if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_9;
        }
      }
      v7 = v8;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  AccessibilityAttachment.init()();
  v11 = (void *)*((_QWORD *)&v18[0] + 1);
  v16 = v18[0];
  v14 = v3;
  v15 = 1;
  specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)((uint64_t *)&v16, &v14);
  swift_bridgeObjectRelease();

LABEL_9:
  v12 = *((_OWORD *)v2 + 1);
  v18[0] = *(_OWORD *)v2;
  v18[1] = v12;
  v19 = *((_BYTE *)v2 + 32);
  *(_QWORD *)&v16 = v3;
  BYTE8(v16) = 1;
  AccessibilityNode.updatePath(_:token:)((uint64_t)v18, (uint64_t *)&v16);
  return outlined retain of TableColumnCustomizationID.Base((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
}

void DisplayList.AccessibilityUpdater.addNode(item:state:)(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  void *v23;
  id v24;
  uint64_t *v25;
  id v26;
  uint64_t v27;
  id v28;
  char *v29;
  unint64_t v30;
  uint64_t *v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  void *v37;
  char *v38;
  id v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char **v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  char v86;
  int v87;
  char v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  void (*v94)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  void (*v102)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t (*v104)(void);
  char v105;
  int v106;
  unint64_t v107;
  unint64_t *v108;
  char *v109;
  char *v110;
  unint64_t v111;
  unint64_t v112;
  char v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  int v118;
  unint64_t *v119;
  unint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  int v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t *i;
  int v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int8 v150;
  char *v151;
  unsigned __int8 v152;
  unsigned __int8 v153;
  uint64_t (*v154)(void);
  int v155;
  unint64_t *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  BOOL v162;
  uint64_t v163;
  void *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  BOOL v169;
  uint64_t v170;
  void *v171;
  unint64_t *v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  void *v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t *v181;
  char *v182;
  uint64_t v183;
  void *v184;
  void *v185;
  void *v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  char *v191;
  BOOL v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char v197;
  uint64_t v198;
  void *v199;
  unint64_t v200;
  id v201;
  uint64_t v202;
  uint64_t (*v203)();
  void *v204;
  char *v205;
  uint64_t v206;
  uint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char **v220;
  char *v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t *v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  CGRect v254;
  CGRect v255;

  v3 = type metadata accessor for CodableAccessibilityAttachmentStorage();
  v214 = *(_QWORD *)(v3 - 8);
  v215 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v213 = (char *)&v206 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v212 = (char *)&v206 - v8;
  v218 = type metadata accessor for AccessibilityNodeAttachment.Storage();
  MEMORY[0x1E0C80A78](v218, v9);
  v220 = (char **)((char *)&v206 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for AccessibilityNodeAttachment();
  v219 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v222 = (uint64_t)&v206 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a2[16] + 16))
    return;
  v15 = a2;
  v16 = a2[17] + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost;
  v206 = MEMORY[0x18D760234](v16, v13);
  if (!v206)
    return;
  v17 = *(_QWORD *)(v16 + 8);
  v18 = v217;
  v19 = *v15;
  v231 = v15;
  v208 = v15[1];
  v209 = v19;
  v207 = (uint64_t *)(v217 + 48);
  swift_beginAccess();
  v20 = *(_QWORD *)(v18 + 48);
  if (*(_QWORD *)(v20 + 16) && (v21 = specialized __RawDictionaryStorage.find<A>(_:)(v209, v208), (v22 & 1) != 0))
  {
    v23 = *(void **)(*(_QWORD *)(v20 + 56) + 16 * v21);
    swift_endAccess();
    v24 = v23;
    swift_bridgeObjectRetain();
    v221 = (char *)v24;
    outlined consume of DisplayList.AccessibilityUpdater.CacheValue?(v23);
    v25 = v207;
  }
  else
  {
    swift_endAccess();
    v26 = objc_allocWithZone((Class)type metadata accessor for AccessibilityNode());
    v27 = swift_unknownObjectRetain();
    v28 = specialized AccessibilityNode.init(viewRendererHost:isFromDisplayList:)(v27, v17, 1);
    swift_unknownObjectRelease();
    v29 = (char *)v28;
    v30 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v31 = v207;
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v249 = *v31;
    *v31 = 0x8000000000000000;
    v221 = v29;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v29, v30, v209, v208, isUniquelyReferenced_nonNull_native);
    v25 = v31;
    *v31 = v249;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  swift_beginAccess();
  v33 = *v25;
  if (*(_QWORD *)(v33 + 16) && (v34 = specialized __RawDictionaryStorage.find<A>(_:)(v209, v208), (v35 & 1) != 0))
  {
    v36 = *(_QWORD *)(v33 + 56) + 16 * v34;
    v37 = *(void **)v36;
    v38 = *(char **)(v36 + 8);
    swift_endAccess();
    v39 = v37;
    swift_bridgeObjectRetain_n();
    outlined consume of DisplayList.AccessibilityUpdater.CacheValue?(v37);
  }
  else
  {
    swift_endAccess();
    v38 = (char *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  }
  v40 = v231[16];
  v41 = *(_QWORD *)(v40 + 16);
  v42 = v221;
  if (v41)
  {
    v43 = v38;
    v44 = &v221[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
    v224 = v40 + 32;
    swift_bridgeObjectRetain();
    v236 = (unint64_t *)v44;
    v38 = v43;
    swift_beginAccess();
    v216 = MEMORY[0x1E0DEE9B8] + 8;
    v223 = v40;
    while (v41 <= *(_QWORD *)(v40 + 16))
    {
      v235 = v41 - 1;
      v45 = (uint64_t *)(v224 + 120 * (v41 - 1));
      v47 = *v45;
      v46 = v45[1];
      v48 = v45[2];
      v227 = v45[3];
      v228 = v48;
      v49 = v45[4];
      v225 = v45[5];
      v226 = v49;
      v50 = v45[6];
      v51 = v45[8];
      v229 = v45[7];
      v230 = v50;
      v52 = v45[9];
      v53 = v45[10];
      v242 = v38;
      v54 = v45[11];
      v55 = *((unsigned __int8 *)v45 + 96);
      v56 = *(uint64_t *)((char *)v45 + 100);
      v57 = (unint64_t *)*((unsigned __int8 *)v45 + 108);
      v234 = v45[14];
      v58 = *((_QWORD *)v242 + 2);
      v237 = v46;
      swift_retain();
      v241 = v47;
      swift_bridgeObjectRetain();
      v239 = v54;
      v240 = v51;
      v59 = v51;
      v60 = v52;
      v61 = v52;
      v62 = v57;
      v63 = v56;
      v64 = v53;
      v65 = v54;
      v38 = v242;
      v238 = v55;
      outlined copy of Path.Storage(v59, v61, v53, v65, v55);
      if (v58
        && (v66 = specialized __RawDictionaryStorage.find<A>(_:)(v63, (char)v62), (v67 & 1) != 0)
        && *(_QWORD *)(*((_QWORD *)v38 + 7) + 8 * v66) == v234
        || (v68 = v231[26], (v68 & 0x8000000000000000) != 0))
      {
        v69 = v241;
        v70 = v60;
      }
      else
      {
        v69 = v241;
        v70 = v60;
        if (v68 < *(_QWORD *)(v241 + 16))
        {
          v233 = v60;
          v71 = v222;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v241+ ((*(unsigned __int8 *)(v219 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v219 + 80))+ *(_QWORD *)(v219 + 72) * v68, v222, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
          v72 = v71;
          v73 = v220;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v72, (uint64_t)v220, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6148]);
          if (swift_getEnumCaseMultiPayload() != 1)
          {
            v75 = v214;
            v74 = v215;
            v76 = v64;
            v77 = v212;
            (*(void (**)(char *, char **, uint64_t))(v214 + 32))(v212, v220, v215);
            (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v213, v77, v74);
            lazy protocol witness table accessor for type UIKitAccessibilityPropertyApplicator and conformance UIKitAccessibilityPropertyApplicator();
            v73 = &v243;
            AccessibilityAttachment.init<A>(_:applicator:)();
            v78 = v77;
            v64 = v76;
            v79 = v74;
            v38 = v242;
            (*(void (**)(char *, uint64_t))(v75 + 8))(v78, v79);
          }
          v81 = *v73;
          v80 = v73[1];
          outlined destroy of AccessibilityNodeAttachment(v222);
          v82 = *v236;
          v83 = *(_QWORD *)(*v236 + 16);
          v232 = v64;
          if (v83)
          {
            swift_bridgeObjectRetain();
            v84 = (unsigned __int8 *)(v82 + 64);
            v85 = (unsigned __int8 *)(v82 + 64);
            while (1)
            {
              v87 = *v85;
              v85 += 40;
              v86 = v87;
              if (v87 != 255)
              {
                v243 = (char *)*((_QWORD *)v84 - 1);
                LOBYTE(v244) = v86;
                *(_QWORD *)&v247 = v63;
                BYTE8(v247) = (_BYTE)v62;
                if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
                  break;
              }
              v84 = v85;
              if (!--v83)
              {
                swift_bridgeObjectRelease();
                v64 = v232;
                goto LABEL_36;
              }
            }
            swift_bridgeObjectRelease();
            v243 = v81;
            v244 = v80;
            *(_QWORD *)&v247 = v63;
            BYTE8(v247) = (_BYTE)v62;
            v88 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)(&v243, (uint64_t *)&v247, 0);
            v64 = v232;
            v70 = v233;
            if ((v88 & 1) == 0)
              goto LABEL_49;
            if (*((_QWORD *)v81 + 2)
              && (v89 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5768]), (v90 & 1) != 0))
            {
              outlined init with copy of TableColumnList(*((_QWORD *)v81 + 7) + 40 * v89, (uint64_t)&v243);
              v91 = v245;
              v92 = v246;
              __swift_project_boxed_opaque_existential_1(&v243, v245);
              v93 = v80;
              v94 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v92 + 8);
              swift_bridgeObjectRetain();
              v95 = v91;
              v96 = v92;
              v64 = v232;
              v70 = v233;
              v94(&v247, v95, v96);
              v80 = v93;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v243);
            }
            else
            {
              v247 = 0u;
              v248 = 0u;
              swift_bridgeObjectRetain();
            }
            v154 = MEMORY[0x1E0DEB940];
            type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorKind?, MEMORY[0x1E0CE6498], (uint64_t (*)(_QWORD, uint64_t))v154);
            if ((swift_dynamicCast() & 1) != 0)
            {
              v155 = v243;
              swift_bridgeObjectRelease();
              v38 = v242;
              if (v155 != 2)
              {
                v211 = HIDWORD(v63);
                v156 = v231 + 24;
                outlined consume of DisplayList.AccessibilityUpdater.DeferredAttachment?(v231[21], (void *)v231[22], v231[23]);
                *(v156 - 3) = v155 & 1;
                *(v156 - 2) = 0;
                *(v156 - 1) = (v63 << 32) | 1;
                v38 = v242;
                *((_BYTE *)v156 + 4) = (_DWORD)v62 != 0;
                *(_DWORD *)v156 = v211;
                v64 = v232;
                v70 = v233;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              v38 = v242;
            }
          }
          else
          {
LABEL_36:
            if (*((_QWORD *)v81 + 2)
              && (v97 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5768]), (v98 & 1) != 0))
            {
              outlined init with copy of TableColumnList(*((_QWORD *)v81 + 7) + 40 * v97, (uint64_t)&v243);
              v99 = v245;
              v100 = v246;
              __swift_project_boxed_opaque_existential_1(&v243, v245);
              v101 = v80;
              v102 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v100 + 8);
              swift_bridgeObjectRetain();
              v103 = v100;
              v64 = v232;
              v102(&v247, v99, v103);
              v80 = v101;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v243);
            }
            else
            {
              v247 = 0u;
              v248 = 0u;
              swift_bridgeObjectRetain();
            }
            v104 = MEMORY[0x1E0DEB940];
            type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v216, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorKind?, MEMORY[0x1E0CE6498], (uint64_t (*)(_QWORD, uint64_t))v104);
            v105 = swift_dynamicCast();
            v70 = v233;
            if ((v105 & 1) != 0)
            {
              v106 = v243;
              swift_bridgeObjectRelease();
              v38 = v242;
              if (v106 != 2)
              {
                v107 = v106 & 1;
                v210 = (v63 << 32) | 1;
                v211 = HIDWORD(v63);
                v108 = v231 + 24;
                v109 = v242;
                v110 = v80;
                if ((_DWORD)v62)
                  v111 = 0x100000000;
                else
                  v111 = 0;
                outlined consume of DisplayList.AccessibilityUpdater.DeferredAttachment?(v231[21], (void *)v231[22], v231[23]);
                *(v108 - 3) = v107;
                *(v108 - 2) = 0;
                *(v108 - 1) = v210;
                v112 = HIDWORD(v111);
                v80 = v110;
                v38 = v109;
                *((_BYTE *)v108 + 4) = v112;
                *(_DWORD *)v108 = v211;
                v64 = v232;
                v70 = v233;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              v38 = v242;
            }
            v243 = v81;
            v244 = v80;
            *(_QWORD *)&v247 = v63;
            BYTE8(v247) = (_BYTE)v62;
            specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)((uint64_t *)&v243, (uint64_t *)&v247);
          }
          *(_QWORD *)(v217 + 56) = v231[15];
LABEL_49:
          v113 = swift_isUniquelyReferenced_nonNull_native();
          v243 = v38;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v234, v63, (char)v62, v113);
          v38 = v243;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          v69 = v241;
        }
      }
      if (*(_QWORD *)(v69 + 16) != 1)
        goto LABEL_15;
      v114 = *v236;
      v115 = *(_QWORD *)(*v236 + 16);
      v242 = v38;
      if (v115)
      {
        v233 = v70;
        swift_bridgeObjectRetain();
        v116 = 0;
        v117 = 0;
        while (1)
        {
          v118 = *(unsigned __int8 *)(v114 + v116 + 64);
          if (v118 != 255)
          {
            v243 = *(char **)(v114 + v116 + 56);
            LOBYTE(v244) = v118;
            *(_QWORD *)&v247 = v63;
            BYTE8(v247) = (_BYTE)v62;
            if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
              break;
          }
          ++v117;
          v116 += 40;
          if (v115 == v117)
          {
            swift_bridgeObjectRelease();
            goto LABEL_63;
          }
        }
        swift_bridgeObjectRelease();
        v119 = v236;
        swift_beginAccess();
        v120 = *v119;
        v121 = swift_isUniquelyReferenced_nonNull_native();
        *v119 = v120;
        if ((v121 & 1) == 0)
        {
          v120 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v120);
          *v236 = v120;
        }
        if (v117 >= *(_QWORD *)(v120 + 16))
        {
          __break(1u);
LABEL_155:
          __break(1u);
          goto LABEL_156;
        }
        v122 = v120 + v116;
        v123 = *(_QWORD *)(v122 + 48);
        if (!v123)
        {
          type metadata accessor for AccessibilityGeometryStorage();
          v123 = swift_allocObject();
          *(_WORD *)(v123 + 16) = 0;
          *(_QWORD *)(v123 + 24) = 1;
          *(_OWORD *)(v123 + 32) = 0u;
          *(_OWORD *)(v123 + 48) = 0u;
          *(_OWORD *)(v123 + 64) = 0u;
          *(_BYTE *)(v123 + 80) = 1;
          *(_OWORD *)(v123 + 88) = 0u;
          *(_OWORD *)(v123 + 104) = 0u;
          *(_BYTE *)(v123 + 120) = 1;
          *(_QWORD *)(v123 + 128) = MEMORY[0x1E0DEE9D8];
          *(_OWORD *)(v123 + 136) = 0u;
          *(_OWORD *)(v123 + 152) = 0u;
          *(_QWORD *)(v123 + 168) = 0;
          *(_BYTE *)(v123 + 176) = -1;
          swift_unknownObjectWeakInit();
          swift_unknownObjectWeakAssign();
          *(_QWORD *)(v122 + 48) = v123;
        }
        *(_BYTE *)(v123 + 17) = 1;
        v124 = v229;
        *(_QWORD *)(v123 + 64) = v230;
        *(_QWORD *)(v123 + 72) = v124;
        *(_BYTE *)(v123 + 80) = 0;
        swift_endAccess();
LABEL_63:
        v38 = v242;
        v70 = v233;
      }
      v125 = *v236;
      v126 = *(_QWORD *)(*v236 + 16);
      if (!v126)
        goto LABEL_76;
      swift_retain();
      swift_bridgeObjectRetain();
      v127 = 0;
      v128 = 0;
      while (1)
      {
        v129 = *(unsigned __int8 *)(v125 + v127 + 64);
        if (v129 != 255)
        {
          v243 = *(char **)(v125 + v127 + 56);
          LOBYTE(v244) = v129;
          *(_QWORD *)&v247 = v63;
          BYTE8(v247) = (_BYTE)v62;
          if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
            break;
        }
        ++v128;
        v127 += 40;
        if (v126 == v128)
        {
          swift_release();
          swift_bridgeObjectRelease();
          v38 = v242;
          goto LABEL_76;
        }
      }
      swift_bridgeObjectRelease();
      v119 = v236;
      swift_beginAccess();
      v120 = *v119;
      v130 = swift_isUniquelyReferenced_nonNull_native();
      *v119 = v120;
      if ((v130 & 1) == 0)
      {
        v120 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v120);
        *v236 = v120;
      }
      if (v128 >= *(_QWORD *)(v120 + 16))
        goto LABEL_155;
      v232 = v64;
      v233 = v70;
      v131 = v120 + v127;
      v132 = *(_QWORD *)(v131 + 48);
      if (!v132)
      {
        type metadata accessor for AccessibilityGeometryStorage();
        v132 = swift_allocObject();
        *(_WORD *)(v132 + 16) = 0;
        *(_QWORD *)(v132 + 24) = 1;
        *(_OWORD *)(v132 + 32) = 0u;
        *(_OWORD *)(v132 + 48) = 0u;
        *(_OWORD *)(v132 + 64) = 0u;
        *(_BYTE *)(v132 + 80) = 1;
        *(_OWORD *)(v132 + 88) = 0u;
        *(_OWORD *)(v132 + 104) = 0u;
        *(_BYTE *)(v132 + 120) = 1;
        *(_QWORD *)(v132 + 128) = MEMORY[0x1E0DEE9D8];
        *(_OWORD *)(v132 + 136) = 0u;
        *(_OWORD *)(v132 + 152) = 0u;
        *(_QWORD *)(v132 + 168) = 0;
        *(_BYTE *)(v132 + 176) = -1;
        swift_unknownObjectWeakInit();
        swift_unknownObjectWeakAssign();
        *(_QWORD *)(v131 + 48) = v132;
      }
      *(_BYTE *)(v132 + 17) = 1;
      v133 = *(_QWORD *)(v132 + 24);
      v134 = v228;
      *(_QWORD *)(v132 + 24) = v237;
      *(_QWORD *)(v132 + 32) = v134;
      v135 = v226;
      *(_QWORD *)(v132 + 40) = v227;
      *(_QWORD *)(v132 + 48) = v135;
      *(_QWORD *)(v132 + 56) = v225;
      swift_retain();
      swift_endAccess();
      outlined consume of Transaction?(v133);
      swift_release();
      v38 = v242;
      v64 = v232;
      v70 = v233;
LABEL_76:
      v249 = v240;
      v250 = v70;
      v251 = v64;
      v252 = v239;
      v253 = v238;
      v136 = *v236;
      v119 = *(unint64_t **)(*v236 + 16);
      if (!v119)
        goto LABEL_15;
      v232 = v64;
      swift_bridgeObjectRetain();
      v137 = 0;
      for (i = 0; i != v119; i = (unint64_t *)((char *)i + 1))
      {
        v139 = *(unsigned __int8 *)(v136 + v137 + 64);
        if (v139 != 255)
        {
          v243 = *(char **)(v136 + v137 + 56);
          LOBYTE(v244) = v139;
          *(_QWORD *)&v247 = v63;
          BYTE8(v247) = (_BYTE)v62;
          if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            v62 = v236;
            swift_beginAccess();
            v120 = *v62;
            v140 = swift_isUniquelyReferenced_nonNull_native();
            *v62 = v120;
            if ((v140 & 1) == 0)
            {
              v120 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v120);
              *v236 = v120;
            }
            if ((unint64_t)i < *(_QWORD *)(v120 + 16))
            {
              v141 = v120 + v137;
              v142 = *(_QWORD *)(v141 + 48);
              if (!v142)
              {
                type metadata accessor for AccessibilityGeometryStorage();
                v142 = swift_allocObject();
                *(_WORD *)(v142 + 16) = 0;
                *(_QWORD *)(v142 + 24) = 1;
                *(_OWORD *)(v142 + 32) = 0u;
                *(_OWORD *)(v142 + 48) = 0u;
                *(_OWORD *)(v142 + 64) = 0u;
                *(_BYTE *)(v142 + 80) = 1;
                *(_OWORD *)(v142 + 88) = 0u;
                *(_OWORD *)(v142 + 104) = 0u;
                *(_BYTE *)(v142 + 120) = 1;
                *(_QWORD *)(v142 + 128) = MEMORY[0x1E0DEE9D8];
                *(_OWORD *)(v142 + 136) = 0u;
                *(_OWORD *)(v142 + 152) = 0u;
                *(_QWORD *)(v142 + 168) = 0;
                *(_BYTE *)(v142 + 176) = -1;
                swift_unknownObjectWeakInit();
                swift_unknownObjectWeakAssign();
                *(_QWORD *)(v141 + 48) = v142;
              }
              *(_BYTE *)(v142 + 16) = 0;
              v143 = Path.isEmpty.getter();
              v38 = v242;
              v64 = v232;
              if ((v143 & 1) == 0)
              {
                Path.boundingRect.getter();
                v255 = CGRectStandardize(v254);
                if (!CGRectIsEmpty(v255))
                {
                  v144 = *(_QWORD *)(v142 + 144);
                  v145 = *(_QWORD *)(v142 + 152);
                  v146 = *(_QWORD *)(v142 + 160);
                  v147 = *(_QWORD *)(v142 + 168);
                  v148 = v239;
                  v149 = v240;
                  *(_QWORD *)(v142 + 144) = v240;
                  *(_QWORD *)(v142 + 152) = v70;
                  *(_QWORD *)(v142 + 160) = v64;
                  *(_QWORD *)(v142 + 168) = v148;
                  v150 = *(_BYTE *)(v142 + 176);
                  v151 = v38;
                  v152 = v238;
                  *(_BYTE *)(v142 + 176) = v238;
                  outlined consume of Path?(v144, v145, v146, v147, v150);
                  v153 = v152;
                  v38 = v151;
                  outlined copy of Path.Storage(v149, v70, v64, v148, v153);
                }
              }
              swift_endAccess();
LABEL_15:
              swift_bridgeObjectRelease();
              goto LABEL_16;
            }
LABEL_156:
            __break(1u);
            goto LABEL_157;
          }
        }
        v137 += 40;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v38 = v242;
      v64 = v232;
LABEL_16:
      swift_release();
      outlined consume of Path.Storage(v240, v70, v64, v239, v238);
      v40 = v223;
      v41 = v235;
      if (!v235)
        goto LABEL_96;
    }
    __break(1u);
LABEL_96:
    swift_bridgeObjectRelease();
    v42 = v221;
  }
  *(_QWORD *)&v42[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_version] = v231[15];
  v62 = (unint64_t *)&v42[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent];
  v157 = (void *)MEMORY[0x18D760234](&v42[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);

  if (!v157)
  {
    while (1)
    {
      while (1)
      {
        v186 = (void *)MEMORY[0x18D760234](v62);
        if (v186)
        {

          v120 = (unint64_t)v207;
LABEL_143:
          swift_beginAccess();
          v195 = *(_QWORD *)v120;
          if (*(_QWORD *)(v195 + 16)
            && (v196 = specialized __RawDictionaryStorage.find<A>(_:)(v209, v208), (v197 & 1) != 0))
          {
            v198 = *(_QWORD *)(v195 + 56) + 16 * v196;
            v199 = *(void **)v198;
            v200 = *(_QWORD *)(v198 + 8);
            swift_endAccess();
            v201 = v199;
            swift_bridgeObjectRetain_n();
            outlined consume of DisplayList.AccessibilityUpdater.CacheValue?(v199);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            LOBYTE(v199) = specialized static Dictionary<>.== infix(_:_:)(v200, (uint64_t)v38);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            if ((v199 & 1) != 0)
            {
LABEL_151:
              swift_unknownObjectRelease();
              goto LABEL_152;
            }
          }
          else
          {
            swift_endAccess();
          }
          swift_beginAccess();
          v203 = specialized Dictionary.subscript.modify(&v243, v209, v208);
          v204 = *(void **)v202;
          if (!*(_QWORD *)v202)
          {
            ((void (*)(char **, _QWORD))v203)(&v243, 0);
            swift_endAccess();
            goto LABEL_151;
          }
          *(_QWORD *)(v202 + 8) = v38;
          outlined copy of DisplayList.AccessibilityUpdater.CacheValue?(v204);
          swift_bridgeObjectRetain();
          ((void (*)(char **, _QWORD))v203)(&v243, 0);
          swift_endAccess();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease_n();

LABEL_152:
          swift_bridgeObjectRelease();
          return;
        }
        v187 = v38;
        v188 = v231[25];
        v173 = v231[17];
        v168 = v173 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children;
        swift_beginAccess();
        if (*(_QWORD *)v168 >> 62)
        {
          swift_bridgeObjectRetain();
          v63 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v63 = *(_QWORD *)((*(_QWORD *)v168 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v63 >= v188)
          break;
        swift_beginAccess();
        MEMORY[0x18D75CF58](v221);
        if (*(_QWORD *)((*(_QWORD *)v168 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v168 & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();
        v189 = *(_QWORD *)v168;
        if (v189 >> 62)
        {
          swift_bridgeObjectRetain();
          v190 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v190 = *(_QWORD *)((v189 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v120 = (unint64_t)v207;
        v119 = v231;
LABEL_141:
        v119[25] = v190;
        v193 = v119[26];
        v192 = __OFADD__(v193, 1);
        v194 = v193 + 1;
        if (!v192)
        {
          v119[26] = v194;
          swift_unknownObjectWeakAssign();
          v38 = v187;
          goto LABEL_143;
        }
        __break(1u);
LABEL_160:
        v182 = (char *)MEMORY[0x18D75E3BC](v120, v173);
        swift_unknownObjectRelease();
LABEL_121:
        swift_bridgeObjectRelease();
        if (v182 == v221)
        {
          v183 = MEMORY[0x18D760234](v62);
          if (!v183)
            goto LABEL_177;
          v184 = (void *)v183;
          swift_beginAccess();
          v185 = (void *)specialized Array.remove(at:)(v120);
          swift_endAccess();

        }
LABEL_124:
        swift_unknownObjectWeakAssign();
        v38 = (char *)v63;
      }
      swift_beginAccess();
      if (*(_QWORD *)v168 >> 62)
      {
        v205 = v221;
        swift_bridgeObjectRetain();
        v63 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v63 = *(_QWORD *)((*(_QWORD *)v168 & 0xFFFFFFFFFFFFF8) + 0x10);
        v191 = v221;
      }
      v119 = v231;
      if (v63 < v188)
        break;
      if (v188 < 0)
        goto LABEL_167;
      specialized Array.replaceSubrange<A>(_:with:)(v188, v188, (uint64_t)v221);
      swift_endAccess();
      v192 = __OFADD__(v188, 1);
      v190 = v188 + 1;
      if (!v192)
      {
        v120 = (unint64_t)v207;
        goto LABEL_141;
      }
LABEL_168:
      __break(1u);
LABEL_169:
      v174 = (char *)MEMORY[0x18D75E3BC](v168, v173);
      swift_unknownObjectRelease();
LABEL_111:
      swift_bridgeObjectRelease();
      v38 = (char *)v63;
      if (v174 == v221)
      {
LABEL_112:
        while (1)
        {
          v63 = (uint64_t)v38;
          v120 = v231[25];
          v175 = MEMORY[0x18D760234](v62);
          if (!v175)
            break;
          v176 = (void *)v175;
          v177 = (unint64_t *)(v175 + *v119);
          swift_beginAccess();
          v178 = *v177;
          swift_bridgeObjectRetain();

          if (v178 >> 62)
          {
LABEL_157:
            swift_bridgeObjectRetain();
            v179 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v179 = *(_QWORD *)((v178 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          if ((uint64_t)v120 >= v179)
            goto LABEL_124;
          v180 = MEMORY[0x18D760234](v62);
          if (!v180)
            goto LABEL_174;
          v158 = (void *)v180;
          v181 = (unint64_t *)(v180 + *v119);
          swift_beginAccess();
          v173 = *v181;
          swift_bridgeObjectRetain();

          if ((v173 & 0xC000000000000001) != 0)
            goto LABEL_160;
          if ((v120 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v120 < *(_QWORD *)((v173 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v182 = *(char **)(v173 + 8 * v120 + 32);
            goto LABEL_121;
          }
          __break(1u);
LABEL_163:
          swift_bridgeObjectRetain();
          v167 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
LABEL_104:
          swift_bridgeObjectRelease();
          v168 = v231[25];
          v169 = v167 < v168;
          v38 = (char *)v158;
          if (v169)
          {
            v63 = (uint64_t)v158;
            v170 = MEMORY[0x18D760234](v62);
            if (!v170)
              goto LABEL_176;
            v171 = (void *)v170;
            v172 = (unint64_t *)(v170 + *v119);
            swift_beginAccess();
            v173 = *v172;
            swift_bridgeObjectRetain();

            if ((v173 & 0xC000000000000001) != 0)
              goto LABEL_169;
            if (v168 < 0)
            {
              __break(1u);
            }
            else if ((unint64_t)v168 < *(_QWORD *)((v173 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              v174 = *(char **)(v173 + 8 * v168 + 32);
              goto LABEL_111;
            }
            __break(1u);
            goto LABEL_172;
          }
        }
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
        goto LABEL_175;
      }
    }
    __break(1u);
LABEL_167:
    __break(1u);
    goto LABEL_168;
  }
  v158 = v38;
  v159 = (void *)MEMORY[0x18D760234](v62);
  if (!v159)
  {
LABEL_172:
    __break(1u);
    goto LABEL_173;
  }
  v160 = v159;
  v161 = (void *)v231[17];

  v119 = (unint64_t *)&OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children;
  v162 = v160 == v161;
  v38 = (char *)v158;
  if (!v162)
    goto LABEL_112;
  v163 = MEMORY[0x18D760234](v62);
  if (v163)
  {
    v164 = (void *)v163;
    v165 = (unint64_t *)(v163 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
    swift_beginAccess();
    v166 = *v165;
    swift_bridgeObjectRetain();

    if (v166 >> 62)
      goto LABEL_163;
    v167 = *(_QWORD *)((v166 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_104;
  }
LABEL_175:
  __break(1u);
LABEL_176:

  __break(1u);
LABEL_177:
  __break(1u);
}

uint64_t DisplayList.AccessibilityUpdater.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of weak FallbackResponderProvider?(v0 + 24);

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DisplayList.AccessibilityUpdater()
{
  return objc_opt_self();
}

uint64_t destroy for DisplayList.AccessibilityUpdater.CacheValue(id *a1)
{

  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for DisplayList.AccessibilityUpdater.CacheValue(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

id *assignWithTake for DisplayList.AccessibilityUpdater.CacheValue(id *a1, _OWORD *a2)
{

  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DisplayList.AccessibilityUpdater.CacheValue()
{
  return &type metadata for DisplayList.AccessibilityUpdater.CacheValue;
}

ValueMetadata *type metadata accessor for _ViewInputs.EnvironmentTransform()
{
  return &type metadata for _ViewInputs.EnvironmentTransform;
}

unint64_t lazy protocol witness table accessor for type _ViewInputs.EnvironmentTransform and conformance _ViewInputs.EnvironmentTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewInputs.EnvironmentTransform and conformance _ViewInputs.EnvironmentTransform;
  if (!lazy protocol witness table cache variable for type _ViewInputs.EnvironmentTransform and conformance _ViewInputs.EnvironmentTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ViewInputs.EnvironmentTransform, &type metadata for _ViewInputs.EnvironmentTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.EnvironmentTransform and conformance _ViewInputs.EnvironmentTransform);
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _ViewInputs.EnvironmentTransform@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return EnvironmentValues.accessibilityEnabled.setter();
}

Swift::Void __swiftcall _ViewInputs.configureForArchivingAccessibility()()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 36) |= 0x10u;
  _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _ViewInputs.EnvironmentTransform and conformance _ViewInputs.EnvironmentTransform();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.setter();
}

unint64_t lazy protocol witness table accessor for type UIKitAccessibilityPropertyApplicator and conformance UIKitAccessibilityPropertyApplicator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UIKitAccessibilityPropertyApplicator and conformance UIKitAccessibilityPropertyApplicator;
  if (!lazy protocol witness table cache variable for type UIKitAccessibilityPropertyApplicator and conformance UIKitAccessibilityPropertyApplicator)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitAccessibilityPropertyApplicator, &type metadata for UIKitAccessibilityPropertyApplicator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitAccessibilityPropertyApplicator and conformance UIKitAccessibilityPropertyApplicator);
  }
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  BOOL v20;
  char *v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  _QWORD v37[2];

  v3 = isStackAllocationSafe;
  v37[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(isStackAllocationSafe + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  v6 = 8 * v5;
  if ((v4 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v22 = (char *)swift_slowAlloc();
      bzero(v22, v6);
      v23 = 0;
      v24 = 0;
      v25 = v3 + 64;
      v26 = 1 << *(_BYTE *)(v3 + 32);
      if (v26 < 64)
        v27 = ~(-1 << v26);
      else
        v27 = -1;
      v28 = v27 & *(_QWORD *)(v3 + 64);
      v29 = (unint64_t)(v26 + 63) >> 6;
      v30 = OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_version;
      while (1)
      {
        if (v28)
        {
          v31 = __clz(__rbit64(v28));
          v28 &= v28 - 1;
          v32 = v31 | (v24 << 6);
        }
        else
        {
          v33 = v24 + 1;
          if (__OFADD__(v24, 1))
            goto LABEL_54;
          if (v33 >= v29)
            goto LABEL_51;
          v34 = *(_QWORD *)(v25 + 8 * v33);
          ++v24;
          if (!v34)
          {
            v24 = v33 + 1;
            if (v33 + 1 >= v29)
              goto LABEL_51;
            v34 = *(_QWORD *)(v25 + 8 * v24);
            if (!v34)
            {
              v24 = v33 + 2;
              if (v33 + 2 >= v29)
                goto LABEL_51;
              v34 = *(_QWORD *)(v25 + 8 * v24);
              if (!v34)
              {
                v35 = v33 + 3;
                if (v35 >= v29)
                  goto LABEL_51;
                v34 = *(_QWORD *)(v25 + 8 * v35);
                if (!v34)
                {
                  while (1)
                  {
                    v24 = v35 + 1;
                    if (__OFADD__(v35, 1))
                      goto LABEL_56;
                    if (v24 >= v29)
                      break;
                    v34 = *(_QWORD *)(v25 + 8 * v24);
                    ++v35;
                    if (v34)
                      goto LABEL_47;
                  }
LABEL_51:
                  v36 = specialized _NativeDictionary.extractDictionary(using:count:)((unint64_t *)v22, v5, v23, v3);
                  MEMORY[0x18D760108](v22, -1, -1);
                  return v36;
                }
                v24 = v35;
              }
            }
          }
LABEL_47:
          v28 = (v34 - 1) & v34;
          v32 = __clz(__rbit64(v34)) + (v24 << 6);
        }
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 56) + 16 * v32) + v30) == a2)
        {
          *(_QWORD *)&v22[(v32 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v32;
          v20 = __OFADD__(v23++, 1);
          if (v20)
          {
            __break(1u);
            goto LABEL_51;
          }
        }
      }
    }
  }
  MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
  bzero((char *)v37 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
  v7 = 0;
  v8 = 0;
  v9 = v3 + 64;
  v10 = 1 << *(_BYTE *)(v3 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v3 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_version;
  while (1)
  {
    if (v12)
    {
      v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v16 = v15 | (v8 << 6);
    }
    else
    {
      v17 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      if (v17 >= v13)
        return specialized _NativeDictionary.extractDictionary(using:count:)((_QWORD *)((char *)v37 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v7, v3);
      v18 = *(_QWORD *)(v9 + 8 * v17);
      ++v8;
      if (!v18)
      {
        v8 = v17 + 1;
        if (v17 + 1 >= v13)
          return specialized _NativeDictionary.extractDictionary(using:count:)((_QWORD *)((char *)v37 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v7, v3);
        v18 = *(_QWORD *)(v9 + 8 * v8);
        if (!v18)
        {
          v8 = v17 + 2;
          if (v17 + 2 >= v13)
            return specialized _NativeDictionary.extractDictionary(using:count:)((_QWORD *)((char *)v37 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v7, v3);
          v18 = *(_QWORD *)(v9 + 8 * v8);
          if (!v18)
          {
            v19 = v17 + 3;
            if (v19 >= v13)
              return specialized _NativeDictionary.extractDictionary(using:count:)((_QWORD *)((char *)v37 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v7, v3);
            v18 = *(_QWORD *)(v9 + 8 * v19);
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  break;
                if (v8 >= v13)
                  return specialized _NativeDictionary.extractDictionary(using:count:)((_QWORD *)((char *)v37 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v7, v3);
                v18 = *(_QWORD *)(v9 + 8 * v8);
                ++v19;
                if (v18)
                  goto LABEL_22;
              }
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
            }
            v8 = v19;
          }
        }
      }
LABEL_22:
      v12 = (v18 - 1) & v18;
      v16 = __clz(__rbit64(v18)) + (v8 << 6);
    }
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 56) + 16 * v16) + v14) == a2)
    {
      *(_QWORD *)((char *)v37 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8) - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)) |= 1 << v16;
      v20 = __OFADD__(v7++, 1);
      if (v20)
        break;
    }
  }
  __break(1u);
  return specialized _NativeDictionary.extractDictionary(using:count:)((_QWORD *)((char *)v37 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v7, v3);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v12[2];

  v3 = a2;
  v4 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = (unint64_t)((1 << v5) + 63) >> 6;
  v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
    bzero((char *)v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v4, v3);
    if (v2)
      swift_willThrow();
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v9, v6, v4, v3);
    v3 = v10;
    MEMORY[0x18D760108](v9, -1, -1);
  }
  return v3;
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[2];

  v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(isStackAllocationSafe + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    v7 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v5, v3);
    if (v2)
      swift_willThrow();
    else
      return v7;
  }
  else
  {
    v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    v3 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v8, v5, v3);
    MEMORY[0x18D760108](v8, -1, -1);
  }
  return v3;
}

Swift::Int specialized DisplayList.AccessibilityUpdater.remove(_:state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = (unint64_t *)(*(_QWORD *)(a3 + 136) + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
  swift_beginAccess();
  v6 = *v5;
  v7 = v6 >> 62;
  if (!(v6 >> 62))
  {
    v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8 >= a1)
      goto LABEL_3;
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  swift_bridgeObjectRetain_n();
  v21 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (v21 < a1)
    goto LABEL_24;
LABEL_3:
  if (a1 < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v7)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 < a2)
    goto LABEL_26;
  if (a2 < 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if ((v6 & 0xC000000000000001) == 0)
  {
LABEL_15:
    if (v7)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.subscript.getter();
      v12 = v16;
      v13 = v17;
      v19 = v18;
      result = swift_bridgeObjectRelease_n();
      v15 = (v19 >> 1) - v13;
      v14 = (uint64_t)(v19 >> 1) <= v13;
      if (v19 >> 1 == v13)
      {
LABEL_22:
        swift_unknownObjectRelease();
        swift_beginAccess();
        specialized Array.replaceSubrange<A>(_:with:)(a1, a2);
        return swift_endAccess();
      }
    }
    else
    {
      v12 = (v6 & 0xFFFFFFFFFFFFFF8) + 32;
      v13 = a1;
      v15 = a2 - a1;
      v14 = a2 <= a1;
      if (a2 == a1)
        goto LABEL_22;
    }
    if (!v14)
    {
      v20 = v12 + 8 * v13;
      do
      {
        v20 += 8;
        swift_unknownObjectWeakAssign();
        --v15;
      }
      while (v15);
      goto LABEL_22;
    }
    goto LABEL_29;
  }
  if (a2 < (unint64_t)a1)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (a1 == a2)
    goto LABEL_15;
  if (a1 < (unint64_t)a2)
  {
    type metadata accessor for AccessibilityNode();
    result = a1;
    do
    {
      v11 = result + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(result);
      result = v11;
    }
    while (a2 != v11);
    goto LABEL_15;
  }
LABEL_30:
  __break(1u);
  return result;
}

void specialized DisplayList.AccessibilityUpdater.createNode(item:state:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  int v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  __int16 v33;
  int v34;
  __int128 v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  void *v41;
  unint64_t v42;
  uint64_t inited;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void *v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  __int16 v63;
  char v64;
  int v65;

  v8 = (uint64_t *)(a2 + 200);
  v7 = *(_QWORD *)(a2 + 200);
  v9 = *(_QWORD *)(a2 + 208);
  DisplayList.AccessibilityUpdater.addNode(item:state:)((uint64_t)&v57, (unint64_t *)a2);
  if (!v10)
  {
    v52 = v9;
    v26 = *(_QWORD *)(a5 + 16);
    if (v26)
    {
      v48 = v8;
      v50 = v7;
      swift_bridgeObjectRetain();
      v27 = (_DWORD *)(a5 + 100);
      do
      {
        v28 = *(_QWORD *)(v27 - 9);
        v29 = *(_QWORD *)(v27 - 7);
        v30 = *(_QWORD *)(v27 - 5);
        v31 = *(_QWORD *)(v27 - 3);
        v32 = *((_BYTE *)v27 - 2);
        v33 = *((_WORD *)v27 - 2);
        v34 = *v27;
        v35 = *(_OWORD *)(v27 - 13);
        v57 = *(_OWORD *)(v27 - 17);
        v58 = v35;
        v59 = v28;
        v60 = v29;
        v61 = v30;
        v62 = v31;
        v64 = v32;
        v63 = v33;
        v65 = v34;
        outlined copy of DisplayList.Item.Value(v29, v30);
        DisplayList.AccessibilityUpdater.update(item:state:)(&v57, a2);
        outlined consume of DisplayList.Item.Value(v29, v30);
        v27 += 18;
        --v26;
      }
      while (v26);
      swift_bridgeObjectRelease();
      v8 = v48;
      v7 = v50;
    }
    *v8 = v7;
    v9 = v52;
    goto LABEL_27;
  }
  v11 = (_QWORD *)(a2 + 136);
  v54 = v10;
  objc_storeStrong((id *)(a2 + 136), v10);
  *v8 = 0;
  v8[1] = 0;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 128) = MEMORY[0x1E0DEE9D8];
  v12 = *(_QWORD *)(a5 + 16);
  if (v12)
  {
    v47 = v8;
    v49 = v7;
    v51 = v9;
    swift_bridgeObjectRetain();
    v13 = (_DWORD *)(a5 + 100);
    do
    {
      v14 = *(_QWORD *)(v13 - 9);
      v15 = *(_QWORD *)(v13 - 7);
      v16 = *(_QWORD *)(v13 - 5);
      v17 = *(_QWORD *)(v13 - 3);
      v18 = *((_BYTE *)v13 - 2);
      v19 = *((_WORD *)v13 - 2);
      v20 = *v13;
      v21 = *(_OWORD *)(v13 - 13);
      v57 = *(_OWORD *)(v13 - 17);
      v58 = v21;
      v59 = v14;
      v60 = v15;
      v61 = v16;
      v62 = v17;
      v64 = v18;
      v63 = v19;
      v65 = v20;
      outlined copy of DisplayList.Item.Value(v15, v16);
      DisplayList.AccessibilityUpdater.update(item:state:)(&v57, a2);
      outlined consume of DisplayList.Item.Value(v15, v16);
      v13 += 18;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    v7 = v49;
    v9 = v51;
    v11 = (_QWORD *)(a2 + 136);
    v8 = v47;
  }
  v22 = (_QWORD *)(*v11 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
  swift_beginAccess();
  if (*v22 >> 62)
  {
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = *(_QWORD *)((*v22 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v24 = *v8;
  if (__OFSUB__(v23, *v8))
  {
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v23 - *v8 < 1)
  {
LABEL_12:
    if (!__OFADD__(v7, 1))
    {
      *(_QWORD *)(a2 + 200) = v7 + 1;
      v25 = *(_QWORD *)(a2 + 184);
      if (*(_BYTE *)(a2 + 184) == 0xFF)
      {

      }
      else
      {
        v36 = *(_QWORD *)(a2 + 168);
        v37 = *(void **)(a2 + 176);
        *((_QWORD *)&v39 + 1) = *(unsigned int *)(a2 + 192) | ((unint64_t)*(unsigned __int8 *)(a2 + 196) << 32);
        *(_QWORD *)&v39 = *(_QWORD *)(a2 + 184);
        v38 = v39 >> 32;
        v53 = *(_BYTE *)(a2 + 196);
        swift_beginAccess();
        if ((v25 & 1) != 0)
        {
          if ((v36 & 1) != 0)
          {
            type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityVisibility>, MEMORY[0x1E0CE58F8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
            inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_187BF9830;
            swift_bridgeObjectRetain();
            static AccessibilityVisibility.containerElement.getter();
            v44 = *(_DWORD *)(inited + 32);
            swift_bridgeObjectRelease();
            type metadata accessor for AnyAccessibilityPropertiesEntry();
            v55 = Dictionary.init(minimumCapacity:)();
            type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
            *((_QWORD *)&v58 + 1) = v45;
            v59 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>();
            LODWORD(v57) = v44;
            DWORD1(v57) = v44 | 0x40;
            specialized Dictionary.subscript.setter((uint64_t)&v57, MEMORY[0x1E0CE5728]);
            AccessibilityAttachment.init(properties:)();
          }
          else
          {
            v42 = swift_bridgeObjectRetain();
            static AccessibilityChildBehavior.Combine.combine(children:options:)(v42, 1, (uint64_t)&v57);
          }
          swift_bridgeObjectRelease();
          v41 = (void *)*((_QWORD *)&v57 + 1);
          v40 = v57;
        }
        else
        {
          outlined copy of DisplayList.AccessibilityUpdater.DeferredAttachment.Storage(v36, v37, 0);
          outlined copy of DisplayList.AccessibilityUpdater.DeferredAttachment.Storage(v36, v37, 0);
          v40 = v36;
          v41 = v37;
        }
        *(_QWORD *)&v57 = v40;
        *((_QWORD *)&v57 + 1) = v41;
        v55 = v38;
        v56 = v53;
        specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v57, &v55, 1);
        outlined consume of DisplayList.AccessibilityUpdater.DeferredAttachment?(v36, v37, v25);
        swift_bridgeObjectRelease();

      }
LABEL_27:
      v46 = a2 + 192;
      *(_QWORD *)(v46 + 16) = v9;
      outlined consume of DisplayList.AccessibilityUpdater.DeferredAttachment?(*(_QWORD *)(v46 - 24), *(void **)(v46 - 16), *(_QWORD *)(v46 - 8));
      *(_QWORD *)(v46 - 24) = 0;
      *(_QWORD *)(v46 - 16) = 0;
      *(_QWORD *)(v46 - 8) = 255;
      *(_BYTE *)(v46 + 4) = 0;
      *(_DWORD *)v46 = 0;
      return;
    }
    goto LABEL_30;
  }
  if (v23 >= v24)
  {
    specialized DisplayList.AccessibilityUpdater.remove(_:state:)(v24, v23, a2);
    goto LABEL_12;
  }
LABEL_31:
  __break(1u);
}

uint64_t specialized DisplayList.AccessibilityUpdater.addAttachments(_:item:state:_:)(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  id v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  __int16 v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  __int16 v70;
  int v71;
  __int128 v72;
  uint64_t result;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  __int16 v81;
  int v82;
  __int128 v83;
  id v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  __int16 v120;
  char v121;
  int v122;

  v91 = a7;
  v92 = a4;
  v110 = a1;
  v96 = type metadata accessor for AccessibilityNodeAttachment();
  v94 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96, v11);
  v95 = (uint64_t)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 8);
  v16 = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  v18 = *(_QWORD *)(a2 + 32);
  v17 = *(_QWORD *)(a2 + 40);
  v19 = *(_QWORD *)(a2 + 48);
  v20 = *(_QWORD *)(a2 + 56);
  LODWORD(v12) = *(unsigned __int8 *)(a2 + 66);
  v21 = *(unsigned __int16 *)(a2 + 64);
  v22 = *(_DWORD *)(a2 + 68);
  *(_QWORD *)&v114 = *(_QWORD *)a2;
  v14 = v114;
  *((_QWORD *)&v114 + 1) = v13;
  *(_QWORD *)&v115 = v16;
  *((_QWORD *)&v115 + 1) = v15;
  v116 = v18;
  v117 = v17;
  v118 = v19;
  v119 = v20;
  v93 = v12;
  v109 = (unsigned __int16)v12;
  v121 = v12;
  v120 = v21;
  v122 = v22;
  v100 = a5;
  swift_retain_n();
  v103 = a6;
  swift_bridgeObjectRetain_n();
  DisplayList.Item.frame.getter();
  v24 = v23 + *((double *)a3 + 3);
  v26 = v25 + *((double *)a3 + 4);
  *((double *)a3 + 3) = v24;
  *((double *)a3 + 4) = v26;
  v111 = *((_QWORD *)a3 + 5);
  v27 = *((_OWORD *)a3 + 4);
  v112 = *((_OWORD *)a3 + 3);
  v113 = v27;
  swift_retain();
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(*(unint64_t *)&v26, *(unint64_t *)&v24));
  v99 = (void *)*a3;
  v28 = v111;
  v29 = v112;
  v97 = *((_QWORD *)&v113 + 1);
  v98 = v113;
  *(_QWORD *)&v85 = v14;
  *(_QWORD *)&v114 = v14;
  *((_QWORD *)&v114 + 1) = v13;
  *((_QWORD *)&v85 + 1) = v13;
  *(_QWORD *)&v86 = v16;
  *(_QWORD *)&v115 = v16;
  *((_QWORD *)&v115 + 1) = v15;
  *((_QWORD *)&v86 + 1) = v15;
  v102 = v18;
  v116 = v18;
  v117 = v17;
  v87 = v17;
  v88 = v19;
  v118 = v19;
  v119 = v20;
  v89 = v20;
  v121 = v109;
  v101 = v21;
  v120 = v21;
  v90 = v22;
  v122 = v22;
  swift_retain();
  swift_bridgeObjectRetain();
  DisplayList.Item.frame.getter();
  v31 = v30;
  v33 = v32;
  v34 = *((_QWORD *)a3 + 10);
  v35 = *((_QWORD *)a3 + 11);
  v36 = *((_QWORD *)a3 + 12);
  v37 = *((_QWORD *)a3 + 13);
  LODWORD(v18) = *((unsigned __int8 *)a3 + 112);
  v38 = (char *)*((_QWORD *)a3 + 16);
  outlined copy of Path.Storage(v34, v35, v36, v37, *((_BYTE *)a3 + 112));
  swift_bridgeObjectRetain();
  v104 = v28;
  swift_retain();
  v105 = v34;
  v106 = v35;
  v107 = v36;
  v108 = v37;
  v109 = v18;
  outlined copy of Path.Storage(v34, v35, v36, v37, v18);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v38 + 2) + 1, 1, v38);
  v40 = *((_QWORD *)v38 + 2);
  v39 = *((_QWORD *)v38 + 3);
  v41 = v103;
  v42 = v104;
  v43 = v100;
  if (v40 >= v39 >> 1)
    v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v38);
  *((_QWORD *)v38 + 2) = v40 + 1;
  v44 = &v38[120 * v40];
  v45 = v110;
  *((_QWORD *)v44 + 4) = v110;
  *((_QWORD *)v44 + 5) = v42;
  *((_OWORD *)v44 + 3) = v29;
  v46 = v97;
  *((_QWORD *)v44 + 8) = v98;
  *((_QWORD *)v44 + 9) = v46;
  *((_QWORD *)v44 + 10) = v31;
  *((_QWORD *)v44 + 11) = v33;
  v47 = v106;
  *((_QWORD *)v44 + 12) = v105;
  *((_QWORD *)v44 + 13) = v47;
  v48 = v108;
  *((_QWORD *)v44 + 14) = v107;
  *((_QWORD *)v44 + 15) = v48;
  v44[128] = v109;
  *(_QWORD *)(v44 + 132) = v99;
  v44[140] = 1;
  *((_QWORD *)v44 + 18) = v102;
  *((_QWORD *)a3 + 16) = v38;
  if (*(_QWORD *)(v45 + 16))
  {
    v49 = (unsigned __int16)v101 | ((unsigned __int16)v93 << 16);
    v50 = v95;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v45 + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80)), v95, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
    if ((*(_BYTE *)(v50 + *(int *)(v96 + 24)) & 1) != 0)
    {
      v98 = *((_QWORD *)a3 + 25);
      v51 = (void *)*((_QWORD *)a3 + 17);
      v52 = *(_QWORD *)(v41 + 16);
      if (v52)
      {
        v101 = v49;
        swift_bridgeObjectRetain();
        v99 = v51;
        v53 = v51;
        v54 = (_DWORD *)(v41 + 100);
        do
        {
          v55 = *(_QWORD *)(v54 - 9);
          v56 = *(_QWORD *)(v54 - 7);
          v57 = *(_QWORD *)(v54 - 5);
          v58 = *(_QWORD *)(v54 - 3);
          v59 = *((_BYTE *)v54 - 2);
          v60 = *((_WORD *)v54 - 2);
          v61 = *v54;
          v62 = *(_OWORD *)(v54 - 13);
          v114 = *(_OWORD *)(v54 - 17);
          v115 = v62;
          v116 = v55;
          v117 = v56;
          v118 = v57;
          v119 = v58;
          v121 = v59;
          v120 = v60;
          v122 = v61;
          outlined copy of DisplayList.Item.Value(v56, v57);
          DisplayList.AccessibilityUpdater.update(item:state:)(&v114, a3);
          outlined consume of DisplayList.Item.Value(v56, v57);
          v54 += 18;
          --v52;
        }
        while (v52);
        v41 = v103;
        swift_bridgeObjectRelease();
        v50 = v95;
        v49 = v101;
        v51 = v99;
      }
      else
      {
        v84 = v51;
      }
      if ((*(_BYTE *)(v50 + *(int *)(v96 + 20)) & 1) != 0 && v51 == *((void **)a3 + 17) && v98 == *((_QWORD *)a3 + 25))
      {
        v114 = v85;
        v115 = v86;
        v116 = v102;
        v117 = v87;
        v118 = v88;
        v119 = v89;
        v120 = v49;
        v121 = BYTE2(v49);
        v122 = v90;
        swift_retain();
        swift_bridgeObjectRetain();
        specialized DisplayList.AccessibilityUpdater.createNode(item:state:_:)((uint64_t)&v114, (uint64_t)a3, v92, v43, v41);
        swift_release();
        swift_bridgeObjectRelease();

        goto LABEL_17;
      }
      swift_release();
      swift_bridgeObjectRelease();

    }
    else
    {
      if ((*(_BYTE *)(v50 + *(int *)(v96 + 20)) & 1) != 0)
      {
        v114 = v85;
        v115 = v86;
        v116 = v102;
        v117 = v87;
        v118 = v88;
        v119 = v89;
        v120 = v49;
        v121 = BYTE2(v49);
        v122 = v90;
        swift_retain();
        swift_bridgeObjectRetain();
        specialized DisplayList.AccessibilityUpdater.createNode(item:state:_:)((uint64_t)&v114, (uint64_t)a3, v92, v43, v41);
        swift_release();
        swift_bridgeObjectRelease();
LABEL_17:
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Path.Storage(v105, v106, v107, v108, v109);
        outlined destroy of AccessibilityNodeAttachment(v50);
        swift_bridgeObjectRelease_n();
        swift_release_n();
        return swift_release();
      }
      v74 = *(_QWORD *)(v41 + 16);
      if (v74)
      {
        swift_bridgeObjectRetain();
        v75 = (_DWORD *)(v41 + 100);
        do
        {
          v76 = *(_QWORD *)(v75 - 9);
          v77 = *(_QWORD *)(v75 - 7);
          v78 = *(_QWORD *)(v75 - 5);
          v79 = *(_QWORD *)(v75 - 3);
          v80 = *((_BYTE *)v75 - 2);
          v81 = *((_WORD *)v75 - 2);
          v82 = *v75;
          v83 = *(_OWORD *)(v75 - 13);
          v114 = *(_OWORD *)(v75 - 17);
          v115 = v83;
          v116 = v76;
          v117 = v77;
          v118 = v78;
          v119 = v79;
          v121 = v80;
          v120 = v81;
          v122 = v82;
          outlined copy of DisplayList.Item.Value(v77, v78);
          DisplayList.AccessibilityUpdater.update(item:state:)(&v114, a3);
          outlined consume of DisplayList.Item.Value(v77, v78);
          v75 += 18;
          --v74;
        }
        while (v74);
        swift_release();
        swift_bridgeObjectRelease();
        v50 = v95;
      }
      else
      {
        swift_release();
      }
      swift_bridgeObjectRelease();
    }
    outlined consume of Path.Storage(v105, v106, v107, v108, v109);
    outlined destroy of AccessibilityNodeAttachment(v50);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    result = swift_release();
  }
  else
  {
    v63 = *(_QWORD *)(v41 + 16);
    if (v63)
    {
      swift_bridgeObjectRetain();
      v64 = (_DWORD *)(v41 + 100);
      do
      {
        v65 = *(_QWORD *)(v64 - 9);
        v66 = *(_QWORD *)(v64 - 7);
        v67 = *(_QWORD *)(v64 - 5);
        v68 = *(_QWORD *)(v64 - 3);
        v69 = *((_BYTE *)v64 - 2);
        v70 = *((_WORD *)v64 - 2);
        v71 = *v64;
        v72 = *(_OWORD *)(v64 - 13);
        v114 = *(_OWORD *)(v64 - 17);
        v115 = v72;
        v116 = v65;
        v117 = v66;
        v118 = v67;
        v119 = v68;
        v121 = v69;
        v120 = v70;
        v122 = v71;
        outlined copy of DisplayList.Item.Value(v66, v67);
        DisplayList.AccessibilityUpdater.update(item:state:)(&v114, a3);
        outlined consume of DisplayList.Item.Value(v66, v67);
        v64 += 18;
        --v63;
      }
      while (v63);
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
    swift_bridgeObjectRelease();
    outlined consume of Path.Storage(v105, v106, v107, v108, v109);
    swift_release();
    swift_bridgeObjectRelease_n();
    result = swift_release_n();
  }
  *((_QWORD *)a3 + 26) = 0;
  return result;
}

uint64_t specialized DisplayList.AccessibilityUpdater.update(list:size:transform:geometryChanged:)(uint64_t *a1, uint64_t *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  __int16 v26;
  int v27;
  char *v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  char *v37;
  __int128 v38;
  _BYTE v39[24];
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  __int128 v49;
  int v50;
  char v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  char v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  __int128 v70;
  int v71;
  char v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  char v76;
  uint64_t v77;
  uint64_t v78;

  v4 = v3;
  v6 = *a1;
  v7 = *((_WORD *)a1 + 4);
  v8 = *((_BYTE *)a1 + 10);
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  v13 = a2[4];
  *(_QWORD *)&v58 = *a1;
  WORD4(v58) = v7;
  BYTE10(v58) = v8;
  DisplayList.version.getter();
  v14 = v38;
  if ((_QWORD)v38)
  {
    v15 = (2 * ((33 * ((unint64_t)v38 >> 16)) ^ v38)) | 1;
    if (*(unsigned __int16 *)(v3 + 16) == ((unsigned __int16)(2 * ((33 * WORD1(v38)) ^ v38)) | 1) && (a3 & 1) == 0)
      return 0;
    v16 = *(void **)(v3 + 40);
    if (!v16)
      return 0;
  }
  else
  {
    if (!*(_WORD *)(v3 + 16) && (a3 & 1) == 0)
      return 0;
    v16 = *(void **)(v3 + 40);
    if (!v16)
      return 0;
    LOWORD(v15) = 0;
  }
  *(_WORD *)(v4 + 16) = v15;
  swift_retain();
  v17 = v16;
  DisplayList.Index.init()();
  v58 = v38;
  v59 = v39[0];
  v60 = 0uLL;
  v61 = v9;
  *(_QWORD *)&v62 = v10;
  *((_QWORD *)&v62 + 1) = v11;
  *(_QWORD *)&v63 = v12;
  *((_QWORD *)&v63 + 1) = v13;
  v64 = 0u;
  v65 = 0u;
  v66 = 6;
  v67 = v14;
  v68 = MEMORY[0x1E0DEE9D8];
  v70 = 0uLL;
  v69 = v17;
  v71 = 0;
  v72 = 1;
  v73 = 0uLL;
  v74 = 255;
  v76 = 0;
  v75 = 0;
  v77 = 0;
  v78 = 0;
  v18 = v17;
  v19 = *(_QWORD *)(v6 + 16);
  if (v19)
  {
    v37 = v17;
    swift_bridgeObjectRetain();
    v20 = (_DWORD *)(v6 + 100);
    do
    {
      v21 = *(_QWORD *)(v20 - 9);
      v22 = *(_QWORD *)(v20 - 7);
      v23 = *(_QWORD *)(v20 - 5);
      v24 = *(_QWORD *)(v20 - 3);
      v25 = *((_BYTE *)v20 - 2);
      v26 = *((_WORD *)v20 - 2);
      v27 = *v20;
      v38 = *(_OWORD *)(v20 - 17);
      *(_OWORD *)v39 = *(_OWORD *)(v20 - 13);
      *(_QWORD *)&v39[16] = v21;
      v40 = v22;
      *(_QWORD *)&v41 = v23;
      *((_QWORD *)&v41 + 1) = v24;
      BYTE2(v42) = v25;
      LOWORD(v42) = v26;
      DWORD1(v42) = v27;
      outlined copy of DisplayList.Item.Value(v22, v23);
      DisplayList.AccessibilityUpdater.update(item:state:)((uint64_t)&v38);
      outlined consume of DisplayList.Item.Value(v22, v23);
      v20 += 18;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    v18 = v69;
    v17 = v37;
  }
  v28 = &v18[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
  result = swift_beginAccess();
  v30 = *(_QWORD *)v28;
  if (v30 >> 62)
  {
    swift_bridgeObjectRetain();
    v31 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v32 = v77;
  if (__OFSUB__(v31, v77))
  {
    __break(1u);
  }
  else
  {
    if (v31 - v77 <= 0)
    {
LABEL_20:
      swift_beginAccess();
      v33 = swift_bridgeObjectRetain();
      v34 = specialized _NativeDictionary.filter(_:)(v33, v14);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v4 + 48) = v34;
      swift_bridgeObjectRelease();
      v35 = *(_QWORD *)(v4 + 56);

      v36 = v35 == v14;
      v38 = v58;
      v39[0] = v59;
      *(_OWORD *)&v39[8] = v60;
      v40 = v61;
      v41 = v62;
      v42 = v63;
      v43 = v64;
      v44 = v65;
      v45 = v66;
      v46 = v67;
      v47 = v68;
      v48 = v18;
      v49 = v70;
      v50 = v71;
      v51 = v72;
      v52 = v73;
      v53 = v74;
      v55 = v76;
      v54 = v75;
      v56 = v32;
      v57 = v78;
      outlined release of DisplayList.AccessibilityUpdater.State((uint64_t)&v38);
      return v36;
    }
    if (v31 >= v77)
    {
      specialized DisplayList.AccessibilityUpdater.remove(_:state:)(v77, v31, (uint64_t)&v58);
      goto LABEL_20;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined release of DisplayList.AccessibilityUpdater.State(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;
  void *v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(void **)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 184);
  v10 = *(void **)(a1 + 176);
  v11 = *(_QWORD *)(a1 + 168);
  v8 = *(_BYTE *)(a1 + 112);
  swift_release();
  outlined consume of Path.Storage(v2, v3, v4, v5, v8);

  swift_bridgeObjectRelease();
  outlined consume of DisplayList.AccessibilityUpdater.DeferredAttachment?(v11, v10, v7);
  return a1;
}

void outlined consume of DisplayList.AccessibilityUpdater.DeferredAttachment?(uint64_t a1, void *a2, char a3)
{
  if (a3 != -1)
    outlined consume of DisplayList.AccessibilityUpdater.DeferredAttachment.Storage(a1, a2, a3 & 1);
}

void outlined consume of DisplayList.AccessibilityUpdater.DeferredAttachment.Storage(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    swift_bridgeObjectRelease();

  }
}

uint64_t outlined retain of DisplayList.AccessibilityUpdater.State(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;
  id v9;
  void *v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(void **)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 184);
  v11 = *(void **)(a1 + 176);
  v12 = *(_QWORD *)(a1 + 168);
  v8 = *(_BYTE *)(a1 + 112);
  swift_retain();
  outlined copy of Path.Storage(v2, v3, v4, v5, v8);
  swift_bridgeObjectRetain();
  v9 = v6;
  outlined copy of DisplayList.AccessibilityUpdater.DeferredAttachment?(v12, v11, v7);
  return a1;
}

uint64_t outlined copy of DisplayList.AccessibilityUpdater.DeferredAttachment?(uint64_t result, void *a2, char a3)
{
  if (a3 != -1)
    return outlined copy of DisplayList.AccessibilityUpdater.DeferredAttachment.Storage(result, a2, a3 & 1);
  return result;
}

uint64_t outlined copy of DisplayList.AccessibilityUpdater.DeferredAttachment.Storage(uint64_t a1, void *a2, char a3)
{
  id v3;
  uint64_t result;

  if ((a3 & 1) == 0)
  {
    v3 = a2;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined init with take of CGAffineTransform?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CGAffineTransform?, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of DisplayList.ArchiveIDs?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE0F78], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DisplayList.ArchiveIDs?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE0F78], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of AccessibilityNodeAttachment(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AccessibilityNodeAttachment();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6310], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

uint64_t destroy for DisplayList.AccessibilityUpdater.AttachmentStorage(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  return outlined consume of Path.Storage(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
}

uint64_t initializeWithCopy for DisplayList.AccessibilityUpdater.AttachmentStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  v10 = *(_BYTE *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of Path.Storage(v6, v7, v8, v9, v10);
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = v9;
  *(_BYTE *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 100) = *(_QWORD *)(a2 + 100);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t assignWithCopy for DisplayList.AccessibilityUpdater.AttachmentStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 88);
  v8 = *(_BYTE *)(a2 + 96);
  outlined copy of Path.Storage(v4, v5, v6, v7, v8);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = v7;
  v13 = *(_BYTE *)(a1 + 96);
  *(_BYTE *)(a1 + 96) = v8;
  outlined consume of Path.Storage(v9, v10, v11, v12, v13);
  v14 = *(_QWORD *)(a2 + 100);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_QWORD *)(a1 + 100) = v14;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for DisplayList.AccessibilityUpdater.AttachmentStorage(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned __int8 v11;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_BYTE *)(a2 + 96);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  v10 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v11 = *(_BYTE *)(a1 + 96);
  *(_BYTE *)(a1 + 96) = v5;
  outlined consume of Path.Storage(v6, v7, v8, v9, v11);
  *(_QWORD *)(a1 + 100) = *(_QWORD *)(a2 + 100);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.AccessibilityUpdater.AttachmentStorage(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.AccessibilityUpdater.AttachmentStorage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.AccessibilityUpdater.AttachmentStorage()
{
  return &type metadata for DisplayList.AccessibilityUpdater.AttachmentStorage;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance EnvironmentChangeModifier<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static EnvironmentChangeModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Observer, (void (*)(uint64_t, uint64_t, uint64_t, double))type metadata accessor for EnvironmentChangeModifier, a6, (uint64_t)&protocol conformance descriptor for Observer<A>, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance EnvironmentChangeModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentChangeModifier<A>, a5);
  return static UnaryViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t Observer.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *);
  char *v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  char *v53;
  char *v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  char *v63;
  _QWORD *v64;
  unint64_t v65;
  char *v66;
  _QWORD v68[2];
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  char *v71;
  void (*v72)(char *, _QWORD, uint64_t, uint64_t);
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t TupleTypeMetadata2;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[3];

  v2 = v1;
  v77 = *(_QWORD *)(a1 + 16);
  v4 = v77;
  v5 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v70 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v6);
  v79 = (char *)v68 - v7;
  v8 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v81 = (char *)v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v78 = (char *)v68 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v68 - v17;
  v19 = *(_QWORD **)(v4 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v71 = (char *)v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68[1] = v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v68 - v25;
  v27 = Observer.modifier.getter(a1, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for EnvironmentChangeModifier);
  v74 = v28;
  v82 = v29;
  WindowSceneList.MakeList.environment.getter(v88);
  v86 = v88[0];
  v87 = v88[1];
  v83 = v27;
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  v75 = v2;
  v76 = a1;
  v30 = *(int *)(a1 + 44);
  v31 = v77;
  v80 = v8;
  v32 = *(void (**)(char *))(v8 + 16);
  v33 = v78;
  v34 = v79;
  v73 = (char *)(v2 + v30);
  v32(v18);
  v35 = (void (*)(char *, char *, uint64_t))v19[2];
  v84 = v26;
  v36 = v26;
  v37 = v18;
  v35(v33, v36, v31);
  v72 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v19[7];
  v72(v33, 0, 1, v31);
  v38 = &v34[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v32)(v34, v18, v5);
  ((void (*)(char *, char *, uint64_t))v32)(v38, v33, v5);
  v39 = v19;
  v40 = (unsigned int (*)(char *, uint64_t, uint64_t))v19[6];
  if (v40(v34, 1, v31) == 1)
  {
    v41 = v37;
    v42 = *(void (**)(char *, uint64_t))(v80 + 8);
    v42(v33, v5);
    v42(v41, v5);
    if (v40(v38, 1, v31) == 1)
    {
      v42(v34, v5);
      ((void (*)(char *, uint64_t))v39[1])(v84, v31);
      goto LABEL_14;
    }
    v43 = v34;
    v69 = v35;
    v44 = v39;
  }
  else
  {
    v68[0] = v37;
    v69 = v35;
    ((void (*)(char *, char *, uint64_t))v32)(v81, v34, v5);
    if (v40(v38, 1, v31) != 1)
    {
      v48 = v71;
      ((void (*)(char *, char *, uint64_t))v39[4])(v71, v38, v31);
      v46 = v76;
      v49 = v81;
      v50 = dispatch thunk of static Equatable.== infix(_:_:)();
      v51 = (void (*)(char *, uint64_t))v39[1];
      v51(v48, v31);
      v42 = *(void (**)(char *, uint64_t))(v80 + 8);
      v52 = v33;
      v44 = v39;
      v42(v52, v5);
      v42((char *)v68[0], v5);
      v51(v49, v31);
      v42(v34, v5);
      v45 = v82;
      v47 = v83;
      if ((v50 & 1) != 0)
      {
        v51(v84, v31);
        goto LABEL_14;
      }
      goto LABEL_11;
    }
    v43 = v34;
    v42 = *(void (**)(char *, uint64_t))(v80 + 8);
    v42(v33, v5);
    v42((char *)v68[0], v5);
    v44 = v39;
    ((void (*)(char *, uint64_t))v39[1])(v81, v31);
  }
  v45 = v82;
  v46 = v76;
  (*(void (**)(char *, uint64_t))(v70 + 8))(v43, TupleTypeMetadata2);
  v47 = v83;
LABEL_11:
  v53 = v73;
  v42(v73, v5);
  v54 = v84;
  v55 = v69;
  v69(v53, v84, v31);
  v56 = ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v72)(v53, 0, 1, v31);
  MEMORY[0x1E0C80A78](v56, v57);
  v58 = *(_QWORD *)(v46 + 24);
  v68[-6] = v31;
  v68[-5] = v58;
  v59 = v74;
  v68[-4] = v47;
  v68[-3] = v59;
  v68[-2] = v45;
  if ((UpdateCycleDetector.dispatch(label:isDebug:)() & 1) != 0)
  {
    AGGraphClearUpdate();
    v60 = v44;
    v61 = (_QWORD *)swift_allocObject();
    v61[2] = v31;
    v61[3] = v58;
    v61[4] = v59;
    v61[5] = v45;
    swift_retain();
    AGGraphSetUpdate();
    v62 = (_QWORD *)swift_allocObject();
    v62[2] = v31;
    v62[3] = v58;
    v62[4] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ());
    v62[5] = v61;
    v63 = v71;
    v55(v71, v54, v31);
    v64 = v60;
    v65 = (*((unsigned __int8 *)v60 + 80) + 48) & ~(unint64_t)*((unsigned __int8 *)v60 + 80);
    v66 = (char *)swift_allocObject();
    *((_QWORD *)v66 + 2) = v31;
    *((_QWORD *)v66 + 3) = v58;
    *((_QWORD *)v66 + 4) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ());
    *((_QWORD *)v66 + 5) = v62;
    ((void (*)(char *, char *, uint64_t))v64[4])(&v66[v65], v63, v31);
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v64[1])(v54, v31);
  }
  ((void (*)(char *, uint64_t))v44[1])(v54, v31);
LABEL_14:
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance Observer<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for Observer<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t View._onEnvironmentChange<A>(_:perform:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View._onEnvironmentChange<A>(_:perform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD, _QWORD, uint64_t))type metadata accessor for EnvironmentChangeModifier);
}

{
  return View._onEnvironmentChange<A>(_:perform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD, _QWORD, uint64_t))type metadata accessor for EnvironmentChangeModifier2);
}

uint64_t type metadata accessor for EnvironmentChangeModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EnvironmentChangeModifier);
}

uint64_t static EnvironmentChangeModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(_QWORD, uint64_t, uint64_t)@<X6>, void (*a8)(uint64_t, uint64_t, uint64_t, double)@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t (*v58)(_QWORD, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t *);
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  char v71;
  _BYTE v72[16];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;

  v58 = a7;
  v63 = a4;
  v64 = a3;
  v62 = a9;
  v61 = a11;
  v60 = a10;
  v92 = *MEMORY[0x1E0C80C00];
  v17 = type metadata accessor for Optional();
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v49 = (char *)&v41 - v20;
  v47 = a6;
  v57 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, double))a7)(0, a5, a6, v19);
  v59 = *(_QWORD *)(v57 - 8);
  v22 = MEMORY[0x1E0C80A78](v57, v21);
  v48 = (uint64_t)&v41 - v23;
  LODWORD(v23) = *a1;
  v67 = *a2;
  v56 = *((_DWORD *)a2 + 2);
  v24 = v56;
  v45 = a2[2];
  v68 = *((_DWORD *)a2 + 6);
  v41 = *((_DWORD *)a2 + 7);
  LODWORD(a1) = *((_DWORD *)a2 + 9);
  v66 = *((_DWORD *)a2 + 8);
  v55 = (int)a1;
  v26 = a2[6];
  v54 = a2[5];
  v25 = v54;
  v53 = v26;
  v27 = *((_DWORD *)a2 + 15);
  v44 = *((_DWORD *)a2 + 14);
  v52 = v27;
  v43 = *((_DWORD *)a2 + 16);
  v28 = *((_DWORD *)a2 + 18);
  v65 = *((_DWORD *)a2 + 17);
  v51 = v28;
  v29 = *((_DWORD *)a2 + 19);
  LODWORD(a2) = *((_DWORD *)a2 + 20);
  v42 = v29;
  v50 = (int)a2;
  LODWORD(v75) = v23;
  a8(255, a5, a6, v22);
  type metadata accessor for _GraphValue();
  v46 = _GraphValue.value.getter();
  v75 = v67;
  v76 = v24;
  v30 = v45;
  v78 = v45;
  v31 = v41;
  v79 = v68;
  v80 = v41;
  v81 = v66;
  v82 = (int)a1;
  v83 = v25;
  v84 = v26;
  LODWORD(v26) = v44;
  v85 = v44;
  v86 = v27;
  v32 = v43;
  v87 = v43;
  v88 = v65;
  v89 = v28;
  v33 = v42;
  v90 = v42;
  v91 = (int)a2;
  LODWORD(a8) = _ViewInputs.environment.getter();
  UpdateCycleDetector.init()();
  v69 = v75;
  v70 = v76;
  v71 = v77;
  v34 = (uint64_t)v49;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))(v49, 1, 1, a5);
  v35 = v48;
  Observer.init(modifier:environment:cycleDetector:lastValue:)(v46, (int)a8, (uint64_t)&v69, v34, a5, v47, v58, v48);
  v36 = v57;
  v73 = v57;
  v74 = MEMORY[0x18D75FFDC](v60, v57);
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v35, v61, (uint64_t)v72, v36, MEMORY[0x1E0DEDCE8], v37, MEMORY[0x1E0DEDD18], v38);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v35, v36);
  static AGAttributeFlags.transactional.getter();
  v39 = AGGraphSetFlags();
  v75 = v67;
  v76 = v56;
  v78 = v30;
  v79 = v68;
  v80 = v31;
  v81 = v66;
  v82 = v55;
  v83 = v54;
  v84 = v53;
  v85 = v26;
  v86 = v52;
  v87 = v32;
  v88 = v65;
  v89 = v51;
  v90 = v33;
  v91 = v50;
  return v64(v39, &v75);
}

uint64_t Observer.init(modifier:environment:cycleDetector:lastValue:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(_QWORD, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>)
{
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v10 = *(_DWORD *)(a3 + 8);
  v11 = *(_BYTE *)(a3 + 12);
  *(_DWORD *)a8 = a1;
  *(_DWORD *)(a8 + 4) = a2;
  *(_QWORD *)(a8 + 8) = *(_QWORD *)a3;
  *(_DWORD *)(a8 + 16) = v10;
  *(_BYTE *)(a8 + 20) = v11;
  v12 = a8 + *(int *)(a7(0, a5, a6) + 44);
  v13 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a4, v13);
}

uint64_t Observer.modifier.getter(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  a2(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v2 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  return v2;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance EnvironmentChangeModifier2<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static EnvironmentChangeModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Observer2, (void (*)(uint64_t, uint64_t, uint64_t, double))type metadata accessor for EnvironmentChangeModifier2, a6, (uint64_t)&protocol conformance descriptor for Observer2<A>, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance EnvironmentChangeModifier2<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentChangeModifier2<A>, a5);
  return static UnaryViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t Observer2.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *);
  char *v43;
  void (*v44)(char *, char *, char *);
  void (*v45)(char *, _QWORD, uint64_t, char *);
  char *v46;
  uint64_t (*v47)(char *, uint64_t, char *);
  int v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  int v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, _QWORD, uint64_t, char *);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  char *v67;
  char *v68;
  char v69;
  void (*v70)(char *, char *);
  char *v71;
  char *v72;
  uint64_t v73;
  _QWORD *v75;
  char *v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  char *v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  void (*v96)(char *);
  void (*v97)(char *, char *, char *);
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t (*v108)(uint64_t, _QWORD, uint64_t, char *);
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  uint64_t TupleTypeMetadata2;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD v122[3];

  v2 = v1;
  v119 = *(char **)(a1 + 16);
  v4 = v119;
  v5 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v102 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v6);
  v111 = (char *)&v95 - v7;
  v8 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v100 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v105 = (char *)&v95 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v101 = (char *)&v95 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v110 = (char *)&v95 - v20;
  v99 = v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v95 - v24;
  v26 = (_QWORD *)*((_QWORD *)v4 - 1);
  MEMORY[0x1E0C80A78](v27, v28);
  v107 = (char *)&v95 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = v29;
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v95 - v32;
  v34 = Observer.modifier.getter(a1, (void (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for EnvironmentChangeModifier2);
  v103 = v35;
  v112 = v36;
  WindowSceneList.MakeList.environment.getter(v122);
  v120 = v122[0];
  v121 = v122[1];
  v114 = v34;
  v37 = v111;
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  v106 = a1;
  v38 = *(int *)(a1 + 44);
  v39 = v25;
  v104 = v2;
  v40 = v2 + v38;
  v41 = v119;
  v113 = v8;
  v42 = *(void (**)(char *))(v8 + 16);
  v43 = v110;
  v109 = v40;
  v42(v25);
  v44 = (void (*)(char *, char *, char *))v26[2];
  v115 = v33;
  v44(v43, v33, v41);
  v45 = (void (*)(char *, _QWORD, uint64_t, char *))v26[7];
  v45(v43, 0, 1, v41);
  v46 = &v37[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v42)(v37, v39, v5);
  v118 = v5;
  ((void (*)(char *, char *, uint64_t))v42)(v46, v43, v5);
  v116 = v26;
  v47 = (uint64_t (*)(char *, uint64_t, char *))v26[6];
  v48 = v47(v37, 1, v41);
  v108 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, char *))v45;
  if (v48 == 1)
  {
    v49 = *(char **)(v113 + 8);
    v50 = v118;
    ((void (*)(char *, uint64_t))v49)(v43, v118);
    v51 = v39;
    v52 = v49;
    ((void (*)(char *, uint64_t))v49)(v51, v50);
    if (v47(v46, 1, v119) == 1)
    {
      ((void (*)(char *, uint64_t))v49)(v37, v118);
      ((void (*)(char *, char *))v116[1])(v115, v119);
LABEL_10:
      swift_release();
      return swift_release();
    }
    v96 = v42;
    v56 = v112;
    v97 = v44;
    goto LABEL_7;
  }
  v95 = v39;
  v97 = v44;
  v53 = v113;
  v54 = v101;
  v96 = v42;
  ((void (*)(char *, char *, uint64_t))v42)(v101, v37, v118);
  v55 = v47(v46, 1, v119);
  v56 = v112;
  if (v55 == 1)
  {
    v57 = *(char **)(v53 + 8);
    v58 = v118;
    ((void (*)(char *, uint64_t))v57)(v43, v118);
    v52 = v57;
    ((void (*)(char *, uint64_t))v57)(v95, v58);
    ((void (*)(char *, char *))v116[1])(v54, v119);
LABEL_7:
    v59 = v114;
    v60 = v108;
    v61 = (*(uint64_t (**)(char *, uint64_t))(v102 + 8))(v37, TupleTypeMetadata2);
    v63 = *(_QWORD *)(v106 + 24);
    v64 = v109;
    v65 = v103;
    goto LABEL_12;
  }
  v66 = v116;
  v67 = v107;
  v68 = v119;
  ((void (*)(char *, char *, char *))v116[4])(v107, v46, v119);
  TupleTypeMetadata2 = *(_QWORD *)(v106 + 24);
  v69 = dispatch thunk of static Equatable.== infix(_:_:)();
  v70 = (void (*)(char *, char *))v66[1];
  v70(v67, v68);
  v71 = v43;
  v72 = *(char **)(v53 + 8);
  v73 = v118;
  ((void (*)(char *, uint64_t))v72)(v71, v118);
  ((void (*)(char *, uint64_t))v72)(v95, v73);
  v70(v54, v68);
  v52 = v72;
  v61 = ((uint64_t (*)(char *, uint64_t))v72)(v37, v73);
  v59 = v114;
  if ((v69 & 1) != 0)
  {
    v70(v115, v119);
    goto LABEL_10;
  }
  v60 = v108;
  v64 = v109;
  v65 = v103;
  v63 = TupleTypeMetadata2;
LABEL_12:
  MEMORY[0x1E0C80A78](v61, v62);
  *(&v95 - 6) = v119;
  *(&v95 - 5) = (char *)v63;
  *(&v95 - 4) = (char *)v59;
  *(&v95 - 3) = v65;
  *(&v95 - 2) = v56;
  if ((UpdateCycleDetector.dispatch(label:isDebug:)() & 1) != 0)
  {
    AGGraphClearUpdate();
    v75 = (_QWORD *)swift_allocObject();
    v76 = v119;
    v75[2] = v119;
    v75[3] = v63;
    v75[4] = v65;
    v75[5] = v56;
    swift_retain();
    AGGraphSetUpdate();
    v77 = (_QWORD *)swift_allocObject();
    v77[2] = v76;
    v77[3] = v63;
    v77[4] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?, @in_guaranteed A) -> (@out ());
    v77[5] = v75;
    v78 = v105;
    TupleTypeMetadata2 = v63;
    v79 = v118;
    v80 = (void (*)(char *, char *, uint64_t))v96;
    ((void (*)(char *, uint64_t, uint64_t))v96)(v105, v64, v118);
    v81 = v100;
    v80(v100, v78, v79);
    v112 = v52;
    v97(v107, v115, v76);
    v82 = v113;
    v83 = (*(unsigned __int8 *)(v113 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80);
    v84 = v116;
    v85 = (v99 + *((unsigned __int8 *)v116 + 80) + v83) & ~(unint64_t)*((unsigned __int8 *)v116 + 80);
    v86 = (char *)swift_allocObject();
    v87 = TupleTypeMetadata2;
    *((_QWORD *)v86 + 2) = v76;
    *((_QWORD *)v86 + 3) = v87;
    *((_QWORD *)v86 + 4) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?, @in_guaranteed A) -> (@out ());
    *((_QWORD *)v86 + 5) = v77;
    v88 = v81;
    v64 = v109;
    (*(void (**)(char *, char *, uint64_t))(v82 + 32))(&v86[v83], v88, v79);
    v89 = &v86[v85];
    v90 = v112;
    v91 = v76;
    v92 = v115;
    ((void (*)(char *, char *, char *))v84[4])(v89, v107, v91);
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v60 = v108;
    v52 = v90;
    ((void (*)(char *, uint64_t))v90)(v105, v79);
  }
  else
  {
    swift_release();
    swift_release();
    v92 = v115;
    v84 = v116;
  }
  ((void (*)(uint64_t, uint64_t))v52)(v64, v118);
  v93 = v92;
  v94 = v119;
  ((void (*)(uint64_t, char *, char *))v84[4])(v64, v93, v119);
  return v60(v64, 0, 1, v94);
}

uint64_t implicit closure #1 in Observer.updateValue()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(27);
  v0._object = (void *)0x8000000187BD7E90;
  v0._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v0);
  type metadata accessor for KeyPath();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance Observer2<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for Observer2<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t View._onEnvironmentChange<A>(_:perform:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD, _QWORD, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];

  v9 = *a1;
  v12[0] = a1;
  v12[1] = a2;
  v12[2] = a3;
  v10 = a7(0, *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v9 + 8), a6);
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B4AC](v12, a4, v10, a5);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for EnvironmentChangeModifier2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EnvironmentChangeModifier2);
}

uint64_t sub_18711AB84(_QWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA25EnvironmentChangeModifier33_1BB15EB6F18297504C950F7546E07730LLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for EnvironmentChangeModifier, (uint64_t)&protocol witness table for EnvironmentChangeModifier<A>);
}

uint64_t sub_18711AB98(_QWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA25EnvironmentChangeModifier33_1BB15EB6F18297504C950F7546E07730LLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for EnvironmentChangeModifier2, (uint64_t)&protocol witness table for EnvironmentChangeModifier2<A>);
}

uint64_t assignWithTake for EnvironmentChangeModifier2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

_UNKNOWN **base witness table accessor for ViewModifier in EnvironmentChangeModifier<A>()
{
  return &protocol witness table for EnvironmentChangeModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in EnvironmentChangeModifier2<A>()
{
  return &protocol witness table for EnvironmentChangeModifier2<A>;
}

uint64_t type metadata accessor for Observer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Observer);
}

uint64_t type metadata accessor for Observer2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Observer2);
}

uint64_t type metadata completion function for Observer2()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Observer2(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  const void *v19;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if ((v7 | 3uLL) > 7 || v9 != 0 || ((v7 + 21) & ~v7) + v8 > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v7 + 16) & ~(v7 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v13 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    v14 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v13 = *v14;
    v15 = (_QWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v16 = (uint64_t *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v17 = *v16;
    *(_QWORD *)((char *)v15 + 5) = *(uint64_t *)((char *)v16 + 5);
    *v15 = v17;
    v18 = (void *)(((unint64_t)v15 + v7 + 13) & ~v7);
    v19 = (const void *)(((unint64_t)v16 + v7 + 13) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v19, 1, v4))
    {
      memcpy(v18, v19, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v18, v19, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v18, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t destroy for Observer2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(v3 + 80) + 13) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  return result;
}

_DWORD *initializeWithCopy for Observer2(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  size_t v14;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v5 = *v4;
  v6 = (_QWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (uint64_t *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = *v7;
  *(_QWORD *)((char *)v6 + 5) = *(uint64_t *)((char *)v7 + 5);
  *v6 = v8;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (void *)(((unint64_t)v6 + v11 + 13) & ~v11);
  v13 = (const void *)(((unint64_t)v7 + v11 + 13) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
  {
    if (*(_DWORD *)(v10 + 84))
      v14 = *(_QWORD *)(v10 + 64);
    else
      v14 = *(_QWORD *)(v10 + 64) + 1;
    memcpy(v12, v13, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v12, v13, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
  }
  return a1;
}

_DWORD *assignWithCopy for Observer2(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  size_t v16;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = ((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = ((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v6 = *(_DWORD *)v7;
  *(_DWORD *)(v6 + 4) = *(_DWORD *)(v7 + 4);
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(v7 + 8);
  *(_BYTE *)(v6 + 12) = *(_BYTE *)(v7 + 12);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)((v10 + 13 + v6) & ~v10);
  v12 = (void *)((v10 + 13 + v7) & ~v10);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v14 = v13(v11, 1, v8);
  v15 = v13(v12, 1, v8);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v11, v12, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      return a1;
    }
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 24))(v11, v12, v8);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  }
  if (*(_DWORD *)(v9 + 84))
    v16 = *(_QWORD *)(v9 + 64);
  else
    v16 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v11, v12, v16);
  return a1;
}

_DWORD *initializeWithTake for Observer2(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  size_t v14;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v5 = *v4;
  v6 = (_QWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (uint64_t *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = *v7;
  *(_QWORD *)((char *)v6 + 5) = *(uint64_t *)((char *)v7 + 5);
  *v6 = v8;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (void *)(((unint64_t)v6 + v11 + 13) & ~v11);
  v13 = (const void *)(((unint64_t)v7 + v11 + 13) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
  {
    if (*(_DWORD *)(v10 + 84))
      v14 = *(_QWORD *)(v10 + 64);
    else
      v14 = *(_QWORD *)(v10 + 64) + 1;
    memcpy(v12, v13, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v12, v13, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
  }
  return a1;
}

_DWORD *assignWithTake for Observer2(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  size_t v16;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = ((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = ((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v6 = *(_DWORD *)v7;
  *(_DWORD *)(v6 + 4) = *(_DWORD *)(v7 + 4);
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(v7 + 8);
  *(_BYTE *)(v6 + 12) = *(_BYTE *)(v7 + 12);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)((v10 + 13 + v6) & ~v10);
  v12 = (void *)((v10 + 13 + v7) & ~v10);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v14 = v13(v11, 1, v8);
  v15 = v13(v12, 1, v8);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v11, v12, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      return a1;
    }
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v11, v12, v8);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  }
  if (*(_DWORD *)(v9 + 84))
    v16 = *(_QWORD *)(v9 + 64);
  else
    v16 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v11, v12, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Observer2(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v19;
  int v20;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0xFE)
    v7 = 254;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = a2 - v7;
  if (a2 > v7)
  {
    v11 = v8 + ((v9 + 21) & ~v9);
    v12 = 8 * v11;
    if (v11 > 3)
      goto LABEL_13;
    v14 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v14))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v14 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v14 >= 2)
    {
LABEL_13:
      v13 = *(unsigned __int8 *)(a1 + v11);
      if (!*(_BYTE *)(a1 + v11))
        goto LABEL_27;
LABEL_20:
      v15 = (v13 - 1) << v12;
      if (v11 > 3)
        v15 = 0;
      if ((_DWORD)v11)
      {
        if (v11 > 3)
          LODWORD(v11) = 4;
        __asm { BR              X12 }
      }
      v20 = v7 + v15;
      return (v20 + 1);
    }
  }
LABEL_27:
  v16 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
  if (v6 <= 0xFE)
  {
    v17 = *(unsigned __int8 *)(v16 + 12);
    if (v17 < 2)
      return 0;
    v20 = (v17 + 2147483646) & 0x7FFFFFFF;
    return (v20 + 1);
  }
  v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v16 + v9 + 13) & ~v9);
  if (v19 >= 2)
    return v19 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for Observer2(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0xFE)
    v10 = 254;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((*(unsigned __int8 *)(v7 + 80) + 21) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v11;
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X15 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_18711B6E4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18711B6EC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_18711B70C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_18711B71C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_18711B724()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void base witness table accessor for _AttributeBody in Observer<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in Observer2<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_18711B754()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18711B778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in Observer.updateValue()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80);
  return (*(uint64_t (**)(uint64_t))(v0 + 32))(v0 + ((v1 + 48) & ~v1));
}

uint64_t partial apply for implicit closure #1 in Observer.updateValue()()
{
  return implicit closure #1 in Observer.updateValue()();
}

uint64_t sub_18711B840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void (*v8)(unint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(type metadata accessor for Optional() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(v1 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  swift_release();
  v7 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v0 + v3, 1, v1);
  v8 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  if (!v7)
    v8(v0 + v3, v1);
  v8(v0 + ((v3 + v4 + v6) & ~v6), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in Observer2.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(type metadata accessor for Optional() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return (*(uint64_t (**)(unint64_t, unint64_t))(v0 + 32))(v0 + v3, v0 + ((v3 + *(_QWORD *)(v2 + 64) + v4) & ~v4));
}

ValueMetadata *type metadata accessor for OuterFormListStyle()
{
  return &type metadata for OuterFormListStyle;
}

ValueMetadata *type metadata accessor for InlineListStyle()
{
  return &type metadata for InlineListStyle;
}

void static InlineListStyle._makeView<A>(value:inputs:)()
{
  type metadata accessor for _ListValue();
}

uint64_t sub_18711BA10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v3 = type metadata accessor for InlineListStyle.Body(0, v1, v0, v2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InlineListStyle.Body<A>, v3);
  _GraphValue.init<A>(_:)();
  return static AnyView._makeView(view:inputs:)();
}

void static InlineListStyle._makeViewList<A>(value:inputs:)()
{
  type metadata accessor for _ListValue();
}

uint64_t sub_18711BB58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v3 = type metadata accessor for InlineListStyle.Body(0, v1, v0, v2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InlineListStyle.Body<A>, v3);
  _GraphValue.init<A>(_:)();
  return static AnyView._makeViewList(view:inputs:)();
}

void InlineListStyle.Body.base.getter()
{
  type metadata accessor for _ListValue();
}

uint64_t sub_18711BC50(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void InlineListStyle.Body.value.getter()
{
  type metadata accessor for _ListValue();
}

void sub_18711BCE0(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  InlineListStyle.Body.base.getter();
}

uint64_t sub_18711BD20()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  result = AnyView.init<A>(_:)();
  *v0 = result;
  return result;
}

void protocol witness for Rule.value.getter in conformance InlineListStyle.Body<A>()
{
  InlineListStyle.Body.value.getter();
}

void static OuterFormListStyle._makeView<A>(value:inputs:)()
{
  type metadata accessor for _ListValue();
}

void sub_18711BE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  int v14;
  va_list va;

  va_start(va, a13);
  type metadata accessor for _GraphValue();
  v14 = _GraphValue.value.getter();
  *(_QWORD *)(v13 - 160) = 1;
  *(_QWORD *)(v13 - 152) = 0;
  *(_QWORD *)(v13 - 144) = 0;
  *(_QWORD *)(v13 - 136) = 0;
  *(_WORD *)(v13 - 128) = 256;
  lazy protocol witness table accessor for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext();
  InsettableGroupedListBodyRule.init(base:insetMode:context:)(v14, v13 - 160, va);
}

void sub_18711BE74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>>();
  v3 = type metadata accessor for SelectionManagerBox(255, v1, v0, v2);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>> and conformance <> ModifiedContent<A, B>();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v3);
  type metadata accessor for InsettableGroupedListBody();
}

void sub_18711BEDC()
{
  type metadata accessor for InsettableGroupedListBodyRule();
}

uint64_t sub_18711BF30(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsettableGroupedListBodyRule<A, B, C>, a1);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsettableGroupedListBody<A, B>, v1);
  return static View._makeView(view:inputs:)();
}

void static OuterFormListStyle._makeViewList<A>(value:inputs:)()
{
  type metadata accessor for _ListValue();
}

void sub_18711C084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  int v16;
  va_list va;

  va_start(va, a15);
  type metadata accessor for _GraphValue();
  v16 = _GraphValue.value.getter();
  *(_QWORD *)(v15 - 144) = 1;
  *(_QWORD *)(v15 - 136) = 0;
  *(_QWORD *)(v15 - 128) = 0;
  *(_QWORD *)(v15 - 120) = 0;
  *(_WORD *)(v15 - 112) = 256;
  lazy protocol witness table accessor for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext();
  InsettableGroupedListBodyRule.init(base:insetMode:context:)(v16, v15 - 144, (int *)va);
}

void sub_18711C0E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>>();
  v3 = type metadata accessor for SelectionManagerBox(255, v1, v0, v2);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>> and conformance <> ModifiedContent<A, B>();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v3);
  type metadata accessor for InsettableGroupedListBody();
}

void sub_18711C150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, __int128 a12)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  *(_DWORD *)(v16 - 192) = v12;
  *(_OWORD *)(v16 - 184) = a12;
  *(_QWORD *)(v16 - 168) = v13;
  *(_QWORD *)(v16 - 160) = v14;
  *(_BYTE *)(v16 - 152) = v15;
  *(_BYTE *)(v16 - 151) = a11;
  type metadata accessor for InsettableGroupedListBodyRule();
}

uint64_t sub_18711C1A4(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsettableGroupedListBodyRule<A, B, C>, a1);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsettableGroupedListBody<A, B>, v1);
  return static View._makeViewList(view:inputs:)();
}

uint64_t type metadata accessor for InlineListStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InlineListStyle.Body);
}

unint64_t lazy protocol witness table accessor for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext;
  if (!lazy protocol witness table cache variable for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetGroupedListStyleContext, &type metadata for InsetGroupedListStyleContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext;
  if (!lazy protocol witness table cache variable for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetGroupedListStyleContext, &type metadata for InsetGroupedListStyleContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext);
  }
  return result;
}

void type metadata accessor for StyleContextWriter<InsetGroupedListStyleContext>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StyleContextWriter<InsetGroupedListStyleContext>)
  {
    lazy protocol witness table accessor for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext();
    v0 = type metadata accessor for StyleContextWriter();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<InsetGroupedListStyleContext>);
  }
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<InsetGroupedListStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<InsetGroupedListStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<InsetGroupedListStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for StyleContextWriter<InsetGroupedListStyleContext>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<InsetGroupedListStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

void base witness table accessor for _AttributeBody in InlineListStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t ModifiedContent<>.accessibilitySetValueAction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;

  v8 = lazy protocol witness table accessor for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction();
  return ModifiedContent<>.accessibilityAction<A>(_:label:image:_:)(v8, 0, 0, 0, 0, 0, a1, a2, a4, a3, (uint64_t)&type metadata for AccessibilitySetValueAction, v8);
}

unint64_t lazy protocol witness table accessor for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction;
  if (!lazy protocol witness table cache variable for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilitySetValueAction, &type metadata for AccessibilitySetValueAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction;
  if (!lazy protocol witness table cache variable for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilitySetValueAction, &type metadata for AccessibilitySetValueAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilitySetValueAction()
{
  return &type metadata for AccessibilitySetValueAction;
}

unint64_t instantiation function for generic protocol witness table for AccessibilitySetValueAction(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void WindowVisibilityToggle.init<>(windowID:)()
{
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowVisibilityToggle.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowVisibilityToggle.init(windowID:label:)()
{
  swift_bridgeObjectRelease();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void DefaultWindowVisibilityToggleLabel.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowVisibilityButton.init<>(windowID:)()
{
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowVisibilityButton.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void DefaultWindowVisibilityButtonLabel.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for View.Body : View in WindowVisibilityToggle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in DefaultWindowVisibilityToggleLabel()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in WindowVisibilityButton<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in DefaultWindowVisibilityButtonLabel()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DefaultWindowVisibilityButtonLabel(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 8) >> 4) & 1;
}

uint64_t outlined copy of Environment<DismissWindowAction>.Content(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    return outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
  else
    return swift_retain();
}

uint64_t destroy for WindowVisibilityToggle(uint64_t a1)
{
  swift_bridgeObjectRelease();
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_BYTE *)(a1 + 25));
  return outlined consume of Environment<DismissWindowAction>.Content(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_BYTE *)(a1 + 49));
}

uint64_t outlined consume of Environment<DismissWindowAction>.Content(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    return outlined consume of Binding<NavigationSplitViewColumn>?(a1, a2);
  else
    return swift_release();
}

uint64_t initializeWithCopy for WindowVisibilityToggle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 25);
  v7 = *(unsigned __int8 *)(a2 + 24);
  swift_bridgeObjectRetain();
  outlined copy of Environment<CGFloat?>.Content(v5, v7, v6);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 25) = v6;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  LOBYTE(v7) = *(_BYTE *)(a2 + 49);
  v10 = *(unsigned __int8 *)(a2 + 48);
  outlined copy of Environment<DismissWindowAction>.Content(v8, v9, v10, v7);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 49) = v7;
  return a1;
}

uint64_t assignWithCopy for WindowVisibilityToggle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 25);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<CGFloat?>.Content(v4, v6, v5);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 25);
  *(_QWORD *)(a1 + 16) = v4;
  v9 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 25) = v5;
  outlined consume of Environment<CGFloat?>.Content(v7, v9, v8);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_BYTE *)(a2 + 49);
  v13 = *(unsigned __int8 *)(a2 + 48);
  outlined copy of Environment<DismissWindowAction>.Content(v10, v11, v13, v12);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_BYTE *)(a1 + 49);
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  v17 = *(unsigned __int8 *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v13;
  *(_BYTE *)(a1 + 49) = v12;
  outlined consume of Environment<DismissWindowAction>.Content(v14, v15, v17, v16);
  return a1;
}

__n128 __swift_memcpy50_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for WindowVisibilityToggle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 25);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 25);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v9 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 25) = v6;
  outlined consume of Environment<CGFloat?>.Content(v7, v9, v8);
  v10 = *(_BYTE *)(a2 + 48);
  v11 = *(_BYTE *)(a2 + 49);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_BYTE *)(a1 + 49);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v15 = *(unsigned __int8 *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 49) = v11;
  outlined consume of Environment<DismissWindowAction>.Content(v12, v13, v15, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for WindowVisibilityToggle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 50))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WindowVisibilityToggle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 50) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 50) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for WindowVisibilityToggle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WindowVisibilityToggle);
}

ValueMetadata *type metadata accessor for DefaultWindowVisibilityToggleLabel()
{
  return &type metadata for DefaultWindowVisibilityToggleLabel;
}

_QWORD *initializeBufferWithCopyOfBuffer for WindowVisibilityButton(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for WindowVisibilityButton(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for WindowVisibilityButton(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for WindowVisibilityButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WindowVisibilityButton);
}

ValueMetadata *type metadata accessor for DefaultWindowVisibilityButtonLabel()
{
  return &type metadata for DefaultWindowVisibilityButtonLabel;
}

uint64_t sub_18711C990()
{
  return MEMORY[0x1E0CE7C28];
}

unint64_t lazy protocol witness table accessor for type WindowVisibilityToggle<DefaultWindowVisibilityToggleLabel> and conformance WindowVisibilityToggle<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type WindowVisibilityToggle<DefaultWindowVisibilityToggleLabel> and conformance WindowVisibilityToggle<A>;
  if (!lazy protocol witness table cache variable for type WindowVisibilityToggle<DefaultWindowVisibilityToggleLabel> and conformance WindowVisibilityToggle<A>)
  {
    type metadata accessor for WindowVisibilityToggle<DefaultWindowVisibilityToggleLabel>(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowVisibilityToggle<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowVisibilityToggle<DefaultWindowVisibilityToggleLabel> and conformance WindowVisibilityToggle<A>);
  }
  return result;
}

void type metadata accessor for WindowVisibilityToggle<DefaultWindowVisibilityToggleLabel>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for WindowVisibilityToggle<DefaultWindowVisibilityToggleLabel>)
  {
    v2 = lazy protocol witness table accessor for type DefaultWindowVisibilityToggleLabel and conformance DefaultWindowVisibilityToggleLabel();
    v4 = type metadata accessor for WindowVisibilityToggle(a1, (uint64_t)&type metadata for DefaultWindowVisibilityToggleLabel, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for WindowVisibilityToggle<DefaultWindowVisibilityToggleLabel>);
  }
}

unint64_t lazy protocol witness table accessor for type DefaultWindowVisibilityToggleLabel and conformance DefaultWindowVisibilityToggleLabel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultWindowVisibilityToggleLabel and conformance DefaultWindowVisibilityToggleLabel;
  if (!lazy protocol witness table cache variable for type DefaultWindowVisibilityToggleLabel and conformance DefaultWindowVisibilityToggleLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultWindowVisibilityToggleLabel, &type metadata for DefaultWindowVisibilityToggleLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultWindowVisibilityToggleLabel and conformance DefaultWindowVisibilityToggleLabel);
  }
  return result;
}

uint64_t Text.speechAlwaysIncludesPunctuation(_:)(char a1)
{
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for SpeechModifier();
  v2 = swift_allocObject();
  *(_BYTE *)(v2 + 16) = a1;
  *(_BYTE *)(v2 + 17) = 2;
  *(_QWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 32) = 769;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  v3 = Text.modified(with:)();
  swift_release();
  return v3;
}

uint64_t Text.speechSpellsOutCharacters(_:)(char a1)
{
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for SpeechModifier();
  v2 = swift_allocObject();
  *(_BYTE *)(v2 + 16) = 2;
  *(_BYTE *)(v2 + 17) = a1;
  *(_QWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 32) = 769;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  v3 = Text.modified(with:)();
  swift_release();
  return v3;
}

uint64_t Text.speechAdjustedPitch(_:)(double a1)
{
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for SpeechModifier();
  v2 = swift_allocObject();
  *(_WORD *)(v2 + 16) = 514;
  *(double *)(v2 + 24) = a1;
  *(_WORD *)(v2 + 32) = 768;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  v3 = Text.modified(with:)();
  swift_release();
  return v3;
}

uint64_t Text.speechAnnouncementsQueued(_:)(char a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1 ^ 1;
  type metadata accessor for SpeechModifier();
  v2 = swift_allocObject();
  *(_WORD *)(v2 + 16) = 514;
  *(_QWORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 32) = 1;
  *(_BYTE *)(v2 + 33) = v1;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  v3 = Text.modified(with:)();
  swift_release();
  return v3;
}

uint64_t View.speechAlwaysIncludesPunctuation(_:)()
{
  return View.speechAlwaysIncludesPunctuation(_:)();
}

{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t sub_18711CD7C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.speechAlwaysIncludesPunctuation.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18711CDB4()
{
  return EnvironmentValues.speechAlwaysIncludesPunctuation.setter();
}

uint64_t View.speechSpellsOutCharacters(_:)()
{
  return View.speechAlwaysIncludesPunctuation(_:)();
}

uint64_t sub_18711CE50@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.speechSpellsOutCharacters.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18711CE88()
{
  return EnvironmentValues.speechSpellsOutCharacters.setter();
}

uint64_t View.speechAdjustedPitch(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t sub_18711CF28@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.speechAdjustedPitch.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_18711CF68()
{
  return EnvironmentValues.speechAdjustedPitch.setter();
}

uint64_t View.speechAnnouncementsQueued(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t sub_18711D008@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.speechAnnouncementsPriority.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_18711D048()
{
  return EnvironmentValues.speechAnnouncementsPriority.setter();
}

uint64_t Text.speechAnnouncementsPriority(_:)(char *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  type metadata accessor for SpeechModifier();
  v2 = swift_allocObject();
  *(_WORD *)(v2 + 16) = 514;
  *(_QWORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 32) = 1;
  *(_BYTE *)(v2 + 33) = v1;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  v3 = Text.modified(with:)();
  swift_release();
  return v3;
}

uint64_t View.speechAnnouncementsPriority(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t sub_18711D1A4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11ColorSchemeOSgGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool?>, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E0DEAFA0], (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t sub_18711D1C8(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11ColorSchemeOSgGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Double?>, &lazy cache variable for type metadata for Double?, MEMORY[0x1E0DEB070], &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Double?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t sub_18711D1EC(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11ColorSchemeOSgGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AccessibilityAnnouncementPriority?>, &lazy cache variable for type metadata for AccessibilityAnnouncementPriority?, MEMORY[0x1E0CE66E8], (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AccessibilityAnnouncementPriority?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t WheelPicker_Phone.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;

  v4 = v3;
  v30 = a3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UIKitWheelPicker(0, v6, *(_QWORD *)(v10 + 24), v11);
  v28 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v28 - v14;
  type metadata accessor for _EnvironmentKeyWritingModifier<ColorScheme?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?);
  v16 = type metadata accessor for ModifiedContent();
  v29 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v28 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v4, v6, v18);
  v21 = (uint64_t *)(v4 + *(int *)(a1 + 36));
  v22 = *v21;
  v23 = v21[1];
  v24 = v21[2];
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v9, v6);
  v25 = &v15[*(int *)(v12 + 36)];
  *(_QWORD *)v25 = v22;
  *((_QWORD *)v25 + 1) = v23;
  *((_QWORD *)v25 + 2) = v24;
  swift_getKeyPath();
  LOBYTE(v32) = 4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v32 = static Font.system(size:weight:design:)();
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v12);
  static Alignment.center.getter();
  v26 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ColorScheme?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?);
  v31[0] = &protocol witness table for UIKitWheelPicker<A>;
  v31[1] = v26;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v16, v31);
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v20, v16);
}

uint64_t key path getter for EnvironmentValues.font : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomWheelPickerRow.cell.getter in conformance WheelPickerRow<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t protocol witness for CustomWheelPickerRow.isDisabled.getter in conformance WheelPickerRow<A, B>(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 56));
}

id UIKitWheelPicker.makeCoordinator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for CoreCoordinator(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v6 = (uint64_t *)(v4 + *(int *)(a1 + 36));
  v7 = *v6;
  v8 = v6[1];
  v9 = v6[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return specialized CoreCoordinator.__allocating_init(dataSource:selection:)(v4, v7, v8, v9);
}

uint64_t UIKitWheelPicker.updateUIView(_:context:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  double v41;
  id v42;
  double v43;
  double v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t AssociatedConformanceWitness;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  char v61[16];
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;

  v59 = a1;
  v70 = *MEMORY[0x1E0C80C00];
  v52 = a3;
  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  v57 = v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v54 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v9 = (char *)&v45 - v8;
  v10 = swift_checkMetadataState();
  v53 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v45 - v12;
  v14 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = *(_QWORD *)a2;
  v50 = *(_QWORD *)(a2 + 8);
  v49 = *(_QWORD *)(a2 + 16);
  v48 = *(_QWORD *)(a2 + 24);
  v47 = *(unsigned __int8 *)(a2 + 32);
  v19 = *(_QWORD **)(a2 + 40);
  v20 = *MEMORY[0x1E0DEEDD8] & *v19;
  v21 = (char *)v19 + *(_QWORD *)(v20 + 0x60);
  swift_beginAccess();
  (*(void (**)(char *, char *))(*(_QWORD *)(*(_QWORD *)(v20 + 80) - 8) + 16))(v18, v21);
  v22 = v58;
  v62 = v5;
  v63 = v58;
  v64 = 3;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v18, (uint64_t)_s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0, (uint64_t)v61, v5, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v23);
  v46 = v65;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v5);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v25 = v52;
  v56 = v5;
  v24(v18, v22, v5);
  CoreCoordinator.dataSource.setter((uint64_t)v18);
  v26 = (uint64_t *)(v22 + *(int *)(v25 + 36));
  v28 = *v26;
  v27 = v26[1];
  v29 = v26[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  CoreCoordinator.selection.setter(v28, v27, v29);
  if ((v46 & 1) == 0)
    objc_msgSend(v59, sel_reloadAllComponents);
  v65 = v51;
  *(_QWORD *)&v66 = v50;
  *((_QWORD *)&v66 + 1) = v49;
  v67 = v48;
  v68 = v47;
  v69 = v19;
  v30 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitWheelPicker<A>, v25);
  type metadata accessor for UIViewRepresentableContext(0, v25, v30, v31);
  specialized ReferenceFileDocumentConfiguration.document.getter();
  swift_retain();
  v32 = Transaction.animation.getter();
  swift_release();
  if (v32)
    swift_release();
  v33 = (unint64_t)objc_msgSend(v59, sel_numberOfComponents);
  if ((v33 & 0x8000000000000000) != 0)
    __break(1u);
  v34 = v33;
  v52 = v32;
  if (v33)
  {
    v35 = 0;
    v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 40);
    do
    {
      v37 = objc_msgSend(v59, sel_selectedRowInComponent_, v35);
      v36(v35, v56, v57);
      v65 = *v26;
      v66 = *(_OWORD *)(v26 + 1);
      type metadata accessor for Array();
      v38 = type metadata accessor for Binding();
      MEMORY[0x18D75B9C8](&v60, v38);
      Array.subscript.getter();
      swift_bridgeObjectRelease();
      v39 = Collection.offset(of:)();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v9, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v13, v10);
      if (v37 != (id)v39)
        objc_msgSend(v59, sel_selectRow_inComponent_animated_, v39, v35, v52 != 0);
      ++v35;
    }
    while (v34 != v35);
  }
  LODWORD(v65) = -1;
  result = isLinkedOnOrAfter(_:)();
  if ((result & 1) == 0)
  {
    lazy protocol witness table accessor for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature();
    result = static UserDefaultKeyedFeature.isEnabled.getter();
    if ((result & 1) == 0)
    {
      LODWORD(v41) = 1132068864;
      v42 = v59;
      objc_msgSend(v59, sel_setContentHuggingPriority_forAxis_, 0, v41);
      LODWORD(v43) = 1112014848;
      objc_msgSend(v42, sel_setContentCompressionResistancePriority_forAxis_, 0, v43);
      LODWORD(v44) = 1112014848;
      return (uint64_t)objc_msgSend(v42, sel_setContentCompressionResistancePriority_forAxis_, 1, v44);
    }
  }
  return result;
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance UIKitWheelPicker<A>(uint64_t a1)
{
  return specialized UIKitWheelPicker.makeUIView(context:)(a1);
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitWheelPicker<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  id result;

  result = UIKitWheelPicker.makeCoordinator()(a1, a2, a3, a4);
  *a5 = result;
  return result;
}

uint64_t type metadata accessor for UIKitPickerView()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for CoreCoordinator()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t CoreCoordinator.selection.getter()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68));
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CoreCoordinator.selection.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x68));
  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t CoreCoordinator.pickerView(_:didSelectRow:inComponent:)(void *a1, char *a2, Swift::Int a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  char *v33;
  void (*v34)(char **, _QWORD);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  char *v50;
  char v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  Swift::Int v64;
  char isClassOrObjCExistentialType;
  uint64_t v66;
  char *v68;
  id v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  Swift::Int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;

  v80 = a2;
  v81 = a3;
  v69 = a1;
  v4 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v3);
  v5 = v4[10];
  v70 = v4[11];
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v73 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v74 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v71 = (char *)&v68 - v9;
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  v77 = v10;
  v78 = v11;
  MEMORY[0x1E0C80A78](v10, v12);
  v68 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v75 = (char *)&v68 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v68 - v19;
  v21 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v68 - v24;
  v26 = swift_checkMetadataState();
  v79 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v68 - v28;
  v30 = v72 + v4[12];
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v25, v30, v5);
  (*(void (**)(Swift::Int, uint64_t, uint64_t))(v70 + 40))(v81, v5, v70);
  v31 = *(void (**)(char *, uint64_t))(v21 + 8);
  v32 = v26;
  v33 = v20;
  v31(v25, v5);
  Collection.index(atOffset:)();
  v76 = AssociatedConformanceWitness;
  v34 = (void (*)(char **, _QWORD))dispatch thunk of Collection.subscript.read();
  v36 = v73;
  v35 = v74;
  v37 = v71;
  (*(void (**)(char *))(v73 + 16))(v71);
  v34(&v84, 0);
  v38 = swift_getAssociatedConformanceWitness();
  LOBYTE(v30) = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 56))(v35, v38);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v35);
  v39 = CoreCoordinator.selection.getter();
  if ((v30 & 1) != 0)
  {
    v84 = (char *)v39;
    v85 = v40;
    v86 = v41;
    v42 = v77;
    type metadata accessor for Array();
    v43 = type metadata accessor for Binding();
    MEMORY[0x18D75B9C8](&v83, v43);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v44 = v75;
    Array.subscript.getter();
    swift_bridgeObjectRelease();
    v45 = Collection.offset(of:)();
    v46 = *(void (**)(char *, uint64_t))(v78 + 8);
    v46(v44, v42);
    if ((char *)v45 != v80)
      objc_msgSend(v69, sel_selectRow_inComponent_animated_, v45, v81, 0);
    v46(v33, v42);
    v47 = *(uint64_t (**)(char *, uint64_t))(v79 + 8);
    v48 = v29;
    goto LABEL_7;
  }
  v80 = v29;
  v84 = (char *)v39;
  v85 = v40;
  v86 = v41;
  v49 = v77;
  v73 = type metadata accessor for Array();
  v74 = type metadata accessor for Binding();
  MEMORY[0x18D75B9C8](&v83);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v50 = v75;
  Array.subscript.getter();
  swift_bridgeObjectRelease();
  swift_getAssociatedConformanceWitness();
  v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  v52 = v78;
  v53 = *(void (**)(char *, uint64_t))(v78 + 8);
  v53(v50, v49);
  v54 = v33;
  if ((v51 & 1) != 0)
  {
    v53(v33, v49);
    v48 = v80;
    v47 = *(uint64_t (**)(char *, uint64_t))(v79 + 8);
LABEL_7:
    v55 = v32;
    return v47(v48, v55);
  }
  v56 = CoreCoordinator.selection.getter();
  v75 = (char *)v56;
  v76 = v32;
  v58 = v57;
  v60 = v59;
  v61 = v68;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v68, v54, v49);
  v84 = (char *)v56;
  v85 = v58;
  v86 = v60;
  MEMORY[0x18D75B9C8](&v83, v74);
  v62 = v73;
  Array._makeMutableAndUnique()();
  v63 = v83;
  v64 = v81;
  Array._checkSubscript_mutating(_:)(v81);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  v66 = v63 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0)
    v66 = v63;
  (*(void (**)(unint64_t, char *, uint64_t))(v52 + 40))(v66+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(_QWORD *)(v52 + 72) * v64, v61, v49);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v62);
  v84 = v75;
  v85 = v58;
  v86 = v60;
  v82 = v83;
  specialized Binding.wrappedValue.setter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v53(v54, v49);
  v48 = v80;
  v47 = *(uint64_t (**)(char *, uint64_t))(v79 + 8);
  v55 = v76;
  return v47(v48, v55);
}

void @objc CoreCoordinator.pickerView(_:didSelectRow:inComponent:)(void *a1, uint64_t a2, void *a3, char *a4, Swift::Int a5)
{
  id v8;
  id v9;

  v8 = a3;
  v9 = a1;
  CoreCoordinator.pickerView(_:didSelectRow:inComponent:)(v8, a4, a5);

}

uint64_t @objc CoreCoordinator.numberOfComponents(in:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a3;
  v5 = a1;
  v7 = specialized CoreCoordinator.numberOfComponents(in:)((uint64_t)v5, v6);

  return v7;
}

uint64_t @objc CoreCoordinator.pickerView(_:numberOfRowsInComponent:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v6 = a3;
  v7 = a1;
  v9 = specialized CoreCoordinator.pickerView(_:numberOfRowsInComponent:)(a4, v8);

  return v9;
}

double @objc CoreCoordinator.pickerView(_:rowHeightForComponent:)()
{
  return 30.0;
}

uint64_t closure #1 in CoreCoordinator.pickerView(_:viewForRow:forComponent:reusing:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(_BYTE *, _QWORD);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[32];

  v28 = a1;
  v29 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v3);
  v5 = (char *)&v24 - v4;
  v6 = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(v6 - 8);
  v25 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v24 - v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v24 - v17;
  swift_checkMetadataState();
  Collection.index(atOffset:)();
  v19 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
  v20 = v27;
  (*(void (**)(char *))(v27 + 16))(v5);
  v19(v30, 0);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v25);
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, AssociatedTypeWitness);
  v21 = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v14, v11, v21);
  v22 = *(void (**)(char *, uint64_t))(v26 + 8);
  v22(v14, v11);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v18, v11, v29);
  return ((uint64_t (*)(char *, uint64_t))v22)(v18, v11);
}

id @objc CoreCoordinator.pickerView(_:viewForRow:forComponent:reusing:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v10;
  id v11;
  id v12;
  void *v13;

  v10 = a3;
  v11 = a6;
  v12 = a1;
  v13 = (void *)specialized CoreCoordinator.pickerView(_:viewForRow:forComponent:reusing:)(a4, a5, a6);

  return v13;
}

void @objc CoreCoordinator.init()()
{
  specialized CoreCoordinator.init()();
}

uint64_t CoreCoordinator.__ivar_destroyer()
{
  char *v0;

  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0) + 0x50) - 8) + 8))(&v0[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0) + 0x60)]);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

id CoreCoordinator.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for CoreCoordinator(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t @objc CoreCoordinator.__ivar_destroyer(char *a1)
{
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a1) + 0x50) - 8) + 8))(&a1[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a1) + 0x60)]);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for CoreCoordinator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoreCoordinator);
}

uint64_t RootCellView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v25 = a3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _EnvironmentKeyWritingModifier<ColorScheme?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?);
  v9 = type metadata accessor for ModifiedContent();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v24 - v17;
  (*(void (**)(char *, _BYTE *, uint64_t, double))(v6 + 16))(v8, &v3[*(int *)(a1 + 36)], v5, v16);
  if (*v3 == 1)
    static Color.tertiary.getter();
  else
    static Color.primary.getter();
  v19 = *(_QWORD *)(a1 + 24);
  View.foregroundColor(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v20 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ColorScheme?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?);
  v26[0] = v19;
  v26[1] = v20;
  v21 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v26);
  static ViewBuilder.buildExpression<A>(_:)(v13, v9, v21);
  v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v13, v9);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v18, v9, v25);
  return ((uint64_t (*)(char *, uint64_t))v22)(v18, v9);
}

id specialized CoreCoordinator.init(dataSource:selection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  objc_class *v13;
  objc_super v15;

  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v9 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v4);
  v10 = v9[10];
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(&v4[v9[12]], a1, v10);
  v11 = &v4[*(_QWORD *)((*v8 & *(_QWORD *)v4) + 0x68)];
  *(_QWORD *)v11 = a2;
  *((_QWORD *)v11 + 1) = a3;
  *((_QWORD *)v11 + 2) = a4;
  v13 = (objc_class *)type metadata accessor for CoreCoordinator(0, v10, v9[11], v12);
  v15.receiver = v4;
  v15.super_class = v13;
  return objc_msgSendSuper2(&v15, sel_init);
}

id specialized CoreCoordinator.__allocating_init(dataSource:selection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v9;

  v9 = objc_allocWithZone((Class)type metadata accessor for CoreCoordinator(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), a4));
  return specialized CoreCoordinator.init(dataSource:selection:)(a1, a2, a3, a4);
}

id specialized UIKitWheelPicker.makeUIView(context:)(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitPickerView()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v2, sel_setDelegate_, v1);
  return v2;
}

uint64_t specialized CoreCoordinator.numberOfComponents(in:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v2);
  v4 = v3[10];
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v11 - v6;
  v8 = (char *)v2 + v3[12];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v8, v4);
  v9 = (*(uint64_t (**)(uint64_t))(v3[11] + 32))(v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9;
}

uint64_t specialized CoreCoordinator.pickerView(_:numberOfRowsInComponent:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v4 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v2);
  v5 = v4[10];
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v18 - v7;
  v9 = v4[11];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v14 = (char *)&v18 - v13;
  v15 = (char *)v2 + v4[12];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v15, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(a1, v5, v9);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_getAssociatedConformanceWitness();
  v16 = dispatch thunk of Collection.count.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  return v16;
}

uint64_t specialized CoreCoordinator.pickerView(_:viewForRow:forComponent:reusing:)(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  _BYTE *v35;
  char v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  uint64_t AssociatedConformanceWitness;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  char v63[32];

  v61 = a3;
  v58 = a2;
  v59 = a1;
  v4 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v3);
  v6 = v4[10];
  v5 = v4[11];
  swift_getAssociatedTypeWitness();
  v62 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v56 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v54 = (char *)&v49 - v9;
  v55 = swift_getAssociatedTypeWitness();
  v52 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55, v10);
  v12 = (char *)&v49 - v11;
  v13 = swift_getAssociatedConformanceWitness();
  v14 = swift_getAssociatedTypeWitness();
  v15 = swift_getAssociatedConformanceWitness();
  v17 = type metadata accessor for RootCellView(0, v14, v15, v16);
  v60 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v50 = (char *)&v49 - v19;
  v20 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v49 - v23;
  v25 = swift_checkMetadataState();
  v57 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v49 - v27;
  v29 = v53 + v4[12];
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v24, v29, v6);
  (*(void (**)(uint64_t, uint64_t))(v62 + 40))(v58, v6);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v24, v6);
  v30 = v59;
  Collection.index(atOffset:)();
  v58 = v25;
  v31 = dispatch thunk of Collection.subscript.read();
  v32 = v56;
  v33 = v54;
  (*(void (**)(char *))(v56 + 16))(v54);
  ((void (*)(char *, _QWORD))v31)(v63, 0);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v55);
  LOBYTE(v31) = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 56))(AssociatedTypeWitness, v13);
  v34 = *(void (**)(char *, uint64_t))(v32 + 8);
  v35 = v50;
  v34(v33, AssociatedTypeWitness);
  v36 = v31 & 1;
  v37 = v61;
  *v35 = v36;
  closure #1 in CoreCoordinator.pickerView(_:viewForRow:forComponent:reusing:)(v30, (uint64_t)&v35[*(int *)(v17 + 36)]);
  if (!v37
    || (v38 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RootCellView<A>, v17),
        type metadata accessor for _UIHostingView(0, v17, v38, v39),
        (v40 = swift_dynamicCastClass()) == 0))
  {
    v43 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RootCellView<A>, v17);
    type metadata accessor for _UIHostingView(0, v17, v43, v44);
    specialized _UIHostingView.__allocating_init(rootView:)((uint64_t)v35, v45, v46, v47);
  }
  v41 = v40;
  v42 = v37;
  specialized _UIHostingView.rootView.setter((uint64_t)v35);
  (*(void (**)(_BYTE *, uint64_t))(v60 + 8))(v35, v17);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v28, v58);
  return v41;
}

void specialized CoreCoordinator.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for RootCellView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RootCellView);
}

unint64_t lazy protocol witness table accessor for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature;
  if (!lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableUnifiedLayoutFeature, &type metadata for EnableUnifiedLayoutFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature;
  if (!lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableUnifiedLayoutFeature, &type metadata for EnableUnifiedLayoutFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature;
  if (!lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableUnifiedLayoutFeature, &type metadata for EnableUnifiedLayoutFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature;
  if (!lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableUnifiedLayoutFeature, &type metadata for EnableUnifiedLayoutFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature;
  if (!lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableUnifiedLayoutFeature, &type metadata for EnableUnifiedLayoutFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature;
  if (!lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableUnifiedLayoutFeature, &type metadata for EnableUnifiedLayoutFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature;
  if (!lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableUnifiedLayoutFeature, &type metadata for EnableUnifiedLayoutFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature;
  if (!lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableUnifiedLayoutFeature, &type metadata for EnableUnifiedLayoutFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature);
  }
  return result;
}

uint64_t type metadata completion function for RootCellView()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RootCellView(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 1) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)&a1[v9];
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9])
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFE)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v7 + 1] & ~v7);
      v15 = *a1;
      v16 = v15 >= 2;
      v17 = (v15 + 2147483646) & 0x7FFFFFFF;
      if (v16)
        return (v17 + 1);
      else
        return 0;
    }
  }
  v11 = a1[v9];
  if (!a1[v9])
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18711F514 + 4 * byte_187C0B280[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for RootCellView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for WheelPicker_Phone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WheelPicker_Phone);
}

uint64_t associated type witness table accessor for View.Body : View in RootCellView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in WheelPicker_Phone<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for UIKitWheelPicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIKitWheelPicker);
}

uint64_t sub_18711F820@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18711F858()
{
  swift_retain();
  return EnvironmentValues.font.setter();
}

uint64_t type metadata completion function for WheelPickerRow()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WheelPickerRow(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80));
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || v10 + (v9 & (unint64_t)~v8) + 1 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  else
  {
    v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v16 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v15, v16, v5);
    *(_BYTE *)((((unint64_t)v4 + v9) & v15) + v10) = *(_BYTE *)(v16 + v10);
  }
  return v4;
}

uint64_t initializeWithCopy for WheelPickerRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  *(_BYTE *)(v11 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v12 + *(_QWORD *)(v8 + 64));
  return a1;
}

uint64_t assignWithCopy for WheelPickerRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  *(_BYTE *)(v11 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v12 + *(_QWORD *)(v8 + 64));
  return a1;
}

uint64_t initializeWithTake for WheelPickerRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  *(_BYTE *)(v11 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v12 + *(_QWORD *)(v8 + 64));
  return a1;
}

uint64_t assignWithTake for WheelPickerRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  *(_BYTE *)(v11 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v12 + *(_QWORD *)(v8 + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for WheelPickerRow(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v20;
  unsigned int v21;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0xFE)
    v8 = 254;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = *(_QWORD *)(v6 + 64);
  v12 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_25;
  v13 = v11 + (v10 & ~v9) + 1;
  v14 = 8 * v13;
  if (v13 > 3)
    goto LABEL_9;
  v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
  if (HIWORD(v16))
  {
    v15 = *(_DWORD *)(a1 + v13);
    if (v15)
      goto LABEL_16;
  }
  else
  {
    if (v16 <= 0xFF)
    {
      if (v16 < 2)
        goto LABEL_25;
LABEL_9:
      v15 = *(unsigned __int8 *)(a1 + v13);
      if (!*(_BYTE *)(a1 + v13))
        goto LABEL_25;
LABEL_16:
      v17 = (v15 - 1) << v14;
      if (v13 > 3)
        v17 = 0;
      if ((_DWORD)v11 + (v10 & ~(_DWORD)v9) == -1)
        return v8 + v17 + 1;
      if (v13 <= 3)
        v18 = v11 + (v10 & ~(_DWORD)v9) + 1;
      else
        v18 = 4;
      return ((uint64_t (*)(void))((char *)&loc_18711FCE4 + 4 * byte_187C0B28E[v18 - 1]))();
    }
    v15 = *(unsigned __int16 *)(a1 + v13);
    if (*(_WORD *)(a1 + v13))
      goto LABEL_16;
  }
LABEL_25:
  if (v5 == v8)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v20 = (v10 + a1) & ~v9;
  if (v7 == v8)
    return (*(uint64_t (**)(uint64_t))(v6 + 48))(v20);
  v21 = *(unsigned __int8 *)(v20 + v11);
  if (v21 < 2)
    return 0;
  return ((v21 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for WheelPickerRow(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE)
    v8 = 254;
  else
    v8 = v7;
  v9 = *(_QWORD *)(v6 + 64)
     + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + 1;
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if (*(_DWORD *)(v6 + 64)
         + ((*(_DWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~*(unsigned __int8 *)(v6 + 80)) != -1)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X0 }
}

void type metadata accessor for WheelPickerRow()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata completion function for WheelPicker_Phone()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WheelPicker_Phone(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v10[1] = v11[1];
    v10[2] = v11[2];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for WheelPicker_Phone(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WheelPicker_Phone(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WheelPicker_Phone(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_retain();
  swift_release();
  v7[1] = v8[1];
  swift_retain();
  swift_release();
  v7[2] = v8[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for WheelPicker_Phone(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_QWORD *)(v7 + 16) = v9;
  return a1;
}

uint64_t assignWithTake for WheelPicker_Phone(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_release();
  v7[1] = v8[1];
  swift_release();
  v7[2] = v8[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WheelPicker_Phone(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 24) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1871203C8 + 4 * byte_187C0B29C[v10]))();
  }
}

void storeEnumTagSinglePayload for WheelPicker_Phone(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFE8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_187120540()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1871205BCLL);
}

void sub_187120548(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187120550);
  JUMPOUT(0x1871205BCLL);
}

void sub_187120594()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1871205BCLL);
}

void sub_18712059C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1871205BCLL);
}

uint64_t sub_1871205A4(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x1871205B0);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x1871205BCLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t sub_1871205D4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[2];

  type metadata accessor for UIKitWheelPicker(255, *a1, a1[1], a4);
  type metadata accessor for _EnvironmentKeyWritingModifier<ColorScheme?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?);
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for ModifiedContent();
  v9[0] = &protocol witness table for UIKitWheelPicker<A>;
  v9[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ColorScheme?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?);
  v6 = MEMORY[0x1E0CE2E70];
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v9);
  v8[1] = MEMORY[0x1E0CE35E0];
  return MEMORY[0x18D75FFDC](v6, v5, v8);
}

uint64_t sub_1871206C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<ColorScheme?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ColorScheme?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo16UIOpenURLContextCG_10Foundation3URLVs5NeverOTg50245_s7SwiftUI16AppSceneDelegateC04makeD10HostWindow33_4475FD12FD59DEBA453321BD91F6EA04LL011restorationD6ItemID0O4Data17connectionOptions11urlContexts4role06windowD08delegateSo8UIWindowCAA0dQ0OSg_SDys11AnyHashableVypGSo017UISceneConnectionT0CShySo16dE131CGzSo18UISceneSessionRoleaSo0zD0CAA013UIHostingViewE0_ptF10Foundation3URLVAXcfu2_33_7b38412a791237ac1c9a4b50e4b05c7bAXA5_Tf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unsigned __int8 v10;
  char v11;
  uint64_t v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  unsigned __int8 v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(char *, _QWORD);
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v37 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37, v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
    v7 = __CocoaSet.count.getter();
  else
    v7 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    v42 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
    if (v6)
    {
      result = __CocoaSet.startIndex.getter();
      v10 = 1;
    }
    else
    {
      result = specialized _NativeSet.startIndex.getter(a1);
      v10 = v11 & 1;
    }
    v39 = result;
    v40 = v9;
    v41 = v10;
    if (v7 < 0)
    {
      __break(1u);
LABEL_25:
      __break(1u);
    }
    else
    {
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0)
        v12 = a1;
      v35 = v2;
      v36 = v12;
      v13 = &selRef_setSensitive_;
      v34 = a1 & 0xC000000000000001;
      do
      {
        while (1)
        {
          specialized Set.subscript.getter(v39, v40, v41, a1);
          v27 = v26;
          v28 = objc_msgSend(v26, v13[23]);
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          v29 = v42;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v29 + 16) + 1, 1);
            v29 = v42;
          }
          v31 = *(_QWORD *)(v29 + 16);
          v30 = *(_QWORD *)(v29 + 24);
          if (v31 >= v30 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
            v29 = v42;
          }
          *(_QWORD *)(v29 + 16) = v31 + 1;
          result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(v29+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v31, v5, v37);
          v42 = v29;
          if (v6)
            break;
          v14 = v39;
          v15 = v40;
          v16 = v41;
          v17 = specialized _NativeSet.index(after:)(v39, v40, v41, a1);
          v18 = v5;
          v20 = v19;
          v21 = a1;
          v23 = v22;
          v24 = v16;
          v13 = &selRef_setSensitive_;
          outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v14, v15, v24);
          v39 = v17;
          v40 = v20;
          v5 = v18;
          v25 = v23 & 1;
          a1 = v21;
          v6 = v34;
          v2 = v35;
          v41 = v25;
          if (!--v7)
            goto LABEL_22;
        }
        if ((v41 & 1) == 0)
          goto LABEL_25;
        if (__CocoaSet.Index.handleBitPattern.getter())
          swift_isUniquelyReferenced_nonNull_native();
        type metadata accessor for Set<UIOpenURLContext>.Index();
        v32 = (void (*)(char *, _QWORD))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v32(v38, 0);
        --v7;
      }
      while (v7);
LABEL_22:
      outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v39, v40, v41);
      return v42;
    }
  }
  return result;
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v1 = a1;
  v24 = MEMORY[0x1E0DEE9D8];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScene);
    lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UIScene and conformance NSObject, &lazy cache variable for type metadata for UIScene);
    Set.Iterator.init(_cocoa:)();
    v1 = v19;
    v17 = v20;
    v3 = v21;
    v2 = v22;
    v4 = v23;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v17 = a1 + 56;
    v3 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v2 = 0;
  }
  v8 = (unint64_t)(v3 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_39;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScene);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v12 = v18;
    swift_unknownObjectRelease();
    v11 = v2;
    v9 = v4;
    if (!v18)
      goto LABEL_39;
LABEL_33:
    if (objc_msgSend(v12, sel_delegate))
    {
      type metadata accessor for AppSceneDelegate();
      v16 = swift_dynamicCastClass();

      if (v16)
      {
        MEMORY[0x18D75CF58]();
        if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    else
    {

    }
    v2 = v11;
    v4 = v9;
  }
  if (v4)
  {
    v9 = (v4 - 1) & v4;
    v10 = __clz(__rbit64(v4)) | (v2 << 6);
    v11 = v2;
LABEL_32:
    v12 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    if (!v12)
      goto LABEL_39;
    goto LABEL_33;
  }
  v13 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v13 >= v8)
      goto LABEL_39;
    v14 = *(_QWORD *)(v17 + 8 * v13);
    v11 = v2 + 1;
    if (!v14)
    {
      v11 = v2 + 2;
      if (v2 + 2 >= v8)
        goto LABEL_39;
      v14 = *(_QWORD *)(v17 + 8 * v11);
      if (!v14)
      {
        v11 = v2 + 3;
        if (v2 + 3 >= v8)
          goto LABEL_39;
        v14 = *(_QWORD *)(v17 + 8 * v11);
        if (!v14)
        {
          v11 = v2 + 4;
          if (v2 + 4 >= v8)
            goto LABEL_39;
          v14 = *(_QWORD *)(v17 + 8 * v11);
          if (!v14)
          {
            v11 = v2 + 5;
            if (v2 + 5 >= v8)
              goto LABEL_39;
            v14 = *(_QWORD *)(v17 + 8 * v11);
            if (!v14)
            {
              v15 = v2 + 6;
              while (v8 != v15)
              {
                v14 = *(_QWORD *)(v17 + 8 * v15++);
                if (v14)
                {
                  v11 = v15 - 1;
                  goto LABEL_31;
                }
              }
LABEL_39:
              outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v9 = (v14 - 1) & v14;
    v10 = __clz(__rbit64(v14)) + (v11 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneSessionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneSessionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneSessionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneSessionKey>, (uint64_t)&unk_1E1ABCAC8, (uint64_t)&protocol witness table for SceneSessionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneSessionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t closure #1 in AppDelegate.application(_:configurationForConnecting:options:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  if (static AppGraph.shared)
  {
    if (*(_DWORD *)(static AppGraph.shared + 204) == *MEMORY[0x1E0CFED28])
    {
      result = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      AGGraphGetValue();
      result = swift_bridgeObjectRetain();
    }
  }
  else
  {
    result = 0;
  }
  *a1 = result;
  return result;
}

uint64_t AppDelegate.buildMenu(with:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  void *v5;
  id v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t Value;
  uint64_t v17;
  char v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  id v24;
  void *v25;
  char *v26;
  void *v27;
  id v29;
  __int128 v30;

  v2 = v1;
  MEMORY[0x18D75B908]();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuSystem);
  v4 = objc_msgSend(a1, sel_system);
  v5 = (void *)objc_opt_self();
  v6 = objc_msgSend(v5, sel_mainSystem);
  v7 = static NSObject.== infix(_:_:)();

  if ((v7 & 1) == 0 || !static AppGraph.shared)
    return static Update.end()();
  if (*(_DWORD *)(static AppGraph.shared + 232) == *MEMORY[0x1E0CFED28])
  {
    v8 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v8 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  v9 = OBJC_IVAR____TtC7SwiftUI11AppDelegate_mainMenuController;
  v10 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI11AppDelegate_mainMenuController);
  if (v10)
  {
    v11 = *(char **)(v2 + OBJC_IVAR____TtC7SwiftUI11AppDelegate_mainMenuController);
  }
  else
  {
    v12 = objc_allocWithZone((Class)type metadata accessor for UIKitMainMenuController());
    v13 = swift_bridgeObjectRetain();
    v11 = (char *)UIKitMainMenuController.init(commandsList:)(v13);
    if (!static AppGraph.shared)
    {
      v29 = 0;
      goto LABEL_10;
    }
  }
  v14 = v10;
  swift_retain();
  GraphHost.environment.getter();
  EnvironmentValues.configureForRoot()();
  *(_OWORD *)&v11[OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_environment] = v30;
  swift_release();
  swift_release();
  v15 = objc_msgSend(v5, sel_mainSystem);
  objc_msgSend(v15, sel_setNeedsRebuild);

  Value = AGGraphGetValue();
  v17 = *(_QWORD *)Value;
  v18 = *(_BYTE *)(Value + 8);
  v19 = *(_DWORD *)(Value + 12);
  swift_retain();
  swift_release();
  v20 = &v11[OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_focusedValues];
  *(_QWORD *)v20 = v17;
  v20[8] = v18;
  *((_DWORD *)v20 + 3) = v19;
  swift_release();
LABEL_10:
  v21 = *(_QWORD *)&v11[OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_commandsList];
  *(_QWORD *)&v11[OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_commandsList] = v8;
  v22 = swift_bridgeObjectRetain();
  v23 = specialized static CommandsList.== infix(_:_:)(v22, v21);
  swift_bridgeObjectRelease();
  if ((v23 & 1) != 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = objc_msgSend(v5, sel_mainSystem);
    objc_msgSend(v24, sel_setNeedsRebuild);
    swift_bridgeObjectRelease();

  }
  UIKitMainMenuController.buildMenu(with:)(a1);
  v25 = *(void **)(v2 + v9);
  *(_QWORD *)(v2 + v9) = v11;
  v26 = v11;

  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI11AppDelegate_fallbackDelegate))
  {
    objc_opt_self();
    v27 = (void *)swift_dynamicCastObjCClass();
    if (v27)
      swift_unknownObjectRetain();
    objc_msgSend(v27, sel_buildMenuWithBuilder_, a1);

  }
  return static Update.end()();
}

Swift::Void __swiftcall AppDelegate.validate(_:)(UICommand *a1)
{
  char *v1;
  void *v3;
  void *v4;
  objc_super v5;

  v3 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUI11AppDelegate_mainMenuController];
  if (v3)
  {
    objc_msgSend(v3, sel_validateCommand_, a1);
  }
  else
  {
    v5.receiver = v1;
    v5.super_class = (Class)swift_getObjectType();
    -[UICommand validateCommand:](&v5, sel_validateCommand_, a1);
  }
  if (*(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI11AppDelegate_fallbackDelegate])
  {
    objc_opt_self();
    v4 = (void *)swift_dynamicCastObjCClass();
    if (v4)
      swift_unknownObjectRetain();
    objc_msgSend(v4, sel_validateCommand_, a1);

  }
}

id AppDelegate.canPerformAction(_:withSender:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t ObjectType;
  void *v6;
  id v7;
  char v8;
  objc_class *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  objc_super v19;
  _QWORD v20[3];
  uint64_t v21;

  ObjectType = swift_getObjectType();
  v6 = *(void **)&v2[OBJC_IVAR____TtC7SwiftUI11AppDelegate_mainMenuController];
  if (v6)
  {
    v7 = v6;
    v8 = UIKitMainMenuController.canPerformAction(_:withSender:)(a1, a2);

    return (id)(v8 & 1);
  }
  else
  {
    v10 = (objc_class *)ObjectType;
    outlined init with copy of SwiftUIAnySortComparator?(a2, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
    v11 = v21;
    if (v21)
    {
      v12 = __swift_project_boxed_opaque_existential_1(v20, v21);
      v13 = *(_QWORD *)(v11 - 8);
      v14 = MEMORY[0x1E0C80A78](v12, v12);
      v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v13 + 16))(v16, v14);
      v17 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v11);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    }
    else
    {
      v17 = 0;
    }
    v19.receiver = v2;
    v19.super_class = v10;
    v18 = objc_msgSendSuper2(&v19, sel_canPerformAction_withSender_, a1, v17);
    swift_unknownObjectRelease();
    return v18;
  }
}

Swift::Bool __swiftcall AppDelegate.application(_:runTest:options:)(UIApplication *_, Swift::String runTest, Swift::OpaquePointer options)
{
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  NSSet *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::Bool result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  void *v22;
  void *v23;
  void *v24;
  Class isa;
  unsigned __int8 v26;
  Swift::String v27;

  object = runTest._object;
  countAndFlagsBits = runTest._countAndFlagsBits;
  v6 = -[UIApplication connectedScenes](_, sel_connectedScenes);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScene);
  lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UIScene and conformance NSObject, &lazy cache variable for type metadata for UIScene);
  v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Sequence.compactMap<A>(_:)(v7);
  v9 = v8;
  result = swift_bridgeObjectRelease();
  if (v9 >> 62)
  {
LABEL_30:
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_3;
  }
  else
  {
    v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v11)
    {
LABEL_3:
      v12 = 0;
      v13 = v9 & 0xC000000000000001;
      do
      {
        while (2)
        {
          if (v13)
          {
            v14 = (char *)MEMORY[0x18D75E3BC](v12, v9);
          }
          else
          {
            if (v12 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              return result;
            }
            v14 = (char *)*(id *)(v9 + 32 + 8 * v12);
          }
          v15 = v14;
          if (__OFADD__(v12++, 1))
          {
            __break(1u);
            goto LABEL_30;
          }
          v17 = *(_QWORD *)&v14[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge];
          if (v17)
          {
            v18 = *(_QWORD *)(v17 + 88);
            swift_bridgeObjectRetain();
            v19 = *(_QWORD *)(v18 + 16);
            if (v19)
              goto LABEL_11;
          }
          else
          {
            v18 = MEMORY[0x1E0DEE9D8];
            v19 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
            if (v19)
            {
LABEL_11:
              v20 = (_QWORD *)(v18 + 40);
              do
              {
                v21 = *(v20 - 1) == countAndFlagsBits && *v20 == (_QWORD)object;
                if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v27._countAndFlagsBits = countAndFlagsBits;
                  v27._object = object;
                  AppSceneDelegate.runTest(_:options:)(v27, options);

                  return 1;
                }
                v20 += 2;
                --v19;
              }
              while (v19);

              result = swift_bridgeObjectRelease();
              v13 = v9 & 0xC000000000000001;
              if (v12 != v11)
                continue;
              goto LABEL_22;
            }
          }
          break;
        }

        result = swift_bridgeObjectRelease();
      }
      while (v12 != v11);
    }
  }
LABEL_22:
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI11AppDelegate_fallbackDelegate))
    return 0;
  v22 = (void *)swift_dynamicCastObjCProtocolConditional();
  if (!v22)
    return 0;
  v23 = v22;
  if ((objc_msgSend(v22, sel_respondsToSelector_, sel_application_runTest_options_) & 1) == 0)
    return 0;
  swift_unknownObjectRetain_n();
  v24 = (void *)MEMORY[0x18D75CC88](countAndFlagsBits, object);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v26 = objc_msgSend(v23, sel_application_runTest_options_, _, v24, isa);
  swift_unknownObjectRelease_n();

  return v26;
}

uint64_t AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD aBlock[6];

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TaskPriority?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)aBlock - v13;
  v15 = *(void **)(v5 + OBJC_IVAR____TtC7SwiftUI11AppDelegate_fallbackDelegate);
  if (!v15)
    goto LABEL_6;
  if (!objc_msgSend((id)swift_unknownObjectRetain(), sel_respondsToSelector_, sel_application_handleEventsForBackgroundURLSession_completionHandler_))
  {
    swift_unknownObjectRelease();
LABEL_6:
    v18 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v14, 1, 1, v18);
    type metadata accessor for MainActor();
    swift_retain();
    swift_bridgeObjectRetain();
    v19 = static MainActor.shared.getter();
    v20 = (_QWORD *)swift_allocObject();
    v21 = MEMORY[0x1E0DF06E8];
    v20[2] = v19;
    v20[3] = v21;
    v20[4] = a2;
    v20[5] = a3;
    v20[6] = a4;
    v20[7] = a5;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:), (uint64_t)v20);
    return swift_release();
  }
  if ((objc_msgSend(v15, sel_respondsToSelector_, sel_application_handleEventsForBackgroundURLSession_completionHandler_) & 1) != 0)
  {
    swift_unknownObjectRetain();
    v16 = (void *)MEMORY[0x18D75CC88](a2, a3);
    aBlock[4] = a4;
    aBlock[5] = a5;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_43;
    v17 = _Block_copy(aBlock);
    swift_retain();
    objc_msgSend(v15, sel_application_handleEventsForBackgroundURLSession_completionHandler_, a1, v16, v17);
    _Block_release(v17);

    swift_unknownObjectRelease_n();
    return swift_release();
  }
  return swift_unknownObjectRelease();
}

uint64_t closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v7[6] = type metadata accessor for MainActor();
  v7[7] = static MainActor.shared.getter();
  v7[8] = dispatch thunk of Actor.unownedExecutor.getter();
  v7[9] = v8;
  return swift_task_switch();
}

uint64_t closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[2];
  v1 = v0[3];
  v0[10] = static MainActor.shared.getter();
  v3 = swift_task_alloc();
  v0[11] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  v0[12] = v4;
  *v4 = v0;
  v4[1] = closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(v0 + 32);
  v2 = swift_release();
  v1(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a2;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TaskPriority?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v4[5] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  swift_release();
  v4 = type metadata accessor for TaskPriority();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750];
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v6(v1, 1, 1, v4);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v3;
  v7[5] = v2;
  swift_bridgeObjectRetain();
  _sScG7addTask8priority9operationyScPSg_xyYaYAcntFyt_Tg5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:), (uint64_t)v7);
  outlined destroy of TaskPriority?(v1, &lazy cache variable for type metadata for TaskPriority?, v5);
  v6(v1, 1, 1, v4);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v3;
  v8[5] = v2;
  swift_bridgeObjectRetain();
  _sScG7addTask8priority9operationyScPSg_xyYaYAcntFyt_Tg5(v1, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:), (uint64_t)v8);
  outlined destroy of TaskPriority?(v1, &lazy cache variable for type metadata for TaskPriority?, v5);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = specialized static BackgroundTaskProtocol.currentTasks()();
  v0[5] = v1;
  v2 = (_QWORD *)swift_task_alloc();
  v0[6] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = closure #1 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(v0[2], v0[3], v0[4], v1);
}

uint64_t closure #2 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t closure #2 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = specialized static BackgroundTaskProtocol.currentTasks()();
  v0[5] = v1;
  v2 = (_QWORD *)swift_task_alloc();
  v0[6] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = closure #2 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(v0[2], v0[3], v0[4], v0[3], v0[4], v1);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t RootModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  _BYTE v8[32];
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  _BYTE v12[56];

  swift_weakLoadStrong();
  swift_weakLoadStrong();
  swift_weakLoadStrong();
  v3 = *(_BYTE *)(v1 + 64);
  v4 = *(_QWORD *)(v1 + 72);
  v5 = *(_QWORD *)(v1 + 80);
  v6 = *(_BYTE *)(v1 + 88);
  swift_weakInit();
  outlined copy of SceneID?(v4, v5, v6);
  swift_release();
  swift_weakInit();
  swift_release();
  swift_weakInit();
  swift_release();
  v8[24] = v3;
  v9 = v4;
  v10 = v5;
  v11 = v6;
  outlined init with copy of RootEnvironmentModifier((uint64_t)v8, (uint64_t)v12);
  outlined destroy of RootEnvironmentModifier((uint64_t)v8);
  outlined init with copy of SwiftUIAnySortComparator?(v1 + 24, a1 + 56, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  return outlined init with take of ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>((uint64_t)v12, a1);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance RootEnvironmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, _BYTE *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance RootEnvironmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, _BYTE *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance RootEnvironmentModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t project #1 <A>(_:) in AppSceneDelegate.scene(_:willConnectTo:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for ObjectFallbackDelegateBox(0, a4, a3, a4);
  type metadata accessor for UISceneDelegate();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  *(_QWORD *)(a2 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox) = ObjectFallbackDelegateBox.__allocating_init(_:)(v6);
  return swift_release();
}

uint64_t closure #1 in AppSceneDelegate.scene(_:willConnectTo:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, Swift::Int *a4@<X4>, void *a5@<X5>, void *a6@<X6>, _QWORD *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  id v16;
  id v17;
  uint64_t result;

  v13 = *(_QWORD *)a2;
  v14 = *(_QWORD *)(a2 + 8);
  v15 = *(_BYTE *)(a2 + 16);
  outlined copy of SceneID?(*(_QWORD *)a2, v14, v15);
  v16 = objc_msgSend(a5, sel_role);
  v17 = specialized AppSceneDelegate.makeSceneHostWindow(restorationSceneItemID:restorationData:connectionOptions:urlContexts:role:windowScene:delegate:)(v13, v14, v15, a3, a4, (uint64_t)v16, a6, a1, a1);

  result = outlined consume of SceneID?(v13, v14, v15);
  *a7 = v17;
  return result;
}

uint64_t closure #2 in AppSceneDelegate.scene(_:willConnectTo:options:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(result + 56);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v5 = *(_QWORD *)(result + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v6 = v2 + 40;
    do
    {
      specialized _do #1 <A>(_:) in handleConnectionOptionsCallbacks #1 (_:) in AppSceneDelegate.scene(_:willConnectTo:options:)(*(_QWORD *)(v6 - 8), a2, v5, *(_QWORD *)(v6 - 8));
      v6 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void closure #3 in AppSceneDelegate.scene(_:willConnectTo:options:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  void *v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39[3];
  uint64_t v40;

  v4 = type metadata accessor for OpenURLContext();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v39[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v39[-1] - v10;
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v39[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v39[-1] - v20;
  v22 = a2 + 16;
  if (objc_msgSend(a1, sel__isUniversalLink, v19))
  {
    v23 = objc_msgSend(a1, sel_webpageURL);
    if (v23)
    {
      v24 = v23;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v25 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v25(v11, v16, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
      {
        v25(v21, v11, v12);
        swift_beginAccess();
        v26 = MEMORY[0x18D760234](v22);
        if (v26)
        {
          v27 = (void *)v26;
          v28 = *(_QWORD *)(v26 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge);
          swift_retain();

          if (v28)
          {
            (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v7, v21, v12);
            *(_QWORD *)&v7[*(int *)(v4 + 20)] = 0;
            v40 = v4;
            boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v39);
            outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v7, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for OpenURLContext);
            SceneBridge.publishEvent(event:type:identifier:)((uint64_t)v39, v4, 0x434C52556E65704FLL, 0xEE00747865746E6FLL);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
            swift_release();
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for OpenURLContext);
          }
        }
        (*(void (**)(char *, uint64_t))(v13 + 8))(v21, v12);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    }
    outlined destroy of TaskPriority?((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  }
  swift_beginAccess();
  v30 = MEMORY[0x18D760234](v22);
  if (v30)
  {
    v31 = (void *)v30;
    v32 = *(_QWORD *)(v30 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge);
    swift_retain();

    if (v32)
    {
      v33 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSUserActivity);
      v40 = v33;
      v39[0] = (uint64_t)a1;
      v34 = objc_msgSend(a1, sel_activityType);
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v37 = v36;

      SceneBridge.publishEvent(event:type:identifier:)((uint64_t)v39, v33, v35, v37);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
      swift_release();
    }
  }
}

void closure #5 in AppSceneDelegate.scene(_:willConnectTo:options:)(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  objc_msgSend(v2, sel__saveRestorationUserActivityStateForScene_, a1);

}

Swift::Void __swiftcall AppSceneDelegate.sceneDidDisconnect(_:)(UIScene *a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  uint64_t *v5;
  int v6;
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v3 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
  if (!v3)
    return;
  v4 = objc_msgSend(v3, sel_rootViewController);
  if (!v4)
    return;
  v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID);
  v6 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID + 16);
  if (v6 == 255)
  {
LABEL_12:

    return;
  }
  v15 = v4;
  v7 = *v5;
  v8 = v5[1];
  outlined copy of SceneID(*v5, v8, v6 & 1);
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_retain();
  PlatformSceneCache.removeHost(_:id:)((uint64_t)v15, v7, v8, v6 & 1);
  outlined consume of SceneID?(v7, v8, v6);
  swift_release();
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
  if (!v9
    || (v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 80),
        v11 = swift_retain(),
        v12 = (void *)v10(v11),
        swift_release(),
        !v12))
  {
    v4 = v15;
    goto LABEL_12;
  }
  v13 = (void *)swift_dynamicCastObjCProtocolConditional();
  if (v13 && (v14 = v13, (objc_msgSend(v13, sel_respondsToSelector_, sel_sceneDidDisconnect_) & 1) != 0))
  {
    objc_msgSend(v14, sel_sceneDidDisconnect_, a1);

  }
  else
  {

  }
}

Swift::Void __swiftcall AppSceneDelegate.scene(_:continue:)(UIScene *_, NSUserActivity a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  id v24;
  void *v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t *boxed_opaque_existential_1;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  UIScene *v40;
  void *v41;
  void *v42;
  uint64_t v43[3];
  uint64_t v44;

  v3 = v2;
  v6 = type metadata accessor for OpenURLContext();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v39 - v12;
  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v39 - v22;
  if (-[objc_class _isUniversalLink](a2.super.isa, sel__isUniversalLink, v21))
  {
    v40 = _;
    v24 = -[objc_class webpageURL](a2.super.isa, sel_webpageURL);
    if (v24)
    {
      v25 = v24;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v26 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
      v26(v13, v18, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
      {
        v26(v23, v13, v14);
        if (*(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge))
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v9, v23, v14);
          *(_QWORD *)&v9[*(int *)(v6 + 20)] = 0;
          v44 = v6;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v43);
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v9, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for OpenURLContext);
          swift_retain();
          SceneBridge.publishEvent(event:type:identifier:)((uint64_t)v43, v6, 0x434C52556E65704FLL, 0xEE00747865746E6FLL);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
          swift_release();
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for OpenURLContext);
        }
        (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
    }
    outlined destroy of TaskPriority?((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    _ = v40;
  }
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge))
  {
    v28 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSUserActivity);
    v44 = v28;
    v43[0] = (uint64_t)a2.super.isa;
    swift_retain();
    v29 = -[objc_class activityType](a2.super.isa, sel_activityType);
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v32 = v31;

    SceneBridge.publishEvent(event:type:identifier:)((uint64_t)v43, v28, v30, v32);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    swift_release();
  }
  v33 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
  if (v33)
  {
    v34 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 80);
    v35 = swift_retain();
    v36 = (void *)v34(v35);
    swift_release();
    if (v36)
    {
      v42 = &unk_1EDF2A8C8;
      if (swift_dynamicCastObjCProtocolConditional())
      {
        v41 = &unk_1EDF2AAE8;
        v37 = (void *)swift_dynamicCastObjCProtocolConditional();
        if (v37)
        {
          v38 = v37;
          if ((objc_msgSend(v37, sel_respondsToSelector_, sel_scene_continueUserActivity_) & 1) != 0)
            objc_msgSend(v38, sel_scene_continueUserActivity_, _, a2.super.isa);
        }
      }

    }
  }
}

void AppSceneDelegate.scene(_:openURLContexts:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  uint64_t *boxed_opaque_existential_1;
  id v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  Class isa;
  uint64_t v33[5];
  uint64_t v34;

  v3 = v2;
  v6 = type metadata accessor for OpenURLContext();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = a2;
  v10 = *(void **)(v3 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
  if (!v10)
    goto LABEL_8;
  swift_bridgeObjectRetain();
  v11 = objc_msgSend(v10, sel_rootViewController);
  if (!v11)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    v34 = a2;
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  v12 = v11;
  type metadata accessor for DocumentBrowserViewController();
  v13 = swift_dynamicCastClass();
  if (!v13)
  {
    swift_bridgeObjectRelease();

    goto LABEL_8;
  }
  v14 = v13;
  v15 = v12;
  specialized Sequence.first(where:)(a2, v14);
  v17 = v16;

  if (v17)
  {
    v18 = (void *)specialized Set._Variant.remove(_:)(v17);

  }
  else
  {

  }
LABEL_9:
  v19 = swift_bridgeObjectRetain();
  v20 = (void *)specialized Collection.first.getter(v19);
  swift_bridgeObjectRelease();
  if (v20)
  {
    v21 = objc_msgSend(v20, sel_options);
    if (*(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge))
    {
      swift_retain();
      v22 = objc_msgSend(v20, sel_URL);
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      *(_QWORD *)&v9[*(int *)(v6 + 20)] = v21;
      v33[3] = v6;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v9, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for OpenURLContext);
      v24 = v21;
      SceneBridge.publishEvent(event:type:identifier:)((uint64_t)v33, v6, 0x434C52556E65704FLL, 0xEE00747865746E6FLL);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);

      swift_release();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for OpenURLContext);
    }
    else
    {

    }
  }
  v25 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
  if (v25)
  {
    v26 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 80);
    v27 = swift_retain();
    v28 = (void *)v26(v27);
    swift_release();
    if (v28)
    {
      v33[4] = (uint64_t)&unk_1EDF2A8C8;
      v29 = (void *)swift_dynamicCastObjCProtocolConditional();
      if (v29)
      {
        v30 = v29;
        if ((objc_msgSend(v29, sel_respondsToSelector_, sel_scene_openURLContexts_) & 1) != 0)
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
          lazy protocol witness table accessor for type UIScene and conformance NSObject(&lazy protocol witness table cache variable for type UIOpenURLContext and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
          isa = Set._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v30, sel_scene_openURLContexts_, a1, isa);
          swift_bridgeObjectRelease();

          return;
        }
      }

    }
  }
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall AppSceneDelegate.sceneWillResignActive(_:)(UIScene *a1)
{
  AppSceneDelegate.sceneWillResignActive(_:)((uint64_t)a1, (SEL *)&selRef_sceneWillResignActive_);
}

void AppSceneDelegate.sceneWillResignActive(_:)(uint64_t a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t *v9;
  int v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  void *v20;

  v5 = OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_scenePhase;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_scenePhase) = 1;
  v6 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
  if (v6)
  {
    v7 = objc_msgSend(v6, sel_rootViewController);
    if (v7)
    {
      v8 = v7;
      v9 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID);
      v10 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID + 16);
      if (v10 == 255)
      {

      }
      else
      {
        v11 = *v9;
        v12 = v9[1];
        outlined copy of SceneID(*v9, v12, v10 & 1);
        AppSceneDelegate.scenesDidChange(phaseChanged:)(1);
        if (one-time initialization token for shared != -1)
          swift_once();
        v19 = *(_BYTE *)(v2 + v5);
        swift_retain();
        PlatformSceneCache.setPhase(_:id:host:)(&v19, v11, v12, v10 & 1);
        swift_release();

        outlined consume of SceneID?(v11, v12, v10);
      }
    }
  }
  v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
  if (v13)
  {
    v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 80);
    v15 = swift_retain();
    v16 = (void *)v14(v15);
    swift_release();
    if (v16)
    {
      v20 = &unk_1EDF2A8C8;
      v17 = (void *)swift_dynamicCastObjCProtocolConditional();
      if (v17)
      {
        v18 = v17;
        if ((objc_msgSend(v17, sel_respondsToSelector_, *a2) & 1) != 0)
          objc_msgSend(v18, *a2, a1);
      }

    }
  }
}

Swift::Void __swiftcall AppSceneDelegate.sceneDidEnterBackground(_:)(UIScene *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t *v7;
  int v8;
  Swift::UInt v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;

  v3 = OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_scenePhase;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_scenePhase) = 0;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
  if (v4)
  {
    v5 = objc_msgSend(v4, sel_rootViewController);
    if (v5)
    {
      v6 = v5;
      v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID);
      v8 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID + 16);
      if (v8 == 255)
      {

      }
      else
      {
        v9 = *v7;
        v10 = v7[1];
        outlined copy of SceneID(*v7, v10, v8 & 1);
        AppSceneDelegate.scenesDidChange(phaseChanged:)(1);
        if (one-time initialization token for shared != -1)
          swift_once();
        v17 = *(_BYTE *)(v1 + v3);
        swift_retain();
        PlatformSceneCache.setPhase(_:id:host:)(&v17, v9, v10, v8 & 1);
        swift_release();

        outlined consume of SceneID?(v9, v10, v8);
      }
    }
  }
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
  if (v11)
  {
    v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 80);
    v13 = swift_retain();
    v14 = (void *)v12(v13);
    swift_release();
    if (v14)
    {
      v18 = &unk_1EDF2A8C8;
      v15 = (void *)swift_dynamicCastObjCProtocolConditional();
      if (v15)
      {
        v16 = v15;
        if ((objc_msgSend(v15, sel_respondsToSelector_, sel_sceneDidEnterBackground_) & 1) != 0)
          objc_msgSend(v16, sel_sceneDidEnterBackground_, a1);
      }

    }
  }
}

uint64_t AppSceneDelegate.isDocumentViewControllerRootEnabled.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  char v3;

  v1 = OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate____lazy_storage___isDocumentViewControllerRootEnabled;
  v2 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate____lazy_storage___isDocumentViewControllerRootEnabled);
  if (v2 == 2)
  {
    v3 = static SemanticFeature.isEnabled.getter();
    *(_BYTE *)(v0 + v1) = v3 & 1;
  }
  else
  {
    v3 = v2 & 1;
  }
  return v3 & 1;
}

Swift::Void __swiftcall AppSceneDelegate.runTest(_:options:)(Swift::String _, Swift::OpaquePointer options)
{
  uint64_t v2;
  uint64_t countAndFlagsBits;
  void *object;
  id v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  countAndFlagsBits = _._countAndFlagsBits;
  _._countAndFlagsBits = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
  if (_._countAndFlagsBits
    && (object = _._object,
        (v6 = objc_msgSend((id)_._countAndFlagsBits, sel_rootViewController)) != 0)
    && (v12[0] = v6,
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController), type metadata accessor for PPTTestHost(), (swift_dynamicCast() & 1) != 0))
  {
    if (*((_QWORD *)&v10 + 1))
    {
      outlined init with take of OptionalBinaryInteger(&v9, (uint64_t)v12);
      v7 = v13;
      v8 = v14;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      (*(void (**)(uint64_t, void *, void *, uint64_t, uint64_t))(v8 + 8))(countAndFlagsBits, object, options._rawValue, v7, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      return;
    }
  }
  else
  {
    v11 = 0;
    v9 = 0u;
    v10 = 0u;
  }
  outlined destroy of TaskPriority?((uint64_t)&v9, &lazy cache variable for type metadata for PPTTestHost?, (uint64_t (*)(uint64_t))type metadata accessor for PPTTestHost);
}

double AppSceneDelegate.forwardingTarget(for:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
  if (v3)
  {
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 80);
    v5 = swift_retain();
    v6 = (void *)v4(v5);
    swift_release();
    if (v6)
    {
      v7 = swift_dynamicCastObjCProtocolConditional();
      if (v7)
      {
        v8 = v7;
        *(_QWORD *)(a1 + 24) = swift_getObjectType();
        *(_QWORD *)a1 = v8;
        return result;
      }

    }
  }
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t AppSceneDelegate.connectionOptionDefinitionTarget.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
  if (!v1)
    return 0;
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 80);
  v3 = swift_retain();
  v4 = v2(v3);
  swift_release();
  if (!v4)
    return 0;
  return v4;
}

id AppSceneDelegate.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppSceneDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for _UISceneConnectionOptionDefinitionCustomHandling.connectionOptionDefinitionTarget.getter in conformance AppSceneDelegate()
{
  return AppSceneDelegate.connectionOptionDefinitionTarget.getter();
}

uint64_t protocol witness for _UISceneConnectionOptionDefinitionCustomHandling.handleConnectionOptionDefinition<A>(payload:definition:scene:) in conformance AppSceneDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized AppSceneDelegate.handleConnectionOptionDefinition<A>(payload:definition:scene:)
                                                                   + async function pointer to specialized AppSceneDelegate.handleConnectionOptionDefinition<A>(payload:definition:scene:));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return v12(a1, a2, a4, a5);
}

void key path setter for EnvironmentValues.sceneSession : EnvironmentValues(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  specialized EnvironmentValues.sceneSession.setter((uint64_t)v1);

}

void (*EnvironmentValues.sceneSession.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = EnvironmentValues.sceneSession.getter();
  return EnvironmentValues.sceneSession.modify;
}

void EnvironmentValues.sceneSession.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  id v4;

  v4 = (id)*a1;
  if ((a2 & 1) != 0)
  {
    v2 = v4;
    specialized EnvironmentValues.sceneSession.setter((uint64_t)v4);

    v3 = v2;
  }
  else
  {
    specialized EnvironmentValues.sceneSession.setter(*a1);
    v3 = v4;
  }

}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance SceneSessionKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&static SceneSessionKey.defaultValue, a1, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UISceneSession>?);
}

uint64_t specialized configureHostingController #1 <A>(_:) in AppSceneDelegate.makeSceneHostWindow(restorationSceneItemID:restorationData:connectionOptions:urlContexts:role:windowScene:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;

  v8 = direct field offset for UIHostingController.host;
  v9 = *(_QWORD **)(a1 + direct field offset for UIHostingController.host);
  v22 = OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge;
  v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_weakAssign();
  *(_QWORD *)((char *)v9 + *(_QWORD *)((*v10 & *v9) + 0x240) + 8) = &protocol witness table for AppSceneDelegate;
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  v11 = *(_QWORD *)(a4 + 184);
  v12 = (_QWORD *)((char *)v9 + *(_QWORD *)((*v10 & *v9) + 0x118));
  v13 = *v12;
  *v12 = *(_QWORD *)(a4 + 176);
  v12[1] = v11;
  swift_retain();
  v14 = v9;
  swift_retain();
  outlined consume of EnvironmentValues?(v13);
  type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, RootModifier>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  v15 = objc_msgSend(a5, sel_sizeRestrictions);
  if (v15)
  {

    swift_beginAccess();
    __asm { BR              X10 }
  }
  swift_beginAccess();
  if ((*(_BYTE *)(a4 + 192) & 2) != 0)
  {
    v16 = *(_QWORD **)(a1 + v8);
    v17 = (_QWORD *)((char *)v16 + *(_QWORD *)((*v10 & *v16) + 0x108));
    swift_beginAccess();
    v18 = *v17;
    *v17 = 0;
    if (v18)
    {
      v19 = v16;
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    }
  }
  type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(0, &lazy cache variable for type metadata for ScenePresentationBridge<ModifiedContent<AnyView, RootModifier>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScenePresentationBridge);
  v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = -1;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  *(_QWORD *)(v20 + 24) = JSONEncoder.init()();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  *(_QWORD *)(*(_QWORD *)(a1 + v8) + *(_QWORD *)((*v10 & **(_QWORD **)(a1 + v8)) + 0x1E8)) = v20;
  swift_retain();
  swift_release();
  if (!*(_QWORD *)(a2 + v22))
  {
    __break(1u);
    JUMPOUT(0x1871242F8);
  }
  swift_retain();
  swift_retain();
  if (_SwiftUIIsAppleInternalBuild())
    GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_22:
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v15 = *v14;
    v16 = v14[1];
    if (*v14)
      v17 = 0;
    else
      v17 = v16 == 0xE000000000000000;
    if (!v17)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        v18 = v15 == 42 && v16 == 0xE100000000000000;
        if (v18
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
          || (lazy protocol witness table accessor for type String and conformance String(),
              result = StringProtocol.contains<A>(_:)(),
              (result & 1) != 0))
        {
          v19 = 1;
LABEL_35:
          swift_release();
          return v19;
        }
      }
    }
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v11 >= v6)
    goto LABEL_34;
  v12 = *(_QWORD *)(v2 + 8 * v11);
  ++v8;
  if (v12)
    goto LABEL_21;
  v8 = v11 + 1;
  if (v11 + 1 >= v6)
    goto LABEL_34;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 2;
  if (v11 + 2 >= v6)
    goto LABEL_34;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 3;
  if (v11 + 3 >= v6)
    goto LABEL_34;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_34:
    v19 = 0;
    goto LABEL_35;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v6)
      goto LABEL_34;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_37:
  __break(1u);
  return result;
}

void specialized Sequence.first(where:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id i;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  _QWORD v24[4];
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;

  v28 = a2;
  v3 = type metadata accessor for URL();
  v27 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
    lazy protocol witness table accessor for type UIScene and conformance NSObject(&lazy protocol witness table cache variable for type UIOpenURLContext and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
    Set.Iterator.init(_cocoa:)();
    a1 = v30;
    v26 = v31;
    v7 = v32;
    v8 = v33;
    v9 = v34;
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 56);
    v26 = a1 + 56;
    v12 = ~v10;
    v13 = -v10;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v9 = v14 & v11;
    swift_bridgeObjectRetain();
    v7 = v12;
    v8 = 0;
  }
  v24[0] = v7;
  v24[3] = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v25 = (unint64_t)(v7 + 64) >> 6;
  v24[2] = MEMORY[0x1E0DEE9B0] + 8;
  if (a1 < 0)
    goto LABEL_10;
LABEL_8:
  if (v9)
  {
    v15 = (v9 - 1) & v9;
    v16 = __clz(__rbit64(v9)) | (v8 << 6);
    v17 = v8;
    goto LABEL_29;
  }
  v20 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v20 < v25)
    {
      v21 = *(_QWORD *)(v26 + 8 * v20);
      v17 = v8 + 1;
      if (v21)
        goto LABEL_28;
      v17 = v8 + 2;
      if (v8 + 2 >= v25)
        goto LABEL_33;
      v21 = *(_QWORD *)(v26 + 8 * v17);
      if (v21)
        goto LABEL_28;
      v17 = v8 + 3;
      if (v8 + 3 >= v25)
        goto LABEL_33;
      v21 = *(_QWORD *)(v26 + 8 * v17);
      if (v21)
        goto LABEL_28;
      v17 = v8 + 4;
      if (v8 + 4 >= v25)
        goto LABEL_33;
      v21 = *(_QWORD *)(v26 + 8 * v17);
      if (v21)
      {
LABEL_28:
        v15 = (v21 - 1) & v21;
        v16 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_29:
        for (i = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v16); i; v15 = v9)
        {
          v23 = objc_msgSend(i, sel_URL, v24[0]);
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          LOBYTE(v23) = DocumentBrowserViewController.presentDocument(at:animated:)((uint64_t)v6, 0);
          (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v3);
          if ((v23 & 1) != 0)
            break;

          v8 = v17;
          v9 = v15;
          if ((a1 & 0x8000000000000000) == 0)
            goto LABEL_8;
LABEL_10:
          v18 = __CocoaSet.Iterator.next()();
          if (!v18)
            break;
          v29 = v18;
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          i = v35;
          swift_unknownObjectRelease();
          v17 = v8;
        }
        goto LABEL_33;
      }
      v17 = v8 + 5;
      if (v8 + 5 < v25)
      {
        v21 = *(_QWORD *)(v26 + 8 * v17);
        if (!v21)
        {
          v22 = v8 + 6;
          while (v25 != v22)
          {
            v21 = *(_QWORD *)(v26 + 8 * v22++);
            if (v21)
            {
              v17 = v22 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_33;
        }
        goto LABEL_28;
      }
    }
LABEL_33:
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return;
  }
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  char v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  id v28;

  v3 = v2;
  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPress);
    lazy protocol witness table accessor for type UIColor and conformance UIColor((unint64_t *)&lazy protocol witness table cache variable for type UIPress and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIPress, 0x1E0DC3B60, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v5 = v23;
    v22 = v24;
    v6 = v25;
    v7 = v26;
    v8 = v27;
  }
  else
  {
    v9 = -1 << *(_BYTE *)(a1 + 32);
    v22 = a1 + 56;
    v10 = ~v9;
    v11 = -v9;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v8 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v6 = v10;
    v7 = 0;
  }
  v21 = (unint64_t)(v6 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_8:
  if (!__CocoaSet.Iterator.next()())
    goto LABEL_36;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPress);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v13 = v28;
  swift_unknownObjectRelease();
  v14 = v7;
  v15 = v8;
  if (!v13)
    goto LABEL_36;
  while (1)
  {
    v28 = v13;
    v19 = closure #1 in VerticalTextView.isSubmission(_:)(&v28, a2);
    if (v3)
    {

      goto LABEL_36;
    }
    if ((v19 & 1) != 0)
      goto LABEL_36;

    v7 = v14;
    v8 = v15;
    if (v5 < 0)
      goto LABEL_8;
LABEL_11:
    if (!v8)
      break;
    v15 = (v8 - 1) & v8;
    v16 = __clz(__rbit64(v8)) | (v7 << 6);
    v14 = v7;
LABEL_24:
    v13 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v16);
    if (!v13)
      goto LABEL_36;
  }
  v14 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    return;
  }
  if (v14 >= v21)
    goto LABEL_36;
  v17 = *(_QWORD *)(v22 + 8 * v14);
  if (v17)
  {
LABEL_23:
    v15 = (v17 - 1) & v17;
    v16 = __clz(__rbit64(v17)) + (v14 << 6);
    goto LABEL_24;
  }
  v18 = v7 + 2;
  if (v7 + 2 >= v21)
    goto LABEL_36;
  v17 = *(_QWORD *)(v22 + 8 * v18);
  if (v17)
    goto LABEL_22;
  v18 = v7 + 3;
  if (v7 + 3 >= v21)
    goto LABEL_36;
  v17 = *(_QWORD *)(v22 + 8 * v18);
  if (v17)
    goto LABEL_22;
  v18 = v7 + 4;
  if (v7 + 4 >= v21)
    goto LABEL_36;
  v17 = *(_QWORD *)(v22 + 8 * v18);
  if (v17)
  {
LABEL_22:
    v14 = v18;
    goto LABEL_23;
  }
  v14 = v7 + 5;
  if (v7 + 5 >= v21)
    goto LABEL_36;
  v17 = *(_QWORD *)(v22 + 8 * v14);
  if (v17)
    goto LABEL_23;
  v20 = v7 + 6;
  while (v21 != v20)
  {
    v17 = *(_QWORD *)(v22 + 8 * v20++);
    if (v17)
    {
      v14 = v20 - 1;
      goto LABEL_23;
    }
  }
LABEL_36:
  outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
}

uint64_t specialized static RootEnvironmentModifier._makeInputs(modifier:inputs:)()
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<RootEnvironmentModifier>, (uint64_t)&type metadata for RootEnvironmentModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 3;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v1 = _GraphValue.value.getter();
  v2 = _GraphInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type RootEnvironmentModifier.Child and conformance RootEnvironmentModifier.Child();
  Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of RootEnvironmentModifier.Child((uint64_t)&v1);
  return _GraphInputs.environment.setter();
}

id specialized AppDelegate.application(_:configurationForConnecting:options:)(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  id v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v38[36];

  type metadata accessor for [SceneList.Item]?();
  static Update.ensure<A>(_:)();
  v2 = objc_msgSend(a1, sel_role);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_13;
  }
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
LABEL_13:

LABEL_16:
    swift_bridgeObjectRelease();
    v16 = objc_msgSend(a1, sel_role);
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3BD8]), sel_initWithName_sessionRole_, 0, v16);

    type metadata accessor for AppSceneDelegate();
    objc_msgSend(v17, sel_setDelegateClass_, swift_getObjCClassFromMetadata());
    return v17;
  }
  v9 = one-time initialization token for clarityUI;
  v10 = v2;
  if (v9 != -1)
    swift_once();
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = v12;
  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14)
  {

    goto LABEL_11;
  }
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
    goto LABEL_15;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;
  if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22)
  {
LABEL_11:
    swift_bridgeObjectRelease_n();
LABEL_15:

    goto LABEL_16;
  }
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v23 & 1) != 0)
    goto LABEL_15;
  v24 = one-time initialization token for carPlay;
  v25 = v10;
  if (v24 != -1)
    swift_once();
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v28 = v27;
  if (v26 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v28 == v29)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  v30 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v30 & 1) != 0)
  {
LABEL_26:

    if (v38[0])
    {
      if (*(_QWORD *)(v38[0] + 16))
      {
        swift_bridgeObjectRetain();
        outlined init with copy of SceneList.Item(v38[0] + 32, (uint64_t)v38);
        outlined init with copy of SceneList.Item.Value(v38, (uint64_t)&v36);
        __asm { BR              X9 }
      }
LABEL_39:
      swift_bridgeObjectRelease();
      return objc_msgSend(a1, sel_configuration);
    }
    return objc_msgSend(a1, sel_configuration);
  }
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v33 = v32;
  if (v31 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v33 == v34)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v35 & 1) == 0)
    {
      if (v38[0])
      {
        if (*(_QWORD *)(v38[0] + 16))
        {
          swift_bridgeObjectRetain();
          outlined init with copy of SceneList.Item(v38[0] + 32, (uint64_t)v38);
          outlined init with copy of SceneList.Item.Value(v38, (uint64_t)&v36);
          __asm { BR              X9 }
        }
        goto LABEL_39;
      }
      return objc_msgSend(a1, sel_configuration);
    }
  }
  if (v38[0])
  {
    if (*(_QWORD *)(v38[0] + 16))
    {
      swift_bridgeObjectRetain();
      outlined init with copy of SceneList.Item(v38[0] + 32, (uint64_t)v38);
      outlined init with copy of SceneList.Item.Value(v38, (uint64_t)&v36);
      __asm { BR              X9 }
    }
    goto LABEL_39;
  }
  return objc_msgSend(a1, sel_configuration);
}

void sub_187125378()
{
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  JUMPOUT(0x18712538CLL);
}

uint64_t specialized _do #1 <A>(_:) in handleConnectionOptionsCallbacks #1 (_:) in AppSceneDelegate.scene(_:willConnectTo:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v30 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v30 - v15;
  UISceneConnectionOptions.subscript.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v11, AssociatedTypeWitness);
  if (*(_QWORD *)(a3 + 16))
  {
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
    if ((v19 & 1) != 0)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v18);
      v31 = v12;
      v33 = v16;
      if (v20 >> 62)
      {
        swift_bridgeObjectRetain();
        result = _CocoaArrayWrapper.endIndex.getter();
        v21 = result;
        if (result)
          goto LABEL_7;
      }
      else
      {
        v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = swift_bridgeObjectRetain();
        if (v21)
        {
LABEL_7:
          if (v21 < 1)
          {
            __break(1u);
            return result;
          }
          v22 = 0;
          v32 = v20 & 0xC000000000000001;
          v23 = v20;
          do
          {
            if (v32)
            {
              v24 = MEMORY[0x18D75E3BC](v22, v20);
            }
            else
            {
              v24 = *(_QWORD *)(v20 + 8 * v22 + 32);
              swift_retain();
            }
            ++v22;
            v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 80);
            AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
            v27 = swift_getAssociatedConformanceWitness();
            v25(v33, AssociatedTypeWitness, AssociatedConformanceWitness, v27);
            swift_release();
            v20 = v23;
          }
          while (v21 != v22);
        }
      }
      swift_bridgeObjectRelease();
      v28 = *(uint64_t (**)(char *, uint64_t))(v31 + 8);
      v29 = v33;
      return v28(v29, AssociatedTypeWitness);
    }
  }
  v28 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
  v29 = v16;
  return v28(v29, AssociatedTypeWitness);
}

uint64_t specialized AppSceneDelegate.openWindowByIDSceneID(from:)(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  if (!a1)
    return 0;
  v1 = a1;
  v2 = objc_msgSend(v1, sel_activityType);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  if (one-time initialization token for userActivityTypeOpenWindowByID != -1)
    swift_once();
  if (v3 == static NSUserActivity.userActivityTypeOpenWindowByID && v5 == unk_1EDEFF840)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
      goto LABEL_21;
  }
  v8 = objc_msgSend(v1, sel_userInfo);
  v9 = MEMORY[0x1E0DEE9B8];
  if (!v8)
  {
    v17 = 0u;
    v18 = 0u;
LABEL_20:
    outlined destroy of AccessibilityTableContext?((uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
    goto LABEL_21;
  }
  v10 = v8;
  v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v11 + 16) && (v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v16), (v13 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v11 + 56) + 32 * v12, (uint64_t)&v17);
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v16);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v18 + 1))
    goto LABEL_20;
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_21:

    return 0;
  }
  v14 = v16;

  return v14;
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  char v35;
  void (*v36)(char *, uint64_t);
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;

  v40 = a2;
  v41 = a1;
  v6 = type metadata accessor for URL();
  v52 = *(_QWORD **)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v39 - v12;
  v44 = a3;
  v45 = 0;
  v14 = 0;
  v17 = *(_QWORD *)(a3 + 56);
  v16 = a3 + 56;
  v15 = v17;
  v18 = 1 << *(_BYTE *)(v16 - 24);
  if (v18 < 64)
    v19 = ~(-1 << v18);
  else
    v19 = -1;
  v20 = v19 & v15;
  v42 = v16;
  v43 = (unint64_t)(v18 + 63) >> 6;
  v50 = a4 + 56;
  v51 = a4;
  do
  {
LABEL_6:
    if (v20)
    {
      v21 = __clz(__rbit64(v20));
      v22 = (v20 - 1) & v20;
      v23 = v21 | (v14 << 6);
    }
    else
    {
      v24 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_33;
      if (v24 >= v43)
      {
LABEL_32:
        v38 = v44;
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)(v41, v40, v45, v38);
        return;
      }
      v25 = *(_QWORD *)(v42 + 8 * v24);
      ++v14;
      if (!v25)
      {
        v14 = v24 + 1;
        if (v24 + 1 >= v43)
          goto LABEL_32;
        v25 = *(_QWORD *)(v42 + 8 * v14);
        if (!v25)
        {
          v14 = v24 + 2;
          if (v24 + 2 >= v43)
            goto LABEL_32;
          v25 = *(_QWORD *)(v42 + 8 * v14);
          if (!v25)
          {
            v26 = v24 + 3;
            if (v26 >= v43)
              goto LABEL_32;
            v25 = *(_QWORD *)(v42 + 8 * v26);
            if (!v25)
            {
              while (1)
              {
                v14 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_34;
                if (v14 >= v43)
                  goto LABEL_32;
                v25 = *(_QWORD *)(v42 + 8 * v14);
                ++v26;
                if (v25)
                  goto LABEL_21;
              }
            }
            v14 = v26;
          }
        }
      }
LABEL_21:
      v22 = (v25 - 1) & v25;
      v23 = __clz(__rbit64(v25)) + (v14 << 6);
    }
    v47 = *(id *)(*(_QWORD *)(v44 + 48) + 8 * v23);
    v27 = objc_msgSend(v47, sel_URL);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v28 = *(_QWORD *)(a4 + 16);
    v48 = v22;
    v49 = v14;
    v46 = v23;
    if (v28
      && (lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]), v29 = dispatch thunk of Hashable._rawHashValue(seed:)(), v30 = -1 << *(_BYTE *)(a4 + 32), v31 = v29 & ~v30, ((*(_QWORD *)(v50 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) != 0))
    {
      v32 = ~v30;
      v33 = v52[9];
      v34 = (void (*)(char *, unint64_t, uint64_t))v52[2];
      do
      {
        v34(v9, *(_QWORD *)(v51 + 48) + v33 * v31, v6);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
        v35 = dispatch thunk of static Equatable.== infix(_:_:)();
        v36 = (void (*)(char *, uint64_t))v52[1];
        v36(v9, v6);
        if ((v35 & 1) != 0)
        {
          v36(v13, v6);

          a4 = v51;
          v20 = v48;
          v14 = v49;
          goto LABEL_6;
        }
        v31 = (v31 + 1) & v32;
      }
      while (((*(_QWORD *)(v50 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) != 0);
      v36(v13, v6);
    }
    else
    {
      ((void (*)(char *, uint64_t))v52[1])(v13, v6);
    }

    *(unint64_t *)((char *)v41 + ((v46 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v46;
    v37 = __OFADD__(v45++, 1);
    a4 = v51;
    v20 = v48;
    v14 = v49;
  }
  while (!v37);
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, v10);
    bzero((char *)v16 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    specialized closure #1 in _NativeSet.filter(_:)((_QWORD *)((char *)v16 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    v12 = v11;
    swift_release();
    swift_bridgeObjectRelease();
    if (v2)
      swift_willThrow();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v13 = (void *)swift_slowAlloc();
    bzero(v13, v8);
    swift_bridgeObjectRetain();
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v13, v7, a1, a2);
    v12 = v14;
    swift_release();
    swift_bridgeObjectRelease();
    MEMORY[0x18D760108](v13, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v12;
}

Swift::Int specialized Set._Variant.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  id v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[5];
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;

  v3 = v2;
  v6 = type metadata accessor for URL();
  v41 = *(_QWORD **)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v42 = (char *)v39 - v12;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v39[1] = v2;
    v3 = MEMORY[0x1E0DEE9E8];
    v45 = MEMORY[0x1E0DEE9E8];
    swift_bridgeObjectRetain();
    v39[4] = __CocoaSet.makeIterator()();
    v13 = __CocoaSet.Iterator.next()();
    if (v13)
    {
      v14 = v13;
      v39[3] = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
      v40 = a2 + 56;
      v39[2] = MEMORY[0x1E0DEE9B0] + 8;
      do
      {
        v43 = v14;
        swift_dynamicCast();
        v21 = objc_msgSend(v44, sel_URL);
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        if (*(_QWORD *)(a2 + 16)
          && (lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]), v22 = dispatch thunk of Hashable._rawHashValue(seed:)(), v23 = -1 << *(_BYTE *)(a2 + 32), v24 = v22 & ~v23, ((*(_QWORD *)(v40 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) != 0))
        {
          v25 = ~v23;
          v26 = v41[9];
          v27 = (void (*)(char *, unint64_t, uint64_t))v41[2];
          while (1)
          {
            v28 = a2;
            v27(v9, *(_QWORD *)(a2 + 48) + v26 * v24, v6);
            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
            v29 = dispatch thunk of static Equatable.== infix(_:_:)();
            v30 = (void (*)(char *, uint64_t))v41[1];
            v30(v9, v6);
            if ((v29 & 1) != 0)
              break;
            v24 = (v24 + 1) & v25;
            a2 = v28;
            if (((*(_QWORD *)(v40 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
              goto LABEL_13;
          }
          v30(v42, v6);

          a2 = v28;
        }
        else
        {
LABEL_13:
          ((void (*)(char *, uint64_t))v41[1])(v42, v6);
          v31 = v44;
          v32 = v45;
          v33 = *(_QWORD *)(v45 + 16);
          if (*(_QWORD *)(v45 + 24) <= v33)
          {
            specialized _NativeSet.resize(capacity:)(v33 + 1);
            v32 = v45;
          }
          result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v32 + 40));
          v16 = v32 + 56;
          v17 = -1 << *(_BYTE *)(v32 + 32);
          v18 = result & ~v17;
          v19 = v18 >> 6;
          if (((-1 << v18) & ~*(_QWORD *)(v32 + 56 + 8 * (v18 >> 6))) != 0)
          {
            v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v32 + 56 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v34 = 0;
            v35 = (unint64_t)(63 - v17) >> 6;
            do
            {
              if (++v19 == v35 && (v34 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              v36 = v19 == v35;
              if (v19 == v35)
                v19 = 0;
              v34 |= v36;
              v37 = *(_QWORD *)(v16 + 8 * v19);
            }
            while (v37 == -1);
            v20 = __clz(__rbit64(~v37)) + (v19 << 6);
          }
          *(_QWORD *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
          *(_QWORD *)(*(_QWORD *)(v32 + 48) + 8 * v20) = v31;
          ++*(_QWORD *)(v32 + 16);
        }
        v14 = __CocoaSet.Iterator.next()();
      }
      while (v14);
      v3 = v45;
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    v38 = specialized _NativeSet.filter(_:)(a1, a2);
    if (!v2)
      return v38;
  }
  return v3;
}

id specialized AppSceneDelegate.makeSceneHostWindow(restorationSceneItemID:restorationData:connectionOptions:urlContexts:role:windowScene:delegate:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4, Swift::Int *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unsigned __int8 v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  Swift::Int *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  Swift::Int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  Class v129;
  id v130;
  _QWORD *v131;
  _QWORD *v132;
  id v133;
  void *v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  id v140;
  id v141;
  id v142;
  id v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  Swift::Int v153;
  uint64_t v154;
  NSObject *v155;
  os_log_type_t v156;
  uint8_t *v157;
  uint8_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  Class v180;
  id v181;
  id v182;
  id v183;
  id v184;
  id v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  _QWORD *v196;
  unint64_t *v197;
  uint64_t v198;
  unint64_t *v199;
  __int128 v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  unint64_t v214;
  int v215;
  uint64_t v216;
  Class v217;
  id v218;
  _QWORD *v219;
  void *v220;
  objc_class *v221;
  Class v222;
  id v223;
  _QWORD *v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  Class v235;
  id v236;
  uint64_t v237;
  Swift::UInt v238;
  uint64_t v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned __int8 v244;
  uint64_t v245;
  id v246;
  uint64_t v247;
  void *v248;
  id v249;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  __int128 v255;
  uint64_t v256;
  uint64_t v257;
  __int128 v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  uint64_t v262;
  Swift::Int *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  id v271;
  void *v272;
  uint64_t v273;
  _QWORD *v274;
  __int128 v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char v282;
  uint64_t v283[34];
  _OWORD v284[21];
  _OWORD v285[17];
  __int128 v286;
  unsigned __int128 v287;
  __int128 v288;
  __int128 v289;
  _OWORD v290[17];
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  _QWORD v295[37];
  void *v296;
  Swift::Int *v297;
  Swift::Int *v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char v310;
  _BYTE v311[288];

  v260 = a8;
  v261 = a7;
  v273 = a6;
  v263 = a5;
  v13 = type metadata accessor for Logger();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  *((_QWORD *)&v258 + 1) = (char *)&v251 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v262 = (uint64_t)&v251 - v20;
  v21 = objc_msgSend(a4, sel_userActivities, v19);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSUserActivity);
  lazy protocol witness table accessor for type UIScene and conformance NSObject(&lazy protocol witness table cache variable for type NSUserActivity and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for NSUserActivity);
  v22 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v270 = (void *)specialized Collection.first.getter(v22);
  swift_bridgeObjectRelease();
  if (!static AppGraph.shared)
    goto LABEL_222;
  v257 = v14;
  *(_QWORD *)&v258 = v13;
  v23 = a3;
  v24 = *(_DWORD *)(static AppGraph.shared + 204);
  LODWORD(v259) = *MEMORY[0x1E0CFED28];
  v268 = static AppGraph.shared;
  if (v24 == (_DWORD)v259)
  {
    v25 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v25 = *(_QWORD **)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  memset(v311, 0, 272);
  v274 = v25;
  if (a3 != 255)
  {
    v48 = v25[2];
    if (!v48)
    {
      swift_retain();
LABEL_58:
      memset(v290, 0, sizeof(v290));
      goto LABEL_76;
    }
    v49 = (uint64_t)(v25 + 4);
    LODWORD(v272) = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of SceneList.Item(v49, (uint64_t)v285);
      v51 = *((_QWORD *)&v285[8] + 1);
      v52 = *(_QWORD *)&v285[8];
      if ((v285[9] & 1) == 0)
        break;
      v53 = BYTE8(v285[8]);
      if ((v23 & 1) != 0)
      {
        if (*(_QWORD *)&v285[8] == a1 && BYTE8(v285[8]) == (_DWORD)v272)
          goto LABEL_65;
        goto LABEL_35;
      }
      *(_QWORD *)&v290[0] = _typeName(_:qualified:)();
      *((_QWORD *)&v290[0] + 1) = v54;
      v55._countAndFlagsBits = 45;
      v55._object = (void *)0xE100000000000000;
      String.append(_:)(v55);
      LOBYTE(v284[0]) = v53;
      v56._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      v51 = *((_QWORD *)&v290[0] + 1);
      v57 = *(_QWORD *)&v290[0];
      swift_bridgeObjectRetain();
      v58 = a2;
      if (v57 == a1)
        goto LABEL_48;
LABEL_49:
      v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v63 & 1) != 0)
        goto LABEL_65;
LABEL_35:
      outlined destroy of SceneList.Item((uint64_t)v285);
      v49 += 272;
      if (!--v48)
      {
        swift_bridgeObjectRelease();
        goto LABEL_58;
      }
    }
    if ((v23 & 1) == 0)
    {
      v59 = *(_QWORD *)&v285[8] == a1 && *((_QWORD *)&v285[8] + 1) == a2;
      if (v59 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_65;
      goto LABEL_35;
    }
    swift_bridgeObjectRetain();
    *(_QWORD *)&v290[0] = _typeName(_:qualified:)();
    *((_QWORD *)&v290[0] + 1) = v60;
    v61._countAndFlagsBits = 45;
    v61._object = (void *)0xE100000000000000;
    String.append(_:)(v61);
    LOBYTE(v284[0]) = (_BYTE)v272;
    v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v62);
    v25 = v274;
    swift_bridgeObjectRelease();
    v58 = *((_QWORD *)&v290[0] + 1);
    if (v52 != *(_QWORD *)&v290[0])
      goto LABEL_49;
LABEL_48:
    if (v51 == v58)
    {
      swift_bridgeObjectRelease_n();
LABEL_65:
      swift_bridgeObjectRelease();
      memcpy(v290, v285, sizeof(v290));
LABEL_76:
      outlined destroy of AccessibilityTableContext?((uint64_t)v311, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
      goto LABEL_77;
    }
    goto LABEL_49;
  }
  swift_retain();
  v26 = specialized AppSceneDelegate.openWindowByIDSceneID(from:)(v270);
  if (v28 == 0xFF)
  {
    if (one-time initialization token for clarityUI != -1)
      swift_once();
    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v66 = v65;
    if (v64 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v66 == v67)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v68 & 1) == 0)
      {
        v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v72 = v71;
        if (v70 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v72 == v73)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v74 & 1) == 0)
            goto LABEL_78;
        }
        v69 = v25;
        if (v25[2])
        {
          swift_bridgeObjectRetain();
          outlined init with copy of SceneList.Item((uint64_t)(v25 + 4), (uint64_t)v285);
          outlined init with copy of SceneList.Item.Value((uint64_t *)v285, (uint64_t)v290);
          __asm { BR              X9 }
        }
        goto LABEL_75;
      }
    }
    v69 = v25;
    if (v25[2])
    {
      swift_bridgeObjectRetain();
      outlined init with copy of SceneList.Item((uint64_t)(v25 + 4), (uint64_t)v285);
      outlined init with copy of SceneList.Item.Value((uint64_t *)v285, (uint64_t)v290);
      __asm { BR              X9 }
    }
LABEL_75:
    memset(v290, 0, sizeof(v290));
    v25 = v69;
    goto LABEL_76;
  }
  v29 = v26;
  v30 = v27;
  v31 = v28;
  v32 = v25[2];
  if (!v32)
  {
LABEL_63:
    memset(v290, 0, sizeof(v290));
    goto LABEL_71;
  }
  v33 = (uint64_t)(v25 + 4);
  LODWORD(v272) = v27;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of SceneList.Item(v33, (uint64_t)v285);
    v36 = *((_QWORD *)&v285[8] + 1);
    v35 = *(_QWORD *)&v285[8];
    if ((v285[9] & 1) == 0)
      break;
    v37 = BYTE8(v285[8]);
    if ((v31 & 1) == 0)
    {
      *(_QWORD *)&v290[0] = _typeName(_:qualified:)();
      *((_QWORD *)&v290[0] + 1) = v38;
      v39._countAndFlagsBits = 45;
      v39._object = (void *)0xE100000000000000;
      String.append(_:)(v39);
      LOBYTE(v284[0]) = v37;
      v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v36 = *((_QWORD *)&v290[0] + 1);
      v41 = *(_QWORD *)&v290[0];
      swift_bridgeObjectRetain();
      v42 = v30;
      if (v41 == v29)
        goto LABEL_26;
      goto LABEL_27;
    }
    if (*(_QWORD *)&v285[8] == v29 && BYTE8(v285[8]) == (_DWORD)v272)
      goto LABEL_70;
LABEL_13:
    outlined destroy of SceneList.Item((uint64_t)v285);
    v33 += 272;
    if (!--v32)
    {
      swift_bridgeObjectRelease();
      goto LABEL_63;
    }
  }
  if ((v31 & 1) == 0)
  {
    v43 = *(_QWORD *)&v285[8] == v29 && *((_QWORD *)&v285[8] + 1) == v30;
    if (v43 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_70;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  *(_QWORD *)&v290[0] = _typeName(_:qualified:)();
  *((_QWORD *)&v290[0] + 1) = v44;
  v45._countAndFlagsBits = 45;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  LOBYTE(v284[0]) = (_BYTE)v272;
  v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v46);
  v25 = v274;
  swift_bridgeObjectRelease();
  v42 = *((_QWORD *)&v290[0] + 1);
  if (v35 != *(_QWORD *)&v290[0])
    goto LABEL_27;
LABEL_26:
  if (v36 != v42)
  {
LABEL_27:
    v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v47 & 1) != 0)
      goto LABEL_70;
    goto LABEL_13;
  }
  swift_bridgeObjectRelease_n();
LABEL_70:
  swift_bridgeObjectRelease();
  memcpy(v290, v285, sizeof(v290));
LABEL_71:
  outlined destroy of AccessibilityTableContext?((uint64_t)v311, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
  outlined consume of SceneID?(v29, v30, v31);
LABEL_77:
  outlined init with take of Image.Resolved?((uint64_t)v290, (uint64_t)v311, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
LABEL_78:
  if (one-time initialization token for carPlay != -1)
    swift_once();
  v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v77 = v76;
  if (v75 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v77 == v78)
    v79 = 1;
  else
    v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v269 = swift_allocObject();
  v272 = (void *)(v269 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v79 & 1) != 0 && v25[2])
  {
    swift_bridgeObjectRetain();
    outlined init with copy of SceneList.Item((uint64_t)(v25 + 4), (uint64_t)v285);
    outlined init with copy of SceneList.Item.Value((uint64_t *)v285, (uint64_t)v284);
    __asm { BR              X9 }
  }
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v311, (uint64_t)v285, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
  if (*(_QWORD *)&v285[16])
  {
LABEL_88:
    memcpy(v290, v285, sizeof(v290));
    memcpy(v272, v290, 0x110uLL);
    v80 = v262;
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v285, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
    v81 = v25[2];
    if (!v81)
      goto LABEL_219;
    v82 = (uint64_t)(v25 + 4);
    swift_bridgeObjectRetain();
    v267 = v25 + 4;
    do
    {
      outlined init with copy of SceneList.Item(v82, (uint64_t)v285);
      outlined init with copy of SceneList.Item.Value((uint64_t *)v285, (uint64_t)v284);
      if (BYTE9(v284[7]) == 5)
      {
        v83 = v284[0];
        v84 = v284[1];
        v85 = *((_QWORD *)&v284[1] + 1);
        v86 = *(_QWORD *)&v284[2];
        if (*(_QWORD *)&v284[2] >= 3uLL)
        {
          if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v85 && v86 == v87)
          {
            swift_bridgeObjectRelease();
            outlined consume of SceneID(v83, *((uint64_t *)&v83 + 1), v84);
            outlined consume of UISceneAdaptorConfiguration.Kind(v85, v86);
            swift_release();
            v25 = v274;
LABEL_112:
            swift_bridgeObjectRelease();
            goto LABEL_88;
          }
          LODWORD(v271) = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          outlined consume of SceneID(v83, *((uint64_t *)&v83 + 1), v84);
          outlined consume of UISceneAdaptorConfiguration.Kind(v85, v86);
          swift_release();
          v25 = v274;
          if ((v271 & 1) != 0)
            goto LABEL_112;
        }
        else
        {
          outlined consume of SceneID(*(uint64_t *)&v284[0], *((uint64_t *)&v284[0] + 1), v284[1]);
          outlined consume of UISceneAdaptorConfiguration.Kind(v85, v86);
          swift_release();
        }
      }
      else
      {
        outlined destroy of SceneList.Item.Value((uint64_t)v284);
      }
      outlined destroy of SceneList.Item((uint64_t)v285);
      v82 += 272;
      --v81;
    }
    while (v81);
    swift_bridgeObjectRelease();
    v88 = v25[2];
    if (!v88)
      goto LABEL_219;
    swift_bridgeObjectRetain();
    v89 = (uint64_t)v267;
    while (1)
    {
      outlined init with copy of SceneList.Item(v89, (uint64_t)v285);
      outlined init with copy of SceneList.Item.Value((uint64_t *)v285, (uint64_t)v284);
      if (BYTE9(v284[7]) != 5)
        __asm { BR              X10 }
      v90 = *(_QWORD *)&v284[2];
      if (*(_QWORD *)&v284[2] != 1)
        break;
      outlined consume of SceneID(*(uint64_t *)&v284[0], *((uint64_t *)&v284[0] + 1), v284[1]);
      swift_release();
      outlined destroy of SceneList.Item((uint64_t)v285);
      v89 += 272;
      if (!--v88)
      {
        swift_bridgeObjectRelease();
        if (v25[2])
        {
          outlined init with copy of SceneList.Item((uint64_t)v267, (uint64_t)v290);
          v80 = v262;
          goto LABEL_117;
        }
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
LABEL_222:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x187128EE4);
      }
    }
    if (*(_QWORD *)&v284[2])
    {
      v80 = v262;
      if (*(_QWORD *)&v284[2] == 2)
      {
        outlined consume of SceneID(*(uint64_t *)&v284[0], *((uint64_t *)&v284[0] + 1), v284[1]);
      }
      else
      {
        v91 = *((_QWORD *)&v284[1] + 1);
        outlined consume of SceneID(*(uint64_t *)&v284[0], *((uint64_t *)&v284[0] + 1), v284[1]);
        outlined consume of UISceneAdaptorConfiguration.Kind(v91, v90);
      }
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      outlined consume of SceneID(*(uint64_t *)&v284[0], *((uint64_t *)&v284[0] + 1), v284[1]);
      swift_bridgeObjectRelease();
      swift_release();
      v80 = v262;
    }
    memcpy(v290, v285, sizeof(v290));
LABEL_117:
    memcpy(v272, v290, 0x110uLL);
  }
  v92 = swift_bridgeObjectRetain();
  v93 = (void *)specialized Collection.first.getter(v92);
  swift_bridgeObjectRelease();
  if (v93)
  {
    v94 = objc_msgSend(v93, sel_URL);

    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    v95 = type metadata accessor for URL();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v80, 0, 1, v95);
  }
  else
  {
    v96 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56))(v80, 1, 1, v96);
  }
  v97 = specialized static SceneBridge.targetContentIdentifierForExternalEvent(userActivity:url:)(v270, v80);
  v271 = v98;
  outlined destroy of TaskPriority?(v80, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  outlined init with copy of SceneList.Item.Value((uint64_t *)v272, (uint64_t)&v296);
  v273 = a9;
  switch(v310)
  {
    case 0:
      *(_QWORD *)&v258 = v97;
      v99 = (uint64_t)v296;
      v100 = (uint64_t)v297;
      v101 = v298;
      v102 = v299;
      v103 = v300;
      v254 = v301;
      v104 = v302;
      v105 = v303;
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v311, (uint64_t)v290, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
      v106 = *(_QWORD *)&v290[16];
      swift_retain();
      outlined copy of Text?(v100, (uint64_t)v101, v102, v103);
      outlined copy of AppIntentExecutor?(v104);
      v266 = v104;
      v267 = (_QWORD *)v99;
      v264 = v100;
      v265 = v105;
      v262 = v102;
      v263 = v101;
      v259 = v103;
      if (v106)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of AccessibilityTableContext?((uint64_t)v290, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
        v107 = v100;
        v108 = (uint64_t)v101;
        v109 = v102;
        v110 = v273;
LABEL_124:
        v111 = v254;
        goto LABEL_192;
      }
      outlined destroy of AccessibilityTableContext?((uint64_t)v290, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
      if (!v271)
      {
        v294 = 0u;
        v293 = 0u;
        v292 = 0u;
        v291 = 0u;
        memset(v290, 0, sizeof(v290));
        swift_bridgeObjectRelease();
        goto LABEL_190;
      }
      v159 = v25[2];
      if (v159)
      {
        v160 = (uint64_t)(v25 + 4);
        swift_bridgeObjectRetain();
        *((_QWORD *)&v258 + 1) = 0;
        v161 = v159;
        while (1)
        {
          outlined init with copy of SceneList.Item(v160, (uint64_t)v283);
          outlined init with copy of SceneList.Item.Value(v283, (uint64_t)&v275);
          if (v282)
          {
            outlined destroy of SceneList.Item.Value((uint64_t)&v275);
          }
          else
          {
            v162 = *((_QWORD *)&v275 + 1);
            v163 = v276;
            v164 = v277;
            v165 = v278;
            v166 = v281;
            v167 = v283[24];
            if (v283[24])
            {
              v255 = v275;
              v256 = v276;
              v257 = v278;
              v168 = v280;
              v253 = v279;
              swift_bridgeObjectRetain();
              v169 = *((_QWORD *)&v258 + 1);
              v170 = specialized Sequence.contains(where:)(v167);
              *((_QWORD *)&v258 + 1) = v169;
              swift_bridgeObjectRelease();
              if ((v170 & 1) != 0)
              {
                swift_bridgeObjectRelease();
                memcpy(v284, v283, 0x110uLL);
                memcpy(v285, v284, sizeof(v285));
                memcpy(v290, v285, sizeof(v290));
                v291 = v255;
                *(_QWORD *)&v292 = v256;
                *((_QWORD *)&v292 + 1) = v164;
                *(_QWORD *)&v293 = v257;
                *((_QWORD *)&v293 + 1) = v253;
                *(_QWORD *)&v294 = v168;
                *((_QWORD *)&v294 + 1) = v166;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v105 = v265;
                v104 = v266;
                v101 = v263;
                v100 = v264;
                v102 = v262;
                v103 = v259;
                v99 = (uint64_t)v267;
                goto LABEL_190;
              }
              swift_release();
              outlined consume of Text?(*((uint64_t *)&v255 + 1), v256, v164, v257);
              v171 = v168;
            }
            else
            {
              v172 = v280;
              swift_release();
              outlined consume of Text?(v162, v163, v164, v165);
              v171 = v172;
            }
            outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v171);
            v25 = v274;
          }
          outlined destroy of SceneList.Item((uint64_t)v283);
          v160 += 272;
          if (!--v161)
          {
            swift_bridgeObjectRelease();
            v105 = v265;
            v104 = v266;
            v99 = (uint64_t)v267;
            break;
          }
        }
      }
      v289 = 0u;
      v288 = 0u;
      v287 = 0u;
      v286 = 0u;
      memset(v285, 0, sizeof(v285));
      if (v159)
      {
        swift_bridgeObjectRetain();
        v196 = v25 + 28;
        v197 = &lazy cache variable for type metadata for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?;
        do
        {
          outlined init with copy of (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?((uint64_t)v285, (uint64_t)v284);
          v198 = *(_QWORD *)&v284[16];
          outlined destroy of TaskPriority?((uint64_t)v284, v197, (uint64_t (*)(uint64_t))type metadata accessor for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>));
          if (!v198)
          {
            outlined init with copy of SceneList.Item.Value(v196 - 24, (uint64_t)v284);
            if (BYTE9(v284[7]))
            {
              outlined destroy of SceneList.Item.Value((uint64_t)v284);
            }
            else
            {
              v199 = v197;
              v200 = v284[0];
              v201 = *((_QWORD *)&v284[1] + 1);
              v202 = *(_QWORD *)&v284[1];
              v203 = *(_QWORD *)&v284[2];
              v258 = v284[3];
              if (*v196)
              {
                swift_release();
                outlined consume of Text?(*((uint64_t *)&v200 + 1), v202, v201, v203);
                outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v258);
                v99 = (uint64_t)v267;
                v197 = v199;
              }
              else
              {
                v257 = *((_QWORD *)&v284[2] + 1);
                outlined destroy of TaskPriority?((uint64_t)v285, v199, (uint64_t (*)(uint64_t))type metadata accessor for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>));
                outlined init with copy of SceneList.Item((uint64_t)(v196 - 24), (uint64_t)v285);
                v286 = v200;
                v287 = __PAIR128__(v201, v202);
                v197 = &lazy cache variable for type metadata for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?;
                *(_QWORD *)&v288 = v203;
                *((_QWORD *)&v288 + 1) = v257;
                v289 = v258;
                v99 = (uint64_t)v267;
              }
            }
          }
          v196 += 34;
          --v159;
        }
        while (v159);
        swift_bridgeObjectRelease();
        v105 = v265;
        v104 = v266;
      }
      outlined init with take of (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?((uint64_t)v285, (uint64_t)v290);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v101 = v263;
      v100 = v264;
      v102 = v262;
      v103 = v259;
LABEL_190:
      v110 = v273;
      if (!*(_QWORD *)&v290[16])
      {
        outlined destroy of TaskPriority?((uint64_t)v290, &lazy cache variable for type metadata for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?, (uint64_t (*)(uint64_t))type metadata accessor for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>));
        v107 = v100;
        v108 = (uint64_t)v101;
        v109 = v102;
        goto LABEL_124;
      }
      swift_release();
      outlined consume of Text?(v100, (uint64_t)v101, v102, v103);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v104);
      v204 = *((_QWORD *)&v291 + 1);
      v99 = v291;
      v109 = *((_QWORD *)&v292 + 1);
      v205 = v292;
      v111 = *((_QWORD *)&v293 + 1);
      v103 = v293;
      v105 = *((_QWORD *)&v294 + 1);
      v104 = v294;
      memcpy(v295, v290, 0x110uLL);
      outlined assign with take of SceneList.Item((uint64_t)v295, (uint64_t)v272);
      v108 = v205;
      v107 = v204;
LABEL_192:
      v283[0] = v99;
      v283[1] = v107;
      v283[2] = v108;
      v283[3] = v109;
      v283[4] = v103;
      v283[5] = v111;
      v283[6] = v104;
      v283[7] = v105;
      *(_QWORD *)(v110 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_presentationDataType) = v111;
      v206 = v107;
      v207 = v108;
      swift_retain();
      outlined copy of Text?(v206, v207, v109, v103);
      outlined copy of AppIntentExecutor?(v104);
      specialized AppSceneDelegate.openWindowPresentedValue<A>(from:config:)(v270, (uint64_t)v283, (uint64_t)v285);
      swift_release();
      *(_QWORD *)&v258 = v207;
      *((_QWORD *)&v258 + 1) = v206;
      outlined consume of Text?(v206, v207, v109, v103);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v104);
      if (*((_QWORD *)&v285[1] + 1))
      {
        v290[0] = v285[0];
        v290[1] = v285[1];
        v208 = *((_QWORD *)&v285[2] + 1);
        v209 = *(_QWORD *)&v285[3];
        v290[2] = v285[2];
        *(_QWORD *)&v290[3] = *(_QWORD *)&v285[3];
        outlined init with copy of AnyHashable((uint64_t)v290, (uint64_t)v285);
        *((_QWORD *)&v285[2] + 1) = v208;
        *(_QWORD *)&v285[3] = v209;
        v284[0] = v285[0];
        v284[1] = v285[1];
        *(_QWORD *)&v284[2] = *(_QWORD *)&v285[2];
        v210 = v273 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_presentationDataValue;
        swift_beginAccess();
        outlined copy of Data._Representation(v208, v209);
        v211 = v210;
        v110 = v273;
        outlined assign with take of AnyHashable?((uint64_t)v284, v211);
        swift_endAccess();
        outlined init with copy of AnyHashable((uint64_t)v290, (uint64_t)v285);
        *((_QWORD *)&v285[2] + 1) = v208;
        *(_QWORD *)&v285[3] = v209;
        v212 = (uint64_t *)(v110 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_rawPresentationDataValue);
        v213 = *(_QWORD *)(v110 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_rawPresentationDataValue);
        v214 = *(_QWORD *)(v110 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_rawPresentationDataValue + 8);
        *v212 = v208;
        v212[1] = v209;
        outlined consume of Data?(v213, v214);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v290, (uint64_t (*)(_QWORD))type metadata accessor for (AnyHashable, Data));
        outlined destroy of AnyHashable((uint64_t)v285);
      }
      else
      {
        outlined destroy of TaskPriority?((uint64_t)v285, &lazy cache variable for type metadata for (AnyHashable, Data)?, (uint64_t (*)(uint64_t))type metadata accessor for (AnyHashable, Data));
      }
      if (*(_QWORD *)(v269 + 184))
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>, (uint64_t)&type metadata for SceneAllowsSecureDrawingKey, (uint64_t)&protocol witness table for SceneAllowsSecureDrawingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
        lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>();
        swift_retain_n();
        swift_retain_n();
        v110 = v273;
        PropertyList.Tracker.value<A>(_:for:)();
        swift_release_n();
      }
      else
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>, (uint64_t)&type metadata for SceneAllowsSecureDrawingKey, (uint64_t)&protocol witness table for SceneAllowsSecureDrawingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
        lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>();
        swift_retain_n();
        PropertyList.subscript.getter();
      }
      swift_release_n();
      v215 = LOBYTE(v290[0]);
      v216 = swift_retain();
      AppSceneDelegate.makeRootView(_:)(v216, v290);
      swift_release();
      outlined init with copy of ModifiedContent<AnyView, RootModifier>((uint64_t)v290, (uint64_t)v285);
      outlined init with copy of ModifiedContent<AnyView, RootModifier>((uint64_t)v285, (uint64_t)v284);
      if (v215 == 1)
      {
        type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(0, &lazy cache variable for type metadata for _UISecureHostingController<ModifiedContent<AnyView, RootModifier>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UISecureHostingController);
        v218 = objc_allocWithZone(v217);
        outlined init with copy of ModifiedContent<AnyView, RootModifier>((uint64_t)v284, (uint64_t)v295);
        v219 = specialized UIHostingController.init(rootView:)((uint64_t)v295);
        lazy protocol witness table accessor for type SecureDrawingViewGraphFeature and conformance SecureDrawingViewGraphFeature();
        swift_retain();
        ViewGraph.append<A>(feature:)();
        swift_release();
        outlined destroy of ModifiedContent<AnyView, RootModifier>((uint64_t)v284);
        outlined destroy of ModifiedContent<AnyView, RootModifier>((uint64_t)v285);
        v274 = v219;
        v220 = v261;
        v138 = v269;
        specialized configureHostingController #1 <A>(_:) in AppSceneDelegate.makeSceneHostWindow(restorationSceneItemID:restorationData:connectionOptions:urlContexts:role:windowScene:delegate:)((uint64_t)v219, v110, v260, v269, v261);
        v221 = (objc_class *)type metadata accessor for UISecureWindow();
      }
      else
      {
        type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<ModifiedContent<AnyView, RootModifier>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
        v223 = objc_allocWithZone(v222);
        v224 = specialized UIHostingController.init(rootView:)((uint64_t)v284);
        outlined destroy of ModifiedContent<AnyView, RootModifier>((uint64_t)v285);
        v274 = v224;
        v225 = (uint64_t)v224;
        v220 = v261;
        v138 = v269;
        specialized configureHostingController #1 <A>(_:) in AppSceneDelegate.makeSceneHostWindow(restorationSceneItemID:restorationData:connectionOptions:urlContexts:role:windowScene:delegate:)(v225, v110, v260, v269, v261);
        v221 = (objc_class *)MEMORY[0x1E0DC3F98];
      }
      v271 = objc_msgSend(objc_allocWithZone(v221), sel_initWithWindowScene_, v220);
      swift_release();
      outlined consume of Text?(*((uint64_t *)&v258 + 1), v258, v109, v103);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v104);
      swift_release();
      outlined consume of Text?(v264, (uint64_t)v263, v262, v259);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v266);
      outlined destroy of ModifiedContent<AnyView, RootModifier>((uint64_t)v290);
LABEL_208:
      v186 = v110;
LABEL_209:
      swift_beginAccess();
      v237 = v138;
      v238 = *(_QWORD *)(v138 + 144);
      v239 = *(_QWORD *)(v138 + 152);
      v240 = *(_BYTE *)(v138 + 160);
      v241 = v186 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID;
      v242 = *(_QWORD *)(v186 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID);
      v243 = *(_QWORD *)(v186 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID + 8);
      *(_QWORD *)v241 = v238;
      *(_QWORD *)(v241 + 8) = v239;
      v244 = *(_BYTE *)(v241 + 16);
      *(_BYTE *)(v241 + 16) = v240;
      v245 = *(_QWORD *)(v237 + 168);
      outlined copy of SceneID(v238, v239, v240);
      outlined consume of SceneID?(v242, v243, v244);
      *(_QWORD *)(v186 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_lastVersion) = v245;
      if (one-time initialization token for shared != -1)
        swift_once();
      outlined copy of SceneID(v238, v239, v240);
      swift_retain();
      v246 = v274;
      PlatformSceneCache.addHost(_:id:)((uint64_t)v274, v238, v239, v240);
      outlined consume of SceneID(v238, v239, v240);
      swift_release();
      if (!*(_QWORD *)(v237 + 200))
        goto LABEL_216;
      v247 = swift_bridgeObjectRetain();
      specialized AccessibilityProperties.subscript.getter(v247, (uint64_t)v285);
      if (!*((_QWORD *)&v285[0] + 1))
        goto LABEL_216;
      if (LOBYTE(v285[1]) >= 2u)
      {
        swift_bridgeObjectRelease();
LABEL_216:
        v248 = 0;
      }
      else
      {
        v248 = (void *)MEMORY[0x18D75CC88](*(_QWORD *)&v285[0], *((_QWORD *)&v285[0] + 1));
        swift_bridgeObjectRelease();
      }
      v249 = v271;
      objc_msgSend(v271, sel_setAccessibilityIdentifier_, v248);
      swift_bridgeObjectRelease();

      objc_msgSend(v249, sel_setRootViewController_, v246);
      swift_release();

      outlined destroy of AccessibilityTableContext?((uint64_t)v311, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
      swift_release();
      return v249;
    case 2:
      swift_bridgeObjectRelease();
      v120 = v25[2];
      if (!v120)
        goto LABEL_135;
      v121 = (uint64_t)(v25 + 4);
      swift_bridgeObjectRetain();
      while (1)
      {
        outlined init with copy of SceneList.Item(v121, (uint64_t)v284);
        outlined init with copy of SceneList.Item.Value((uint64_t *)v284, (uint64_t)v295);
        if (BYTE1(v295[15]) == 7)
          break;
        outlined destroy of SceneList.Item.Value((uint64_t)v295);
        outlined destroy of SceneList.Item((uint64_t)v284);
        v121 += 272;
        if (!--v120)
        {
          swift_bridgeObjectRelease();
LABEL_135:
          memset(v285, 0, sizeof(v285));
          swift_bridgeObjectRelease();
          goto LABEL_136;
        }
      }
      v187 = v295[3];
      v188 = v295[4];
      v189 = v295[5];
      v190 = v295[6];
      v191 = v295[9];
      v266 = v295[12];
      v267 = (_QWORD *)v295[11];
      v271 = (id)v295[13];
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of Text?(v187, v188, v189, v190);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v191);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v267);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      memcpy(v285, v284, sizeof(v285));
      swift_bridgeObjectRelease();
      if (*(_QWORD *)&v285[16])
      {
        memcpy(v290, v285, sizeof(v290));
        outlined init with copy of SceneList.Item.Value((uint64_t *)v290, (uint64_t)v285);
        v110 = v273;
        if (BYTE9(v285[7]) == 7)
        {
          v192 = *((_QWORD *)&v285[3] + 1);
          v193 = *((_QWORD *)&v285[4] + 1);
          v194 = *(_DWORD *)(v268 + 204);
          *(_QWORD *)&v258 = *(_QWORD *)&v285[3];
          *((_QWORD *)&v258 + 1) = *(_QWORD *)&v285[4];
          v265 = *(_QWORD *)&v285[2];
          v266 = *((_QWORD *)&v285[1] + 1);
          v263 = *(Swift::Int **)&v285[6];
          v264 = *((_QWORD *)&v285[2] + 1);
          v271 = (id)*((_QWORD *)&v285[0] + 1);
          v267 = *(_QWORD **)&v285[1];
          v274 = *(_QWORD **)&v285[0];
          v262 = *((_QWORD *)&v285[5] + 1);
          v260 = *(_QWORD *)&v285[5];
          v257 = *((_QWORD *)&v285[6] + 1);
          if (v194 == (_DWORD)v259)
          {
            v195 = MEMORY[0x1E0DEE9D8];
          }
          else
          {
            v195 = *(_QWORD *)AGGraphGetValue();
            swift_bridgeObjectRetain();
          }
          v226 = SceneList.allDocumentGroups()(v195);
          swift_bridgeObjectRelease();
          swift_retain();
          swift_bridgeObjectRetain();
          v227 = v265;
          v228 = v266;
          v229 = v258;
          outlined copy of Text?(v266, v265, v264, v258);
          swift_bridgeObjectRetain();
          v230 = v192;
          *((_QWORD *)&v255 + 1) = v192;
          swift_retain();
          v231 = v193;
          v256 = v193;
          outlined copy of AppIntentExecutor?(v193);
          v232 = v262;
          outlined copy of AppIntentExecutor?(v262);
          v233 = v257;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v234 = v273;
          AppSceneDelegate.rootModifier.getter((uint64_t)&v285[7] + 8);
          swift_bridgeObjectRelease();
          *(_QWORD *)&v285[0] = v274;
          *((_QWORD *)&v285[0] + 1) = v271;
          *(_QWORD *)&v285[1] = v267;
          *((_QWORD *)&v285[1] + 1) = v228;
          *(_QWORD *)&v285[2] = v227;
          LOBYTE(v227) = v264;
          *((_QWORD *)&v285[2] + 1) = v264;
          *(_QWORD *)&v285[3] = v229;
          *((_QWORD *)&v285[3] + 1) = v230;
          *(_QWORD *)&v285[4] = *((_QWORD *)&v258 + 1);
          *((_QWORD *)&v285[4] + 1) = v231;
          *(_QWORD *)&v285[5] = v260;
          *((_QWORD *)&v285[5] + 1) = v232;
          *(_QWORD *)&v285[6] = v263;
          *((_QWORD *)&v285[6] + 1) = v233;
          *(_QWORD *)&v285[7] = v226;
          v110 = v234;
          outlined init with copy of DocumentGroupsIntroRootView((uint64_t)v285, (uint64_t)v284);
          type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIHostingController<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
          v236 = objc_allocWithZone(v235);
          v274 = specialized UIHostingController.init(rootView:)((uint64_t)v284);
          swift_release();
          swift_bridgeObjectRelease();
          outlined consume of Text?(v266, v265, v227, v229);
          swift_bridgeObjectRelease();
          swift_release();
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v256);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v262);
          swift_bridgeObjectRelease();
          outlined destroy of DocumentGroupsIntroRootView((uint64_t)v285);
        }
        else
        {
          outlined destroy of SceneList.Item.Value((uint64_t)v285);
          v274 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F20]), sel_init);
        }
        outlined destroy of SceneList.Item((uint64_t)v290);
        goto LABEL_207;
      }
LABEL_136:
      outlined destroy of AccessibilityTableContext?((uint64_t)v285, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
      v110 = v273;
      if (*(_DWORD *)(v268 + 204) == (_DWORD)v259)
      {
        v122 = MEMORY[0x1E0DEE9D8];
      }
      else
      {
        v122 = *(_QWORD *)AGGraphGetValue();
        swift_bridgeObjectRetain();
      }
      v139 = SceneList.allDocumentGroups()(v122);
      swift_bridgeObjectRelease();
      if ((AppSceneDelegate.isDocumentViewControllerRootEnabled.getter() & 1) != 0)
      {
        v140 = objc_allocWithZone((Class)type metadata accessor for IdentifiedDocumentGroupDocumentCreation());
        v141 = IdentifiedDocumentGroupDocumentCreation.init(configurations:strategies:)((uint64_t)v139, MEMORY[0x1E0DEE9D8]);
        v142 = objc_allocWithZone((Class)type metadata accessor for DocumentViewController());
        v143 = specialized DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:)(v141, 0, 0);
        AppSceneDelegate.rootModifier.getter((uint64_t)v290);
        DocumentViewController.rootModifier.setter((uint64_t)v290);
        v144 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitNavigationController()), sel_initWithRootViewController_, v143);
        objc_msgSend(v144, sel_loadViewIfNeeded);
        objc_msgSend(v144, sel_setModalPresentationStyle_, 0);

        v145 = swift_bridgeObjectRetain();
        v146 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo16UIOpenURLContextCG_10Foundation3URLVs5NeverOTg50245_s7SwiftUI16AppSceneDelegateC04makeD10HostWindow33_4475FD12FD59DEBA453321BD91F6EA04011restorationD6ItemID0O4Data17connectionOptions11urlContexts4role06windowD08delegateSo8UIWindowCAA0dQ0OSg_SDys11AnyHashableVypGSo017UISceneConnectionT0CShySo16dE131CGzSo18UISceneSessionRoleaSo0zD0CAA013UIHostingViewE0_ptF10Foundation3URLVAXcfu2_33_7b38412a791237ac1c9a4b50e4b05c7bAXA5_Tf3nnnpk_nTf1cn_nTm(v145);
        swift_bridgeObjectRelease();
        v147 = (unint64_t)DocumentViewController.presentDocuments(at:)((Swift::OpaquePointer)v146);
      }
      else
      {
        AppSceneDelegate.rootModifier.getter((uint64_t)v290);
        v148 = objc_allocWithZone((Class)type metadata accessor for DocumentBrowserViewController());
        v143 = (id)DocumentBrowserViewController.init(configurations:rootModifier:)((uint64_t)v139, (uint64_t)v290);
        v149 = swift_bridgeObjectRetain();
        v150 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo16UIOpenURLContextCG_10Foundation3URLVs5NeverOTg50245_s7SwiftUI16AppSceneDelegateC04makeD10HostWindow33_4475FD12FD59DEBA453321BD91F6EA04011restorationD6ItemID0O4Data17connectionOptions11urlContexts4role06windowD08delegateSo8UIWindowCAA0dQ0OSg_SDys11AnyHashableVypGSo017UISceneConnectionT0CShySo16dE131CGzSo18UISceneSessionRoleaSo0zD0CAA013UIHostingViewE0_ptF10Foundation3URLVAXcfu2_33_7b38412a791237ac1c9a4b50e4b05c7bAXA5_Tf3nnnpk_nTf1cn_nTm(v149);
        swift_bridgeObjectRelease();
        v147 = (unint64_t)DocumentBrowserViewController.presentDocuments(at:animated:)((Swift::OpaquePointer)v150, 0);
        v144 = v143;
      }
      swift_bridgeObjectRelease();

      v274 = v144;
      if (v147)
      {
        v151 = specialized Set.init<A>(_:)(v147);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v152 = swift_bridgeObjectRetain();
        v153 = specialized Set._Variant.filter(_:)(v152, v151);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        *v263 = v153;
      }
LABEL_207:
      v138 = v269;
      v271 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F98]), sel_initWithWindowScene_, v261);
      outlined destroy of SceneList.Item.Value((uint64_t)&v296);
      goto LABEL_208;
    case 5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v123 = (uint64_t)v296;
      v124 = (uint64_t)v297;
      v125 = (char)v298;
      v267 = (_QWORD *)v299;
      v126 = v300;
      v127 = v301;
      if (v300 == 1)
      {
        *(_QWORD *)&v290[0] = v301;
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
        lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
        swift_retain();
        v128 = AnyView.init<A>(_:)();
      }
      else
      {
        swift_retain();
        v128 = v127;
      }
      v110 = v273;
      AppSceneDelegate.makeRootView(_:)(v128, v290);
      swift_release();
      type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<ModifiedContent<AnyView, RootModifier>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
      v130 = objc_allocWithZone(v129);
      v131 = specialized UIHostingController.init(rootView:)((uint64_t)v290);
      v132 = v131;
      if (v126 != 1)
        goto LABEL_146;
      v133 = objc_msgSend(v131, sel_view);
      if (!v133)
        goto LABEL_220;
      v134 = v133;
      if (one-time initialization token for clarityUIContentBackground != -1)
        swift_once();
      objc_msgSend(v134, sel_setBackgroundColor_, static UIColor.clarityUIContentBackground);

LABEL_146:
      v274 = v132;
      v135 = (uint64_t)v132;
      v136 = v261;
      v137 = v269;
      specialized configureHostingController #1 <A>(_:) in AppSceneDelegate.makeSceneHostWindow(restorationSceneItemID:restorationData:connectionOptions:urlContexts:role:windowScene:delegate:)(v135, v110, v260, v269, v261);
      v271 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F98]), sel_initWithWindowScene_, v136);
      outlined consume of SceneID(v123, v124, v125);
      outlined consume of UISceneAdaptorConfiguration.Kind((uint64_t)v267, v126);
      v138 = v137;
      swift_release();
      goto LABEL_208;
    case 7:
      swift_bridgeObjectRelease();
      v271 = v296;
      v112 = v297;
      v113 = (uint64_t)v298;
      v114 = v299;
      v115 = v300;
      v116 = v301;
      v265 = v304;
      v266 = v303;
      v253 = v302;
      v254 = v305;
      v267 = (_QWORD *)v306;
      *(_QWORD *)&v255 = v308;
      *((_QWORD *)&v255 + 1) = v307;
      v256 = v309;
      v117 = v25[2];
      if (v117)
      {
        v118 = (uint64_t)(v25 + 4);
        swift_bridgeObjectRetain();
        do
        {
          outlined init with copy of SceneList.Item(v118, (uint64_t)v290);
          outlined init with copy of SceneList.Item.Value((uint64_t *)v290, (uint64_t)v285);
          v119 = BYTE9(v285[7]);
          outlined destroy of SceneList.Item.Value((uint64_t)v285);
          outlined destroy of SceneList.Item((uint64_t)v290);
          if (v119 == 2)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_169;
          }
          v118 += 272;
          --v117;
        }
        while (v117);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      static Log.runtimeIssuesLog.getter();
      v154 = *((_QWORD *)&v258 + 1);
      Logger.init(_:)();
      v155 = Logger.logObject.getter();
      v156 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v155, v156))
      {
        v157 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v157 = 0;
        _os_log_impl(&dword_186E48000, v155, v156, "_DocumentGroupsIntro scene should be used only with\nDocumentGroup scenes in the App declaration.\nAdd a DocumentGroup scene\nor use _IntroDocumentView instead.", v157, 2u);
        v158 = v157;
        v154 = *((_QWORD *)&v258 + 1);
        MEMORY[0x18D760108](v158, -1, -1);
      }

      (*(void (**)(uint64_t, _QWORD))(v257 + 8))(v154, v258);
LABEL_169:
      if (*(_DWORD *)(v268 + 204) == (_DWORD)v259)
      {
        v173 = MEMORY[0x1E0DEE9D8];
      }
      else
      {
        v173 = *(_QWORD *)AGGraphGetValue();
        swift_bridgeObjectRetain();
      }
      v174 = SceneList.allDocumentGroups()(v173);
      swift_bridgeObjectRelease();
      v264 = v113;
      swift_retain();
      v263 = v112;
      swift_bridgeObjectRetain();
      v262 = v114;
      v260 = v115;
      v252 = v116;
      v175 = v253;
      outlined copy of Text?(v114, v115, v116, v253);
      swift_bridgeObjectRetain();
      v176 = v266;
      swift_retain();
      v177 = v254;
      outlined copy of AppIntentExecutor?(v254);
      v178 = v255;
      outlined copy of AppIntentExecutor?(*((uint64_t *)&v255 + 1));
      v179 = v256;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      AppSceneDelegate.rootModifier.getter((uint64_t)&v290[7] + 8);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v290[0] = v271;
      *((_QWORD *)&v290[0] + 1) = v263;
      *(_QWORD *)&v290[1] = v264;
      *((_QWORD *)&v290[1] + 1) = v262;
      *(_QWORD *)&v290[2] = v260;
      *((_QWORD *)&v290[2] + 1) = v116;
      *(_QWORD *)&v290[3] = v175;
      *((_QWORD *)&v290[3] + 1) = v176;
      *(_QWORD *)&v290[4] = v265;
      *((_QWORD *)&v290[4] + 1) = v177;
      *(_QWORD *)&v290[5] = v267;
      *((_QWORD *)&v290[5] + 1) = *((_QWORD *)&v178 + 1);
      *(_QWORD *)&v290[6] = v178;
      *((_QWORD *)&v290[6] + 1) = v179;
      *(_QWORD *)&v290[7] = v174;
      outlined init with copy of DocumentGroupsIntroRootView((uint64_t)v290, (uint64_t)v285);
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIHostingController<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
      v181 = objc_allocWithZone(v180);
      v182 = specialized UIHostingController.init(rootView:)((uint64_t)v285);
      v183 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitNavigationController()), sel_initWithRootViewController_, v182);

      v184 = v183;
      objc_msgSend(v184, sel_loadViewIfNeeded);
      objc_msgSend(v184, sel_setModalPresentationStyle_, 0);
      v274 = v184;

      v185 = objc_allocWithZone(MEMORY[0x1E0DC3F98]);
      v271 = objc_msgSend(v185, sel_initWithWindowScene_, v261);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Text?(v262, v260, v252, v175);
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v177);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*((uint64_t *)&v178 + 1));
      swift_bridgeObjectRelease();
      outlined destroy of DocumentGroupsIntroRootView((uint64_t)v290);
      v138 = v269;
      v186 = v273;
      goto LABEL_209;
    default:
      goto LABEL_221;
  }
}

id specialized AppSceneDelegate.stateRestorationActivity(for:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  Class isa;
  Class v28;
  __int128 v30;
  int v31;
  unint64_t v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v1 = v0;
  v2 = objc_allocWithZone(MEMORY[0x1E0CB3B10]);
  v3 = (void *)MEMORY[0x18D75CC88](0xD000000000000022, 0x8000000187BD8300);
  v4 = objc_msgSend(v2, sel_initWithActivityType_, v3);

  v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v37 = v5;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneStorageValues))
  {
    swift_retain();
    v6 = SceneStorageValues.restoredValue()();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v36 = v5;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v6, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t *)&v36);
    v5 = v36;
    v37 = v36;
    swift_release();
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)&v33 = 0xD00000000000001BLL;
  *((_QWORD *)&v33 + 1) = 0x8000000187BD8250;
  v8 = MEMORY[0x1E0DEA968];
  AnyHashable.init<A>(_:)();
  v9 = MEMORY[0x1E0DEE9B8];
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_presentationDataType))
  {
    makeStableTypeData(_:)();
    v30 = v33;
    v31 = v34;
    v10 = StrongHash.description.getter();
    v35 = v8;
    *(_QWORD *)&v33 = v10;
    *((_QWORD *)&v33 + 1) = v11;
    outlined init with take of Any(&v33, &v30);
    v12 = swift_isUniquelyReferenced_nonNull_native();
    v32 = v5;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v30, (uint64_t)&v36, v12);
    v37 = v32;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&v36);
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)&v36, &v33);
    outlined destroy of AnyHashable((uint64_t)&v36);
    outlined destroy of AccessibilityTableContext?((uint64_t)&v33, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
  }
  v32 = MEMORY[0x1E0DEE9E8];
  v13 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID);
  v14 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID + 16);
  if (v14 != 255)
  {
    v15 = *v13;
    v16 = v13[1];
    *(_QWORD *)&v33 = 0xD000000000000019;
    *((_QWORD *)&v33 + 1) = 0x8000000187BD33F0;
    outlined copy of SceneID(v15, v16, v14 & 1);
    v17 = MEMORY[0x1E0DEA968];
    AnyHashable.init<A>(_:)();
    if ((v14 & 1) != 0)
    {
      *(_QWORD *)&v33 = _typeName(_:qualified:)();
      *((_QWORD *)&v33 + 1) = v18;
      v19._countAndFlagsBits = 45;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      LOBYTE(v30) = v16;
      v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      outlined consume of SceneID?(v15, v16, v14);
      v16 = *((_QWORD *)&v33 + 1);
      v15 = v33;
    }
    v35 = v17;
    *(_QWORD *)&v33 = v15;
    *((_QWORD *)&v33 + 1) = v16;
    outlined init with take of Any(&v33, &v30);
    v21 = v37;
    v22 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v30, (uint64_t)&v36, v22);
    v37 = v21;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&v36);
    specialized Set._Variant.insert(_:)((Swift::Int *)&v36, 0xD000000000000019, 0x8000000187BD33F0);
    swift_bridgeObjectRelease();
  }
  v23 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_rawPresentationDataValue + 8);
  if (v23 >> 60 != 15)
  {
    v24 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_rawPresentationDataValue);
    *(_QWORD *)&v33 = 0xD00000000000001CLL;
    *((_QWORD *)&v33 + 1) = 0x8000000187BD8230;
    outlined copy of Data._Representation(v24, v23);
    AnyHashable.init<A>(_:)();
    v35 = MEMORY[0x1E0CB0338];
    *(_QWORD *)&v33 = v24;
    *((_QWORD *)&v33 + 1) = v23;
    outlined init with take of Any(&v33, &v30);
    outlined copy of Data._Representation(v24, v23);
    v25 = v37;
    v26 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v30, (uint64_t)&v36, v26);
    v37 = v25;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&v36);
    specialized Set._Variant.insert(_:)((Swift::Int *)&v36, 0xD00000000000001CLL, 0x8000000187BD8230);
    outlined consume of Data?(v24, v23);
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v32 + 16))
  {
    isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setRequiredUserInfoKeys_, isa);

  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v28 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_setUserInfo_, v28);

  swift_bridgeObjectRelease();
  return v4;
}

void specialized AppSceneDelegate.hostingView<A>(_:willUpdate:)(uint64_t a1)
{
  char *v2;
  void *v3;
  id v4;
  id v5;

  AppSceneDelegate.appDelegate.getter();
  v3 = *(void **)&v2[OBJC_IVAR____TtC7SwiftUI11AppDelegate_mainMenuController];
  if (v3)
  {
    v5 = v2;
    v4 = v3;

    UIKitMainMenuController.documentCommands()();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey>, (uint64_t)&type metadata for EnvironmentValues.DocumentCommandsKey, (uint64_t)&protocol witness table for EnvironmentValues.DocumentCommandsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey> and conformance EnvironmentPropertyKey<A>();
    swift_bridgeObjectRetain();
    swift_retain();
    PropertyList.subscript.setter();
    if (*(_QWORD *)(a1 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();

      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    swift_release();
  }
  else
  {

  }
}

unint64_t specialized handleConnectionOptionsCallbacks #1 <A>(_:) in AppSceneDelegate.handleConnectionOptionDefinition<A>(payload:definition:scene:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  char v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  unint64_t v20;

  if (*(_QWORD *)(result + 16))
  {
    v5 = result;
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v6 & 1) != 0)
    {
      v7 = (_BYTE *)(a3 + 16);
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * result);
      swift_beginAccess();
      v9 = (unint64_t)v8 >> 62;
      if (*v7 != 1)
      {
        if (v9)
          goto LABEL_23;
        v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        goto LABEL_7;
      }
      swift_bridgeObjectRetain();
      for (i = 1; ; i = v11 != 0)
      {
        swift_beginAccess();
        *v7 = i;
        if (v9)
        {
          if (v8 < 0)
            v7 = (_BYTE *)v8;
          else
            v7 = (_BYTE *)(v8 & 0xFFFFFFFFFFFFFF8);
          swift_bridgeObjectRetain();
          v12 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v12)
            return swift_bridgeObjectRelease();
        }
        else
        {
          v12 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!v12)
            return swift_bridgeObjectRelease();
        }
        if (v12 >= 1)
          break;
        __break(1u);
LABEL_23:
        swift_bridgeObjectRetain_n();
        v11 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
LABEL_7:
        ;
      }
      v13 = 0;
      v20 = v8 & 0xC000000000000001;
      v14 = v8;
      do
      {
        if (v20)
        {
          v15 = MEMORY[0x18D75E3BC](v13, v8);
        }
        else
        {
          v15 = *(_QWORD *)(v8 + 8 * v13 + 32);
          swift_retain();
        }
        ++v13;
        v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 80);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v19 = swift_getAssociatedConformanceWitness();
        v16(a4, AssociatedTypeWitness, AssociatedConformanceWitness, v19);
        swift_release();
        v8 = v14;
      }
      while (v12 != v13);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t specialized AppSceneDelegate.handleConnectionOptionDefinition<A>(payload:definition:scene:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[39] = a4;
  v5[40] = v4;
  v5[37] = a2;
  v5[38] = a3;
  v5[36] = a1;
  type metadata accessor for MainActor();
  v5[41] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t specialized AppSceneDelegate.handleConnectionOptionDefinition<A>(payload:definition:scene:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 296);
  swift_release();
  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 16) = 0;
  AppSceneDelegate.sceneItem()((void *)(v0 + 16));
  v5 = *(_QWORD *)(v0 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined destroy of SceneList.Item(v0 + 16);
  specialized handleConnectionOptionsCallbacks #1 <A>(_:) in AppSceneDelegate.handleConnectionOptionDefinition<A>(payload:definition:scene:)(v5, v2, v4, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge))
  {
    v7 = *(_QWORD *)(v0 + 288);
    v6 = *(_QWORD *)(v0 + 296);
    swift_retain();
    swift_bridgeObjectRetain();
    v8 = swift_bridgeObjectRetain();
    specialized handleConnectionOptionsCallbacks #1 <A>(_:) in AppSceneDelegate.handleConnectionOptionDefinition<A>(payload:definition:scene:)(v8, v6, v4, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_beginAccess();
  if ((*(_BYTE *)(v4 + 16) & 1) == 0)
  {
    v9 = type metadata accessor for UISceneConnectionOptionDefinitionError();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UISceneConnectionOptionDefinitionError and conformance UISceneConnectionOptionDefinitionError, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2A18], MEMORY[0x1E0DC2A20]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v10, *MEMORY[0x1E0DC2A10], v9);
    swift_willThrow();
  }
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized EnvironmentValues.sceneSession.setter(uint64_t a1)
{
  uint64_t v1;
  _BYTE v4[16];
  uint64_t v5;
  BOOL v6;

  if (a1)
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of WeakBox<UISceneSession>((uint64_t)v4, (uint64_t)&v5);
  }
  else
  {
    v5 = 0;
  }
  v6 = a1 == 0;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v5, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UISceneSession>?);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneSessionKey>, (uint64_t)&unk_1E1ABCAC8, (uint64_t)&protocol witness table for SceneSessionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneSessionKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v5, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UISceneSession>?);
}

uint64_t sub_187129B98@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.sceneSession.getter();
  *a1 = result;
  return result;
}

void sub_187129BD0(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  specialized EnvironmentValues.sceneSession.setter((uint64_t)v1);

}

uint64_t getEnumTagSinglePayload for RootModifier(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RootModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RootModifier()
{
  return &type metadata for RootModifier;
}

void *type metadata accessor for SceneSessionKey()
{
  return &unk_1E1ABCAC8;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in RootModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with take of ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey>, (uint64_t)&type metadata for EnvironmentValues.DocumentCommandsKey, (uint64_t)&protocol witness table for EnvironmentValues.DocumentCommandsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_187129DB0()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for PPTTestHost()
{
  unint64_t result;

  result = lazy cache variable for type metadata for PPTTestHost;
  if (!lazy cache variable for type metadata for PPTTestHost)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PPTTestHost);
  }
  return result;
}

uint64_t outlined consume of UISceneAdaptorConfiguration.Kind(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 3)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>)
  {
    type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, RootModifier>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>);
  }
  return result;
}

uint64_t outlined assign with copy of RootModifier(uint64_t a1, uint64_t a2)
{
  assignWithCopy for RootModifier(a2, a1);
  return a2;
}

uint64_t outlined init with take of RootModifier(uint64_t a1, uint64_t a2)
{
  initializeWithTake for RootModifier(a2, a1);
  return a2;
}

void type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for DocumentBaseModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, (uint64_t)&type metadata for DocumentBaseModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentBaseModifier and conformance DocumentBaseModifier);
    v6 = type metadata accessor for _UIHostingView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, MEMORY[0x1E0CE7518], a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v8 = v7;
    v9 = a4();
    v10[0] = MEMORY[0x1E0CE7508];
    v10[1] = v9;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DocumentBaseModifier and conformance DocumentBaseModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentBaseModifier and conformance DocumentBaseModifier;
  if (!lazy protocol witness table cache variable for type DocumentBaseModifier and conformance DocumentBaseModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DocumentBaseModifier, &type metadata for DocumentBaseModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentBaseModifier and conformance DocumentBaseModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView;
  if (!lazy protocol witness table cache variable for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DocumentGroupsIntroRootView, &type metadata for DocumentGroupsIntroRootView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView);
  }
  return result;
}

uint64_t outlined init with copy of DocumentGroupsIntroRootView(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DocumentGroupsIntroRootView(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _UIHostingView<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _UIHostingView<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _UIHostingView<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>);
  }
  return result;
}

uint64_t outlined destroy of DocumentGroupsIntroRootView(uint64_t a1)
{
  destroy for DocumentGroupsIntroRootView(a1);
  return a1;
}

uint64_t partial apply for closure #1 in AppSceneDelegate.scene(_:willConnectTo:options:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in AppSceneDelegate.scene(_:willConnectTo:options:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 40), *(Swift::Int **)(v1 + 48), *(void **)(v1 + 56), *(void **)(v1 + 64), a1);
}

uint64_t sub_18712A194()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in AppSceneDelegate.scene(_:willConnectTo:options:)()
{
  uint64_t v0;

  return closure #2 in AppSceneDelegate.scene(_:willConnectTo:options:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_18712A1C8()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #5 in AppSceneDelegate.scene(_:willConnectTo:options:)()
{
  uint64_t v0;

  closure #5 in AppSceneDelegate.scene(_:willConnectTo:options:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_18712A1F4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t objectdestroy_19Tm()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #3 in AppSceneDelegate.scene(_:willConnectTo:options:)()
{
  uint64_t v0;

  closure #3 in AppSceneDelegate.scene(_:willConnectTo:options:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t lazy protocol witness table accessor for type ObservableObjectDescriptor and conformance ObservableObjectDescriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ObservableObjectDescriptor and conformance ObservableObjectDescriptor;
  if (!lazy protocol witness table cache variable for type ObservableObjectDescriptor and conformance ObservableObjectDescriptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ObservableObjectDescriptor, &type metadata for ObservableObjectDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObservableObjectDescriptor and conformance ObservableObjectDescriptor);
  }
  return result;
}

uint64_t outlined destroy of MakeObservableObjectDelegateBox(uint64_t a1)
{
  destroy for MakeObservableObjectDelegateBox(a1);
  return a1;
}

unint64_t type metadata accessor for UISceneDelegate()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UISceneDelegate;
  if (!lazy cache variable for type metadata for UISceneDelegate)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UISceneDelegate);
  }
  return result;
}

uint64_t sub_18712A320()
{
  uint64_t v0;

  switch(*(_BYTE *)(v0 + 137))
  {
    case 0:
    case 1:
      swift_release();
      if (*(_QWORD *)(v0 + 48))
      {
        outlined consume of Text.Storage(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
        swift_bridgeObjectRelease();
      }
      if (*(_QWORD *)(v0 + 64))
        goto LABEL_23;
      break;
    case 2:
      if (*(_QWORD *)(v0 + 64))
        __swift_destroy_boxed_opaque_existential_1(v0 + 40);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of SceneID(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_BYTE *)(v0 + 136));
      break;
    case 3:
      goto LABEL_23;
    case 4:
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      break;
    case 5:
      outlined consume of SceneID(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
      if (*(_QWORD *)(v0 + 48) >= 3uLL)
        swift_bridgeObjectRelease();
      goto LABEL_23;
    case 6:
      swift_bridgeObjectRelease();
      swift_release();
      if (*(_QWORD *)(v0 + 64))
      {
        outlined consume of Text.Storage(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
        swift_bridgeObjectRelease();
      }
      break;
    case 7:
      swift_bridgeObjectRelease();
      swift_release();
      if (*(_QWORD *)(v0 + 64))
      {
        outlined consume of Text.Storage(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v0 + 88))
        swift_release();
      if (*(_QWORD *)(v0 + 104))
        swift_release();
      swift_bridgeObjectRelease();
      break;
    case 8:
      swift_release();
      swift_release();
      outlined consume of Text.Storage(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
      swift_bridgeObjectRelease();
LABEL_23:
      swift_release();
      break;
    default:
      break;
  }
  outlined consume of SceneID(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_BYTE *)(v0 + 160));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>, (uint64_t)&type metadata for SceneAllowsSecureDrawingKey, (uint64_t)&protocol witness table for SceneAllowsSecureDrawingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SecureDrawingViewGraphFeature and conformance SecureDrawingViewGraphFeature()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SecureDrawingViewGraphFeature and conformance SecureDrawingViewGraphFeature;
  if (!lazy protocol witness table cache variable for type SecureDrawingViewGraphFeature and conformance SecureDrawingViewGraphFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SecureDrawingViewGraphFeature, &type metadata for SecureDrawingViewGraphFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureDrawingViewGraphFeature and conformance SecureDrawingViewGraphFeature);
  }
  return result;
}

uint64_t outlined assign with take of AnyHashable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of SceneList.Item(uint64_t a1, uint64_t a2)
{
  assignWithTake for SceneList.Item(a2, a1);
  return a2;
}

uint64_t outlined init with copy of (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?, (uint64_t (*)(uint64_t))type metadata accessor for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Set<UIOpenURLContext>.Index()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Set<UIOpenURLContext>.Index)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
    lazy protocol witness table accessor for type UIScene and conformance NSObject(&lazy protocol witness table cache variable for type UIOpenURLContext and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
    v0 = type metadata accessor for Set.Index();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Set<UIOpenURLContext>.Index);
  }
}

void type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v7 = v6;
    v8 = lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, (uint64_t)&type metadata for RootModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type RootModifier and conformance RootModifier);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_18712A804()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_18712A828()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(a1, a2, v7, v6);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  v6[3] = v5;
  v6[4] = v4;
  v6[2] = a1;
  return swift_task_switch();
}

uint64_t objectdestroy_47Tm()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  v6[3] = v5;
  v6[4] = v4;
  v6[2] = a1;
  return swift_task_switch();
}

void type metadata accessor for [SceneList.Item]?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [SceneList.Item]?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [SceneList.Item], (uint64_t)&type metadata for SceneList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [SceneList.Item]?);
  }
}

uint64_t assignWithTake for RootEnvironmentModifier(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  swift_weakTakeAssign();
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = (_OWORD *)(a2 + 32);
  v5 = *(unsigned __int8 *)(a1 + 48);
  if (v5 != 255)
  {
    v6 = *(unsigned __int8 *)(a2 + 48);
    if (v6 != 255)
    {
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(_QWORD *)(a1 + 40);
      *(_OWORD *)(a1 + 32) = *v4;
      *(_BYTE *)(a1 + 48) = v6 & 1;
      outlined consume of SceneID(v7, v8, v5 & 1);
      return a1;
    }
    outlined destroy of SceneID(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t storeEnumTagSinglePayload for RootEnvironmentModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RootEnvironmentModifier()
{
  return &type metadata for RootEnvironmentModifier;
}

uint64_t sub_18712ABE0()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>, PresentedSceneValueInputModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>, PresentedSceneValueInputModifier>, lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for PresentedSceneValueInputModifier);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>, PresentedSceneValueInputModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>, PresentedSceneValueInputModifier>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>, PresentedSceneValueInputModifier>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<RootModifier> and conformance _ViewModifier_Content<A>, (uint64_t)&protocol witness table for RootEnvironmentModifier);
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<RootModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<RootModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<RootModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<RootModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type RootModifier and conformance RootModifier, (uint64_t)&type metadata for RootModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<RootModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in RootEnvironmentModifier()
{
  return &protocol witness table for RootEnvironmentModifier;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>, (uint64_t)&type metadata for ScenePhaseKey, (uint64_t)&protocol witness table for ScenePhaseKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneIDKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneIDKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneIDKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneIDKey>, (uint64_t)&type metadata for SceneIDKey, (uint64_t)&protocol witness table for SceneIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneIDKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in implicit closure #2 in implicit closure #1 in RootEnvironmentModifier.Child.updateValue()@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AGCompareValues();
  *a1 = result ^ 1;
  return result;
}

uint64_t assignWithCopy for RootEnvironmentModifier.Child(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  __int128 v14;
  __int128 *v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v4 = a1 + 8;
  v5 = (__int128 *)(a2 + 8);
  v6 = *(unsigned __int8 *)(a2 + 32);
  if (*(_BYTE *)(a1 + 32) == 3)
  {
    if (v6 == 3)
    {
      v7 = *v5;
      v8 = *(_OWORD *)(a2 + 24);
      v9 = *(_OWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_OWORD *)(a1 + 24) = v8;
      *(_OWORD *)(a1 + 40) = v9;
LABEL_4:
      *(_OWORD *)v4 = v7;
      return a1;
    }
    swift_weakCopyInit();
    swift_weakCopyInit();
    swift_weakCopyInit();
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    v13 = *(unsigned __int8 *)(a2 + 56);
    if (v13 == 255)
    {
      v14 = *(_OWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v14;
      return a1;
    }
    goto LABEL_14;
  }
  if (v6 == 3)
  {
    outlined destroy of RootEnvironmentModifier(a1 + 8);
    v11 = v5[1];
    v10 = v5[2];
    v12 = *v5;
    *(_BYTE *)(v4 + 48) = *((_BYTE *)v5 + 48);
    *(_OWORD *)(v4 + 16) = v11;
    *(_OWORD *)(v4 + 32) = v10;
    *(_OWORD *)v4 = v12;
    return a1;
  }
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = a1 + 40;
  v15 = (__int128 *)(a2 + 40);
  v13 = *(unsigned __int8 *)(a2 + 56);
  if (*(unsigned __int8 *)(a1 + 56) == 255)
  {
    if (v13 == 255)
    {
      v7 = *v15;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      goto LABEL_4;
    }
LABEL_14:
    v17 = v13 & 1;
    v19 = *(_QWORD *)(a2 + 40);
    v18 = *(_QWORD *)(a2 + 48);
    outlined copy of SceneID(v19, v18, v13 & 1);
    *(_QWORD *)(a1 + 40) = v19;
    *(_QWORD *)(a1 + 48) = v18;
    *(_BYTE *)(a1 + 56) = v17;
    return a1;
  }
  if (v13 == 255)
  {
    outlined destroy of SceneID(a1 + 40);
    v16 = *(_BYTE *)(a2 + 56);
    *(_OWORD *)v4 = *v15;
    *(_BYTE *)(a1 + 56) = v16;
  }
  else
  {
    v20 = v13 & 1;
    v22 = *(_QWORD *)(a2 + 40);
    v21 = *(_QWORD *)(a2 + 48);
    outlined copy of SceneID(v22, v21, v13 & 1);
    v23 = *(_QWORD *)(a1 + 40);
    v24 = *(_QWORD *)(a1 + 48);
    v25 = *(_BYTE *)(a1 + 56);
    *(_QWORD *)(a1 + 40) = v22;
    *(_QWORD *)(a1 + 48) = v21;
    *(_BYTE *)(a1 + 56) = v20;
    outlined consume of SceneID(v23, v24, v25);
  }
  return a1;
}

uint64_t initializeWithTake for RootEnvironmentModifier.Child(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v5 = *a2;
  v4 = a2 + 1;
  *(_QWORD *)a1 = v5;
  v6 = a1 + 8;
  if (*((_BYTE *)a2 + 32) == 3)
  {
    v7 = *((_OWORD *)v4 + 1);
    *(_OWORD *)v6 = *(_OWORD *)v4;
    *(_OWORD *)(v6 + 16) = v7;
    *(_OWORD *)(v6 + 32) = *((_OWORD *)v4 + 2);
    *(_BYTE *)(v6 + 48) = *((_BYTE *)v4 + 48);
  }
  else
  {
    swift_weakTakeInit();
    swift_weakTakeInit();
    swift_weakTakeInit();
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  }
  return a1;
}

uint64_t assignWithTake for RootEnvironmentModifier.Child(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _OWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a1 + 8;
  v5 = a2 + 8;
  v6 = *(unsigned __int8 *)(a2 + 32);
  if (*(_BYTE *)(a1 + 32) == 3)
  {
    if (v6 != 3)
    {
      swift_weakTakeInit();
      swift_weakTakeInit();
      swift_weakTakeInit();
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      return a1;
    }
LABEL_6:
    v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_OWORD *)(v4 + 16) = v7;
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(v5 + 32);
    *(_BYTE *)(v4 + 48) = *(_BYTE *)(v5 + 48);
    return a1;
  }
  if (v6 == 3)
  {
    outlined destroy of RootEnvironmentModifier(a1 + 8);
    goto LABEL_6;
  }
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = (_OWORD *)(a2 + 40);
  v9 = *(unsigned __int8 *)(a1 + 56);
  if (v9 != 255)
  {
    v10 = *(unsigned __int8 *)(a2 + 56);
    if (v10 != 255)
    {
      v11 = *(_QWORD *)(a1 + 40);
      v12 = *(_QWORD *)(a1 + 48);
      *(_OWORD *)(a1 + 40) = *v8;
      *(_BYTE *)(a1 + 56) = v10 & 1;
      outlined consume of SceneID(v11, v12, v9 & 1);
      return a1;
    }
    outlined destroy of SceneID(a1 + 40);
  }
  *(_OWORD *)(a1 + 40) = *v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for RootEnvironmentModifier.Child(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 253);
  if (*(unsigned __int8 *)(a1 + 32) <= 3u)
    v3 = 3;
  else
    v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 - 4;
  if (*(unsigned __int8 *)(a1 + 32) < 3u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RootEnvironmentModifier.Child(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for RootEnvironmentModifier.Child()
{
  return &type metadata for RootEnvironmentModifier.Child;
}

uint64_t *assignWithTake for PlatformItemListButtonStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((_BYTE *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = a1[2];
  v10 = *((_BYTE *)a1 + 24);
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  v11 = *((_BYTE *)a2 + 40);
  v12 = a1[4];
  v13 = *((_BYTE *)a1 + 40);
  a1[4] = a2[4];
  *((_BYTE *)a1 + 40) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  v14 = *((_BYTE *)a2 + 56);
  v15 = a1[6];
  v16 = *((_BYTE *)a1 + 56);
  a1[6] = a2[6];
  *((_BYTE *)a1 + 56) = v14;
  outlined consume of Environment<Bool>.Content(v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemListButtonStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformItemListButtonStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in PlatformItemListButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t PlatformItemListButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  char v24;
  char v25;
  char v26;
  uint64_t v28;
  uint64_t KeyPath;
  char v30;
  __int16 v31;
  char v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[25];

  v5 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5, v8);
  v9 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v2[1];
  v33 = *v2;
  v34 = v10;
  *(_OWORD *)v35 = v2[2];
  *(_OWORD *)&v35[9] = *(__int128 *)((char *)v2 + 41);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v9, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v11 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v12 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v9, v12 + v11, type metadata accessor for PrimitiveButtonStyleConfiguration);
  KeyPath = swift_getKeyPath();
  v13 = swift_getKeyPath();
  v14 = swift_getKeyPath();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v9, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v15 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v9, v15 + v11, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v16 = v33;
  v17 = BYTE8(v33);
  outlined copy of Environment<Color?>.Content(v33, BYTE8(v33));
  v18 = specialized Environment.wrappedValue.getter(v16, v17);
  outlined consume of Environment<Color?>.Content(v16, v17);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v18;
  v20 = *(_QWORD *)&v35[16];
  LOBYTE(v18) = v35[24];
  outlined copy of Environment<Bool>.Content(*(uint64_t *)&v35[16], v35[24]);
  specialized Environment.wrappedValue.getter(v20, v18, &v32);
  outlined consume of Environment<Bool>.Content(v20, v18);
  LOBYTE(v11) = v32 == 2;
  v21 = swift_allocObject();
  *(_BYTE *)(v21 + 16) = v11;
  v31 = 0;
  v30 = 0;
  v22 = (_OWORD *)swift_allocObject();
  v23 = v34;
  v22[1] = v33;
  v22[2] = v23;
  v22[3] = *(_OWORD *)v35;
  *(_OWORD *)((char *)v22 + 57) = *(_OWORD *)&v35[9];
  v24 = HIBYTE(v31);
  v25 = v31;
  v26 = v30;
  *(_QWORD *)a2 = partial apply for implicit closure #2 in implicit closure #1 in PlatformItemListButtonStyle.makeBody(configuration:);
  *(_QWORD *)(a2 + 8) = v12;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = KeyPath;
  *(_BYTE *)(a2 + 32) = v24;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = v13;
  *(_BYTE *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 65) = v25;
  *(_QWORD *)(a2 + 72) = v14;
  *(_BYTE *)(a2 + 80) = v26;
  *(_QWORD *)(a2 + 88) = partial apply for implicit closure #4 in implicit closure #3 in PlatformItemListButtonStyle.makeBody(configuration:);
  *(_QWORD *)(a2 + 96) = v15;
  *(_QWORD *)(a2 + 104) = partial apply for closure #1 in View.platformItemTint(_:);
  *(_QWORD *)(a2 + 112) = v19;
  *(_QWORD *)(a2 + 120) = partial apply for closure #1 in View.platformItemKeepsMenuPresented(_:);
  *(_QWORD *)(a2 + 128) = v21;
  *(_QWORD *)(a2 + 136) = partial apply for closure #3 in PlatformItemListButtonStyle.makeBody(configuration:);
  *(_QWORD *)(a2 + 144) = v22;
  return outlined retain of PlatformItemListButtonStyle((uint64_t)&v33);
}

uint64_t implicit closure #2 in implicit closure #1 in PlatformItemListButtonStyle.makeBody(configuration:)(uint64_t a1, void (*a2)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void *v22;
  void (*v23)(uint64_t);
  void (*v24)(void *);
  uint64_t v25;
  _BYTE v26[16];

  v4 = type metadata accessor for LinkDestination();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for ButtonAction();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1 + *(int *)(v12 + 24), (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2E18]);
      LinkDestination.open()();
      return outlined destroy of LinkDestination((uint64_t)v7);
    }
    else
    {
      v19 = *(_QWORD *)v11;
      v20 = *((_QWORD *)v11 + 1);
      v21 = v11[16];
      v22 = (void *)*((_QWORD *)v11 + 3);
      v23 = (void (*)(uint64_t))*((_QWORD *)v11 + 4);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v11, v20, v21);
      v24 = (void (*)(void *))specialized Environment.wrappedValue.getter(v19, v20, v21);
      v25 = outlined consume of Environment<AppIntentExecutor?>.Content(v19, v20, v21);
      if (v24)
      {
        v24(v22);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v24);
      }
      else
      {
        v23(v25);
      }
      outlined consume of Environment<AppIntentExecutor?>.Content(v19, v20, v21);

      return swift_release();
    }
  }
  else
  {
    v16 = *(_QWORD *)v11;
    v15 = *((_QWORD *)v11 + 1);
    v17 = type metadata accessor for MainActor();
    MEMORY[0x1E0C80A78](v17, v18);
    *(_QWORD *)&v26[-16] = v16;
    *(_QWORD *)&v26[-8] = v15;
    specialized static MainActor.assumeIsolated<A>(_:file:line:)(a2, (uint64_t)&v26[-32]);
    return swift_release();
  }
}

void closure #3 in PlatformItemListButtonStyle.makeBody(configuration:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unsigned __int16 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v3)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_24:
      v2 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    v5 = 0;
    v6 = a2 + 16;
    v33 = a2 + 32;
    while (1)
    {
      if (v5 >= v2[2])
      {
        __break(1u);
        goto LABEL_24;
      }
      v20 = type metadata accessor for PlatformItemList.Item();
      a2 = (unint64_t)v2
         + ((*(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80))
         + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v5;
      if (*(_QWORD *)(a2 + 328) >> 2 != 0xFFFFFFFFLL)
        goto LABEL_6;
      v39 = *(_BYTE *)(v6 + 8);
      v21 = *(_QWORD *)v6;
      v38 = *(_QWORD *)v6;
      if (v39 == 1)
      {
        outlined release of Environment<PaletteSelectionEffect>((uint64_t)&v38);
        if ((v21 & 1) != 0)
          goto LABEL_15;
      }
      else
      {
        outlined retain of Environment<PaletteSelectionEffect>((uint64_t)&v38);
        swift_retain();
        v22 = static os_log_type_t.fault.getter();
        v23 = static Log.runtimeIssuesLog.getter();
        if (os_log_type_enabled(v23, v22))
        {
          v24 = swift_slowAlloc();
          v25 = swift_slowAlloc();
          v35 = v25;
          *(_DWORD *)v24 = 136315138;
          *(_QWORD *)(v24 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(1819242306, 0xE400000000000000, &v35);
          _os_log_impl(&dword_186E48000, v23, v22, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v24, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x18D760108](v25, -1, -1);
          MEMORY[0x18D760108](v24, -1, -1);
        }

        EnvironmentValues.init()();
        swift_getAtKeyPath();
        outlined release of Environment<PaletteSelectionEffect>((uint64_t)&v38);
        swift_release();
        swift_release();
        outlined release of Environment<PaletteSelectionEffect>((uint64_t)&v38);
        if ((v34 & 1) != 0)
        {
LABEL_15:
          v37 = *(_BYTE *)(v33 + 8);
          v26 = *(_QWORD *)v33;
          v36 = *(_QWORD *)v33;
          if (v37 == 1)
          {
            outlined release of Environment<PaletteSelectionEffect>((uint64_t)&v36);
            v8 = (unsigned __int16)v26;
          }
          else
          {
            outlined retain of Environment<PaletteSelectionEffect>((uint64_t)&v36);
            outlined retain of Environment<PaletteSelectionEffect>((uint64_t)&v36);
            v27 = static os_log_type_t.fault.getter();
            v28 = static Log.runtimeIssuesLog.getter();
            v29 = v27;
            if (os_log_type_enabled(v28, v27))
            {
              v30 = swift_slowAlloc();
              v31 = swift_slowAlloc();
              v35 = v31;
              *(_DWORD *)v30 = 136315138;
              *(_QWORD *)(v30 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x8000000187BD8390, &v35);
              _os_log_impl(&dword_186E48000, v28, v29, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v30, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x18D760108](v31, -1, -1);
              MEMORY[0x18D760108](v30, -1, -1);
            }

            EnvironmentValues.init()();
            swift_getAtKeyPath();
            outlined release of Environment<PaletteSelectionEffect>((uint64_t)&v36);
            swift_release();
            swift_release();
            outlined release of Environment<PaletteSelectionEffect>((uint64_t)&v36);
            v8 = v34;
          }
          v7 = 0;
          goto LABEL_5;
        }
      }
      v7 = 0xC000000000000000;
      v8 = 6;
LABEL_5:
      v9 = *(void **)(a2 + 296);
      v10 = *(_QWORD *)(a2 + 304);
      v11 = *(_QWORD *)(a2 + 312);
      v12 = *(_QWORD *)(a2 + 320);
      v13 = *(_QWORD *)(a2 + 328);
      v14 = *(_QWORD *)(a2 + 336);
      v15 = *(_QWORD *)(a2 + 344);
      v16 = *(_QWORD *)(a2 + 352);
      v17 = *(_OWORD *)(a2 + 360);
      v18 = *(_OWORD *)(a2 + 376);
      v19 = *(_QWORD *)(a2 + 392);
      *(_QWORD *)(a2 + 296) = v8;
      *(_QWORD *)(a2 + 304) = 0;
      *(_QWORD *)(a2 + 312) = 0;
      *(_QWORD *)(a2 + 320) = 0;
      *(_QWORD *)(a2 + 328) = v7;
      *(_OWORD *)(a2 + 336) = 0u;
      *(_OWORD *)(a2 + 352) = 0u;
      *(_OWORD *)(a2 + 368) = 0u;
      *(_OWORD *)(a2 + 384) = 0u;
      outlined consume of PlatformItemList.Item.SystemItem?(v9, v10, v11, v12, v13, v14, v15, v16, v17, *((uint64_t *)&v17 + 1), v18, SBYTE8(v18), v19);
LABEL_6:
      if (v3 == ++v5)
      {
        *(_QWORD *)a1 = v2;
        return;
      }
    }
  }
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in PlatformItemListButtonStyle.makeBody(configuration:)()
{
  return partial apply for implicit closure #2 in implicit closure #1 in PlatformItemListButtonStyle.makeBody(configuration:)((void (*)(void))closure #1 in ButtonAction.callAsFunction()partial apply);
}

double static PlatformButtonActionModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  int v10;
  uint64_t KeyPath;
  unsigned int v12;
  unsigned int v13;
  int v14;
  double result;
  uint64_t v16;
  double v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a2[3];
  v6 = a2[1];
  v26 = a2[2];
  v27 = v5;
  v7 = a2[3];
  v28 = a2[4];
  v8 = a2[1];
  v24 = *a2;
  v25 = v8;
  v20 = v26;
  v21 = v7;
  v22 = a2[4];
  v9 = *a1;
  v29 = *((_DWORD *)a2 + 20);
  v23 = *((_DWORD *)a2 + 20);
  v18 = v24;
  v19 = v6;
  a3(&v16);
  *(_QWORD *)&v18 = v27;
  DWORD2(v18) = DWORD2(v27);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    outlined retain of _ViewInputs((uint64_t)&v24);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs((uint64_t)&v24);
    if ((v18 & 8) != 0)
    {
      LODWORD(v18) = v9;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<PlatformButtonActionModifier>, (uint64_t)&type metadata for PlatformButtonActionModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      v10 = _GraphValue.value.getter();
      KeyPath = swift_getKeyPath();
      LODWORD(v18) = v10;
      *((_QWORD *)&v18 + 1) = KeyPath;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for (())?(0);
      type metadata accessor for Focus<PlatformButtonActionModifier, (())?>();
      lazy protocol witness table accessor for type Focus<PlatformButtonActionModifier, (())?> and conformance Focus<A, B>();
      v12 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      v20 = v26;
      v21 = v27;
      v22 = v28;
      v23 = v29;
      v18 = v24;
      v19 = v25;
      swift_getKeyPath();
      v13 = _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      v20 = v26;
      v21 = v27;
      v22 = v28;
      v23 = v29;
      v18 = v24;
      v19 = v25;
      swift_getKeyPath();
      v14 = _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      *(_QWORD *)&v18 = __PAIR64__(v13, v12);
      DWORD2(v18) = v14;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformButtonActionTransform.SelectionContent and conformance PlatformButtonActionTransform.SelectionContent();
      LODWORD(v18) = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformButtonActionTransform.MakeTransform and conformance PlatformButtonActionTransform.MakeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)&v16, (uint64_t)&v24);
    }
  }
  *(_QWORD *)a4 = v16;
  result = v17;
  a4[1] = v17;
  return result;
}

uint64_t key path getter for PlatformButtonActionModifier.action : PlatformButtonActionModifier@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return outlined copy of AppIntentExecutor?(v3);
}

uint64_t key path setter for PlatformButtonActionModifier.action : PlatformButtonActionModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  outlined copy of AppIntentExecutor?(v3);
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
  *a2 = (uint64_t)v6;
  a2[1] = v5;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance PlatformButtonActionModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double protocol witness for static Rule.initialValue.getter in conformance PlatformButtonActionTransform.MakeTransform@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = xmmword_187BFE310;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformButtonActionTransform.MakeTransform@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;

  Value = AGGraphGetValue();
  return outlined init with copy of PlatformItem.SelectionContent(Value, a1);
}

uint64_t PlatformButtonActionTransform.SelectionContent.value.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;

  v2 = *(unsigned __int8 *)AGGraphGetValue();
  if (*(_BYTE *)AGGraphGetValue() == 1)
    v2 |= 4uLL;
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  *(_QWORD *)&v6 = AGCreateWeakAttribute();
  *((_QWORD *)&v6 + 1) = AGCreateWeakAttribute();
  outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v10, (uint64_t)&v7 + 8);
  v12 = v6;
  *((_QWORD *)&v13 + 1) = *((_QWORD *)&v7 + 1);
  v14 = v8;
  v15 = v9;
  *(_QWORD *)&v13 = v2;
  outlined assign with copy of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v16, (uint64_t)&v13 + 8);
  v3 = v13;
  *a1 = v12;
  a1[1] = v3;
  v4 = v15;
  a1[2] = v14;
  a1[3] = v4;
  return outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v16);
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformButtonActionTransform.SelectionContent@<X0>(_OWORD *a1@<X8>)
{
  return PlatformButtonActionTransform.SelectionContent.value.getter(a1);
}

void protocol witness for ViewModifier.body(content:) in conformance PlatformButtonActionTransform()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in PlatformItemListButtonStyle.makeBody(configuration:)()
{
  return partial apply for implicit closure #2 in implicit closure #1 in PlatformItemListButtonStyle.makeBody(configuration:)((void (*)(void))partial apply for closure #1 in ButtonAction.callAsFunction());
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in PlatformItemListButtonStyle.makeBody(configuration:)(void (*a1)(void))
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) - 8) + 80);
  return implicit closure #2 in implicit closure #1 in PlatformItemListButtonStyle.makeBody(configuration:)(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_18712C328()
{
  swift_release();
  return swift_deallocObject();
}

int *partial apply for closure #1 in View.platformItemTint(_:)(int *a1)
{
  uint64_t v1;

  return closure #1 in View.platformItemTint(_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_18712C354()
{
  return swift_deallocObject();
}

int *partial apply for closure #1 in View.platformItemKeepsMenuPresented(_:)(int *a1)
{
  uint64_t v1;

  return closure #1 in View.platformItemKeepsMenuPresented(_:)(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_18712C36C()
{
  uint64_t v0;

  outlined consume of Environment<Color?>.Content(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  return swift_deallocObject();
}

void partial apply for closure #3 in PlatformItemListButtonStyle.makeBody(configuration:)(uint64_t a1)
{
  uint64_t v1;

  closure #3 in PlatformItemListButtonStyle.makeBody(configuration:)(a1, v1 + 16);
}

uint64_t outlined retain of PlatformItemListButtonStyle(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_BYTE *)(a1 + 56);
  outlined copy of Environment<Color?>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<Bool>.Content(v4, v5);
  outlined copy of Environment<Bool>.Content(v6, v7);
  return a1;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()()
{
  JUMPOUT(0x18D75E3C8);
}

uint64_t outlined retain of Environment<PaletteSelectionEffect>(uint64_t a1)
{
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  return a1;
}

uint64_t outlined release of Environment<PaletteSelectionEffect>(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  return a1;
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x18D75E3C8);
}

uint64_t outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for PlatformButtonActionTransform.MakeTransform()
{
  return &type metadata for PlatformButtonActionTransform.MakeTransform;
}

uint64_t destroy for PlatformButtonActionTransform(uint64_t result)
{
  if (*(_QWORD *)(result + 48))
    return __swift_destroy_boxed_opaque_existential_1(result + 24);
  return result;
}

uint64_t initializeWithCopy for PlatformButtonActionTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = a1 + 24;
  v5 = a2 + 24;
  v6 = *(_QWORD *)(a2 + 48);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = v7;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(v4, v5);
  }
  else
  {
    v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_OWORD *)(v4 + 16) = v8;
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(v5 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for PlatformButtonActionTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = a1 + 24;
  v4 = (__int128 *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v5)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
    }
    else
    {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(a1 + 24);
      v6 = *((_QWORD *)v4 + 4);
      v7 = v4[1];
      *(_OWORD *)v3 = *v4;
      *(_OWORD *)(v3 + 16) = v7;
      *(_QWORD *)(v3 + 32) = v6;
    }
  }
  else if (v5)
  {
    *(_QWORD *)(a1 + 48) = v5;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 24, a2 + 24);
  }
  else
  {
    v8 = *v4;
    v9 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)v3 = v8;
    *(_OWORD *)(a1 + 40) = v9;
  }
  return a1;
}

uint64_t outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(uint64_t a1)
{
  destroy for AccessibilityRelationshipScope.Key();
  return a1;
}

uint64_t assignWithTake for PlatformButtonActionTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = a1 + 24;
  if (*(_QWORD *)(a1 + 48))
  {
    if (*(_QWORD *)(a2 + 48))
      __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    else
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(a1 + 24);
  }
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformButtonActionTransform(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformButtonActionTransform(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformButtonActionTransform()
{
  return &type metadata for PlatformButtonActionTransform;
}

ValueMetadata *type metadata accessor for PlatformButtonActionTransform.SelectionContent()
{
  return &type metadata for PlatformButtonActionTransform.SelectionContent;
}

ValueMetadata *type metadata accessor for PlatformButtonActionModifier()
{
  return &type metadata for PlatformButtonActionModifier;
}

uint64_t sub_18712CBE0()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>, (uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, type metadata accessor for ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>);
}

void type metadata accessor for ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>);
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for LabelGroup<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LabelGroup);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3();
    v7[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for PlatformButtonActionModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>();
    v3[1] = lazy protocol witness table accessor for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>();
    v2[0] = lazy protocol witness table accessor for type LabelGroup<PrimitiveButtonStyleConfiguration.Label> and conformance LabelGroup<A>();
    v2[1] = &protocol witness table for PrimitiveButtonStyleConfiguration.Label;
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabelGroup<PrimitiveButtonStyleConfiguration.Label> and conformance LabelGroup<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LabelGroup<PrimitiveButtonStyleConfiguration.Label> and conformance LabelGroup<A>;
  if (!lazy protocol witness table cache variable for type LabelGroup<PrimitiveButtonStyleConfiguration.Label> and conformance LabelGroup<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for LabelGroup<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LabelGroup);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelGroup<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelGroup<PrimitiveButtonStyleConfiguration.Label> and conformance LabelGroup<A>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in PlatformButtonActionModifier()
{
  return &protocol witness table for PlatformButtonActionModifier;
}

unint64_t lazy protocol witness table accessor for type PlatformButtonActionTransform.SelectionContent and conformance PlatformButtonActionTransform.SelectionContent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformButtonActionTransform.SelectionContent and conformance PlatformButtonActionTransform.SelectionContent;
  if (!lazy protocol witness table cache variable for type PlatformButtonActionTransform.SelectionContent and conformance PlatformButtonActionTransform.SelectionContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformButtonActionTransform.SelectionContent, &type metadata for PlatformButtonActionTransform.SelectionContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformButtonActionTransform.SelectionContent and conformance PlatformButtonActionTransform.SelectionContent);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in PlatformButtonActionTransform()
{
  return &protocol witness table for PlatformButtonActionTransform;
}

unint64_t instantiation function for generic protocol witness table for PlatformButtonActionTransform(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform;
  if (!lazy protocol witness table cache variable for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformButtonActionTransform, &type metadata for PlatformButtonActionTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform;
  if (!lazy protocol witness table cache variable for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformButtonActionTransform, &type metadata for PlatformButtonActionTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformButtonActionTransform.MakeTransform and conformance PlatformButtonActionTransform.MakeTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformButtonActionTransform.MakeTransform and conformance PlatformButtonActionTransform.MakeTransform;
  if (!lazy protocol witness table cache variable for type PlatformButtonActionTransform.MakeTransform and conformance PlatformButtonActionTransform.MakeTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformButtonActionTransform.MakeTransform, &type metadata for PlatformButtonActionTransform.MakeTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformButtonActionTransform.MakeTransform and conformance PlatformButtonActionTransform.MakeTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey;
  if (!lazy protocol witness table cache variable for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ViewInputs.PlatformItemFeaturesKey, &type metadata for _ViewInputs.PlatformItemFeaturesKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey;
  if (!lazy protocol witness table cache variable for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ViewInputs.PlatformItemFeaturesKey, &type metadata for _ViewInputs.PlatformItemFeaturesKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey);
  }
  return result;
}

void type metadata accessor for Focus<PlatformButtonActionModifier, (())?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Focus<PlatformButtonActionModifier, (())?>)
  {
    type metadata accessor for (())?(255);
    v0 = type metadata accessor for Focus();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<PlatformButtonActionModifier, (())?>);
  }
}

unint64_t lazy protocol witness table accessor for type Focus<PlatformButtonActionModifier, (())?> and conformance Focus<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Focus<PlatformButtonActionModifier, (())?> and conformance Focus<A, B>;
  if (!lazy protocol witness table cache variable for type Focus<PlatformButtonActionModifier, (())?> and conformance Focus<A, B>)
  {
    type metadata accessor for Focus<PlatformButtonActionModifier, (())?>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFECE0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Focus<PlatformButtonActionModifier, (())?> and conformance Focus<A, B>);
  }
  return result;
}

uint64_t sub_18712D2B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t closure #1 in ButtonAction.callAsFunction()partial apply()
{
  return partial apply for closure #1 in ButtonAction.callAsFunction()();
}

uint64_t EnvironmentValues.focusGroupID.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<FocusGroupIDKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<FocusGroupIDKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>);
  }
}

ValueMetadata *type metadata accessor for FocusGroupIDKey()
{
  return &type metadata for FocusGroupIDKey;
}

unint64_t lazy protocol witness table accessor for type FocusGroupIdentifier.ID and conformance FocusGroupIdentifier.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusGroupIdentifier.ID and conformance FocusGroupIdentifier.ID;
  if (!lazy protocol witness table cache variable for type FocusGroupIdentifier.ID and conformance FocusGroupIdentifier.ID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusGroupIdentifier.ID, &type metadata for FocusGroupIdentifier.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusGroupIdentifier.ID and conformance FocusGroupIdentifier.ID);
  }
  return result;
}

uint64_t _AlignmentWritingModifier.computeValue.getter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  return a2;
}

double static _AlignmentWritingModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  double result;
  char v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  double v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 80);
  v16 = *(_QWORD *)a2;
  LODWORD(v17) = v6;
  v18 = v7;
  v19 = *(_OWORD *)(a2 + 24);
  v13 = BYTE12(v19);
  v20 = *(_OWORD *)(a2 + 40);
  v21 = *(_OWORD *)(a2 + 56);
  v22 = *(_QWORD *)(a2 + 72);
  v23 = v8;
  a3(&v14);
  if ((v13 & 2) != 0)
  {
    LODWORD(v16) = v5;
    type metadata accessor for _GraphValue<_AlignmentWritingModifier>();
    v9 = _GraphValue.value.getter();
    v16 = v14;
    v17 = v15;
    v10 = _ViewOutputs.layoutComputer.getter();
    v11 = *MEMORY[0x1E0CFED28];
    if ((v10 & 0x100000000) == 0)
      v11 = v10;
    v16 = __PAIR64__(v11, v9);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v16) = 0;
    _ViewOutputs.layoutComputer.setter();
  }
  *(_QWORD *)a4 = v14;
  result = v15;
  a4[1] = v15;
  return result;
}

void type metadata accessor for _GraphValue<_AlignmentWritingModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<_AlignmentWritingModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_AlignmentWritingModifier>);
  }
}

void protocol witness for ViewModifier.body(content:) in conformance _AlignmentWritingModifier()
{
  specialized ViewModifier.bodyError()();
}

uint64_t View.alignmentGuide(_:computeValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a1;
  v6[1] = a2;
  v6[2] = a3;
  return MEMORY[0x18D75B4AC](v6, a4, &type metadata for _AlignmentWritingModifier, a5);
}

uint64_t AlignmentModifiedLayoutComputer.Engine.explicitAlignment(_:at:)(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double (*v7)(_QWORD *);
  uint64_t v8;
  double v9;
  _QWORD v11[6];

  v4 = *a2;
  v3 = a2[1];
  v6 = a2[2];
  v5 = a2[3];
  if (*v2 != a1)
    return LayoutComputer.explicitAlignment(_:at:)();
  v7 = (double (*)(_QWORD *))v2[1];
  v8 = v2[4];
  v11[0] = v2[3];
  v11[1] = v8;
  v11[2] = v4;
  v11[3] = v3;
  v11[4] = v6;
  v11[5] = v5;
  swift_retain();
  v9 = v7(v11);
  swift_release();
  return *(_QWORD *)&v9;
}

Swift::Double protocol witness for LayoutEngine.layoutPriority() in conformance AlignmentModifiedLayoutComputer.Engine()
{
  return LayoutComputer.layoutPriority()();
}

uint64_t protocol witness for LayoutEngine.spacing() in conformance AlignmentModifiedLayoutComputer.Engine()
{
  return LayoutComputer.spacing()();
}

uint64_t protocol witness for LayoutEngine.sizeThatFits(_:) in conformance AlignmentModifiedLayoutComputer.Engine()
{
  return LayoutComputer.sizeThatFits(_:)();
}

uint64_t protocol witness for LayoutEngine.explicitAlignment(_:at:) in conformance AlignmentModifiedLayoutComputer.Engine(uint64_t a1, uint64_t *a2)
{
  return AlignmentModifiedLayoutComputer.Engine.explicitAlignment(_:at:)(a1, a2);
}

uint64_t AlignmentModifiedLayoutComputer.updateValue()()
{
  uint64_t v0;

  AGGraphGetValue();
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x1E0CFED28])
  {
    swift_retain();
    static LayoutComputer.defaultValue.getter();
  }
  else
  {
    AGGraphGetValue();
    swift_retain();
    swift_retain();
  }
  lazy protocol witness table accessor for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer();
  lazy protocol witness table accessor for type AlignmentModifiedLayoutComputer.Engine and conformance AlignmentModifiedLayoutComputer.Engine();
  StatefulRule<>.update<A>(to:)();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AlignmentModifiedLayoutComputer()
{
  lazy protocol witness table accessor for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer();
  return static AsyncAttribute.flags.getter();
}

unint64_t lazy protocol witness table accessor for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer;
  if (!lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AlignmentModifiedLayoutComputer, &unk_1E1AFED10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer;
  if (!lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AlignmentModifiedLayoutComputer, &unk_1E1AFED10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer;
  if (!lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AlignmentModifiedLayoutComputer, &unk_1E1AFED10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in _AlignmentWritingModifier()
{
  return &protocol witness table for _AlignmentWritingModifier;
}

_QWORD *initializeBufferWithCopyOfBuffer for _AlignmentWritingModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a2[2];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = v4;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _AlignmentWritingModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _AlignmentWritingModifier(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t sub_18712DA44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _AlignmentWritingModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void *type metadata accessor for AlignmentModifiedLayoutComputer()
{
  return &unk_1E1AFED10;
}

unint64_t lazy protocol witness table accessor for type AlignmentModifiedLayoutComputer.Engine and conformance AlignmentModifiedLayoutComputer.Engine()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer.Engine and conformance AlignmentModifiedLayoutComputer.Engine;
  if (!lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer.Engine and conformance AlignmentModifiedLayoutComputer.Engine)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AlignmentModifiedLayoutComputer.Engine, &unk_1E1B19B08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer.Engine and conformance AlignmentModifiedLayoutComputer.Engine);
  }
  return result;
}

_QWORD *initializeWithCopy for AlignmentModifiedLayoutComputer.Engine(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AlignmentModifiedLayoutComputer.Engine(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for AlignmentModifiedLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlignmentModifiedLayoutComputer.Engine(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlignmentModifiedLayoutComputer.Engine(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for AlignmentModifiedLayoutComputer.Engine()
{
  return &unk_1E1B19B08;
}

char *initializeBufferWithCopyOfBuffer for ListCoreBatchUpdates(char *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for IndexSet();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, (char *)a2, v7);
    v8(&a1[a3[9]], (char *)a2 + a3[9], v7);
    v9 = a3[11];
    *(_QWORD *)&a1[a3[10]] = *(uint64_t *)((char *)a2 + a3[10]);
    *(_QWORD *)&a1[v9] = *(uint64_t *)((char *)a2 + v9);
    v10 = a3[13];
    *(_QWORD *)&a1[a3[12]] = *(uint64_t *)((char *)a2 + a3[12]);
    *(_QWORD *)&a1[v10] = *(uint64_t *)((char *)a2 + v10);
    v11 = a3[14];
    v12 = &a1[v11];
    v13 = (char *)a2 + v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8(v12, v13, v7);
    v14 = a3[15];
    v15 = &a1[v14];
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *(_QWORD *)v15 = *v16;
    *((_QWORD *)v15 + 1) = v17;
    v18 = v16[3];
    *((_QWORD *)v15 + 2) = v16[2];
    *((_QWORD *)v15 + 3) = v18;
    *((_QWORD *)v15 + 4) = v16[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for ListCoreBatchUpdates(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v6 = type metadata accessor for IndexSet();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7(a1 + a3[14], a2 + a3[14], v6);
  v8 = a3[15];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9[2] = v10[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9[3] = v10[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9[4] = v10[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ListCoreBatchUpdates(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v6 = type metadata accessor for IndexSet();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v8 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v7(a1 + a3[14], a2 + a3[14], v6);
  v10 = a3[15];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v13;
  *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
  return a1;
}

uint64_t assignWithTake for ListCoreBatchUpdates(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v6 = type metadata accessor for IndexSet();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  swift_bridgeObjectRelease();
  v7(a1 + a3[14], a2 + a3[14], v6);
  v8 = a3[15];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = *v10;
  swift_bridgeObjectRelease();
  v9[1] = v10[1];
  swift_bridgeObjectRelease();
  v9[2] = v10[2];
  swift_bridgeObjectRelease();
  v9[3] = v10[3];
  swift_bridgeObjectRelease();
  v9[4] = v10[4];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ListCoreBatchUpdates()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18712E1EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for IndexSet();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 40));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ListCoreBatchUpdates()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18712E274(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for IndexSet();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 40)) = (a2 - 1);
  return result;
}

uint64_t ListCoreBatchUpdates.description.getter(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char v43;
  Swift::String v44;
  Swift::String v45;
  char *v46;
  char *v47;
  char *v48;
  char v49;
  void (*v50)(char *, uint64_t);
  void (*v51)(Swift::String *, _QWORD);
  uint64_t *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  char *v62;
  char v63;
  void (*v64)(char *, uint64_t);
  void (*v65)(Swift::String *, _QWORD);
  uint64_t *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  Swift::String v70;
  uint64_t v71;
  Swift::String v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  Swift::String v78;
  Swift::String v79;
  Swift::String v80;
  uint64_t v81;
  Swift::String v82;
  Swift::String v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  Swift::String v95;
  void (*v96)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  Swift::String v98;
  Swift::String v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t, uint64_t, uint64_t);
  char *v106;
  uint64_t v107;
  Swift::String v108;
  Swift::String v109;
  Swift::String v110;
  Swift::String v111;
  void (*v112)(char *, uint64_t, uint64_t, uint64_t);
  void (*v113)(char *, char *, uint64_t);
  Swift::String v114;
  Swift::String v115;
  unint64_t v116;
  uint64_t result;
  unint64_t i;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(char *, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  Swift::String v133;
  Swift::String v134;
  Swift::String v135;
  Swift::String v136;
  Swift::String v137;
  Swift::String v138;
  Swift::String v139;
  Swift::String v140;
  void (*v141)(char *, uint64_t);
  Swift::String v142;
  Swift::String v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(char *, uint64_t, uint64_t);
  char *v147;
  char *v148;
  char v149;
  void (*v150)(char *, uint64_t);
  void (*v151)(Swift::String *, _QWORD);
  uint64_t *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  Swift::String v156;
  Swift::String v157;
  _QWORD v158[2];
  char *v159;
  uint64_t v160;
  int *v161;
  uint64_t v162;
  void (*v163)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v164)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v165;
  char *v166;
  void (*v167)(char *, char *, uint64_t);
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  Swift::String v180[2];
  uint64_t v181;
  unint64_t v182;

  v2 = v1;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for (source: IndexPath, destination: IndexPath)?, (void (*)(uint64_t))type metadata accessor for (source: IndexPath, destination: IndexPath));
  MEMORY[0x1E0C80A78](v4, v5);
  v170 = (uint64_t)v158 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v169 = (uint64_t)v158 - v9;
  v10 = type metadata accessor for IndexPath();
  v172 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v168 = (char *)v158 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v171 = (char *)v158 - v15;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for IndexPath?, v16);
  MEMORY[0x1E0C80A78](v17, v18);
  v166 = (char *)v158 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v165 = (uint64_t)v158 - v22;
  v23 = type metadata accessor for IndexSet();
  v175 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v174 = (char *)v158 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for IndexSet.Index();
  v178 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v177 = (char *)v158 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v176 = (char *)v158 - v31;
  type metadata accessor for IndexingIterator<IndexSet>();
  v160 = v32;
  MEMORY[0x1E0C80A78](v32, v33);
  v159 = (char *)v158 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)v158 - v37;
  MEMORY[0x1E0C80A78](v39, v40);
  v42 = (char *)v158 - v41;
  v181 = 0x2073657461647055;
  v182 = 0xE90000000000007BLL;
  v43 = IndexSet.isEmpty.getter();
  v173 = v10;
  v162 = v1;
  v161 = a1;
  if ((v43 & 1) == 0)
  {
    v44._countAndFlagsBits = 10;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    v45._object = (void *)0x8000000187BD8430;
    v45._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v45);
    IndexSet.makeIterator()();
    v46 = &v42[*(int *)(v160 + 36)];
    v167 = *(void (**)(char *, char *, uint64_t))(v178 + 16);
    v47 = v176;
    while (1)
    {
      v167(v47, v46, v26);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E0]);
      v48 = v177;
      dispatch thunk of Collection.endIndex.getter();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1248], MEMORY[0x1E0CB1260]);
      v49 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50 = *(void (**)(char *, uint64_t))(v178 + 8);
      v50(v48, v26);
      v50(v47, v26);
      if ((v49 & 1) != 0)
        break;
      v51 = (void (*)(Swift::String *, _QWORD))dispatch thunk of Collection.subscript.read();
      v53 = *v52;
      v51(v180, 0);
      v54 = v174;
      v55 = v175;
      (*(void (**)(char *, char *, uint64_t))(v175 + 16))(v174, v42, v23);
      dispatch thunk of Collection.formIndex(after:)();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v54, v23);
      v179 = v53;
      v180[0]._countAndFlagsBits = 32;
      v180[0]._object = (void *)0xE100000000000000;
      v56._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      String.append(_:)(v180[0]);
      swift_bridgeObjectRelease();
    }
    outlined destroy of IndexingIterator<IndexSet>((uint64_t)v42);
    v2 = v162;
    a1 = v161;
  }
  if ((IndexSet.isEmpty.getter() & 1) == 0)
  {
    v57._countAndFlagsBits = 10;
    v57._object = (void *)0xE100000000000000;
    String.append(_:)(v57);
    v58._object = (void *)0x8000000187BD8450;
    v58._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v58);
    IndexSet.makeIterator()();
    v59 = &v38[*(int *)(v160 + 36)];
    v60 = *(void (**)(char *, char *, uint64_t))(v178 + 16);
    v61 = v176;
    while (1)
    {
      v60(v61, v59, v26);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E0]);
      v62 = v177;
      dispatch thunk of Collection.endIndex.getter();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1248], MEMORY[0x1E0CB1260]);
      v63 = dispatch thunk of static Equatable.== infix(_:_:)();
      v64 = *(void (**)(char *, uint64_t))(v178 + 8);
      v64(v62, v26);
      v64(v61, v26);
      if ((v63 & 1) != 0)
        break;
      v65 = (void (*)(Swift::String *, _QWORD))dispatch thunk of Collection.subscript.read();
      v67 = *v66;
      v65(v180, 0);
      v68 = v174;
      v69 = v175;
      (*(void (**)(char *, char *, uint64_t))(v175 + 16))(v174, v38, v23);
      dispatch thunk of Collection.formIndex(after:)();
      (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v23);
      v179 = v67;
      v180[0]._countAndFlagsBits = 32;
      v180[0]._object = (void *)0xE100000000000000;
      v70._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v70);
      swift_bridgeObjectRelease();
      String.append(_:)(v180[0]);
      swift_bridgeObjectRelease();
    }
    outlined destroy of IndexingIterator<IndexSet>((uint64_t)v38);
    v2 = v162;
    a1 = v161;
  }
  v71 = *(_QWORD *)(v2 + a1[10]);
  if (*(_QWORD *)(v71 + 16))
  {
    v72._countAndFlagsBits = 10;
    v72._object = (void *)0xE100000000000000;
    String.append(_:)(v72);
    v73._countAndFlagsBits = 0x655365766F6D2020;
    v73._object = (void *)0xEF3A736E6F697463;
    String.append(_:)(v73);
    v74 = *(_QWORD *)(v71 + 16);
    if (v74)
    {
      swift_bridgeObjectRetain();
      v75 = (uint64_t *)(v71 + 40);
      do
      {
        v76 = *(v75 - 1);
        v77 = *v75;
        v180[0]._countAndFlagsBits = 32;
        v180[0]._object = (void *)0xE100000000000000;
        v179 = v76;
        v78._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v78);
        swift_bridgeObjectRelease();
        v79._countAndFlagsBits = 540945696;
        v79._object = (void *)0xE400000000000000;
        String.append(_:)(v79);
        v179 = v77;
        v80._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v80);
        swift_bridgeObjectRelease();
        String.append(_:)(v180[0]);
        swift_bridgeObjectRelease();
        v75 += 2;
        --v74;
      }
      while (v74);
      swift_bridgeObjectRelease();
      v2 = v162;
      a1 = v161;
    }
  }
  v81 = *(_QWORD *)(v2 + a1[11]);
  if (*(_QWORD *)(v81 + 16))
  {
    v82._countAndFlagsBits = 10;
    v82._object = (void *)0xE100000000000000;
    String.append(_:)(v82);
    v83._countAndFlagsBits = 0x65766F6D65722020;
    v83._object = (void *)0xED00003A73776F52;
    String.append(_:)(v83);
    v84 = *(_QWORD *)(v81 + 16);
    v158[1] = v81;
    if (v84)
    {
      v85 = v172;
      v86 = (char *)(v81 + ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80)));
      v164 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v172 + 72);
      v167 = *(void (**)(char *, char *, uint64_t))(v172 + 16);
      swift_bridgeObjectRetain();
      v87 = v165;
      v88 = v173;
      while (1)
      {
        v89 = v173;
        v167((char *)v87, v86, v173);
        v90 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56);
        v90(v87, 0, 1, v89);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v87, 1, v89) == 1)
          break;
        v163 = v90;
        v91 = v171;
        (*(void (**)(char *, uint64_t, uint64_t))(v85 + 32))(v171, v87, v88);
        v180[0]._countAndFlagsBits = 10272;
        v180[0]._object = (void *)0xE200000000000000;
        v179 = IndexPath.section.getter();
        v92._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v92);
        swift_bridgeObjectRelease();
        v93._countAndFlagsBits = 8236;
        v93._object = (void *)0xE200000000000000;
        String.append(_:)(v93);
        v179 = IndexPath.row.getter();
        v94._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v94);
        swift_bridgeObjectRelease();
        v95._countAndFlagsBits = 41;
        v95._object = (void *)0xE100000000000000;
        String.append(_:)(v95);
        String.append(_:)(v180[0]);
        v85 = v172;
        v87 = v165;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v85 + 8))(v91, v88);
        v86 = (char *)v164 + (_QWORD)v86;
        if (!--v84)
        {
          v163(v87, 1, 1, v173);
          break;
        }
      }
    }
    else
    {
      v96 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 + 56);
      swift_bridgeObjectRetain();
      v96(v165, 1, 1, v173);
    }
    swift_bridgeObjectRelease();
    v2 = v162;
    a1 = v161;
  }
  v97 = *(_QWORD *)(v2 + a1[12]);
  if (*(_QWORD *)(v97 + 16))
  {
    v98._countAndFlagsBits = 10;
    v98._object = (void *)0xE100000000000000;
    String.append(_:)(v98);
    v99._countAndFlagsBits = 0x747265736E692020;
    v99._object = (void *)0xED00003A73776F52;
    String.append(_:)(v99);
    v100 = *(_QWORD *)(v97 + 16);
    v163 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v97;
    if (v100)
    {
      v101 = v172;
      v102 = (char *)(v97
                    + ((*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80)));
      v165 = *(_QWORD *)(v172 + 72);
      v167 = *(void (**)(char *, char *, uint64_t))(v172 + 16);
      swift_bridgeObjectRetain();
      while (1)
      {
        v103 = v166;
        v104 = v173;
        v167(v166, v102, v173);
        v105 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v101 + 56);
        v105(v103, 0, 1, v104);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v103, 1, v104) == 1)
          break;
        v164 = v105;
        v106 = v171;
        v107 = v173;
        (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v171, v166, v173);
        v180[0]._countAndFlagsBits = 10272;
        v180[0]._object = (void *)0xE200000000000000;
        v179 = IndexPath.section.getter();
        v108._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v108);
        swift_bridgeObjectRelease();
        v109._countAndFlagsBits = 8236;
        v109._object = (void *)0xE200000000000000;
        String.append(_:)(v109);
        v179 = IndexPath.row.getter();
        v110._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v110);
        swift_bridgeObjectRelease();
        v111._countAndFlagsBits = 41;
        v111._object = (void *)0xE100000000000000;
        String.append(_:)(v111);
        String.append(_:)(v180[0]);
        v101 = v172;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v101 + 8))(v106, v107);
        v102 += v165;
        if (!--v100)
        {
          v164(v166, 1, 1, v173);
          break;
        }
      }
    }
    else
    {
      v112 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v172 + 56);
      swift_bridgeObjectRetain();
      v112(v166, 1, 1, v173);
    }
    swift_bridgeObjectRelease();
    v2 = v162;
    a1 = v161;
  }
  v113 = *(void (**)(char *, char *, uint64_t))(v2 + a1[13]);
  if (*((_QWORD *)v113 + 2))
  {
    v166 = (char *)v23;
    v114._countAndFlagsBits = 10;
    v114._object = (void *)0xE100000000000000;
    String.append(_:)(v114);
    v115._countAndFlagsBits = 0x6F5265766F6D2020;
    v115._object = (void *)0xEB000000003A7377;
    String.append(_:)(v115);
    v116 = *((_QWORD *)v113 + 2);
    result = swift_bridgeObjectRetain();
    i = 0;
    v165 = v26;
    v167 = v113;
    v119 = v171;
    v120 = v168;
    if (v116)
      goto LABEL_35;
LABEL_34:
    type metadata accessor for (source: IndexPath, destination: IndexPath)();
    v122 = v121;
    v123 = v170;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 56))(v170, 1, 1, v121);
    for (i = v116; ; ++i)
    {
      v126 = v123;
      v127 = v169;
      outlined init with take of (source: IndexPath, destination: IndexPath)?(v126, v169);
      type metadata accessor for (source: IndexPath, destination: IndexPath)();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v122 - 8) + 48))(v127, 1, v122) == 1)
      {
        swift_bridgeObjectRelease();
        v26 = v165;
        v23 = (uint64_t)v166;
        goto LABEL_41;
      }
      v128 = v127 + *(int *)(v122 + 48);
      v129 = v172;
      v130 = *(void (**)(char *, uint64_t, uint64_t))(v172 + 32);
      v131 = v127;
      v132 = v173;
      v130(v119, v131, v173);
      v130(v120, v128, v132);
      v180[0]._countAndFlagsBits = 0;
      v180[0]._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      v180[0]._countAndFlagsBits = 10272;
      v180[0]._object = (void *)0xE200000000000000;
      v179 = IndexPath.section.getter();
      v133._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v133);
      swift_bridgeObjectRelease();
      v134._countAndFlagsBits = 8236;
      v134._object = (void *)0xE200000000000000;
      String.append(_:)(v134);
      v179 = IndexPath.row.getter();
      v135._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v135);
      swift_bridgeObjectRelease();
      v136._countAndFlagsBits = 0x28203E2D2029;
      v136._object = (void *)0xE600000000000000;
      String.append(_:)(v136);
      v179 = IndexPath.section.getter();
      v137._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v137);
      swift_bridgeObjectRelease();
      v138._countAndFlagsBits = 8236;
      v138._object = (void *)0xE200000000000000;
      String.append(_:)(v138);
      v179 = IndexPath.row.getter();
      v139._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v139);
      swift_bridgeObjectRelease();
      v140._countAndFlagsBits = 41;
      v140._object = (void *)0xE100000000000000;
      String.append(_:)(v140);
      String.append(_:)(v180[0]);
      swift_bridgeObjectRelease();
      v141 = *(void (**)(char *, uint64_t))(v129 + 8);
      v113 = v167;
      v141(v120, v132);
      result = ((uint64_t (*)(char *, uint64_t))v141)(v119, v132);
      if (i == v116)
        goto LABEL_34;
LABEL_35:
      if (i >= *((_QWORD *)v113 + 2))
        break;
      type metadata accessor for (source: IndexPath, destination: IndexPath)();
      v122 = v124;
      v125 = *(_QWORD *)(v124 - 8);
      v123 = v170;
      outlined init with copy of (source: IndexPath, destination: IndexPath)((uint64_t)v113+ ((*(unsigned __int8 *)(v125 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80))+ *(_QWORD *)(v125 + 72) * i, v170);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v125 + 56))(v123, 0, 1, v122);
    }
    __break(1u);
  }
  else
  {
LABEL_41:
    if ((IndexSet.isEmpty.getter() & 1) == 0)
    {
      v142._countAndFlagsBits = 10;
      v142._object = (void *)0xE100000000000000;
      String.append(_:)(v142);
      v143._countAndFlagsBits = 0xD00000000000001CLL;
      v143._object = (void *)0x8000000187BD8470;
      String.append(_:)(v143);
      v144 = (uint64_t)v159;
      IndexSet.makeIterator()();
      v145 = v144 + *(int *)(v160 + 36);
      v146 = *(void (**)(char *, uint64_t, uint64_t))(v178 + 16);
      v147 = v176;
      while (1)
      {
        v146(v147, v145, v26);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E0]);
        v148 = v177;
        dispatch thunk of Collection.endIndex.getter();
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1248], MEMORY[0x1E0CB1260]);
        v149 = dispatch thunk of static Equatable.== infix(_:_:)();
        v150 = *(void (**)(char *, uint64_t))(v178 + 8);
        v150(v148, v26);
        v150(v147, v26);
        if ((v149 & 1) != 0)
          break;
        v151 = (void (*)(Swift::String *, _QWORD))dispatch thunk of Collection.subscript.read();
        v153 = *v152;
        v151(v180, 0);
        v154 = v174;
        v155 = v175;
        (*(void (**)(char *, uint64_t, uint64_t))(v175 + 16))(v174, v144, v23);
        dispatch thunk of Collection.formIndex(after:)();
        (*(void (**)(char *, uint64_t))(v155 + 8))(v154, v23);
        v179 = v153;
        v180[0]._countAndFlagsBits = 32;
        v180[0]._object = (void *)0xE100000000000000;
        v156._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v156);
        swift_bridgeObjectRelease();
        String.append(_:)(v180[0]);
        swift_bridgeObjectRelease();
      }
      outlined destroy of IndexingIterator<IndexSet>(v144);
    }
    v157._countAndFlagsBits = 32010;
    v157._object = (void *)0xE200000000000000;
    String.append(_:)(v157);
    return v181;
  }
  return result;
}

void static ListUpdate.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[18];
  uint64_t TupleTypeMetadata2;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v58 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v51[7] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v10);
  v51[3] = (char *)v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v51[8] = (char *)v51 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v51[9] = (char *)v51 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v51[15] = (char *)v51 - v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v51[14] = (char *)v51 - v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v51[6] = (char *)v51 - v26;
  MEMORY[0x1E0C80A78](v27, v28);
  v51[13] = (char *)v51 - v29;
  MEMORY[0x1E0C80A78](v30, v31);
  v51[12] = (char *)v51 - v32;
  v55 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v33, v34);
  v51[4] = (char *)v51 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36, v37);
  v51[5] = (char *)v51 - v38;
  v59 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v39, v40);
  v51[2] = (char *)v51 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v42, v43);
  v51[1] = (char *)v51 - v44;
  MEMORY[0x1E0C80A78](v45, v46);
  v53 = (char *)v51 - v47;
  MEMORY[0x1E0C80A78](v48, v49);
  v56 = (char *)v51 - v50;
  v57 = a3;
  v60 = a3;
  v61 = a4;
  v51[16] = a6;
  v51[17] = a4;
  v54 = a5;
  v62 = a5;
  v63 = a6;
  type metadata accessor for ListUpdate();
}

uint64_t sub_18712F658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t TupleTypeMetadata2;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t, uint64_t, double);
  int EnumCaseMultiPayload;

  v12 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v10 - 272) = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  *(_QWORD *)(v10 - 264) = (char *)&a9 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  MEMORY[0x1E0C80A78](v19, v20);
  MEMORY[0x1E0C80A78](v21, v22);
  MEMORY[0x1E0C80A78](v23, v24);
  MEMORY[0x1E0C80A78](v25, v26);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v10 - 168) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v29 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v28);
  v31 = (char *)&a9 - v30;
  *(_QWORD *)(v10 - 160) = v32;
  v33 = (char *)&a9 + *(int *)(v32 + 48) - v30;
  *(_QWORD *)(v10 - 184) = v12;
  v34 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
  v34((char *)&a9 - v30, v9, a1, v29);
  ((void (*)(char *, _QWORD, uint64_t))v34)(v33, *(_QWORD *)(v10 - 136), a1);
  *(_QWORD *)(v10 - 136) = v31;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_18712F7EC + 4 * word_187C0BC80[EnumCaseMultiPayload]))();
}

uint64_t sub_18712F7EC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  v5 = *(_QWORD *)(v4 - 136);
  v1(v2, v5, v0);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 128) + 8))(v2, *(_QWORD *)(v4 - 144));
    v6 = 0;
    v7 = *(_QWORD *)(v4 - 168);
    v0 = *(_QWORD *)(v4 - 160);
  }
  else
  {
    v8 = *(_QWORD *)(v4 - 128);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    v10 = *(_QWORD *)(v4 - 152);
    v11 = *(_QWORD *)(v4 - 144);
    v9(v10, v2, v11);
    v12 = *(_QWORD *)(v4 - 200);
    v9(v12, v3, v11);
    v6 = dispatch thunk of static Equatable.== infix(_:_:)();
    v13 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v13(v12, v11);
    v13(v10, v11);
    v7 = *(_QWORD *)(v4 - 184);
  }
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v0);
  return v6 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ListUpdate<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  static ListUpdate.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

void ListBatchUpdates.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[11];
  uint64_t TupleTypeMetadata2;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v50 = a1;
  v49 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v2 = type metadata accessor for CountingIndex();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v3 = type metadata accessor for CountingIndex();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v46[1] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v4);
  v46[2] = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v46[3] = (char *)v46 - v8;
  MEMORY[0x1E0C80A78](v9, v10);
  v46[8] = (char *)v46 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v46[7] = (char *)v46 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v48 = (char *)v46 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v46[9] = (char *)v46 - v20;
  v46[10] = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v46[6] = (char *)v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v46[5] = (char *)v46 - v26;
  v51 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v27, v28);
  MEMORY[0x1E0C80A78](v29, v30);
  v46[4] = (char *)v46 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  MEMORY[0x1E0C80A78](v34, v35);
  MEMORY[0x1E0C80A78](v36, v37);
  MEMORY[0x1E0C80A78](v38, v39);
  v42 = MEMORY[0x1E0C80A78](v40, v41);
  v43 = MEMORY[0x1E0CE1E60];
  v44 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1E60], v2, v42);
  v45 = MEMORY[0x18D75FFDC](v43, v3);
  v52 = v2;
  v53 = v3;
  v54 = v44;
  v55 = v45;
  type metadata accessor for ListUpdate();
}

uint64_t sub_187130450(uint64_t a1, uint64_t a2)
{
  unsigned int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1, a2);
  Array.subscript.getter();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)&loc_1871304A8 + *((int *)qword_187130A50 + EnumCaseMultiPayload)))();
}

uint64_t sub_1871304B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = *(_QWORD *)(v3 - 128);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, v1, v0);
  v5 = (uint64_t *)(v2 + *(int *)(v0 + 36));
  if ((v5[1] & 1) != 0)
  {
    __break(1u);
    JUMPOUT(0x187130A20);
  }
  v6 = *v5;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v0);
  v8 = *(_QWORD *)(v3 - 152);
  *(_QWORD *)v8 = v6;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 32) = 0;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance ListBatchUpdates<A>()
{
  return RandomAccessCollection<>.index(_:offsetBy:)();
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance ListBatchUpdates<A>()
{
  return RandomAccessCollection<>.distance(from:to:)();
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance ListBatchUpdates<A>@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    *a2 = *result - 1;
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ListBatchUpdates<A>(_QWORD *result)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    --*result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance ListBatchUpdates<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListBatchUpdates<A>, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance ListBatchUpdates<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListBatchUpdates<A>, a4);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance ListBatchUpdates<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListBatchUpdates<A>, a3);
  return RandomAccessCollection<>.distance(from:to:)();
}

void protocol witness for Collection.endIndex.getter in conformance ListBatchUpdates<A>()
{
  ListBatchUpdates.endIndex.getter();
}

uint64_t sub_187130BE8(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void protocol witness for Collection.subscript.read in conformance ListBatchUpdates<A>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;

  v5 = malloc(0x78uLL);
  *a1 = v5;
  v6 = *a2;
  v7 = *(_OWORD *)(v2 + 16);
  *v5 = *(_OWORD *)v2;
  v5[1] = v7;
  *((_QWORD *)v5 + 4) = *(_QWORD *)(v2 + 32);
  ListBatchUpdates.subscript.read((_QWORD *)v5 + 10, v6);
}

void (*sub_187130C4C(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v2;
  char v3;
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 112) = a1;
  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)a2;
  v5 = v2 + 40;
  *(_OWORD *)(v5 + 16) = v4;
  *(_BYTE *)(v5 + 32) = v3;
  return protocol witness for Collection.subscript.read in conformance ListBatchUpdates<A>;
}

void protocol witness for Collection.subscript.read in conformance ListBatchUpdates<A>(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(*(_QWORD *)a1 + 80);
  free(v1);
}

void ListBatchUpdates.subscript.read(_QWORD *a1, uint64_t a2)
{
  void *v4;

  v4 = malloc(0x21uLL);
  *a1 = v4;
  ListBatchUpdates.subscript.getter(a2, (uint64_t)v4);
}

void (*sub_187130CF0())(void **a1)
{
  return ListBatchUpdates.subscript.read;
}

void ListBatchUpdates.subscript.read(void **a1)
{
  free(*a1);
}

uint64_t protocol witness for Collection.indices.getter in conformance ListBatchUpdates<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListBatchUpdates<A>, a1);
  return RandomAccessCollection<>.indices.getter();
}

_QWORD *protocol witness for Collection.index(after:) in conformance ListBatchUpdates<A>@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance ListBatchUpdates<A>(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance ListBatchUpdates<A>@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = *(_QWORD *)(v1 + 32);
  result = *(__n128 *)v1;
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v2;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ListBatchUpdates<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListBatchUpdates<A>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ListBatchUpdates<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListBatchUpdates<A>, a1);
  return Collection._copyToContiguousArray()();
}

void closure #1 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = type metadata accessor for CountingIndex();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v5 = type metadata accessor for CountingIndex();
  v6 = a3 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, a2, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v6, a1, v5);
  v7 = MEMORY[0x1E0CE1E60];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1E60], v4);
  MEMORY[0x18D75FFDC](v7, v5);
  type metadata accessor for ListUpdate();
}

uint64_t sub_187131030()
{
  return swift_storeEnumTagMultiPayload();
}

void ListBatchUpdates.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v0 = type metadata accessor for CountingIndex();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v1 = type metadata accessor for CountingIndex();
  v2 = MEMORY[0x1E0CE1E60];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1E60], v0);
  MEMORY[0x18D75FFDC](v2, v1);
  type metadata accessor for ListUpdate();
}

uint64_t sub_1871311F4()
{
  uint64_t v0;

  v0 = type metadata accessor for Array();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF68], v0);
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void base witness table accessor for Sequence in ListBatchUpdates<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in ListBatchUpdates<A>()
{
  return MEMORY[0x1E0DEB430];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in ListBatchUpdates<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : Collection in ListBatchUpdates<A>(a1, a2, a3, MEMORY[0x1E0DEB8C0]);
}

void base witness table accessor for Collection in ListBatchUpdates<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in ListBatchUpdates<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : Collection in ListBatchUpdates<A>(a1, a2, a3, MEMORY[0x1E0DEB890]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ListBatchUpdates<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListBatchUpdates<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE28], a1, &v3);
}

void base witness table accessor for BidirectionalCollection in ListBatchUpdates<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in ListBatchUpdates<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : Collection in ListBatchUpdates<A>(a1, a2, a3, MEMORY[0x1E0DEB8B8]);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in ListBatchUpdates<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  _QWORD v8[2];

  v6 = lazy protocol witness table accessor for type Int and conformance Int();
  v8[0] = MEMORY[0x1E0DEB458];
  v8[1] = v6;
  return MEMORY[0x18D75FFDC](a4, a1, v8);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in ListBatchUpdates<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListBatchUpdates<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE40], a1, &v3);
}

void type metadata accessor for IndexingIterator<IndexSet>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for IndexingIterator<IndexSet>)
  {
    type metadata accessor for IndexSet();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E0]);
    v0 = type metadata accessor for IndexingIterator();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<IndexSet>);
  }
}

uint64_t outlined destroy of IndexingIterator<IndexSet>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for IndexingIterator<IndexSet>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of (source: IndexPath, destination: IndexPath)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (source: IndexPath, destination: IndexPath)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of (source: IndexPath, destination: IndexPath)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for (source: IndexPath, destination: IndexPath)?, (void (*)(uint64_t))type metadata accessor for (source: IndexPath, destination: IndexPath));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall Array._checkSubscript_mutating(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  char isClassOrObjCExistentialType;
  uint64_t v5;

  v2 = v1;
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  if (a1 < 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  v5 = v2 & 0xFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0)
    v5 = v2;
  if (*(_QWORD *)(v5 + 16) <= (unint64_t)a1)
    goto LABEL_7;
}

void specialized ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[21];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v38 = a6;
  v39 = a8;
  v31 = a4;
  v35 = a3;
  v30 = a2;
  v34 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v32 = type metadata accessor for CountingIndexCollection();
  v28 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5A00], v32);
  v12 = type metadata accessor for DefaultIndices();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA218], v12);
  v27 = type metadata accessor for LazySequence();
  v26[20] = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v13);
  v26[19] = (char *)v26 - v14;
  v26[18] = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v26[17] = (char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v26[16] = (char *)v26 - v20;
  v36 = a5;
  v37 = a7;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v21 = type metadata accessor for CountingIndex();
  v29 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v33 = AssociatedTypeWitness;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v22 = type metadata accessor for CountingIndex();
  v23 = MEMORY[0x1E0CE1E60];
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1E60], v21);
  v25 = MEMORY[0x18D75FFDC](v23, v22);
  v40 = v21;
  v41 = v22;
  v42 = v24;
  v43 = v25;
  type metadata accessor for ListUpdate();
}

void sub_1871317FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)(v14 - 328) = v13;
  *(_QWORD *)(v14 - 336) = v12;
  v15 = type metadata accessor for LazyMapSequence();
  *(_QWORD *)(v14 - 392) = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  *(_QWORD *)(v14 - 400) = (char *)&a9 - v17;
  *(_QWORD *)(v14 - 208) = v11;
  v18 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v14 - 224) = v18;
  *(_QWORD *)(v14 - 232) = *(_QWORD *)(v18 + 64);
  MEMORY[0x1E0C80A78](v19, v20);
  *(_QWORD *)(v14 - 240) = (char *)&a9 - v21;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v22 = type metadata accessor for CountingIndexCollection();
  *(_QWORD *)(v14 - 408) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5A00], v22);
  v23 = type metadata accessor for DefaultIndices();
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA218], v23);
  v25 = type metadata accessor for LazySequence();
  *(_QWORD *)(v14 - 432) = v25;
  *(_QWORD *)(v14 - 440) = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  *(_QWORD *)(v14 - 448) = (char *)&a9 - v27;
  *(_QWORD *)(v14 - 456) = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  *(_QWORD *)(v14 - 464) = (char *)&a9 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  *(_QWORD *)(v14 - 472) = (char *)&a9 - v33;
  *(_QWORD *)(v14 - 416) = v23;
  *(_QWORD *)(v14 - 424) = v24;
  v34 = type metadata accessor for LazyMapSequence();
  *(_QWORD *)(v14 - 480) = v34;
  MEMORY[0x1E0C80A78](v34, v35);
  *(_QWORD *)(v14 - 488) = (char *)&a9 - v36;
  v37 = type metadata accessor for Range();
  *(_QWORD *)(v14 - 144) = *(_QWORD *)(v37 - 8);
  *(_QWORD *)(v14 - 136) = v37;
  MEMORY[0x1E0C80A78](v37, v38);
  *(_QWORD *)(v14 - 168) = (char *)&a9 - v39;
  *(_QWORD *)(v14 - 120) = v10;
  *(_QWORD *)(v14 - 112) = v10;
  *(_QWORD *)(v14 - 128) = v9;
  *(_QWORD *)(v14 - 104) = v9;
  *(_QWORD *)(v14 - 96) = v9;
  type metadata accessor for CollectionChanges.Element();
}

void sub_187131A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v11 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v11 - 152) = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v12, v13);
  v14 = *(_QWORD *)(v11 - 272);
  *(_QWORD *)(v11 - 496) = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&a9 - v17;
  *(_QWORD *)(v11 - 504) = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&a9 - v21;
  *(_QWORD *)(v11 - 216) = v9;
  *(_QWORD *)(v11 - 120) = Array.init()();
  v24 = type metadata accessor for CountingIndexListDataSource(0, *(_QWORD *)(v11 - 184), *(_QWORD *)(v11 - 176), v23);
  CountingIndexListDataSource.rowIDs(forSectionAt:)(*(_QWORD *)(v11 - 288), v24, (uint64_t)v22);
  v26 = type metadata accessor for CountingIndexListDataSource(0, *(_QWORD *)(v11 - 200), *(_QWORD *)(v11 - 192), v25);
  CountingIndexListDataSource.rowIDs(forSectionAt:)(*(_QWORD *)(v11 - 280), v26, (uint64_t)v18);
  v27 = MEMORY[0x1E0CE59F8];
  *(_QWORD *)(v11 - 248) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE59F8], v10);
  MEMORY[0x18D75FFDC](v27, v14);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v11 - 312) = v22;
  *(_QWORD *)(v11 - 304) = v18;
  *(_QWORD *)(v11 - 296) = v10;
  specialized CollectionChanges.init<A, B>(from:to:)();
}

void sub_187131C5C()
{
  CollectionChanges.endIndex.getter();
}

uint64_t sub_187131C78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    *(_QWORD *)(v4 - 256) = v2;
    *(_QWORD *)(v4 - 248) = v1;
    *(_QWORD *)(v4 - 264) = v3;
    CollectionChanges.subscript.getter();
  }
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 496) + 8))(*(_QWORD *)(v4 - 304), *(_QWORD *)(v4 - 272));
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 504) + 8))(*(_QWORD *)(v4 - 312), *(_QWORD *)(v4 - 296));
  return *(_QWORD *)(v4 - 120);
}

uint64_t type metadata accessor for ListUpdate<Int, Int>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ListUpdate<Int, Int>;
  if (!lazy cache variable for type metadata for ListUpdate<Int, Int>)
    type metadata accessor for ListUpdate();
  return result;
}

void partial apply for closure #2 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  partial apply for closure #2 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v5;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CountingIndex() - 8) + 80);
  closure #1 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(a1, v2 + ((v5 + 48) & ~v5), a2);
}

void partial apply for closure #1 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  partial apply for closure #2 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(a1, a2);
}

uint64_t getEnumTagSinglePayload for CountingIndexListDataSource(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1871323E8 + 4 * byte_187C0BC8E[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for CountingIndexListDataSource(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t destroy for ListBatchUpdates()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ListBatchUpdates(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ListBatchUpdates(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ListBatchUpdates(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ListBatchUpdates(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ListBatchUpdates(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ListUpdate(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v21;
  _QWORD *result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(unint64_t, unint64_t, uint64_t);
  void (*v33)(_QWORD *, _QWORD *, uint64_t);

  v4 = a1;
  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_DWORD *)(v7 + 80);
  v10 = v8 + v9;
  v11 = *(_QWORD *)(v5 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v8 + v12;
  v14 = ((v8 + v12) & ~v12) + *(_QWORD *)(v11 + 64);
  v15 = v12 | v9;
  v16 = v14 + (v12 | v9);
  if (v8 <= ((v8 + v9) & ~v9) + v8)
    v8 += (v8 + v9) & ~v9;
  if (v14 <= (v16 & ~(v12 | v9)) + v14)
    v17 = (v16 & ~(v12 | v9)) + v14;
  else
    v17 = v14;
  if (v8 <= v17)
    v18 = v17;
  else
    v18 = v8;
  if (v15 > 7 || ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0 || v18 + 1 > 0x18)
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v21 + ((v15 + 16) & ~(v12 | v9)));
    swift_retain();
  }
  else
  {
    v24 = ~v9;
    v25 = ~v12;
    switch(*((_BYTE *)a2 + v18))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
        *((_BYTE *)v4 + v18) = 0;
        break;
      case 1:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
        *((_BYTE *)v4 + v18) = 1;
        break;
      case 2:
        v26 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16);
        v26(a1, a2, v6);
        v26((_QWORD *)(((unint64_t)v4 + v10) & v24), (_QWORD *)(((unint64_t)a2 + v10) & v24), v6);
        *((_BYTE *)v4 + v18) = 2;
        break;
      case 3:
        v27 = v5;
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))(((unint64_t)v4 + v13) & v25, ((unint64_t)a2 + v13) & v25, v27);
        *((_BYTE *)v4 + v18) = 3;
        break;
      case 4:
        v28 = v5;
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))(((unint64_t)v4 + v13) & v25, ((unint64_t)a2 + v13) & v25, v28);
        *((_BYTE *)v4 + v18) = 4;
        break;
      case 5:
        v33 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16);
        v29 = ~(v12 | v9);
        v30 = v5;
        v33(a1, a2, v6);
        v32 = *(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16);
        v32(((unint64_t)v4 + v13) & v25, ((unint64_t)a2 + v13) & v25, v30);
        v31 = ((unint64_t)a2 + v16) & v29;
        v33((_QWORD *)(((unint64_t)v4 + v16) & v29), (_QWORD *)v31, v6);
        v32((v13 + (((unint64_t)v4 + v16) & v29)) & v25, (v13 + v31) & v25, v30);
        *((_BYTE *)v4 + v18) = 5;
        break;
      case 6:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
        *((_BYTE *)v4 + v18) = 6;
        break;
      default:
        if (v18 <= 3)
          v23 = v18;
        else
          v23 = 4;
        __asm { BR              X15 }
        return result;
    }
  }
  return v4;
}

uint64_t destroy for ListUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t result;
  void (*v24)(uint64_t, uint64_t);

  v2 = a1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(v3 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = v6 + v7;
  v9 = *(_QWORD *)(v4 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v6 + v10;
  v12 = ((v6 + v10) & ~v10) + *(_QWORD *)(v9 + 64);
  v13 = v12 + (v10 | v7);
  if (v6 <= ((v6 + v7) & ~v7) + v6)
    v6 += (v6 + v7) & ~v7;
  if (v12 <= (v13 & ~(v10 | v7)) + v12)
    v14 = (v13 & ~(v10 | v7)) + v12;
  else
    v14 = v12;
  if (v6 <= v14)
    v6 = v14;
  v16 = ~v7;
  v17 = ~v10;
  v18 = ~(v10 | v7);
  switch(*(_BYTE *)(a1 + v6))
  {
    case 0:
    case 1:
    case 6:
      v19 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
      v20 = *(_QWORD *)(a2 + 16);
      return v19(a1, v20);
    case 2:
      v24 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v24(a1, v3);
      a1 = (v8 + v2) & v16;
      v20 = v3;
      goto LABEL_18;
    case 3:
    case 4:
      (*(void (**)(uint64_t, _QWORD))(v5 + 8))(a1, *(_QWORD *)(a2 + 16));
      a1 = (v11 + v2) & v17;
      v19 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
      v20 = v4;
      return v19(a1, v20);
    case 5:
      v21 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v21(a1, *(_QWORD *)(a2 + 16));
      v24 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
      v24((v11 + v2) & v17, v4);
      v22 = (v13 + v2) & v18;
      v21(v22, v3);
      a1 = (v11 + v22) & v17;
      v20 = v4;
LABEL_18:
      v19 = (uint64_t (*)(uint64_t, uint64_t))v24;
      return v19(a1, v20);
    default:
      if (v6 <= 3)
        v15 = v6;
      else
        v15 = 4;
      __asm { BR              X17 }
      return result;
  }
}

uint64_t initializeWithCopy for ListUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;

  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = v7 + v8;
  v10 = *(_QWORD *)(v4 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v7 + v11;
  v13 = ((v7 + v11) & ~v11) + *(_QWORD *)(v10 + 64);
  v14 = v13 + (v11 | v8);
  if (v7 <= ((v7 + v8) & ~v8) + v7)
    v7 += (v7 + v8) & ~v8;
  if (v13 <= (v14 & ~(v11 | v8)) + v13)
    v15 = (v14 & ~(v11 | v8)) + v13;
  else
    v15 = v13;
  if (v7 <= v15)
    v16 = v15;
  else
    v16 = v7;
  v18 = ~v8;
  v19 = ~v11;
  v20 = ~(v11 | v8);
  switch(*(_BYTE *)(a2 + v16))
  {
    case 0:
      v21 = a1;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
      v22 = 0;
      break;
    case 1:
      v21 = a1;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
      v22 = 1;
      break;
    case 2:
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
      v21 = a1;
      v23(a1, a2, v5);
      v23((v9 + v21) & v18, (v9 + a2) & v18, v5);
      v22 = 2;
      break;
    case 3:
      v21 = a1;
      v24 = v4;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))((v12 + v21) & v19, (v12 + a2) & v19, v24);
      v22 = 3;
      break;
    case 4:
      v21 = a1;
      v25 = v4;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))((v12 + v21) & v19, (v12 + a2) & v19, v25);
      v22 = 4;
      break;
    case 5:
      v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
      v33 = v4;
      v32(a1, a2, v5);
      v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      v27((v12 + a1) & v19, (v12 + a2) & v19, v33);
      v28 = (v14 + a1) & v20;
      v29 = v14 + a2;
      v21 = a1;
      v30 = v29 & v20;
      v32(v28, v29 & v20, v5);
      v27((v12 + v28) & v19, (v12 + v30) & v19, v33);
      v22 = 5;
      break;
    case 6:
      v21 = a1;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
      v22 = 6;
      break;
    default:
      if (v16 <= 3)
        v17 = v16;
      else
        v17 = 4;
      __asm { BR              X16 }
      return result;
  }
  *(_BYTE *)(v21 + v16) = v22;
  return v21;
}

uint64_t assignWithCopy for ListUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t, uint64_t);
  char v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t, uint64_t);
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(unsigned __int8 *)(v7 + 80);
    v35 = v8 + v9;
    v10 = *(_QWORD *)(v6 - 8);
    v11 = *(unsigned __int8 *)(v10 + 80);
    v12 = v8 + v11;
    v13 = ((v8 + v11) & ~v11) + *(_QWORD *)(v10 + 64);
    v14 = v13 + (v11 | v9);
    if (v8 <= ((v8 + v9) & ~v9) + v8)
      v8 += (v8 + v9) & ~v9;
    if (v13 <= (v14 & ~(v11 | v9)) + v13)
      v15 = (v14 & ~(v11 | v9)) + v13;
    else
      v15 = v13;
    if (v8 <= v15)
      v16 = v15;
    else
      v16 = v8;
    v18 = ~v11;
    v33 = ~v9;
    v34 = ~(v11 | v9);
    switch(*(_BYTE *)(a1 + v16))
    {
      case 0:
      case 1:
      case 6:
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v5);
        break;
      case 2:
        v31 = v13 + (v11 | v9);
        v20 = *(_QWORD *)(a3 + 24);
        v21 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
        v21(a1, v5);
        v21((v35 + a1) & v33, v5);
        v6 = v20;
        v14 = v31;
        break;
      case 3:
      case 4:
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v5);
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))((v12 + a1) & v18, v6);
        break;
      case 5:
        v30 = ~v11;
        v22 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
        v22(a1, v5);
        v32 = v14;
        v23 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
        v23((v12 + a1) & v30, v6);
        v22((v32 + a1) & v34, v5);
        v18 = v30;
        v23((v12 + ((v32 + a1) & v34)) & v30, v6);
        v14 = v32;
        break;
      default:
        if (v16 <= 3)
          v17 = v16;
        else
          v17 = 4;
        __asm { BR              X15 }
        return result;
    }
    switch(*(_BYTE *)(a2 + v16))
    {
      case 0:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v5);
        v24 = 0;
        break;
      case 1:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v5);
        v24 = 1;
        break;
      case 2:
        v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
        v25(a1, a2, v5);
        v25((v35 + a1) & v33, (v35 + a2) & v33, v5);
        v24 = 2;
        break;
      case 3:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v5);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))((v12 + a1) & v18, (v12 + a2) & v18, v6);
        v24 = 3;
        break;
      case 4:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v5);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))((v12 + a1) & v18, (v12 + a2) & v18, v6);
        v24 = 4;
        break;
      case 5:
        v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
        v26(a1, a2, v5);
        v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
        v27((v12 + a1) & v18, (v12 + a2) & v18, v6);
        v28 = (v14 + a2) & v34;
        v26((v14 + a1) & v34, v28, v5);
        v27((v12 + ((v14 + a1) & v34)) & v18, (v12 + v28) & v18, v6);
        v24 = 5;
        break;
      case 6:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v5);
        v24 = 6;
        break;
      default:
        if (v16 <= 3)
          v19 = v16;
        else
          v19 = 4;
        __asm { BR              X12 }
        return result;
    }
    *(_BYTE *)(a1 + v16) = v24;
  }
  return a1;
}

uint64_t initializeWithTake for ListUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;

  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = v7 + v8;
  v10 = *(_QWORD *)(v4 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v7 + v11;
  v13 = ((v7 + v11) & ~v11) + *(_QWORD *)(v10 + 64);
  v14 = v13 + (v11 | v8);
  if (v7 <= ((v7 + v8) & ~v8) + v7)
    v7 += (v7 + v8) & ~v8;
  if (v13 <= (v14 & ~(v11 | v8)) + v13)
    v15 = (v14 & ~(v11 | v8)) + v13;
  else
    v15 = v13;
  if (v7 <= v15)
    v16 = v15;
  else
    v16 = v7;
  v18 = ~v8;
  v19 = ~v11;
  v20 = ~(v11 | v8);
  switch(*(_BYTE *)(a2 + v16))
  {
    case 0:
      v21 = a1;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
      v22 = 0;
      break;
    case 1:
      v21 = a1;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
      v22 = 1;
      break;
    case 2:
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
      v21 = a1;
      v23(a1, a2, v5);
      v23((v9 + v21) & v18, (v9 + a2) & v18, v5);
      v22 = 2;
      break;
    case 3:
      v21 = a1;
      v24 = v4;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))((v12 + v21) & v19, (v12 + a2) & v19, v24);
      v22 = 3;
      break;
    case 4:
      v21 = a1;
      v25 = v4;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))((v12 + v21) & v19, (v12 + a2) & v19, v25);
      v22 = 4;
      break;
    case 5:
      v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
      v33 = v4;
      v32(a1, a2, v5);
      v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
      v27((v12 + a1) & v19, (v12 + a2) & v19, v33);
      v28 = (v14 + a1) & v20;
      v29 = v14 + a2;
      v21 = a1;
      v30 = v29 & v20;
      v32(v28, v29 & v20, v5);
      v27((v12 + v28) & v19, (v12 + v30) & v19, v33);
      v22 = 5;
      break;
    case 6:
      v21 = a1;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
      v22 = 6;
      break;
    default:
      if (v16 <= 3)
        v17 = v16;
      else
        v17 = 4;
      __asm { BR              X16 }
      return result;
  }
  *(_BYTE *)(v21 + v16) = v22;
  return v21;
}

uint64_t assignWithTake for ListUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t, uint64_t);
  char v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t, uint64_t);
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(unsigned __int8 *)(v7 + 80);
    v35 = v8 + v9;
    v10 = *(_QWORD *)(v6 - 8);
    v11 = *(unsigned __int8 *)(v10 + 80);
    v12 = v8 + v11;
    v13 = ((v8 + v11) & ~v11) + *(_QWORD *)(v10 + 64);
    v14 = v13 + (v11 | v9);
    if (v8 <= ((v8 + v9) & ~v9) + v8)
      v8 += (v8 + v9) & ~v9;
    if (v13 <= (v14 & ~(v11 | v9)) + v13)
      v15 = (v14 & ~(v11 | v9)) + v13;
    else
      v15 = v13;
    if (v8 <= v15)
      v16 = v15;
    else
      v16 = v8;
    v18 = ~v11;
    v33 = ~v9;
    v34 = ~(v11 | v9);
    switch(*(_BYTE *)(a1 + v16))
    {
      case 0:
      case 1:
      case 6:
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v5);
        break;
      case 2:
        v31 = v13 + (v11 | v9);
        v20 = *(_QWORD *)(a3 + 24);
        v21 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
        v21(a1, v5);
        v21((v35 + a1) & v33, v5);
        v6 = v20;
        v14 = v31;
        break;
      case 3:
      case 4:
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v5);
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))((v12 + a1) & v18, v6);
        break;
      case 5:
        v30 = ~v11;
        v22 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
        v22(a1, v5);
        v32 = v14;
        v23 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
        v23((v12 + a1) & v30, v6);
        v22((v32 + a1) & v34, v5);
        v18 = v30;
        v23((v12 + ((v32 + a1) & v34)) & v30, v6);
        v14 = v32;
        break;
      default:
        if (v16 <= 3)
          v17 = v16;
        else
          v17 = 4;
        __asm { BR              X15 }
        return result;
    }
    switch(*(_BYTE *)(a2 + v16))
    {
      case 0:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v5);
        v24 = 0;
        break;
      case 1:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v5);
        v24 = 1;
        break;
      case 2:
        v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
        v25(a1, a2, v5);
        v25((v35 + a1) & v33, (v35 + a2) & v33, v5);
        v24 = 2;
        break;
      case 3:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v5);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))((v12 + a1) & v18, (v12 + a2) & v18, v6);
        v24 = 3;
        break;
      case 4:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v5);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))((v12 + a1) & v18, (v12 + a2) & v18, v6);
        v24 = 4;
        break;
      case 5:
        v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
        v26(a1, a2, v5);
        v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
        v27((v12 + a1) & v18, (v12 + a2) & v18, v6);
        v28 = (v14 + a2) & v34;
        v26((v14 + a1) & v34, v28, v5);
        v27((v12 + ((v14 + a1) & v34)) & v18, (v12 + v28) & v18, v6);
        v24 = 5;
        break;
      case 6:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v5);
        v24 = 6;
        break;
      default:
        if (v16 <= 3)
          v19 = v16;
        else
          v19 = 4;
        __asm { BR              X12 }
        return result;
    }
    *(_BYTE *)(a1 + v16) = v24;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ListUpdate(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  int v14;
  unsigned int v16;
  int v17;
  unsigned int v18;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = ((v4 + v5) & ~v5) + v4;
  if (v6 <= v4)
    v6 = v4;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((v4 + v8) & ~v8) + *(_QWORD *)(v7 + 64);
  if (v9 > v6)
    v6 = v9;
  v10 = ((v9 + (v8 | v5)) & ~(v8 | v5)) + v9;
  if (v10 <= v6)
    v10 = v6;
  if (v4 <= v10)
    v11 = v10;
  else
    v11 = v4;
  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_28;
  v12 = v11 + 1;
  v13 = 8 * (v11 + 1);
  if ((v11 + 1) <= 3)
  {
    v16 = ((a2 + ~(-1 << v13) - 249) >> v13) + 1;
    if (HIWORD(v16))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v16 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v16 < 2)
    {
LABEL_28:
      v18 = *(unsigned __int8 *)(a1 + v11);
      if (v18 >= 7)
        return (v18 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_28;
LABEL_21:
  v17 = (v14 - 1) << v13;
  if (v12 > 3)
    v17 = 0;
  if (!(_DWORD)v12)
    return (v17 + 250);
  if (v12 > 3)
    LODWORD(v12) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187133C6C + 4 * byte_187C0BCFC[(v12 - 1)]))();
}

void storeEnumTagSinglePayload for ListUpdate(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = ((v6 + v7) & ~v7) + v6;
  if (v8 <= v6)
    v8 = v6;
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((v6 + v10) & ~v10) + *(_QWORD *)(v9 + 64);
  if (v11 > v8)
    v8 = v11;
  v12 = ((v11 + (v10 | v7)) & ~(v10 | v7)) + v11;
  if (v12 <= v8)
    v12 = v8;
  if (v6 > v12)
    v12 = v6;
  v13 = v12 + 1;
  if (a3 < 0xFA)
  {
    v14 = 0u;
  }
  else if (v13 <= 3)
  {
    v16 = ((a3 + ~(-1 << (8 * v13)) - 249) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v14 = 4u;
    }
    else if (v16 >= 0x100)
    {
      v14 = 2;
    }
    else
    {
      v14 = v16 > 1;
    }
  }
  else
  {
    v14 = 1u;
  }
  if (a2 <= 0xF9)
    __asm { BR              X11 }
  v15 = a2 - 250;
  if (v13 < 4)
  {
    if ((_DWORD)v12 != -1)
    {
      v17 = v15 & ~(-1 << (8 * v13));
      bzero(a1, v13);
      if ((_DWORD)v13 == 3)
      {
        *a1 = v17;
        *((_BYTE *)a1 + 2) = BYTE2(v17);
      }
      else if ((_DWORD)v13 == 2)
      {
        *a1 = v17;
      }
      else
      {
        *(_BYTE *)a1 = v17;
      }
    }
  }
  else
  {
    bzero(a1, v12 + 1);
    *(_DWORD *)a1 = v15;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for ListUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = ((v3 + v4) & ~v4) + v3;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((v3 + v7) & ~v7) + *(_QWORD *)(v6 + 64);
  v9 = ((v8 + (v7 | v4)) & ~(v7 | v4)) + v8;
  if (v3 <= v5)
    v3 = v5;
  if (v8 > v9)
    v9 = v8;
  if (v3 <= v9)
    v10 = v9;
  else
    v10 = v3;
  if (*(unsigned __int8 *)(a1 + v10) < 7u)
    return *(unsigned __int8 *)(a1 + v10);
  if (v10 <= 3)
    v11 = v10;
  else
    v11 = 4;
  return ((uint64_t (*)(void))((char *)&loc_187133F38 + 4 * byte_187C0BD0A[v11]))();
}

void destructiveInjectEnumTag for ListUpdate(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (a2 > 6)
  {
    v12 = *(unsigned __int8 *)(v4 + 80);
    v13 = ((v5 + v12) & ~v12) + v5;
    if (v13 <= v5)
      v13 = v5;
    v14 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
    v15 = *(unsigned __int8 *)(v14 + 80);
    v16 = ((v5 + v15) & ~v15) + *(_QWORD *)(v14 + 64);
    if (v16 > v13)
      v13 = v16;
    v17 = ((v16 + (v15 | v12)) & ~(v15 | v12)) + v16;
    if (v17 <= v13)
      v17 = v13;
    if (v5 <= v17)
      v18 = v17;
    else
      v18 = v5;
    v19 = a2 - 7;
    if (v18 < 4)
    {
      v20 = v19 >> (8 * v18);
      v21 = v19 & ~(-1 << (8 * v18));
      a1[v18] = v20 + 7;
      bzero(a1, v18);
      if ((_DWORD)v18 == 3)
      {
        *(_WORD *)a1 = v21;
        a1[2] = BYTE2(v21);
      }
      else if ((_DWORD)v18 == 2)
      {
        *(_WORD *)a1 = v21;
      }
      else
      {
        *a1 = v21;
      }
    }
    else
    {
      a1[v18] = 7;
      bzero(a1, v18);
      *(_DWORD *)a1 = v19;
    }
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    v8 = ((v5 + v7) & ~v7) + *(_QWORD *)(v6 + 64);
    v9 = *(unsigned __int8 *)(v4 + 80);
    v10 = ((v8 + (v9 | v7)) & ~(v9 | v7)) + v8;
    v11 = ((v5 + v9) & ~v9) + v5;
    if (v11 <= v5)
      v11 = v5;
    if (v8 > v11)
      v11 = v8;
    if (v10 > v11)
      v11 = v10;
    if (v5 <= v11)
      v5 = v11;
    a1[v5] = a2;
  }
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v6 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, [TaskActionsContainer<(), ()>.ContainerEntry]>(0, a2, a3, a4, a5);
  v6 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v6;
  }
  swift_retain();
  v8 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v9 = *(v8 - 2);
    v10 = *(v8 - 1);
    v11 = *v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v6[6] + 16 * result);
    *v14 = v9;
    v14[1] = v10;
    *(_QWORD *)(v6[7] + 8 * result) = v11;
    v15 = v6[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6[2] = v17;
    v8 += 3;
    if (!--v7)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, void (*a2)(_QWORD))
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  a2(0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t _UIHostingView.as<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _UNKNOWN **v17;
  uint64_t v18;
  _UNKNOWN **v19;

  v7 = *MEMORY[0x1E0DEEDD8] & *v3;
  if (type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for FocusHost) == a1)
  {
    v12 = type metadata accessor for _UIHostingView(255, *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 88), v8);
    v16 = v3;
    v17 = (_UNKNOWN **)MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v12);
    v3 = *(_QWORD **)(a2 - 8);
    if (v3[8] == 16)
      goto LABEL_37;
    __break(1u);
    goto LABEL_16;
  }
  if (type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListHost) == a1)
  {
LABEL_16:
    v16 = v3;
    v17 = &protocol witness table for _UIHostingView<A>;
    v3 = *(_QWORD **)(a2 - 8);
    if (v3[8] == 16)
      goto LABEL_37;
    __break(1u);
    goto LABEL_18;
  }
  if (type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityHost) == a1)
  {
LABEL_18:
    v16 = v3;
    v17 = &protocol witness table for _UIHostingView<A>;
    v3 = *(_QWORD **)(a2 - 8);
    if (v3[8] == 16)
      goto LABEL_37;
    __break(1u);
    goto LABEL_20;
  }
  if (type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for UIViewControllerProvider) == a1)
  {
LABEL_20:
    v16 = v3;
    v17 = &protocol witness table for _UIHostingView<A>;
    v3 = *(_QWORD **)(a2 - 8);
    if (v3[8] == 16)
      goto LABEL_37;
    __break(1u);
    goto LABEL_22;
  }
  if (type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for EventGraphHost) == a1)
  {
LABEL_22:
    v13 = type metadata accessor for _UIHostingView(255, *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 88), v9);
    v16 = v3;
    v17 = (_UNKNOWN **)MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v13);
    v3 = *(_QWORD **)(a2 - 8);
    if (v3[8] == 16)
      goto LABEL_37;
    __break(1u);
    goto LABEL_24;
  }
  if (type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for PointerHost) == a1)
  {
LABEL_24:
    v16 = v3;
    v17 = &protocol witness table for _UIHostingView<A>;
    v3 = *(_QWORD **)(a2 - 8);
    if (v3[8] == 16)
      goto LABEL_37;
    __break(1u);
    goto LABEL_26;
  }
  if (type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for WindowLayoutHost) == a1)
  {
LABEL_26:
    v16 = v3;
    v17 = &protocol witness table for _UIHostingView<A>;
    v3 = *(_QWORD **)(a2 - 8);
    if (v3[8] == 16)
      goto LABEL_37;
    __break(1u);
    goto LABEL_28;
  }
  if (type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView) == a1)
  {
LABEL_28:
    v16 = v3;
    v3 = *(_QWORD **)(a2 - 8);
    if (v3[8] == 8)
      goto LABEL_37;
    __break(1u);
LABEL_30:
    result = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 88), v10);
    v18 = result;
    v19 = &protocol witness table for _UIHostingView<A>;
    v16 = v3;
    v14 = *(_QWORD *)(a2 - 8);
    if (*(_QWORD *)(v14 + 64) == 40)
    {
      (*(void (**)(uint64_t, _QWORD **, uint64_t))(v14 + 16))(a3, &v16, a2);
      v15 = v3;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, a2);
    }
    __break(1u);
    goto LABEL_40;
  }
  if (type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for CurrentEventProvider) == a1)goto LABEL_30;
  result = type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for FallbackResponderProvider);
  if (result == a1)
  {
    v16 = v3;
    v17 = &protocol witness table for _UIHostingView<A>;
    v3 = *(_QWORD **)(a2 - 8);
    if (v3[8] == 16)
      goto LABEL_37;
    __break(1u);
  }
  else
  {
    result = type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for ContainerBackgroundHost);
    if (result != a1)
    {
      result = type metadata accessor for ContainerBackgroundHost(0, &lazy cache variable for type metadata for RootTransformProvider);
      if (result != a1)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 1, 1, a2);
LABEL_36:
      v16 = v3;
      v17 = &protocol witness table for _UIHostingView<A>;
      v3 = *(_QWORD **)(a2 - 8);
      if (v3[8] == 16)
        goto LABEL_37;
LABEL_40:
      __break(1u);
      return result;
    }
  }
  v16 = v3;
  v17 = &protocol witness table for _UIHostingView<A>;
  v3 = *(_QWORD **)(a2 - 8);
  if (v3[8] != 16)
  {
    __break(1u);
    goto LABEL_36;
  }
LABEL_37:
  ((void (*)(uint64_t, _QWORD **, uint64_t))v3[2])(a3, &v16, a2);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v3[7])(a3, 0, 1, a2);
}

uint64_t _UIHostingView.ancestorHasInvertFilterApplied.getter()
{
  void *v0;
  uint64_t result;
  unsigned int v2;
  id v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;

  result = (uint64_t)objc_msgSend(v0, sel_respondsToSelector_, sel__ancestorHasInvertFilterApplied);
  if ((_DWORD)result)
  {
    v2 = objc_msgSend(v0, sel__ancestorHasInvertFilterApplied);
    v3 = objc_msgSend(v0, sel_window);
    if (v3)
    {
      v4 = v3;
      if (objc_msgSend(v3, sel_respondsToSelector_, sel__accessibilityInvertColorsIsDarkWindow))
        v5 = objc_msgSend(v4, sel__accessibilityInvertColorsIsDarkWindow);
      else
        v5 = 0;
      if (objc_msgSend(v4, sel_respondsToSelector_, sel__accessibilityInvertColorsSupportsDarkWindowInvert))
      {
        v6 = objc_msgSend(v4, sel__accessibilityInvertColorsSupportsDarkWindowInvert);

        if ((v2 & 1) == 0)
          return v5 & v6;
      }
      else
      {
        v6 = 0;

        if ((v2 & 1) == 0)
          return v5 & v6;
      }
    }
    else if (!v2)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

void closure #4 in _UIHostingView.updateEnvironment()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v9 = a3 + 16;
  swift_beginAccess();
  v10 = MEMORY[0x18D760234](v9);
  if (v10)
  {
    v12 = (void *)v10;
    v13 = type metadata accessor for _UIHostingView(0, a4, a5, v11);
    v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v13);
    ViewRendererHost.accessibilityFocus(id:in:)(a1, a2, v13, v14);

  }
}

void _UIHostingView.updateGraphPhaseIfNeeded(newParentPhase:)(unsigned int *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  int v8;
  uint64_t v9;
  void *v10;
  void *v11;
  char v12;
  char v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  void (*v22)(_BYTE *, _QWORD);
  unsigned int *v23;
  id v24;
  void *v25;
  void *v26;
  char *v27;
  _BYTE v28[32];
  id v29;
  void *v30;
  void *v31;
  char v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;

  v2 = v1;
  v3 = *v1;
  v4 = (uint64_t *)MEMORY[0x1E0DEEDD8];
  v5 = *MEMORY[0x1E0DEEDD8];
  v6 = *a1;
  v7 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xA0);
  if ((v7[4] & 1) != 0)
  {
    LODWORD(v29) = *a1;
    GraphHost.setPhase(_:)();
LABEL_7:
    v3 = *v2;
    v5 = *v4;
    goto LABEL_8;
  }
  v8 = *(_DWORD *)v7;
  if ((*(_DWORD *)v7 ^ v6) >= 2)
  {
    GraphHost.incrementPhase()();
    v3 = *v1;
    v5 = *v4;
  }
  if (((v6 ^ ((v8 & 1) == 0)) & 1) == 0)
  {
    v9 = *(uint64_t *)((char *)v1 + *(_QWORD *)((v5 & v3) + 0x68));
    swift_beginAccess();
    v10 = *(void **)(v9 + 24);
    v11 = *(void **)(v9 + 32);
    v12 = *(_BYTE *)(v9 + 40);
    v13 = *(_BYTE *)(v9 + 41);
    v14 = *(_DWORD *)(v9 + 68);
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(_DWORD *)(v9 + 80);
    v17 = *(_QWORD *)(v9 + 88);
    v18 = *(_QWORD *)(v9 + 112);
    v29 = *(id *)(v9 + 16);
    v30 = v10;
    v31 = v11;
    v32 = v12;
    v33 = v13;
    v34 = *(_OWORD *)(v9 + 44);
    v35 = *(_QWORD *)(v9 + 60);
    v36 = v14;
    v37 = v15;
    v38 = v16;
    v39 = v17;
    v40 = *(_OWORD *)(v9 + 96);
    v41 = v18;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v19 = v29;
    v20 = v10;
    v21 = v11;
    v22 = (void (*)(_BYTE *, _QWORD))GraphHost.Data.phase.modify();
    *v23 = *v23 & 0xFFFFFFFE | v6 & 1;
    v22(v28, 0);
    v24 = v29;
    v25 = v30;
    v26 = v31;
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    goto LABEL_7;
  }
LABEL_8:
  v27 = (char *)v2 + *(_QWORD *)((v5 & v3) + 0xA0);
  *(_DWORD *)v27 = v6;
  v27[4] = 0;
}

Swift::Void __swiftcall _UIHostingView.updateTransformWithoutGeometryObservation()()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100);
  v2 = *((_BYTE *)v0 + v1);
  _UIHostingView.updateTransform()();
  if ((v2 & 1) == 0 && *((_BYTE *)v0 + v1) == 1)
  {
    objc_msgSend(v0, sel__unregisterForGeometryChanges);
    *((_BYTE *)v0 + v1) = 0;
  }
}

Swift::Void __swiftcall _UIHostingView.beginTransaction()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *MEMORY[0x1E0DEEDD8] & *v0;
  v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v3 = (_QWORD *)swift_allocObject();
  v3[2] = *(_QWORD *)(v1 + 80);
  v3[3] = *(_QWORD *)(v1 + 88);
  v3[4] = v2;
  swift_retain();
  onMainThread(do:)();
  swift_release();
  swift_release();
}

void closure #1 in _UIHostingView.beginTransaction()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  _QWORD *v8;

  if (one-time initialization token for defaultUseSetNeedsLayout != -1)
    swift_once();
  if (static UIKitUpdateCycle.defaultUseSetNeedsLayout == 1)
  {
    swift_beginAccess();
    v6 = MEMORY[0x18D760234](a1 + 16);
    if (v6)
    {
      v7 = (void *)v6;
      _UIHostingView.requestImmediateUpdate()();

    }
  }
  else
  {
    v8 = (_QWORD *)swift_allocObject();
    v8[2] = a2;
    v8[3] = a3;
    v8[4] = a1;
    swift_retain();
    if (_UIUpdateCycleEnabled())
      specialized static UIKitUpdateCycle.addPreCommitObserver(_:)((uint64_t)partial apply for closure #1 in closure #1 in _UIHostingView.beginTransaction(), (uint64_t)v8);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSRunLoop);
    MEMORY[0x18D75DF60](partial apply for closure #1 in closure #1 in _UIHostingView.beginTransaction(), v8);
    swift_release();
  }
}

void closure #1 in closure #1 in closure #1 in _UIHostingView.beginTransaction()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x18D760234](v5);
  if (v6)
  {
    v8 = (void *)v6;
    v9 = type metadata accessor for _UIHostingView(0, a2, a3, v7);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v9);
    ViewGraphDelegate.updateGraph<A>(body:)();

  }
}

void closure #1 in closure #1 in closure #1 in closure #1 in _UIHostingView.beginTransaction()()
{
  GraphHost.flushTransactions()();
}

void _UIHostingView.startUpdateTimer(delay:)(double a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  char v15;
  char v16;

  v3 = *v1;
  v4 = *MEMORY[0x1E0DEEDD8];
  if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
  {
    if (a1 <= 0.1)
      a1 = 0.1;
    _UIHostingView.cancelAsyncRendering()();
    _UIHostingView.currentTimestamp.getter(&v14);
    v5 = v14;
    v6 = &v14;
    _UIHostingView.nextTimerTime.getter((uint64_t)&v14);
    if (v15 == 1)
    {
      v6 = (double *)&v16;
      static Time.infinity.getter();
    }
    if (a1 + v5 < *v6)
    {
      v7 = v4 & v3;
      objc_msgSend((id)specialized _UIHostingView.updateTimer.getter(), sel_invalidate);
      _UIHostingView.currentTimestamp.getter(&v14);
      v14 = a1 + v14;
      v15 = 0;
      _UIHostingView.nextTimerTime.setter((uint64_t)&v14);
      v8 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v9 = (_QWORD *)swift_allocObject();
      v9[2] = *(_QWORD *)(v7 + 80);
      v9[3] = *(_QWORD *)(v7 + 88);
      v9[4] = v8;
      swift_retain();
      v10 = withDelay(_:do:)();
      swift_release();
      swift_release();
      _UIHostingView.updateTimer.setter(v10);
    }
  }
  else
  {
    v11 = specialized _UIHostingView.displayLink.getter();
    if (v11)
      *(_BYTE *)(v11 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextThread) = 0;
    v13 = MEMORY[0x1E0C80A78](v11, v12);
    MEMORY[0x18D75B938](partial apply for closure #1 in _UIHostingView.startUpdateTimer(delay:), v13);
  }
}

uint64_t _UIHostingView.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, _QWORD *a7@<X8>)
{
  _QWORD *v7;
  void *v8;
  uint64_t v10;
  __int16 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  double v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  char isEscapingClosureAtFileLocation;
  uint64_t v27;
  char v28;
  uint64_t aBlock;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  void *v32;
  uint64_t (*v33)();
  uint64_t v34;

  v8 = v7;
  v10 = *a1;
  v11 = *((_WORD *)a1 + 4);
  v12 = *((_BYTE *)a1 + 10);
  v13 = *a3;
  v14 = *a4;
  v15 = *a5;
  v16 = *a6;
  if ((a2 & 1) != 0)
  {
    aBlock = *a1;
    LOWORD(v30) = v11;
    BYTE2(v30) = v12;
    result = DisplayList.ViewRenderer.renderAsync(to:time:nextTime:targetTimestamp:version:maxVersion:)();
    if ((v28 & 1) != 0)
    {
      v19 = MEMORY[0x1E0C80A78](result, v18);
      result = MEMORY[0x18D75B938](partial apply for closure #2 in _UIHostingView.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:), v19);
      v20 = v14;
    }
    else
    {
      v20 = v27;
    }
    *a7 = v20;
  }
  else
  {
    v21 = (void *)objc_opt_self();
    if (objc_msgSend(v21, sel_areAnimationsEnabled)
      && (_UIHostingView.shouldDisableUIKitAnimations.getter() & 1) != 0)
    {
      v27 = v14;
      v22 = swift_allocObject();
      *(_QWORD *)(v22 + 16) = &v27;
      *(_QWORD *)(v22 + 24) = v8;
      *(_QWORD *)(v22 + 32) = v10;
      *(_WORD *)(v22 + 40) = v11;
      *(_BYTE *)(v22 + 42) = v12;
      *(_QWORD *)(v22 + 48) = v13;
      *(_QWORD *)(v22 + 56) = v14;
      *(_QWORD *)(v22 + 64) = v15;
      *(_QWORD *)(v22 + 72) = v16;
      v23 = swift_allocObject();
      *(_QWORD *)(v23 + 16) = partial apply for closure #2 in _UIHostingView.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:);
      *(_QWORD *)(v23 + 24) = v22;
      v33 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
      v34 = v23;
      aBlock = MEMORY[0x1E0C809B0];
      v30 = 1107296256;
      v31 = thunk for @escaping @callee_guaranteed () -> ();
      v32 = &block_descriptor_24;
      v24 = _Block_copy(&aBlock);
      v25 = v8;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      objc_msgSend(v21, sel_performWithoutAnimation_, v24);
      _Block_release(v24);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      result = swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        *a7 = v27;
        *((_BYTE *)v25 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v25) + 0xB8)) = 0;
        return swift_release();
      }
    }
    else
    {
      result = render #1 <A>() in _UIHostingView.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)(v7);
      *((_BYTE *)v7 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v7) + 0xB8)) = 0;
    }
  }
  return result;
}

uint64_t render #1 <A>() in _UIHostingView.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(a1, sel_window);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, sel_screen);

    objc_msgSend(v3, sel_scale);
  }
  DisplayList.ViewRenderer.Environment.init(contentsScale:)();
  return DisplayList.ViewRenderer.render(rootView:from:time:nextTime:version:maxVersion:environment:)();
}

void _UIHostingView.isTabSidebarMorphing.getter()
{
  _UIHostingView.viewController.getter();
}

id sub_187138B68(id a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  id v12;
  id v13;

  v12 = a1;
  if (a1)
  {
    v13 = objc_msgSend(a1, sel_tabBarController);

    if (v13)
    {
      v12 = objc_msgSend(v13, sel___swiftui_isInSidebarTransition);

    }
    else
    {
      return 0;
    }
  }
  return v12;
}

Swift::Void __swiftcall _UIHostingView.beginAllowUIKitAnimations()()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0);
  ++*(_DWORD *)((char *)v0 + v1);
}

Swift::Void __swiftcall _UIHostingView.endAllowUIKitAnimations()()
{
  _QWORD *v0;
  uint64_t v1;
  int v2;
  BOOL v3;
  int v4;

  v1 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0);
  v2 = *(_DWORD *)((char *)v0 + v1);
  v3 = __OFSUB__(v2, 1);
  v4 = v2 - 1;
  if (v3)
    __break(1u);
  else
    *(_DWORD *)((char *)v0 + v1) = v4 & ~(v4 >> 31);
}

Swift::Void __swiftcall _UIHostingView.didRender()()
{
  _UIHostingView.viewController.getter();
}

void sub_187138C34(void *a1)
{
  if (a1)
  {
    UIHostingController.didRender()();

  }
}

uint64_t _UIHostingView.focusedResponder.getter()
{
  BOOL v0;
  uint64_t Strong;
  _QWORD v3[8];

  specialized _UIHostingView.focusBridge.getter();
  swift_retain();
  FocusBridge.focusedItem.getter((uint64_t)v3);
  if (v3[5])
    v0 = 0;
  else
    v0 = v3[6] == 1;
  if (v0)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem);
    swift_release();
    return 0;
  }
  else
  {
    Strong = swift_weakLoadStrong();
    outlined destroy of AccessibilityTableContext?((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem);
    swift_release();
  }
  return Strong;
}

id _UIHostingView.defaultNextResponder.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_nextResponder);
}

Swift::Void __swiftcall _UIHostingView.invalidateHoverState()()
{
  void *v0;
  id v1;

  v0 = (void *)specialized _UIHostingView.pointerBridge.getter();
  if (v0)
  {
    v1 = v0;
    PointerBridge.invalidateHoverState()();

  }
}

uint64_t protocol witness for ViewRendererHost.currentTimestamp.setter in conformance _UIHostingView<A>(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  return _UIHostingView.currentTimestamp.setter(&v2);
}

uint64_t (*protocol witness for ViewRendererHost.renderingPhase.modify in conformance _UIHostingView<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _UIHostingView.renderingPhase.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

Swift::Void __swiftcall _UIHostingView.updateAccessibilityEnvironment()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSString *v4;
  Class v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *v0;
  v2 = *MEMORY[0x1E0DEEDD8];
  if ((_UIHostingView.accessibilityEnabled.getter() & 1) == 0)
  {
    if (_AXSAccessibilityEnabled()
      || (v4 = (NSString *)MEMORY[0x18D75CC88](0x4774694B49555841, 0xEB0000000065756CLL),
          v5 = NSClassFromString(v4),
          v4,
          v5))
    {
      _UIHostingView.accessibilityEnabled.setter(1);
    }
  }
  v6 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v2 & v1) + 0x50), *(_QWORD *)((v2 & v1) + 0x58), v3);
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v6);
  ViewRendererHost.accessibilityNodes.getter(v6, v7);
  swift_bridgeObjectRelease();
}

uint64_t protocol witness for EventGraphHost.eventBindingManager.getter in conformance _UIHostingView<A>()
{
  specialized _UIHostingView.eventBindingManager.getter();
  return swift_retain();
}

uint64_t protocol witness for EventGraphHost.responderNode.getter in conformance _UIHostingView<A1>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, a1);
  return ViewRendererHost.responderNode.getter();
}

uint64_t protocol witness for EventGraphHost.nextGestureUpdateTime.getter in conformance _UIHostingView<A1>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, a1);
  return ViewRendererHost.nextGestureUpdateTime.getter();
}

uint64_t protocol witness for EventGraphHost.setInheritedPhase(_:) in conformance _UIHostingView<A1>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>);
  return ViewRendererHost.setInheritedPhase(_:)();
}

uint64_t protocol witness for EventGraphHost.sendEvents(_:rootNode:at:) in conformance _UIHostingView<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, a4);
  return ViewRendererHost.sendEvents(_:rootNode:at:)();
}

void protocol witness for EventGraphHost.resetEvents() in conformance _UIHostingView<A1>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, a1);
  ViewRendererHost.resetEvents()();
}

uint64_t protocol witness for EventGraphHost.gestureCategory() in conformance _UIHostingView<A1>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, a1);
  return ViewRendererHost.gestureCategory()();
}

uint64_t ViewRendererHost.uiViewController.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  _QWORD v9[2];

  v4 = type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for UIViewControllerProvider);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8) + 16))(v9, v4, v4, a1);
  if (!v9[0])
    return 0;
  v5 = v9[1];
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

void protocol witness for UIKitAnimationCooperating.beginAllowUIKitAnimations() in conformance _UIHostingView<A>()
{
  _UIHostingView.beginAllowUIKitAnimations()();
}

void protocol witness for UIKitAnimationCooperating.endAllowUIKitAnimations() in conformance _UIHostingView<A>()
{
  _UIHostingView.endAllowUIKitAnimations()();
}

uint64_t _UIHostingView._preferredFocusEnvironments.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  v1 = *MEMORY[0x1E0DEEDD8] & *v0;
  v2 = specialized _UIHostingView.focusBridge.getter();
  v4 = *(_QWORD *)(v2 + 160);
  if (v4)
  {
    v5 = v2;
    swift_getObjectType();
    v6 = swift_conformsToProtocol2();
    if (v6)
      v7 = v6;
    else
      v7 = 0;
    if (v6)
      v8 = v4;
    else
      v8 = 0;
    if (v8)
    {
      ObjectType = swift_getObjectType();
      v10 = *(void (**)(uint64_t, uint64_t))(v7 + 56);
      swift_unknownObjectRetain_n();
      swift_retain();
      v10(ObjectType, v7);
      swift_unknownObjectRelease();
    }
    else
    {
      swift_retain();
      swift_unknownObjectRetain();
    }
    *(_QWORD *)(v5 + 160) = 0;
    swift_unknownObjectRelease();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v12 + 32) = v4;
    v17 = v12;
    specialized Array._endMutation()();
    v11 = v17;
    swift_release();
  }
  else
  {
    v11 = MEMORY[0x1E0DEE9D8];
  }
  v13 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v3);
  if (UIKitContainerFocusItem.defaultFocusItemsContainer()(v13, (uint64_t)&protocol witness table for _UIHostingView<A>))
  {
    v14 = swift_unknownObjectRetain();
    MEMORY[0x18D75CF58](v14);
    if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_unknownObjectRelease();
  }
  else
  {
    specialized _UIHostingView.focusBridge.getter();
    swift_retain();
    v15 = FocusBridge.preferredFocusEnvironments.getter();
    swift_release();
    specialized Array.append<A>(contentsOf:)(v15);
  }
  return v11;
}

void closure #1 in _UIHostingView.rootTransform()(int a1, id a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;

  v3 = objc_msgSend(a2, sel_window);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, sel_layer);

  }
  else
  {
    v5 = 0;
  }
  v6 = objc_msgSend(a2, sel_layer);
  CALayerMapGeometry();

}

uint64_t @objc closure #1 in closure #1 in _UIHostingView.rootTransform()()
{
  return @objc closure #1 in closure #1 in _UIHostingView.rootTransform()();
}

{
  return ViewTransform.UnsafeBuffer.appendProjectionTransform(_:inverse:)();
}

uint64_t @objc closure #2 in closure #1 in _UIHostingView.rootTransform()()
{
  return @objc closure #1 in closure #1 in _UIHostingView.rootTransform()();
}

uint64_t _UIHostingView.horizontalAlignment(_:)(uint64_t a1)
{
  return _UIHostingView.horizontalAlignment(_:)(a1, MEMORY[0x1E0CE3570]);
}

uint64_t _UIHostingView.verticalAlignment(_:)(uint64_t a1)
{
  return _UIHostingView.horizontalAlignment(_:)(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, double, double))MEMORY[0x1E0CE3568]);
}

uint64_t _UIHostingView.horizontalAlignment(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, double, double))
{
  _QWORD *v2;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *MEMORY[0x1E0DEEDD8] & *v2;
  objc_msgSend(v2, sel_bounds);
  v6 = v5;
  v8 = v7;
  v10 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), v9);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v10);
  return a2(a1, v10, v11, v6, v8);
}

void closure #2 in _UIHostingView.startUpdateTimer(delay:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char v5;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x18D760234](v1);
  if (v2)
  {
    v3 = (void *)v2;
    _UIHostingView.updateTimer.setter(0);
    v4 = 0;
    v5 = 1;
    _UIHostingView.nextTimerTime.setter((uint64_t)&v4);
    _UIHostingView.requestImmediateUpdate()();

  }
}

Swift::Void __swiftcall _UIHostingView.dismiss()()
{
  _UIHostingView.isPresentedInNavigationController.getter();
}

void sub_1871395C0(char a1)
{
  if ((a1 & 1) != 0)
    _UIHostingView.viewController.getter();
  _UIHostingView.isPresentedInModalViewController.getter();
}

void sub_18713961C(char a1)
{
  if ((a1 & 1) != 0)
    _UIHostingView.viewController.getter();
  if ((_UIHostingView.canDismissScene()() & 1) != 0)
    _UIHostingView.dismissScene()();
}

void sub_187139624(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v11;

  if (a1)
  {
    v11 = objc_msgSend(a1, sel_presentingViewController);

    if (v11)
    {
      objc_msgSend(v11, sel_dismissViewControllerAnimated_completion_, 1, 0);
      JUMPOUT(0x187139668);
    }
  }
}

id _UIHostingView.canDismissScene()()
{
  void *v0;
  id result;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0)
    return 0;
  result = objc_msgSend(v0, sel_window);
  if (!result)
    return result;
  v2 = result;
  v3 = objc_msgSend(result, sel_windowScene);

  if (!v3)
    return 0;

  v4 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v5 = objc_msgSend(v4, sel_openSessions);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISceneSession);
  lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UISceneSession and conformance NSObject, &lazy cache variable for type metadata for UISceneSession);
  v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v6 & 0xC000000000000001) != 0)
    v7 = __CocoaSet.count.getter();
  else
    v7 = *(_QWORD *)(v6 + 16);
  swift_bridgeObjectRelease();
  return (id)(v7 > 1);
}

void _UIHostingView.dismissScene()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;

  v1 = objc_msgSend(v0, sel_window);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, sel_windowScene);

    if (v3)
    {
      v4 = objc_msgSend(v3, sel_session);

      if (v4)
      {
        v5 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
        objc_msgSend(v5, sel_requestSceneSessionDestruction_options_errorHandler_, v4, 0, 0);

      }
    }
  }
}

void closure #1 in DisplayLink.invalidate()(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  v2 = OBJC_IVAR____TtC7SwiftUI11DisplayLink_link;
  v3 = *(void **)(a1 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_link);
  if (v3)
  {
    v4 = v3;
    if (objc_msgSend(v4, sel_isPaused))
      objc_msgSend(v4, sel_invalidate);

  }
  v5 = *(void **)(a1 + v2);
  *(_QWORD *)(a1 + v2) = 0;

}

id closure #1 in DisplayLink.setFrameInterval(_:reasons:)(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;

  if (result == (id)MEMORY[0x1E0DEE0F8])
  {
    v5 = 0;
    v6 = 0;
    v7 = a3 + 56;
    v8 = 1 << *(_BYTE *)(a3 + 32);
    v9 = -1;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    v10 = v9 & *(_QWORD *)(a3 + 56);
    v11 = (unint64_t)(v8 + 63) >> 6;
    if (!v10)
      goto LABEL_8;
    while (1)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      v14 = v5 + 1;
      if (__OFADD__(v5, 1))
        break;
      while (1)
      {
        *(_DWORD *)(a2 + 4 * v5) = *(_DWORD *)(*(_QWORD *)(a3 + 48) + 4 * v13);
        v5 = v14;
        if (v10)
          break;
LABEL_8:
        v15 = v6 + 1;
        if (__OFADD__(v6, 1))
          goto LABEL_32;
        if (v15 >= v11)
        {
LABEL_28:
          result = *(id *)(a4 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_link);
          if (result)
            return objc_msgSend(result, sel_setHighFrameRateReasons_count_, a2, a5);
          return result;
        }
        v16 = *(_QWORD *)(v7 + 8 * v15);
        ++v6;
        if (!v16)
        {
          v6 = v15 + 1;
          if (v15 + 1 >= v11)
            goto LABEL_28;
          v16 = *(_QWORD *)(v7 + 8 * v6);
          if (!v16)
          {
            v6 = v15 + 2;
            if (v15 + 2 >= v11)
              goto LABEL_28;
            v16 = *(_QWORD *)(v7 + 8 * v6);
            if (!v16)
            {
              v6 = v15 + 3;
              if (v15 + 3 >= v11)
                goto LABEL_28;
              v16 = *(_QWORD *)(v7 + 8 * v6);
              if (!v16)
              {
                v6 = v15 + 4;
                if (v15 + 4 >= v11)
                  goto LABEL_28;
                v16 = *(_QWORD *)(v7 + 8 * v6);
                if (!v16)
                {
                  v17 = v15 + 5;
                  if (v17 >= v11)
                    goto LABEL_28;
                  v16 = *(_QWORD *)(v7 + 8 * v17);
                  if (!v16)
                  {
                    while (1)
                    {
                      v6 = v17 + 1;
                      if (__OFADD__(v17, 1))
                        goto LABEL_34;
                      if (v6 >= v11)
                        goto LABEL_28;
                      v16 = *(_QWORD *)(v7 + 8 * v6);
                      ++v17;
                      if (v16)
                        goto LABEL_25;
                    }
                  }
                  v6 = v17;
                }
              }
            }
          }
        }
LABEL_25:
        v10 = (v16 - 1) & v16;
        v13 = __clz(__rbit64(v16)) + (v6 << 6);
        v14 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_31;
      }
    }
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

void _makeUIHostingView<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t specialized VersionSeedTracker.didChange(_:action:)(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3)
{
  return specialized VersionSeedTracker.didChange(_:action:)(a1, a2, a3, (uint64_t)&type metadata for InteractiveDismissAttemptKey, (uint64_t)&protocol witness table for InteractiveDismissAttemptKey, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
}

{
  return specialized VersionSeedTracker.didChange(_:action:)(a1, a2, a3, (uint64_t)&type metadata for AVKitCaptureButtonPreference, (uint64_t)&protocol witness table for AVKitCaptureButtonPreference, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
}

uint64_t specialized VersionSeedTracker.didChange(_:action:)(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t))
{
  _DWORD *v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  int v21;

  v18[0] = a1;
  PreferenceList.subscript.getter();
  if (*v7 != -1 && v21 != -1 && *v7 == v21)
  {
    v15 = v19;
    v16 = v20;
  }
  else
  {
    *v7 = v21;
    v13 = v19;
    v14 = v20;
    v18[0] = v19;
    v18[1] = v20;
    a6(v19, v20);
    a2(v18);
    a7(v13, v14);
    v15 = v13;
    v16 = v14;
  }
  return ((uint64_t (*)(uint64_t, uint64_t))a7)(v15, v16);
}

uint64_t specialized VersionSeedTracker.didChange(_:action:)(uint64_t a1, void (*a2)(_QWORD *))
{
  _DWORD *v2;
  _QWORD v7[2];
  int v8;

  v7[0] = a1;
  PreferenceList.subscript.getter();
  if (*v2 != -1 && v8 != -1 && *v2 == v8)
    return swift_bridgeObjectRelease();
  *v2 = v8;
  v7[0] = v7[1];
  swift_bridgeObjectRetain();
  a2(v7);
  return swift_bridgeObjectRelease_n();
}

{
  _DWORD *v2;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;

  v9[0] = a1;
  PreferenceList.subscript.getter();
  if (*v2 != -1 && v20 != -1 && *v2 == v20)
  {
    swift_bridgeObjectRelease();
    outlined consume of Binding<NavigationSplitViewColumn>?(v14, v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    *v2 = v20;
    v6 = v14;
    v7 = v15;
    v9[0] = v12;
    v9[1] = v13;
    v9[2] = v14;
    v9[3] = v15;
    v9[4] = v16;
    v9[5] = v17;
    v10 = v18;
    v11 = v19;
    swift_bridgeObjectRetain();
    outlined copy of Binding<NavigationSplitViewColumn>?(v14, v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(v9);
    swift_bridgeObjectRelease();
    outlined consume of Binding<NavigationSplitViewColumn>?(v6, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Binding<NavigationSplitViewColumn>?(v6, v7);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t RootViewDelegate.hostingView<A>(_:didChangePlatformItemList:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t ObjectType;

  v5 = *a1;
  v6 = *MEMORY[0x1E0DEEDD8];
  result = MEMORY[0x18D760234](v2 + 24);
  if (result)
  {
    v8 = *(_QWORD *)(v2 + 32);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v8 + 40))(a1, a2, *(_QWORD *)((v6 & v5) + 0x50), *(_QWORD *)((v6 & v5) + 0x58), ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t RootViewDelegate.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of weak FallbackResponderProvider?(v0 + 24);
  return swift_deallocClassInstance();
}

SwiftUI::PresentationMode __swiftcall UIKitPresentationModeLocation.get()()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;

  v1 = v0;
  v2 = MEMORY[0x18D760234]();
  if (v2)
    _UIHostingView.isPresentedInModalViewController.getter();
  *v1 = 0;
  return (SwiftUI::PresentationMode)v2;
}

_BYTE *protocol witness for Location.set(_:transaction:) in conformance UIKitPresentationModeLocation<A>(_BYTE *result)
{
  return specialized UIKitPresentationModeLocation.set(_:transaction:)(result);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UIKitPresentationModeLocation<A>(uint64_t a1, uint64_t a2)
{
  return static UIKitPresentationModeLocation.== infix(_:_:)(a1, a2);
}

SwiftUI::PresentationMode __swiftcall UIKitScenePresentationModeLocation.get()()
{
  char *v0;
  char *v1;
  void *v2;
  void *v3;
  id v4;
  char v5;

  v1 = v0;
  v2 = (void *)MEMORY[0x18D760234]();
  if (v2 && (v3 = v2, v4 = objc_msgSend(v2, sel_window), v3, v4))
  {

    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  *v1 = v5;
  return (SwiftUI::PresentationMode)v2;
}

BOOL static UIKitPresentationModeLocation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = (void *)MEMORY[0x18D760234]();
  v4 = (void *)MEMORY[0x18D760234](a2);
  v5 = v4;
  if (v3)
  {

    if (v5)
    {

      return v3 == v5;
    }
    return 0;
  }
  if (v4)
  {

    return 0;
  }
  return 1;
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance UIKitScenePresentationModeLocation<A>(uint64_t a1, uint64_t a2))()
{
  uint64_t v2;

  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 1;
  return protocol witness for Location.wasRead.modify in conformance UIKitScenePresentationModeLocation<A>;
}

void protocol witness for Location.set(_:transaction:) in conformance UIKitScenePresentationModeLocation<A>(_BYTE *a1)
{
  specialized UIKitScenePresentationModeLocation.set(_:transaction:)(a1);
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, PropertyList>();
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v5 = a1[4];
  v4 = a1[5];
  result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v8 = a1 + 7;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v3[6] + v9) = v5;
    *(_QWORD *)(v3[7] + v9) = v4;
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      break;
    v3[2] = v12;
    if (!--v1)
      goto LABEL_8;
    v13 = v8 + 2;
    v5 = *(v8 - 1);
    v14 = *v8;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    v8 = v13;
    v4 = v14;
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t result;
  char v8;
  void **v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  void **v14;
  void *v15;
  id v16;
  char v17;
  id v18;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<SensoryFeedback.FeedbackType, UIFeedbackGenerator>();
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = a1[4];
  v5 = a1[5];
  v6 = (void *)a1[6];
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    v18 = v6;
    return (unint64_t)v3;
  }
  v9 = (void **)(a1 + 9);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v3[6] + 16 * result);
    *v10 = v4;
    v10[1] = v5;
    *(_QWORD *)(v3[7] + 8 * result) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = (uint64_t)*(v9 - 2);
    v5 = (uint64_t)*(v9 - 1);
    v15 = *v9;
    v16 = v6;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
    v9 = v14;
    v6 = v15;
    if ((v17 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  Swift::UInt v4;
  Swift::UInt v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  Swift::UInt *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, EventBinding>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v9 = a1 + 9;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (Swift::UInt *)(v3[6] + 16 * result);
    *v10 = v4;
    v10[1] = v5;
    *(_QWORD *)(v3[7] + 8 * result) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *(v9 - 2);
    v5 = *(v9 - 1);
    v15 = *v9;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
    v9 = v14;
    v6 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  Swift::UInt v4;
  Swift::UInt v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  Swift::UInt *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<EventID, [KeyPress.Handler]>();
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v9 = a1 + 9;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (Swift::UInt *)(v3[6] + 16 * result);
    *v10 = v4;
    v10[1] = v5;
    *(_QWORD *)(v3[7] + 8 * result) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *(v9 - 2);
    v5 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
    v9 = v14;
    v6 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<Int, [ObjectIdentifier]>();
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v5 = a1[4];
  v4 = a1[5];
  result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v8 = a1 + 7;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v3[6] + v9) = v5;
    *(_QWORD *)(v3[7] + v9) = v4;
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      break;
    v3[2] = v12;
    if (!--v1)
      goto LABEL_8;
    v13 = v8 + 2;
    v5 = *(v8 - 1);
    v14 = *v8;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    v8 = v13;
    v4 = v14;
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, Transaction>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v5 = a1[4];
  v4 = a1[5];
  result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v8 = a1 + 7;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v3[6] + v9) = v5;
    *(_QWORD *)(v3[7] + v9) = v4;
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      break;
    v3[2] = v12;
    if (!--v1)
      goto LABEL_8;
    v13 = v8 + 2;
    v5 = *(v8 - 1);
    v14 = *v8;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    v8 = v13;
    v4 = v14;
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  Swift::UInt v4;
  void *v5;
  unint64_t result;
  char v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  void **v13;
  void *v14;
  id v15;
  char v16;
  id v17;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<UISplitViewControllerColumn, NavigationStackCoordinator<SplitColumnNavigationStrategy>>();
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = a1[4];
  v5 = (void *)a1[5];
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    v17 = v5;
    return (unint64_t)v3;
  }
  v8 = (void **)(a1 + 7);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v3[6] + v9) = v4;
    *(_QWORD *)(v3[7] + v9) = v5;
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      break;
    v3[2] = v12;
    if (!--v1)
      goto LABEL_8;
    v13 = v8 + 2;
    v4 = (Swift::UInt)*(v8 - 1);
    v14 = *v8;
    v15 = v5;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    v8 = v13;
    v5 = v14;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<Character, String>();
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = a1[4];
  v5 = a1[5];
  v7 = a1[6];
  v6 = a1[7];
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
  if ((v9 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v10 = a1 + 11;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v4;
    v11[1] = v5;
    v12 = (_QWORD *)(v3[7] + 16 * result);
    *v12 = v7;
    v12[1] = v6;
    v13 = v3[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      break;
    v3[2] = v15;
    if (!--v1)
      goto LABEL_8;
    v16 = v10 + 4;
    v4 = *(v10 - 3);
    v17 = *(v10 - 2);
    v7 = *(v10 - 1);
    v18 = *v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v17);
    v10 = v16;
    v6 = v18;
    v5 = v17;
    if ((v19 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

_QWORD *specialized Dictionary.init(dictionaryLiteral:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  uint64_t v16[42];

  v1 = a1[2];
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.StackContent.Key, NavigationColumnState>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  memcpy(v16, a1 + 4, 0x143uLL);
  v4 = v16[0];
  v5 = v16[1];
  v6 = v16[2];
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(v16[0], v16[1], v16[2]);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v9 = (char *)(a1 + 45);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
    v10 = v3[6] + 24 * v7;
    *(_QWORD *)v10 = v4;
    *(_BYTE *)(v10 + 8) = v5;
    *(_QWORD *)(v10 + 16) = v6;
    result = memcpy((void *)(v3[7] + 304 * v7), &v16[3], 0x12BuLL);
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      break;
    v3[2] = v14;
    outlined retain of (NavigationState.StackContent.Key, NavigationColumnState)(v16);
    if (!--v1)
      return v3;
    memcpy(v16, v9, 0x143uLL);
    v4 = v16[0];
    v5 = v16[1];
    v6 = v16[2];
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(v16[0], v16[1], v16[2]);
    v9 += 328;
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, void (*a2)(_QWORD), uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    a2(0);
    v6 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v8 = *(i - 1);
      v9 = *i;
      result = a3(v8);
      if ((v11 & 1) != 0)
        break;
      *(_QWORD *)((char *)v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v12 = 8 * result;
      *(_QWORD *)(v6[6] + v12) = v8;
      *(_QWORD *)(v6[7] + v12) = v9;
      v13 = v6[2];
      v14 = __OFADD__(v13, 1);
      v15 = v13 + 1;
      if (v14)
        goto LABEL_10;
      v6[2] = v15;
      if (!--v3)
        return (unint64_t)v6;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

_BYTE *specialized UIKitPresentationModeLocation.set(_:transaction:)(_BYTE *result)
{
  uint64_t v1;

  if ((*result & 1) == 0)
  {
    result = (_BYTE *)MEMORY[0x18D760234](v1);
    if (result)
      _UIHostingView.dismiss()();
  }
  return result;
}

void specialized UIKitScenePresentationModeLocation.set(_:transaction:)(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  if ((*a1 & 1) == 0)
  {
    v2 = MEMORY[0x18D760234](v1);
    if (v2)
    {
      v3 = (id)v2;
      if ((_UIHostingView.canDismissScene()() & 1) != 0)
        _UIHostingView.dismissScene()();

    }
  }
}

uint64_t specialized RootViewDelegate.updateAppFocus<A>(view:)()
{
  uint64_t v0;
  int v1;
  int v2;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BOOL4 v13;
  char v14;
  int v15;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  _UIHostingView.focusedValues.getter((uint64_t)&v27);
  v0 = v27;
  v1 = HIDWORD(v28);
  v24 = HIDWORD(v28);
  v25 = v28;
  if (static AppGraph.shared)
  {
    v2 = *(_DWORD *)(AGGraphGetValue() + 12);
    v5 = v2 == -1 || v1 == -1 || v2 != v1;
  }
  else
  {
    swift_retain();
    v5 = 1;
    outlined consume of Transaction?(1);
    outlined consume of Transaction?(v0);
  }
  v6 = specialized _UIHostingView.focusBridge.getter();
  v7 = *(unsigned int *)(v6 + 48);
  v8 = *(_QWORD *)(v6 + 56);
  v9 = *(_QWORD *)(v6 + 64);
  if (static AppGraph.shared)
  {
    v10 = *(_DWORD *)AGGraphGetValue();
    v13 = v10 == -1 || (_DWORD)v7 == -1 || v10 != (_DWORD)v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    outlined consume of FocusStore?(0, 0);
    outlined consume of FocusStore?(v7, v8);
    v13 = 1;
  }
  GraphHost.environment.getter();
  if (v28)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>, (uint64_t)&type metadata for ScenePhaseKey, (uint64_t)&protocol witness table for ScenePhaseKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>, (uint64_t)&type metadata for ScenePhaseKey, (uint64_t)&protocol witness table for ScenePhaseKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if ((v5 || v13) && v26 == 2)
  {
    if (static AppGraph.shared)
    {
      v27 = v0;
      LOBYTE(v28) = v25;
      HIDWORD(v28) = v24;
      swift_retain();
      v14 = AGGraphSetValue();
      LODWORD(v27) = v7;
      v28 = v8;
      v29 = v9;
      v15 = AGGraphSetValue();
      if ((v14 & 1) != 0 || v15)
      {
        swift_retain();
        AppGraph.graphDidChange()();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release_n();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v17 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
    v18 = objc_msgSend(v17, sel_delegate);

    if (v18)
    {
      type metadata accessor for AppDelegate();
      v19 = swift_dynamicCastClass();
      if (v19 && (v20 = *(void **)(v19 + OBJC_IVAR____TtC7SwiftUI11AppDelegate_mainMenuController)) != 0)
      {
        v21 = (void *)objc_opt_self();
        v22 = v20;
        v23 = objc_msgSend(v21, sel_mainSystem);
        objc_msgSend(v23, sel_setNeedsRebuild);

        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<InterfaceProtectionKey>, (uint64_t)&type metadata for InterfaceProtectionKey, (uint64_t)&protocol witness table for InterfaceProtectionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UndoManagerKey>, (uint64_t)&type metadata for UndoManagerKey, (uint64_t)&protocol witness table for UndoManagerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityRequestFocusKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityRequestFocusKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityRequestFocusKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityRequestFocusKey>, (uint64_t)&type metadata for AccessibilityRequestFocusKey, (uint64_t)&protocol witness table for AccessibilityRequestFocusKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityRequestFocusKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey>, (uint64_t)&type metadata for EnvironmentValues.DismissWindowActionKey, (uint64_t)&protocol witness table for EnvironmentValues.DismissWindowActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationBarHostKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationBarHostKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationBarHostKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationBarHostKey>, (uint64_t)&type metadata for NavigationBarHostKey, (uint64_t)&protocol witness table for NavigationBarHostKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationBarHostKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<MultimodalListLayoutKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<MultimodalListLayoutKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<MultimodalListLayoutKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MultimodalListLayoutKey>, (uint64_t)&type metadata for MultimodalListLayoutKey, (uint64_t)&protocol witness table for MultimodalListLayoutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MultimodalListLayoutKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<BadgesEnabledKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgesEnabledKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgesEnabledKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BadgesEnabledKey>, (uint64_t)&type metadata for BadgesEnabledKey, (uint64_t)&protocol witness table for BadgesEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgesEnabledKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_18713E0A8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #6 in _UIHostingView.updateEnvironment()()
{
  uint64_t *v0;

  closure #6 in _UIHostingView.updateEnvironment()(v0[4], v0[2], v0[3], _UIHostingView.updateEnvironment());
}

void partial apply for closure #4 in _UIHostingView.updateEnvironment()(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  closure #4 in _UIHostingView.updateEnvironment()(a1, a2, v2[4], v2[2], v2[3]);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey>, (uint64_t)&type metadata for IgnoreInvertColorsFilterActiveKey, (uint64_t)&protocol witness table for IgnoreInvertColorsFilterActiveKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_18713E164()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in _UIHostingView.beginTransaction()()
{
  uint64_t *v0;

  closure #1 in _UIHostingView.beginTransaction()(v0[4], v0[2], v0[3]);
}

uint64_t sub_18713E194()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_18713E1C4()
{
  return swift_deallocObject();
}

double partial apply for closure #2 in _UIHostingView.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)()
{
  uint64_t v0;
  double *v1;
  double result;
  double v3;

  v1 = *(double **)(v0 + 16);
  render #1 <A>() in _UIHostingView.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)(*(void **)(v0 + 24));
  result = v3;
  *v1 = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusViewGraph and conformance FocusViewGraph;
  if (!lazy protocol witness table cache variable for type FocusViewGraph and conformance FocusViewGraph)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusViewGraph, &type metadata for FocusViewGraph);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusViewGraph and conformance FocusViewGraph);
  }
  return result;
}

void base witness table accessor for ViewGraphDelegate in _UIHostingView<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t instantiation function for generic protocol witness table for _UIHostingView<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for GraphDelegate in _UIHostingView<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t storeEnumTagSinglePayload for DisplayLink.ThreadName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18713E304 + 4 * byte_187C0C045[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18713E338 + 4 * byte_187C0C040[v4]))();
}

uint64_t sub_18713E338(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18713E340(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18713E348);
  return result;
}

uint64_t sub_18713E354(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18713E35CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18713E360(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18713E368(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DisplayLink.ThreadName()
{
  return &type metadata for DisplayLink.ThreadName;
}

unint64_t lazy protocol witness table accessor for type DisplayLink.ThreadName and conformance DisplayLink.ThreadName()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayLink.ThreadName and conformance DisplayLink.ThreadName;
  if (!lazy protocol witness table cache variable for type DisplayLink.ThreadName and conformance DisplayLink.ThreadName)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayLink.ThreadName, &type metadata for DisplayLink.ThreadName);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayLink.ThreadName and conformance DisplayLink.ThreadName);
  }
  return result;
}

void base witness table accessor for Equatable in UIKitPresentationModeLocation<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Equatable in UIKitScenePresentationModeLocation<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for _DictionaryStorage<String, UIAccessibilityCustomRotor>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<String, UIAccessibilityCustomRotor>)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIAccessibilityCustomRotor);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, UIAccessibilityCustomRotor>);
  }
}

unint64_t lazy protocol witness table accessor for type Axis and conformance Axis()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Axis and conformance Axis;
  if (!lazy protocol witness table cache variable for type Axis and conformance Axis)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6920], MEMORY[0x1E0CE6918]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Axis and conformance Axis);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey;
  if (!lazy protocol witness table cache variable for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContainerBackgroundKeys.AnyCustomKey, &type metadata for ContainerBackgroundKeys.AnyCustomKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey;
  if (!lazy protocol witness table cache variable for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContainerBackgroundKeys.AnyCustomKey, &type metadata for ContainerBackgroundKeys.AnyCustomKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier;
  if (!lazy protocol witness table cache variable for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationLinkSelectionIdentifier, &type metadata for NavigationLinkSelectionIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier;
  if (!lazy protocol witness table cache variable for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationLinkSelectionIdentifier, &type metadata for NavigationLinkSelectionIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<String, Decodable & Encodable.Type>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<String, Decodable & Encodable.Type>)
  {
    type metadata accessor for Decodable & Encodable.Type(255, (unint64_t *)&lazy cache variable for type metadata for Decodable & Encodable.Type, 255, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEC58]);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, Decodable & Encodable.Type>);
  }
}

unint64_t type metadata accessor for Decodable & Encodable()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Decodable & Encodable;
  if (!lazy cache variable for type metadata for Decodable & Encodable)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Decodable & Encodable);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<Int, [ObjectIdentifier]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<Int, [ObjectIdentifier]>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for [ObjectIdentifier], MEMORY[0x1E0DEA520], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, [ObjectIdentifier]>);
  }
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, NavigationDestinationResolverBase>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, NavigationDestinationResolverBase>)
  {
    type metadata accessor for NavigationDestinationResolverBase();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, NavigationDestinationResolverBase>);
  }
}

void type metadata accessor for [Binding<Bool>]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [Binding<Bool>])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Binding<Bool>]);
  }
}

void type metadata accessor for _DictionaryStorage<EventID, [KeyPress.Handler]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<EventID, [KeyPress.Handler]>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type EventID and conformance EventID();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<EventID, [KeyPress.Handler]>);
  }
}

void type metadata accessor for _DictionaryStorage<SensoryFeedback.FeedbackType, UIFeedbackGenerator>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<SensoryFeedback.FeedbackType, UIFeedbackGenerator>)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIFeedbackGenerator);
    lazy protocol witness table accessor for type SensoryFeedback.FeedbackType and conformance SensoryFeedback.FeedbackType();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<SensoryFeedback.FeedbackType, UIFeedbackGenerator>);
  }
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, PropertyList>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, PropertyList>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, PropertyList>);
  }
}

unint64_t lazy protocol witness table accessor for type NavigationSplitColumn and conformance NavigationSplitColumn()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitColumn and conformance NavigationSplitColumn;
  if (!lazy protocol witness table cache variable for type NavigationSplitColumn and conformance NavigationSplitColumn)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitColumn, &type metadata for NavigationSplitColumn);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitColumn and conformance NavigationSplitColumn);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitColumn and conformance NavigationSplitColumn;
  if (!lazy protocol witness table cache variable for type NavigationSplitColumn and conformance NavigationSplitColumn)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitColumn, &type metadata for NavigationSplitColumn);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitColumn and conformance NavigationSplitColumn);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement;
  if (!lazy protocol witness table cache variable for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptableTabBarPlacement, &type metadata for AdaptableTabBarPlacement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement;
  if (!lazy protocol witness table cache variable for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptableTabBarPlacement, &type metadata for AdaptableTabBarPlacement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<Int, DragReorderableLayoutCoordinator.ChildFrame>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<Int, DragReorderableLayoutCoordinator.ChildFrame>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, DragReorderableLayoutCoordinator.ChildFrame>);
  }
}

void type metadata accessor for (NSAttributedStringKey, Any)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void type metadata accessor for _DictionaryStorage<UUID, PlatformItemList>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<UUID, PlatformItemList>)
  {
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UUID, PlatformItemList>);
  }
}

void type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4();
    v6 = type metadata accessor for _DictionaryStorage();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void type metadata accessor for (Int, (CountingIndex<Int>, CountingIndex<Int>))(uint64_t a1)
{
  type metadata accessor for (Int, (CountingIndex<Int>, CountingIndex<Int>))(a1, (unint64_t *)&lazy cache variable for type metadata for (Int, (CountingIndex<Int>, CountingIndex<Int>)), (void (*)(uint64_t))type metadata accessor for (CountingIndex<Int>, CountingIndex<Int>));
}

void type metadata accessor for (CountingIndex<Int>, CountingIndex<Int>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (CountingIndex<Int>, CountingIndex<Int>))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for CountingIndex<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE1E50]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CountingIndex<Int>, CountingIndex<Int>));
  }
}

void type metadata accessor for _DictionaryStorage<Int, (Int, CountingIndex<Int>)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<Int, (Int, CountingIndex<Int>)>)
  {
    type metadata accessor for (Int, CountingIndex<Int>)();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, (Int, CountingIndex<Int>)>);
  }
}

void type metadata accessor for (Int, CountingIndex<Int>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Int, CountingIndex<Int>))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for CountingIndex<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE1E50]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Int, CountingIndex<Int>));
  }
}

void type metadata accessor for _DictionaryStorage<String, Toolbar.VendedItem>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<String, Toolbar.VendedItem>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, Toolbar.VendedItem>);
  }
}

void type metadata accessor for _DictionaryStorage<String, ToolbarStorage.Entry>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<String, ToolbarStorage.Entry>)
  {
    type metadata accessor for ToolbarStorage.Entry(255);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, ToolbarStorage.Entry>);
  }
}

void type metadata accessor for _DictionaryStorage<Int, Image.Resolved>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<Int, Image.Resolved>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, Image.Resolved>);
  }
}

uint64_t outlined retain of (Int, Image.Resolved)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 128);
  v5 = *(void **)(a1 + 176);
  outlined copy of GraphicsImage.Contents?(*(id *)(a1 + 8), *(_BYTE *)(a1 + 16));
  outlined copy of AccessibilityImageLabel?(v2, v3, v4);
  v6 = v5;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type AccessibilityAttachmentToken and conformance AccessibilityAttachmentToken()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityAttachmentToken and conformance AccessibilityAttachmentToken;
  if (!lazy protocol witness table cache variable for type AccessibilityAttachmentToken and conformance AccessibilityAttachmentToken)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE62D0], MEMORY[0x1E0CE62C8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentToken and conformance AccessibilityAttachmentToken);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.Index.ID and conformance DisplayList.Index.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Index.ID and conformance DisplayList.Index.ID;
  if (!lazy protocol witness table cache variable for type DisplayList.Index.ID and conformance DisplayList.Index.ID)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1048], MEMORY[0x1E0CE1040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Index.ID and conformance DisplayList.Index.ID);
  }
  return result;
}

uint64_t outlined init with copy of (String, Any)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;

  type metadata accessor for (Badge, Spacer)(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for _DictionaryStorage<NavigationContentAbstractPosition, NavigationStackHostingController<AnyView>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<NavigationContentAbstractPosition, NavigationStackHostingController<AnyView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
    lazy protocol witness table accessor for type NavigationContentAbstractPosition and conformance NavigationContentAbstractPosition();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationContentAbstractPosition, NavigationStackHostingController<AnyView>>);
  }
}

unint64_t lazy protocol witness table accessor for type NavigationContentAbstractPosition and conformance NavigationContentAbstractPosition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationContentAbstractPosition and conformance NavigationContentAbstractPosition;
  if (!lazy protocol witness table cache variable for type NavigationContentAbstractPosition and conformance NavigationContentAbstractPosition)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationContentAbstractPosition, &type metadata for NavigationContentAbstractPosition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationContentAbstractPosition and conformance NavigationContentAbstractPosition);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationContentAbstractPosition and conformance NavigationContentAbstractPosition;
  if (!lazy protocol witness table cache variable for type NavigationContentAbstractPosition and conformance NavigationContentAbstractPosition)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationContentAbstractPosition, &type metadata for NavigationContentAbstractPosition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationContentAbstractPosition and conformance NavigationContentAbstractPosition);
  }
  return result;
}

uint64_t *outlined retain of (NavigationState.StackContent.Key, NavigationColumnState)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1[14];
  v3 = a1[15];
  v4 = a1[19];
  v11 = a1[18];
  v12 = a1[17];
  v5 = a1[20];
  v6 = a1[21];
  v9 = a1[23];
  v10 = a1[22];
  v8 = a1[24];
  outlined copy of NavigationListState?(a1[8], a1[9]);
  outlined copy of Binding<AnyNavigationPath>?(v2, v3);
  outlined copy of NavigationColumnState.ColumnContent(v12, v11, v4, v5, v6, v10, v9, v8);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void type metadata accessor for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
    lazy protocol witness table accessor for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>>);
  }
}

unint64_t lazy protocol witness table accessor for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration;
  if (!lazy protocol witness table cache variable for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedDocumentGroupConfiguration, &type metadata for IdentifiedDocumentGroupConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration;
  if (!lazy protocol witness table cache variable for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IdentifiedDocumentGroupConfiguration, &type metadata for IdentifiedDocumentGroupConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration);
  }
  return result;
}

void type metadata accessor for (IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>));
  }
}

uint64_t outlined init with take of WeakBox<PlatformDocument>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type KeyCommandID and conformance KeyCommandID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KeyCommandID and conformance KeyCommandID;
  if (!lazy protocol witness table cache variable for type KeyCommandID and conformance KeyCommandID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for KeyCommandID, &type metadata for KeyCommandID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyCommandID and conformance KeyCommandID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KeyCommandID and conformance KeyCommandID;
  if (!lazy protocol witness table cache variable for type KeyCommandID and conformance KeyCommandID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for KeyCommandID, &type metadata for KeyCommandID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyCommandID and conformance KeyCommandID);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<CommandGroupPlacementBox, CommandAccumulator>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<CommandGroupPlacementBox, CommandAccumulator>)
  {
    type metadata accessor for CommandGroupPlacementBox(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CommandGroupPlacementBox and conformance CommandGroupPlacementBox, type metadata accessor for CommandGroupPlacementBox, (uint64_t)&protocol conformance descriptor for CommandGroupPlacementBox);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CommandGroupPlacementBox, CommandAccumulator>);
  }
}

void type metadata accessor for _DictionaryStorage<String, Character>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<String, Character>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, Character>);
  }
}

void type metadata accessor for _DictionaryStorage<UIDragItem, CGAffineTransform>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<UIDragItem, CGAffineTransform>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
    type metadata accessor for CGAffineTransform(255);
    lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UIDragItem and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UIDragItem, CGAffineTransform>);
  }
}

void type metadata accessor for _DictionaryStorage<UIDragItem, CGPoint>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<UIDragItem, CGPoint>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
    type metadata accessor for CGPoint(255);
    lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UIDragItem and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UIDragItem, CGPoint>);
  }
}

uint64_t type metadata accessor for Decodable & Encodable.Type(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t result;
  uint64_t v8;

  result = *a2;
  if (!*a2)
  {
    v8 = a4(a3);
    result = a5(v8);
    atomic_store(result, a2);
  }
  return result;
}

id partial apply for closure #1 in DisplayLink.setFrameInterval(_:reasons:)(void *a1, uint64_t a2)
{
  uint64_t *v2;

  return closure #1 in DisplayLink.setFrameInterval(_:reasons:)(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t specialized _UIHostingView.viewControllerWillDisappear(transitionCoordinator:animated:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v7;
  void *v8;
  _QWORD v9[8];
  _WORD v10[32];

  v0 = specialized _UIHostingView.focusBridge.getter();
  swift_retain();
  if ((FocusBridge.canAcceptFocus.getter() & 1) == 0)
    return swift_release();
  v1 = FocusBridge.host.getter();
  if (!v1)
    return swift_release();
  v2 = (void *)v1;
  v3 = *(_QWORD *)(v0 + 16);
  if ((v3 & 0xFFFFFFFFFFFFFFFDLL) != v3)
  {
    *(_QWORD *)(v0 + 16) = v3 & 0xFFFFFFFFFFFFFFFDLL;
    *(_DWORD *)(v0 + 48) = 0;
    v4 = FocusBridge.host.getter();
    if (v4)
    {
      v5 = (void *)v4;
      swift_getObjectType();
      v10[0] = 128;
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    }
  }
  FocusBridge.focusedItem.getter((uint64_t)v9);
  if (v9[5] || v9[6] != 1)
  {
    outlined init with take of FocusItem((uint64_t)v9, (uint64_t)v10);
    v7 = (id)FocusItem.platformResponder.getter();
    if (!v7)
      v7 = v2;
    v8 = v7;
    objc_msgSend(v7, sel_resignFirstResponder);

    outlined destroy of FocusItem((uint64_t)v10);
  }
  else
  {

    outlined destroy of AccessibilityTableContext?((uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem);
  }
  return swift_release();
}

uint64_t specialized _UIHostingView.viewControllerDidAppear(transitionCoordinator:animated:)()
{
  specialized _UIHostingView.focusBridge.getter();
  swift_retain();
  FocusBridge.hostingControllerDidAppear()();
  return swift_release();
}

uint64_t specialized static DisplayLink.asyncThread(arg:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  uint64_t result;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop.SchedulerOptions?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB22E8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v23 - v2;
  v4 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride();
  v24 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date();
  MEMORY[0x1E0C80A78](v8, v9);
  v10 = type metadata accessor for NSRunLoop.SchedulerTimeType();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Update.lock()();
  v15 = objc_msgSend((id)objc_opt_self(), sel_currentRunLoop);
  v16 = (void *)static DisplayLink.asyncRunloop;
  static DisplayLink.asyncRunloop = (uint64_t)v15;

  static Update.broadcast()();
  if (static DisplayLink.asyncPending == 1)
  {
    while (1)
    {
      static DisplayLink.asyncPending = 0;
      result = static Update.unlock()();
      if (!static DisplayLink.asyncRunloop)
        break;
      v18 = (id)static DisplayLink.asyncRunloop;
      Date.init(timeIntervalSinceNow:)();
      v19 = NSRunLoop.SchedulerTimeType.init(_:)();
      MEMORY[0x18D75DF30](v19, 0.1);
      v20 = type metadata accessor for NSRunLoop.SchedulerOptions();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v3, 1, 1, v20);
      NSRunLoop.schedule(after:tolerance:options:_:)();

      outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v3);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v4);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      result = static DisplayLink.asyncRunloop;
      if (!static DisplayLink.asyncRunloop)
        goto LABEL_7;
      objc_msgSend((id)static DisplayLink.asyncRunloop, sel_run);
      static Update.lock()();
      if ((static DisplayLink.asyncPending & 1) == 0)
        goto LABEL_5;
    }
    __break(1u);
LABEL_7:
    __break(1u);
  }
  else
  {
LABEL_5:
    v21 = (void *)static DisplayLink.asyncRunloop;
    static DisplayLink.asyncRunloop = 0;

    v22 = (void *)static DisplayLink.asyncThread;
    static DisplayLink.asyncThread = 0;

    static Update.broadcast()();
    return static Update.unlock()();
  }
  return result;
}

uint64_t outlined destroy of NSRunLoop.SchedulerOptions?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop.SchedulerOptions?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB22E8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for _DictionaryStorage<HashableWeakBox<UIViewController>, ScenePhase>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<HashableWeakBox<UIViewController>, ScenePhase>)
  {
    type metadata accessor for HashableWeakBox<UIViewController>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type HashableWeakBox<UIViewController> and conformance HashableWeakBox<A>, (uint64_t (*)(uint64_t))type metadata accessor for HashableWeakBox<UIViewController>, MEMORY[0x1E0CE2DA8]);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<HashableWeakBox<UIViewController>, ScenePhase>);
  }
}

void type metadata accessor for _DictionaryStorage<String, MainMenuItemCoordinator>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<String, MainMenuItemCoordinator>)
  {
    type metadata accessor for MainMenuItemCoordinator();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, MainMenuItemCoordinator>);
  }
}

void type metadata accessor for (UUID, UIMenuIdentifier)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for UUID();
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void type metadata accessor for _DictionaryStorage<UUID, UIMenuIdentifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t (*v5)(uint64_t);
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    type metadata accessor for UUID();
    v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    a3(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v5, MEMORY[0x1E0CB09C8]);
    v6 = type metadata accessor for _DictionaryStorage();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t outlined init with copy of (UUID, UIMenuIdentifier)(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for (UUID, UIMenuIdentifier)(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, a5);
    v9 = type metadata accessor for _DictionaryStorage();
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t outlined destroy of FocusItem(uint64_t a1)
{
  destroy for FocusItem(a1);
  return a1;
}

void type metadata accessor for _DictionaryStorage<Character, String>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<Character, String>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Character, String>);
  }
}

uint64_t partial apply for closure #1 in _UIHostingView.cancelAsyncRendering()@<X0>(BOOL *a1@<X8>)
{
  uint64_t result;

  result = specialized _UIHostingView.displayLink.getter();
  if (result)
    *(_BYTE *)(result + OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextThread) = 0;
  *a1 = result == 0;
  return result;
}

void type metadata accessor for _DictionaryStorage<AnyHashable, DisplayList.Version>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, DisplayList.Version>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, DisplayList.Version>);
  }
}

unint64_t lazy protocol witness table accessor for type VerticalEdge and conformance VerticalEdge()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VerticalEdge and conformance VerticalEdge;
  if (!lazy protocol witness table cache variable for type VerticalEdge and conformance VerticalEdge)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1978], MEMORY[0x1E0CE1970]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalEdge and conformance VerticalEdge);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<CodingUserInfoKey, Any>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>)
  {
    type metadata accessor for CodingUserInfoKey();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
  }
}

void type metadata accessor for _DictionaryStorage<_UIImageNamedColorStyle, UIColor>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<_UIImageNamedColorStyle, UIColor>)
  {
    type metadata accessor for _UIImageNamedColorStyle(255);
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle, (uint64_t (*)(uint64_t))type metadata accessor for _UIImageNamedColorStyle, (uint64_t)&protocol conformance descriptor for _UIImageNamedColorStyle);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_UIImageNamedColorStyle, UIColor>);
  }
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, [AnyConnectionOptionActionBox]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, [AnyConnectionOptionActionBox]>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for [AnyConnectionOptionActionBox], (uint64_t (*)(uint64_t))type metadata accessor for AnyConnectionOptionActionBox, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, [AnyConnectionOptionActionBox]>);
  }
}

void type metadata accessor for _DictionaryStorage<String, SceneStorageValues.AnyEntry>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<String, SceneStorageValues.AnyEntry>)
  {
    type metadata accessor for SceneStorageValues.AnyEntry();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, SceneStorageValues.AnyEntry>);
  }
}

void type metadata accessor for _DictionaryStorage<String, [Any]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<String, [Any]>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [Any], MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, [Any]>);
  }
}

unint64_t lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID;
  if (!lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID, &type metadata for TabCustomizationID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID;
  if (!lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID, &type metadata for TabCustomizationID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID;
  if (!lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID, &type metadata for TabCustomizationID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID;
  if (!lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID, &type metadata for TabCustomizationID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID and conformance TabCustomizationID);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<EventID, EventType>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<EventID, EventType>)
  {
    type metadata accessor for ContainerBackgroundHost(255, (unint64_t *)&lazy cache variable for type metadata for EventType);
    lazy protocol witness table accessor for type EventID and conformance EventID();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<EventID, EventType>);
  }
}

void type metadata accessor for (EventID, EventType)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (EventID, EventType))
  {
    type metadata accessor for ContainerBackgroundHost(255, (unint64_t *)&lazy cache variable for type metadata for EventType);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (EventID, EventType));
  }
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationID and conformance TableColumnCustomizationID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID, &type metadata for TableColumnCustomizationID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID, &type metadata for TableColumnCustomizationID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID, &type metadata for TableColumnCustomizationID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomizationID, &type metadata for TableColumnCustomizationID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID and conformance TableColumnCustomizationID);
  }
  return result;
}

uint64_t outlined retain of TableColumnCustomizationID.Base(uint64_t a1)
{
  outlined copy of TableColumnCustomizationID.Base(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

void type metadata accessor for _DictionaryStorage<AnyHashable, PassthroughSubject<Any, Never>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, PassthroughSubject<Any, Never>>)
  {
    type metadata accessor for PassthroughSubject<Any, Never>();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, PassthroughSubject<Any, Never>>);
  }
}

uint64_t outlined init with copy of (TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>)))(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for (Int, (CountingIndex<Int>, CountingIndex<Int>))(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined init with take of AccessibilityFocus.Target(uint64_t a1, uint64_t a2)
{
  initializeWithTake for BridgedPopUpButtonProvider(a2, a1);
  return a2;
}

uint64_t partial apply for closure #1 in _UIHostingView.startUpdateTimer(delay:)()
{
  uint64_t v0;

  return _UIHostingView.startUpdateTimer(delay:)(*(double *)(v0 + 24));
}

void partial apply for closure #2 in _UIHostingView.startUpdateTimer(delay:)()
{
  uint64_t v0;

  closure #2 in _UIHostingView.startUpdateTimer(delay:)(*(_QWORD *)(v0 + 32));
}

uint64_t partial apply for closure #1 in closure #1 in _UIHostingView.beginTransaction()()
{
  return static Update.ensure<A>(_:)();
}

void partial apply for closure #1 in closure #1 in closure #1 in _UIHostingView.beginTransaction()()
{
  uint64_t *v0;

  closure #1 in closure #1 in closure #1 in _UIHostingView.beginTransaction()(v0[4], v0[2], v0[3]);
}

uint64_t outlined init with copy of (NSAttributedStringKey, Any)(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for (NSAttributedStringKey, Any)(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for (NSFileWrapper, UTType)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (NSFileWrapper, UTType))
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSFileWrapper);
    type metadata accessor for UTType();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (NSFileWrapper, UTType));
  }
}

void type metadata accessor for _DictionaryStorage<NSFileWrapper, UTType>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<NSFileWrapper, UTType>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSFileWrapper);
    type metadata accessor for UTType();
    lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type NSFileWrapper and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for NSFileWrapper);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NSFileWrapper, UTType>);
  }
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, Int>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, Int>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, Int>);
  }
}

_QWORD *outlined retain of (ViewIdentity, AlertStorage)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1[15];
  v7 = a1[14];
  v8 = a1[13];
  v3 = a1[16];
  v4 = a1[17];
  v5 = a1[18];
  v12 = a1[21];
  v13 = (void *)a1[20];
  v10 = a1[23];
  v11 = a1[22];
  v9 = (void *)a1[24];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of DialogSuppressionConfiguration?(v8, v7, v2, v3, v4, v5);
  outlined copy of BoundInputsView?(v13, v12, v11, v10, v9);
  return a1;
}

uint64_t outlined copy of DialogSuppressionConfiguration?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    outlined copy of Text?(result, a2, a3, a4);
    swift_retain();
    return swift_retain();
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<UInt32, ScrollViewCommitInfo>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<UInt32, ScrollViewCommitInfo>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UInt32, ScrollViewCommitInfo>);
  }
}

uint64_t outlined copy of ScrollViewCommitInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;

  if (a8 < 0)
    return outlined copy of AppIntentExecutor?(a9);
  return result;
}

void type metadata accessor for _DictionaryStorage<AccessibilityRelationshipScope.Relationship, [AccessibilityNode]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<AccessibilityRelationshipScope.Relationship, [AccessibilityNode]>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityNode], (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type AccessibilityRelationshipScope.Relationship and conformance AccessibilityRelationshipScope.Relationship();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityRelationshipScope.Relationship, [AccessibilityNode]>);
  }
}

unint64_t lazy protocol witness table accessor for type NavigationStackViewPosition and conformance NavigationStackViewPosition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationStackViewPosition and conformance NavigationStackViewPosition;
  if (!lazy protocol witness table cache variable for type NavigationStackViewPosition and conformance NavigationStackViewPosition)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackViewPosition, &type metadata for NavigationStackViewPosition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationStackViewPosition and conformance NavigationStackViewPosition);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationStackViewPosition and conformance NavigationStackViewPosition;
  if (!lazy protocol witness table cache variable for type NavigationStackViewPosition and conformance NavigationStackViewPosition)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackViewPosition, &type metadata for NavigationStackViewPosition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationStackViewPosition and conformance NavigationStackViewPosition);
  }
  return result;
}

uint64_t outlined retain of (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)(uint64_t a1)
{
  outlined copy of NavigationRequest.Action(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_BYTE *)(a1 + 112));
  swift_retain();
  return a1;
}

void type metadata accessor for _DictionaryStorage<String, String>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<String, String>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, String>);
  }
}

void type metadata accessor for _DictionaryStorage<String, Int>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<String, Int>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, Int>);
  }
}

void type metadata accessor for _DictionaryStorage<Int, Int>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<Int, Int>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, Int>);
  }
}

void type metadata accessor for _DictionaryStorage<String, TabEntry>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<String, TabEntry>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, TabEntry>);
  }
}

void type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3();
    v4 = type metadata accessor for _DictionaryStorage();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for _DictionaryStorage<UINavigationController, Set<NavigationStackHostingController<AnyView>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<UINavigationController, Set<NavigationStackHostingController<AnyView>>>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
    type metadata accessor for Set<NavigationStackHostingController<AnyView>>();
    lazy protocol witness table accessor for type UIScene and conformance NSObject(&lazy protocol witness table cache variable for type UINavigationController and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UINavigationController, Set<NavigationStackHostingController<AnyView>>>);
  }
}

void type metadata accessor for Set<NavigationStackHostingController<AnyView>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Set<NavigationStackHostingController<AnyView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
    lazy protocol witness table accessor for type NavigationStackHostingController<AnyView> and conformance NSObject();
    v0 = type metadata accessor for Set();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Set<NavigationStackHostingController<AnyView>>);
  }
}

unint64_t lazy protocol witness table accessor for type NavigationStackHostingController<AnyView> and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NavigationStackHostingController<AnyView> and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NavigationStackHostingController<AnyView> and conformance NSObject)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationStackHostingController<AnyView> and conformance NSObject);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<String, TabItemGroup.HostCache>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<String, TabItemGroup.HostCache>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, TabItemGroup.HostCache>);
  }
}

void type metadata accessor for _DictionaryStorage<UISplitViewControllerColumn, NavigationStackCoordinator<SplitColumnNavigationStrategy>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<UISplitViewControllerColumn, NavigationStackCoordinator<SplitColumnNavigationStrategy>>)
  {
    type metadata accessor for UISplitViewControllerColumn(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for NavigationStackCoordinator<SplitColumnNavigationStrategy>, (uint64_t (*)(void))lazy protocol witness table accessor for type SplitColumnNavigationStrategy and conformance SplitColumnNavigationStrategy, (uint64_t)&type metadata for SplitColumnNavigationStrategy, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationStackCoordinator);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UISplitViewControllerColumn and conformance UISplitViewControllerColumn, (uint64_t (*)(uint64_t))type metadata accessor for UISplitViewControllerColumn, (uint64_t)&protocol conformance descriptor for UISplitViewControllerColumn);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UISplitViewControllerColumn, NavigationStackCoordinator<SplitColumnNavigationStrategy>>);
  }
}

unint64_t lazy protocol witness table accessor for type SplitColumnNavigationStrategy and conformance SplitColumnNavigationStrategy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SplitColumnNavigationStrategy and conformance SplitColumnNavigationStrategy;
  if (!lazy protocol witness table cache variable for type SplitColumnNavigationStrategy and conformance SplitColumnNavigationStrategy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SplitColumnNavigationStrategy, &type metadata for SplitColumnNavigationStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SplitColumnNavigationStrategy and conformance SplitColumnNavigationStrategy);
  }
  return result;
}

uint64_t DividerStyleConfiguration.orientation.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result & 1;
  return result;
}

uint64_t (*DividerStyleConfiguration.orientation.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t dispatch thunk of DividerStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_187141138(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for DividerStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for DividerStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t storeEnumTagSinglePayload for DividerStyleConfiguration(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1871411E4 + 4 * byte_187C0C5B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187141218 + 4 * byte_187C0C5B0[v4]))();
}

uint64_t sub_187141218(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187141220(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187141228);
  return result;
}

uint64_t sub_187141234(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18714123CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187141240(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187141248(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ResolvedDivider()
{
  return &type metadata for ResolvedDivider;
}

uint64_t getEnumTagSinglePayload for DividerStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187141314 + 4 * byte_187C0C5BA[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for DividerStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in DividerStyleModifier<A>()
{
  return &protocol witness table for DividerStyleModifier<A>;
}

uint64_t instantiation function for generic protocol witness table for DividerStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DividerStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DividerStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type DividerStyleModifier<DefaultDividerStyle> and conformance DividerStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DividerStyleModifier<DefaultDividerStyle> and conformance DividerStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type DividerStyleModifier<DefaultDividerStyle> and conformance DividerStyleModifier<A>)
  {
    type metadata accessor for DividerStyleModifier<DefaultDividerStyle>(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DividerStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DividerStyleModifier<DefaultDividerStyle> and conformance DividerStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for DividerStyleModifier<DefaultDividerStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for DividerStyleModifier<DefaultDividerStyle>)
  {
    v2 = lazy protocol witness table accessor for type DefaultDividerStyle and conformance DefaultDividerStyle();
    v4 = type metadata accessor for DividerStyleModifier(a1, (uint64_t)&type metadata for DefaultDividerStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for DividerStyleModifier<DefaultDividerStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type DefaultDividerStyle and conformance DefaultDividerStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultDividerStyle and conformance DefaultDividerStyle;
  if (!lazy protocol witness table cache variable for type DefaultDividerStyle and conformance DefaultDividerStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultDividerStyle, &type metadata for DefaultDividerStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultDividerStyle and conformance DefaultDividerStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedDivider()
{
  lazy protocol witness table accessor for type ResolvedDivider and conformance ResolvedDivider();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18714168C()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

Swift::Void __swiftcall UIKitSearchBar.enqueueFirstResponderUpdate(_:)(Swift::Bool a1)
{
  _BYTE *v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  _QWORD aBlock[6];

  v1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_pendingIsFirstResponder] = a1;
  v7 = objc_msgSend(v1, sel__viewControllerForAncestor);
  if (v7 && (v2 = objc_msgSend(v7, sel_transitionCoordinator)) != 0)
  {
    v3 = v2;
    v4 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = partial apply for closure #1 in UIKitSearchBar.enqueueFirstResponderUpdate(_:);
    aBlock[5] = v4;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    aBlock[3] = &block_descriptor_23_0;
    v5 = _Block_copy(aBlock);
    swift_release();
    objc_msgSend(v3, sel_animateAlongsideTransition_completion_, 0, v5);

    _Block_release(v5);
    swift_unknownObjectRelease();
  }
  else
  {
    v6 = objc_msgSend(v1, sel_window);
    if (v6)
    {

      swift_allocObject();
      swift_unknownObjectWeakInit();
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release_n();
    }

  }
}

void UIKitSearchBar.updateCustomScopeBarView(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Class v29;
  id v30;
  void *v31;
  id v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  void *v60;
  uint64_t v61;
  char *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[2];
  int v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v65 = *(void **)a1;
  v71 = *(_QWORD *)(a1 + 8);
  v76 = *(_QWORD *)(a1 + 16);
  v69 = *(_QWORD *)(a1 + 24);
  v70 = *(void **)(a1 + 32);
  v67 = *(_QWORD *)(a1 + 48);
  v68 = *(_QWORD *)(a1 + 40);
  v66 = *(_QWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarView);
  v6 = (void *)*v5;
  v72 = *v5;
  v73 = v5[1];
  v7 = v5[2];
  v74 = v7;
  v75 = v5[3];
  v8 = (void *)v5[4];
  v10 = v5[8];
  v9 = v5[9];
  v11 = v5[10];
  *v5 = (uint64_t)v65;
  v5[1] = v71;
  v5[2] = v76;
  v5[3] = v69;
  v5[4] = (uint64_t)v70;
  v5[5] = v68;
  v5[6] = v67;
  v5[7] = v66;
  v5[8] = v2;
  v5[9] = v3;
  v5[10] = v4;
  outlined copy of BoundInputsView?(v6, v73, v7, v75, v8);
  v61 = v4;
  v64 = v2;
  outlined copy of BoundInputsView?(v65, v71, v76, v69, v70);
  v54 = v11;
  v52 = v10;
  v53 = v9;
  v63 = v8;
  outlined consume of BoundInputsView?(v72, v73, v74, v75, v8);
  if (v72)
  {
    v15 = OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost;
    if (!v65)
    {
      v50 = *(void **)&v62[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost];
      if (v50)
      {
        objc_msgSend(v50, sel_removeFromSuperview, v10, v53, v11);
        v51 = *(void **)&v62[v15];
        *(_QWORD *)&v62[v15] = 0;

      }
      goto LABEL_14;
    }
    v16 = v65;
    v17 = v62;
  }
  else
  {
    if (!v65)
      return;
    v16 = v65;
    v15 = OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost;
    v17 = v62;
    if (!*(_QWORD *)&v62[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost])
    {
      v18 = *v5;
      if (*v5)
      {
        v20 = v5[1];
        v19 = v5[2];
        v21 = v5[3];
        v22 = (void *)v5[4];
        v24 = v5[5];
        v23 = v5[6];
        v26 = v5[7];
        v25 = v5[8];
        v27 = v5[9];
        v28 = v5[10];
        v77[0] = *v5;
        v77[1] = v20;
        v56 = v20;
        v57 = v19;
        v78 = v19;
        v55 = v21;
        v79 = v21;
        v80 = v22;
        v81 = v24;
        v82 = v23;
        v83 = v26;
        v84 = v25;
        v85 = v27;
        v86 = v28;
        type metadata accessor for _UIHostingView<BoundInputsView>(0, v12, v13, v14);
        v30 = objc_allocWithZone(v29);
        v31 = v22;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        v32 = v22;
        v33 = specialized _UIHostingView.init(rootView:)((uint64_t)v77);
        v34 = (_QWORD *)((char *)v33 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v33) + 0x108));
        v35 = swift_beginAccess();
        v39 = *v34;
        *v34 = 0;
        if (v39)
        {
          lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>(v35, v36, v37, v38);
          ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
        }
        objc_msgSend(v33, sel_setHidden_, 1, v52, v53, v54);
        objc_msgSend(v62, sel_addSubview_, v33);
        outlined consume of BoundInputsView?(v18, v56, v57, v55, v31);
        v40 = *(void **)&v62[v15];
        *(_QWORD *)&v62[v15] = v33;

        v15 = OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost;
      }
    }
  }
  v41 = *(_QWORD **)&v17[v15];
  if (v41)
  {
    v58 = *(void **)&v17[v15];
    v42 = (char *)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v41) + 0x60);
    swift_beginAccess();
    v60 = (void *)*((_QWORD *)v42 + 4);
    *(_QWORD *)v42 = v16;
    *((_QWORD *)v42 + 1) = v71;
    *((_DWORD *)v42 + 4) = v76;
    *((_QWORD *)v42 + 3) = v69;
    *((_QWORD *)v42 + 4) = v70;
    *((_QWORD *)v42 + 5) = v68;
    *((_DWORD *)v42 + 12) = v67;
    *((_QWORD *)v42 + 7) = v66;
    *((_QWORD *)v42 + 8) = v64;
    *((_QWORD *)v42 + 9) = v3;
    *((_QWORD *)v42 + 10) = v61;
    outlined copy of BoundInputsView?(v16, v71, v76, v69, v70);
    outlined copy of BoundInputsView?(v16, v71, v76, v69, v70);
    outlined copy of BoundInputsView?(v16, v71, v76, v69, v70);
    v59 = v58;
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    type metadata accessor for _UIHostingView<BoundInputsView>(0, v43, v44, v45);
    lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>(v46, v47, v48, v49);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    outlined consume of BoundInputsView?((uint64_t)v65, v71, v76, v69, v70);
    outlined consume of BoundInputsView?((uint64_t)v65, v71, v76, v69, v70);
    outlined consume of BoundInputsView?(v72, v73, v74, v75, v63);

    return;
  }
LABEL_14:
  outlined consume of BoundInputsView?(v72, v73, v74, v75, v63);
}

void closure #1 in UIKitSearchBar.enqueueFirstResponderUpdate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  void *v4;
  uint64_t v5;
  int v6;
  char **v7;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = (unsigned __int8 *)MEMORY[0x18D760234](v2);
  if (v3)
  {
    v4 = v3;
    v5 = OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_pendingIsFirstResponder;
    v6 = v3[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_pendingIsFirstResponder];
    if (v6 != 2 && (v6 & 1) != objc_msgSend(v3, sel_isFirstResponder))
    {
      v7 = &selRef_becomeFirstResponder;
      if ((v6 & 1) == 0)
        v7 = &selRef_resignFirstResponder;
      objc_msgSend(v4, *v7);
    }
    *((_BYTE *)v4 + v5) = 2;

  }
}

void closure #2 in UIKitSearchBar.enqueueFirstResponderUpdate(_:)(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  void *v3;
  uint64_t v4;
  int v5;
  char **v6;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (unsigned __int8 *)MEMORY[0x18D760234](v1);
  if (v2)
  {
    v3 = v2;
    v4 = OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_pendingIsFirstResponder;
    v5 = v2[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_pendingIsFirstResponder];
    if (v5 != 2 && (v5 & 1) != objc_msgSend(v2, sel_isFirstResponder))
    {
      v6 = &selRef_becomeFirstResponder;
      if ((v5 & 1) == 0)
        v6 = &selRef_resignFirstResponder;
      objc_msgSend(v3, *v6);
    }
    *((_BYTE *)v3 + v4) = 2;

  }
}

void UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)(char a1, char a2)
{
  uint64_t v2;
  void *v3;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  double v17;
  id v18;
  uint64_t v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;

  v3 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost);
  if (v3)
  {
    v5 = (a1 & 1) != 0
      && *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarVisibility) != 2;
    v6 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v6;
    *(_BYTE *)(v7 + 24) = v5;
    *(_QWORD *)(v7 + 32) = v3;
    if ((a2 & 1) != 0)
    {
      v8 = v3;
      objc_msgSend(v8, sel_setHidden_, 0);
      v9 = (void *)objc_opt_self();
      v10 = swift_allocObject();
      *(_BYTE *)(v10 + 16) = v5;
      *(_QWORD *)(v10 + 24) = v8;
      *(_QWORD *)(v10 + 32) = partial apply for closure #1 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:);
      *(_QWORD *)(v10 + 40) = v7;
      v33 = partial apply for closure #2 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:);
      v34 = v10;
      v11 = MEMORY[0x1E0C809B0];
      v29 = MEMORY[0x1E0C809B0];
      v30 = 1107296256;
      v31 = thunk for @escaping @callee_guaranteed () -> ();
      v32 = &block_descriptor_12;
      v12 = _Block_copy(&v29);
      v13 = v8;
      swift_retain();
      swift_release();
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 16) = v13;
      *(_BYTE *)(v14 + 24) = v5;
      v33 = partial apply for closure #3 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:);
      v34 = v14;
      v29 = v11;
      v30 = 1107296256;
      v31 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
      v32 = &block_descriptor_18;
      v15 = _Block_copy(&v29);
      v16 = v13;
      swift_release();
      objc_msgSend(v9, sel_animateKeyframesWithDuration_delay_options_animations_completion_, 0, v12, v15, 0.35, 0.0);
      swift_release();

      _Block_release(v15);
      _Block_release(v12);
    }
    else
    {
      if (v5)
        v17 = 1.0;
      else
        v17 = 0.0;
      v18 = v3;
      swift_retain();
      objc_msgSend(v18, sel_setAlpha_, v17);
      swift_beginAccess();
      v19 = MEMORY[0x18D760234](v6 + 16);
      if (v19)
      {
        v20 = (void *)v19;
        v21 = *MEMORY[0x1E0DC49E8];
        v22 = *(double *)(MEMORY[0x1E0DC49E8] + 8);
        v23 = *(double *)(MEMORY[0x1E0DC49E8] + 24);
        if (v5)
        {
          objc_msgSend(v18, sel_intrinsicContentSize);
          v25 = v24;
          v26 = 4;
        }
        else
        {
          v26 = 0;
          v25 = *(double *)(MEMORY[0x1E0DC49E8] + 16);
        }
        objc_msgSend(v20, sel__setOverrideContentInsets_forRectEdges_, v26, v21, v22, v25, v23);
        objc_msgSend(v20, sel_sizeToFit);
        objc_msgSend(v20, sel_layoutIfNeeded);
        v27 = objc_msgSend(v20, sel_superview);
        objc_msgSend(v27, sel_sizeToFit);

        v28 = objc_msgSend(v20, sel_superview);
        objc_msgSend(v28, sel_layoutIfNeeded);
        swift_release();

      }
      else
      {
        swift_release();
      }
      objc_msgSend(v18, sel_setHidden_, !v5);

      swift_release();
    }
  }
}

void closure #1 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)(uint64_t a1, char a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  id v14;
  id v15;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x18D760234](v5);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = *MEMORY[0x1E0DC49E8];
    v9 = *(double *)(MEMORY[0x1E0DC49E8] + 8);
    v10 = *(double *)(MEMORY[0x1E0DC49E8] + 24);
    if ((a2 & 1) != 0)
    {
      objc_msgSend(a3, sel_intrinsicContentSize);
      v12 = v11;
      v13 = 4;
    }
    else
    {
      v13 = 0;
      v12 = *(double *)(MEMORY[0x1E0DC49E8] + 16);
    }
    objc_msgSend(v7, sel__setOverrideContentInsets_forRectEdges_, v13, v8, v9, v12, v10);
    objc_msgSend(v7, sel_sizeToFit);
    objc_msgSend(v7, sel_layoutIfNeeded);
    v14 = objc_msgSend(v7, sel_superview);
    objc_msgSend(v14, sel_sizeToFit);

    v15 = objc_msgSend(v7, sel_superview);
    objc_msgSend(v15, sel_layoutIfNeeded);

  }
}

uint64_t closure #2 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)(char a1, void *a2, uint64_t (*a3)(void))
{
  double v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD v12[6];

  if ((a1 & 1) != 0)
    v6 = 0.7;
  else
    v6 = 0.0;
  v7 = (void *)objc_opt_self();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_BYTE *)(v8 + 24) = a1;
  v12[4] = partial apply for closure #1 in closure #2 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:);
  v12[5] = v8;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed () -> ();
  v12[3] = &block_descriptor_10;
  v9 = _Block_copy(v12);
  v10 = a2;
  swift_release();
  objc_msgSend(v7, sel_addKeyframeWithRelativeStartTime_relativeDuration_animations_, v9, v6, 0.3);
  _Block_release(v9);
  return a3();
}

id closure #3 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)(int a1, id a2, char a3)
{
  return objc_msgSend(a2, sel_setHidden_, (a3 & 1) == 0);
}

Swift::Void __swiftcall UIKitSearchBar.didMoveToWindow()()
{
  unsigned __int8 *v0;
  uint64_t v1;
  int v2;
  char **v3;
  objc_super v4;

  v4.receiver = v0;
  v4.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v4, sel_didMoveToWindow);
  v1 = OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_pendingIsFirstResponder;
  v2 = v0[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_pendingIsFirstResponder];
  if (v2 != 2 && (v2 & 1) != objc_msgSend(v0, sel_isFirstResponder))
  {
    v3 = &selRef_becomeFirstResponder;
    if ((v2 & 1) == 0)
      v3 = &selRef_resignFirstResponder;
    objc_msgSend(v0, *v3);
  }
  v0[v1] = 2;
}

Swift::Void __swiftcall UIKitSearchBar.layoutSubviews()()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  id v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  CGFloat v18;
  _QWORD v19[2];
  objc_super v20;
  CGRect v21;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = type metadata accessor for FloatingPointRoundingRule();
  v4 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v3, v5);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20.receiver = v1;
  v20.super_class = ObjectType;
  objc_msgSendSuper2(&v20, sel_layoutSubviews, v6);
  v9 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost];
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v1, sel_traitCollection);
    objc_msgSend(v11, sel_displayScale);
    v13 = v12;

    objc_msgSend(v1, sel_bounds);
    v15 = UIKitSearchBar.roundedScopeBarSizeThatFits(_:)(v14, INFINITY);
    v17 = v16;
    objc_msgSend(v1, sel_bounds, v15);
    v18 = CGRectGetMaxY(v21) - v17;
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v8, *MEMORY[0x1E0DED4F0], v3);
    *(CGFloat *)&v19[1] = v18;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v8, 1.0 / v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
    objc_msgSend(v1, sel_bounds);
    objc_msgSend(v10, sel_setFrame_);

  }
}

double UIKitSearchBar.roundedScopeBarSizeThatFits(_:)(double a1, double a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  id v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v22;
  double v23;

  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)&v2[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost];
  if (!v10)
    return 0.0;
  v11 = v10;
  v12 = objc_msgSend(v2, sel_traitCollection);
  objc_msgSend(v12, sel_displayScale);
  v14 = v13;

  v15 = 1.0 / v14;
  objc_msgSend(v11, sel_sizeThatFits_, a1, a2);
  v17 = v16;
  v19 = v18;
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E0DED500], v5);
  v22 = v19;
  v23 = v17;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v15);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v15);

  v20 = v23;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v20;
}

id UIKitSearchBar.init(coder:)(void *a1)
{
  _BYTE *v1;
  objc_class *ObjectType;
  char *v4;
  id v5;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType();
  v1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_ensureVibrancy] = 0;
  v1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_isActive] = 0;
  v1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_pendingIsFirstResponder] = 2;
  v4 = &v1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarView];
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_QWORD *)v4 + 10) = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost] = 0;
  v1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarVisibility] = 0;
  v7.receiver = v1;
  v7.super_class = ObjectType;
  v5 = objc_msgSendSuper2(&v7, sel_initWithCoder_, a1);

  return v5;
}

uint64_t type metadata accessor for UIKitSearchBar()
{
  return objc_opt_self();
}

uint64_t sub_187142CD4()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in closure #2 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)()
{
  uint64_t v0;
  double v1;

  v1 = 0.0;
  if (*(_BYTE *)(v0 + 24))
    v1 = 1.0;
  return objc_msgSend(*(id *)(v0 + 16), sel_setAlpha_, v1);
}

uint64_t sub_187142D1C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_187142D40()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)()
{
  uint64_t v0;

  closure #1 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_187142D7C()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)()
{
  uint64_t v0;

  return closure #2 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)(*(_BYTE *)(v0 + 16), *(void **)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

id partial apply for closure #3 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_setHidden_, (*(_BYTE *)(v0 + 24) & 1) == 0);
}

void partial apply for closure #2 in UIKitSearchBar.enqueueFirstResponderUpdate(_:)()
{
  uint64_t v0;

  closure #2 in UIKitSearchBar.enqueueFirstResponderUpdate(_:)(v0);
}

void partial apply for closure #1 in UIKitSearchBar.enqueueFirstResponderUpdate(_:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in UIKitSearchBar.enqueueFirstResponderUpdate(_:)(a1, v1);
}

void type metadata accessor for _UIHostingView<BoundInputsView>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _UIHostingView<BoundInputsView>)
  {
    v4 = type metadata accessor for _UIHostingView(0, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<BoundInputsView>);
  }
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;

  result = lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<BoundInputsView>(255, a2, a3, a4);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v5);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>);
  }
  return result;
}

void Scene.windowDragArea(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static WindowDragArea.toolbarOrBackground.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for WindowDragArea()
{
  return &type metadata for WindowDragArea;
}

void Scene.windowBackgroundDragBehavior(_:)()
{
  Scene.windowDragArea(_:)();
}

void static WindowDragArea.automatic.getter()
{
  static WindowDragArea.toolbarOrBackground.getter();
}

void SearchScopesModifier.body(content:)()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchScopesModifier<A, B>);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for Picker();
}

void sub_187142F78(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v3 = lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes();
  *(_QWORD *)(v1 - 272) = v3;
  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Picker<A, B, C>, a1);
  *(_QWORD *)(v1 - 288) = v4;
  *(_QWORD *)(v1 - 136) = &type metadata for SearchFieldConfiguration.Scopes;
  *(_QWORD *)(v1 - 128) = a1;
  *(_QWORD *)(v1 - 120) = v3;
  *(_QWORD *)(v1 - 112) = v4;
  type metadata accessor for StaticSourceWriter();
}

void sub_187142FC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v3 - 248) = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchScopeActivation.Role>);
  v6 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v3 - 240) = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v11 = *(_QWORD *)(v3 - 264);
  *(_QWORD *)(v3 - 208) = v2;
  *(_QWORD *)(v3 - 200) = v11;
  v12 = *(_QWORD *)(v3 - 280);
  *(_QWORD *)(v3 - 192) = v1;
  *(_QWORD *)(v3 - 184) = v12;
  *(_QWORD *)(v3 - 176) = *(_QWORD *)(v3 - 256);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v0, v10);
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for SearchFieldConfiguration.Scopes, (uint64_t)partial apply for closure #1 in SearchScopesModifier.body(content:));
}

uint64_t sub_1871430EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  swift_getKeyPath();
  *(_BYTE *)(v8 - 136) = *(_BYTE *)(v3 + *(int *)(v1 + 56));
  *(_QWORD *)(v8 - 152) = v7;
  *(_QWORD *)(v8 - 144) = &protocol witness table for StaticSourceWriter<A, B>;
  v9 = MEMORY[0x1E0CE2E70];
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v8 - 152);
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 248) + 8))(v0, v4);
  v11 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchScopeActivation.Role>);
  *(_QWORD *)(v8 - 168) = v10;
  *(_QWORD *)(v8 - 160) = v11;
  v12 = MEMORY[0x18D75FFDC](v9, v2, v8 - 168);
  static ViewBuilder.buildExpression<A>(_:)(v6, v2, v12);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 240) + 8);
  v13(v6, v2);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, *(_QWORD *)(v8 - 232));
  return ((uint64_t (*)(uint64_t, uint64_t))v13)(v5, v2);
}

void closure #1 in SearchScopesModifier.body(content:)()
{
  type metadata accessor for Picker();
}

void sub_187143264(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v7, v8);
  *(_QWORD *)(v6 - 128) = v5;
  *(_QWORD *)(v6 - 120) = v4;
  *(_QWORD *)(v6 - 112) = v3;
  *(_QWORD *)(v6 - 104) = v2;
  type metadata accessor for SearchScopesModifier();
}

void sub_1871432C4(_QWORD *a1)
{
  uint64_t v1;

  SearchScopesModifier.scopePicker.getter(a1, v1);
}

uint64_t sub_1871432D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Picker<A, B, C>, v1);
  static ViewBuilder.buildExpression<A>(_:)(v2, v1, v5);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v3, v1, v0);
  return v6(v3, v1);
}

void SearchScopesModifier.scopePicker.getter(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = a1[2];
  v6 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = &v13[-v8];
  Binding.projectedValue.getter();
  v10 = a1[3];
  v11 = a1[4];
  v14 = v5;
  v15 = v10;
  v12 = a1[5];
  v16 = v11;
  v17 = v12;
  v18 = v2;
  Picker.init(selection:content:label:)((uint64_t)v9, (void (*)(uint64_t))partial apply for closure #1 in SearchScopesModifier.scopePicker.getter, (uint64_t)v13, (void (*)(uint64_t))closure #2 in SearchScopesModifier.scopePicker.getter, MEMORY[0x1E0CE6CF8], v10, a2, MEMORY[0x1E0CE6C58], v11, v12);
}

uint64_t key path getter for EnvironmentValues.searchScopeActivation : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.searchScopeActivation.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.searchScopeActivation : EnvironmentValues(unsigned __int8 *a1)
{
  return EnvironmentValues.searchScopeActivation.setter(*a1);
}

void closure #1 in SearchScopesModifier.scopePicker.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for SearchScopesModifier();
}

uint64_t sub_1871434E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v3 + *(int *)(a1 + 52), v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
}

uint64_t closure #2 in SearchScopesModifier.scopePicker.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;

  result = static Text.System.search.getter();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  *(_QWORD *)(a1 + 24) = v5;
  return result;
}

void SearchScopesModifier.init(scope:scopes:activation:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for SearchScopesModifier();
}

uint64_t sub_1871435D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
  *(_BYTE *)(v3 + *(int *)(a1 + 56)) = v4;
  return result;
}

void View.searchScopes<A, B>(_:scopes:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  v2 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for SearchScopesModifier();
}

void sub_1871436D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v13 = MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&a9 - v14;
  v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, double))(v9 + 16))(v11, *(_QWORD *)(v12 - 168), v10, v13);
  (*(void (**)(uint64_t))(v12 - 152))(v16);
  *(_BYTE *)(v12 - 112) = 2;
  SearchScopesModifier.init(scope:scopes:activation:)(v11, (uint64_t)v15);
}

uint64_t sub_187143750()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x18D75B4AC](v0, *(_QWORD *)(v3 - 136), v2, *(_QWORD *)(v3 - 128));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void type metadata accessor for SearchScopesModifier()
{
  JUMPOUT(0x18D75FF28);
}

void static SearchScopeActivation.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static SearchScopeActivation.onTextEntry.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static SearchScopeActivation.onSearchPresentation.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void View.searchScopes<A, B>(_:activation:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  v2 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for SearchScopesModifier();
}

void sub_187143880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;

  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&a9 - v15;
  v17 = *v11;
  v18 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, double))(v9 + 16))(v12, *(_QWORD *)(v13 - 168), v10, v14);
  (*(void (**)(uint64_t))(v13 - 152))(v18);
  *(_BYTE *)(v13 - 112) = v17;
  SearchScopesModifier.init(scope:scopes:activation:)(v12, (uint64_t)v16);
}

uint64_t sub_1871438F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x18D75B4AC](v1, *(_QWORD *)(v3 - 136), v0, *(_QWORD *)(v3 - 128));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void View.searchScopes<A, B>(_:isActive:scopes:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  v2 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for SearchScopesModifier();
}

void sub_1871439F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v13 = MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&a9 - v14;
  v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, double))(v9 + 16))(v11, *(_QWORD *)(v12 - 176), v10, v13);
  (*(void (**)(uint64_t))(v12 - 160))(v16);
  *(_BYTE *)(v12 - 112) = *(_DWORD *)(v12 - 148);
  SearchScopesModifier.init(scope:scopes:activation:)(v11, (uint64_t)v15);
}

uint64_t sub_187143A68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x18D75B4AC](v1, *(_QWORD *)(v3 - 136), v0, *(_QWORD *)(v3 - 128));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void SearchCustomScopeBarModifier.body(content:)()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchCustomScopeBarModifier<A>);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>);
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar();
  type metadata accessor for OptionalSourceWriter();
}

void sub_187143B5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v4 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v3 - 248) = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for ViewInputFlagModifier<HasCustomScopeBar>(255);
  v6 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v3 - 240) = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  swift_getKeyPath();
  *(_BYTE *)(v3 - 136) = *(_BYTE *)(v1 + 1);
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v0);
  View.environment<A>(_:_:)();
  swift_release();
  v11 = *(_BYTE *)(v3 - 112);
  *(_QWORD *)(v3 - 136) = *(_QWORD *)(v3 - 120);
  *(_BYTE *)(v3 - 128) = v11;
  *(_QWORD *)(v3 - 208) = *(_QWORD *)(v3 - 272);
  *(_QWORD *)(v3 - 200) = v2;
  *(_QWORD *)(v3 - 192) = v1;
  v12 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>);
  *(_QWORD *)(v3 - 152) = v10;
  *(_QWORD *)(v3 - 144) = v12;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], *(_QWORD *)(v3 - 264), v3 - 152);
  View.optionalViewAlias<A, B>(_:_:)();
}

uint64_t sub_187143CE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t HasCustomScopeBar;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);

  swift_release();
  *(_QWORD *)(v6 - 168) = v4;
  *(_QWORD *)(v6 - 160) = &protocol witness table for OptionalSourceWriter<A, B>;
  v7 = MEMORY[0x1E0CE2E70];
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v6 - 168);
  HasCustomScopeBar = lazy protocol witness table accessor for type HasCustomScopeBar and conformance HasCustomScopeBar();
  View.input<A>(_:)((uint64_t)&unk_1E1AC4350, v1, (uint64_t)&unk_1E1AC4350, v8, HasCustomScopeBar);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 248) + 8))(v5, v1);
  *(_QWORD *)(v6 - 184) = v8;
  *(_QWORD *)(v6 - 176) = &protocol witness table for ViewInputFlagModifier<A>;
  v10 = MEMORY[0x18D75FFDC](v7, v0, v6 - 184);
  static ViewBuilder.buildExpression<A>(_:)(v3, v0, v10);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 240) + 8);
  v11(v3, v0);
  static ViewBuilder.buildBlock<A>(_:)(v2, v0, *(_QWORD *)(v6 - 232));
  return v11(v2, v0);
}

uint64_t EnvironmentValues.searchCustomScopeBarVisibility.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.searchCustomScopeBarVisibility : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.searchCustomScopeBarVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.searchCustomScopeBarVisibility : EnvironmentValues()
{
  return EnvironmentValues.searchCustomScopeBarVisibility.setter();
}

uint64_t EnvironmentValues.searchCustomScopeBarVisibility.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t closure #1 in SearchCustomScopeBarModifier.body(content:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;

  if (*a1 == 1)
  {
    v7 = &a1[*(int *)(type metadata accessor for SearchCustomScopeBarModifier(0, a2, a3, a4) + 40)];
    v8 = *(_QWORD *)(a2 - 8);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 16))(a5, v7, a2);
    v9 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a2 - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a5, v9, 1, a2);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance HasCustomScopeBarPredicate()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type HasCustomScopeBar and conformance HasCustomScopeBar();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance HasCustomScopeBar()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type HasCustomScopeBar and conformance HasCustomScopeBar();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance HasCustomScopeBar()
{
  lazy protocol witness table accessor for type HasCustomScopeBar and conformance HasCustomScopeBar();
  return PropertyList.subscript.setter();
}

uint64_t View.searchScopeBar<A>(isActive:_:)(uint64_t a1, void (*a2)(double), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a6;
  v23 = a4;
  v8 = a1;
  v9 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SearchCustomScopeBarModifier(0, v13, v14, v12);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v22 - v19;
  a2(v18);
  *v20 = v8;
  v20[1] = 0;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v20[*(int *)(v15 + 40)], v11, a5);
  MEMORY[0x18D75B4AC](v20, v23, v15, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v15);
}

uint64_t type metadata accessor for SearchCustomScopeBarModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchCustomScopeBarModifier);
}

uint64_t View.searchScopeBar<A>(isActive:visibility:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(double)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a6;
  v24 = a7;
  v25 = a4;
  v9 = a2;
  v10 = a1;
  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for SearchCustomScopeBarModifier(0, v15, v16, v14);
  v18 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v22 = (char *)&v24 - v21;
  a3(v20);
  *v22 = v10;
  v22[1] = v9;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v22[*(int *)(v17 + 40)], v13, a5);
  MEMORY[0x18D75B4AC](v22, v25, v17, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v22, v17);
}

uint64_t getEnumTagSinglePayload for SearchScopeActivation(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  if (v6 >= 2)
    v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 3;
  else
    v7 = -4;
  if (v7 < 0)
    v7 = -1;
  return (v7 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchScopeActivation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_18714449C + 4 * byte_187C0C725[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1871444D0 + 4 * asc_187C0C720[v4]))();
}

uint64_t sub_1871444D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1871444D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1871444E0);
  return result;
}

uint64_t sub_1871444EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1871444F4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1871444F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187144500(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchScopeActivation()
{
  return &type metadata for SearchScopeActivation;
}

void sub_18714451C()
{
  type metadata accessor for SearchScopesModifier();
}

uint64_t sub_187144550(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[12];

  v3 = type metadata accessor for ModifiedContent();
  v5[0] = v1;
  v5[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchScopesModifier<A, B>, a1);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v5);
}

uint64_t sub_1871445A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = a1[2];
  v5 = type metadata accessor for SearchCustomScopeBarModifier(255, a1[1], a1[3], a4);
  v6 = type metadata accessor for ModifiedContent();
  v8[0] = v4;
  v8[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchCustomScopeBarModifier<A>, v5);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v8);
}

uint64_t getEnumTagSinglePayload for SearchScopeActivation.Role(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
  {
    v6 = *a1;
    if (v6 >= 2)
    {
      v7 = (v6 + 2147483646) & 0x7FFFFFFF;
      result = v7 - 2;
      if (v7 > 2)
        return result;
    }
    return 0;
  }
  v2 = a2 + 4;
  if (a2 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if (v2 >> 8 < 0xFF)
    v3 = 1;
  if (v2 >= 0x100)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_18714466C + 4 * byte_187C0C72A[v4]))();
}

uint64_t storeEnumTagSinglePayload for SearchScopeActivation.Role(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFC)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_187144718 + 4 * byte_187C0C734[v5]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_18714474C + 4 * byte_187C0C72F[v5]))();
}

uint64_t sub_18714474C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187144754(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18714475CLL);
  return result;
}

uint64_t sub_187144768(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187144770);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_187144774(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18714477C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for SearchScopeActivation.Role(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *a1;
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

_BYTE *destructiveInjectEnumTag for SearchScopeActivation.Role(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for SearchScopeActivation.Role()
{
  return &type metadata for SearchScopeActivation.Role;
}

uint64_t type metadata completion function for SearchCustomScopeBarModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SearchCustomScopeBarModifier(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = ~v5;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 2) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v5 + 16) & v6));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    a1[1] = *((_BYTE *)a2 + 1);
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))((unint64_t)&a1[v5 + 2] & v6, ((unint64_t)a2 + v5 + 2) & v6);
  }
  return v3;
}

_BYTE *initializeWithTake for SearchCustomScopeBarModifier(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 2] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 2] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *assignWithTake for SearchCustomScopeBarModifier(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 2] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 2] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchCustomScopeBarModifier(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 2) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)&a1[v9];
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9])
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFE)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v7 + 2] & ~v7);
      v15 = *a1;
      v16 = v15 >= 2;
      v17 = (v15 + 2147483646) & 0x7FFFFFFF;
      if (v16)
        return (v17 + 1);
      else
        return 0;
    }
  }
  v11 = a1[v9];
  if (!a1[v9])
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187144A74 + 4 * byte_187C0C739[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for SearchCustomScopeBarModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata completion function for SearchScopesModifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchScopesModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;

  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64) + v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000;
  v13 = *a2;
  *a1 = *a2;
  if ((v9 | v7) > 7 || v12 != 0 || v11 + (v10 & (unint64_t)~v9) + 1 > 0x18)
  {
    a1 = (uint64_t *)(v13 + (((v9 | v7) & 0xF8 ^ 0x1F8) & ((v9 | v7) + 16)));
    swift_retain();
  }
  else
  {
    v24 = ~v9;
    v17 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v18 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v17 = *v18;
    v19 = ((unint64_t)v17 + v7 + 8) & ~v7;
    v20 = ((unint64_t)v18 + v7 + 8) & ~v7;
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v23(v19, v20, v5);
    v21 = ((unint64_t)a2 + v10) & v24;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)a1 + v10) & v24, v21, v4);
    *(_BYTE *)((((unint64_t)a1 + v10) & v24) + v11) = *(_BYTE *)(v21 + v11);
  }
  return a1;
}

uint64_t destroy for SearchScopesModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + 15;
  swift_release();
  swift_release();
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(((v4 & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((*(_QWORD *)(v5 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + ((v6 + 16) & ~v6)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

_QWORD *initializeWithCopy for SearchScopesModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  *a1 = *a2;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)v6 + v10 + 8) & ~v10;
  v12 = ((unint64_t)v7 + v10 + 8) & ~v10;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  swift_retain();
  swift_retain();
  v13(v11, v12, v8);
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = ((v10 + 16) & ~v10) + *(_QWORD *)(v9 + 64) + v15;
  v17 = ((unint64_t)a1 + v16) & ~v15;
  v18 = ((unint64_t)a2 + v16) & ~v15;
  (*(void (**)(unint64_t, unint64_t))(v14 + 16))(v17, v18);
  *(_BYTE *)(v17 + *(_QWORD *)(v14 + 64)) = *(_BYTE *)(v18 + *(_QWORD *)(v14 + 64));
  return a1;
}

_QWORD *assignWithCopy for SearchScopesModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_retain();
  swift_release();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v7 + v9 + 8) & ~v9, (v9 + 8 + v6) & ~v9);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ((v9 + 16) & ~v9) + v10 + v12;
  v14 = ((unint64_t)a1 + v13) & ~v12;
  v15 = ((unint64_t)a2 + v13) & ~v12;
  (*(void (**)(unint64_t, unint64_t))(v11 + 24))(v14, v15);
  *(_BYTE *)(v14 + *(_QWORD *)(v11 + 64)) = *(_BYTE *)(v15 + *(_QWORD *)(v11 + 64));
  return a1;
}

_QWORD *initializeWithTake for SearchScopesModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  *a1 = *a2;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((unint64_t)v6 + v9 + 8) & ~v9, ((unint64_t)v7 + v9 + 8) & ~v9);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ((v9 + 16) & ~v9) + v10 + v12;
  v14 = ((unint64_t)a1 + v13) & ~v12;
  v15 = ((unint64_t)a2 + v13) & ~v12;
  (*(void (**)(unint64_t, unint64_t))(v11 + 32))(v14, v15);
  *(_BYTE *)(v14 + *(_QWORD *)(v11 + 64)) = *(_BYTE *)(v15 + *(_QWORD *)(v11 + 64));
  return a1;
}

_QWORD *assignWithTake for SearchScopesModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_release();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((unint64_t)v7 + v9 + 8) & ~v9, (v9 + 8 + v6) & ~v9);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + v11;
  v13 = ((unint64_t)a1 + v12) & ~v11;
  v14 = ((unint64_t)a2 + v12) & ~v11;
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))(v13, v14);
  *(_BYTE *)(v13 + *(_QWORD *)(v10 + 64)) = *(_BYTE *)(v14 + *(_QWORD *)(v10 + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchScopesModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  int v17;
  unsigned int v19;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v7)
    v10 = v7;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = ((v11 + 16) & ~v11) + *(_QWORD *)(v5 + 64) + v12;
  v14 = a2 - v10;
  if (a2 <= v10)
    goto LABEL_27;
  v15 = *(_QWORD *)(v8 + 64) + (v13 & ~v12) + 1;
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v19 = ((v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (!v17)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v19 > 0xFF)
    {
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v19 < 2)
    {
LABEL_27:
      if (v7 < v9)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v8 + 48))((v13 + a1) & ~v12, *(unsigned int *)(v8 + 84), v4);
      v22 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v22 + v11 + 8) & ~v11);
      v23 = *v22;
      if (v23 >= 0xFFFFFFFF)
        LODWORD(v23) = -1;
      return (v23 + 1);
    }
  }
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_27;
LABEL_18:
  v20 = (v17 - 1) << v16;
  if (v15 > 3)
    v20 = 0;
  if (*(_DWORD *)(v8 + 64) + (v13 & ~(_DWORD)v12) == -1)
    return v10 + v20 + 1;
  if (v15 <= 3)
    v21 = *(_DWORD *)(v8 + 64) + (v13 & ~(_DWORD)v12) + 1;
  else
    v21 = 4;
  return ((uint64_t (*)(void))((char *)&loc_187145400 + 4 * byte_187C0C747[v21 - 1]))();
}

void storeEnumTagSinglePayload for SearchScopesModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v7 + 84) <= v6)
    v8 = v6;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v7 + 64)
     + ((((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + *(_QWORD *)(v5 + 64)
       + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
     + 1;
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if (*(_DWORD *)(v7 + 64)
         + ((((*(unsigned __int8 *)(v5 + 80) + 16) & ~*(unsigned __int8 *)(v5 + 80))
           + *(_DWORD *)(v5 + 64)
           + *(unsigned __int8 *)(v7 + 80)) & ~*(unsigned __int8 *)(v7 + 80)) != -1)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X5 }
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SearchCustomScopeBarModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SearchScopesModifier<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes;
  if (!lazy protocol witness table cache variable for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchFieldConfiguration.Scopes, &type metadata for SearchFieldConfiguration.Scopes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes;
  if (!lazy protocol witness table cache variable for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchFieldConfiguration.Scopes, &type metadata for SearchFieldConfiguration.Scopes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes);
  }
  return result;
}

uint64_t partial apply for closure #1 in SearchScopesModifier.body(content:)()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in SearchScopesModifier.body(content:));
}

uint64_t sub_187145834@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.searchScopeActivation.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18714586C(unsigned __int8 *a1)
{
  return EnvironmentValues.searchScopeActivation.setter(*a1);
}

uint64_t partial apply for closure #1 in SearchScopesModifier.scopePicker.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in SearchScopesModifier.scopePicker.getter);
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentValues.SearchCustomScopeBar, &type metadata for EnvironmentValues.SearchCustomScopeBar);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentValues.SearchCustomScopeBar, &type metadata for EnvironmentValues.SearchCustomScopeBar);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar);
  }
  return result;
}

void type metadata accessor for ViewInputFlagModifier<HasCustomScopeBar>(uint64_t a1)
{
  unint64_t HasCustomScopeBar;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewInputFlagModifier<HasCustomScopeBar>)
  {
    HasCustomScopeBar = lazy protocol witness table accessor for type HasCustomScopeBar and conformance HasCustomScopeBar();
    v4 = type metadata accessor for ViewInputFlagModifier(a1, (uint64_t)&unk_1E1AC4350, HasCustomScopeBar, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<HasCustomScopeBar>);
  }
}

unint64_t lazy protocol witness table accessor for type HasCustomScopeBar and conformance HasCustomScopeBar()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar;
  if (!lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasCustomScopeBar, &unk_1E1AC4350);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar;
  if (!lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasCustomScopeBar, &unk_1E1AC4350);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar;
  if (!lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasCustomScopeBar, &unk_1E1AC4350);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar;
  if (!lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasCustomScopeBar, &unk_1E1AC4350);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar;
  if (!lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasCustomScopeBar, &unk_1E1AC4350);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomScopeBar and conformance HasCustomScopeBar);
  }
  return result;
}

uint64_t sub_18714597C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.searchCustomScopeBarVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1871459B4()
{
  return EnvironmentValues.searchCustomScopeBarVisibility.setter();
}

uint64_t partial apply for closure #1 in SearchCustomScopeBarModifier.body(content:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in SearchCustomScopeBarModifier.body(content:)(*(_BYTE **)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, a2);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v4);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void *type metadata accessor for EnvironmentValues.SearchCustomScopeBarVisibilityKey()
{
  return &unk_1E1AC3F00;
}

void *type metadata accessor for HasCustomScopeBar()
{
  return &unk_1E1AC4350;
}

void sub_187145AE8()
{
  type metadata accessor for SearchScopesModifier();
}

void sub_187145B1C(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchScopesModifier<A, B>, a1);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for Picker();
}

void sub_187145B6C(uint64_t a1)
{
  lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for Picker<A, B, C>, a1);
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_187145BA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[16];

  v1 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchScopeActivation.Role>);
  v2 = type metadata accessor for ModifiedContent();
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v0);
  v6[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v3 = MEMORY[0x1E0CE2E70];
  v5[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v6);
  v5[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchScopeActivation.Role>);
  return MEMORY[0x18D75FFDC](v3, v2, v5);
}

void sub_187145C64(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchCustomScopeBarModifier(255, *a1, a1[1], a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchCustomScopeBarModifier<A>, v4);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>);
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar();
  type metadata accessor for OptionalSourceWriter();
}

uint64_t sub_187145D0C()
{
  unint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[14];

  v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for ViewInputFlagModifier<HasCustomScopeBar>(255);
  v4 = type metadata accessor for ModifiedContent();
  v9[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
  v9[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>, v0);
  v5 = MEMORY[0x1E0CE2E70];
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v9);
  v8[1] = &protocol witness table for OptionalSourceWriter<A, B>;
  v7[0] = MEMORY[0x18D75FFDC](v5, v3, v8);
  v7[1] = &protocol witness table for ViewInputFlagModifier<A>;
  return MEMORY[0x18D75FFDC](v5, v4, v7);
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in HasCustomScopeBar()
{
  return &protocol witness table for HasCustomScopeBar;
}

ValueMetadata *type metadata accessor for HasCustomScopeBarPredicate()
{
  return &type metadata for HasCustomScopeBarPredicate;
}

uint64_t PlatformViewHitTestFilterGesture.Value.gestureValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v1, AssociatedTypeWitness);
}

uint64_t PlatformViewHitTestFilterGesture.Value.gestureValue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v1, a1, AssociatedTypeWitness);
}

uint64_t (*PlatformViewHitTestFilterGesture.Value.gestureValue.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

id PlatformViewHitTestFilterGesture.Value.view.getter(uint64_t a1)
{
  uint64_t v1;

  return *(id *)(v1 + *(int *)(a1 + 36));
}

void PlatformViewHitTestFilterGesture.Value.view.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(a2 + 36);

  *(_QWORD *)(v2 + v4) = a1;
}

uint64_t (*PlatformViewHitTestFilterGesture.Value.view.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double PlatformViewHitTestFilterGesture.Value.location.getter(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 40));
}

uint64_t PlatformViewHitTestFilterGesture.Value.location.setter(uint64_t result, double a2, double a3)
{
  uint64_t v3;
  double *v4;

  v4 = (double *)(v3 + *(int *)(result + 40));
  *v4 = a2;
  v4[1] = a3;
  return result;
}

uint64_t (*PlatformViewHitTestFilterGesture.Value.location.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t PlatformViewHitTestFilterGesture.Value.init(gestureValue:view:location:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t result;
  double *v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a5, a1, AssociatedTypeWitness);
  result = type metadata accessor for PlatformViewHitTestFilterGesture.Value(0, a3, a4, v15);
  *(_QWORD *)(a5 + *(int *)(result + 36)) = a2;
  v17 = (double *)(a5 + *(int *)(result + 40));
  *v17 = a6;
  v17[1] = a7;
  return result;
}

uint64_t PlatformViewHitTestFilterGesture.init(_:filter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *v11;

  v11 = (_QWORD *)(a6 + *(int *)(type metadata accessor for PlatformViewHitTestFilterGesture(0, a4, a5, a4) + 36));
  *v11 = a2;
  v11[1] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
}

uint64_t type metadata accessor for PlatformViewHitTestFilterGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformViewHitTestFilterGesture);
}

uint64_t protocol witness for GestureStateProtocol.init() in conformance PlatformViewHitTestFilterGesture<A>.GestureState@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  *a1 = result & 1;
  return result;
}

uint64_t PlatformViewHitTestFilterGesture.internalBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;

  v4 = v3;
  v41 = a3;
  v37 = *(_QWORD *)(a1 - 8);
  v39 = *(_QWORD *)(v37 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v36 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EventListener<HitTestableEvent>();
  v14 = v13;
  v15 = *(_QWORD *)(a1 + 24);
  v17 = type metadata accessor for PlatformViewHitTestFilterGesture.Value(255, v8, v15, v16);
  v18 = lazy protocol witness table accessor for type EventListener<HitTestableEvent> and conformance EventListener<A>();
  v42 = v8;
  v43 = v14;
  v44 = v17;
  v45 = v15;
  v46 = v18;
  v34 = v18;
  v38 = MEMORY[0x18D75FF88](0, &v42, MEMORY[0x1E0CE7728], 0);
  v40 = *(_QWORD *)(v38 - 8);
  v20 = MEMORY[0x1E0C80A78](v38, v19);
  v22 = (char *)&v33 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v4, v8, v20);
  LOBYTE(v42) = 1;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v8;
  *(_QWORD *)(v23 + 24) = v15;
  v33 = swift_checkMetadataState();
  v24 = swift_checkMetadataState();
  Gesture.combined<A, B>(with:body:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v26 = type metadata accessor for PlatformViewHitTestFilterGesture.GestureState(0, v8, v15, v25);
  v28 = v36;
  v27 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, v35, a1);
  v29 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = v8;
  *(_QWORD *)(v30 + 24) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v27 + 32))(v30 + v29, v28, a1);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewHitTestFilterGesture<A>.GestureState, v26);
  v42 = v8;
  v43 = v33;
  v44 = v24;
  v45 = v15;
  v46 = v34;
  swift_getOpaqueTypeConformance2();
  v31 = v38;
  static GestureStateProtocol.gesture<A, B>(content:_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v22, v31);
}

void type metadata accessor for EventListener<HitTestableEvent>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EventListener<HitTestableEvent>)
  {
    v0 = type metadata accessor for EventListener();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EventListener<HitTestableEvent>);
  }
}

uint64_t type metadata accessor for PlatformViewHitTestFilterGesture.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformViewHitTestFilterGesture.Value);
}

unint64_t lazy protocol witness table accessor for type EventListener<HitTestableEvent> and conformance EventListener<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EventListener<HitTestableEvent> and conformance EventListener<A>;
  if (!lazy protocol witness table cache variable for type EventListener<HitTestableEvent> and conformance EventListener<A>)
  {
    type metadata accessor for EventListener<HitTestableEvent>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1EC0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventListener<HitTestableEvent> and conformance EventListener<A>);
  }
  return result;
}

void closure #1 in PlatformViewHitTestFilterGesture.internalBody.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v12 = *(unsigned __int8 *)(a2 + 48);
  if ((v12 - 1) >= 2)
  {
    if (*(_BYTE *)(a2 + 48))
      goto LABEL_11;
    if (v8 == 1)
    {
      v13 = *(_QWORD *)a2;
      v14 = *(_QWORD *)(a2 + 8);
      v15 = 1;
      v16 = v9;
      v17 = v11;
      v18 = 0;
LABEL_10:
      outlined consume of GesturePhase<HitTestableEvent>(v13, v14, v15, v16, v17, v10, v18);
      goto LABEL_11;
    }
  }
  v30 = *(_QWORD *)(a2 + 40);
  outlined copy of GesturePhase<HitTestableEvent>(v6, v7, v8, v9, v11, v10, v12);
  HitTestableEvent.hitTestLocation.getter();
  if (v8)
  {
    v21 = v19;
    v22 = v20;
    type metadata accessor for UIViewResponder();
    v23 = swift_dynamicCastClass();
    if (v23)
    {
      v24 = (void *)MEMORY[0x18D760234](v23 + 48);
      if (v24)
      {
        v25 = v24;
        objc_msgSend(v25, sel_convertPoint_fromView_, 0, v21, v22);
        outlined consume of GesturePhase<HitTestableEvent>(v6, v7, v8, v9, v11, v30, v12);

        MEMORY[0x1E0C80A78](v26, v27);
        swift_getAssociatedTypeWitness();
        type metadata accessor for GesturePhase();
        type metadata accessor for PlatformViewHitTestFilterGesture.Value(0, a3, a4, v28);
        v29 = v25;
        GesturePhase.map<A>(_:)();

        return;
      }
    }
    v13 = v6;
    v14 = v7;
    v15 = v8;
    v16 = v9;
    v17 = v11;
    v10 = v30;
    v18 = v12;
    goto LABEL_10;
  }
LABEL_11:
  type metadata accessor for PlatformViewHitTestFilterGesture.Value(255, a3, a4, a4);
  type metadata accessor for GesturePhase();
  swift_storeEnumTagMultiPayload();
}

uint64_t sub_187146794()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in PlatformViewHitTestFilterGesture.internalBody.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in PlatformViewHitTestFilterGesture.internalBody.getter(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t type metadata accessor for PlatformViewHitTestFilterGesture.GestureState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformViewHitTestFilterGesture.GestureState);
}

id closure #1 in closure #1 in PlatformViewHitTestFilterGesture.internalBody.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, double *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  id v19;

  v19 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, double))(v16 + 16))((char *)&v18 - v14, a1, v13);
  PlatformViewHitTestFilterGesture.Value.init(gestureValue:view:location:)((uint64_t)v15, (uint64_t)v19, a4, a5, a6, *a3, a3[1]);
  return v19;
}

uint64_t closure #2 in PlatformViewHitTestFilterGesture.internalBody.getter@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(double, double);
  double *v24;
  double v25;
  double v26;
  id v27;
  char v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a5;
  v36 = a3;
  v10 = type metadata accessor for PlatformViewHitTestFilterGesture.Value(255, a4, a5, a4);
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v31 - v14;
  v16 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v31 - v19;
  v34 = a1;
  if ((*a1 & 1) != 0)
    goto LABEL_7;
  v33 = a6;
  type metadata accessor for GesturePhase();
  v32 = a2;
  GesturePhase.unwrapped.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v10) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
LABEL_6:
    a2 = v32;
    a6 = v33;
LABEL_7:
    v29 = type metadata accessor for GesturePhase();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(a6, a2, v29);
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v15, v10);
  v22 = type metadata accessor for PlatformViewHitTestFilterGesture(0, a4, v35, v21);
  v23 = *(uint64_t (**)(double, double))(v36 + *(int *)(v22 + 36));
  v24 = (double *)&v20[*(int *)(v10 + 40)];
  v25 = *v24;
  v26 = v24[1];
  v27 = *(id *)&v20[*(int *)(v10 + 36)];
  v28 = v23(v25, v26);

  (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v10);
  if ((v28 & 1) != 0)
  {
    *v34 = 1;
    goto LABEL_6;
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_187146A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlatformViewHitTestFilterGesture(0, v5, *(_QWORD *)(v4 + 24), a4)- 8)+ 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + ((v6 + 32) & ~v6), v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PlatformViewHitTestFilterGesture.internalBody.getter@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v4 + 24);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlatformViewHitTestFilterGesture(0, v8, v9, a3) - 8)
                           + 80);
  return closure #2 in PlatformViewHitTestFilterGesture.internalBody.getter(a1, a2, v4 + ((v10 + 32) & ~v10), v8, v9, a4);
}

void base witness table accessor for PrimitiveGesture in PlatformViewHitTestFilterGesture<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in PlatformViewHitTestFilterGesture<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance PlatformViewHitTestFilterGesture<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewHitTestFilterGesture<A>, a3);
  return static PubliclyPrimitiveGesture._makeGesture(gesture:inputs:)();
}

void protocol witness for Gesture.body.getter in conformance PlatformViewHitTestFilterGesture<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewHitTestFilterGesture<A>, a1);
  specialized PrimitiveGesture.body.getter();
}

void base witness table accessor for Gesture in PlatformViewHitTestFilterGesture<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t getEnumTagSinglePayload for PlatformViewHitTestFilterGesture(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187146CC4 + 4 * byte_187C0CAC0[v10]))();
  }
}

void storeEnumTagSinglePayload for PlatformViewHitTestFilterGesture(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_187146E3C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187146EB4);
}

void sub_187146E44(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187146E4CLL);
  JUMPOUT(0x187146EB4);
}

void sub_187146E8C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187146EB4);
}

void sub_187146E94()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187146EB4);
}

uint64_t sub_187146E9C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x187146EB4);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x187146EB0);
    JUMPOUT(0x187146EA8);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for PlatformViewHitTestFilterGesture.Value()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PlatformViewHitTestFilterGesture.Value(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  void *v12;
  id v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v10 = (_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (void **)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v12 = *v11;
    *v10 = *v11;
    *(_OWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
    v13 = v12;
  }
  return a1;
}

void destroy for PlatformViewHitTestFilterGesture.Value(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);

}

uint64_t initializeWithCopy for PlatformViewHitTestFilterGesture.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  void *v9;
  id v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (void **)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  *v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  v10 = v9;
  return a1;
}

uint64_t assignWithCopy for PlatformViewHitTestFilterGesture.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  unint64_t v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD *v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (void **)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(void **)v8;
  v8 += 15;
  v10 = *v7;
  *v7 = v9;
  v11 = v9;

  v12 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  v12[1] = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t initializeWithTake for PlatformViewHitTestFilterGesture.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for PlatformViewHitTestFilterGesture.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  unint64_t v8;
  void *v9;
  void *v10;
  _QWORD *v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (void **)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(void **)v8;
  v8 += 15;
  v10 = *v7;
  *v7 = v9;

  v11 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  v11[1] = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformViewHitTestFilterGesture.Value(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

void storeEnumTagSinglePayload for PlatformViewHitTestFilterGesture.Value(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v10 = 0u;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v7 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v7 + a2;
    bzero(a1, ((((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_187147580()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1871475F8);
}

void sub_187147588()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x187147590);
  JUMPOUT(0x1871475F8);
}

void sub_1871475D4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1871475F8);
}

void sub_1871475DC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1871475F8);
}

uint64_t sub_1871475E4@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v3 + v5) = 0;
  if (!(_DWORD)v4)
    JUMPOUT(0x1871475F8);
  if (a1 < 0x7FFFFFFF)
  {
    if ((v4 & 0x80000000) == 0)
      JUMPOUT(0x1871475F4);
    JUMPOUT(0x1871475F0);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v3, v4);
}

uint64_t sub_187147610(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeConformance2;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v5 = *a1;
  v4 = a1[1];
  v6 = type metadata accessor for PlatformViewHitTestFilterGesture.GestureState(255, *a1, v4, a4);
  v8 = type metadata accessor for PlatformViewHitTestFilterGesture.Value(255, v5, v4, v7);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewHitTestFilterGesture<A>.GestureState, v6);
  v9 = type metadata accessor for StateContainerGesture();
  type metadata accessor for EventListener<HitTestableEvent>();
  v11 = v10;
  v12 = lazy protocol witness table accessor for type EventListener<HitTestableEvent> and conformance EventListener<A>();
  v18 = v5;
  v19 = v11;
  v20 = v8;
  v21 = v4;
  v22 = v12;
  v13 = MEMORY[0x18D75FF88](255, &v18, MEMORY[0x1E0CE7728], 0);
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE51E0], v9);
  v18 = v5;
  v19 = v11;
  v20 = v8;
  v21 = v4;
  v22 = v12;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v18 = v9;
  v19 = v13;
  v20 = v14;
  v21 = OpaqueTypeConformance2;
  v16 = type metadata accessor for ModifierGesture();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E88], v16);
}

uint64_t storeEnumTagSinglePayload for PlatformViewHitTestFilterGesture.GestureState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187147784 + 4 * byte_187C0CAE3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1871477B8 + 4 * byte_187C0CADE[v4]))();
}

uint64_t sub_1871477B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1871477C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1871477C8);
  return result;
}

uint64_t sub_1871477D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1871477DCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1871477E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1871477E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t outlined copy of GesturePhase<HitTestableEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 == 2 || a7 == 1)
    return swift_retain();
  if (!a7)
    return outlined copy of HitTestableEvent?(result, a2, a3);
  return result;
}

uint64_t outlined copy of HitTestableEvent?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 1)
    return swift_retain();
  return result;
}

uint64_t outlined consume of GesturePhase<HitTestableEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 == 2 || a7 == 1)
    return swift_release();
  if (!a7)
    return outlined consume of HitTestableEvent?(result, a2, a3);
  return result;
}

uint64_t outlined consume of HitTestableEvent?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 1)
    return swift_release();
  return result;
}

id partial apply for closure #1 in closure #1 in PlatformViewHitTestFilterGesture.internalBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in PlatformViewHitTestFilterGesture.internalBody.getter(a1, *(void **)(v2 + 32), *(double **)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void View.pointerVisibility(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_187147888(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for PointerVisibilityModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t storeEnumTagSinglePayload for PointerVisibilityModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187147928 + 4 * byte_187C0CC55[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18714795C + 4 * byte_187C0CC50[v4]))();
}

uint64_t sub_18714795C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187147964(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18714796CLL);
  return result;
}

uint64_t sub_187147978(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187147980);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187147984(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18714798C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PointerVisibilityModifier()
{
  return &unk_1E1AEB078;
}

_UNKNOWN **base witness table accessor for ViewModifier in PointerVisibilityModifier()
{
  return &protocol witness table for PointerVisibilityModifier;
}

void protocol witness for ViewModifier.body(content:) in conformance PointerVisibilityModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void View.pointer(_:)()
{
  View.pointerVisibility(_:)();
}

void TabView.init<A>(selection:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;

  MEMORY[0x1E0C80A78](a1, a2);
  v4 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
  type metadata accessor for TabContentBuilder.Content();
}

void sub_187147AE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabContentBuilder<A>.Content<A1>, a1);
  *(_QWORD *)(v3 - 112) = v2;
  *(_QWORD *)(v3 - 104) = a1;
  *(_QWORD *)(v3 - 96) = v1;
  *(_QWORD *)(v3 - 88) = v5;
  type metadata accessor for TabView();
}

uint64_t sub_187147B0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = v3 + *(int *)(a1 + 52);
  v10 = type metadata accessor for Optional();
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_BYTE *)(v9 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v3, v10);
  v11 = *(_QWORD *)(v7 - 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v3, v11, v6);
  v12 = v4(v3, 0, 1, v6);
  (*(void (**)(uint64_t))(v7 - 120))(v12);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v11, v6);
  return PickerBuilder.Content.init(_:)(v5, v2, v3 + *(int *)(a1 + 56));
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<ContainerStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<ContainerStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<ContainerStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<ContainerStyleContext>, MEMORY[0x1E0CE5078], MEMORY[0x1E0CE5068], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<ContainerStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

void type metadata accessor for ViewInputFlagModifier<IsInLazyContainer>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewInputFlagModifier<IsInLazyContainer>)
  {
    v2 = lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
    v4 = type metadata accessor for ViewInputFlagModifier(a1, (uint64_t)&type metadata for IsInLazyContainer, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<IsInLazyContainer>);
  }
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TabView<A, B>.TransformEnvironment()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance TabView<A, B>.TransformEnvironment()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

void TabView<>.init(content:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v2[3];

  memset(v2, 0, sizeof(v2));
  TabView.init(selection:content:)((uint64_t)v2, a1, a2);
}

void TabView.init<A>(content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  MEMORY[0x1E0C80A78](a1, a2);
  *(_BYTE *)(a5 + 32) = 0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  v8();
  v9 = MEMORY[0x1E0DEDCE8];
  v10 = a3;
  v11 = MEMORY[0x1E0DEDCF8];
  v12 = a4;
  type metadata accessor for TabContentBuilder.Content();
}

void sub_187147DCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabContentBuilder<A>.Content<A1>, a1);
  *(_QWORD *)(v3 - 96) = v1;
  *(_QWORD *)(v3 - 88) = a1;
  *(_QWORD *)(v3 - 80) = v2;
  *(_QWORD *)(v3 - 72) = v5;
  type metadata accessor for TabView();
}

uint64_t sub_187147DF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return PickerBuilder.Content.init(_:)(v3, v1, v2 + *(int *)(a1 + 56));
}

uint64_t *initializeBufferWithCopyOfBuffer for TabView(uint64_t *__dst, uint64_t *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v10 = *(_DWORD *)(v9 + 80);
  if ((v10 | v7) > 7
    || ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) != 0
    || ((v10 + 17 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v10) + *(_QWORD *)(v9 + 64) > 0x18)
  {
    v13 = *__src;
    *__dst = *__src;
    __dst = (uint64_t *)(v13 + (((v10 | v7) & 0xF8 ^ 0x1F8) & ((v10 | v7) + 16)));
    swift_retain();
    return __dst;
  }
  v14 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  v24 = ~v7;
  v26 = *(_QWORD *)(a3 + 24);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) == 0)
  {
    v15 = *v14;
    if ((unint64_t)*v14 >= 0xFFFFFFFF)
      LODWORD(v15) = -1;
    if ((_DWORD)v15 != -1)
      goto LABEL_14;
LABEL_16:
    *__dst = *__src;
    v16 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v16 = *v14;
    v17 = (char *)v14 + v7;
    v18 = ((unint64_t)v16 + v7 + 8) & v24;
    v25 = (unint64_t)(v17 + 8) & v24;
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v19(v18, v25, v5);
    goto LABEL_17;
  }
  if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v14 + v7 + 8) & ~v7))
    goto LABEL_16;
LABEL_14:
  memcpy(__dst, __src, v8);
LABEL_17:
  v20 = ((unint64_t)__dst + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)__src + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v21 + 8) < 0xFFFFFFFFuLL)
  {
    v22 = *(_OWORD *)v21;
    *(_BYTE *)(v20 + 16) = *(_BYTE *)(v21 + 16);
    *(_OWORD *)v20 = v22;
  }
  else
  {
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
    *(_BYTE *)(v20 + 16) = *(_BYTE *)(v21 + 16);
    swift_retain();
    swift_retain();
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((v10 + 17 + v20) & ~v10, (v10 + 17 + v21) & ~v10, v26);
  return __dst;
}

_QWORD *initializeWithTake for TabView(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  size_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ~v8;
  v10 = (v8 + 16) & ~v8;
  v11 = *(_QWORD *)(v7 + 64);
  v12 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF)
      LODWORD(v13) = -1;
    v14 = v10 + v11;
    if ((_DWORD)v13 != -1)
      goto LABEL_5;
LABEL_7:
    *__dst = *__src;
    v15 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v15 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v6);
    goto LABEL_8;
  }
  v14 = v10 + v11;
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v9))
    goto LABEL_7;
LABEL_5:
  memcpy(__dst, __src, v14);
LABEL_8:
  v16 = ((unint64_t)__dst + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)__src + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_OWORD *)v17;
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  *(_OWORD *)v16 = v18;
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v19 + 32))((v16 + *(unsigned __int8 *)(v19 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), (v17 + *(unsigned __int8 *)(v19 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  return __dst;
}

_QWORD *assignWithTake for TabView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t (*v15)(unint64_t, uint64_t, uint64_t);
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  uint64_t v24;

  v3 = a3;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v7 + 64);
  v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v24 = ~v9;
  if ((v8 & 0x80000000) == 0)
  {
    v12 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF)
      LODWORD(v13) = -1;
    v14 = v13 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
LABEL_8:
    if (v14)
      goto LABEL_9;
    *a1 = *a2;
    *v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v11 + v9 + 8) & v24, ((unint64_t)v12 + v9 + 8) & v24, v6);
    goto LABEL_12;
  }
  v22 = ((v9 + 16) & ~v9) + *(_QWORD *)(v7 + 64);
  v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
  v21 = v15(((unint64_t)v11 + v9 + 8) & ~v9, v8, v6);
  v12 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  v3 = a3;
  v14 = v15(((unint64_t)v12 + v9 + 8) & ~v9, v8, v6);
  v10 = v22;
  if (v21)
    goto LABEL_8;
LABEL_5:
  if (v14)
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v11 + v9 + 8) & v24, v6);
LABEL_9:
    memcpy(a1, a2, v10);
    goto LABEL_12;
  }
  *a1 = *a2;
  swift_release();
  *v11 = *v12;
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 40))(((unint64_t)v11 + v9 + 8) & v24, ((unint64_t)v12 + v9 + 8) & v24, v6);
LABEL_12:
  v16 = ((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v16 + 8) < 0xFFFFFFFFuLL)
  {
LABEL_16:
    v18 = *(_OWORD *)v17;
    *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
    *(_OWORD *)v16 = v18;
    goto LABEL_17;
  }
  if (*(_QWORD *)(v17 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    goto LABEL_16;
  }
  *(_QWORD *)v16 = *(_QWORD *)v17;
  swift_release();
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  swift_release();
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
LABEL_17:
  v19 = *(_QWORD *)(*(_QWORD *)(v3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v19 + 40))((v16 + *(unsigned __int8 *)(v19 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), (v17 + *(unsigned __int8 *)(v19 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for TabView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char v18;
  int v19;
  unsigned int v21;
  int v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  v8 = v7 - 1;
  v9 = *(_QWORD *)(v4 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v8 <= v10)
    v11 = *(_DWORD *)(v9 + 84);
  else
    v11 = v8;
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = ((v12 + 16) & ~v12) + *(_QWORD *)(v5 + 64);
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = v14 + 17;
  v16 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_27;
  v17 = ((v15 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v14) + *(_QWORD *)(v9 + 64);
  v18 = 8 * v17;
  if (v17 <= 3)
  {
    v21 = ((v16 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      v19 = *(_DWORD *)(a1 + v17);
      if (!v19)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 > 0xFF)
    {
      v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 < 2)
    {
LABEL_27:
      if (v8 < v10)
        return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v9 + 48))((v15 + ((a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v14, *(unsigned int *)(v9 + 84), v4);
      v24 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0x80000000) != 0)
      {
        v26 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v24 + v12 + 8) & ~v12);
      }
      else
      {
        v25 = *v24;
        if (v25 >= 0xFFFFFFFF)
          LODWORD(v25) = -1;
        v26 = v25 + 1;
      }
      if (v26 >= 2)
        return v26 - 1;
      else
        return 0;
    }
  }
  v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17))
    goto LABEL_27;
LABEL_18:
  v22 = (v19 - 1) << v18;
  if (v17 > 3)
    v22 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v23 = ((v15 + ((v13 + 7) & 0xFFFFFFF8)) & ~(_DWORD)v14) + *(_DWORD *)(v9 + 64);
    else
      v23 = 4;
    __asm { BR              X12 }
  }
  return v11 + v22 + 1;
}

void storeEnumTagSinglePayload for TabView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if ((v6 - 1) <= *(_DWORD *)(v7 + 84))
    v8 = *(_DWORD *)(v7 + 84);
  else
    v8 = v6 - 1;
  v9 = ((*(unsigned __int8 *)(v7 + 80)
       + 17
       + ((((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + *(_QWORD *)(v5 + 64)
         + 7) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
     + *(_QWORD *)(v7 + 64);
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

void sub_187148954(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = a1[3];
  type metadata accessor for ResolvedTabView(255, *a1, v5, a4);
  v8 = type metadata accessor for TabViewStyleConfiguration.Content(255, v4, v5, v7);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<ContainerStyleContext>, MEMORY[0x1E0CE5078], MEMORY[0x1E0CE5068], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v9 = type metadata accessor for ModifiedContent();
  v10 = type metadata accessor for ModifiedContent();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabViewStyleConfiguration<A>.Content, v8);
  v13[0] = v6;
  v13[1] = lazy protocol witness table accessor for type StyleContextWriter<ContainerStyleContext> and conformance StyleContextWriter<A>();
  v11 = MEMORY[0x1E0CE2E70];
  v12[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v13);
  v12[1] = &protocol witness table for AccessibilityContainerModifier;
  MEMORY[0x18D75FFDC](v11, v10, v12);
  type metadata accessor for StaticSourceWriter();
}

void sub_187148A5C()
{
  type metadata accessor for ModifiedContent();
  type metadata accessor for ViewInputFlagModifier<IsInLazyContainer>(255);
  type metadata accessor for ModifiedContent();
  type metadata accessor for TabView.TransformEnvironment();
}

uint64_t sub_187148AA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[2];
  _QWORD v7[22];

  v3 = type metadata accessor for ModifiedContent();
  v7[0] = &protocol witness table for ResolvedTabView<A>;
  v7[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v6[0] = MEMORY[0x18D75FFDC](v0, v1, v7);
  v6[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v5[0] = MEMORY[0x18D75FFDC](v0, v2, v6);
  v5[1] = &protocol witness table for TabView<A, B>.TransformEnvironment;
  return MEMORY[0x18D75FFDC](v0, v3, v5);
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in TabView<A, B>.TransformEnvironment()
{
  return &protocol witness table for TabView<A, B>.TransformEnvironment;
}

_UNKNOWN **base witness table accessor for ViewModifier in TabView<A, B>.TransformEnvironment()
{
  return &protocol witness table for TabView<A, B>.TransformEnvironment;
}

uint64_t specialized static TabView.TransformEnvironment.makeEnvironment(modifier:environment:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t inited;

  v2 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.SuppliedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.SuppliedBridgesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.SuppliedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.SuppliedBridgesKey);
  swift_retain_n();
  if (v2)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.SuppliedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.SuppliedBridgesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.SuppliedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.SuppliedBridgesKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for _ContiguousArrayStorage<ToolbarPlacement.Role>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  *(_QWORD *)(inited + 40) = 0;
  *(_QWORD *)(inited + 48) = 0;
  *(_QWORD *)(inited + 32) = 0;
  *(_OWORD *)(inited + 56) = xmmword_187C0CDF0;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey);
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(a1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t SymbolEffect.speed(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  int v8;
  char v9;
  unsigned __int16 v10;
  float v11;

  v3 = *(_QWORD *)v2;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_DWORD *)(v2 + 32);
  v7 = *(_BYTE *)(v2 + 36);
  v8 = *(_DWORD *)(v2 + 40);
  v9 = *(_BYTE *)(v2 + 44);
  *(_QWORD *)a1 = *(_QWORD *)v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_WORD *)(v2 + 24);
  *(_WORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 36) = v7;
  v11 = a2;
  *(_DWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 44) = v9;
  *(float *)(a1 + 28) = v11;
  return outlined copy of _SymbolEffect.Storage(v3, v4, v5, v10);
}

uint64_t outlined copy of _SymbolEffect.Storage(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if ((unsigned __int16)(a4 >> 12) <= 5u)
    return outlined copy of _SymbolEffect.Trigger?(result);
  return result;
}

uint64_t outlined copy of _SymbolEffect.Trigger?(uint64_t result)
{
  if ((~result & 0xF000000000000006) != 0)
    return outlined copy of _SymbolEffect.Trigger(result);
  return result;
}

uint64_t outlined copy of _SymbolEffect.Trigger(uint64_t result)
{
  if ((result & 0x8000000000000000) == 0)
    return swift_retain();
  return result;
}

uint64_t SymbolEffect.repeatCount(_:)@<X0>(double a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  char v9;
  float v10;
  float v11;
  unsigned __int16 v12;

  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_DWORD *)(v3 + 28);
  v8 = *(_DWORD *)(v3 + 40);
  v9 = *(_BYTE *)(v3 + 44);
  v10 = a1;
  v11 = v10;
  if ((a2 & 1) != 0)
    v11 = 0.0;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)(a3 + 16) = v6;
  v12 = *(_WORD *)(v3 + 24);
  *(_WORD *)(a3 + 24) = v12;
  *(_DWORD *)(a3 + 28) = v7;
  *(float *)(a3 + 32) = v11;
  *(_BYTE *)(a3 + 36) = a2 & 1;
  *(_DWORD *)(a3 + 40) = v8;
  *(_BYTE *)(a3 + 44) = v9;
  return outlined copy of _SymbolEffect.Storage(v4, v5, v6, v12);
}

uint64_t SymbolEffect.repeatDelay(_:)@<X0>(double a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  char v9;
  float v10;
  float v11;
  unsigned __int16 v12;

  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_DWORD *)(v3 + 28);
  v8 = *(_DWORD *)(v3 + 32);
  v9 = *(_BYTE *)(v3 + 36);
  v10 = a1;
  v11 = v10;
  if ((a2 & 1) != 0)
    v11 = 0.0;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)(a3 + 16) = v6;
  v12 = *(_WORD *)(v3 + 24);
  *(_WORD *)(a3 + 24) = v12;
  *(_DWORD *)(a3 + 28) = v7;
  *(_DWORD *)(a3 + 32) = v8;
  *(_BYTE *)(a3 + 36) = v9;
  *(float *)(a3 + 40) = v11;
  *(_BYTE *)(a3 + 44) = a2 & 1;
  return outlined copy of _SymbolEffect.Storage(v4, v5, v6, v12);
}

void static SymbolEffect.PulseConfiguration.fast.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0xF000000000000006;
  *(_BYTE *)(a1 + 8) = 1;
}

void static SymbolEffect.PulseConfiguration.byLayer.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0xF000000000000006;
  *(_BYTE *)(a1 + 8) = 1;
}

void static SymbolEffect.PulseConfiguration.wholeSymbol.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0xF000000000000006;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t SymbolEffect.PulseConfiguration.byLayer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)a1 = *v1;
  *(_BYTE *)(a1 + 8) = 1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

uint64_t SymbolEffect.PulseConfiguration.wholeSymbol.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)a1 = *v1;
  *(_BYTE *)(a1 + 8) = 0;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

BOOL static SymbolEffect.PulseConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)a1;
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(_QWORD *)a2;
  v5 = *(unsigned __int8 *)(a2 + 8);
  if ((~*(_QWORD *)a1 & 0xF000000000000006) != 0)
  {
    v9 = *(_QWORD *)a1;
    if ((~v4 & 0xF000000000000006) != 0)
    {
      v8 = v4;
      outlined copy of _SymbolEffect.Trigger(v2);
      outlined copy of _SymbolEffect.Trigger(v2);
      v7 = MEMORY[0x18D757804](&v9, &v8);
      outlined consume of _SymbolEffect.Trigger(v9);
      outlined consume of _SymbolEffect.Trigger?(v2);
      return (v7 & 1) != 0 && ((v3 ^ v5) & 1) == 0;
    }
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined consume of _SymbolEffect.Trigger(v2);
LABEL_7:
    outlined copy of _SymbolEffect.Trigger?(v4);
    outlined consume of _SymbolEffect.Trigger?(v2);
    outlined consume of _SymbolEffect.Trigger?(v4);
    return 0;
  }
  if ((~v4 & 0xF000000000000006) != 0)
    goto LABEL_7;
  return v3 == v5;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.PulseConfiguration(uint64_t *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  v2 = *((_BYTE *)a1 + 8);
  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v8 = *a1;
  v9 = v2;
  v6 = v3;
  v7 = v4;
  return specialized static _SymbolEffect.PulseConfiguration.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v6) & 1;
}

uint64_t static SymbolEffect.pulse(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)a1;
  v3 = *(unsigned __int8 *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 28) = 1065353216;
  *(_BYTE *)(a2 + 36) = 1;
  *(_DWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 44) = 1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

double static SymbolEffect.pulse.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = -3.10503618e231;
  *(_OWORD *)a1 = xmmword_187C0CE00;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 28) = 1065353216;
  *(_BYTE *)(a1 + 36) = 1;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 1;
  return result;
}

uint64_t SymbolEffect.BreatheConfiguration.onlyScale.getter()
{
  _DWORD *v0;
  uint64_t (*v1)(uint64_t *, _QWORD);
  uint64_t v3;

  _SymbolEffect.BounceConfiguration.init()();
  v1 = (uint64_t (*)(uint64_t *, _QWORD))_SymbolEffect.BreatheConfiguration.flags.modify();
  if ((*v0 & 1) == 0)
    *v0 |= 1u;
  return v1(&v3, 0);
}

uint64_t static SymbolEffect.BreatheConfiguration.wholeSymbol.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = _SymbolEffect.BounceConfiguration.init()();
  *(_BYTE *)(a1 + 12) = 0;
  return result;
}

uint64_t SymbolEffect.BreatheConfiguration.byLayer.getter@<X0>(uint64_t a1@<X8>)
{
  return SymbolEffect.BreatheConfiguration.byLayer.getter(1, a1);
}

uint64_t SymbolEffect.BreatheConfiguration.wholeSymbol.getter@<X0>(uint64_t a1@<X8>)
{
  return SymbolEffect.BreatheConfiguration.byLayer.getter(0, a1);
}

uint64_t static SymbolEffect.BreatheConfiguration.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return static SymbolEffect.BreatheConfiguration.== infix(_:_:)(a1, a2, MEMORY[0x1E0CE24F0]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.BreatheConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.BreatheConfiguration(a1, a2, a3, a4, MEMORY[0x1E0CE24F0]);
}

uint64_t static SymbolEffect.breathe(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)a1;
  v3 = *(unsigned int *)(a1 + 8);
  v4 = 0x100000000;
  if (!*(_BYTE *)(a1 + 12))
    v4 = 0;
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v4 | v3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 24) = 4096;
  *(_QWORD *)(a2 + 28) = 1065353216;
  *(_BYTE *)(a2 + 36) = 1;
  *(_DWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 44) = 1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

uint64_t static SymbolEffect.breathe.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char v6;

  result = _SymbolEffect.BounceConfiguration.init()();
  v3 = 0x100000000;
  if (!v6)
    v3 = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3 | v5;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 4096;
  *(_QWORD *)(a1 + 28) = 1065353216;
  *(_BYTE *)(a1 + 36) = 1;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 1;
  return result;
}

uint64_t static SymbolEffect.BounceConfiguration.up.getter()
{
  _SymbolEffect.BounceConfiguration.init()();
  return _SymbolEffect.BounceConfiguration.flags.setter();
}

uint64_t static SymbolEffect.BounceConfiguration.down.getter()
{
  _SymbolEffect.BounceConfiguration.init()();
  return _SymbolEffect.BounceConfiguration.flags.setter();
}

uint64_t static SymbolEffect.BounceConfiguration.wholeSymbol.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = _SymbolEffect.BounceConfiguration.init()();
  *(_BYTE *)(a1 + 12) = 0;
  return result;
}

uint64_t SymbolEffect.BounceConfiguration.byLayer.getter@<X0>(uint64_t a1@<X8>)
{
  return SymbolEffect.BreatheConfiguration.byLayer.getter(1, a1);
}

uint64_t SymbolEffect.BounceConfiguration.wholeSymbol.getter@<X0>(uint64_t a1@<X8>)
{
  return SymbolEffect.BreatheConfiguration.byLayer.getter(0, a1);
}

uint64_t SymbolEffect.BreatheConfiguration.byLayer.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)v2;
  v4 = *(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = *(_QWORD *)v2;
  *(_DWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 12) = a1;
  return outlined copy of _SymbolEffect.Trigger?(v3);
}

uint64_t static SymbolEffect.BounceConfiguration.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return static SymbolEffect.BreatheConfiguration.== infix(_:_:)(a1, a2, MEMORY[0x1E0CE2450]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.BounceConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.BreatheConfiguration(a1, a2, a3, a4, MEMORY[0x1E0CE2450]);
}

uint64_t static SymbolEffect.bounce<A>(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static SymbolEffect.bounce<A>(_:value:)(a1, a2, 0x2000, a3);
}

uint64_t static SymbolEffect.bounce(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)a1;
  v3 = *(unsigned int *)(a1 + 8);
  v4 = 0x100000000;
  if (!*(_BYTE *)(a1 + 12))
    v4 = 0;
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v4 | v3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 24) = 0x2000;
  *(_QWORD *)(a2 + 28) = 1065353216;
  *(_BYTE *)(a2 + 36) = 1;
  *(_DWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 44) = 1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

uint64_t static SymbolEffect.WiggleConfiguration.linear(angle:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t result;

  result = _SymbolEffect.WiggleConfiguration.init()();
  *(double *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

uint64_t static SymbolEffect.WiggleConfiguration.rotational.getter()
{
  _SymbolEffect.WiggleConfiguration.init()();
  return _SymbolEffect.WiggleConfiguration.flags.setter();
}

uint64_t SymbolEffect.WiggleConfiguration.continuous(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  char v5;
  int v6;
  char v7;
  char v8;
  __int128 v9;
  unsigned int *v10;
  uint64_t (*v11)(uint64_t *, _QWORD);
  int v12;
  uint64_t v14;

  v5 = *((_BYTE *)v2 + 16);
  v6 = *((_DWORD *)v2 + 5);
  v7 = *((_BYTE *)v2 + 24);
  v8 = *((_BYTE *)v2 + 25);
  v9 = *v2;
  *(_OWORD *)a2 = *v2;
  *(_BYTE *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v6;
  *(_BYTE *)(a2 + 24) = v7;
  *(_BYTE *)(a2 + 25) = v8;
  outlined copy of _SymbolEffect.Trigger?(v9);
  v11 = (uint64_t (*)(uint64_t *, _QWORD))_SymbolEffect.WiggleConfiguration.flags.modify();
  if ((a1 & 1) != 0)
    v12 = 256;
  else
    v12 = 0;
  *v10 = *v10 & 0xFFFFFEFF | v12;
  return v11(&v14, 0);
}

uint64_t SymbolEffect.WiggleConfiguration.byLayer(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  char v3;
  int v4;
  char v5;
  __int128 v6;

  v3 = *((_BYTE *)v2 + 16);
  v4 = *((_DWORD *)v2 + 5);
  v5 = *((_BYTE *)v2 + 25);
  v6 = *v2;
  *(_OWORD *)a2 = *v2;
  *(_BYTE *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 20) = v4;
  *(_BYTE *)(a2 + 25) = v5;
  *(_BYTE *)(a2 + 24) = a1;
  return outlined copy of _SymbolEffect.Trigger?(v6);
}

uint64_t static SymbolEffect.WiggleConfiguration.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  char v2;
  int v3;
  char v4;
  char v5;
  char v6;
  int v7;
  char v8;
  char v9;
  __int128 v11;
  char v12;
  int v13;
  char v14;
  char v15;
  __int128 v16;
  char v17;
  int v18;
  char v19;
  char v20;

  v2 = *((_BYTE *)a1 + 16);
  v3 = *((_DWORD *)a1 + 5);
  v4 = *((_BYTE *)a1 + 24);
  v5 = *((_BYTE *)a1 + 25);
  v6 = *((_BYTE *)a2 + 16);
  v7 = *((_DWORD *)a2 + 5);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *((_BYTE *)a2 + 25);
  v16 = *a1;
  v17 = v2;
  v18 = v3;
  v19 = v4;
  v20 = v5;
  v11 = *a2;
  v12 = v6;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  return MEMORY[0x18D757738](&v16, &v11) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.WiggleConfiguration(__int128 *a1, __int128 *a2)
{
  char v2;
  int v3;
  char v4;
  char v5;
  char v6;
  int v7;
  char v8;
  char v9;
  __int128 v11;
  char v12;
  int v13;
  char v14;
  char v15;
  __int128 v16;
  char v17;
  int v18;
  char v19;
  char v20;

  v2 = *((_BYTE *)a1 + 16);
  v3 = *((_DWORD *)a1 + 5);
  v4 = *((_BYTE *)a1 + 24);
  v5 = *((_BYTE *)a1 + 25);
  v6 = *((_BYTE *)a2 + 16);
  v7 = *((_DWORD *)a2 + 5);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *((_BYTE *)a2 + 25);
  v16 = *a1;
  v17 = v2;
  v18 = v3;
  v19 = v4;
  v20 = v5;
  v11 = *a2;
  v12 = v6;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  return MEMORY[0x18D757738](&v16, &v11) & 1;
}

uint64_t static SymbolEffect.wiggle(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v2;
  unint64_t v3;
  __int16 v4;
  __int128 v5;

  v2 = *((unsigned __int8 *)a1 + 24);
  v3 = *((unsigned __int8 *)a1 + 16) | ((unint64_t)*((unsigned int *)a1 + 5) << 32);
  if (*((_BYTE *)a1 + 25))
    v4 = 256;
  else
    v4 = 0;
  v5 = *a1;
  *(_OWORD *)a2 = *a1;
  *(_QWORD *)(a2 + 16) = v3;
  *(_WORD *)(a2 + 24) = v4 | v2 | 0x3000;
  *(_QWORD *)(a2 + 28) = 1065353216;
  *(_BYTE *)(a2 + 36) = 1;
  *(_DWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 44) = 1;
  return outlined copy of _SymbolEffect.Trigger?(v5);
}

uint64_t static SymbolEffect.wiggle<A>(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  __int16 v14;
  _QWORD v15[2];

  v4 = MEMORY[0x1E0C80A78](a1, a2);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(unsigned __int8 *)(v6 + 16);
  v9 = *(unsigned __int8 *)(v6 + 24);
  v10 = *(unsigned __int8 *)(v6 + 25);
  v11 = *(unsigned int *)(v6 + 20);
  (*(void (**)(char *, double))(v12 + 16))((char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  result = AnyEquatable.init<A>(_:)();
  if (v10)
    v14 = 256;
  else
    v14 = 0;
  *(_QWORD *)a3 = v15[1];
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = v8 | (v11 << 32);
  *(_WORD *)(a3 + 24) = v14 | v9 | 0x3000;
  *(_QWORD *)(a3 + 28) = 1065353216;
  *(_BYTE *)(a3 + 36) = 1;
  *(_DWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 44) = 1;
  return result;
}

uint64_t static SymbolEffect.RotateConfiguration.clockwise.getter()
{
  _SymbolEffect.BounceConfiguration.init()();
  return _SymbolEffect.BounceConfiguration.flags.setter();
}

uint64_t static SymbolEffect.RotateConfiguration.counterClockwise.getter()
{
  _SymbolEffect.BounceConfiguration.init()();
  return _SymbolEffect.BounceConfiguration.flags.setter();
}

uint64_t SymbolEffect.RotateConfiguration.continuous(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  char v7;
  unsigned int *v8;
  uint64_t (*v9)(uint64_t *, _QWORD);
  int v10;
  uint64_t v12;

  v5 = *(_QWORD *)v2;
  v6 = *(_DWORD *)(v2 + 8);
  v7 = *(_BYTE *)(v2 + 12);
  *(_QWORD *)a2 = *(_QWORD *)v2;
  *(_DWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 12) = v7;
  outlined copy of _SymbolEffect.Trigger?(v5);
  v9 = (uint64_t (*)(uint64_t *, _QWORD))_SymbolEffect.RotateConfiguration.flags.modify();
  if ((a1 & 1) != 0)
    v10 = 16;
  else
    v10 = 0;
  *v8 = *v8 & 0xFFFFFFEF | v10;
  return v9(&v12, 0);
}

uint64_t SymbolEffect.RotateConfiguration.byLayer(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)v2;
  v4 = *(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = *(_QWORD *)v2;
  *(_DWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 12) = a1;
  return outlined copy of _SymbolEffect.Trigger?(v3);
}

uint64_t static SymbolEffect.RotateConfiguration.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return static SymbolEffect.BreatheConfiguration.== infix(_:_:)(a1, a2, MEMORY[0x1E0CE24A0]);
}

uint64_t static SymbolEffect.BreatheConfiguration.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(uint64_t *, uint64_t *))
{
  int v3;
  char v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  char v14;

  v3 = *((_DWORD *)a1 + 2);
  v4 = *((_BYTE *)a1 + 12);
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = *((_BYTE *)a2 + 12);
  v12 = *a1;
  v13 = v3;
  v14 = v4;
  v9 = v5;
  v10 = v6;
  v11 = v7;
  return a3(&v12, &v9) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.RotateConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.BreatheConfiguration(a1, a2, a3, a4, MEMORY[0x1E0CE24A0]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.BreatheConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *, uint64_t *))
{
  int v5;
  char v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  int v15;
  char v16;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *((_BYTE *)a1 + 12);
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = *((_BYTE *)a2 + 12);
  v14 = *a1;
  v15 = v5;
  v16 = v6;
  v11 = v7;
  v12 = v8;
  v13 = v9;
  return a5(&v14, &v11) & 1;
}

uint64_t static SymbolEffect.rotate(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)a1;
  v3 = *(unsigned int *)(a1 + 8);
  v4 = 0x100000000;
  if (!*(_BYTE *)(a1 + 12))
    v4 = 0;
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v4 | v3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 24) = 0x4000;
  *(_QWORD *)(a2 + 28) = 1065353216;
  *(_BYTE *)(a2 + 36) = 1;
  *(_DWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 44) = 1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

uint64_t static SymbolEffect.rotate<A>(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static SymbolEffect.bounce<A>(_:value:)(a1, a2, 0x4000, a3);
}

uint64_t static SymbolEffect.bounce<A>(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W4>, uint64_t a4@<X8>)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD v14[2];

  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v9 = *(unsigned int *)(v8 + 8);
  v10 = *(unsigned __int8 *)(v8 + 12);
  (*(void (**)(char *, double))(v11 + 16))((char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  result = AnyEquatable.init<A>(_:)();
  v13 = 0x100000000;
  if (!v10)
    v13 = 0;
  *(_QWORD *)a4 = v14[1];
  *(_QWORD *)(a4 + 8) = v13 | v9;
  *(_QWORD *)(a4 + 16) = 0;
  *(_WORD *)(a4 + 24) = a3;
  *(_QWORD *)(a4 + 28) = 1065353216;
  *(_BYTE *)(a4 + 36) = 1;
  *(_DWORD *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 44) = 1;
  return result;
}

uint64_t static SymbolEffect.VariableColorConfiguration.sequential.getter()
{
  _SymbolEffect.VariableColorConfiguration.init()();
  return _SymbolEffect.VariableColorConfiguration.flags.setter();
}

uint64_t SymbolEffect.VariableColorConfiguration.reversing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  uint64_t (*v6)(uint64_t *, _QWORD);
  uint64_t v8;

  v3 = *(_QWORD *)v1;
  v4 = *(_DWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v4;
  outlined copy of _SymbolEffect.Trigger?(v3);
  v6 = (uint64_t (*)(uint64_t *, _QWORD))_SymbolEffect.VariableColorConfiguration.flags.modify();
  if ((*v5 & 8) == 0)
    *v5 |= 8u;
  return v6(&v8, 0);
}

uint64_t SymbolEffect.VariableColorConfiguration.nonReversing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  uint64_t (*v6)(uint64_t *, _QWORD);
  uint64_t v8;

  v3 = *(_QWORD *)v1;
  v4 = *(_DWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v4;
  outlined copy of _SymbolEffect.Trigger?(v3);
  v6 = (uint64_t (*)(uint64_t *, _QWORD))_SymbolEffect.VariableColorConfiguration.flags.modify();
  if ((*v5 & 8) != 0)
    *v5 &= ~8u;
  return v6(&v8, 0);
}

uint64_t SymbolEffect.VariableColorConfiguration.hideOn.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  uint64_t (*v6)(uint64_t *, _QWORD);
  uint64_t v8;

  v3 = *(_QWORD *)v1;
  v4 = *(_DWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v4;
  outlined copy of _SymbolEffect.Trigger?(v3);
  v6 = (uint64_t (*)(uint64_t *, _QWORD))_SymbolEffect.VariableColorConfiguration.flags.modify();
  if ((*v5 & 2) == 0)
    *v5 |= 2u;
  return v6(&v8, 0);
}

uint64_t SymbolEffect.VariableColorConfiguration.hideOff.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  uint64_t (*v6)(uint64_t *, _QWORD);
  uint64_t v8;

  v3 = *(_QWORD *)v1;
  v4 = *(_DWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v4;
  outlined copy of _SymbolEffect.Trigger?(v3);
  v6 = (uint64_t (*)(uint64_t *, _QWORD))_SymbolEffect.VariableColorConfiguration.flags.modify();
  if ((*v5 & 2) != 0)
    *v5 &= ~2u;
  return v6(&v8, 0);
}

uint64_t static SymbolEffect.VariableColorConfiguration.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  v2 = *((_DWORD *)a1 + 2);
  v3 = *a2;
  v4 = *((_DWORD *)a2 + 2);
  v8 = *a1;
  v9 = v2;
  v6 = v3;
  v7 = v4;
  return MEMORY[0x18D7577B0](&v8, &v6) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.VariableColorConfiguration(uint64_t *a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  v2 = *((_DWORD *)a1 + 2);
  v3 = *a2;
  v4 = *((_DWORD *)a2 + 2);
  v8 = *a1;
  v9 = v2;
  v6 = v3;
  v7 = v4;
  return MEMORY[0x18D7577B0](&v8, &v6) & 1;
}

uint64_t static SymbolEffect.variableColor(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)a1;
  v3 = *(unsigned int *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 24) = 20480;
  *(_QWORD *)(a2 + 28) = 1065353216;
  *(_BYTE *)(a2 + 36) = 1;
  *(_DWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 44) = 1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

uint64_t static SymbolEffect.ScaleConfiguration.none.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  int v3;
  char v4;

  result = _SymbolEffect.ScaleConfiguration.init()();
  *(_DWORD *)a1 = v3;
  *(_BYTE *)(a1 + 4) = v4;
  return result;
}

uint64_t static SymbolEffect.ScaleConfiguration.up.getter@<X0>(uint64_t a1@<X8>)
{
  return static SymbolEffect.ScaleConfiguration.up.getter(a1);
}

{
  uint64_t result;
  int v3;
  char v4;

  _SymbolEffect.ScaleConfiguration.init()();
  result = _SymbolEffect.ScaleConfiguration.level.setter();
  *(_DWORD *)a1 = v3;
  *(_BYTE *)(a1 + 4) = v4;
  return result;
}

uint64_t static SymbolEffect.ScaleConfiguration.down.getter@<X0>(uint64_t a1@<X8>)
{
  return static SymbolEffect.ScaleConfiguration.up.getter(a1);
}

void SymbolEffect.ScaleConfiguration.byLayer.getter(uint64_t a1@<X8>)
{
  _DWORD *v1;

  *(_DWORD *)a1 = *v1;
  *(_BYTE *)(a1 + 4) = 1;
}

void SymbolEffect.ScaleConfiguration.wholeSymbol.getter(uint64_t a1@<X8>)
{
  _DWORD *v1;

  *(_DWORD *)a1 = *v1;
  *(_BYTE *)(a1 + 4) = 0;
}

uint64_t static SymbolEffect.ScaleConfiguration.== infix(_:_:)()
{
  return static _SymbolEffect.ScaleConfiguration.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.ScaleConfiguration()
{
  return static _SymbolEffect.ScaleConfiguration.== infix(_:_:)() & 1;
}

unsigned int *static SymbolEffect.scale(_:)@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  v3 = 0x100000000;
  if (!*((_BYTE *)result + 4))
    v3 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = v3 | v2;
  *(_WORD *)(a2 + 24) = 24576;
  *(_QWORD *)(a2 + 28) = 1065353216;
  *(_BYTE *)(a2 + 36) = 1;
  *(_DWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 44) = 1;
  return result;
}

uint64_t static SymbolEffect.HiddenConfiguration.down.getter@<X0>(uint64_t a1@<X8>)
{
  return static SymbolEffect.HiddenConfiguration.down.getter(a1);
}

{
  uint64_t result;
  int v3;
  char v4;
  char v5;

  _SymbolEffect.HiddenConfiguration.init()();
  result = _SymbolEffect.HiddenConfiguration.flags.setter();
  *(_DWORD *)a1 = v3;
  *(_BYTE *)(a1 + 4) = v4;
  *(_BYTE *)(a1 + 5) = v5;
  return result;
}

uint64_t static SymbolEffect.HiddenConfiguration.up.getter@<X0>(uint64_t a1@<X8>)
{
  return static SymbolEffect.HiddenConfiguration.down.getter(a1);
}

uint64_t static SymbolEffect.HiddenConfiguration.default.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  int v3;
  char v4;
  char v5;

  result = _SymbolEffect.HiddenConfiguration.init()();
  *(_DWORD *)a1 = v3;
  *(_BYTE *)(a1 + 4) = v4;
  *(_BYTE *)(a1 + 5) = v5;
  return result;
}

uint64_t static SymbolEffect.HiddenConfiguration.wholeSymbol.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  int v3;
  char v4;

  result = _SymbolEffect.HiddenConfiguration.init()();
  *(_DWORD *)a1 = v3;
  *(_BYTE *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 5) = v4;
  return result;
}

void SymbolEffect.HiddenConfiguration.byLayer.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 5);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(_BYTE *)(a1 + 4) = 1;
  *(_BYTE *)(a1 + 5) = v2;
}

void SymbolEffect.HiddenConfiguration.wholeSymbol.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 5);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(_BYTE *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 5) = v2;
}

uint64_t static SymbolEffect.HiddenConfiguration.== infix(_:_:)()
{
  return static _SymbolEffect.HiddenConfiguration.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.HiddenConfiguration()
{
  return static _SymbolEffect.HiddenConfiguration.== infix(_:_:)() & 1;
}

uint64_t static SymbolEffect.hidden(_:_:)@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = 0x100000000;
  if (!*((_BYTE *)a2 + 4))
    v4 = 0;
  v5 = 0x10000000000;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if ((result & 1) == 0)
    v5 = 0;
  *(_QWORD *)a3 = v5 | v3 | v4;
  *(_WORD *)(a3 + 24) = 28672;
  *(_QWORD *)(a3 + 28) = 1065353216;
  *(_BYTE *)(a3 + 36) = 1;
  *(_DWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 44) = 1;
  return result;
}

float static SymbolEffect.ReplaceConfiguration.up.getter@<S0>(uint64_t a1@<X8>)
{
  return static SymbolEffect.ReplaceConfiguration.up.getter(a1);
}

{
  float result;
  int v3;
  char v4;
  float v5;

  _SymbolEffect.ReplaceConfiguration.init()();
  _SymbolEffect.ReplaceConfiguration.flags.setter();
  result = v5;
  *(_DWORD *)a1 = v3;
  *(_BYTE *)(a1 + 4) = v4;
  *(float *)(a1 + 8) = v5;
  return result;
}

float static SymbolEffect.ReplaceConfiguration.down.getter@<S0>(uint64_t a1@<X8>)
{
  return static SymbolEffect.ReplaceConfiguration.up.getter(a1);
}

float static SymbolEffect.ReplaceConfiguration.offUp.getter@<S0>(uint64_t a1@<X8>)
{
  return static SymbolEffect.ReplaceConfiguration.up.getter(a1);
}

float static SymbolEffect.ReplaceConfiguration.default.getter@<S0>(uint64_t a1@<X8>)
{
  float result;
  int v3;
  char v4;
  float v5;

  _SymbolEffect.ReplaceConfiguration.init()();
  result = v5;
  *(_DWORD *)a1 = v3;
  *(_BYTE *)(a1 + 4) = v4;
  *(float *)(a1 + 8) = v5;
  return result;
}

float static SymbolEffect.ReplaceConfiguration.wholeSymbol.getter@<S0>(uint64_t a1@<X8>)
{
  float result;
  int v3;
  float v4;

  _SymbolEffect.ReplaceConfiguration.init()();
  result = v4;
  *(_DWORD *)a1 = v3;
  *(_BYTE *)(a1 + 4) = 0;
  *(float *)(a1 + 8) = v4;
  return result;
}

float SymbolEffect.ReplaceConfiguration.byLayer.getter@<S0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  float result;

  result = *(float *)(v1 + 8);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(_BYTE *)(a1 + 4) = 1;
  *(float *)(a1 + 8) = result;
  return result;
}

float SymbolEffect.ReplaceConfiguration.wholeSymbol.getter@<S0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  float result;

  result = *(float *)(v1 + 8);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(_BYTE *)(a1 + 4) = 0;
  *(float *)(a1 + 8) = result;
  return result;
}

float SymbolEffect.ReplaceConfiguration.noSlashes.getter@<S0>(uint64_t a1@<X8>)
{
  int *v1;
  char v3;
  float v4;
  _DWORD *v5;
  void (*v6)(uint64_t *, _QWORD);
  char v7;
  float result;
  uint64_t v9;
  int v10;
  char v11;
  float v12;

  v3 = *((_BYTE *)v1 + 4);
  v4 = *((float *)v1 + 2);
  v10 = *v1;
  v11 = v3;
  v12 = v4;
  v6 = (void (*)(uint64_t *, _QWORD))_SymbolEffect.ReplaceConfiguration.flags.modify();
  if ((*v5 & 0x20) == 0)
    *v5 |= 0x20u;
  v6(&v9, 0);
  v7 = v11;
  result = v12;
  *(_DWORD *)a1 = v10;
  *(_BYTE *)(a1 + 4) = v7;
  *(float *)(a1 + 8) = result;
  return result;
}

float SymbolEffect.ReplaceConfiguration.noBadges.getter@<S0>(uint64_t a1@<X8>)
{
  int *v1;
  char v3;
  float v4;
  _DWORD *v5;
  void (*v6)(uint64_t *, _QWORD);
  char v7;
  float result;
  uint64_t v9;
  int v10;
  char v11;
  float v12;

  v3 = *((_BYTE *)v1 + 4);
  v4 = *((float *)v1 + 2);
  v10 = *v1;
  v11 = v3;
  v12 = v4;
  v6 = (void (*)(uint64_t *, _QWORD))_SymbolEffect.ReplaceConfiguration.flags.modify();
  if ((*v5 & 0x40) == 0)
    *v5 |= 0x40u;
  v6(&v9, 0);
  v7 = v11;
  result = v12;
  *(_DWORD *)a1 = v10;
  *(_BYTE *)(a1 + 4) = v7;
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t static SymbolEffect.ReplaceConfiguration.== infix(_:_:)()
{
  return static _SymbolEffect.ReplaceConfiguration.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffect.ReplaceConfiguration()
{
  return static _SymbolEffect.ReplaceConfiguration.== infix(_:_:)() & 1;
}

__n128 _SymbolEffectModifier.init(effect:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  char v4;
  __n128 result;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 40);
  v4 = *(_BYTE *)(a1 + 44);
  result = *(__n128 *)a1;
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 32) = v2;
  *(_BYTE *)(a2 + 44) = v4;
  *(_DWORD *)(a2 + 40) = v3;
  return result;
}

uint64_t _SymbolEffectModifier.effect.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 44);
  v8 = *(_DWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 44) = v7;
  *(_DWORD *)(a1 + 40) = v8;
  return outlined copy of SymbolEffect?(v2, v3, v4, v5);
}

__n128 _SymbolEffectModifier.effect.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;
  __n128 result;
  __n128 v6;
  __int128 v7;

  v6 = (__n128)a1[1];
  v7 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_DWORD *)a1 + 10);
  v4 = *((_BYTE *)a1 + 44);
  outlined consume of SymbolEffect?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
  result = v6;
  *(_OWORD *)v1 = v7;
  *(__n128 *)(v1 + 16) = v6;
  *(_QWORD *)(v1 + 32) = v2;
  *(_BYTE *)(v1 + 44) = v4;
  *(_DWORD *)(v1 + 40) = v3;
  return result;
}

uint64_t (*_SymbolEffectModifier.effect.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _SymbolEffectModifier._makeInputs(modifier:inputs:)()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_SymbolEffectModifier>, (uint64_t)&type metadata for _SymbolEffectModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _GraphInputs.environment.getter();
  AGMakeUniqueID();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _SymbolEffectModifier.EffectEnvironment and conformance _SymbolEffectModifier.EffectEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  return _GraphInputs.environment.setter();
}

uint64_t _SymbolEffectModifier.EffectEnvironment.value.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;

  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  v4 = Value[1];
  v8 = *Value;
  v5 = AGGraphGetValue();
  if ((~*(_QWORD *)(v5 + 16) & 0xFFFFFFFE) == 0 && (*(_QWORD *)(v5 + 24) & 0xFEFELL) == 2)
  {
    swift_retain();
    result = swift_retain();
  }
  else
  {
    swift_retain();
    swift_retain();
    result = EnvironmentValues.appendSymbolEffect(_:for:)();
    v3 = v8;
  }
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _SymbolEffectModifier.EffectEnvironment@<X0>(_QWORD *a1@<X8>)
{
  return _SymbolEffectModifier.EffectEnvironment.value.getter(a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _SymbolEffectModifier.EffectEnvironment()
{
  lazy protocol witness table accessor for type _SymbolEffectModifier.EffectEnvironment and conformance _SymbolEffectModifier.EffectEnvironment();
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _SymbolEffectModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _SymbolEffectModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _SymbolEffectModifier()
{
  specialized ViewModifier.bodyError()();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SymbolEffectModifier()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_SymbolEffectModifier>, (uint64_t)&type metadata for _SymbolEffectModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _GraphInputs.environment.getter();
  AGMakeUniqueID();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _SymbolEffectModifier.EffectEnvironment and conformance _SymbolEffectModifier.EffectEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  return _GraphInputs.environment.setter();
}

uint64_t _SymbolEffectsModifier.effects.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*_SymbolEffectsModifier.effects.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _SymbolEffectsModifier._makeInputs(modifier:inputs:)()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_SymbolEffectsModifier>, (uint64_t)&type metadata for _SymbolEffectsModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _GraphInputs.environment.getter();
  AGMakeUniqueID();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _SymbolEffectsModifier.EffectsEnvironment and conformance _SymbolEffectsModifier.EffectsEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  return _GraphInputs.environment.setter();
}

uint64_t _SymbolEffectsModifier.EffectsEnvironment.value.getter@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t *Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  int v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v5 = Value[1];
  v28 = *Value;
  v29 = v5;
  v6 = AGGraphGetValue();
  v7 = *(_QWORD *)v6;
  v22 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  if (v22)
  {
    v20 = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v8 = EnvironmentValues.symbolEffects.getter();
    v9 = 0;
    v10 = 0;
    v21 = v7;
    do
    {
      v11 = *(_QWORD *)(v7 + v9 + 32);
      v12 = *(_QWORD *)(v7 + v9 + 40);
      v13 = *(_QWORD *)(v7 + v9 + 48);
      v14 = *(_WORD *)(v7 + v9 + 56);
      v15 = *(_DWORD *)(v7 + v9 + 60);
      v26 = *(_BYTE *)(v7 + v9 + 68);
      v27 = *(_DWORD *)(v7 + v9 + 64);
      v24 = *(_BYTE *)(v7 + v9 + 76);
      v25 = *(_DWORD *)(v7 + v9 + 72);
      outlined copy of _SymbolEffect.Storage(v11, v12, v13, v14);
      outlined copy of _SymbolEffect.Storage(v11, v12, v13, v14);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
      v17 = *(_QWORD *)(v8 + 16);
      v16 = *(_QWORD *)(v8 + 24);
      if (v17 >= v16 >> 1)
        v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, (char *)v8);
      *(_QWORD *)(v8 + 16) = v17 + 1;
      v18 = v8 + (v17 << 6);
      *(_QWORD *)(v18 + 32) = a1;
      *(_QWORD *)(v18 + 40) = v10;
      *(_QWORD *)(v18 + 48) = v11;
      *(_QWORD *)(v18 + 56) = v12;
      *(_QWORD *)(v18 + 64) = v13;
      *(_WORD *)(v18 + 72) = v14;
      *(_DWORD *)(v18 + 76) = v15;
      *(_DWORD *)(v18 + 80) = v27;
      *(_BYTE *)(v18 + 84) = v26;
      *(_DWORD *)(v18 + 88) = v25;
      *(_BYTE *)(v18 + 92) = v24;
      outlined consume of _SymbolEffect.Storage(v11, v12, v13, v14);
      v9 += 48;
      ++v10;
      v7 = v21;
    }
    while (v22 != v10);
    swift_bridgeObjectRelease();
    result = EnvironmentValues.symbolEffects.setter();
    v4 = v28;
    v5 = v29;
    a2 = v20;
  }
  else
  {
    swift_retain();
    result = swift_retain();
  }
  *a2 = v4;
  a2[1] = v5;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _SymbolEffectsModifier.EffectsEnvironment@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return _SymbolEffectsModifier.EffectsEnvironment.value.getter(*(_QWORD *)(v1 + 8), a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _SymbolEffectsModifier.EffectsEnvironment()
{
  lazy protocol witness table accessor for type _SymbolEffectsModifier.EffectsEnvironment and conformance _SymbolEffectsModifier.EffectsEnvironment();
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _SymbolEffectsModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _SymbolEffectsModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _SymbolEffectsModifier()
{
  specialized ViewModifier.bodyError()();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SymbolEffectsModifier()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_SymbolEffectsModifier>, (uint64_t)&type metadata for _SymbolEffectsModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _GraphInputs.environment.getter();
  AGMakeUniqueID();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _SymbolEffectsModifier.EffectsEnvironment and conformance _SymbolEffectsModifier.EffectsEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  return _GraphInputs.environment.setter();
}

uint64_t _SymbolEffectsRemovedModifier.isEnabled.getter(char a1)
{
  return a1 & 1;
}

uint64_t _SymbolEffectsRemovedModifier.isEnabled.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*_SymbolEffectsRemovedModifier.isEnabled.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _SymbolEffectsRemovedModifier._makeInputs(modifier:inputs:)()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_SymbolEffectsRemovedModifier>, (uint64_t)&type metadata for _SymbolEffectsRemovedModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _GraphInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _SymbolEffectsRemovedModifier.EffectEnvironment and conformance _SymbolEffectsRemovedModifier.EffectEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  return _GraphInputs.environment.setter();
}

uint64_t protocol witness for Rule.value.getter in conformance _SymbolEffectsRemovedModifier.EffectEnvironment@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;

  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  v4 = Value[1];
  v7 = *Value;
  v5 = *(unsigned __int8 *)AGGraphGetValue();
  swift_retain();
  result = swift_retain();
  if (v5 == 1)
  {
    result = EnvironmentValues.symbolEffects.setter();
    v3 = v7;
  }
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _SymbolEffectsRemovedModifier.EffectEnvironment()
{
  lazy protocol witness table accessor for type _SymbolEffectsRemovedModifier.EffectEnvironment and conformance _SymbolEffectsRemovedModifier.EffectEnvironment();
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _SymbolEffectsRemovedModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _SymbolEffectsRemovedModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _SymbolEffectsRemovedModifier()
{
  specialized ViewModifier.bodyError()();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SymbolEffectsRemovedModifier()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_SymbolEffectsRemovedModifier>, (uint64_t)&type metadata for _SymbolEffectsRemovedModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _GraphInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _SymbolEffectsRemovedModifier.EffectEnvironment and conformance _SymbolEffectsRemovedModifier.EffectEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  return _GraphInputs.environment.setter();
}

uint64_t SymbolEffect.HiddenTransition.init(config:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;
  char v3;

  v2 = *(_BYTE *)(result + 4);
  v3 = *(_BYTE *)(result + 5);
  *(_DWORD *)a2 = *(_DWORD *)result;
  *(_BYTE *)(a2 + 4) = v2;
  *(_BYTE *)(a2 + 5) = v3;
  return result;
}

void SymbolEffect.HiddenTransition.config.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;

  v2 = *(_BYTE *)(v1 + 4);
  v3 = *(_BYTE *)(v1 + 5);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(_BYTE *)(a1 + 4) = v2;
  *(_BYTE *)(a1 + 5) = v3;
}

uint64_t SymbolEffect.HiddenTransition.config.setter(uint64_t result)
{
  uint64_t v1;
  char v2;
  char v3;

  v2 = *(_BYTE *)(result + 4);
  v3 = *(_BYTE *)(result + 5);
  *(_DWORD *)v1 = *(_DWORD *)result;
  *(_BYTE *)(v1 + 4) = v2;
  *(_BYTE *)(v1 + 5) = v3;
  return result;
}

uint64_t (*SymbolEffect.HiddenTransition.config.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double SymbolEffect.HiddenTransition.body(content:phase:)@<D0>(char a1@<W1>, uint64_t a2@<X8>)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = *v2;
  v4 = 0x100000000;
  if (!*((_BYTE *)v2 + 4))
    v4 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = v3 | ((unint64_t)(a1 != 1) << 40) | v4;
  result = 0.0078125;
  *(_OWORD *)(a2 + 24) = xmmword_187C0CE10;
  *(_DWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 44) = 1;
  return result;
}

void static SymbolEffect.HiddenTransition.properties.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t SymbolEffect.HiddenTransition._makeContentTransition(transition:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)a1 == 3)
  {
    result = outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
    *(_QWORD *)(a1 + 24) = 1;
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    BYTE5(v5) = *(_BYTE *)(v1 + 5);
    LODWORD(v5) = _SymbolEffect.HiddenConfiguration.transitionFlags.getter();
    BYTE4(v5) = 1;
    ContentTransition.EffectType.init(type:arg0:arg1:)();
    default argument 3 of ContentTransition.Effect.init(type:begin:duration:events:flags:)();
    default argument 4 of ContentTransition.Effect.init(type:begin:duration:events:flags:)();
    ContentTransition.Effect.init(type:begin:duration:events:flags:)();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentTransition.Effect>, MEMORY[0x1E0CE3808], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_187BF9830;
    *(_QWORD *)(v4 + 32) = v5;
    *(_BYTE *)(v4 + 40) = v6;
    *(_DWORD *)(v4 + 44) = v7;
    *(_BYTE *)(v4 + 48) = v8;
    *(_QWORD *)(v4 + 52) = v9;
    *(_QWORD *)(v4 + 60) = v10;
    result = outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
    *(_QWORD *)(a1 + 24) = v4;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return result;
}

double protocol witness for Transition.body(content:phase:) in conformance SymbolEffect.HiddenTransition@<D0>(char a1@<W1>, uint64_t a2@<X8>)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = *v2;
  v4 = 0x100000000;
  if (!*((_BYTE *)v2 + 4))
    v4 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = v3 | ((unint64_t)(a1 != 1) << 40) | v4;
  result = 0.0078125;
  *(_OWORD *)(a2 + 24) = xmmword_187C0CE10;
  *(_DWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 44) = 1;
  return result;
}

unsigned int *static ContentTransition.symbolReplace(_:)@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  uint64_t v3;

  v2 = result[2];
  v3 = 0x100000000;
  if (!*((_BYTE *)result + 4))
    v3 = 0;
  *(_QWORD *)a2 = v3 | *result;
  *(_BYTE *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 8) = v2;
  *(_WORD *)(a2 + 13) = 2;
  return result;
}

uint64_t SymbolEffect.encode(to:)()
{
  return _SymbolEffect.encode(to:)();
}

float SymbolEffect.init(from:)@<S0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  float result;
  __int128 v4;
  uint64_t v5;
  __int16 v6;
  float v7;
  int v8;
  char v9;
  int v10;
  char v11;

  _SymbolEffect.init(from:)();
  if (!v1)
  {
    result = v7;
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_WORD *)(a1 + 24) = v6;
    *(float *)(a1 + 28) = v7;
    *(_DWORD *)(a1 + 32) = v8;
    *(_BYTE *)(a1 + 36) = v9;
    *(_DWORD *)(a1 + 40) = v10;
    *(_BYTE *)(a1 + 44) = v11;
  }
  return result;
}

float protocol witness for ProtobufDecodableMessage.init(from:) in conformance SymbolEffect@<S0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  float result;
  __int128 v4;
  uint64_t v5;
  __int16 v6;
  float v7;
  int v8;
  char v9;
  int v10;
  char v11;

  _SymbolEffect.init(from:)();
  if (!v1)
  {
    result = v7;
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_WORD *)(a1 + 24) = v6;
    *(float *)(a1 + 28) = v7;
    *(_DWORD *)(a1 + 32) = v8;
    *(_BYTE *)(a1 + 36) = v9;
    *(_DWORD *)(a1 + 40) = v10;
    *(_BYTE *)(a1 + 44) = v11;
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance SymbolEffect()
{
  return _SymbolEffect.encode(to:)();
}

BOOL SymbolEffect.isIndefinite.getter()
{
  uint64_t v0;
  unsigned int v1;

  if ((*(_BYTE *)(v0 + 36) & 1) == 0)
    return (~*(_DWORD *)(v0 + 32) & 0x7F800000) == 0;
  v1 = *(unsigned __int16 *)(v0 + 24);
  if (v1 >> 12 >= 6)
    return 1;
  if ((~*(_QWORD *)v0 & 0xF000000000000006) == 0)
  {
    outlined consume of _SymbolEffect.Storage(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), v1);
    return 1;
  }
  return 0;
}

uint64_t specialized static _SymbolEffect.PulseConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)a1;
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(_QWORD *)a2;
  v5 = *(unsigned __int8 *)(a2 + 8);
  if ((~*(_QWORD *)a1 & 0xF000000000000006) == 0)
  {
    if ((~v4 & 0xF000000000000006) == 0)
      return v3 ^ v5 ^ 1u;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)a1;
  if ((~v4 & 0xF000000000000006) == 0)
  {
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined consume of _SymbolEffect.Trigger(v2);
LABEL_6:
    outlined copy of _SymbolEffect.Trigger?(v4);
    outlined consume of _SymbolEffect.Trigger?(v2);
    outlined consume of _SymbolEffect.Trigger?(v4);
    return 0;
  }
  v8 = v4;
  outlined copy of _SymbolEffect.Trigger(v2);
  outlined copy of _SymbolEffect.Trigger(v2);
  v6 = MEMORY[0x18D757804](&v9, &v8);
  outlined consume of _SymbolEffect.Trigger(v9);
  outlined consume of _SymbolEffect.Trigger?(v2);
  if ((v6 & 1) != 0)
    return v3 ^ v5 ^ 1u;
  return 0;
}

uint64_t outlined consume of _SymbolEffect.Trigger?(uint64_t result)
{
  if ((~result & 0xF000000000000006) != 0)
    return outlined consume of _SymbolEffect.Trigger(result);
  return result;
}

uint64_t outlined consume of _SymbolEffect.Trigger(uint64_t result)
{
  if ((result & 0x8000000000000000) == 0)
    return swift_release();
  return result;
}

uint64_t specialized static SymbolEffect.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 v5;
  float v6;
  float v7;
  char v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  float v14;
  float v15;
  int v16;
  float v17;
  char v18;
  uint64_t v19;
  char v20;
  char v22;
  char v23;
  _QWORD v24[3];
  unsigned __int16 v25;
  _QWORD v26[3];
  unsigned __int16 v27;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_WORD *)(a1 + 24);
  v7 = *(float *)(a1 + 28);
  v6 = *(float *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 36);
  v9 = *(float *)(a1 + 40);
  v10 = *(_QWORD *)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_WORD *)(a2 + 24);
  v15 = *(float *)(a2 + 28);
  v14 = *(float *)(a2 + 32);
  v16 = *(unsigned __int8 *)(a2 + 36);
  v17 = *(float *)(a2 + 40);
  v22 = *(_BYTE *)(a2 + 44);
  v23 = *(_BYTE *)(a1 + 44);
  v26[0] = v2;
  v26[1] = v3;
  v26[2] = v4;
  v27 = v5;
  v24[0] = v10;
  v24[1] = v11;
  v24[2] = v12;
  v25 = v13;
  outlined copy of _SymbolEffect.Storage(v2, v3, v4, v5);
  outlined copy of _SymbolEffect.Storage(v10, v11, v12, v13);
  if ((MEMORY[0x18D7577F8](v26, v24) & 1) == 0 || v7 != v15)
    goto LABEL_16;
  if ((v8 & 1) != 0)
  {
    if (!v16)
      goto LABEL_16;
  }
  else
  {
    if (v6 == v14)
      v18 = v16;
    else
      v18 = 1;
    if ((v18 & 1) != 0)
      goto LABEL_16;
  }
  if ((v23 & 1) != 0)
  {
    if ((v22 & 1) == 0)
    {
LABEL_16:
      v19 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    v20 = v22;
    if (v9 != v17)
      v20 = 1;
    if ((v20 & 1) != 0)
      goto LABEL_16;
  }
  v19 = 1;
LABEL_17:
  outlined consume of _SymbolEffect.Storage(v10, v11, v12, v13);
  outlined consume of _SymbolEffect.Storage(v2, v3, v4, v5);
  return v19;
}

uint64_t outlined copy of SymbolEffect?(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if ((~(_DWORD)a3 & 0xFFFFFFFE) != 0 || (a4 & 0xFEFE) != 2)
    return outlined copy of _SymbolEffect.Storage(result, a2, a3, a4);
  return result;
}

uint64_t outlined consume of SymbolEffect?(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if ((~(_DWORD)a3 & 0xFFFFFFFE) != 0 || (a4 & 0xFEFE) != 2)
    return outlined consume of _SymbolEffect.Storage(result, a2, a3, a4);
  return result;
}

uint64_t outlined consume of _SymbolEffect.Storage(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if ((unsigned __int16)(a4 >> 12) <= 5u)
    return outlined consume of _SymbolEffect.Trigger?(result);
  return result;
}

unint64_t lazy protocol witness table accessor for type _SymbolEffectModifier.EffectEnvironment and conformance _SymbolEffectModifier.EffectEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _SymbolEffectModifier.EffectEnvironment and conformance _SymbolEffectModifier.EffectEnvironment;
  if (!lazy protocol witness table cache variable for type _SymbolEffectModifier.EffectEnvironment and conformance _SymbolEffectModifier.EffectEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _SymbolEffectModifier.EffectEnvironment, &unk_1E1ADA498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SymbolEffectModifier.EffectEnvironment and conformance _SymbolEffectModifier.EffectEnvironment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _SymbolEffectModifier.EffectEnvironment and conformance _SymbolEffectModifier.EffectEnvironment;
  if (!lazy protocol witness table cache variable for type _SymbolEffectModifier.EffectEnvironment and conformance _SymbolEffectModifier.EffectEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _SymbolEffectModifier.EffectEnvironment, &unk_1E1ADA498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SymbolEffectModifier.EffectEnvironment and conformance _SymbolEffectModifier.EffectEnvironment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _SymbolEffectsModifier.EffectsEnvironment and conformance _SymbolEffectsModifier.EffectsEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _SymbolEffectsModifier.EffectsEnvironment and conformance _SymbolEffectsModifier.EffectsEnvironment;
  if (!lazy protocol witness table cache variable for type _SymbolEffectsModifier.EffectsEnvironment and conformance _SymbolEffectsModifier.EffectsEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _SymbolEffectsModifier.EffectsEnvironment, &unk_1E1ADF9C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SymbolEffectsModifier.EffectsEnvironment and conformance _SymbolEffectsModifier.EffectsEnvironment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _SymbolEffectsModifier.EffectsEnvironment and conformance _SymbolEffectsModifier.EffectsEnvironment;
  if (!lazy protocol witness table cache variable for type _SymbolEffectsModifier.EffectsEnvironment and conformance _SymbolEffectsModifier.EffectsEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _SymbolEffectsModifier.EffectsEnvironment, &unk_1E1ADF9C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SymbolEffectsModifier.EffectsEnvironment and conformance _SymbolEffectsModifier.EffectsEnvironment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _SymbolEffectsRemovedModifier.EffectEnvironment and conformance _SymbolEffectsRemovedModifier.EffectEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _SymbolEffectsRemovedModifier.EffectEnvironment and conformance _SymbolEffectsRemovedModifier.EffectEnvironment;
  if (!lazy protocol witness table cache variable for type _SymbolEffectsRemovedModifier.EffectEnvironment and conformance _SymbolEffectsRemovedModifier.EffectEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _SymbolEffectsRemovedModifier.EffectEnvironment, &unk_1E1AFBBD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SymbolEffectsRemovedModifier.EffectEnvironment and conformance _SymbolEffectsRemovedModifier.EffectEnvironment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _SymbolEffectsRemovedModifier.EffectEnvironment and conformance _SymbolEffectsRemovedModifier.EffectEnvironment;
  if (!lazy protocol witness table cache variable for type _SymbolEffectsRemovedModifier.EffectEnvironment and conformance _SymbolEffectsRemovedModifier.EffectEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _SymbolEffectsRemovedModifier.EffectEnvironment, &unk_1E1AFBBD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SymbolEffectsRemovedModifier.EffectEnvironment and conformance _SymbolEffectsRemovedModifier.EffectEnvironment);
  }
  return result;
}

uint64_t outlined consume of _Transition_ContentTransition.Result(uint64_t a1, char a2)
{
  uint64_t result;

  if (a2 == 1)
    return swift_bridgeObjectRelease();
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in _SymbolEffectModifier()
{
  return &protocol witness table for _SymbolEffectModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in _SymbolEffectsModifier()
{
  return &protocol witness table for _SymbolEffectsModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in _SymbolEffectsRemovedModifier()
{
  return &protocol witness table for _SymbolEffectsRemovedModifier;
}

uint64_t associated type witness table accessor for Transition.Body : View in SymbolEffect.HiddenTransition()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for SymbolEffect(uint64_t a1)
{
  return outlined consume of _SymbolEffect.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_WORD *)(a1 + 24));
}

uint64_t initializeWithCopy for SymbolEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_WORD *)(a2 + 24);
  outlined copy of _SymbolEffect.Storage(*(_QWORD *)a2, v5, v6, v7);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_WORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  return a1;
}

uint64_t assignWithCopy for SymbolEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  int v12;
  int v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_WORD *)(a2 + 24);
  outlined copy of _SymbolEffect.Storage(*(_QWORD *)a2, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v11 = *(_WORD *)(a1 + 24);
  *(_WORD *)(a1 + 24) = v7;
  outlined consume of _SymbolEffect.Storage(v8, v9, v10, v11);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v12;
  v13 = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v13;
  return a1;
}

__n128 __swift_memcpy45_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SymbolEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_WORD *)(a2 + 24);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  v9 = *(_WORD *)(a1 + 24);
  *(_WORD *)(a1 + 24) = v5;
  outlined consume of _SymbolEffect.Storage(v6, v7, v8, v9);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  return a1;
}

uint64_t getEnumTagSinglePayload for SymbolEffect(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 45))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_DWORD *)(a1 + 16) >> 1) & 0x7FFFFFFF | ((*(unsigned __int16 *)(a1 + 24) >> 1) << 31);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for SymbolEffect(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 45) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (-2 * a2);
      *(_WORD *)(result + 24) = 2;
      return result;
    }
    *(_BYTE *)(result + 45) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SymbolEffect()
{
  return &type metadata for SymbolEffect;
}

uint64_t destroy for SymbolEffect.PulseConfiguration(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if ((~result & 0xF000000000000006) != 0)
    return outlined consume of _SymbolEffect.Trigger(result);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SymbolEffect.PulseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)a2;
  if ((~*(_QWORD *)a2 & 0xF000000000000006) != 0)
    outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithCopy for SymbolEffect.PulseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)a2 & 0xF000000000000006;
  if ((~*(_QWORD *)a1 & 0xF000000000000006) != 0)
  {
    if (v5 == 0xF000000000000006)
    {
      outlined destroy of _SymbolEffect.Trigger(a1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
    else
    {
      outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
      v6 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v4;
      outlined consume of _SymbolEffect.Trigger(v6);
    }
  }
  else
  {
    if (v5 != 0xF000000000000006)
      outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
    *(_QWORD *)a1 = v4;
  }
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t outlined destroy of _SymbolEffect.Trigger(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE2580] - 8) + 8))();
  return a1;
}

uint64_t assignWithTake for SymbolEffect.PulseConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *a2;
  if ((~v4 & 0xF000000000000006) != 0)
  {
    if ((~v5 & 0xF000000000000006) != 0)
    {
      *(_QWORD *)a1 = v5;
      outlined consume of _SymbolEffect.Trigger(v4);
      goto LABEL_6;
    }
    outlined destroy of _SymbolEffect.Trigger(a1);
  }
  *(_QWORD *)a1 = v5;
LABEL_6:
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SymbolEffect.PulseConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SymbolEffect.PulseConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SymbolEffect.PulseConfiguration()
{
  return &type metadata for SymbolEffect.PulseConfiguration;
}

_QWORD *__swift_memcpy13_8(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SymbolEffect.BreatheConfiguration()
{
  return &type metadata for SymbolEffect.BreatheConfiguration;
}

ValueMetadata *type metadata accessor for SymbolEffect.BounceConfiguration()
{
  return &type metadata for SymbolEffect.BounceConfiguration;
}

uint64_t initializeWithCopy for SymbolEffect.WiggleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)a2;
  if ((~*(_QWORD *)a2 & 0xF000000000000006) != 0)
    outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for SymbolEffect.WiggleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)a2 & 0xF000000000000006;
  if ((~*(_QWORD *)a1 & 0xF000000000000006) != 0)
  {
    if (v5 == 0xF000000000000006)
    {
      outlined destroy of _SymbolEffect.Trigger(a1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
    else
    {
      outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
      v6 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v4;
      outlined consume of _SymbolEffect.Trigger(v6);
    }
  }
  else
  {
    if (v5 != 0xF000000000000006)
      outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
    *(_QWORD *)a1 = v4;
  }
  v7 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

uint64_t assignWithTake for SymbolEffect.WiggleConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *a2;
  if ((~v4 & 0xF000000000000006) != 0)
  {
    if ((~v5 & 0xF000000000000006) != 0)
    {
      *(_QWORD *)a1 = v5;
      outlined consume of _SymbolEffect.Trigger(v4);
      goto LABEL_6;
    }
    outlined destroy of _SymbolEffect.Trigger(a1);
  }
  *(_QWORD *)a1 = v5;
LABEL_6:
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_BYTE *)(a1 + 25) = *((_BYTE *)a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for SymbolEffect.WiggleConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 26))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SymbolEffect.WiggleConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 26) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SymbolEffect.WiggleConfiguration()
{
  return &type metadata for SymbolEffect.WiggleConfiguration;
}

uint64_t initializeBufferWithCopyOfBuffer for SymbolEffect.BreatheConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)a2;
  if ((~*(_QWORD *)a2 & 0xF000000000000006) != 0)
    outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  return a1;
}

uint64_t assignWithCopy for SymbolEffect.BreatheConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)a2 & 0xF000000000000006;
  if ((~*(_QWORD *)a1 & 0xF000000000000006) != 0)
  {
    if (v5 == 0xF000000000000006)
    {
      outlined destroy of _SymbolEffect.Trigger(a1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
    else
    {
      outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
      v6 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v4;
      outlined consume of _SymbolEffect.Trigger(v6);
    }
  }
  else
  {
    if (v5 != 0xF000000000000006)
      outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
    *(_QWORD *)a1 = v4;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  return a1;
}

uint64_t assignWithTake for SymbolEffect.BreatheConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *a2;
  if ((~v4 & 0xF000000000000006) != 0)
  {
    if ((~v5 & 0xF000000000000006) != 0)
    {
      *(_QWORD *)a1 = v5;
      outlined consume of _SymbolEffect.Trigger(v4);
      goto LABEL_6;
    }
    outlined destroy of _SymbolEffect.Trigger(a1);
  }
  *(_QWORD *)a1 = v5;
LABEL_6:
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
  return a1;
}

uint64_t getEnumTagSinglePayload for SymbolEffect.BreatheConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 13))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 12);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SymbolEffect.BreatheConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 13) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 13) = 0;
    if (a2)
      *(_BYTE *)(result + 12) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SymbolEffect.RotateConfiguration()
{
  return &type metadata for SymbolEffect.RotateConfiguration;
}

uint64_t initializeBufferWithCopyOfBuffer for SymbolEffect.VariableColorConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)a2;
  if ((~*(_QWORD *)a2 & 0xF000000000000006) != 0)
    outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithCopy for SymbolEffect.VariableColorConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)a2 & 0xF000000000000006;
  if ((~*(_QWORD *)a1 & 0xF000000000000006) != 0)
  {
    if (v5 == 0xF000000000000006)
    {
      outlined destroy of _SymbolEffect.Trigger(a1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
    else
    {
      outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
      v6 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v4;
      outlined consume of _SymbolEffect.Trigger(v6);
    }
  }
  else
  {
    if (v5 != 0xF000000000000006)
      outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
    *(_QWORD *)a1 = v4;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for SymbolEffect.VariableColorConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *a2;
  if ((~v4 & 0xF000000000000006) != 0)
  {
    if ((~v5 & 0xF000000000000006) != 0)
    {
      *(_QWORD *)a1 = v5;
      outlined consume of _SymbolEffect.Trigger(v4);
      goto LABEL_6;
    }
    outlined destroy of _SymbolEffect.Trigger(a1);
  }
  *(_QWORD *)a1 = v5;
LABEL_6:
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  return a1;
}

uint64_t getEnumTagSinglePayload for SymbolEffect.VariableColorConfiguration(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0x3E && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 62);
  v3 = *(_QWORD *)a1 >> 58;
  v4 = *(_QWORD *)a1 & 6 | (8 * ((v3 >> 2) & 7));
  v5 = 62 - (v4 | (v3 >> 5));
  if (v4)
    v6 = v5;
  else
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for SymbolEffect.VariableColorConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x3D)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 62;
    if (a3 >= 0x3E)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 0x3E)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
    {
      v3 = (32 * (a2 ^ 0x3F)) | ((a2 ^ 0x3F) >> 1);
      *(_QWORD *)result = ((v3 << 58) | (2 * v3)) & 0xF000000000000007;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SymbolEffect.VariableColorConfiguration()
{
  return &type metadata for SymbolEffect.VariableColorConfiguration;
}

ValueMetadata *type metadata accessor for SymbolEffect.ScaleConfiguration()
{
  return &type metadata for SymbolEffect.ScaleConfiguration;
}

uint64_t __swift_memcpy6_4(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SymbolEffect.HiddenConfiguration()
{
  return &type metadata for SymbolEffect.HiddenConfiguration;
}

uint64_t getEnumTagSinglePayload for SymbolEffect.ReplaceConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SymbolEffect.ReplaceConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SymbolEffect.ReplaceConfiguration()
{
  return &type metadata for SymbolEffect.ReplaceConfiguration;
}

uint64_t *destroy for _SymbolEffectModifier(uint64_t *result)
{
  uint64_t v1;

  v1 = result[2];
  if ((~(_DWORD)v1 & 0xFFFFFFFE) != 0 || (result[3] & 0xFEFE) != 2)
    return (uint64_t *)outlined consume of _SymbolEffect.Storage(*result, result[1], v1, result[3]);
  return result;
}

uint64_t initializeWithCopy for _SymbolEffectModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = a2[2];
  v5 = a2[3];
  if ((~(_DWORD)v4 & 0xFFFFFFFE) == 0 && (a2[3] & 0xFEFE) == 2)
  {
    v9 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 29) = *(_OWORD *)((char *)a2 + 29);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of _SymbolEffect.Storage(*a2, v8, v4, v5);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v4;
    *(_WORD *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 28) = *(_OWORD *)((char *)a2 + 28);
    *(_BYTE *)(a1 + 44) = *((_BYTE *)a2 + 44);
  }
  return a1;
}

uint64_t assignWithCopy for _SymbolEffectModifier(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  v4 = *((_QWORD *)a2 + 2);
  v5 = *((_QWORD *)a2 + 3);
  v7 = (~*((_DWORD *)a2 + 4) & 0xFFFFFFFE) == 0 && (*((_QWORD *)a2 + 3) & 0xFEFELL) == 2;
  if ((~*(_DWORD *)(a1 + 16) & 0xFFFFFFFE) == 0 && (*(_QWORD *)(a1 + 24) & 0xFEFELL) == 2)
  {
    if (v7)
    {
      v11 = *a2;
      v12 = a2[1];
      *(_OWORD *)(a1 + 29) = *(__int128 *)((char *)a2 + 29);
      *(_OWORD *)a1 = v11;
      *(_OWORD *)(a1 + 16) = v12;
    }
    else
    {
      v21 = *(_QWORD *)a2;
      v22 = *((_QWORD *)a2 + 1);
      outlined copy of _SymbolEffect.Storage(*(_QWORD *)a2, v22, v4, v5);
      *(_QWORD *)a1 = v21;
      *(_QWORD *)(a1 + 8) = v22;
      *(_QWORD *)(a1 + 16) = v4;
      *(_WORD *)(a1 + 24) = v5;
      v23 = *(__int128 *)((char *)a2 + 28);
      *(_BYTE *)(a1 + 44) = *((_BYTE *)a2 + 44);
      *(_OWORD *)(a1 + 28) = v23;
    }
  }
  else if (v7)
  {
    outlined destroy of SymbolEffect(a1);
    v9 = *(__int128 *)((char *)a2 + 29);
    v10 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 29) = v9;
  }
  else
  {
    v13 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    outlined copy of _SymbolEffect.Storage(*(_QWORD *)a2, v14, v4, v5);
    v15 = *(_QWORD *)a1;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v4;
    v18 = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v5;
    outlined consume of _SymbolEffect.Storage(v15, v16, v17, v18);
    *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 + 7);
    v19 = *((_DWORD *)a2 + 8);
    *(_BYTE *)(a1 + 36) = *((_BYTE *)a2 + 36);
    *(_DWORD *)(a1 + 32) = v19;
    v20 = *((_DWORD *)a2 + 10);
    *(_BYTE *)(a1 + 44) = *((_BYTE *)a2 + 44);
    *(_DWORD *)(a1 + 40) = v20;
  }
  return a1;
}

uint64_t outlined destroy of SymbolEffect(uint64_t a1)
{
  outlined consume of _SymbolEffect.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_WORD *)(a1 + 24));
  return a1;
}

uint64_t assignWithTake for _SymbolEffectModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  if ((~(_DWORD)v4 & 0xFFFFFFFE) == 0 && (*(_QWORD *)(a1 + 24) & 0xFEFELL) == 2)
    goto LABEL_11;
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  if ((~(_DWORD)v8 & 0xFFFFFFFE) == 0 && (*(_QWORD *)(a2 + 24) & 0xFEFELL) == 2)
  {
    outlined destroy of SymbolEffect(a1);
LABEL_11:
    v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 29);
    return a1;
  }
  v10 = HIDWORD(v7);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 24) = v7;
  outlined consume of _SymbolEffect.Storage(v11, v12, v4, v5);
  v13 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = v10;
  *(_DWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SymbolEffectModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 45))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = (*(_DWORD *)(a1 + 16) >> 1) & 0x7FFFFFFF | ((*(unsigned __int16 *)(a1 + 24) >> 1) << 31);
  v4 = -2 - v3;
  if ((int)(-2 - v3) < 0)
    v4 = -1;
  if (v3 <= 0x80000000)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffectModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 45) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 45) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 2 * ~a2;
      *(_WORD *)(result + 24) = 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffectModifier()
{
  return &type metadata for _SymbolEffectModifier;
}

ValueMetadata *type metadata accessor for _SymbolEffectsModifier()
{
  return &type metadata for _SymbolEffectsModifier;
}

uint64_t storeEnumTagSinglePayload for _SymbolEffectsRemovedModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18714CAFC + 4 * byte_187C0CE25[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18714CB30 + 4 * byte_187C0CE20[v4]))();
}

uint64_t sub_18714CB30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18714CB38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18714CB40);
  return result;
}

uint64_t sub_18714CB4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18714CB54);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18714CB58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18714CB60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffectsRemovedModifier()
{
  return &type metadata for _SymbolEffectsRemovedModifier;
}

uint64_t getEnumTagSinglePayload for SymbolEffect.HiddenConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 6))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SymbolEffect.HiddenConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 6) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 6) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SymbolEffect.HiddenTransition()
{
  return &type metadata for SymbolEffect.HiddenTransition;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<SymbolEffect.HiddenTransition>, _SymbolEffectModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<SymbolEffect.HiddenTransition>, _SymbolEffectModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<SymbolEffect.HiddenTransition>, _SymbolEffectModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<SymbolEffect.HiddenTransition>, _SymbolEffectModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type PlaceholderContentView<SymbolEffect.HiddenTransition> and conformance PlaceholderContentView<A>();
    v3[1] = &protocol witness table for _SymbolEffectModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<SymbolEffect.HiddenTransition>, _SymbolEffectModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<PlaceholderContentView<SymbolEffect.HiddenTransition>, _SymbolEffectModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<SymbolEffect.HiddenTransition>, _SymbolEffectModifier>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for PlaceholderContentView<SymbolEffect.HiddenTransition>, (uint64_t)&type metadata for SymbolEffect.HiddenTransition, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE5470]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<SymbolEffect.HiddenTransition>, _SymbolEffectModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type PlaceholderContentView<SymbolEffect.HiddenTransition> and conformance PlaceholderContentView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlaceholderContentView<SymbolEffect.HiddenTransition> and conformance PlaceholderContentView<A>;
  if (!lazy protocol witness table cache variable for type PlaceholderContentView<SymbolEffect.HiddenTransition> and conformance PlaceholderContentView<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for PlaceholderContentView<SymbolEffect.HiddenTransition>, (uint64_t)&type metadata for SymbolEffect.HiddenTransition, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE5470]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5480], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaceholderContentView<SymbolEffect.HiddenTransition> and conformance PlaceholderContentView<A>);
  }
  return result;
}

void *type metadata accessor for _SymbolEffectsRemovedModifier.EffectEnvironment()
{
  return &unk_1E1AFBBD8;
}

void *type metadata accessor for _SymbolEffectsModifier.EffectsEnvironment()
{
  return &unk_1E1ADF9C0;
}

void *type metadata accessor for _SymbolEffectModifier.EffectEnvironment()
{
  return &unk_1E1ADA498;
}

void View.listRowHeightTemplate<A>(templateRow:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  View.listRowHeightTemplate<A>(templateRow:)(a1, a2, a3, a4, a5, a6, (void (*)(void))lazy protocol witness table accessor for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent);
}

unint64_t lazy protocol witness table accessor for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent;
  if (!lazy protocol witness table cache variable for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListRowHeightTemplateContent, &type metadata for ListRowHeightTemplateContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent;
  if (!lazy protocol witness table cache variable for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListRowHeightTemplateContent, &type metadata for ListRowHeightTemplateContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent);
  }
  return result;
}

void View.listFirstRowHeightTemplate<A>(templateRow:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  View.listRowHeightTemplate<A>(templateRow:)(a1, a2, a3, a4, a5, a6, (void (*)(void))lazy protocol witness table accessor for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent);
}

void View.listRowHeightTemplate<A>(templateRow:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  a7();
  View.optionalViewAlias<A, B>(_:_:)();
}

uint64_t partial apply for closure #1 in View.listRowHeightTemplate<A>(templateRow:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 24);
  (*(void (**)(void))(v1 + 48))();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a1, 0, 1, v3);
}

unint64_t lazy protocol witness table accessor for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent;
  if (!lazy protocol witness table cache variable for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListFirstRowHeightTemplateContent, &type metadata for ListFirstRowHeightTemplateContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent;
  if (!lazy protocol witness table cache variable for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListFirstRowHeightTemplateContent, &type metadata for ListFirstRowHeightTemplateContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent);
  }
  return result;
}

void sub_18714D054(uint64_t a1)
{
  get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA20OptionalSourceWriter33_D9F7AF928092578A4B8FA861B49E2161LLVyAA021ListRowHeightTemplateE0Vqd__GGAaBHPxAaBHD1__AjA0C8ModifierHPyHCHCTm(a1, (void (*)(void))lazy protocol witness table accessor for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent);
}

void sub_18714D068(uint64_t a1)
{
  get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA20OptionalSourceWriter33_D9F7AF928092578A4B8FA861B49E2161LLVyAA021ListRowHeightTemplateE0Vqd__GGAaBHPxAaBHD1__AjA0C8ModifierHPyHCHCTm(a1, (void (*)(void))lazy protocol witness table accessor for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent);
}

void get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA20OptionalSourceWriter33_D9F7AF928092578A4B8FA861B49E2161LLVyAA021ListRowHeightTemplateE0Vqd__GGAaBHPxAaBHD1__AjA0C8ModifierHPyHCHCTm(uint64_t a1, void (*a2)(void))
{
  a2();
  type metadata accessor for OptionalSourceWriter();
}

uint64_t sub_18714D0B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[14];

  v1 = type metadata accessor for ModifiedContent();
  v3[0] = v0;
  v3[1] = &protocol witness table for OptionalSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v3);
}

ValueMetadata *type metadata accessor for ListFirstRowHeightTemplateContent()
{
  return &type metadata for ListFirstRowHeightTemplateContent;
}

ValueMetadata *type metadata accessor for ListRowHeightTemplateContent()
{
  return &type metadata for ListRowHeightTemplateContent;
}

void protocol witness for View.body.getter in conformance ListRowHeightTemplateContent()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_UNKNOWN **base witness table accessor for View in ListRowHeightTemplateContent()
{
  return &protocol witness table for ListRowHeightTemplateContent;
}

void protocol witness for View.body.getter in conformance ListFirstRowHeightTemplateContent()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

_UNKNOWN **base witness table accessor for View in ListFirstRowHeightTemplateContent()
{
  return &protocol witness table for ListFirstRowHeightTemplateContent;
}

unint64_t instantiation function for generic protocol witness table for ListFirstRowHeightTemplateContent(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ListRowHeightTemplateContent(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TextInputDictationBehavior.Storage(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 2)
    return v3 == 2;
  if (v2 == 3)
    return v3 == 3;
  if ((v3 & 0xFE) == 2)
    return 0;
  return ((v3 ^ v2) & 1) == 0;
}

void static TextInputDictationBehavior.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

_BYTE *static TextInputDictationBehavior.inline(activation:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void static TextInputDictationBehavior.preventDictation.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t static TextInputDictationBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 2)
  {
    if (v3 == 2)
      return 1;
  }
  else if (v2 == 3)
  {
    if (v3 == 3)
      return 1;
  }
  else if ((v3 & 0xFE) != 2 && ((v3 ^ v2) & 1) == 0)
  {
    return 1;
  }
  return 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TextInputDictationBehavior(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 2)
    return v3 == 2;
  if (v2 != 3)
    return (v3 & 0xFE) != 2 && ((v3 ^ v2) & 1) == 0;
  return v3 == 3;
}

void static TextInputDictationActivation.onSelect.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static TextInputDictationActivation.onLook.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

BOOL static TextInputDictationActivation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t getEnumTagSinglePayload for TextInputDictationBehavior(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  if (*a1 <= 3u)
    v6 = 3;
  else
    v6 = *a1;
  v7 = v6 - 4;
  if (*a1 < 2u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TextInputDictationBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_18714D4FC + 4 * byte_187C0D625[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18714D530 + 4 * byte_187C0D620[v4]))();
}

uint64_t sub_18714D530(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18714D538(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18714D540);
  return result;
}

uint64_t sub_18714D54C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18714D554);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_18714D558(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18714D560(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextInputDictationBehavior()
{
  return &type metadata for TextInputDictationBehavior;
}

ValueMetadata *type metadata accessor for TextInputDictationActivation()
{
  return &type metadata for TextInputDictationActivation;
}

uint64_t storeEnumTagSinglePayload for TextInputDictationActivation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18714D5DC + 4 * byte_187C0D62F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18714D610 + 4 * byte_187C0D62A[v4]))();
}

uint64_t sub_18714D610(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18714D618(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18714D620);
  return result;
}

uint64_t sub_18714D62C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18714D634);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18714D638(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18714D640(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextInputDictationActivation.Role()
{
  return &type metadata for TextInputDictationActivation.Role;
}

uint64_t getEnumTagSinglePayload for TextInputDictationBehavior.Storage(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
  {
    v6 = *a1;
    if (v6 >= 2)
      v7 = v6 - 1;
    else
      v7 = 0;
    if (v7 >= 3)
      return v7 - 2;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 3;
    if (a2 + 3 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18714D6AC + 4 * byte_187C0D634[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for TextInputDictationBehavior.Storage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFD)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_18714D758 + 4 * byte_187C0D63E[v5]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18714D78C + 4 * byte_187C0D639[v5]))();
}

uint64_t sub_18714D78C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18714D794(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18714D79CLL);
  return result;
}

uint64_t sub_18714D7A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18714D7B0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_18714D7B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18714D7BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextInputDictationBehavior.Storage()
{
  return &type metadata for TextInputDictationBehavior.Storage;
}

unint64_t lazy protocol witness table accessor for type TextInputDictationActivation.Role and conformance TextInputDictationActivation.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextInputDictationActivation.Role and conformance TextInputDictationActivation.Role;
  if (!lazy protocol witness table cache variable for type TextInputDictationActivation.Role and conformance TextInputDictationActivation.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextInputDictationActivation.Role, &type metadata for TextInputDictationActivation.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextInputDictationActivation.Role and conformance TextInputDictationActivation.Role);
  }
  return result;
}

uint64_t ColorPickerStyleConfiguration.supportsOpacity.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ColorPickerStyleConfiguration.supportsOpacity.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*ColorPickerStyleConfiguration.supportsOpacity.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ColorPickerStyleConfiguration.color.getter()
{
  uint64_t v1;

  type metadata accessor for Binding<UIColor>();
  MEMORY[0x18D75B9C8](&v1);
  return v1;
}

_QWORD *key path getter for ColorPickerStyleConfiguration.color : ColorPickerStyleConfiguration@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  type metadata accessor for Binding<UIColor>();
  result = MEMORY[0x18D75B9C8](&v3);
  *a1 = v3;
  return result;
}

void key path setter for ColorPickerStyleConfiguration.color : ColorPickerStyleConfiguration(void **a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;
  id v5;

  v2 = *a1;
  v3 = *(void **)(a2 + 24);
  swift_retain_n();
  swift_retain_n();
  v4 = v3;
  v5 = v2;
  dispatch thunk of AnyLocation.set(_:transaction:)();

  swift_release_n();
  swift_release_n();

}

void ColorPickerStyleConfiguration.color.setter(void *a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  v3 = *(void **)(v1 + 24);
  swift_retain();
  swift_retain();
  v4 = v3;
  dispatch thunk of AnyLocation.set(_:transaction:)();

  swift_release();
  swift_release();

}

void (*ColorPickerStyleConfiguration.color.modify(_QWORD *a1))(id **a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = v1[1];
  v5 = v1[2];
  v3[4] = v4;
  v3[5] = v5;
  v6 = (void *)v1[3];
  v3[6] = v6;
  *v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  type metadata accessor for Binding<UIColor>();
  v8 = v7;
  swift_retain();
  swift_retain();
  v9 = v6;
  MEMORY[0x18D75B9C8](v8);
  return ColorPickerStyleConfiguration.color.modify;
}

void ColorPickerStyleConfiguration.color.modify(id **a1, char a2)
{
  id *v2;
  id v3;
  id v4;
  id v5;

  v2 = *a1;
  v3 = (*a1)[3];
  v4 = (*a1)[6];
  **a1 = v3;
  if ((a2 & 1) != 0)
  {
    v5 = v3;
    dispatch thunk of AnyLocation.set(_:transaction:)();

    swift_release();
    swift_release();

  }
  else
  {
    dispatch thunk of AnyLocation.set(_:transaction:)();

    swift_release();
    swift_release();

  }
  free(v2);
}

uint64_t ColorPickerStyleConfiguration.$color.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(void **)(v0 + 24);
  swift_retain();
  swift_retain();
  v3 = v2;
  return v1;
}

uint64_t ColorPickerStyleConfiguration.init(color:supportsOpacity:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(_QWORD *)(a5 + 8) = result;
  *(_QWORD *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = a3;
  *(_BYTE *)a5 = a4;
  return result;
}

id protocol witness for StyleableView.configuration.getter in conformance ResolvedColorPickerStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v5;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v5 = *(id *)(v1 + 24);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v5;
  swift_retain();
  swift_retain();
  return v5;
}

uint64_t View.colorPickerStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ColorPickerStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for ColorPickerStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ColorPickerStyleModifier);
}

unint64_t instantiation function for generic protocol witness table for ColorPickerStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ColorPickerStyleConfiguration.Label, &type metadata for ColorPickerStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ColorPickerStyleConfiguration.Label, &type metadata for ColorPickerStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in ColorPickerStyleConfiguration.Label()
{
  return &protocol witness table for ColorPickerStyleConfiguration.Label;
}

uint64_t dispatch thunk of ColorPickerStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for ColorPickerStyleConfiguration()
{
  return &type metadata for ColorPickerStyleConfiguration;
}

ValueMetadata *type metadata accessor for ColorPickerStyleConfiguration.Label()
{
  return &type metadata for ColorPickerStyleConfiguration.Label;
}

uint64_t sub_18714DDA0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for ColorPickerStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for ColorPickerStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

void destroy for ColorPickerStyleConfiguration(uint64_t a1)
{
  swift_release();
  swift_release();

}

uint64_t initializeWithCopy for ColorPickerStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_retain();
  swift_retain();
  v5 = v4;
  return a1;
}

uint64_t assignWithCopy for ColorPickerStyleConfiguration(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v4 = *(void **)(a2 + 24);
  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for ColorPickerStyleConfiguration(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for ResolvedColorPickerStyle()
{
  return &type metadata for ResolvedColorPickerStyle;
}

uint64_t getEnumTagSinglePayload for ColorPickerStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18714E00C + 4 * byte_187C0D780[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ColorPickerStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in ColorPickerStyleModifier<A>()
{
  return &protocol witness table for ColorPickerStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in ColorPickerStyleModifier<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t ColorPickerStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(_BYTE *, uint64_t);
  _BYTE v20[8];
  uint64_t v21;
  __int128 v22;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v20[-v14];
  v16 = *(_QWORD *)(a1 + 8);
  v20[0] = *(_BYTE *)a1;
  v21 = v16;
  v22 = *(_OWORD *)(a1 + 16);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 24))(v20, v6, v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v18(v11, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, AssociatedTypeWitness, a3);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v15, AssociatedTypeWitness);
}

uint64_t instantiation function for generic protocol witness table for ColorPickerStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ColorPickerStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ColorPickerStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ColorPickerStyleModifier<DefaultColorPickerStyle> and conformance ColorPickerStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ColorPickerStyleModifier<DefaultColorPickerStyle> and conformance ColorPickerStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type ColorPickerStyleModifier<DefaultColorPickerStyle> and conformance ColorPickerStyleModifier<A>)
  {
    type metadata accessor for ColorPickerStyleModifier<DefaultColorPickerStyle>(255, (unint64_t *)&lazy cache variable for type metadata for ColorPickerStyleModifier<DefaultColorPickerStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultColorPickerStyle and conformance DefaultColorPickerStyle, (uint64_t)&type metadata for DefaultColorPickerStyle);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ColorPickerStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorPickerStyleModifier<DefaultColorPickerStyle> and conformance ColorPickerStyleModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultColorPickerStyle and conformance DefaultColorPickerStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultColorPickerStyle and conformance DefaultColorPickerStyle;
  if (!lazy protocol witness table cache variable for type DefaultColorPickerStyle and conformance DefaultColorPickerStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultColorPickerStyle, &type metadata for DefaultColorPickerStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultColorPickerStyle and conformance DefaultColorPickerStyle);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedColorPickerStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle;
  if (!lazy protocol witness table cache variable for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedColorPickerStyle, &type metadata for ResolvedColorPickerStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle;
  if (!lazy protocol witness table cache variable for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedColorPickerStyle, &type metadata for ResolvedColorPickerStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for ColorPickerStyle.Body : View in DefaultColorPickerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

id protocol witness for ColorPickerStyle.makeBody(configuration:) in conformance DefaultColorPickerStyle@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;
  id v5;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 2);
  v5 = (id)*((_QWORD *)a1 + 3);
  *(_QWORD *)a2 = *((_QWORD *)a1 + 1);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 24) = v2;
  swift_retain();
  swift_retain();
  return v5;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedColorPickerStyle()
{
  lazy protocol witness table accessor for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle();
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for DefaultColorPickerStyle()
{
  return &type metadata for DefaultColorPickerStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ColorPicker<ColorPickerStyleConfiguration.Label>, ColorPickerStyleModifier<SystemColorPickerStyle>> and conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ColorPicker<ColorPickerStyleConfiguration.Label>, ColorPickerStyleModifier<SystemColorPickerStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ColorPicker<ColorPickerStyleConfiguration.Label>, ColorPickerStyleModifier<SystemColorPickerStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ColorPicker<ColorPickerStyleConfiguration.Label>, ColorPickerStyleModifier<SystemColorPickerStyle>>(255, a2, a3, a4);
    v6 = v5;
    v10[0] = lazy protocol witness table accessor for type ColorPicker<ColorPickerStyleConfiguration.Label> and conformance ColorPicker<A>(v5, v7, v8, v9);
    v10[1] = &protocol witness table for ColorPickerStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ColorPicker<ColorPickerStyleConfiguration.Label>, ColorPickerStyleModifier<SystemColorPickerStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ColorPicker<ColorPickerStyleConfiguration.Label>, ColorPickerStyleModifier<SystemColorPickerStyle>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<ColorPicker<ColorPickerStyleConfiguration.Label>, ColorPickerStyleModifier<SystemColorPickerStyle>>)
  {
    type metadata accessor for ColorPicker<ColorPickerStyleConfiguration.Label>(255, a2, a3, a4);
    type metadata accessor for ColorPickerStyleModifier<DefaultColorPickerStyle>(255, &lazy cache variable for type metadata for ColorPickerStyleModifier<SystemColorPickerStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorPickerStyle and conformance SystemColorPickerStyle, (uint64_t)&type metadata for SystemColorPickerStyle);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ColorPicker<ColorPickerStyleConfiguration.Label>, ColorPickerStyleModifier<SystemColorPickerStyle>>);
  }
}

void type metadata accessor for ColorPicker<ColorPickerStyleConfiguration.Label>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ColorPicker<ColorPickerStyleConfiguration.Label>)
  {
    v4 = type metadata accessor for ColorPicker(0, (uint64_t)&type metadata for ColorPickerStyleConfiguration.Label, (uint64_t)&protocol witness table for ColorPickerStyleConfiguration.Label, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ColorPicker<ColorPickerStyleConfiguration.Label>);
  }
}

void type metadata accessor for ColorPickerStyleModifier<DefaultColorPickerStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for ColorPickerStyleModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type SystemColorPickerStyle and conformance SystemColorPickerStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemColorPickerStyle and conformance SystemColorPickerStyle;
  if (!lazy protocol witness table cache variable for type SystemColorPickerStyle and conformance SystemColorPickerStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SystemColorPickerStyle, &type metadata for SystemColorPickerStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemColorPickerStyle and conformance SystemColorPickerStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ColorPicker<ColorPickerStyleConfiguration.Label> and conformance ColorPicker<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;

  result = lazy protocol witness table cache variable for type ColorPicker<ColorPickerStyleConfiguration.Label> and conformance ColorPicker<A>;
  if (!lazy protocol witness table cache variable for type ColorPicker<ColorPickerStyleConfiguration.Label> and conformance ColorPicker<A>)
  {
    type metadata accessor for ColorPicker<ColorPickerStyleConfiguration.Label>(255, a2, a3, a4);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ColorPicker<A>, v5);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorPicker<ColorPickerStyleConfiguration.Label> and conformance ColorPicker<A>);
  }
  return result;
}

uint64_t TableRowContent.selectionDisabled(_:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char v7;

  v7 = a1 ^ 1;
  type metadata accessor for _TraitWritingTableRowModifier<IsSelectionEnabledTraitKey>(0, a2, a3, a4);
  return Scene.modifier<A>(_:)((uint64_t)&v7, a2, v5);
}

void type metadata accessor for _TraitWritingTableRowModifier<IsSelectionEnabledTraitKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _TraitWritingTableRowModifier<IsSelectionEnabledTraitKey>)
  {
    v4 = type metadata accessor for _TraitWritingTableRowModifier(0, (uint64_t)&type metadata for IsSelectionEnabledTraitKey, (uint64_t)&protocol witness table for IsSelectionEnabledTraitKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<IsSelectionEnabledTraitKey>);
  }
}

uint64_t static IsSelectionEnabledTraitKey.defaultValue.getter()
{
  return 1;
}

ValueMetadata *type metadata accessor for IsSelectionEnabledTraitKey()
{
  return &type metadata for IsSelectionEnabledTraitKey;
}

uint64_t sub_18714E8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingTableRowModifier<IsSelectionEnabledTraitKey>(255, a2, a3, a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for _TraitWritingTableRowModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v5, v7);
}

Swift::Void __swiftcall BoundNavigationPathDetector.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t WeakValue;
  uint64_t v20;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t *Value;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[12];
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  _OWORD v80[3];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[40];

  v1 = v0;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for ObservationTracking?, (void (*)(uint64_t))MEMORY[0x1E0DEFD40]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = &v56[-v4];
  v6 = type metadata accessor for ObservationTracking();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v56[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x1E0DEFD28]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v56[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = &v56[-v17];
  if ((*(_BYTE *)AGGraphGetValue() & 1) == 0)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    WeakValue = AGGraphGetWeakValue();
    if (WeakValue)
    {
      v20 = *(unsigned __int8 *)(WeakValue + 8);
      if (v20 != 6 && (v20 != 1 || *(_QWORD *)(WeakValue + 16) != 2))
      {
        v68 = *(_QWORD *)(WeakValue + 16);
        v67 = *(_QWORD *)WeakValue;
        v22 = *(_DWORD *)AGGraphGetValue() >> 1;
        if (v22 != *(_DWORD *)(v1 + 64))
        {
          *(_DWORD *)(v1 + 64) = v22;
          swift_release();
          *(_QWORD *)(v1 + 80) = 0;
          swift_release();
          *(_QWORD *)(v1 + 88) = 0;
          swift_release();
          *(_QWORD *)(v1 + 72) = 0;
          *(_QWORD *)(v1 + 52) = 0xFFFFFFFFLL;
          *(_BYTE *)(v1 + 60) = 0;
        }
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        v23 = AGGraphGetWeakValue();
        if (v23)
        {
          outlined init with copy of NavigationAuthority?(v23, (uint64_t)&v79);
          if (*((_QWORD *)&v79 + 1) == 1)
          {
            outlined destroy of NavigationAuthority?((uint64_t)&v79);
            return;
          }
          v60 = v20;
          outlined init with take of NavigationAuthority((uint64_t)&v79, (uint64_t)v86);
          v66 = *(_QWORD *)(v1 + 80);
          v24 = *(_DWORD *)(v1 + 8);
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
          LODWORD(v61) = v24;
          v69 = v25;
          Value = (uint64_t *)AGGraphGetValue();
          v27 = Value[1];
          v64 = *Value;
          v65 = v27;
          v63 = Value[2];
          swift_retain();
          swift_retain();
          swift_retain();
          v28 = v66;
          swift_retain();
          v62 = Transaction.animation.getter();
          swift_release();
          swift_release();
          swift_release();
          if (v28)
          {
            if (v62)
            {
              swift_retain();
              LODWORD(v65) = static Animation.== infix(_:_:)();
              swift_release_n();
              v30 = swift_release();
              if ((v65 & 1) == 0)
                goto LABEL_20;
LABEL_18:
              LODWORD(v65) = 0;
              goto LABEL_21;
            }
          }
          else
          {
            v30 = v62;
            if (!v62)
              goto LABEL_18;
          }
          swift_release();
LABEL_20:
          v31 = AGGraphGetValue();
          v65 = *(_QWORD *)(v31 + 8);
          v63 = *(_QWORD *)(v31 + 16);
          swift_retain();
          swift_retain();
          swift_retain();
          v64 = Transaction.animation.getter();
          swift_release();
          swift_release();
          swift_release();
          v30 = swift_release();
          *(_QWORD *)(v1 + 80) = v64;
          LODWORD(v65) = 1;
LABEL_21:
          LODWORD(v64) = *(unsigned __int8 *)(*(_QWORD *)(v1 + 40)
                                            + OBJC_IVAR____TtCV7SwiftUI27BoundNavigationPathDetector15PathObservation_updateObserved);
          MEMORY[0x1E0C80A78](v30, v29);
          *(_QWORD *)&v56[-16] = v1;
          type metadata accessor for (AnyNavigationPath, Bool)();
          _withObservation<A>(do:)();
          v32 = v79;
          v33 = BYTE8(v79);
          outlined init with copy of ObservationTracking._AccessList?((uint64_t)v18, (uint64_t)v14);
          v66 = v32;
          swift_retain();
          ObservationTracking.init(_:)();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v5, v10, v6);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
          swift_retain();
          BoundNavigationPathDetector.PathObservation.tracking.setter((uint64_t)v5);
          swift_release();
          swift_retain_n();
          static ObservationTracking._installTracking(_:willSet:didSet:)();
          swift_release_n();
          v34 = v33 | v64;
          LODWORD(v32) = *(_DWORD *)(v1 + 8);
          v35 = *(_QWORD *)(AGGraphGetValue() + 8);
          v36 = *(_QWORD *)(v1 + 88);
          LODWORD(v62) = v32;
          swift_retain();
          if (v36)
          {
            swift_retain();
            v37 = v35;
            v38 = dispatch thunk of AnyLocation.isEqual(to:)();
            swift_release();
            LODWORD(v64) = v38 ^ 1;
            v35 = v37;
          }
          else
          {
            LODWORD(v64) = 1;
          }
          swift_retain();
          swift_release();
          *(_QWORD *)(v1 + 88) = v35;
          if ((v34 & 1) != 0)
          {
            v63 = v35;
            if (*(_QWORD *)(v1 + 72))
            {
              v39 = v66;
              v40 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 96);
              swift_retain();
              v41 = swift_retain();
              v42 = v40(v41);
              v43 = v39;
              LODWORD(v39) = v42;
              swift_release();
              swift_release();
              v44 = v39 ^ 1;
              if (((v65 | v64 | v39 ^ 1) & 1) == 0)
                goto LABEL_46;
LABEL_33:
              if ((UpdateCycleDetector.dispatch(label:isDebug:)() & 1) != 0)
              {
                if (((v65 | v64) & 1) == 0)
                {
                  if ((v44 & 1) == 0)
                  {
LABEL_46:
                    swift_release();
LABEL_47:
                    swift_release();
                    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
                    outlined destroy of IntelligenceElement?((uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x1E0DEFD28]);
                    swift_release();
                    outlined destroy of NavigationAuthority((uint64_t)v86);
                    return;
                  }
                  v53 = (uint64_t *)AGGraphGetValue();
                  v54 = *v53;
                  v55 = v53[1];
                  AGGraphGetValue();
                  swift_retain();
                  swift_retain_n();
                  swift_retain_n();
                  swift_retain();
                  LODWORD(v69) = Transaction.disablesAnimations.getter();
                  v65 = Transaction.animation.getter();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  *(_QWORD *)&v79 = v43;
                  *((_QWORD *)&v79 + 1) = v54;
                  *(_OWORD *)((char *)v80 + 8) = 0u;
                  *(_OWORD *)((char *)&v80[1] + 8) = 0u;
                  *(_QWORD *)&v80[0] = v55;
                  *((_QWORD *)&v80[2] + 1) = 0;
                  LOBYTE(v81) = 6;
                  *((_QWORD *)&v81 + 1) = v67;
                  *(_QWORD *)&v82 = v60;
                  *((_QWORD *)&v82 + 1) = v68;
                  v83 = 0uLL;
                  *(_QWORD *)&v84 = 0;
                  BYTE8(v84) = v69 & 1;
                  v85 = v65;
                  if ((*(_BYTE *)(v1 + 28) & 1) == 0)
                  {
                    v76 = v83;
                    v77 = v84;
                    v78 = v85;
                    v72 = v80[1];
                    v73 = v80[2];
                    v74 = v81;
                    v75 = v82;
                    v70 = v79;
                    v71 = v80[0];
                    NavigationAuthority.enqueueRequest(_:)(&v70);
                  }
                  outlined release of NavigationRequest((uint64_t)&v79);
LABEL_45:
                  *(_QWORD *)(v1 + 72) = v43;
                  swift_retain();
                  goto LABEL_46;
                }
                v57 = v44;
                swift_release();
                v45 = (uint64_t *)AGGraphGetValue();
                v46 = v45[1];
                v65 = *v45;
                v61 = v46;
                v69 = v45[2];
                v47 = (uint64_t *)AGGraphGetValue();
                v48 = v47[1];
                v59 = *v47;
                v49 = *(_QWORD *)AGGraphGetValue();
                swift_retain();
                swift_retain_n();
                swift_retain_n();
                swift_retain_n();
                v50 = v59;
                swift_retain_n();
                swift_retain_n();
                v58 = v49;
                LODWORD(v64) = Transaction.disablesAnimations.getter();
                v62 = Transaction.animation.getter();
                swift_release();
                swift_release();
                swift_release();
                v51 = v61;
                swift_release();
                v52 = v65;
                swift_release();
                swift_release();
                *(_QWORD *)&v79 = v52;
                *((_QWORD *)&v79 + 1) = v51;
                *(_QWORD *)&v80[0] = v69;
                *((_QWORD *)&v80[0] + 1) = v50;
                v80[1] = v48;
                v80[2] = 0uLL;
                LOBYTE(v81) = 1;
                *((_QWORD *)&v81 + 1) = v67;
                *(_QWORD *)&v82 = v60;
                *((_QWORD *)&v82 + 1) = v68;
                v83 = 0uLL;
                *(_QWORD *)&v84 = 0;
                BYTE8(v84) = v64 & 1;
                v85 = v62;
                if (*(_BYTE *)(v1 + 28) != 1)
                {
                  v76 = v83;
                  v77 = v84;
                  v78 = v85;
                  v72 = v80[1];
                  v73 = v80[2];
                  v74 = v81;
                  v75 = v82;
                  v70 = v79;
                  v71 = v80[0];
                  NavigationAuthority.enqueueRequest(_:)(&v70);
                }
                outlined release of NavigationRequest((uint64_t)&v79);
                LOBYTE(v44) = v57;
                v43 = v66;
              }
              else
              {
                swift_release();
              }
              if ((v44 & 1) == 0)
                goto LABEL_47;
              goto LABEL_45;
            }
            v44 = 1;
          }
          else
          {
            if (((v65 | v64) & 1) == 0)
              goto LABEL_46;
            v63 = v35;
            v44 = 0;
          }
          v43 = v66;
          goto LABEL_33;
        }
      }
    }
  }
}

uint64_t closure #1 in BoundNavigationPathDetector.updateValue()@<X0>(uint64_t a1@<X8>)
{
  char v2;
  uint64_t result;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  AGGraphGetValue();
  swift_retain();
  v2 = dispatch thunk of AnyLocation.update()();
  result = swift_release();
  *(_BYTE *)(a1 + 8) = v2 & 1;
  return result;
}

uint64_t BoundNavigationPathDetector.PathObservation.tracking.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[24];

  v2 = v1;
  v4 = type metadata accessor for ObservationTracking();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = v2 + OBJC_IVAR____TtCV7SwiftUI27BoundNavigationPathDetector15PathObservation_tracking;
  swift_beginAccess();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4))
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
    ObservationTracking.cancel()();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
  *(_BYTE *)(v2 + OBJC_IVAR____TtCV7SwiftUI27BoundNavigationPathDetector15PathObservation_updateObserved) = 0;
  swift_beginAccess();
  outlined assign with take of ObservationTracking?(a1, v9);
  return swift_endAccess();
}

unint64_t implicit closure #7 in BoundNavigationPathDetector.updateValue()()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for ObservedAttribute.destroy() in conformance BoundNavigationPathDetector()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v1 = type metadata accessor for ObservationTracking();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v0 + 40) + OBJC_IVAR____TtCV7SwiftUI27BoundNavigationPathDetector15PathObservation_tracking;
  swift_beginAccess();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v6, 1, v1);
  if (!(_DWORD)result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v6, v1);
    ObservationTracking.cancel()();
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody._destroySelf(_:) in conformance BoundNavigationPathDetector(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v2 = type metadata accessor for ObservationTracking();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 40) + OBJC_IVAR____TtCV7SwiftUI27BoundNavigationPathDetector15PathObservation_tracking;
  swift_beginAccess();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2);
  if (!(_DWORD)result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
    ObservationTracking.cancel()();
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return result;
}

uint64_t BoundNavigationPathDetector.PathObservation.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of IntelligenceElement?(v0 + OBJC_IVAR____TtCV7SwiftUI27BoundNavigationPathDetector15PathObservation_tracking, &lazy cache variable for type metadata for ObservationTracking?, (void (*)(uint64_t))MEMORY[0x1E0DEFD40]);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for BoundNavigationPathDetector.PathObservation()
{
  return type metadata accessor for BoundNavigationPathDetector.PathObservation();
}

uint64_t type metadata accessor for BoundNavigationPathDetector.PathObservation()
{
  uint64_t result;

  result = type metadata singleton initialization cache for BoundNavigationPathDetector.PathObservation;
  if (!type metadata singleton initialization cache for BoundNavigationPathDetector.PathObservation)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for BoundNavigationPathDetector.PathObservation()
{
  unint64_t v0;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(319, &lazy cache variable for type metadata for ObservationTracking?, (void (*)(uint64_t))MEMORY[0x1E0DEFD40]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t outlined init with copy of NavigationAuthority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of NavigationAuthority?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in BoundNavigationPathDetector.updateValue()@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in BoundNavigationPathDetector.updateValue()(a1);
}

void type metadata accessor for (AnyNavigationPath, Bool)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (AnyNavigationPath, Bool))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyNavigationPath, Bool));
  }
}

void partial apply for closure #2 in BoundNavigationPathDetector.updateValue()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR____TtCV7SwiftUI27BoundNavigationPathDetector15PathObservation_updateObserved) = 1;
}

uint64_t outlined release of NavigationRequest(uint64_t a1)
{
  outlined consume of NavigationRequest.Action(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  swift_release();
  return a1;
}

uint64_t outlined assign with take of ObservationTracking?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for ObservationTracking?, (void (*)(uint64_t))MEMORY[0x1E0DEFD40]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t destroy for BoundNavigationPathDetector()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for BoundNavigationPathDetector(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 53) = *(_QWORD *)(a2 + 53);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BoundNavigationPathDetector(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for BoundNavigationPathDetector(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BoundNavigationPathDetector(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BoundNavigationPathDetector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BoundNavigationPathDetector()
{
  return &type metadata for BoundNavigationPathDetector;
}

unint64_t lazy protocol witness table accessor for type BoundNavigationPathDetector and conformance BoundNavigationPathDetector()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BoundNavigationPathDetector and conformance BoundNavigationPathDetector;
  if (!lazy protocol witness table cache variable for type BoundNavigationPathDetector and conformance BoundNavigationPathDetector)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BoundNavigationPathDetector, &type metadata for BoundNavigationPathDetector);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BoundNavigationPathDetector and conformance BoundNavigationPathDetector);
  }
  return result;
}

BOOL _defaultSwiftUIActivityEnvironmentLoggingEnabled.getter()
{
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled;
}

uint64_t _defaultSwiftUIActivityEnvironmentLoggingEnabled.setter(Swift::Bool a1)
{
  uint64_t result;

  result = swift_beginAccess();
  _defaultSwiftUIActivityEnvironmentLoggingEnabled = a1;
  return result;
}

uint64_t (*_defaultSwiftUIActivityEnvironmentLoggingEnabled.modify())()
{
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

void UserActivityTrackingInfo.userActivity.setter(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  id v5;
  id v6;
  id v7;
  char v8;
  id v9;
  id v10;

  v2 = v1;
  v4 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_userActivity);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_userActivity) = a1;
  v5 = a1;
  v10 = v5;
  if (a1)
  {
    if (v4)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSUserActivity);
      v6 = v4;
      v7 = v10;
      v8 = static NSObject.== infix(_:_:)();

      if ((v8 & 1) != 0)
      {
        v4 = v6;
        v10 = v7;
LABEL_7:

        v4 = v10;
        goto LABEL_8;
      }
    }
    else
    {
      v9 = v5;
    }
    objc_msgSend(v10, sel_setDelegate_, v2);
    goto LABEL_7;
  }
LABEL_8:

}

Swift::Void __swiftcall UserActivityTrackingInfo.userActivityWillSave(_:)(NSUserActivity a1)
{
  objc_class *v1;
  NSObject *v3;
  NSUserActivity *v4;
  uint64_t v5;
  void *v6;
  objc_class *v7;
  objc_class *v8;
  char isEscapingClosureAtFileLocation;
  _QWORD v10[6];

  if (pthread_main_np())
  {
    UserActivityTrackingInfo.updateUserActivity(_:)(a1);
  }
  else
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v3 = static OS_dispatch_queue.main.getter();
    v4 = (NSUserActivity *)swift_allocObject();
    v4[2].super.isa = v1;
    v4[3].super.isa = a1.super.isa;
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = partial apply for closure #1 in UserActivityTrackingInfo.userActivityWillSave(_:);
    *(_QWORD *)(v5 + 24) = v4;
    v10[4] = partial apply for thunk for @callee_guaranteed () -> ();
    v10[5] = v5;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1107296256;
    v10[2] = thunk for @escaping @callee_guaranteed () -> ();
    v10[3] = &block_descriptor_11;
    v6 = _Block_copy(v10);
    v7 = v1;
    v8 = a1.super.isa;
    swift_retain();
    swift_release();
    dispatch_sync(v3, v6);

    _Block_release(v6);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
}

Swift::Void __swiftcall UserActivityTrackingInfo.updateUserActivity(_:)(NSUserActivity a1)
{
  char *v1;
  objc_class *v2;
  BOOL v3;
  void *v4;
  uint64_t Strong;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  Swift::UInt32 v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *(objc_class **)&v1[OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_userActivity];
  if (v2)
    v3 = v2 == a1.super.isa;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v1;
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v7 = Strong;
      v8 = (uint64_t *)&v1[OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_handlers];
      v9 = swift_beginAccess();
      MEMORY[0x1E0C80A78](v9, v10);
      v11 = swift_bridgeObjectRetain();
      v12 = specialized Sequence.compactMap<A>(_:)(v11, (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t), uint64_t))partial apply for closure #1 in UserActivityTrackingInfo.updateUserActivity(_:));
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(v12 + 16);
      if (v13)
      {
        v28 = v7;
        swift_bridgeObjectRetain();
        for (i = 0; i != v13; ++i)
        {
          v15 = *(_DWORD *)(v12 + 4 * i + 32);
          swift_beginAccess();
          v16 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
          if ((v17 & 1) != 0)
          {
            v18 = v16;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v20 = *v8;
            v29 = *v8;
            *v8 = 0x8000000000000000;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              v20 = v29;
            }
            specialized _NativeDictionary._delete(at:)(v18, v20);
            *v8 = v20;
            swift_release();
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
        }
        swift_bridgeObjectRelease();
        v7 = v28;
      }
      v21 = *(_QWORD *)(*v8 + 16);
      swift_bridgeObjectRelease();
      if (v21)
      {
        if (v13)
        {
          v22 = *(void **)(v7 + 112);
          *(_QWORD *)(v7 + 112) = v4;

          v23 = v4;
        }
      }
      else
      {
        v24 = *(void **)(v7 + 112);
        *(_QWORD *)(v7 + 112) = 0;

        v25 = (void *)MEMORY[0x18D760234](v7 + 40);
        if (v25)
        {
          v26 = v25;
          objc_msgSend(v25, sel_setUserActivity_, 0);

        }
        else
        {
          v27 = *(void **)(v7 + 80);
          *(_QWORD *)(v7 + 80) = 0;

        }
      }
      -[objc_class setNeedsSave:](a1.super.isa, sel_setNeedsSave_, 0);
      swift_release();
    }
  }
}

uint64_t UserActivityTrackingInfo.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  void *v8;
  id v9;
  Swift::String v10;
  Swift::String v11;
  void *v12;
  id v13;
  void *v14;
  Swift::String v15;

  _StringGuts.grow(_:)(96);
  v1._countAndFlagsBits = 0xD000000000000027;
  v1._object = (void *)0x8000000187BD8BF0;
  String.append(_:)(v1);
  swift_weakLoadStrong();
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, &lazy cache variable for type metadata for SceneBridge?, v2, (uint64_t (*)(uint64_t))type metadata accessor for SceneBridge, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v3._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x8000000187BD8C20;
  v4._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v4);
  swift_beginAccess();
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6976697463610A2CLL;
  v6._object = (void *)0xEF20657079547974;
  String.append(_:)(v6);
  v7 = OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_userActivity;
  v8 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_userActivity);
  if (v8)
  {
    v9 = objc_msgSend(v8, sel_activityType);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v10._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._object = (void *)0x8000000187BD8C40;
  v11._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v11);
  v12 = *(void **)(v0 + v7);
  if (v12)
  {
    v13 = objc_msgSend(v12, sel_title);
    if (v13)
    {
      v14 = v13;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
  }
  v15._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t SceneBridge.publishEvent(event:type:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  _BYTE v15[40];

  if (static SceneBridge._devNullSceneBridge)
    v8 = static SceneBridge._devNullSceneBridge == v4;
  else
    v8 = 0;
  if (!v8)
  {
    AnyHashable.init<A>(_:)();
    swift_beginAccess();
    v9 = *(_QWORD *)(v4 + 16);
    if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15), (v11 & 1) != 0))
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
      swift_endAccess();
      swift_bridgeObjectRetain();
      outlined destroy of AnyHashable((uint64_t)v15);
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      if (*(_QWORD *)(v12 + 16))
      {
        specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
        if ((v13 & 1) != 0)
        {
          swift_retain();
          swift_bridgeObjectRelease();
          outlined destroy of AnyHashable((uint64_t)v15);
          PassthroughSubject.send(_:)();
          swift_release();
          return 1;
        }
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_endAccess();
    }
    outlined destroy of AnyHashable((uint64_t)v15);
  }
  SceneBridge.enqueueUnpublishedEvent(_:for:)(a1, a3, a4);
  return 0;
}

uint64_t SceneBridge.enqueueUnpublishedEvent(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  _OWORD v18[2];
  char *v19;

  v19 = (char *)MEMORY[0x1E0DEE9D8];
  v7 = (uint64_t *)(v3 + 168);
  swift_beginAccess();
  v8 = *(_QWORD *)(v3 + 168);
  if (*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)(v11);
      v12 = v19;
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  v12 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_6:
  outlined init with copy of Any(a1, (uint64_t)v18);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
  v14 = *((_QWORD *)v12 + 2);
  v13 = *((_QWORD *)v12 + 3);
  if (v14 >= v13 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v12);
  *((_QWORD *)v12 + 2) = v14 + 1;
  outlined init with take of Any(v18, &v12[32 * v14 + 32]);
  v19 = v12;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v17 = *v7;
  *v7 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2, a3, isUniquelyReferenced_nonNull_native);
  *v7 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t SceneBridge.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  outlined consume of (preferring: Set<String>, allowing: Set<String>)?(*(_QWORD *)(v0 + 96));

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SceneBridge.__deallocating_deinit()
{
  SceneBridge.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance SceneBridge@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

void protocol witness for static PreferenceKey.defaultValue.getter in conformance SceneBridge.UserActivityPreferenceKey(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance SceneBridge.ValidTestCasesPreferenceKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;

  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t specialized Set.union<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::Int *v11;
  Swift::Int v12;
  Swift::Int v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  Swift::Int v17;
  uint64_t v18;

  v2 = result;
  v3 = 0;
  v18 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (Swift::Int *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::UInt v14;
  uint64_t v15;

  v2 = result;
  v3 = 0;
  v15 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    result = specialized Set._Variant.insert(_:)(&v14, *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10), &lazy cache variable for type metadata for _SetStorage<UniqueID>, (void (*)(void))lazy protocol witness table accessor for type UniqueID and conformance UniqueID);
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t SceneBridge.description.getter()
{
  uint64_t v0;
  Swift::String v1;

  MEMORY[0x18D760234](v0 + 40);
  type metadata accessor for UIViewController?();
  v1._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return 0xD000000000000022;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance SceneBridge()
{
  return SceneBridge.description.getter();
}

uint64_t View.advertiseUserActivity(_:isActive:sceneBridge:handler:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;

  v16 = swift_allocObject();
  *(_BYTE *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = a4;
  *(_QWORD *)(v16 + 32) = a1;
  *(_QWORD *)(v16 + 40) = a2;
  *(_QWORD *)(v16 + 48) = a5;
  *(_QWORD *)(v16 + 56) = a6;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  View.transformIdentifiedPreference<A>(_:transform:)((uint64_t)&type metadata for SceneBridge.UserActivityPreferenceKey, (uint64_t)partial apply for closure #1 in View.advertiseUserActivity(_:isActive:sceneBridge:handler:), v16, a7, (uint64_t)&type metadata for SceneBridge.UserActivityPreferenceKey, a8, (uint64_t)&protocol witness table for SceneBridge.UserActivityPreferenceKey);
  return swift_release();
}

uint64_t *closure #1 in View.advertiseUserActivity(_:isActive:sceneBridge:handler:)(uint64_t *result, Swift::UInt32 a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  char v17;
  uint64_t inited;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;

  if ((a3 & 1) != 0 && a4)
  {
    v13 = result;
    v14 = result[1];
    if (v14)
    {
      v15 = result[2];
      if (*result == a5 && v14 == a6)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        if ((v17 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
      }
      v23 = swift_allocObject();
      *(_QWORD *)(v23 + 16) = a7;
      *(_QWORD *)(v23 + 24) = a8;
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@guaranteed NSUserActivity) -> (@unowned Bool), v23, a2, isUniquelyReferenced_nonNull_native);
      v20 = v15;
      swift_bridgeObjectRelease();
      v25 = *v13;
      v26 = v13[1];
      swift_bridgeObjectRetain();
      v21 = v25;
      v22 = v26;
      goto LABEL_13;
    }
LABEL_10:
    type metadata accessor for _ContiguousArrayStorage<(ViewIdentity, (_:))>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(ViewIdentity, (_:))>, (unint64_t *)&lazy cache variable for type metadata for (ViewIdentity, (_:)), (void (*)(uint64_t))type metadata accessor for (_:));
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = a7;
    *(_QWORD *)(v19 + 24) = a8;
    *(_DWORD *)(inited + 32) = a2;
    *(_QWORD *)(inited + 40) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed NSUserActivity) -> (@unowned Bool);
    *(_QWORD *)(inited + 48) = v19;
    v20 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    swift_setDeallocating();
    type metadata accessor for (Int, (CountingIndex<Int>, CountingIndex<Int>))(0, (unint64_t *)&lazy cache variable for type metadata for (ViewIdentity, ()), (void (*)(uint64_t))type metadata accessor for ());
    swift_retain();
    swift_bridgeObjectRetain();
    swift_arrayDestroy();
    v21 = *v13;
    v22 = v13[1];
LABEL_13:
    result = (uint64_t *)outlined consume of FocusStore?(v21, v22);
    *v13 = a5;
    v13[1] = a6;
    v13[2] = v20;
  }
  return result;
}

uint64_t View.userActivity(_:isActive:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  double v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];

  v31 = a4;
  v32 = a5;
  v30 = a3;
  v29 = a1;
  v13 = *(_QWORD *)(a6 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v8, v17, v15);
  v18 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v19 = (v18 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v18 + v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a6;
  *(_QWORD *)(v21 + 24) = a7;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v21 + v18, v16, a6);
  v22 = v21 + v19;
  *(_QWORD *)v22 = v29;
  *(_QWORD *)(v22 + 8) = a2;
  *(_BYTE *)(v22 + 16) = v30;
  v23 = (_QWORD *)(v21 + v20);
  v24 = v32;
  *v23 = v31;
  v23[1] = v24;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>, (uint64_t)&type metadata for SceneBridge.UserActivityPreferenceKey, (uint64_t)&protocol witness table for SceneBridge.UserActivityPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for IdentifiedPreferenceTransformModifier);
  v25 = type metadata accessor for ModifiedContent();
  v33[0] = a7;
  v33[1] = &protocol witness table for IdentifiedPreferenceTransformModifier<A>;
  swift_bridgeObjectRetain();
  swift_retain();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v25, v33);
  result = default argument 0 of SceneBridgeReader.init(sceneBridge:handler:)();
  *(_QWORD *)a8 = result;
  *(_BYTE *)(a8 + 8) = v27 & 1;
  *(_QWORD *)(a8 + 16) = partial apply for closure #1 in View.userActivity(_:isActive:_:);
  *(_QWORD *)(a8 + 24) = v21;
  return result;
}

uint64_t closure #1 in View.userActivity(_:isActive:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;

  v15 = swift_allocObject();
  *(_BYTE *)(v15 + 16) = a5;
  *(_QWORD *)(v15 + 24) = a6;
  *(_QWORD *)(v15 + 32) = a7;
  swift_retain();
  View.advertiseUserActivity(_:isActive:sceneBridge:handler:)(a3, a4, a5, a1, (uint64_t)partial apply for closure #1 in closure #1 in View.userActivity(_:isActive:_:), v15, a8, a9);
  return swift_release();
}

uint64_t sub_1871512F0()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.userActivity(_:isActive:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  return closure #1 in View.userActivity(_:isActive:_:)(a1, v1 + v4, *(_QWORD *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(v1 + ((v5 + 31) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 31) & 0xFFFFFFFFFFFFFFF8) + 8), v2, *(_QWORD *)(v1 + 24));
}

uint64_t View.userActivity<A>(_:element:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  _BOOL4 v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a2;
  v26 = a8;
  v27 = a4;
  v28 = a9;
  v29 = a1;
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v17 = MEMORY[0x1E0C80A78](v13, v16);
  v19 = (char *)&v26 - v18;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(a7 - 8) + 48))(a3, 1, a7, v17) != 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v19, a3, v13);
  v21 = (*(unsigned __int8 *)(v14 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v22 = (char *)swift_allocObject();
  *((_QWORD *)v22 + 2) = a6;
  *((_QWORD *)v22 + 3) = a7;
  v23 = v26;
  *((_QWORD *)v22 + 4) = v26;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v22[v21], v19, v13);
  v24 = &v22[(v15 + v21 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v24 = v27;
  *((_QWORD *)v24 + 1) = a5;
  swift_retain();
  View.userActivity(_:isActive:_:)(v29, v30, v20, (uint64_t)partial apply for elementHandler #1 <A><A1>(_:) in View.userActivity<A>(_:element:_:), (uint64_t)v22, a6, v23, v28);
  return swift_release();
}

uint64_t elementHandler #1 <A><A1>(_:) in View.userActivity<A>(_:element:_:)(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;

  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v22 - v13;
  v15 = *(_QWORD *)(a6 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v14, a2, v10, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a6) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v14, a6);
  a3(v20, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, a6);
}

uint64_t sub_187151660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(type metadata accessor for Optional() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v1 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v3, 1, v1))
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for elementHandler #1 <A><A1>(_:) in View.userActivity<A>(_:element:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(type metadata accessor for Optional() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v1 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return elementHandler #1 <A><A1>(_:) in View.userActivity<A>(_:element:_:)(a1, v1 + v6, *(void (**)(char *, uint64_t))v7, *(_QWORD *)(v7 + 8), v3, v4);
}

void View.onContinueUserActivity(_:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v25 = a3;
  v26 = a4;
  v24 = a1;
  v10 = *(_QWORD *)(a5 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, v6, v14, v12);
  v15 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v16 = (v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a5;
  *(_QWORD *)(v17 + 24) = a6;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v17 + v15, v13, a5);
  v18 = (_QWORD *)(v17 + v16);
  *v18 = v24;
  v18[1] = a2;
  v19 = (_QWORD *)(v17 + ((v16 + 23) & 0xFFFFFFFFFFFFFFF8));
  v20 = v26;
  *v19 = v25;
  v19[1] = v20;
  type metadata accessor for PassthroughSubject<Any, Never>();
  v22 = v21;
  v23 = lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>, 255, (uint64_t (*)(uint64_t))type metadata accessor for PassthroughSubject<Any, Never>, MEMORY[0x1E0C95F48]);
  swift_bridgeObjectRetain();
  swift_retain();
  v27 = v22;
  v28 = a5;
  v29 = v23;
  v30 = a6;
  type metadata accessor for SubscriptionView();
}

uint64_t sub_1871518C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  char v3;

  result = default argument 0 of SceneBridgeReader.init(sceneBridge:handler:)();
  *(_QWORD *)v0 = result;
  *(_BYTE *)(v0 + 8) = v3 & 1;
  *(_QWORD *)(v0 + 16) = partial apply for closure #1 in View.onContinueUserActivity(_:perform:);
  *(_QWORD *)(v0 + 24) = v1;
  return result;
}

void closure #1 in View.onContinueUserActivity(_:perform:)(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v16 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSUserActivity);
  v21 = specialized static SceneBridge.sceneBridgePublisher(_:identifier:sceneBridge:)(v16, a2, a3, a1);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a4;
  v17[3] = a5;
  v17[4] = a2;
  v17[5] = a3;
  type metadata accessor for PassthroughSubject<Any, Never>();
  v19 = v18;
  v20 = lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>, 255, (uint64_t (*)(uint64_t))type metadata accessor for PassthroughSubject<Any, Never>, MEMORY[0x1E0C95F48]);
  View.onReceive<A>(_:perform:)((uint64_t)&v21, (uint64_t)partial apply for closure #1 in closure #1 in View.onContinueUserActivity(_:perform:), a6, v19, a7, v20, a8);
}

uint64_t sub_1871519EC()
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  return swift_release();
}

uint64_t sub_187151A2C()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in View.onContinueUserActivity(_:perform:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64)
      + ((*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in View.onContinueUserActivity(_:perform:)(a1, *(_QWORD *)(v2 + v4), *(_QWORD *)(v2 + v4 + 8), *(_QWORD *)(v2 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), v3, *(_QWORD *)(v2 + 24), a2);
}

void closure #1 in closure #1 in View.onContinueUserActivity(_:perform:)(uint64_t a1, void (*a2)())
{
  void *v3;
  _BYTE v4[32];

  outlined init with copy of Any(a1, (uint64_t)v4);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSUserActivity);
  if ((swift_dynamicCast() & 1) != 0)
  {
    a2();

  }
}

uint64_t closure #1 in closure #1 in View.onOpenURL(perform:)(uint64_t a1, void (*a2)(_BYTE *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  void (*v14)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE v16[32];

  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, &lazy cache variable for type metadata for OpenURLContext?, 255, (uint64_t (*)(uint64_t))type metadata accessor for OpenURLContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v16[-v6];
  v8 = type metadata accessor for OpenURLContext();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(a1, (uint64_t)v16);
  v13 = swift_dynamicCast();
  v14 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if ((v13 & 1) != 0)
  {
    v14(v7, 0, 1, v8);
    outlined init with take of TableCellFormula((uint64_t)v7, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for OpenURLContext);
    a2(v12);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for OpenURLContext);
  }
  else
  {
    v14(v7, 1, 1, v8);
    return outlined destroy of URL?((uint64_t)v7, &lazy cache variable for type metadata for OpenURLContext?, (uint64_t (*)(uint64_t))type metadata accessor for OpenURLContext);
  }
}

uint64_t objectdestroy_8Tm()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  swift_release();
  return swift_deallocObject();
}

uint64_t closure #1 in closure #1 in View.onOpenURL(perform:)(uint64_t a1, void (*a2)(char *, id *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  id v15;
  id v17[4];

  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, &lazy cache variable for type metadata for OpenURLContext?, 255, (uint64_t (*)(uint64_t))type metadata accessor for OpenURLContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v17 - v6;
  v8 = type metadata accessor for OpenURLContext();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)v17);
  v13 = swift_dynamicCast();
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if ((v13 & 1) != 0)
  {
    v14(v7, 0, 1, v8);
    outlined init with take of TableCellFormula((uint64_t)v7, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for OpenURLContext);
    v17[0] = *(id *)&v12[*(int *)(v8 + 20)];
    v15 = v17[0];
    a2(v12, v17);

    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for OpenURLContext);
  }
  else
  {
    v14(v7, 1, 1, v8);
    return outlined destroy of URL?((uint64_t)v7, &lazy cache variable for type metadata for OpenURLContext?, (uint64_t (*)(uint64_t))type metadata accessor for OpenURLContext);
  }
}

uint64_t View.handlesExternalEvents(preferring:allowing:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  View.transformPreference<A>(_:_:)();
  return swift_release();
}

uint64_t closure #1 in View.handlesExternalEvents(preferring:allowing:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = a1[1];
    swift_bridgeObjectRetain();
    outlined copy of (preferring: Set<String>, allowing: Set<String>)?(v6);
    a2 = specialized Set.union<A>(_:)(a2, v6);
    v8 = swift_bridgeObjectRetain();
    a3 = specialized Set.union<A>(_:)(v8, v7);
    result = outlined consume of (preferring: Set<String>, allowing: Set<String>)?(v6);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }
  *a1 = a2;
  a1[1] = a3;
  return result;
}

uint64_t sub_187152054()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.handlesExternalEvents(preferring:allowing:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in View.handlesExternalEvents(preferring:allowing:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

id OpenURLOptions.uiSceneOpenURLOptions.getter()
{
  id *v0;

  return *v0;
}

void OpenURLOptions.uiSceneOpenURLOptions.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*OpenURLOptions.uiSceneOpenURLOptions.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t type metadata accessor for UserActivityTrackingInfo()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for OpenURLOptions()
{
  return &type metadata for OpenURLOptions;
}

uint64_t sub_1871520F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>, (uint64_t)&type metadata for SceneBridge.UserActivityPreferenceKey, (uint64_t)&protocol witness table for SceneBridge.UserActivityPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for IdentifiedPreferenceTransformModifier);
  v2 = type metadata accessor for ModifiedContent();
  v7[0] = v1;
  v7[1] = &protocol witness table for IdentifiedPreferenceTransformModifier<A>;
  v3 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  v5 = type metadata accessor for SceneBridgeReader(255, v2, v3, v4);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for SceneBridgeReader<A>, v5);
}

uint64_t sub_187152198(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for IdentifiedPreferenceTransformModifier<SceneBridge.UserActivityPreferenceKey>, (uint64_t)&type metadata for SceneBridge.UserActivityPreferenceKey, (uint64_t)&protocol witness table for SceneBridge.UserActivityPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for IdentifiedPreferenceTransformModifier);
  v2 = type metadata accessor for ModifiedContent();
  v7[0] = v1;
  v7[1] = &protocol witness table for IdentifiedPreferenceTransformModifier<A>;
  v3 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  v5 = type metadata accessor for SceneBridgeReader(255, v2, v3, v4);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for SceneBridgeReader<A>, v5);
}

void sub_18715223C()
{
  type metadata accessor for PassthroughSubject<Any, Never>();
  lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>, 255, (uint64_t (*)(uint64_t))type metadata accessor for PassthroughSubject<Any, Never>, MEMORY[0x1E0C95F48]);
  type metadata accessor for SubscriptionView();
}

uint64_t sub_187152294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for SceneBridgeReader(255, a1, (uint64_t)&protocol witness table for SubscriptionView<A, B>, a4);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for SceneBridgeReader<A>, v4);
}

uint64_t sub_1871522CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<SceneBridge.ActivationConditionsPreferenceKey>, (uint64_t)&type metadata for SceneBridge.ActivationConditionsPreferenceKey, (uint64_t)&protocol witness table for SceneBridge.ActivationConditionsPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<SceneBridge.ActivationConditionsPreferenceKey> and conformance _PreferenceTransformModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<SceneBridge.ActivationConditionsPreferenceKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<SceneBridge.ActivationConditionsPreferenceKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<SceneBridge.ActivationConditionsPreferenceKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<SceneBridge.ActivationConditionsPreferenceKey>, (uint64_t)&type metadata for SceneBridge.ActivationConditionsPreferenceKey, (uint64_t)&protocol witness table for SceneBridge.ActivationConditionsPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<SceneBridge.ActivationConditionsPreferenceKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t *assignWithCopy for SceneBridgeReader(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  outlined copy of Environment<SceneBridge?>.Content(*a2, v5);
  v6 = *a1;
  v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((_BYTE *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *assignWithTake for SceneBridgeReader(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((_BYTE *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SceneBridge.ActivationConditionsPreferenceKey()
{
  return &type metadata for SceneBridge.ActivationConditionsPreferenceKey;
}

ValueMetadata *type metadata accessor for SceneBridge.UserActivityPreferenceKey()
{
  return &type metadata for SceneBridge.UserActivityPreferenceKey;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2)
{
  return specialized Set._Variant.insert(_:)(a1, a2, &lazy cache variable for type metadata for _SetStorage<UniqueID>, (void (*)(void))lazy protocol witness table accessor for type UniqueID and conformance UniqueID);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, &lazy cache variable for type metadata for _SetStorage<Namespace.ID>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
}

{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(_QWORD *)(v9 + 8 * v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v9 + 8 * v8) != a2);
  }
  result = 0;
  a2 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2, Swift::UInt a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  Swift::UInt *v16;
  uint64_t v17;

  v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    while (1)
    {
      v12 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v10);
      if (v12[1] == a3 && *v12 == a2)
        break;
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_8;
    }
    result = 0;
    v16 = (Swift::UInt *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
    a2 = *v16;
    a3 = v16[1];
  }
  else
  {
LABEL_8:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    *v3 = v17;
    swift_bridgeObjectRelease();
    result = 1;
  }
  *a1 = a2;
  a1[1] = a3;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2, unint64_t *a3, void (*a4)(void))
{
  uint64_t *v4;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;

  v9 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v4;
    *v4 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v12, isUniquelyReferenced_nonNull_native, a3, a4);
    *v4 = v17;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v13 = *(_QWORD *)(v9 + 48);
  if (*(_QWORD *)(v13 + 8 * v12) != a2)
  {
    v14 = ~v11;
    do
    {
      v12 = (v12 + 1) & v14;
      if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v13 + 8 * v12) != a2);
  }
  result = 0;
  a2 = *(_QWORD *)(*(_QWORD *)(*v4 + 48) + 8 * v12);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD, _QWORD, _QWORD);
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  char *v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v3 = v2;
  v6 = type metadata accessor for UTType();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type UTType and conformance UTType, 255, v12, MEMORY[0x1E0DF0358]);
  swift_bridgeObjectRetain();
  v32 = a2;
  v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v14 = -1 << *(_BYTE *)(v11 + 32);
  v15 = v13 & ~v14;
  v16 = v11;
  v17 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v28 = v3;
    v29 = a1;
    v30 = ~v14;
    v31 = v7;
    v18 = *(_QWORD *)(v7 + 72);
    v19 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v20 = v16;
      v21 = v19;
      v19(v10, *(_QWORD *)(v16 + 48) + v18 * v15, v6);
      lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type UTType and conformance UTType, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], MEMORY[0x1E0DF0360]);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      v23 = *(void (**)(char *, uint64_t))(v31 + 8);
      v23(v10, v6);
      if ((v22 & 1) != 0)
        break;
      v15 = (v15 + 1) & v30;
      v16 = v20;
      v19 = v21;
      if (((*(_QWORD *)(v17 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v28;
        a1 = v29;
        v24 = v31;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v32, v6);
    v21(v29, *(_QWORD *)(*v28 + 48) + v18 * v15, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v24 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v26 = v32;
    v19(v10, v32, v6);
    v33 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v10, v15, isUniquelyReferenced_nonNull_native);
    *v3 = v33;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(a1, v26, v6);
    return 1;
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD, _QWORD, _QWORD);
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  char *v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v3 = v2;
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, 255, v12, MEMORY[0x1E0CB0018]);
  swift_bridgeObjectRetain();
  v32 = a2;
  v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v14 = -1 << *(_BYTE *)(v11 + 32);
  v15 = v13 & ~v14;
  v16 = v11;
  v17 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v28 = v3;
    v29 = a1;
    v30 = ~v14;
    v31 = v7;
    v18 = *(_QWORD *)(v7 + 72);
    v19 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v20 = v16;
      v21 = v19;
      v19(v10, *(_QWORD *)(v16 + 48) + v18 * v15, v6);
      lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type URL and conformance URL, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      v23 = *(void (**)(char *, uint64_t))(v31 + 8);
      v23(v10, v6);
      if ((v22 & 1) != 0)
        break;
      v15 = (v15 + 1) & v30;
      v16 = v20;
      v19 = v21;
      if (((*(_QWORD *)(v17 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v28;
        a1 = v29;
        v24 = v31;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v32, v6);
    v21(v29, *(_QWORD *)(*v28 + 48) + v18 * v15, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v24 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v26 = v32;
    v19(v10, v32, v6);
    v33 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v10, v15, isUniquelyReferenced_nonNull_native);
    *v3 = v33;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(a1, v26, v6);
    return 1;
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD, _QWORD, _QWORD);
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  char *v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v3 = v2;
  v6 = type metadata accessor for IndexPath();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, 255, v12, MEMORY[0x1E0CB1668]);
  swift_bridgeObjectRetain();
  v32 = a2;
  v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v14 = -1 << *(_BYTE *)(v11 + 32);
  v15 = v13 & ~v14;
  v16 = v11;
  v17 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v28 = v3;
    v29 = a1;
    v30 = ~v14;
    v31 = v7;
    v18 = *(_QWORD *)(v7 + 72);
    v19 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v20 = v16;
      v21 = v19;
      v19(v10, *(_QWORD *)(v16 + 48) + v18 * v15, v6);
      lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1680]);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      v23 = *(void (**)(char *, uint64_t))(v31 + 8);
      v23(v10, v6);
      if ((v22 & 1) != 0)
        break;
      v15 = (v15 + 1) & v30;
      v16 = v20;
      v19 = v21;
      if (((*(_QWORD *)(v17 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v28;
        a1 = v29;
        v24 = v31;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v32, v6);
    v21(v29, *(_QWORD *)(*v28 + 48) + v18 * v15, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v24 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v26 = v32;
    v19(v10, v32, v6);
    v33 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v10, v15, isUniquelyReferenced_nonNull_native);
    *v3 = v33;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(a1, v26, v6);
    return 1;
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD, _QWORD, _QWORD);
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  char *v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v3 = v2;
  v6 = type metadata accessor for DateComponents();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, 255, v12, MEMORY[0x1E0CAEAD8]);
  swift_bridgeObjectRetain();
  v32 = a2;
  v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v14 = -1 << *(_BYTE *)(v11 + 32);
  v15 = v13 & ~v14;
  v16 = v11;
  v17 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v28 = v3;
    v29 = a1;
    v30 = ~v14;
    v31 = v7;
    v18 = *(_QWORD *)(v7 + 72);
    v19 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v20 = v16;
      v21 = v19;
      v19(v10, *(_QWORD *)(v16 + 48) + v18 * v15, v6);
      lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], MEMORY[0x1E0CAEAE0]);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      v23 = *(void (**)(char *, uint64_t))(v31 + 8);
      v23(v10, v6);
      if ((v22 & 1) != 0)
        break;
      v15 = (v15 + 1) & v30;
      v16 = v20;
      v19 = v21;
      if (((*(_QWORD *)(v17 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v28;
        a1 = v29;
        v24 = v31;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v32, v6);
    v21(v29, *(_QWORD *)(*v28 + 48) + v18 * v15, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v24 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v26 = v32;
    v19(v10, v32, v6);
    v33 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v10, v15, isUniquelyReferenced_nonNull_native);
    *v3 = v33;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(a1, v26, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(_DWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _DWORD *v30;
  uint64_t v32;

  v5 = a4;
  v6 = a3;
  v7 = a2;
  v8 = HIDWORD(a2);
  v9 = HIDWORD(a3);
  v10 = HIDWORD(a4);
  v11 = *v4;
  Hasher.init(_seed:)();
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v10);
  v12 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v15 = ~v13;
    while (1)
    {
      v16 = (int *)(*(_QWORD *)(v11 + 48) + 24 * v14);
      v17 = *v16;
      v18 = v16[1];
      v19 = v16[2];
      v20 = v16[3];
      v22 = v16[4];
      v21 = v16[5];
      v23 = v17 == (_DWORD)v7 && v18 == (_DWORD)v8;
      v24 = v23 && v19 == (_DWORD)v6;
      v25 = v24 && v20 == (_DWORD)v9;
      v26 = v25 && v22 == (_DWORD)v5;
      if (v26 && v21 == (_DWORD)v10)
        break;
      v14 = (v14 + 1) & v15;
      if (((*(_QWORD *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
        goto LABEL_20;
    }
    result = 0;
    v30 = (_DWORD *)(*(_QWORD *)(*v4 + 48) + 24 * v14);
    LODWORD(v7) = *v30;
    LODWORD(v8) = v30[1];
    LODWORD(v6) = v30[2];
    LODWORD(v9) = v30[3];
    LODWORD(v5) = v30[4];
    LODWORD(v10) = v30[5];
  }
  else
  {
LABEL_20:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v32 = *v4;
    *v4 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v7, v6, v5, v14, isUniquelyReferenced_nonNull_native);
    *v4 = v32;
    swift_bridgeObjectRelease();
    result = 1;
  }
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v6;
  a1[3] = v9;
  a1[4] = v5;
  a1[5] = v10;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  Swift::Int v22;
  _QWORD *v23;
  id v24;
  char isUniquelyReferenced_nonNull_native;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v28 = (_QWORD *)v22;
    if (*(_QWORD *)(v22 + 24) <= *(_QWORD *)(v22 + 16))
    {
      v26 = v8;
      specialized _NativeSet.resize(capacity:)();
      v23 = v28;
    }
    else
    {
      v23 = (_QWORD *)v22;
      v24 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v23);
    *v3 = (uint64_t)v23;
  }
  else
  {
    v11 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain();
    v12 = NSObject._rawHashValue(seed:)(v11);
    v13 = -1 << *(_BYTE *)(v6 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
      v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
      v16 = static NSObject.== infix(_:_:)();

      if ((v16 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v20 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        v21 = v20;
        return 0;
      }
      v17 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v17;
        if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        v18 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
        v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v29 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  Swift::Int v22;
  unint64_t v23;
  _QWORD *v24;
  id v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for BSAction);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1, &lazy cache variable for type metadata for _SetStorage<BSAction>, (unint64_t *)&lazy cache variable for type metadata for BSAction, 0x1E0D01698, (unint64_t *)&lazy protocol witness table cache variable for type BSAction and conformance NSObject);
    v30 = (_QWORD *)v22;
    v23 = *(_QWORD *)(v22 + 16);
    if (*(_QWORD *)(v22 + 24) <= v23)
    {
      v27 = v23 + 1;
      v28 = v8;
      specialized _NativeSet.resize(capacity:)(v27, &lazy cache variable for type metadata for _SetStorage<BSAction>, (unint64_t *)&lazy cache variable for type metadata for BSAction, 0x1E0D01698, (unint64_t *)&lazy protocol witness table cache variable for type BSAction and conformance NSObject);
      v24 = v30;
    }
    else
    {
      v24 = (_QWORD *)v22;
      v25 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v24);
    *v3 = (uint64_t)v24;
  }
  else
  {
    v11 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain();
    v12 = NSObject._rawHashValue(seed:)(v11);
    v13 = -1 << *(_BYTE *)(v6 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for BSAction);
      v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
      v16 = static NSObject.== infix(_:_:)();

      if ((v16 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v20 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        v21 = v20;
        return 0;
      }
      v17 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v17;
        if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        v18 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
        v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v31 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(_BYTE *a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  Swift::Int v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  v3 = v2;
  v6 = a2 & 1;
  v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2 & 1);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v6, v10, isUniquelyReferenced_nonNull_native);
    *v3 = v15;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v11 = *(_QWORD *)(v7 + 48);
  if (((((_DWORD)v6 == 0) ^ *(unsigned __int8 *)(v11 + v10)) & 1) == 0)
  {
    v12 = ~v9;
    do
    {
      v10 = (v10 + 1) & v12;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_7;
    }
    while (((((_DWORD)v6 == 0) ^ *(unsigned __int8 *)(v11 + v10)) & 1) == 0);
  }
  result = 0;
  LOBYTE(v6) = *(_BYTE *)(*(_QWORD *)(*v3 + 48) + v10);
LABEL_8:
  *a1 = v6;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[9];
  uint64_t v20;
  uint64_t v21;

  v20 = a2;
  v21 = a3;
  v5 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  _ViewList_ID.Canonical.hash(into:)();
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v9 = ~v7;
    while (1)
    {
      v10 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v8);
      v11 = v10[1];
      v19[0] = *v10;
      v19[1] = v11;
      if ((MEMORY[0x18D756E68](v19, &v20) & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    swift_release();
    v17 = (_QWORD *)(*(_QWORD *)(*v3 + 48) + 16 * v8);
    v18 = v17[1];
    *(_QWORD *)a1 = *v17;
    *(_QWORD *)(a1 + 8) = v18;
    swift_retain();
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = v21;
    v14 = v20;
    v15 = HIDWORD(v20);
    v19[0] = *v3;
    *v3 = 0x8000000000000000;
    swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v14 | (v15 << 32), v13, v8, isUniquelyReferenced_nonNull_native);
    *v3 = v19[0];
    swift_bridgeObjectRelease();
    *(_DWORD *)a1 = v14;
    *(_DWORD *)(a1 + 4) = v15;
    result = 1;
    *(_QWORD *)(a1 + 8) = v13;
  }
  return result;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  return specialized _NativeSet.init(_:capacity:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<UIOpenURLContext>, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext, 0x1E0DC3A80, &lazy protocol witness table cache variable for type UIOpenURLContext and conformance NSObject);
}

{
  uint64_t v2;
  Swift::Int result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    type metadata accessor for _SetStorage<NavigationStackHostingController<AnyView>>();
    v2 = static _SetStorage.convert(_:capacity:)();
    v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
      do
      {
        swift_dynamicCast();
        v2 = v14;
        if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          v2 = v14;
        }
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v9 = 0;
          v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v11 = v7 == v10;
            if (v7 == v10)
              v7 = 0;
            v9 |= v11;
            v12 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
        ++*(_QWORD *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v2;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  uint64_t v10;
  Swift::Int result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    type metadata accessor for _SetStorage<UIOpenURLContext>(0, a3, a4, a5, a6);
    v10 = static _SetStorage.convert(_:capacity:)();
    v23 = v10;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for NSObject(0, a4);
      do
      {
        swift_dynamicCast();
        v10 = v23;
        v17 = *(_QWORD *)(v23 + 16);
        if (*(_QWORD *)(v23 + 24) <= v17)
        {
          specialized _NativeSet.resize(capacity:)(v17 + 1, a3, a4, a5, a6);
          v10 = v23;
        }
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v10 + 40));
        v12 = v10 + 56;
        v13 = -1 << *(_BYTE *)(v10 + 32);
        v14 = result & ~v13;
        v15 = v14 >> 6;
        if (((-1 << v14) & ~*(_QWORD *)(v10 + 56 + 8 * (v14 >> 6))) != 0)
        {
          v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v10 + 56 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v18 = 0;
          v19 = (unint64_t)(63 - v13) >> 6;
          do
          {
            if (++v15 == v19 && (v18 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v20 = v15 == v19;
            if (v15 == v19)
              v15 = 0;
            v18 |= v20;
            v21 = *(_QWORD *)(v12 + 8 * v15);
          }
          while (v21 == -1);
          v16 = __clz(__rbit64(~v21)) + (v15 << 6);
        }
        *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
        *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v16) = v22;
        ++*(_QWORD *)(v10 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v10;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;

  v4 = v3;
  v5 = *v3;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, a2, a3);
  result = static _SetStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (_QWORD *)(v5 + 56);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 56);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 56;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_33;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_33;
          v19 = v9[v8];
          if (!v19)
          {
            v8 = v18 + 2;
            if (v18 + 2 >= v13)
              goto LABEL_33;
            v19 = v9[v8];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v13)
              {
LABEL_33:
                v29 = 1 << *(_BYTE *)(v5 + 32);
                if (v29 > 63)
                  bzero((void *)(v5 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v29;
                v4 = v3;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v9[v20];
              if (!v19)
              {
                while (1)
                {
                  v8 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v8 >= v13)
                    goto LABEL_33;
                  v19 = v9[v8];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v8 = v20;
            }
          }
        }
LABEL_23:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v4 = v7;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  return specialized _NativeSet.resize(capacity:)(a1, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<UIOpenURLContext>, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext, 0x1E0DC3A80, &lazy protocol witness table cache variable for type UIOpenURLContext and conformance NSObject);
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  unint64_t *v49;
  uint64_t v50;

  v10 = v5;
  v11 = a2(0);
  v47 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v43 - v13;
  v15 = *v5;
  v48 = a2;
  v49 = a4;
  v50 = a5;
  type metadata accessor for _SetStorage<AGAttribute>(0, a3, a2, a4, a5);
  v16 = static _SetStorage.resize(original:capacity:move:)();
  v17 = v16;
  if (*(_QWORD *)(v15 + 16))
  {
    v18 = 1 << *(_BYTE *)(v15 + 32);
    v19 = *(_QWORD *)(v15 + 56);
    v46 = (_QWORD *)(v15 + 56);
    if (v18 < 64)
      v20 = ~(-1 << v18);
    else
      v20 = -1;
    v21 = v20 & v19;
    v44 = v5;
    v45 = (unint64_t)(v18 + 63) >> 6;
    v22 = v16 + 56;
    result = swift_retain();
    v24 = 0;
    while (1)
    {
      if (v21)
      {
        v26 = __clz(__rbit64(v21));
        v21 &= v21 - 1;
        v27 = v26 | (v24 << 6);
      }
      else
      {
        v28 = v24 + 1;
        if (__OFADD__(v24, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v28 >= v45)
          goto LABEL_33;
        v29 = v46[v28];
        ++v24;
        if (!v29)
        {
          v24 = v28 + 1;
          if (v28 + 1 >= v45)
            goto LABEL_33;
          v29 = v46[v24];
          if (!v29)
          {
            v24 = v28 + 2;
            if (v28 + 2 >= v45)
              goto LABEL_33;
            v29 = v46[v24];
            if (!v29)
            {
              v30 = v28 + 3;
              if (v30 >= v45)
              {
LABEL_33:
                swift_release();
                v10 = v44;
                v42 = 1 << *(_BYTE *)(v15 + 32);
                if (v42 > 63)
                  bzero(v46, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v46 = -1 << v42;
                *(_QWORD *)(v15 + 16) = 0;
                break;
              }
              v29 = v46[v30];
              if (!v29)
              {
                while (1)
                {
                  v24 = v30 + 1;
                  if (__OFADD__(v30, 1))
                    goto LABEL_39;
                  if (v24 >= v45)
                    goto LABEL_33;
                  v29 = v46[v24];
                  ++v30;
                  if (v29)
                    goto LABEL_23;
                }
              }
              v24 = v30;
            }
          }
        }
LABEL_23:
        v21 = (v29 - 1) & v29;
        v27 = __clz(__rbit64(v29)) + (v24 << 6);
      }
      v31 = v15;
      v32 = *(_QWORD *)(v15 + 48);
      v33 = *(_QWORD *)(v47 + 72);
      v34 = *(void (**)(char *, unint64_t, uint64_t))(v47 + 32);
      v34(v14, v32 + v33 * v27, v11);
      lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(v49, 255, v48, v50);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v35 = -1 << *(_BYTE *)(v17 + 32);
      v36 = result & ~v35;
      v37 = v36 >> 6;
      if (((-1 << v36) & ~*(_QWORD *)(v22 + 8 * (v36 >> 6))) != 0)
      {
        v25 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v22 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v38 = 0;
        v39 = (unint64_t)(63 - v35) >> 6;
        do
        {
          if (++v37 == v39 && (v38 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v40 = v37 == v39;
          if (v37 == v39)
            v37 = 0;
          v38 |= v40;
          v41 = *(_QWORD *)(v22 + 8 * v37);
        }
        while (v41 == -1);
        v25 = __clz(__rbit64(~v41)) + (v37 << 6);
      }
      *(_QWORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v34)(*(_QWORD *)(v17 + 48) + v25 * v33, v14, v11);
      ++*(_QWORD *)(v17 + 16);
      v15 = v31;
    }
  }
  result = swift_release();
  *v10 = v17;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;

  v6 = v5;
  v7 = *v5;
  type metadata accessor for _SetStorage<UIOpenURLContext>(0, a2, a3, a4, a5);
  v8 = static _SetStorage.resize(original:capacity:move:)();
  v9 = v8;
  if (*(_QWORD *)(v7 + 16))
  {
    v33 = v5;
    v10 = 1 << *(_BYTE *)(v7 + 32);
    v11 = (_QWORD *)(v7 + 56);
    if (v10 < 64)
      v12 = ~(-1 << v10);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v7 + 56);
    v14 = (unint64_t)(v10 + 63) >> 6;
    v15 = v8 + 56;
    result = swift_retain();
    v17 = 0;
    while (1)
    {
      if (v13)
      {
        v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v20 = v19 | (v17 << 6);
      }
      else
      {
        v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v21 >= v14)
          goto LABEL_33;
        v22 = v11[v21];
        ++v17;
        if (!v22)
        {
          v17 = v21 + 1;
          if (v21 + 1 >= v14)
            goto LABEL_33;
          v22 = v11[v17];
          if (!v22)
          {
            v17 = v21 + 2;
            if (v21 + 2 >= v14)
              goto LABEL_33;
            v22 = v11[v17];
            if (!v22)
            {
              v23 = v21 + 3;
              if (v23 >= v14)
              {
LABEL_33:
                swift_release();
                v6 = v33;
                v32 = 1 << *(_BYTE *)(v7 + 32);
                if (v32 > 63)
                  bzero((void *)(v7 + 56), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v11 = -1 << v32;
                *(_QWORD *)(v7 + 16) = 0;
                break;
              }
              v22 = v11[v23];
              if (!v22)
              {
                while (1)
                {
                  v17 = v23 + 1;
                  if (__OFADD__(v23, 1))
                    goto LABEL_39;
                  if (v17 >= v14)
                    goto LABEL_33;
                  v22 = v11[v17];
                  ++v23;
                  if (v22)
                    goto LABEL_23;
                }
              }
              v17 = v23;
            }
          }
        }
LABEL_23:
        v13 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v20);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v9 + 40));
      v25 = -1 << *(_BYTE *)(v9 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v15 + 8 * v27);
        }
        while (v31 == -1);
        v18 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v18) = v24;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release();
  *v6 = v9;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, _QWORD *a2)
{
  unint64_t result;

  NSObject._rawHashValue(seed:)(a2[5]);
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(_QWORD *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::Int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _BYTE v17[40];
  uint64_t v18;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  Hasher._combine(_:)(*(_QWORD *)(v5 + 40));
  result = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = ~v9;
    while (1)
    {
      outlined init with copy of AccessibilityRelationshipScope.Key(*(_QWORD *)(v8 + 48) + 48 * a2, (uint64_t)v17);
      if ((MEMORY[0x18D75E284](v17, v5) & 1) != 0 && v18 == *(_QWORD *)(v5 + 40))
        break;
      result = outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v17);
      a2 = (a2 + 1) & v10;
      if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_14;
    }
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v17);
    result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
LABEL_14:
  v11 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v12 = (_OWORD *)(*(_QWORD *)(v11 + 48) + 48 * a2);
  v13 = *(_OWORD *)(v5 + 16);
  *v12 = *(_OWORD *)v5;
  v12[1] = v13;
  v12[2] = *(_OWORD *)(v5 + 32);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v11 + 16) = v16;
  return result;
}

{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (Swift::Int)specialized _NativeSet.copy()(&lazy cache variable for type metadata for _SetStorage<CommandFlag>, (void (*)(void))lazy protocol witness table accessor for type CommandFlag and conformance CommandFlag);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  result = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result & 1;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  result = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (((((_DWORD)v5 == 0) ^ *(unsigned __int8 *)(v10 + a2)) & 1) != 0)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (((((_DWORD)v5 == 0) ^ *(unsigned __int8 *)(v10 + a2)) & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v12 + 48) + a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  Swift::Int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _BYTE v19[40];

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v9 = *v3;
  result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = ~v10;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v9 + 48) + 40 * a2, (uint64_t)v19);
      v12 = MEMORY[0x18D75E284](v19, v6);
      result = outlined destroy of AnyHashable((uint64_t)v19);
      if ((v12 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v11;
    }
    while (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v13 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v14 = *(_QWORD *)(v13 + 48) + 40 * a2;
  v15 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v6;
  *(_OWORD *)(v14 + 16) = v15;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v6 + 32);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (!v17)
  {
    *(_QWORD *)(v13 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::UInt a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  Swift::UInt v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  Swift::UInt *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    if ((a4 & 1) != 0)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v9 > v8)
      {
        result = (Swift::Int)specialized _NativeSet.copy()();
        goto LABEL_15;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    v10 = *v4;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v7);
    Hasher._combine(_:)(a2);
    result = Hasher._finalize()();
    v11 = -1 << *(_BYTE *)(v10 + 32);
    a3 = result & ~v11;
    if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
    {
      v12 = ~v11;
      while (1)
      {
        v13 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * a3);
        if (v13[1] == a2 && *v13 == v7)
          break;
        a3 = (a3 + 1) & v12;
        if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          goto LABEL_15;
      }
LABEL_18:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x187157898);
    }
  }
LABEL_15:
  v15 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v16 = (Swift::UInt *)(*(_QWORD *)(v15 + 48) + 16 * a3);
  *v16 = v7;
  v16[1] = a2;
  v17 = *(_QWORD *)(v15 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
  {
    __break(1u);
    goto LABEL_18;
  }
  *(_QWORD *)(v15 + 16) = v19;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3, unint64_t *a4, void (*a5)(void))
{
  uint64_t *v5;
  Swift::UInt v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v7 = result;
  v8 = *(_QWORD *)(*v5 + 16);
  v9 = *(_QWORD *)(*v5 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
    goto LABEL_14;
  v10 = v8 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v10, a4, a5);
  }
  else
  {
    if (v9 > v8)
    {
      result = (Swift::Int)specialized _NativeSet.copy()(a4, a5);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v10, a4, a5);
  }
  v11 = *v5;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v7);
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a2 = result & ~v12;
  if (((*(_QWORD *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = *(_QWORD *)(v11 + 48);
    if (*(_QWORD *)(v13 + 8 * a2) == v7)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v14 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(_QWORD *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v13 + 8 * a2) == v7)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v15 = *v5;
  *(_QWORD *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * a2) = v7;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    *(_QWORD *)(v15 + 16) = v18;
  return result;
}

unint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t *v5;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;

  v7 = a3;
  v8 = a2;
  v9 = result;
  v10 = HIDWORD(result);
  v11 = HIDWORD(a2);
  v12 = HIDWORD(a3);
  v13 = *(_QWORD *)(*v5 + 16);
  v14 = *(_QWORD *)(*v5 + 24);
  if (v14 > v13 && (a5 & 1) != 0)
  {
LABEL_27:
    v30 = *v5;
    *(_QWORD *)(*v5 + 8 * (a4 >> 6) + 56) |= 1 << a4;
    v31 = (_DWORD *)(*(_QWORD *)(v30 + 48) + 24 * a4);
    *v31 = v9;
    v31[1] = v10;
    v31[2] = v8;
    v31[3] = v11;
    v31[4] = v7;
    v31[5] = v12;
    v32 = *(_QWORD *)(v30 + 16);
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
      __break(1u);
    *(_QWORD *)(v30 + 16) = v34;
    return result;
  }
  if ((a5 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
    goto LABEL_8;
  }
  if (v14 > v13)
  {
    result = (unint64_t)specialized _NativeSet.copy()();
    goto LABEL_27;
  }
  specialized _NativeSet.copyAndResize(capacity:)();
LABEL_8:
  v15 = *v5;
  Hasher.init(_seed:)();
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v12);
  result = Hasher._finalize()();
  v16 = -1 << *(_BYTE *)(v15 + 32);
  a4 = result & ~v16;
  if (((*(_QWORD *)(v15 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) == 0)
    goto LABEL_27;
  v17 = ~v16;
  while (1)
  {
    v18 = (int *)(*(_QWORD *)(v15 + 48) + 24 * a4);
    v19 = *v18;
    v20 = v18[1];
    v21 = v18[2];
    v22 = v18[3];
    v24 = v18[4];
    v23 = v18[5];
    v25 = v19 == v9 && v20 == (_DWORD)v10;
    v26 = v25 && v21 == v8;
    v27 = v26 && v22 == (_DWORD)v11;
    v28 = v27 && v24 == v7;
    if (v28 && v23 == (_DWORD)v12)
      break;
    a4 = (a4 + 1) & v17;
    if (((*(_QWORD *)(v15 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) == 0)
      goto LABEL_27;
  }
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  v9 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = static NSObject.== infix(_:_:)();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = static NSObject.== infix(_:_:)();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v6 + 1, &lazy cache variable for type metadata for _SetStorage<BSAction>, (unint64_t *)&lazy cache variable for type metadata for BSAction, 0x1E0D01698, (unint64_t *)&lazy protocol witness table cache variable for type BSAction and conformance NSObject);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()(&lazy cache variable for type metadata for _SetStorage<BSAction>, (unint64_t *)&lazy cache variable for type metadata for BSAction, 0x1E0D01698, (unint64_t *)&lazy protocol witness table cache variable for type BSAction and conformance NSObject);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  v9 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for BSAction);
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = static NSObject.== infix(_:_:)();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = static NSObject.== infix(_:_:)();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

unint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(unint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];
  _QWORD v22[2];

  v7 = result;
  v8 = HIDWORD(result);
  v22[0] = result;
  v22[1] = a2;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_12;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (unint64_t)specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  _ViewList_ID.Canonical.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v13 = ~v12;
    do
    {
      v14 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * a3);
      v15 = v14[1];
      v21[0] = *v14;
      v21[1] = v15;
      result = MEMORY[0x18D756E68](v21, v22);
      if ((result & 1) != 0)
        goto LABEL_15;
      a3 = (a3 + 1) & v13;
    }
    while (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_12:
  v16 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v17 = *(_QWORD *)(v16 + 48) + 16 * a3;
  *(_DWORD *)v17 = v7;
  *(_DWORD *)(v17 + 4) = v8;
  *(_QWORD *)(v17 + 8) = a2;
  v18 = *(_QWORD *)(v16 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (!v19)
  {
    *(_QWORD *)(v16 + 16) = v20;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(unint64_t *a1, void (*a2)(void))
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  uint64_t v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v3 = v2;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, a1, a2);
  v4 = *v2;
  v5 = static _SetStorage.copy(original:)();
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v3 = v6;
    return result;
  }
  result = (void *)(v5 + 56);
  v8 = v4 + 56;
  v9 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 56 + 8 * v9)
    result = memmove(result, (const void *)(v4 + 56), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 56);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v15)
      goto LABEL_28;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v11;
    if (!v19)
    {
      v11 = v18 + 1;
      if (v18 + 1 >= v15)
        goto LABEL_28;
      v19 = *(_QWORD *)(v8 + 8 * v11);
      if (!v19)
      {
        v11 = v18 + 2;
        if (v18 + 2 >= v15)
          goto LABEL_28;
        v19 = *(_QWORD *)(v8 + 8 * v11);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v14 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v17) = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17);
  }
  v20 = v18 + 3;
  if (v20 >= v15)
    goto LABEL_28;
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v11 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v15)
      goto LABEL_28;
    v19 = *(_QWORD *)(v8 + 8 * v11);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  return specialized _NativeSet.copy()((unint64_t *)&lazy cache variable for type metadata for _SetStorage<UIOpenURLContext>, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext, 0x1E0DC3A80, &lazy protocol witness table cache variable for type UIOpenURLContext and conformance NSObject);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  type metadata accessor for _SetStorage<NavigationStackHostingController<AnyView>>();
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t (*a1)(uint64_t), unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *result;
  uint64_t v18;
  unint64_t v19;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t *v33;

  v9 = a1(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v32 - v12;
  type metadata accessor for _SetStorage<AGAttribute>(0, a2, a1, a3, a4);
  v33 = v4;
  v14 = *v4;
  v15 = static _SetStorage.copy(original:)();
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v33 = v16;
    return result;
  }
  result = (void *)(v15 + 56);
  v18 = v14 + 56;
  v19 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  if (v16 != v14 || (unint64_t)result >= v14 + 56 + 8 * v19)
    result = memmove(result, (const void *)(v14 + 56), 8 * v19);
  v21 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v14 + 16);
  v22 = 1 << *(_BYTE *)(v14 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & *(_QWORD *)(v14 + 56);
  v25 = (unint64_t)(v22 + 63) >> 6;
  while (1)
  {
    if (v24)
    {
      v26 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v27 = v26 | (v21 << 6);
      goto LABEL_12;
    }
    v29 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v29 >= v25)
      goto LABEL_28;
    v30 = *(_QWORD *)(v18 + 8 * v29);
    ++v21;
    if (!v30)
    {
      v21 = v29 + 1;
      if (v29 + 1 >= v25)
        goto LABEL_28;
      v30 = *(_QWORD *)(v18 + 8 * v21);
      if (!v30)
      {
        v21 = v29 + 2;
        if (v29 + 2 >= v25)
          goto LABEL_28;
        v30 = *(_QWORD *)(v18 + 8 * v21);
        if (!v30)
          break;
      }
    }
LABEL_27:
    v24 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v21 << 6);
LABEL_12:
    v28 = *(_QWORD *)(v10 + 72) * v27;
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v13, *(_QWORD *)(v14 + 48) + v28, v9);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(_QWORD *)(v16 + 48) + v28, v13, v9);
  }
  v31 = v29 + 3;
  if (v31 >= v25)
    goto LABEL_28;
  v30 = *(_QWORD *)(v18 + 8 * v31);
  if (v30)
  {
    v21 = v31;
    goto LABEL_27;
  }
  while (1)
  {
    v21 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v21 >= v25)
      goto LABEL_28;
    v30 = *(_QWORD *)(v18 + 8 * v21);
    ++v31;
    if (v30)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()(unint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v5 = v4;
  type metadata accessor for _SetStorage<UIOpenURLContext>(0, a1, a2, a3, a4);
  v6 = *v4;
  v7 = static _SetStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v5 = v8;
    return result;
  }
  result = (id)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v17)
      goto LABEL_28;
    v23 = *(_QWORD *)(v10 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v17)
        goto LABEL_28;
      v23 = *(_QWORD *)(v10 + 8 * v13);
      if (!v23)
      {
        v13 = v22 + 2;
        if (v22 + 2 >= v17)
          goto LABEL_28;
        v23 = *(_QWORD *)(v10 + 8 * v13);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v16 = (v23 - 1) & v23;
    v19 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v20 = 8 * v19;
    v21 = *(void **)(*(_QWORD *)(v6 + 48) + v20);
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v21;
    result = v21;
  }
  v24 = v22 + 3;
  if (v24 >= v17)
    goto LABEL_28;
  v23 = *(_QWORD *)(v10 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v23 = *(_QWORD *)(v10 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;

  v4 = v3;
  v5 = *v3;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, a2, a3);
  result = static _SetStorage.resize(original:capacity:move:)();
  v7 = result;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = swift_release();
LABEL_35:
    *v4 = v7;
    return result;
  }
  v8 = 0;
  v9 = v5 + 56;
  v10 = 1 << *(_BYTE *)(v5 + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = result + 56;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v8 << 6);
      goto LABEL_24;
    }
    v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v13)
      goto LABEL_33;
    v19 = *(_QWORD *)(v9 + 8 * v18);
    ++v8;
    if (!v19)
    {
      v8 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_33;
      v19 = *(_QWORD *)(v9 + 8 * v8);
      if (!v19)
      {
        v8 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_33;
        v19 = *(_QWORD *)(v9 + 8 * v8);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v12 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_24:
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v21);
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v7 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v14 + 8 * v24);
      }
      while (v28 == -1);
      v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
    ++*(_QWORD *)(v7 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
  {
LABEL_33:
    result = swift_release();
    v4 = v3;
    goto LABEL_35;
  }
  v19 = *(_QWORD *)(v9 + 8 * v20);
  if (v19)
  {
    v8 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v8 >= v13)
      goto LABEL_33;
    v19 = *(_QWORD *)(v9 + 8 * v8);
    ++v20;
    if (v19)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int64_t v42;
  uint64_t (*v43)(uint64_t);
  unint64_t *v44;
  uint64_t v45;

  v10 = v5;
  v11 = a2(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v40 - v14;
  v16 = *v5;
  v43 = a2;
  v44 = a4;
  v45 = a5;
  type metadata accessor for _SetStorage<AGAttribute>(0, a3, a2, a4, a5);
  v17 = static _SetStorage.resize(original:capacity:move:)();
  v18 = v17;
  if (!*(_QWORD *)(v16 + 16))
  {
    result = swift_release();
LABEL_35:
    *v10 = v18;
    return result;
  }
  v19 = 1 << *(_BYTE *)(v16 + 32);
  v20 = *(_QWORD *)(v16 + 56);
  v40 = v5;
  v41 = v16 + 56;
  if (v19 < 64)
    v21 = ~(-1 << v19);
  else
    v21 = -1;
  v22 = v21 & v20;
  v42 = (unint64_t)(v19 + 63) >> 6;
  v23 = v17 + 56;
  result = swift_retain();
  v25 = 0;
  while (1)
  {
    if (v22)
    {
      v27 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v28 = v27 | (v25 << 6);
      goto LABEL_24;
    }
    v29 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v29 >= v42)
      goto LABEL_33;
    v30 = *(_QWORD *)(v41 + 8 * v29);
    ++v25;
    if (!v30)
    {
      v25 = v29 + 1;
      if (v29 + 1 >= v42)
        goto LABEL_33;
      v30 = *(_QWORD *)(v41 + 8 * v25);
      if (!v30)
      {
        v25 = v29 + 2;
        if (v29 + 2 >= v42)
          goto LABEL_33;
        v30 = *(_QWORD *)(v41 + 8 * v25);
        if (!v30)
          break;
      }
    }
LABEL_23:
    v22 = (v30 - 1) & v30;
    v28 = __clz(__rbit64(v30)) + (v25 << 6);
LABEL_24:
    v32 = *(_QWORD *)(v12 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v15, *(_QWORD *)(v16 + 48) + v32 * v28, v11);
    lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(v44, 255, v43, v45);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v33 = -1 << *(_BYTE *)(v18 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v23 + 8 * (v34 >> 6))) != 0)
    {
      v26 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v23 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v23 + 8 * v35);
      }
      while (v39 == -1);
      v26 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v23 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v12 + 32))(*(_QWORD *)(v18 + 48) + v26 * v32, v15, v11);
    ++*(_QWORD *)(v18 + 16);
  }
  v31 = v29 + 3;
  if (v31 >= v42)
  {
LABEL_33:
    result = swift_release_n();
    v10 = v40;
    goto LABEL_35;
  }
  v30 = *(_QWORD *)(v41 + 8 * v31);
  if (v30)
  {
    v25 = v31;
    goto LABEL_23;
  }
  while (1)
  {
    v25 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v25 >= v42)
      goto LABEL_33;
    v30 = *(_QWORD *)(v41 + 8 * v25);
    ++v31;
    if (v30)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  Swift::UInt32 v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt32 v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt32 v27;
  uint64_t v28;
  uint64_t v29;
  Swift::UInt32 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  char v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v8)
    goto LABEL_23;
  v10 = v7;
  v11 = v8;
  v49 = v9;
  v12 = (_QWORD *)*a5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    *(_DWORD *)(v21[6] + 4 * v14) = v10;
    v23 = (_QWORD *)(v21[7] + 16 * v14);
    *v23 = v11;
    v23[1] = v49;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v21[2] = v26;
LABEL_13:
    v27 = specialized LazyMapSequence.Iterator.next()();
    if (v28)
    {
      v30 = v27;
      v31 = v28;
      v32 = v29;
      do
      {
        v36 = (_QWORD *)*a5;
        v37 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
        v39 = v36[2];
        v40 = (v38 & 1) == 0;
        v25 = __OFADD__(v39, v40);
        v41 = v39 + v40;
        if (v25)
          goto LABEL_24;
        v42 = v38;
        if (v36[3] < v41)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, 1);
          v37 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
          if ((v42 & 1) != (v43 & 1))
            goto LABEL_26;
        }
        v44 = (_QWORD *)*a5;
        if ((v42 & 1) != 0)
        {
          v33 = (_QWORD *)(v44[7] + 16 * v37);
          swift_release();
          *v33 = v31;
          v33[1] = v32;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          *(_DWORD *)(v44[6] + 4 * v37) = v30;
          v45 = (_QWORD *)(v44[7] + 16 * v37);
          *v45 = v31;
          v45[1] = v32;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_25;
          v44[2] = v47;
        }
        v30 = specialized LazyMapSequence.Iterator.next()();
        v31 = v34;
        v32 = v35;
      }
      while (v34);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1);
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    v22 = (_QWORD *)(v21[7] + 16 * v14);
    swift_release();
    *v22 = v11;
    v22[1] = v49;
    goto LABEL_13;
  }
LABEL_26:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  char v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = specialized LazyMapSequence.Iterator.next()();
  if (v8 == 1)
    goto LABEL_14;
  v9 = v7;
  v10 = v8;
  v11 = (_QWORD *)*a5;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v17 = v12;
  if (v11[3] >= v16)
  {
    if ((a4 & 1) != 0)
    {
      v20 = (_QWORD *)*a5;
      if ((v12 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v20 = (_QWORD *)*a5;
      if ((v17 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v20[(v13 >> 6) + 8] |= 1 << v13;
    v24 = 8 * v13;
    *(_QWORD *)(v20[6] + v24) = v9;
    *(_QWORD *)(v20[7] + v24) = v10;
    v25 = v20[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v20[2] = v27;
    goto LABEL_13;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
  if ((v17 & 1) == (v19 & 1))
  {
    v13 = v18;
    v20 = (_QWORD *)*a5;
    if ((v17 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    v21 = 8 * v13;
    v22 = *(_QWORD *)(v20[7] + 8 * v13);
    swift_retain();
    swift_release();
    v23 = v20[7];
    swift_release();
    *(_QWORD *)(v23 + v21) = v22;
LABEL_13:
    v28 = specialized LazyMapSequence.Iterator.next()();
    if (v29 == 1)
    {
LABEL_14:
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
      return swift_release();
    }
    v31 = v28;
    v32 = v29;
    while (1)
    {
      v37 = (_QWORD *)*a5;
      v38 = specialized __RawDictionaryStorage.find<A>(_:)(v31);
      v40 = v37[2];
      v41 = (v39 & 1) == 0;
      v26 = __OFADD__(v40, v41);
      v42 = v40 + v41;
      if (v26)
        goto LABEL_24;
      v43 = v39;
      if (v37[3] < v42)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v42, 1);
        v38 = specialized __RawDictionaryStorage.find<A>(_:)(v31);
        if ((v43 & 1) != (v44 & 1))
          break;
      }
      v45 = (_QWORD *)*a5;
      if ((v43 & 1) != 0)
      {
        v33 = 8 * v38;
        v34 = *(_QWORD *)(v45[7] + 8 * v38);
        swift_retain();
        swift_release();
        v35 = v45[7];
        swift_release();
        *(_QWORD *)(v35 + v33) = v34;
      }
      else
      {
        v45[(v38 >> 6) + 8] |= 1 << v38;
        v46 = 8 * v38;
        *(_QWORD *)(v45[6] + v46) = v31;
        *(_QWORD *)(v45[7] + v46) = v32;
        v47 = v45[2];
        v26 = __OFADD__(v47, 1);
        v48 = v47 + 1;
        if (v26)
          goto LABEL_25;
        v45[2] = v48;
      }
      v31 = specialized LazyMapSequence.Iterator.next()();
      v32 = v36;
      if (v36 == 1)
        goto LABEL_14;
    }
  }
LABEL_26:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;
  void **v56;
  uint64_t (*v57)(void **, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;

  v10 = type metadata accessor for CommandOperation();
  v58 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v55 = (uint64_t)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v54 = (uint64_t)v53 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v53 - v18;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for (UIMenuElement, CommandOperation)?, (uint64_t (*)(uint64_t))type metadata accessor for (UIMenuElement, CommandOperation), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (void **)((char *)v53 - v22);
  v24 = -1 << *(_BYTE *)(a1 + 32);
  v25 = ~v24;
  v26 = *(_QWORD *)(a1 + 64);
  v27 = -v24;
  v59 = a1;
  v60 = a1 + 64;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  else
    v28 = -1;
  v61 = v25;
  v62 = 0;
  v63 = v28 & v26;
  v64 = a2;
  v65 = a3;
  v53[2] = a1;
  swift_bridgeObjectRetain();
  v53[1] = a3;
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v23);
  type metadata accessor for (UIMenuElement, CommandOperation)();
  v30 = v29;
  v57 = *(uint64_t (**)(void **, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48);
  if (v57(v23, 1, v29) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return swift_release();
  }
  else
  {
    v66 = a5;
    v56 = v23;
    v32 = a5;
    while (1)
    {
      v38 = *v23;
      v39 = (uint64_t)v19;
      outlined init with take of TableCellFormula((uint64_t)v23 + *(int *)(v30 + 48), (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
      v40 = *a5;
      v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v38);
      v43 = *(_QWORD *)(v40 + 16);
      v44 = (v41 & 1) == 0;
      v45 = v43 + v44;
      if (__OFADD__(v43, v44))
        break;
      v46 = v41;
      if (*(_QWORD *)(v40 + 24) >= v45)
      {
        if ((a4 & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, a4 & 1);
        v47 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v38);
        if ((v46 & 1) != (v48 & 1))
          goto LABEL_20;
        v42 = v47;
      }
      v49 = (_QWORD *)*v32;
      if ((v46 & 1) != 0)
      {
        v33 = v49[7];
        v34 = *(_QWORD *)(v58 + 72) * v42;
        v35 = v55;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v33 + v34, v55, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
        v36 = v54;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v35, v54, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v35, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
        v19 = (char *)v39;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v39, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);

        outlined assign with take of CommandOperation(v36, *(_QWORD *)(*v32 + 56) + v34);
      }
      else
      {
        v49[(v42 >> 6) + 8] |= 1 << v42;
        *(_QWORD *)(v49[6] + 8 * v42) = v38;
        v19 = (char *)v39;
        outlined init with take of TableCellFormula(v39, v49[7] + *(_QWORD *)(v58 + 72) * v42, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
        v50 = v49[2];
        v51 = __OFADD__(v50, 1);
        v52 = v50 + 1;
        if (v51)
          goto LABEL_19;
        v49[2] = v52;
      }
      v23 = v56;
      specialized LazyMapSequence.Iterator.next()((uint64_t)v56);
      a4 = 1;
      v37 = v57(v23, 1, v30);
      a5 = v66;
      if (v37 == 1)
        goto LABEL_5;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  _QWORD *v39;
  unint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  _QWORD v46[2];
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  void (*v49)(uint64_t, char *, uint64_t);
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;

  v50 = a5;
  v9 = type metadata accessor for UUID();
  v48 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v58 = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for (UUID, PlatformItemList)?, (uint64_t (*)(uint64_t))type metadata accessor for (UUID, PlatformItemList), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v46 - v14;
  v16 = -1 << *(_BYTE *)(a1 + 32);
  v17 = ~v16;
  v18 = *(_QWORD *)(a1 + 64);
  v19 = -v16;
  v51 = a1;
  v52 = a1 + 64;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  else
    v20 = -1;
  v53 = v17;
  v54 = 0;
  v55 = v20 & v18;
  v56 = a2;
  v57 = a3;
  v46[1] = a1;
  swift_bridgeObjectRetain();
  v46[0] = a3;
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v15);
  type metadata accessor for (UUID, PlatformItemList)();
  v22 = v21;
  v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48);
  if (v47(v15, 1, v21) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return swift_release();
  }
  v49 = *(void (**)(uint64_t, char *, uint64_t))(v48 + 32);
  while (1)
  {
    v27 = v22;
    v28 = *(int *)(v22 + 48);
    v29 = (uint64_t)v58;
    v30 = v9;
    v49((uint64_t)v58, v15, v9);
    v31 = *(_QWORD *)&v15[v28];
    v32 = (_QWORD *)*v50;
    v34 = specialized __RawDictionaryStorage.find<A>(_:)(v29);
    v35 = v32[2];
    v36 = (v33 & 1) == 0;
    v37 = v35 + v36;
    if (__OFADD__(v35, v36))
      break;
    v38 = v33;
    if (v32[3] >= v37)
    {
      if ((a4 & 1) != 0)
      {
        v39 = v50;
        v42 = (_QWORD *)*v50;
        if ((v33 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        v39 = v50;
        specialized _NativeDictionary.copy()();
        v42 = (_QWORD *)*v39;
        if ((v38 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      v39 = v50;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, a4 & 1);
      v40 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v58);
      if ((v38 & 1) != (v41 & 1))
        goto LABEL_22;
      v34 = v40;
      v42 = (_QWORD *)*v39;
      if ((v38 & 1) != 0)
      {
LABEL_7:
        v24 = 8 * v34;
        v25 = *(_QWORD *)(v42[7] + 8 * v34);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v9 = v30;
        (*(void (**)(char *, uint64_t))(v48 + 8))(v58, v30);
        v26 = *(_QWORD *)(*v39 + 56);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v26 + v24) = v25;
        goto LABEL_8;
      }
    }
    v42[(v34 >> 6) + 8] |= 1 << v34;
    v9 = v30;
    v49(v42[6] + *(_QWORD *)(v48 + 72) * v34, v58, v30);
    *(_QWORD *)(v42[7] + 8 * v34) = v31;
    v43 = v42[2];
    v44 = __OFADD__(v43, 1);
    v45 = v43 + 1;
    if (v44)
      goto LABEL_21;
    v42[2] = v45;
LABEL_8:
    specialized LazyMapSequence.Iterator.next()((uint64_t)v15);
    a4 = 1;
    v22 = v27;
    if (v47(v15, 1, v27) == 1)
      goto LABEL_5;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  _OWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::UInt v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  char v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  __int128 v51;
  uint64_t v52;
  __int128 v53;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v8)
    goto LABEL_23;
  v10 = v7;
  v11 = v8;
  v52 = v9;
  v12 = (_QWORD *)*a5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    *(_QWORD *)(v21[6] + 8 * v14) = v10;
    v24 = (_QWORD *)(v21[7] + 16 * v14);
    *v24 = v11;
    v24[1] = v52;
    v25 = v21[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v21[2] = v27;
LABEL_13:
    v28 = specialized LazyMapSequence.Iterator.next()();
    if (v29)
    {
      v31 = v28;
      v32 = v29;
      v33 = v30;
      do
      {
        v38 = (_QWORD *)*a5;
        v39 = specialized __RawDictionaryStorage.find<A>(_:)(v31);
        v41 = v38[2];
        v42 = (v40 & 1) == 0;
        v26 = __OFADD__(v41, v42);
        v43 = v41 + v42;
        if (v26)
          goto LABEL_24;
        v44 = v40;
        if (v38[3] < v43)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v43, 1);
          v39 = specialized __RawDictionaryStorage.find<A>(_:)(v31);
          if ((v44 & 1) != (v45 & 1))
            goto LABEL_26;
        }
        v46 = (_QWORD *)*a5;
        if ((v44 & 1) != 0)
        {
          v34 = 16 * v39;
          v53 = *(_OWORD *)(v46[7] + 16 * v39);
          swift_retain();
          swift_release();
          v35 = (_OWORD *)(v46[7] + v34);
          swift_release();
          *v35 = v53;
        }
        else
        {
          v46[(v39 >> 6) + 8] |= 1 << v39;
          *(_QWORD *)(v46[6] + 8 * v39) = v31;
          v47 = (_QWORD *)(v46[7] + 16 * v39);
          *v47 = v32;
          v47[1] = v33;
          v48 = v46[2];
          v26 = __OFADD__(v48, 1);
          v49 = v48 + 1;
          if (v26)
            goto LABEL_25;
          v46[2] = v49;
        }
        v31 = specialized LazyMapSequence.Iterator.next()();
        v32 = v36;
        v33 = v37;
      }
      while (v36);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1);
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    v22 = 16 * v14;
    v51 = *(_OWORD *)(v21[7] + v22);
    swift_retain();
    swift_release();
    v23 = (_OWORD *)(v21[7] + v22);
    swift_release();
    *v23 = v51;
    goto LABEL_13;
  }
LABEL_26:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int Enum;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[128];
  _BYTE v46[128];
  _QWORD v47[3];
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;

  v69 = a5;
  v6 = -1 << *(_BYTE *)(a1 + 32);
  v7 = ~v6;
  v8 = *(_QWORD *)(a1 + 64);
  v9 = -v6;
  v62 = a1;
  v63 = a1 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v64 = v7;
  v65 = 0;
  v66 = v10 & v8;
  v67 = a2;
  v68 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v47);
  outlined init with take of (Namespace.ID, OrnamentPresentation)?((uint64_t)v47, (uint64_t)v45);
  outlined init with take of (Namespace.ID, OrnamentPresentation)?((uint64_t)v45, (uint64_t)v46);
  Enum = getEnumTag for NavigationPath.Error((uint64_t)v46);
  while (1)
  {
    if (Enum == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
      return swift_release();
    }
    v14 = v47[0];
    v13 = v47[1];
    v15 = v47[2];
    v16 = v48;
    v17 = v49;
    v33 = v50;
    v34 = v51;
    v35 = v52;
    v36 = v53;
    v37 = v54;
    v38 = v55;
    v39 = v56;
    v40 = v57;
    v41 = v58;
    v42 = v59;
    v43 = v60;
    v44 = v61;
    v18 = (_QWORD *)*v69;
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(v47[0]);
    v21 = v18[2];
    v22 = (v19 & 1) == 0;
    v23 = v21 + v22;
    if (__OFADD__(v21, v22))
      break;
    v24 = v19;
    if (v18[3] >= v23)
    {
      if ((a4 & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, a4 & 1);
      v25 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
      if ((v24 & 1) != (v26 & 1))
        goto LABEL_20;
      v20 = v25;
    }
    v27 = (_QWORD *)*v69;
    if ((v24 & 1) != 0)
    {
      v12 = v27[7] + 120 * v20;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      *(_QWORD *)v12 = v13;
      *(_QWORD *)(v12 + 8) = v15;
      *(_BYTE *)(v12 + 16) = v16;
      *(_QWORD *)(v12 + 24) = v17;
      *(_QWORD *)(v12 + 32) = v33;
      *(_QWORD *)(v12 + 40) = v34;
      *(_QWORD *)(v12 + 48) = v35;
      *(_BYTE *)(v12 + 56) = v36;
      *(_QWORD *)(v12 + 64) = v37;
      *(_BYTE *)(v12 + 72) = v38;
      *(_BYTE *)(v12 + 73) = v39;
      *(_QWORD *)(v12 + 80) = v40;
      *(_QWORD *)(v12 + 88) = v41;
      *(_QWORD *)(v12 + 96) = v42;
      *(_QWORD *)(v12 + 104) = v43;
      *(_QWORD *)(v12 + 112) = v44;
    }
    else
    {
      v27[(v20 >> 6) + 8] |= 1 << v20;
      *(_QWORD *)(v27[6] + 8 * v20) = v14;
      v28 = v27[7] + 120 * v20;
      *(_QWORD *)v28 = v13;
      *(_QWORD *)(v28 + 8) = v15;
      *(_BYTE *)(v28 + 16) = v16;
      *(_QWORD *)(v28 + 24) = v17;
      *(_QWORD *)(v28 + 32) = v33;
      *(_QWORD *)(v28 + 40) = v34;
      *(_QWORD *)(v28 + 48) = v35;
      *(_BYTE *)(v28 + 56) = v36;
      *(_QWORD *)(v28 + 64) = v37;
      *(_BYTE *)(v28 + 72) = v38;
      *(_BYTE *)(v28 + 73) = v39;
      *(_QWORD *)(v28 + 80) = v40;
      *(_QWORD *)(v28 + 88) = v41;
      *(_QWORD *)(v28 + 96) = v42;
      *(_QWORD *)(v28 + 104) = v43;
      *(_QWORD *)(v28 + 112) = v44;
      v29 = v27[2];
      v30 = __OFADD__(v29, 1);
      v31 = v29 + 1;
      if (v30)
        goto LABEL_19;
      v27[2] = v31;
    }
    specialized LazyMapSequence.Iterator.next()((uint64_t)v47);
    outlined init with take of (Namespace.ID, OrnamentPresentation)?((uint64_t)v47, (uint64_t)v45);
    outlined init with take of (Namespace.ID, OrnamentPresentation)?((uint64_t)v45, (uint64_t)v46);
    Enum = getEnumTag for NavigationPath.Error((uint64_t)v46);
    a4 = 1;
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v8)
    goto LABEL_23;
  v9 = v7;
  v10 = v8;
  v11 = (_QWORD *)*a5;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v17 = v12;
  if (v11[3] >= v16)
  {
    if ((a4 & 1) != 0)
    {
      v20 = (_QWORD *)*a5;
      if ((v12 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v20 = (_QWORD *)*a5;
      if ((v17 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v20[(v13 >> 6) + 8] |= 1 << v13;
    v24 = 8 * v13;
    *(_QWORD *)(v20[6] + v24) = v9;
    *(_QWORD *)(v20[7] + v24) = v10;
    v25 = v20[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v20[2] = v27;
LABEL_13:
    v28 = specialized LazyMapSequence.Iterator.next()();
    if (v29)
    {
      v30 = v28;
      v31 = v29;
      do
      {
        v36 = (_QWORD *)*a5;
        v37 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
        v39 = v36[2];
        v40 = (v38 & 1) == 0;
        v26 = __OFADD__(v39, v40);
        v41 = v39 + v40;
        if (v26)
          goto LABEL_24;
        v42 = v38;
        if (v36[3] < v41)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, 1);
          v37 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
          if ((v42 & 1) != (v43 & 1))
            goto LABEL_26;
        }
        v44 = (_QWORD *)*a5;
        if ((v42 & 1) != 0)
        {
          v32 = 8 * v37;
          v33 = *(_QWORD *)(v44[7] + 8 * v37);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v34 = v44[7];
          swift_bridgeObjectRelease();
          *(_QWORD *)(v34 + v32) = v33;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v30;
          *(_QWORD *)(v44[7] + v45) = v31;
          v46 = v44[2];
          v26 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v26)
            goto LABEL_25;
          v44[2] = v47;
        }
        v30 = specialized LazyMapSequence.Iterator.next()();
        v31 = v35;
      }
      while (v35);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
  if ((v17 & 1) == (v19 & 1))
  {
    v13 = v18;
    v20 = (_QWORD *)*a5;
    if ((v17 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    v21 = 8 * v13;
    v22 = *(_QWORD *)(v20[7] + 8 * v13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v23 = v20[7];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v23 + v21) = v22;
    goto LABEL_13;
  }
LABEL_26:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  Swift::UInt v7;
  uint64_t v8;
  Swift::UInt v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::UInt v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v7)
    goto LABEL_23;
  v9 = v7;
  v10 = v8;
  v11 = (_QWORD *)*a5;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v17 = v12;
  if (v11[3] >= v16)
  {
    if ((a4 & 1) != 0)
    {
      v20 = (_QWORD *)*a5;
      if ((v12 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v20 = (_QWORD *)*a5;
      if ((v17 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v20[(v13 >> 6) + 8] |= 1 << v13;
    v24 = 8 * v13;
    *(_QWORD *)(v20[6] + v24) = v9;
    *(_QWORD *)(v20[7] + v24) = v10;
    v25 = v20[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v20[2] = v27;
LABEL_13:
    v28 = specialized LazyMapSequence.Iterator.next()();
    if (v28)
    {
      v30 = v28;
      v31 = v29;
      do
      {
        v36 = (_QWORD *)*a5;
        v37 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
        v39 = v36[2];
        v40 = (v38 & 1) == 0;
        v26 = __OFADD__(v39, v40);
        v41 = v39 + v40;
        if (v26)
          goto LABEL_24;
        v42 = v38;
        if (v36[3] < v41)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, 1);
          v37 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
          if ((v42 & 1) != (v43 & 1))
            goto LABEL_26;
        }
        v44 = (_QWORD *)*a5;
        if ((v42 & 1) != 0)
        {
          v32 = 8 * v37;
          v33 = *(_QWORD *)(v44[7] + 8 * v37);
          swift_retain();
          swift_release();
          v34 = v44[7];
          swift_release();
          *(_QWORD *)(v34 + v32) = v33;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v30;
          *(_QWORD *)(v44[7] + v45) = v31;
          v46 = v44[2];
          v26 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v26)
            goto LABEL_25;
          v44[2] = v47;
        }
        v30 = specialized LazyMapSequence.Iterator.next()();
        v31 = v35;
      }
      while (v30);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
  if ((v17 & 1) == (v19 & 1))
  {
    v13 = v18;
    v20 = (_QWORD *)*a5;
    if ((v17 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    v21 = 8 * v13;
    v22 = *(_QWORD *)(v20[7] + 8 * v13);
    swift_retain();
    swift_release();
    v23 = v20[7];
    swift_release();
    *(_QWORD *)(v23 + v21) = v22;
    goto LABEL_13;
  }
LABEL_26:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v4 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a1 + 2);
  *(_DWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v3;
  return swift_retain();
}

_QWORD *specialized static SceneBridge.UserActivityPreferenceKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(__int128 *__return_ptr, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v4 = a1[1];
  if (v4)
  {
    v5 = *a1;
    v6 = a1[2];
    swift_bridgeObjectRetain();
    v7 = swift_bridgeObjectRetain();
    a2(&v12, v7);
    if (*((_QWORD *)&v12 + 1))
    {
      v8 = v13;
      if (__PAIR128__(v4, v5) == v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v9 = specialized Dictionary.merging(_:uniquingKeysWith:)(v8, v6);
        swift_bridgeObjectRelease();
        result = (_QWORD *)outlined consume of FocusStore?(v5, v4);
        *a1 = v5;
        a1[1] = v4;
        a1[2] = v9;
        return result;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    result = ((_QWORD *(*)(__int128 *__return_ptr))a2)(&v12);
    v11 = v13;
    *(_OWORD *)a1 = v12;
    a1[2] = v11;
  }
  return result;
}

_QWORD *specialized static SceneBridge.ActivationConditionsPreferenceKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(__int128 *__return_ptr, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  __int128 v11;

  v4 = *a1;
  if (*a1)
  {
    v5 = a1[1];
    swift_bridgeObjectRetain();
    v6 = swift_bridgeObjectRetain();
    a2(&v11, v6);
    if ((_QWORD)v11)
    {
      v7 = *((_QWORD *)&v11 + 1);
      outlined consume of (preferring: Set<String>, allowing: Set<String>)?(v4);
      swift_bridgeObjectRetain();
      v8 = swift_bridgeObjectRetain();
      v9 = specialized Set.union<A>(_:)(v8, v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = (_QWORD *)specialized Set.union<A>(_:)(v7, v5);
      *a1 = v9;
      a1[1] = (uint64_t)result;
    }
    else
    {
      return (_QWORD *)outlined consume of (preferring: Set<String>, allowing: Set<String>)?(v4);
    }
  }
  else
  {
    result = ((_QWORD *(*)(__int128 *__return_ptr))a2)(&v11);
    *(_OWORD *)a1 = v11;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivedViewState.ID and conformance ArchivedViewState.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedViewState.ID and conformance ArchivedViewState.ID;
  if (!lazy protocol witness table cache variable for type ArchivedViewState.ID and conformance ArchivedViewState.ID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivedViewState.ID, &type metadata for ArchivedViewState.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewState.ID and conformance ArchivedViewState.ID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedViewState.ID and conformance ArchivedViewState.ID;
  if (!lazy protocol witness table cache variable for type ArchivedViewState.ID and conformance ArchivedViewState.ID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivedViewState.ID, &type metadata for ArchivedViewState.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewState.ID and conformance ArchivedViewState.ID);
  }
  return result;
}

void type metadata accessor for UIViewController?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UIViewController?)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIViewController?);
  }
}

unint64_t lazy protocol witness table accessor for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind;
  if (!lazy protocol witness table cache variable for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarDefaultItemKind.Kind, &type metadata for ToolbarDefaultItemKind.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind;
  if (!lazy protocol witness table cache variable for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarDefaultItemKind.Kind, &type metadata for ToolbarDefaultItemKind.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind);
  }
  return result;
}

uint64_t outlined init with take of ToolbarItemPlacement.Role(uint64_t a1, uint64_t a2)
{
  __swift_memcpy41_8(a2, a1);
  return a2;
}

void type metadata accessor for _SetStorage<UIOpenURLContext>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    type metadata accessor for NSObject(255, a3);
    lazy protocol witness table accessor for type UIScene and conformance NSObject(a5, a3);
    v8 = type metadata accessor for _SetStorage();
    if (!v9)
      atomic_store(v8, a2);
  }
}

void type metadata accessor for _SetStorage<AGAttribute>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(a4, 255, a3, a5);
    v9 = type metadata accessor for _SetStorage();
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_18715E4E8()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in UserActivityTrackingInfo.userActivityWillSave(_:)()
{
  NSUserActivity *v0;

  UserActivityTrackingInfo.updateUserActivity(_:)(v0[3]);
}

uint64_t sub_18715E538()
{
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in UserActivityTrackingInfo.updateUserActivity(_:)(unsigned int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  char v4;
  uint64_t v5;

  v4 = a2(*(_QWORD *)(v2 + 16));
  v5 = a1;
  if ((v4 & 1) != 0)
    v5 = 0;
  return v5 | ((unint64_t)(v4 & 1) << 32);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t (*)(uint64_t a1), uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;

  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v20 = MEMORY[0x1E0DEE9D8];
  if (!v6)
    goto LABEL_7;
LABEL_4:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v16)) + (v8 << 6))
  {
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * i);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = *(_OWORD *)(v11 + 16 * i);
    swift_retain_n();
    v14 = a2(v12, partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed NSUserActivity) -> (@out Bool), v13);
    swift_release();
    result = swift_release();
    if ((v14 & 0x100000000) != 0)
    {
      if (v6)
        goto LABEL_4;
    }
    else
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1, (char *)v20);
        v20 = result;
      }
      v19 = *(_QWORD *)(v20 + 16);
      v18 = *(_QWORD *)(v20 + 24);
      if (v19 >= v18 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, (char *)v20);
        v20 = result;
      }
      *(_QWORD *)(v20 + 16) = v19 + 1;
      *(_DWORD *)(v20 + 4 * v19 + 32) = v14;
      if (v6)
        goto LABEL_4;
    }
LABEL_7:
    v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v15 >= v22)
      goto LABEL_29;
    v16 = *(_QWORD *)(v21 + 8 * v15);
    ++v8;
    if (!v16)
    {
      v8 = v15 + 1;
      if (v15 + 1 >= v22)
        goto LABEL_29;
      v16 = *(_QWORD *)(v21 + 8 * v8);
      if (!v16)
      {
        v8 = v15 + 2;
        if (v15 + 2 >= v22)
          goto LABEL_29;
        v16 = *(_QWORD *)(v21 + 8 * v8);
        if (!v16)
        {
          v8 = v15 + 3;
          if (v15 + 3 >= v22)
            goto LABEL_29;
          v16 = *(_QWORD *)(v21 + 8 * v8);
          if (!v16)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v16 - 1) & v16;
  }
  v17 = v15 + 4;
  if (v17 >= v22)
  {
LABEL_29:
    swift_release();
    return v20;
  }
  v16 = *(_QWORD *)(v21 + 8 * v17);
  if (v16)
  {
    v8 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v8 >= v22)
      goto LABEL_29;
    v16 = *(_QWORD *)(v21 + 8 * v8);
    ++v17;
    if (v16)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_18715E80C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed NSUserActivity) -> (@out Bool)(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(unsigned __int8 *__return_ptr, uint64_t *);
  unsigned __int8 v4;
  uint64_t v5;

  v2 = *(void (**)(unsigned __int8 *__return_ptr, uint64_t *))(v1 + 16);
  v5 = a1;
  v2(&v4, &v5);
  return v4;
}

id specialized SceneBridge.buildActivationConditions(_:)(unint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  id v19;
  uint64_t v20;
  id result;
  id v22;
  Class isa;
  id v24;
  uint64_t v25;
  id v26;
  unint64_t v27;

  if (!a1)
  {
    v19 = objc_msgSend((id)objc_opt_self(), sel_predicateWithValue_, 0);
    return v19;
  }
  v2 = a1;
  v27 = MEMORY[0x1E0DEE9D8];
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  while (v6)
  {
    v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v10 = v9 | (v8 << 6);
LABEL_21:
    v14 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v16 = *v14;
    v15 = v14[1];
    if (*v14)
      v17 = 0;
    else
      v17 = v15 == 0xE000000000000000;
    if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v18 = v16 == 42 && v15 == 0xE100000000000000;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v22 = objc_msgSend((id)objc_opt_self(), sel_predicateWithValue_, 1);
        swift_release();
        return v22;
      }
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSPredicate);
      _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, 255, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v1 = swift_allocObject();
      *(_OWORD *)(v1 + 16) = xmmword_187BF9830;
      *(_QWORD *)(v1 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v1 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v1 + 32) = v16;
      *(_QWORD *)(v1 + 40) = v15;
      swift_bridgeObjectRetain();
      NSPredicate.init(format:_:)();
      MEMORY[0x18D75CF58]();
      if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v11 >= v7)
    goto LABEL_35;
  v12 = *(_QWORD *)(v3 + 8 * v11);
  ++v8;
  if (v12)
    goto LABEL_20;
  v8 = v11 + 1;
  if (v11 + 1 >= v7)
    goto LABEL_35;
  v12 = *(_QWORD *)(v3 + 8 * v8);
  if (v12)
    goto LABEL_20;
  v8 = v11 + 2;
  if (v11 + 2 >= v7)
    goto LABEL_35;
  v12 = *(_QWORD *)(v3 + 8 * v8);
  if (v12)
  {
LABEL_20:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_21;
  }
  v13 = v11 + 3;
  if (v13 >= v7)
  {
LABEL_35:
    swift_release();
    v2 = v27;
    v1 = v27 >> 62;
    if (v27 >> 62)
      goto LABEL_44;
    v20 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v20 != 1)
      goto LABEL_37;
LABEL_45:
    if (v1)
    {
      swift_bridgeObjectRetain();
      result = (id)_CocoaArrayWrapper.endIndex.getter();
      if (result)
      {
LABEL_47:
        if ((v2 & 0xC000000000000001) == 0)
        {
          if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return result;
          }
          v26 = *(id *)(v2 + 32);
LABEL_50:
          v22 = v26;
          swift_bridgeObjectRelease_n();
          return v22;
        }
LABEL_54:
        v26 = (id)MEMORY[0x18D75E3BC](0, v2);
        goto LABEL_50;
      }
    }
    else
    {
      v25 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = (id)swift_bridgeObjectRetain();
      if (v25)
        goto LABEL_47;
    }
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_54;
  }
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      goto LABEL_35;
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  swift_bridgeObjectRetain();
  v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v20 == 1)
    goto LABEL_45;
LABEL_37:
  if (!v20)
  {
    swift_bridgeObjectRelease();
    v19 = objc_msgSend((id)objc_opt_self(), sel_predicateWithValue_, 0);
    return v19;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSPredicate);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v24 = objc_msgSend((id)objc_opt_self(), sel_orPredicateWithSubpredicates_, isa);

  return v24;
}

uint64_t specialized static SceneBridge.targetContentIdentifierForExternalEvent(userActivity:url:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, 255, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v38 - v16;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v38 - v20;
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)&v38 - v25;
  if (!a1)
    goto LABEL_11;
  v27 = objc_msgSend(a1, sel_targetContentIdentifier, v24);
  if (v27)
  {
    v28 = v27;
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v31 = v30;

    goto LABEL_4;
  }
  v32 = objc_msgSend(a1, sel_webpageURL);
  if (v32)
  {
    v33 = v32;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v34 = 0;
  }
  else
  {
    v34 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v21, v34, 1, v4);
  outlined init with take of URL?((uint64_t)v21, (uint64_t)v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v26, 1, v4))
  {
    outlined destroy of URL?((uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
LABEL_11:
    outlined init with copy of URL?(a2, (uint64_t)v17);
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v26, v4);
  outlined destroy of URL?((uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  v29 = URL.absoluteString.getter();
  v31 = v37;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
LABEL_4:
  outlined init with copy of URL?(a2, (uint64_t)v17);
  if (v31)
  {
    outlined destroy of URL?((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    return v29;
  }
LABEL_12:
  outlined init with copy of URL?((uint64_t)v17, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
  {
    v35 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8];
    outlined destroy of URL?((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    outlined destroy of URL?((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for URL?, v35);
    return 0;
  }
  else
  {
    v29 = URL.absoluteString.getter();
    outlined destroy of URL?((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
  }
  return v29;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CommandGroupPlacementBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CommandGroupPlacementBox(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of (preferring: Set<String>, allowing: Set<String>)?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t specialized static SceneBridge.sceneBridgePublisher(_:identifier:sceneBridge:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  uint64_t inited;
  char v28;
  void *v29;
  _QWORD *v30;
  unint64_t v31;
  void *v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t aBlock;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  void *v44;
  uint64_t (*v45)();
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;

  v39 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS();
  v37 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = a1;
  AnyHashable.init<A>(_:)();
  v16 = (uint64_t *)(a4 + 16);
  swift_beginAccess();
  v17 = *(_QWORD *)(a4 + 16);
  v18 = *(_QWORD *)(v17 + 16);
  v38 = v12;
  if (v18 && (v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&aBlock), (v20 & 1) != 0))
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v19);
    swift_bridgeObjectRetain();
  }
  else
  {
    v21 = 0;
  }
  swift_endAccess();
  outlined destroy of AnyHashable((uint64_t)&aBlock);
  if (v21)
  {
    v47 = v39;
    v48 = a3;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (*(_QWORD *)(v21 + 16))
    {
      v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&aBlock);
      if ((v23 & 1) != 0)
      {
        v24 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v22);
        swift_retain();
        outlined destroy of AnyHashable((uint64_t)&aBlock);
        goto LABEL_17;
      }
    }
    outlined destroy of AnyHashable((uint64_t)&aBlock);
  }
  v36 = v8;
  type metadata accessor for PassthroughSubject<Any, Never>();
  swift_allocObject();
  v24 = PassthroughSubject.init()();
  if (v21)
  {
    v47 = v39;
    v48 = a3;
    swift_bridgeObjectRetain_n();
    swift_retain();
    AnyHashable.init<A>(_:)();
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v47 = v21;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, (uint64_t)&aBlock, isUniquelyReferenced_nonNull_native);
    v26 = v47;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&aBlock);
  }
  else
  {
    type metadata accessor for _ContiguousArrayStorage<(ViewIdentity, (_:))>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, PassthroughSubject<Any, Never>)>, &lazy cache variable for type metadata for (AnyHashable, PassthroughSubject<Any, Never>), (void (*)(uint64_t))type metadata accessor for PassthroughSubject<Any, Never>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    aBlock = v39;
    v42 = a3;
    swift_bridgeObjectRetain();
    swift_retain();
    AnyHashable.init<A>(_:)();
    *(_QWORD *)(inited + 72) = v24;
    v26 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    swift_bridgeObjectRelease();
  }
  v47 = a1;
  AnyHashable.init<A>(_:)();
  swift_beginAccess();
  if (v26)
  {
    swift_bridgeObjectRetain();
    v28 = swift_isUniquelyReferenced_nonNull_native();
    v40 = *v16;
    *v16 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v26, (uint64_t)&aBlock, v28);
    *v16 = v40;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&aBlock);
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)&aBlock);
    outlined destroy of AnyHashable((uint64_t)&aBlock);
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v29 = (void *)static OS_dispatch_queue.main.getter();
  v30 = (_QWORD *)swift_allocObject();
  v31 = v39;
  v30[2] = a4;
  v30[3] = v31;
  v30[4] = a3;
  v30[5] = a1;
  v45 = partial apply for closure #1 in static SceneBridge.sceneBridgePublisher(_:identifier:sceneBridge:);
  v46 = v30;
  aBlock = MEMORY[0x1E0C809B0];
  v42 = 1107296256;
  v43 = thunk for @escaping @callee_guaranteed () -> ();
  v44 = &block_descriptor_38;
  v32 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock = MEMORY[0x1E0DEE9D8];
  v33 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], 255, v33, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x18D75D930](0, v15, v11, v32);
  _Block_release(v32);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v7);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v38);
LABEL_17:
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t partial apply for closure #1 in closure #1 in View.onOpenURL(perform:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in View.onOpenURL(perform:)(a1, *(void (**)(char *, id *))(v1 + 16));
}

{
  uint64_t v1;

  return closure #1 in closure #1 in View.onOpenURL(perform:)(a1, *(void (**)(_BYTE *))(v1 + 16));
}

uint64_t sub_18715F664()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_18715F698()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in View.onContinueUserActivity(_:perform:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in View.onContinueUserActivity(_:perform:)(a1, *(void (**)())(v1 + 16));
}

uint64_t sub_18715F6D0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in View.userActivity(_:isActive:_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  if ((_DWORD)v1 == 1)
    (*(void (**)(void))(v0 + 24))();
  return v1;
}

uint64_t sub_18715F728()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t *partial apply for closure #1 in View.advertiseUserActivity(_:isActive:sceneBridge:handler:)(uint64_t *a1, Swift::UInt32 a2)
{
  uint64_t v2;

  return closure #1 in View.advertiseUserActivity(_:isActive:sceneBridge:handler:)(a1, a2, *(_BYTE *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed NSUserActivity) -> (@unowned Bool)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *a2 = result & 1;
  return result;
}

unint64_t type metadata accessor for CVarArg()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CVarArg;
  if (!lazy cache variable for type metadata for CVarArg)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for OpenURLContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    v10 = v9;
  }
  return a1;
}

void destroy for OpenURLContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t initializeWithCopy for OpenURLContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v9 = v8;
  return a1;
}

uint64_t assignWithCopy for OpenURLContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = v9;

  return a1;
}

uint64_t initializeWithTake for OpenURLContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for OpenURLContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  return a1;
}

uint64_t getEnumTagSinglePayload for OpenURLContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18715FA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for OpenURLContext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18715FAF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for URL();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t sub_18715FB68(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void type metadata accessor for _SetStorage<NavigationStackHostingController<AnyView>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _SetStorage<NavigationStackHostingController<AnyView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
    lazy protocol witness table accessor for type NavigationStackHostingController<AnyView> and conformance NSObject();
    v0 = type metadata accessor for _SetStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<NavigationStackHostingController<AnyView>>);
  }
}

uint64_t closure #1 in static LazyVStack._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v8[2] = type metadata accessor for LazyVStack(0, a2, a3, a4);
  v9 = type metadata accessor for _VariadicView.Tree();
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, v9, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v10;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LazyVStack<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyVStack<A>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance LazyVStack<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyVStack<A>, a1);
  specialized PrimitiveView.body.getter();
}

_UNKNOWN **base witness table accessor for View in LazyVStack<A>()
{
  return &protocol witness table for LazyVStack<A>;
}

uint64_t *initializeBufferWithCopyOfBuffer for LazyVStack(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 24) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 24) & ~v5, ((unint64_t)a2 + v5 + 24) & ~v5);
  }
  return v3;
}

uint64_t initializeWithTake for LazyVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 24 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 24 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for LazyVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 40))((*(unsigned __int8 *)(v5 + 80) + 24 + a1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), (*(unsigned __int8 *)(v5 + 80) + 24 + a2) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyVStack(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 24) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 24) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18715FFA0 + 4 * byte_187C0DD30[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for LazyVStack(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 24) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 24) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

unint64_t lazy protocol witness table accessor for type _VStackLayout and conformance _VStackLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _VStackLayout and conformance _VStackLayout;
  if (!lazy protocol witness table cache variable for type _VStackLayout and conformance _VStackLayout)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE25E0], MEMORY[0x1E0CE25F0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VStackLayout and conformance _VStackLayout);
  }
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance LazyVStackLayout()
{
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance LazyVStackLayout()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t IndexPath.flatIndex.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD *, _QWORD);
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];

  v1 = type metadata accessor for IndexPath();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<IndexPath>();
  v7 = v6;
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v2 + 16);
  v23 = v0;
  v12(v5, v0, v1, v9);
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E0CB1688]);
  dispatch thunk of Sequence.makeIterator()();
  v13 = &v11[*(int *)(v7 + 36)];
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E0CB1690]);
  v14 = 0;
  while (1)
  {
    v15 = *(_QWORD *)v13;
    dispatch thunk of Collection.endIndex.getter();
    if (v15 == v24[0])
      break;
    v16 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    v18 = *v17;
    v16(v24, 0);
    ((void (*)(char *, char *, uint64_t))v12)(v5, v11, v1);
    dispatch thunk of Collection.formIndex(after:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    v19 = __OFADD__(v14, v18);
    v14 += v18;
    if (v19)
    {
      __break(1u);
      break;
    }
  }
  outlined destroy of IndexingIterator<IndexPath>((uint64_t)v11);
  result = IndexPath.count.getter();
  v21 = v14 + result;
  if (__OFADD__(v14, result))
  {
    __break(1u);
    goto LABEL_10;
  }
  result = v21 - 1;
  if (__OFSUB__(v21, 1))
LABEL_10:
    __break(1u);
  return result;
}

void type metadata accessor for IndexingIterator<IndexPath>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for IndexingIterator<IndexPath>)
  {
    type metadata accessor for IndexPath();
    lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E0CB1690]);
    v0 = type metadata accessor for IndexingIterator();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<IndexPath>);
  }
}

uint64_t outlined destroy of IndexingIterator<IndexPath>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for IndexingIterator<IndexPath>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t IndexPath.parent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for IndexPath();
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E0CB1690]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v6 == v5)
  {
    v3 = 1;
  }
  else
  {
    IndexPath.dropLast()();
    v3 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, v3, 1, v2);
}

uint64_t IndexPath.isParent(of:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v2 = v1;
  v4 = type metadata accessor for IndexPath();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v30 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v29 - v10;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v29 - v14;
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v29 - v18;
  v20 = IndexPath.count.getter();
  result = IndexPath.count.getter();
  v22 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v23(v19, v2, v4);
    v23(v15, a1, v4);
    if (v20 == v22)
    {
      lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E0CB1690]);
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of Collection.endIndex.getter();
      v25 = v31;
      v24 = v32;
      v23(v11, (uint64_t)v15, v4);
      v26 = (uint64_t)v30;
      v23(v30, (uint64_t)v19, v4);
      if (v24 == v25)
        v27 = 1;
      else
        v27 = specialized Sequence<>.starts<A>(with:)(v26);
      v28 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v28(v26, v4);
      v28((uint64_t)v11, v4);
      v28((uint64_t)v15, v4);
    }
    else
    {
      v27 = 0;
      v28 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v28((uint64_t)v15, v4);
    }
    v28((uint64_t)v19, v4);
    return v27 & 1;
  }
  return result;
}

uint64_t specialized Sequence<>.starts<A>(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t, double);
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  void (*v24)(_QWORD *, _QWORD);
  uint64_t *v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD *, _QWORD);
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_QWORD *, _QWORD);
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[4];

  v2 = v1;
  v4 = type metadata accessor for IndexPath();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<IndexPath>();
  v10 = v9;
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v39 - v17;
  v40 = v5;
  v19 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v19(v8, a1, v4, v16);
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E0CB1688]);
  v42 = v18;
  dispatch thunk of Sequence.makeIterator()();
  v39 = (void (*)(char *, char *, uint64_t))v19;
  ((void (*)(char *, uint64_t, uint64_t))v19)(v8, v2, v4);
  dispatch thunk of Sequence.makeIterator()();
  v41 = v10;
  v20 = v8;
  v21 = &v13[*(int *)(v10 + 36)];
  v44 = lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E0CB1690]);
  v22 = v39;
  while (1)
  {
    v23 = *(_QWORD *)v21;
    dispatch thunk of Collection.endIndex.getter();
    if (v23 == v45[0])
      break;
    v24 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    v43 = *v25;
    v24(v45, 0);
    v22(v20, v13, v4);
    v26 = v21;
    dispatch thunk of Collection.formIndex(after:)();
    v27 = *(void (**)(char *, uint64_t))(v40 + 8);
    v27(v20, v4);
    v28 = (uint64_t)v42;
    v29 = *(_QWORD *)&v42[*(int *)(v41 + 36)];
    dispatch thunk of Collection.endIndex.getter();
    if (v29 == v45[0])
    {
      outlined destroy of IndexingIterator<IndexPath>((uint64_t)v13);
      v34 = 1;
      v35 = v28;
      goto LABEL_10;
    }
    v30 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    v32 = *v31;
    v30(v45, 0);
    v22(v20, (char *)v28, v4);
    dispatch thunk of Collection.formIndex(after:)();
    v27(v20, v4);
    v33 = v43 == v32;
    v21 = v26;
    if (!v33)
    {
      outlined destroy of IndexingIterator<IndexPath>((uint64_t)v13);
      v34 = 0;
      v35 = (uint64_t)v42;
      goto LABEL_10;
    }
  }
  outlined destroy of IndexingIterator<IndexPath>((uint64_t)v13);
  v35 = (uint64_t)v42;
  v36 = *(_QWORD *)&v42[*(int *)(v41 + 36)];
  dispatch thunk of Collection.endIndex.getter();
  if (v36 == v45[0])
  {
    v34 = 1;
  }
  else
  {
    v37 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    v37(v45, 0);
    v39(v20, (char *)v35, v4);
    dispatch thunk of Collection.formIndex(after:)();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v20, v4);
    v34 = 0;
  }
LABEL_10:
  outlined destroy of IndexingIterator<IndexPath>(v35);
  return v34;
}

uint64_t IndexPath.isChild(of:)()
{
  uint64_t v0;

  return IndexPath.isParent(of:)(v0) & 1;
}

uint64_t IndexPath.isAncestor(of:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v2 = v1;
  v4 = type metadata accessor for IndexPath();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v30 = (char *)&v29 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v29 - v14;
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v29 - v18;
  v20 = IndexPath.count.getter();
  v21 = IndexPath.count.getter();
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v22(v19, v2, v4);
  v22(v15, a1, v4);
  if (v21 >= v20)
  {
    v26 = 0;
    v27 = *(void (**)(char *, uint64_t))(v5 + 8);
    v27(v15, v4);
  }
  else
  {
    lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E0CB1690]);
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of Collection.endIndex.getter();
    v24 = v31;
    v23 = v32;
    v25 = v30;
    v22(v30, (uint64_t)v15, v4);
    v22(v8, (uint64_t)v19, v4);
    if (v23 == v24)
      v26 = 1;
    else
      v26 = specialized Sequence<>.starts<A>(with:)((uint64_t)v8);
    v27 = *(void (**)(char *, uint64_t))(v5 + 8);
    v27(v8, v4);
    v27(v25, v4);
    v27(v15, v4);
  }
  v27(v19, v4);
  return v26 & 1;
}

uint64_t IndexPath.isDescendant(of:)()
{
  uint64_t v0;

  return IndexPath.isAncestor(of:)(v0) & 1;
}

uint64_t IndexPath.isSiblingOf(of:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  int v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v2 = v1;
  v4 = type metadata accessor for IndexPath();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v33 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v35 = (char *)&v32 - v10;
  MEMORY[0x1E0C80A78](v11, v12);
  v34 = (char *)&v32 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v32 - v16;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v32 - v20;
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E0CB1690]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  v23 = v36;
  v22 = v37;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v24(v21, v2, v4);
  v24(v17, a1, v4);
  if (v22 == v23)
  {
    v25 = 0;
  }
  else
  {
    v26 = IndexPath.count.getter();
    v25 = v26 == IndexPath.count.getter();
  }
  v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  v27(v17, v4);
  v27(v21, v4);
  v28 = v34;
  v24(v34, v2, v4);
  v29 = v35;
  v24(v35, a1, v4);
  if (v25)
  {
    v30 = (uint64_t)v33;
    IndexPath.dropLast()();
    LOBYTE(v25) = specialized Sequence<>.starts<A>(with:)(v30);
    v27((char *)v30, v4);
  }
  v27(v29, v4);
  v27(v28, v4);
  return v25 & 1;
}

uint64_t IndexPath.sibling(atOffset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  void (*v11)(_QWORD *, _QWORD);
  uint64_t *v12;
  uint64_t v13;
  _QWORD v15[5];

  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v15[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E0CB1690]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v15[0] == v15[4])
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, v2, v5);
  IndexPath.dropLast()();
  result = dispatch thunk of Collection.isEmpty.getter();
  if ((result & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  dispatch thunk of Collection.endIndex.getter();
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E0CB1670]);
  dispatch thunk of BidirectionalCollection.index(before:)();
  v11 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
  v13 = *v12;
  v11(v15, 0);
  result = v13 + a1;
  if (__OFADD__(v13, a1))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  IndexPath.appending(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t lazy protocol witness table accessor for type IndexPath and conformance IndexPath(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for IndexPath();
    result = MEMORY[0x18D75FFDC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t AutomaticDisclosureGroupStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t KeyPath;
  uint64_t v7;

  v3 = *a1;
  v4 = a1[1];
  v5 = *((_BYTE *)a1 + 16);
  KeyPath = swift_getKeyPath();
  v7 = swift_getKeyPath();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 17) = 1;
  *(_BYTE *)(a2 + 24) = 2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = KeyPath;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 2;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = v7;
  *(_BYTE *)(a2 + 80) = 0;
  swift_retain();
  return swift_retain();
}

uint64_t protocol witness for DisclosureGroupStyle.makeBody(configuration:) in conformance AutomaticDisclosureGroupStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return AutomaticDisclosureGroupStyle.makeBody(configuration:)(a1, a2);
}

uint64_t sub_18716124C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.shouldBuildExpandedContentLazily.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187161288()
{
  return EnvironmentValues.shouldBuildExpandedContentLazily.setter();
}

uint64_t associated type witness table accessor for DisclosureGroupStyle.Body : View in AutomaticDisclosureGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for AutomaticDisclosureGroupStyle()
{
  return &type metadata for AutomaticDisclosureGroupStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, DisclosureGroupStyleModifier<LeadingAlignedDisclosureGroupStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, DisclosureGroupStyleModifier<LeadingAlignedDisclosureGroupStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, DisclosureGroupStyleModifier<LeadingAlignedDisclosureGroupStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, DisclosureGroupStyleModifier<LeadingAlignedDisclosureGroupStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for DisclosureGroupStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, DisclosureGroupStyleModifier<LeadingAlignedDisclosureGroupStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, DisclosureGroupStyleModifier<LeadingAlignedDisclosureGroupStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, DisclosureGroupStyleModifier<LeadingAlignedDisclosureGroupStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>);
    type metadata accessor for DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>(255, &lazy cache variable for type metadata for DisclosureGroupStyleModifier<LeadingAlignedDisclosureGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type LeadingAlignedDisclosureGroupStyle and conformance LeadingAlignedDisclosureGroupStyle, (uint64_t)&type metadata for LeadingAlignedDisclosureGroupStyle);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, DisclosureGroupStyleModifier<LeadingAlignedDisclosureGroupStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>);
}

uint64_t type metadata accessor for DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>;
  if (!lazy cache variable for type metadata for DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>)
    type metadata accessor for DisclosureGroup();
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>);
    type metadata accessor for DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>(255, &lazy cache variable for type metadata for DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarDisclosureGroupStyle and conformance SidebarDisclosureGroupStyle, (uint64_t)&type metadata for SidebarDisclosureGroupStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SidebarDisclosureGroupStyle and conformance SidebarDisclosureGroupStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SidebarDisclosureGroupStyle and conformance SidebarDisclosureGroupStyle;
  if (!lazy protocol witness table cache variable for type SidebarDisclosureGroupStyle and conformance SidebarDisclosureGroupStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarDisclosureGroupStyle, &type metadata for SidebarDisclosureGroupStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarDisclosureGroupStyle and conformance SidebarDisclosureGroupStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>);
    type metadata accessor for DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>(255, &lazy cache variable for type metadata for DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListDisclosureGroupStyle and conformance ListDisclosureGroupStyle, (uint64_t)&type metadata for ListDisclosureGroupStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListDisclosureGroupStyle and conformance ListDisclosureGroupStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListDisclosureGroupStyle and conformance ListDisclosureGroupStyle;
  if (!lazy protocol witness table cache variable for type ListDisclosureGroupStyle and conformance ListDisclosureGroupStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListDisclosureGroupStyle, &type metadata for ListDisclosureGroupStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListDisclosureGroupStyle and conformance ListDisclosureGroupStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    type metadata accessor for DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>(255, &lazy cache variable for type metadata for DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListDisclosureGroupStyle and conformance ListDisclosureGroupStyle, (uint64_t)&type metadata for ListDisclosureGroupStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>);
    type metadata accessor for DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>(255, &lazy cache variable for type metadata for DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityDisclosureGroupStyle and conformance AccessibilityDisclosureGroupStyle, (uint64_t)&type metadata for AccessibilityDisclosureGroupStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityDisclosureGroupStyle and conformance AccessibilityDisclosureGroupStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityDisclosureGroupStyle and conformance AccessibilityDisclosureGroupStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityDisclosureGroupStyle and conformance AccessibilityDisclosureGroupStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityDisclosureGroupStyle, &type metadata for AccessibilityDisclosureGroupStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDisclosureGroupStyle and conformance AccessibilityDisclosureGroupStyle);
  }
  return result;
}

void type metadata accessor for DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for DisclosureGroupStyleModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type LeadingAlignedDisclosureGroupStyle and conformance LeadingAlignedDisclosureGroupStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LeadingAlignedDisclosureGroupStyle and conformance LeadingAlignedDisclosureGroupStyle;
  if (!lazy protocol witness table cache variable for type LeadingAlignedDisclosureGroupStyle and conformance LeadingAlignedDisclosureGroupStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LeadingAlignedDisclosureGroupStyle, &type metadata for LeadingAlignedDisclosureGroupStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeadingAlignedDisclosureGroupStyle and conformance LeadingAlignedDisclosureGroupStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, DisclosureGroupStyleModifier<AccessibilityDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, DisclosureGroupStyleModifier<ListDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content> and conformance DisclosureGroup<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content> and conformance DisclosureGroup<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content> and conformance DisclosureGroup<A, B>;
  if (!lazy protocol witness table cache variable for type DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content> and conformance DisclosureGroup<A, B>)
  {
    v1 = type metadata accessor for DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content> and conformance DisclosureGroup<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    v5[0] = &protocol witness table for DisclosureGroupStyleModifier<A>;
    v5[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v4, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t LimitedAvailabilityCommandContent.init<A>(erasing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for LimitedAvailabilityCommandContentStorage(0, a2, a3, a4);
  v5 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 96) - 8) + 32))(v5 + *(_QWORD *)(*(_QWORD *)v5 + 112), a1);
  return v5;
}

uint64_t type metadata accessor for LimitedAvailabilityCommandContentStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LimitedAvailabilityCommandContentStorage);
}

uint64_t LimitedAvailabilityCommandContentStorage.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 96) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 112), a1);
  return v2;
}

void LimitedAvailabilityCommandContent.body.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static LimitedAvailabilityCommandContent._makeCommands(content:inputs:)@<X0>(uint64_t a1@<X8>)
{
  id v1;
  void *v2;
  uint64_t result;
  uint64_t v5;
  int v6;

  PreferencesInputs.makeIndirectOutputs()();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityCommandContent>, (uint64_t)&type metadata for LimitedAvailabilityCommandContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  v1 = (id)AGSubgraphGetCurrent();
  if (!v1)
    __break(1u);
  v2 = v1;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LimitedAvailabilityCommandContent.IndirectOutputs and conformance LimitedAvailabilityCommandContent.IndirectOutputs();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  result = PreferencesOutputs.setIndirectDependency(_:)();
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v6;
  return result;
}

void LimitedAvailabilityCommandContent.IndirectOutputs.updateValue()()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;

  if (!*(_QWORD *)(v0 + 96))
  {
    v1 = (id)AGSubgraphGetGraph();
    v2 = (void *)AGSubgraphCreate();

    *(_QWORD *)(v0 + 96) = v2;
    v4 = v2;
    AGSubgraphAddChild();
    AGGraphClearUpdate();
    v3 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in LimitedAvailabilityCommandContent.IndirectOutputs.updateValue()(v0);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t closure #1 in LimitedAvailabilityCommandContent.IndirectOutputs.updateValue()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 64);
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 56);
  v22 = *(_DWORD *)(a1 + 24);
  v23 = *(_DWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  swift_beginAccess();
  v6 = *(_DWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v18 = *(_OWORD *)(v2 + 48);
  v19 = *(_OWORD *)(v2 + 32);
  v8 = *(_QWORD *)(v2 + 64);
  v9 = *(_QWORD *)(v2 + 72);
  v10 = *(_BYTE *)(v2 + 80);
  v11 = *(_BYTE *)(v2 + 81);
  v12 = *(_QWORD *)(v2 + 88);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E0CE37B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = v6;
  *(_QWORD *)(v13 + 24) = v7;
  *(_OWORD *)(v13 + 32) = v19;
  *(_OWORD *)(v13 + 48) = v18;
  *(_QWORD *)(v13 + 64) = v8;
  *(_QWORD *)(v13 + 72) = v9;
  *(_BYTE *)(v13 + 80) = v10;
  *(_BYTE *)(v13 + 81) = v11;
  *(_QWORD *)(v13 + 88) = v12;
  swift_retain();
  v14 = *(_QWORD *)(a1 + 80);
  LODWORD(v8) = *(_DWORD *)(a1 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_retain();
  _GraphValue.init(_:)();
  v26 = v20;
  v27 = v22;
  v28 = v13;
  v29 = v4;
  v30 = v5;
  v31 = v21;
  v32 = v3;
  v33 = v23;
  v16 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *))(*(_QWORD *)v15 + 80);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(&v34, &v24, &v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v26 = v14;
  v27 = v8;
  v24 = v34;
  v25 = v35;
  PreferencesOutputs.attachIndirectOutputs(to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void protocol witness for Commands.body.getter in conformance LimitedAvailabilityCommandContent()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void LimitedAvailabilityCommandContentStorageBase.makeCommands(content:inputs:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t LimitedAvailabilityCommandContentStorageBase.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t LimitedAvailabilityCommandContentStorageBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t LimitedAvailabilityCommandContentStorage.makeCommands(content:inputs:)(_DWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  _BYTE v24[4];

  v4 = *v2;
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = *((_DWORD *)a2 + 14);
  v9 = *(_QWORD *)(*v2 + 96);
  LODWORD(v17) = *a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityCommandContent>, (uint64_t)&type metadata for LimitedAvailabilityCommandContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v16 = *(_OWORD *)(a2 + 5);
  v10 = a2[3];
  v11 = a2[4];
  _GraphValue.value.getter();
  v12 = *(_QWORD *)(v4 + 104);
  v14 = type metadata accessor for LimitedAvailabilityCommandContentStorage.Child(0, v9, v12, v13);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LimitedAvailabilityCommandContentStorage<A>.Child, v14);
  _GraphValue.init<A>(_:)();
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v20 = v10;
  v21 = v11;
  v22 = v16;
  v23 = v8;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(v12 + 32))(v24, &v17, v9, v12);
}

uint64_t LimitedAvailabilityCommandContentStorage.Child.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  AGGraphGetValue();
  type metadata accessor for LimitedAvailabilityCommandContentStorage(0, a1, a2, v6);
  v7 = swift_dynamicCastClassUnconditional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a3, v7 + *(_QWORD *)(*(_QWORD *)v7 + 112), a1);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance LimitedAvailabilityCommandContentStorage<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1);
}

uint64_t protocol witness for Rule.value.getter in conformance LimitedAvailabilityCommandContentStorage<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LimitedAvailabilityCommandContentStorage.Child.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t LimitedAvailabilityCommandContentStorage.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 96) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
}

uint64_t LimitedAvailabilityCommandContentStorage.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 96) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type LimitedAvailabilityCommandContent.IndirectOutputs and conformance LimitedAvailabilityCommandContent.IndirectOutputs()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LimitedAvailabilityCommandContent.IndirectOutputs and conformance LimitedAvailabilityCommandContent.IndirectOutputs;
  if (!lazy protocol witness table cache variable for type LimitedAvailabilityCommandContent.IndirectOutputs and conformance LimitedAvailabilityCommandContent.IndirectOutputs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LimitedAvailabilityCommandContent.IndirectOutputs, &unk_1E1B02DB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LimitedAvailabilityCommandContent.IndirectOutputs and conformance LimitedAvailabilityCommandContent.IndirectOutputs);
  }
  return result;
}

ValueMetadata *type metadata accessor for LimitedAvailabilityCommandContent()
{
  return &type metadata for LimitedAvailabilityCommandContent;
}

uint64_t type metadata accessor for LimitedAvailabilityCommandContentStorageBase()
{
  return objc_opt_self();
}

uint64_t method lookup function for LimitedAvailabilityCommandContentStorageBase()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata completion function for LimitedAvailabilityCommandContentStorage()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void destroy for LimitedAvailabilityCommandContent.IndirectOutputs(uint64_t a1)
{

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for LimitedAvailabilityCommandContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(void **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v6 = *(void **)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v6;
  v7 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = v6;
  return a1;
}

uint64_t assignWithCopy for LimitedAvailabilityCommandContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v7 = *(void **)(a1 + 96);
  v8 = *(void **)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v8;
  v9 = v8;

  return a1;
}

uint64_t assignWithTake for LimitedAvailabilityCommandContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);

  return a1;
}

uint64_t getEnumTagSinglePayload for LimitedAvailabilityCommandContent.IndirectOutputs(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LimitedAvailabilityCommandContent.IndirectOutputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for LimitedAvailabilityCommandContent.IndirectOutputs()
{
  return &unk_1E1B02DB8;
}

uint64_t type metadata accessor for LimitedAvailabilityCommandContentStorage.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LimitedAvailabilityCommandContentStorage.Child);
}

void base witness table accessor for _AttributeBody in LimitedAvailabilityCommandContentStorage<A>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

void TouchBar.init(content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void TouchBar.init(id:content:)()
{
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.touchBar<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.touchBar<A>(content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static _TouchBarModifier._makeView(modifier:inputs:body:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _TouchBarModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TouchBarModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

_UNKNOWN **base witness table accessor for ViewModifier in _TouchBarModifier<A>()
{
  return &protocol witness table for _TouchBarModifier<A>;
}

uint64_t type metadata completion function for TouchBar()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TouchBar(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;
  int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0x7FFFFFFE)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 16) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      v16 = v15 - 1;
      if (v16 < 0)
        v16 = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187162B78 + 4 * byte_187C0E140[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for TouchBar(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for TouchBar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TouchBar);
}

uint64_t outlined copy of TouchBarItemPresence(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for TouchBarItemPresence(uint64_t a1)
{
  return outlined consume of TouchBarItemPresence(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of TouchBarItemPresence(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for TouchBarItemPresence(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of TouchBarItemPresence(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for TouchBarItemPresence(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of TouchBarItemPresence(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of TouchBarItemPresence(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for TouchBarItemPresence(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of TouchBarItemPresence(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TouchBarItemPresence(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TouchBarItemPresence(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for TouchBarItemPresence(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

ValueMetadata *type metadata accessor for TouchBarItemPresence()
{
  return &type metadata for TouchBarItemPresence;
}

uint64_t type metadata completion function for _TouchBarModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for TouchBar(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TouchBar(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t destroy for TouchBar(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for TouchBar(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v10(v8, v9, v5);
  return a1;
}

_QWORD *assignWithCopy for TouchBar(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_OWORD *initializeWithTake for TouchBar(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *assignWithTake for TouchBar(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _TouchBarModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;
  int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0x7FFFFFFE)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 16) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      v16 = v15 - 1;
      if (v16 < 0)
        v16 = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1871633BC + 4 * byte_187C0E14E[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for _TouchBarModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for _TouchBarModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TouchBarModifier);
}

uint64_t sub_187163654(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for _TouchBarModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for _TouchBarModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

ValueMetadata *type metadata accessor for TouchBarContainer()
{
  return &type metadata for TouchBarContainer;
}

void VisualEffect.colorEffect(_:isEnabled:)(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  int v4;
  id v5;
  id v6[4];
  int v7;

  v1 = *(void **)(a1 + 8);
  v2 = *(void **)(a1 + 16);
  v3 = *(void **)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 32) | 2;
  v6[0] = *(id *)a1;
  v6[1] = v1;
  v6[2] = v2;
  v6[3] = v3;
  v7 = v4;
  v5 = v6[0];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  VisualEffect.layerEffect(_:maxSampleOffset:isEnabled:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

void VisualEffect.layerEffect(_:maxSampleOffset:isEnabled:)(id *a1)
{
  id v1;
  void *v2;

  v1 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ShaderFilterEffect.init(shader:maxSampleOffset:enabled:)();
  lazy protocol witness table accessor for type _ShaderFilterEffect and conformance _ShaderFilterEffect();
  VisualEffect.concat<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

unint64_t lazy protocol witness table accessor for type _ShaderFilterEffect and conformance _ShaderFilterEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShaderFilterEffect and conformance _ShaderFilterEffect;
  if (!lazy protocol witness table cache variable for type _ShaderFilterEffect and conformance _ShaderFilterEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ShaderFilterEffect, MEMORY[0x1E0CE4CB0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShaderFilterEffect and conformance _ShaderFilterEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShaderFilterEffect and conformance _ShaderFilterEffect;
  if (!lazy protocol witness table cache variable for type _ShaderFilterEffect and conformance _ShaderFilterEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ShaderFilterEffect, MEMORY[0x1E0CE4CB0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShaderFilterEffect and conformance _ShaderFilterEffect);
  }
  return result;
}

void VisualEffect.distortionEffect(_:maxSampleOffset:isEnabled:)(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  int v4;
  id v5;
  id v6[4];
  int v7;

  v1 = *(void **)(a1 + 8);
  v2 = *(void **)(a1 + 16);
  v3 = *(void **)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 32) | 4;
  v6[0] = *(id *)a1;
  v6[1] = v1;
  v6[2] = v2;
  v6[3] = v3;
  v7 = v4;
  v5 = v6[0];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  VisualEffect.layerEffect(_:maxSampleOffset:isEnabled:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t static _ShaderFilterEffect._makeVisualEffect(effect:inputs:body:)()
{
  return static _ShaderFilterEffect._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static VisualEffect._makeVisualEffect(effect:inputs:body:) in conformance _ShaderFilterEffect()
{
  return static _ShaderFilterEffect._makeView(modifier:inputs:body:)();
}

unint64_t instantiation function for generic protocol witness table for _ShaderFilterEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _ShaderFilterEffect and conformance _ShaderFilterEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_187163AAC()
{
  lazy protocol witness table accessor for type _ShaderFilterEffect and conformance _ShaderFilterEffect();
  return swift_getOpaqueTypeConformance2();
}

void static SidebarListStyle._makeView<A>(value:inputs:)()
{
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  specialized _GraphInputs.isSourceNil<A>(_:)(&lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchField>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField, (uint64_t)&type metadata for EnvironmentValues.SearchField, (void (*)(void))lazy protocol witness table accessor for type SourceInput<EnvironmentValues.SearchField> and conformance SourceInput<A>);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type SidebarListStyle.HasSearchField and conformance SidebarListStyle.HasSearchField();
  Attribute.init<A>(body:value:flags:update:)();
  type metadata accessor for _ListValue();
}

void sub_187163CA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  type metadata accessor for SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>>(255);
  v3 = type metadata accessor for SelectionManagerBox(255, v1, v0, v2);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>> and conformance SidebarListStyle.BodyContent<A>, (uint64_t (*)(uint64_t))type metadata accessor for SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>>, (uint64_t)&protocol conformance descriptor for SidebarListStyle.BodyContent<A>);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v3);
  type metadata accessor for SidebarListBody();
}

uint64_t sub_187163D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = type metadata accessor for SidebarListStyle.Body(0, v5, v4, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarListStyle.Body<A>, v7);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarListBody<A, B>, a1);
  return static View._makeView(view:inputs:)();
}

void static SidebarListStyle._makeViewList<A>(value:inputs:)()
{
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  specialized _GraphInputs.isSourceNil<A>(_:)(&lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchField>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField, (uint64_t)&type metadata for EnvironmentValues.SearchField, (void (*)(void))lazy protocol witness table accessor for type SourceInput<EnvironmentValues.SearchField> and conformance SourceInput<A>);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type SidebarListStyle.HasSearchField and conformance SidebarListStyle.HasSearchField();
  Attribute.init<A>(body:value:flags:update:)();
  type metadata accessor for _ListValue();
}

void sub_187163FBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  type metadata accessor for SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>>(255);
  v3 = type metadata accessor for SelectionManagerBox(255, v1, v0, v2);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>> and conformance SidebarListStyle.BodyContent<A>, (uint64_t (*)(uint64_t))type metadata accessor for SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>>, (uint64_t)&protocol conformance descriptor for SidebarListStyle.BodyContent<A>);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v3);
  type metadata accessor for SidebarListBody();
}

uint64_t sub_18716403C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = type metadata accessor for SidebarListStyle.Body(0, v5, v4, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarListStyle.Body<A>, v7);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarListBody<A, B>, a1);
  return static View._makeViewList(view:inputs:)();
}

uint64_t key path getter for EnvironmentValues.searchFieldPlacement : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.searchFieldPlacement.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187164170@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.searchFieldPlacement.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.searchFieldPlacement : EnvironmentValues(unsigned __int8 *a1)
{
  return EnvironmentValues.searchFieldPlacement.setter(*a1);
}

uint64_t sub_1871641CC(unsigned __int8 *a1)
{
  return EnvironmentValues.searchFieldPlacement.setter(*a1);
}

uint64_t specialized _GraphInputs.isSourceNil<A>(_:)()
{
  return specialized _GraphInputs.isSourceNil<A>(_:)(&lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Scopes>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes, (uint64_t)&type metadata for SearchFieldConfiguration.Scopes, (void (*)(void))lazy protocol witness table accessor for type SourceInput<SearchFieldConfiguration.Scopes> and conformance SourceInput<A>);
}

uint64_t specialized _GraphInputs.isSourceNil<A>(_:)(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, void (*a4)(void))
{
  uint64_t v5;
  char v6;
  uint64_t v8;

  type metadata accessor for VStack<TableHeaderViewCore>(0, a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SourceInput);
  a4();
  PropertyList.subscript.getter();
  if (!v8)
    return *MEMORY[0x1E0CFED28];
  v5 = *(unsigned int *)(v8 + 40);
  v6 = *(_BYTE *)(v8 + 44);
  swift_release();
  if ((v6 & 1) != 0)
  {
    type metadata accessor for External<Bool>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type External<Bool> and conformance External<A>, (uint64_t (*)(uint64_t))type metadata accessor for External<Bool>, MEMORY[0x1E0CFED00]);
    return Attribute.init<A>(body:value:flags:update:)();
  }
  return v5;
}

void SidebarListStyle.Body.base.getter()
{
  type metadata accessor for _ListValue();
}

uint64_t sub_1871643B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void SidebarListStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for SelectionManagerBox(255, a2, a3, a4);
  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for _ListValue();
}

void sub_187164498(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  SidebarListStyle.Body.base.getter();
}

void sub_1871644D4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v6, v8, v7);
  AGGraphGetValue();
  *(_QWORD *)(v10 - 144) = v5;
  *(_QWORD *)(v10 - 136) = v3;
  *(_DWORD *)(v10 - 128) = v2;
  *(_DWORD *)(v10 - 124) = v4;
  type metadata accessor for SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>> and conformance SidebarListStyle.BodyContent<A>, (uint64_t (*)(uint64_t))type metadata accessor for SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>>, (uint64_t)&protocol conformance descriptor for SidebarListStyle.BodyContent<A>);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v1);
  SidebarListBody.init(selection:options:content:)(v6, v0);
}

void closure #1 in SidebarListStyle.Body.value.getter()
{
  swift_getKeyPath();
  closure #1 in closure #1 in SidebarListStyle.Body.value.getter();
}

void sub_1871645F0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;

  *(_BYTE *)v0 = v1;
  *(_QWORD *)(v0 + 8) = v2;
  *(_BYTE *)(v0 + 16) = v3;
}

void closure #1 in closure #1 in SidebarListStyle.Body.value.getter()
{
  type metadata accessor for _ListValue();
}

void sub_187164664(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  SidebarListStyle.Body.base.getter();
}

uint64_t sub_1871646A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t SidebarListStyle.BodyContent.placement.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_BYTE *)(v0 + 16);
  outlined copy of Environment<Bool>.Content(v1, v2);
  v3 = specialized Environment.wrappedValue.getter(v1, v2);
  outlined consume of Environment<Bool>.Content(v1, v2);
  return v3;
}

void protocol witness for static Rule.initialValue.getter in conformance SidebarListStyle.Body<A>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>>(255);
  v3 = type metadata accessor for SelectionManagerBox(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v2);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>> and conformance SidebarListStyle.BodyContent<A>, (uint64_t (*)(uint64_t))type metadata accessor for SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>>, (uint64_t)&protocol conformance descriptor for SidebarListStyle.BodyContent<A>);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v3);
  type metadata accessor for SidebarListBody();
}

uint64_t sub_1871647A0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

void protocol witness for Rule.value.getter in conformance SidebarListStyle.Body<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  SidebarListStyle.Body.value.getter(*v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
}

uint64_t SidebarListStyle.BodyContent.body.getter(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  _QWORD v17[2];
  _QWORD v18[2];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23[2];

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v17 - v10;
  if (*v2 == 1)
    SidebarListStyle.BodyContent.placement.getter();
  v12 = &v2[*(int *)(a1 + 40)];
  v13 = *(_QWORD *)(a1 + 24);
  static ViewBuilder.buildExpression<A>(_:)(v12, v4, v13);
  v19 = 2;
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  v23[0] = (uint64_t)&v19;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v11, v4);
  v23[1] = (uint64_t)v7;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>?();
  v18[0] = v14;
  v18[1] = v4;
  v17[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>? and conformance <A> A?();
  v17[1] = v13;
  static ViewBuilder.buildBlock<each A>(_:)(v23, 2uLL, (uint64_t)v18);
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v11, v4);
  return ((uint64_t (*)(char *, uint64_t))v15)(v7, v4);
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance SidebarListStyleContext(uint64_t a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4)
{
  lazy protocol witness table accessor for type SidebarListStyleContext and conformance SidebarListStyleContext();
  return specialized static ListStyleContext.accepts<A>(_:at:)(a4, a3);
}

unsigned __int8 *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance OutlineRootConfiguration.Key(unsigned __int8 *result, _QWORD *(*a2)(uint64_t *__return_ptr))
{
  _BYTE *v2;
  int v3;
  unsigned __int8 v4;
  uint64_t v5;

  v2 = result;
  v3 = *result;
  if (v3 == 1)
  {
    v4 = result[1];
  }
  else
  {
    result = (unsigned __int8 *)a2(&v5);
    LOBYTE(v3) = v5;
    v4 = BYTE1(v5);
  }
  *v2 = v3;
  v2[1] = v4;
  return result;
}

uint64_t View.outlineRoot(_:isExpanded:)(char a1, char a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 16) = a1;
  *(_BYTE *)(v4 + 17) = a2;
  View.transformPreference<A>(_:_:)();
  return swift_release();
}

_BYTE *closure #1 in View.outlineRoot(_:isExpanded:)(_BYTE *result, char a2, char a3)
{
  char v3;

  if (a3 == 2)
    v3 = result[1];
  else
    v3 = a3;
  *result = a2;
  result[1] = v3 & 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type SidebarListStyle.HasSearchField and conformance SidebarListStyle.HasSearchField()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SidebarListStyle.HasSearchField and conformance SidebarListStyle.HasSearchField;
  if (!lazy protocol witness table cache variable for type SidebarListStyle.HasSearchField and conformance SidebarListStyle.HasSearchField)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarListStyle.HasSearchField, &unk_1E1AC10D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarListStyle.HasSearchField and conformance SidebarListStyle.HasSearchField);
  }
  return result;
}

void type metadata accessor for SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>>)
  {
    type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>, (uint64_t (*)(void))lazy protocol witness table accessor for type StyleContextWriter<SidebarListStyleContext> and conformance StyleContextWriter<A>, (uint64_t)&protocol witness table for ListStyleContent);
    v6 = type metadata accessor for SidebarListStyle.BodyContent(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for SidebarListStyle.BodyContent<ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>>);
  }
}

void type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for StyleContextWriter<SidebarListStyleContext>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarListStyleContext and conformance SidebarListStyleContext, (uint64_t)&type metadata for SidebarListStyleContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>>);
  }
}

unint64_t lazy protocol witness table accessor for type SidebarListStyleContext and conformance SidebarListStyleContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SidebarListStyleContext and conformance SidebarListStyleContext;
  if (!lazy protocol witness table cache variable for type SidebarListStyleContext and conformance SidebarListStyleContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarListStyleContext, &type metadata for SidebarListStyleContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarListStyleContext and conformance SidebarListStyleContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SidebarListStyleContext and conformance SidebarListStyleContext;
  if (!lazy protocol witness table cache variable for type SidebarListStyleContext and conformance SidebarListStyleContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarListStyleContext, &type metadata for SidebarListStyleContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarListStyleContext and conformance SidebarListStyleContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<SidebarListStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<SidebarListStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<SidebarListStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for StyleContextWriter<SidebarListStyleContext>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarListStyleContext and conformance SidebarListStyleContext, (uint64_t)&type metadata for SidebarListStyleContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<SidebarListStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t type metadata accessor for SidebarListStyle.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SidebarListStyle.BodyContent);
}

uint64_t type metadata accessor for SidebarListStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SidebarListStyle.Body);
}

uint64_t type metadata completion function for SidebarListStyle.BodyContent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SidebarListStyle.BodyContent(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 17) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *(_QWORD *)a2;
    *v3 = *(_QWORD *)a2;
    v3 = (_QWORD *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v10 = a1 & 0xFFFFFFFFFFFFFFF8;
    v11 = a2 & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    v13 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    outlined copy of Environment<Bool>.Content(v12, v13);
    *(_QWORD *)(v10 + 8) = v12;
    *(_BYTE *)(v10 + 16) = v13;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))((v10 + v6 + 17) & ~v6, (v11 + v6 + 17) & ~v6, v4);
  }
  return v3;
}

uint64_t destroy for SidebarListStyle.BodyContent(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v3 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

unint64_t initializeWithCopy for SidebarListStyle.BodyContent(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v8 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  outlined copy of Environment<Bool>.Content(v7, v8);
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v8;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 16))((*(unsigned __int8 *)(v9 + 80) + 17 + v5) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 17 + v6) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

unint64_t assignWithCopy for SidebarListStyle.BodyContent(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v8 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  outlined copy of Environment<Bool>.Content(v7, v8);
  v9 = *(_QWORD *)(v5 + 8);
  v10 = *(_BYTE *)(v5 + 16);
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 24))((*(unsigned __int8 *)(v11 + 80) + 17 + v5) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(unsigned __int8 *)(v11 + 80) + 17 + v6) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

unint64_t initializeWithTake for SidebarListStyle.BodyContent(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_BYTE *)(v4 + 16) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_QWORD *)(v4 + 8) = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))((*(unsigned __int8 *)(v6 + 80) + 17 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 17 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

unint64_t assignWithTake for SidebarListStyle.BodyContent(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v8 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8);
  v10 = *(_BYTE *)(v5 + 16);
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 40))((*(unsigned __int8 *)(v11 + 80) + 17 + v5) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(unsigned __int8 *)(v11 + 80) + 17 + v6) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarListStyle.BodyContent(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 17) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFE)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((a1 & 0xFFFFFFFFFFFFFFF8) + v7 + 17) & ~v7);
      v15 = *(unsigned __int8 *)a1;
      v16 = v15 >= 2;
      v17 = (v15 + 2147483646) & 0x7FFFFFFF;
      if (v16)
        return (v17 + 1);
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1871650F4 + 4 * byte_187C0E2C0[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for SidebarListStyle.BodyContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void *type metadata accessor for SidebarListStyle.HasSearchField()
{
  return &unk_1E1AC10D0;
}

unint64_t instantiation function for generic protocol witness table for SidebarListStyleContext(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SidebarListStyleContext and conformance SidebarListStyleContext();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in SidebarListStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for View.Body : View in SidebarListStyle.BodyContent<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>?);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for StyleContextWriter<SidebarListStyleContext>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarListStyleContext and conformance SidebarListStyleContext, (uint64_t)&type metadata for SidebarListStyleContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>)
  {
    type metadata accessor for ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ListRowInsetsTraitKey>, (uint64_t)&type metadata for ListRowInsetsTraitKey, (uint64_t)&protocol witness table for ListRowInsetsTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>);
  }
}

void type metadata accessor for ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>, (uint64_t)&type metadata for IsSearchImplementedPreferenceKey, (uint64_t)&protocol witness table for IsSearchImplementedPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t IsSearchImplementedPreference;

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>? and conformance <A> A?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>?();
    v2 = v1;
    IsSearchImplementedPreference = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &IsSearchImplementedPreference);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StyleContextWriter<SidebarListStyleContext> and conformance StyleContextWriter<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PreferenceWritingModifier<IsSearchImplementedPreferenceKey> and conformance _PreferenceWritingModifier<A>, (uint64_t)&protocol witness table for EnvironmentValues.SearchField);
    v3[1] = lazy protocol witness table accessor for type _TraitWritingModifier<ListRowInsetsTraitKey> and conformance _TraitWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<SidebarListStyleContext>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a4;
    v9[1] = a3();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<IsSearchImplementedPreferenceKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<IsSearchImplementedPreferenceKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<IsSearchImplementedPreferenceKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>, (uint64_t)&type metadata for IsSearchImplementedPreferenceKey, (uint64_t)&protocol witness table for IsSearchImplementedPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE60F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<IsSearchImplementedPreferenceKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

void partial apply for closure #1 in SidebarListStyle.Body.value.getter()
{
  closure #1 in SidebarListStyle.Body.value.getter();
}

unint64_t lazy protocol witness table accessor for type SourceInput<SearchFieldConfiguration.Scopes> and conformance SourceInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Scopes> and conformance SourceInput<A>;
  if (!lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Scopes> and conformance SourceInput<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Scopes>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes, (uint64_t)&type metadata for SearchFieldConfiguration.Scopes, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SourceInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SourceInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Scopes> and conformance SourceInput<A>);
  }
  return result;
}

void type metadata accessor for External<Bool>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for External<Bool>)
  {
    v0 = type metadata accessor for External();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentValues.SearchField, &type metadata for EnvironmentValues.SearchField);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentValues.SearchField, &type metadata for EnvironmentValues.SearchField);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SourceInput<EnvironmentValues.SearchField> and conformance SourceInput<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchField> and conformance SourceInput<A>;
  if (!lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchField> and conformance SourceInput<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchField>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField, (uint64_t)&type metadata for EnvironmentValues.SearchField, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SourceInput);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SourceInput<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchField> and conformance SourceInput<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for OutlineRootConfiguration.Key()
{
  return &type metadata for OutlineRootConfiguration.Key;
}

void sub_1871659A0()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchField, _PreferenceWritingModifier<IsSearchImplementedPreferenceKey>>, _TraitWritingModifier<ListRowInsetsTraitKey>>, StyleContextWriter<SidebarListStyleContext>>?();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_1871659F4()
{
  return swift_deallocObject();
}

_BYTE *partial apply for closure #1 in View.outlineRoot(_:isExpanded:)(_BYTE *result)
{
  uint64_t v1;
  int v2;

  v2 = *(unsigned __int8 *)(v1 + 17);
  if (v2 == 2)
    LOBYTE(v2) = result[1];
  *result = *(_BYTE *)(v1 + 16);
  result[1] = v2 & 1;
  return result;
}

uint64_t getEnumTagSinglePayload for OutlineRootConfiguration(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for OutlineRootConfiguration(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187165B18 + 4 * byte_187C0E2D3[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_187165B4C + 4 * byte_187C0E2CE[v4]))();
}

uint64_t sub_187165B4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_187165B54(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x187165B5CLL);
  return result;
}

uint64_t sub_187165B68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x187165B70);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187165B74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_187165B7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToolbarSearchFieldStyle()
{
  return &type metadata for ToolbarSearchFieldStyle;
}

uint64_t associated type witness table accessor for SearchFieldStyle.Body : View in ToolbarSearchFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ToolbarSearchFieldStyle.Implementation.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *HasCustomAccessory;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105[11];
  _BYTE v106[88];
  _OWORD v107[5];
  uint64_t v108;

  v102 = a1;
  type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>(0);
  v96 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v100 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v5, v6);
  v84 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v89 = (char *)&v83 - v10;
  type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(0);
  v93 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v94 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  v14 = *(_QWORD *)(v104 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v104, v16);
  v88 = (uint64_t)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v87 = (uint64_t)&v83 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v86 = (uint64_t)&v83 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v83 - v25;
  v103 = (uint64_t)&v83 - v25;
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (uint64_t)&v83 - v29;
  HasCustomAccessory = (char *)type metadata accessor for StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryVie();
  MEMORY[0x1E0C80A78](HasCustomAccessory, v31);
  v33 = (BOOL *)&v83 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC(0);
  v90 = v34;
  MEMORY[0x1E0C80A78](v34, v35);
  v95 = (uint64_t)&v83 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.Se, v37, (void (*)(uint64_t))type metadata accessor for LazyPlatformItemWriter<LazySearchSuggestionsKey, SearchFieldConfiguration.Suggestions?>);
  v92 = v38;
  MEMORY[0x1E0C80A78](v38, v39);
  v99 = (uint64_t)&v83 - v40;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.S();
  v97 = v41;
  MEMORY[0x1E0C80A78](v41, v42);
  v98 = (uint64_t)&v83 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, v30, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v30, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  v44 = *(unsigned __int8 *)(v14 + 80);
  v45 = (v44 + 16) & ~v44;
  v85 = v45 + v15;
  v46 = swift_allocObject();
  outlined init with take of TableCellFormula(v30, v46 + v45, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  LOBYTE(v30) = *(_BYTE *)(v1 + *(int *)(v104 + 28));
  v101 = v1;
  v47 = v1;
  v48 = v86;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v47, v86, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  v49 = swift_allocObject();
  *(_QWORD *)(v49 + 16) = partial apply for closure #1 in ToolbarSearchFieldStyle.Implementation.body.getter;
  *(_QWORD *)(v49 + 24) = v46;
  outlined init with take of TableCellFormula(v48, v49 + ((v44 + 32) & ~v44), (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  *v33 = (v30 & 1) == 0;
  *((_QWORD *)v33 + 1) = partial apply for specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customScopeBarReader<A>(_:);
  *((_QWORD *)v33 + 2) = v49;
  v50 = *((int *)HasCustomAccessory + 13);
  HasCustomAccessory = (char *)v33;
  v51 = (uint64_t)&v33[v50];
  memset(v107, 0, sizeof(v107));
  v108 = 0;
  v52 = v103;
  v53 = v87;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v103, v87, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  v54 = v88;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v53, v88, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  v55 = (v85 + 7) & 0xFFFFFFFFFFFFFFF8;
  v56 = swift_allocObject();
  outlined init with take of TableCellFormula(v53, v56 + v45, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  outlined init with take of BoundInputsView?((uint64_t)v107, v56 + v55);
  v57 = (uint64_t)v89;
  specialized closure #1 in ToolbarSearchFieldStyle.Implementation.customAccessoryReader<A>(_:)(v52, (uint64_t)partial apply for closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.body.getter, v56, v51);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v59 = v58;
  MEMORY[0x18D75B9C8]();
  LODWORD(v53) = *(unsigned __int8 *)(v57 + 1);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v57, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  if ((_DWORD)v53 == 1)
  {
    v60 = v84;
    MEMORY[0x18D75B9C8](v59);
    v61 = *v60 & 1;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v60, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  }
  else
  {
    v61 = 2;
  }
  v62 = v51
      + *(int *)(type metadata accessor for StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>()
               + 52);
  v63 = v96;
  v64 = (uint64_t)v100;
  v65 = &v100[*(int *)(v96 + 48)];
  *(_QWORD *)v65 = 0;
  *((_QWORD *)v65 + 1) = 0;
  *((_QWORD *)v65 + 2) = 0;
  *(_QWORD *)v64 = 0;
  *(_QWORD *)(v64 + 8) = 0;
  v66 = v64 + *(int *)(v63 + 44);
  outlined init with take of BoundInputsView?((uint64_t)v107, (uint64_t)v106);
  outlined init with take of BoundInputsView?((uint64_t)v107, (uint64_t)v105);
  ToolbarSearchFieldStyle.Implementation.searchToolbarContent(customScopeBar:customAccessory:)((uint64_t)v106, v105, v66);
  v67 = v94;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v64, (uint64_t)&v94[*(int *)(v93 + 36)], (uint64_t (*)(_QWORD))type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>);
  *v67 = v61;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v64, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>);
  outlined init with take of TableCellFormula((uint64_t)v67, v62, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>);
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v54, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v103, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  v68 = type metadata accessor for SearchFieldConfiguration(0);
  v69 = v101;
  LOBYTE(v64) = *(_BYTE *)(v101 + *(int *)(v68 + 28));
  v70 = (uint64_t)HasCustomAccessory;
  v71 = v95;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)HasCustomAccessory, v95, (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryVie);
  v72 = v71 + *(int *)(v90 + 36);
  *(_BYTE *)v72 = v64 ^ 1;
  *(_QWORD *)(v72 + 8) = &type metadata for LazySearchScopesKey;
  *(_BYTE *)(v72 + 16) = v64;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v70, (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryVie);
  MEMORY[0x18D75B9C8](v59);
  LOBYTE(v62) = *(_BYTE *)(v57 + 1);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v57, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  MEMORY[0x18D75B9C8](v59);
  v73 = *(_BYTE *)(v57 + 1);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v57, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  v74 = v99;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v71, v99, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC);
  v75 = v74 + *(int *)(v92 + 36);
  *(_BYTE *)v75 = (v62 & 1) == 0;
  *(_QWORD *)(v75 + 8) = &type metadata for LazySearchSuggestionsKey;
  *(_BYTE *)(v75 + 16) = v73;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v71, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC);
  v76 = v69 + *(int *)(v104 + 24);
  v77 = *(_QWORD *)v76;
  LOBYTE(v64) = *(_BYTE *)(v76 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v76, v64);
  v78 = specialized Environment.wrappedValue.getter(v77, v64);
  outlined consume of Environment<Bool>.Content(v77, v64);
  v79 = swift_allocObject();
  *(_BYTE *)(v79 + 16) = v78 == 4;
  *(_BYTE *)(v79 + 17) = 1;
  v80 = v98;
  outlined init with copy of ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAcces(v74, v98);
  v81 = (_QWORD *)(v80 + *(int *)(v97 + 36));
  *v81 = partial apply for closure #1 in View.transformToolbarRole(_:isEnabled:);
  v81[1] = v79;
  outlined destroy of ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, (v74);
  return outlined init with take of TableCellFormula(v80, v102, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.S);
}

_QWORD *closure #1 in ToolbarSearchFieldStyle.Implementation.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50[11];
  _BYTE v51[88];
  _QWORD v52[12];

  v46 = a3;
  type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>(0);
  v49 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (uint64_t *)((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v9, v10);
  v45 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v44 - v14;
  type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(0);
  v48 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v47 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  MEMORY[0x1E0C80A78](v19, v22);
  v23 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v44 - v26;
  outlined init with take of BoundInputsView?(a1, (uint64_t)v52);
  v28 = a2;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v27, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  v29 = (*(unsigned __int8 *)(v20 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v30 = (v21 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = swift_allocObject();
  v32 = v31 + v29;
  v33 = v46;
  outlined init with take of TableCellFormula((uint64_t)v27, v32, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  outlined init with take of BoundInputsView?((uint64_t)v52, v31 + v30);
  outlined retain of BoundInputsView?(v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of BoundInputsView?);
  outlined retain of BoundInputsView?(v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of BoundInputsView?);
  specialized closure #1 in ToolbarSearchFieldStyle.Implementation.customAccessoryReader<A>(_:)(v28, (uint64_t)partial apply for closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.body.getter, v31, v33);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v35 = v34;
  MEMORY[0x18D75B9C8]();
  LODWORD(v30) = v15[1];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  if ((_DWORD)v30 == 1)
  {
    v36 = v45;
    MEMORY[0x18D75B9C8](v35);
    v37 = *v36 & 1;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  }
  else
  {
    v37 = 2;
  }
  v38 = v33
      + *(int *)(type metadata accessor for StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>()
               + 52);
  v39 = v49;
  v40 = (_QWORD *)((char *)v8 + *(int *)(v49 + 48));
  *v40 = 0;
  v40[1] = 0;
  v40[2] = 0;
  *v8 = 0;
  v8[1] = 0;
  v41 = (uint64_t)v8 + *(int *)(v39 + 44);
  outlined init with take of BoundInputsView?((uint64_t)v52, (uint64_t)v51);
  memset(v50, 0, sizeof(v50));
  ToolbarSearchFieldStyle.Implementation.searchToolbarContent(customScopeBar:customAccessory:)((uint64_t)v51, v50, v41);
  v42 = v47;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v8, (uint64_t)&v47[*(int *)(v48 + 36)], (uint64_t (*)(_QWORD))type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>);
  *v42 = v37;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>);
  outlined init with take of TableCellFormula((uint64_t)v42, v38, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>);
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  return outlined retain of BoundInputsView?(v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of BoundInputsView?);
}

uint64_t closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  char *v38;
  void *v39[11];
  _BYTE v40[80];

  v37 = a2;
  v38 = a3;
  type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>(0);
  v5 = v4;
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (void **)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v28 - v15;
  v18 = *(void **)a1;
  v17 = *(void **)(a1 + 8);
  v36 = *(void **)(a1 + 16);
  v35 = *(void **)(a1 + 24);
  v34 = *(void **)(a1 + 32);
  v33 = *(void **)(a1 + 40);
  v32 = *(void **)(a1 + 48);
  v31 = *(void **)(a1 + 56);
  v30 = *(void **)(a1 + 64);
  v29 = *(void **)(a1 + 72);
  v28 = *(void **)(a1 + 80);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v20 = v19;
  MEMORY[0x18D75B9C8]();
  v21 = v16[1];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  if (v21 == 1)
  {
    MEMORY[0x18D75B9C8](v20);
    v22 = *v12 & 1;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  }
  else
  {
    v22 = 2;
  }
  v23 = (_QWORD *)((char *)v8 + *(int *)(v5 + 48));
  *v23 = 0;
  v23[1] = 0;
  v23[2] = 0;
  *v8 = 0;
  v8[1] = 0;
  v24 = (uint64_t)v8 + *(int *)(v5 + 44);
  outlined init with take of BoundInputsView?(v37, (uint64_t)v40);
  v39[0] = v18;
  v39[1] = v17;
  v39[2] = v36;
  v39[3] = v35;
  v39[4] = v34;
  v39[5] = v33;
  v39[6] = v32;
  v39[7] = v31;
  v39[8] = v30;
  v39[9] = v29;
  v39[10] = v28;
  ToolbarSearchFieldStyle.Implementation.searchToolbarContent(customScopeBar:customAccessory:)((uint64_t)v40, v39, v24);
  type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(0);
  v26 = v38;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v8, (uint64_t)&v38[*(int *)(v25 + 36)], (uint64_t (*)(_QWORD))type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>);
  *v26 = v22;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>);
}

uint64_t ToolbarSearchFieldStyle.Implementation.searchToolbarContent(customScopeBar:customAccessory:)@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  _WORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _WORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  void *v114;
  void *v115;
  void *v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  char v145[8];

  v122 = a3;
  v119 = type metadata accessor for SearchToolbarItem();
  MEMORY[0x1E0C80A78](v119, v6);
  v120 = (uint64_t)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v121 = (uint64_t)&v100 - v10;
  type metadata accessor for Button<Text>?();
  MEMORY[0x1E0C80A78](v11, v12);
  v105 = (_WORD *)((char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ToolbarItemGroup<Button<Text>?>(0);
  v102 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v104 = (uint64_t)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v103 = (uint64_t)&v100 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v134 = (uint64_t)&v100 - v22;
  v23 = type metadata accessor for SearchFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v23, v24);
  v132 = (uint64_t)&v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v100 - v28;
  v101 = type metadata accessor for UIKitSearchBarAdaptor(0);
  MEMORY[0x1E0C80A78](v101, v30);
  v32 = (char *)&v100 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)&v100 - v35;
  MEMORY[0x1E0C80A78](v37, v38);
  v40 = (char *)&v100 - v39;
  MEMORY[0x1E0C80A78](v41, v42);
  v100 = (uint64_t)&v100 - v43;
  type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>(0);
  v45 = v44;
  MEMORY[0x1E0C80A78](v44, v46);
  v48 = (char *)&v100 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v49, v50);
  v52 = (char *)&v100 - v51;
  MEMORY[0x1E0C80A78](v53, v54);
  v133 = (uint64_t)&v100 - v55;
  v113 = *(id *)a1;
  v112 = *(_QWORD *)(a1 + 8);
  v111 = *(_QWORD *)(a1 + 16);
  v110 = *(_QWORD *)(a1 + 24);
  v109 = *(void **)(a1 + 32);
  v108 = *(_QWORD *)(a1 + 40);
  v107 = *(_QWORD *)(a1 + 48);
  v106 = *(_QWORD *)(a1 + 56);
  v125 = *(_QWORD *)(a1 + 64);
  v124 = *(_QWORD *)(a1 + 72);
  v123 = *(_QWORD *)(a1 + 80);
  v56 = *a2;
  v117 = (uint64_t)a2[1];
  v131 = a2[2];
  v130 = a2[3];
  v129 = a2[4];
  v128 = a2[5];
  v127 = a2[6];
  v126 = a2[7];
  v116 = a2[8];
  v57 = a2[9];
  v58 = a2[10];
  v115 = v57;
  ToolbarSearchFieldStyle.Implementation.searchBarItemPlacement.getter((uint64_t)v145);
  ToolbarSearchFieldStyle.Implementation.searchBarItemPlacement.getter((uint64_t)&v139);
  outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v139, (uint64_t)&v135);
  v118 = v56;
  v114 = v58;
  if (v138 != 2
    || (unint64_t)v137 | *((_QWORD *)&v137 + 1) | v135 | *((_QWORD *)&v136 + 1) | (unint64_t)v136
    && (v135 != 1 || (unint64_t)v137 | *((_QWORD *)&v137 + 1) | *((_QWORD *)&v136 + 1) | (unint64_t)v136))
  {
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v135);
    v59 = 0;
  }
  else
  {
    v59 = 1;
  }
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v139);
  outlined init with copy of ToolbarItemPlacement((uint64_t)v145, (uint64_t)v48);
  v48[*(int *)(v45 + 40)] = v59;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v29, type metadata accessor for SearchFieldConfiguration);
  ToolbarSearchFieldStyle.Implementation.searchBarItemPlacement.getter((uint64_t)&v139);
  v135 = 23;
  v136 = 0u;
  v137 = 0u;
  v138 = 2;
  v60 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)&v139, (uint64_t)&v135);
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v139);
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v135);
  outlined init with take of TableCellFormula((uint64_t)v29, (uint64_t)v32, type metadata accessor for SearchFieldConfiguration);
  v32[*(int *)(v101 + 20)] = (v60 & 1) == 0;
  outlined init with take of TableCellFormula((uint64_t)v32, (uint64_t)v36, type metadata accessor for UIKitSearchBarAdaptor);
  outlined init with take of TableCellFormula((uint64_t)v36, (uint64_t)v40, type metadata accessor for UIKitSearchBarAdaptor);
  v61 = v100;
  outlined init with take of TableCellFormula((uint64_t)v40, v100, type metadata accessor for UIKitSearchBarAdaptor);
  outlined destroy of ToolbarItemPlacement((uint64_t)v145);
  outlined init with take of TableCellFormula(v61, (uint64_t)&v48[*(int *)(v45 + 36)], type metadata accessor for UIKitSearchBarAdaptor);
  outlined init with take of TableCellFormula((uint64_t)v48, (uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>);
  outlined init with take of TableCellFormula((uint64_t)v52, v133, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>);
  if (one-time initialization token for search != -1)
    swift_once();
  outlined init with copy of ToolbarItemPlacement((uint64_t)&static ToolbarItemPlacement.search, (uint64_t)v145);
  ToolbarSearchFieldStyle.Implementation.searchBarItemPlacement.getter((uint64_t)&v139);
  outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v139, (uint64_t)&v135);
  v62 = v134;
  v63 = v132;
  if (v138 != 2
    || (unint64_t)v137 | *((_QWORD *)&v137 + 1) | v135 | *((_QWORD *)&v136 + 1) | (unint64_t)v136
    && (v135 != 1 || (unint64_t)v137 | *((_QWORD *)&v137 + 1) | *((_QWORD *)&v136 + 1) | (unint64_t)v136))
  {
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v135);
    v64 = 0;
  }
  else
  {
    v64 = 1;
  }
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v139);
  v65 = v104;
  outlined init with copy of ToolbarItemPlacement((uint64_t)v145, v104);
  v66 = v102;
  *(_BYTE *)(v65 + *(int *)(v102 + 40)) = v64;
  v67 = v105;
  ToolbarSearchFieldStyle.Implementation.cancelButton.getter(v105);
  outlined destroy of ToolbarItemPlacement((uint64_t)v145);
  outlined init with take of TableCellFormula((uint64_t)v67, v65 + *(int *)(v66 + 36), (uint64_t (*)(_QWORD))type metadata accessor for Button<Text>?);
  v68 = v65;
  v69 = v103;
  outlined init with take of TableCellFormula(v68, v103, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarItemGroup<Button<Text>?>);
  outlined init with take of TableCellFormula(v69, v62, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarItemGroup<Button<Text>?>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, v63, type metadata accessor for SearchFieldConfiguration);
  ToolbarSearchFieldStyle.Implementation.searchBarItemPlacement.getter((uint64_t)v145);
  outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v145, (uint64_t)&v139);
  if (v144 != 2 || v142 | v143 | v139 | v141 | v140 && (v139 != 1 || v142 | v143 | v141 | v140))
  {
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v139);
    LODWORD(v104) = 1;
  }
  else
  {
    LODWORD(v104) = 0;
  }
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)v145);
  v70 = v3 + *(int *)(type metadata accessor for ToolbarSearchFieldStyle.Implementation() + 32);
  v71 = *(_QWORD *)v70;
  v72 = *(_BYTE *)(v70 + 8);
  v73 = v113;
  v74 = v112;
  v75 = v111;
  v76 = v110;
  v77 = v109;
  v78 = v108;
  v79 = v107;
  v80 = v106;
  outlined copy of BoundInputsView?(v113, v112, v111, v110, v109);
  outlined copy of Environment<Bool>.Content(v71, v72);
  LODWORD(v105) = specialized Environment.wrappedValue.getter(v71, v72);
  outlined consume of Environment<Bool>.Content(v71, v72);
  v81 = v120;
  outlined init with take of TableCellFormula(v132, v120, type metadata accessor for SearchFieldConfiguration);
  v82 = (int *)v119;
  *(_BYTE *)(v81 + *(int *)(v119 + 20)) = v104;
  v83 = v81 + v82[6];
  *(_QWORD *)(v83 + 80) = 0;
  *(_OWORD *)(v83 + 48) = 0u;
  *(_OWORD *)(v83 + 64) = 0u;
  *(_OWORD *)(v83 + 16) = 0u;
  *(_OWORD *)(v83 + 32) = 0u;
  *(_OWORD *)v83 = 0u;
  v84 = (_QWORD *)(v81 + v82[7]);
  *v84 = v73;
  v84[1] = v74;
  v84[2] = v75;
  v84[3] = v76;
  v84[4] = v77;
  v84[5] = v78;
  v84[6] = v79;
  v84[7] = v80;
  v85 = v124;
  v84[8] = v125;
  v84[9] = v85;
  v84[10] = v123;
  *(_BYTE *)(v81 + v82[8]) = (_BYTE)v105;
  v86 = (_QWORD *)(v81 + v82[9]);
  v87 = v118;
  v88 = v117;
  *v86 = v118;
  v86[1] = v88;
  v89 = (uint64_t)v130;
  v86[2] = v131;
  v86[3] = v89;
  v90 = v128;
  v86[4] = v129;
  v86[5] = v90;
  v91 = v126;
  v86[6] = v127;
  v86[7] = v91;
  v92 = v115;
  v86[8] = v116;
  v86[9] = v92;
  v86[10] = v114;
  v93 = v121;
  outlined init with take of TableCellFormula(v81, v121, (uint64_t (*)(_QWORD))type metadata accessor for SearchToolbarItem);
  type metadata accessor for (ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)();
  v95 = v122 + *(int *)(v94 + 48);
  v96 = v122 + *(int *)(v94 + 64);
  v97 = v133;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v133, v122, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>);
  v98 = v134;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v134, v95, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarItemGroup<Button<Text>?>);
  outlined init with take of TableCellFormula(v93, v96, (uint64_t (*)(_QWORD))type metadata accessor for SearchToolbarItem);
  outlined copy of BoundInputsView?(v87, v88, (uint64_t)v131, (uint64_t)v130, v129);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v98, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarItemGroup<Button<Text>?>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v97, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>);
}

__n128 specialized closure #1 in ToolbarSearchFieldStyle.Implementation.customAccessoryReader<A>(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __n128 result;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char v30;
  BOOL v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t (*v34)();
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  __n128 v40;
  __int128 v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v29 = a3;
  v27 = a2;
  v7 = type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7, v10);
  v11 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(int *)(v12 + 36);
  v28 = *(unsigned __int8 *)(a1 + v13);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v11, v14);
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v27;
  *(_QWORD *)(v16 + 24) = a3;
  outlined init with take of TableCellFormula((uint64_t)v11, v16 + ((v15 + 32) & ~v15), (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  v17 = (v15 + 16) & ~v15;
  v18 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v11, v18 + v17, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  v31 = (v28 & 1) == 0;
  v32 = partial apply for specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customAccessoryReader<A>(_:);
  v33 = v16;
  v34 = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customAccessoryReader<A>(_:);
  v35 = v18;
  v36 = 0;
  v37 = 0;
  v30 = *(_BYTE *)(a1 + v13);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  v19 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v11, v19 + v17, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, MEMORY[0x1E0CE5F08], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  lazy protocol witness table accessor for type ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>();
  swift_retain();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v34);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v36);
  v20 = v42;
  result = v40;
  v22 = v41;
  v23 = v44;
  v24 = v45;
  v25 = v39;
  v26 = v43;
  *(_BYTE *)a4 = v38;
  *(_OWORD *)(a4 + 8) = v25;
  *(__n128 *)(a4 + 24) = result;
  *(_OWORD *)(a4 + 40) = v22;
  *(_BYTE *)(a4 + 56) = v20;
  *(_OWORD *)(a4 + 64) = v26;
  *(_OWORD *)(a4 + 80) = v23;
  *(_OWORD *)(a4 + 96) = v24;
  return result;
}

uint64_t ToolbarSearchFieldStyle.Implementation.updateCustomAccessoryState()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned __int8 v9;
  uint64_t v11;

  v1 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SearchFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0, (uint64_t)v8, type metadata accessor for SearchFieldConfiguration);
  v9 = *(_BYTE *)(v0 + *(int *)(type metadata accessor for ToolbarSearchFieldStyle.Implementation() + 36));
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8]();
  SearchFieldState.hasCustomAccessory.setter(v9);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, type metadata accessor for SearchFieldConfiguration);
}

uint64_t ToolbarSearchFieldStyle.Implementation.searchBarItemPlacement.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v14;

  v3 = type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  v4 = v1 + *(int *)(v3 + 24);
  v5 = *(_QWORD *)v4;
  v6 = *(_BYTE *)(v4 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v4, v6);
  v7 = specialized Environment.wrappedValue.getter(v5, v6);
  outlined consume of Environment<Bool>.Content(v5, v6);
  if (v7 == 4)
  {
    if (one-time initialization token for principal != -1)
      swift_once();
    v8 = &static ToolbarItemPlacement.principal;
  }
  else
  {
    static Semantics.v4.getter();
    if ((isLinkedOnOrAfter(_:)() & 1) != 0)
      goto LABEL_12;
    v9 = v1 + *(int *)(v3 + 20);
    v10 = *(_QWORD *)v9;
    v11 = *(_BYTE *)(v9 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v9, v11);
    specialized Environment.wrappedValue.getter(v10, v11, &v14);
    outlined consume of Environment<Bool>.Content(v10, v11);
    if (v14 == 2
      || (v14 & 1) == 0
      || (outlined copy of Environment<Bool>.Content(v5, v6),
          v12 = specialized Environment.wrappedValue.getter(v5, v6),
          outlined consume of Environment<Bool>.Content(v5, v6),
          (v12 & 0xFE) != 2))
    {
LABEL_12:
      if (one-time initialization token for automatic != -1)
        swift_once();
      v8 = (uint64_t *)&static ToolbarItemPlacement.automatic;
    }
    else
    {
      if (one-time initialization token for search != -1)
        swift_once();
      v8 = &static ToolbarItemPlacement.search;
    }
  }
  return outlined init with copy of ToolbarItemPlacement((uint64_t)v8, a1);
}

uint64_t ToolbarSearchFieldStyle.Implementation.cancelButton.getter@<X0>(_WORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (**v18)();
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v3 = type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](v3, v6);
  v7 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (unsigned __int8 *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8]();
  v11 = *v10;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  if (v11 == 2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
    return (*(uint64_t (**)(_WORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
    v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v15 = swift_allocObject();
    outlined init with take of TableCellFormula((uint64_t)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
    *a1 = 256;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
    v17 = v16;
    v18 = (uint64_t (**)())((char *)a1 + *(int *)(v16 + 36));
    *v18 = partial apply for closure #1 in ToolbarSearchFieldStyle.Implementation.cancelButton.getter;
    v18[1] = (uint64_t (*)())v15;
    type metadata accessor for ButtonAction();
    swift_storeEnumTagMultiPayload();
    v19 = (char *)a1 + *(int *)(v17 + 40);
    *(_QWORD *)v19 = static Text.System.cancel.getter();
    *((_QWORD *)v19 + 1) = v20;
    v19[16] = v21 & 1;
    *((_QWORD *)v19 + 3) = v22;
    return (*(uint64_t (**)(_WORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a1, 0, 1, v17);
  }
}

uint64_t closure #1 in ToolbarSearchFieldStyle.Implementation.cancelButton.getter()
{
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  return swift_release();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ToolbarSearchFieldStyle.Implementation()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.Se, type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC, (void (*)(uint64_t))type metadata accessor for LazyPlatformItemWriter<LazySearchSuggestionsKey, SearchFieldConfiguration.Suggestions?>);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarRoleKey>, (uint64_t)&type metadata for ToolbarRoleKey, (uint64_t)&protocol witness table for ToolbarRoleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValue();
  lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarRoleKey> and conformance _PreferenceTransformModifier<A>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

int *protocol witness for SearchFieldStyle.makeBody(configuration:) in conformance ToolbarSearchFieldStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  int *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for SearchFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, type metadata accessor for SearchFieldConfiguration);
  KeyPath = swift_getKeyPath();
  v9 = swift_getKeyPath();
  v10 = swift_getKeyPath();
  outlined init with take of TableCellFormula((uint64_t)v7, a2, type metadata accessor for SearchFieldConfiguration);
  result = (int *)type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  v12 = a2 + result[5];
  *(_QWORD *)v12 = KeyPath;
  *(_BYTE *)(v12 + 8) = 0;
  v13 = a2 + result[6];
  *(_QWORD *)v13 = v9;
  *(_BYTE *)(v13 + 8) = 0;
  *(_BYTE *)(a2 + result[7]) = 0;
  v14 = a2 + result[8];
  *(_QWORD *)v14 = v10;
  *(_BYTE *)(v14 + 8) = 0;
  *(_BYTE *)(a2 + result[9]) = 0;
  return result;
}

uint64_t type metadata accessor for ToolbarSearchFieldStyle.Implementation()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ToolbarSearchFieldStyle.Implementation;
  if (!type metadata singleton initialization cache for ToolbarSearchFieldStyle.Implementation)
    return swift_getSingletonMetadata();
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ToolbarSearchFieldStyle.Implementation(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v6 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v6 = a1;
    a1[1] = a2[1];
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v8 = *(int *)(v7 + 32);
    v9 = (char *)v6 + v8;
    v10 = (char *)a2 + v8;
    *v9 = *((_BYTE *)a2 + v8);
    v9[1] = *((_BYTE *)a2 + v8 + 1);
    *((_WORD *)v9 + 1) = *(_WORD *)((char *)a2 + v8 + 2);
    v9[8] = *((_BYTE *)a2 + v8 + 8);
    *((_DWORD *)v9 + 1) = *(_DWORD *)((char *)a2 + v8 + 4);
    v11 = (int *)type metadata accessor for SearchFieldState();
    v12 = v11[9];
    v13 = &v9[v12];
    v14 = &v10[v12];
    v15 = type metadata accessor for AttributedString();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_retain();
    swift_retain();
    v16(v13, v14, v15);
    v9[v11[10]] = v10[v11[10]];
    v17 = v11[11];
    v18 = &v9[v17];
    v19 = &v10[v17];
    v18[4] = v19[4];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v20 = (int *)type metadata accessor for SearchFieldConfiguration(0);
    v21 = v20[6];
    v22 = (char *)v6 + v21;
    v23 = (char *)a2 + v21;
    v24 = v23[8];
    if (v24 == 255)
    {
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
    }
    else
    {
      v25 = v24 & 1;
      v26 = *(_QWORD *)v23;
      outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v23, v24 & 1);
      *(_QWORD *)v22 = v26;
      v22[8] = v25;
    }
    *((_BYTE *)v6 + v20[7]) = *((_BYTE *)a2 + v20[7]);
    v27 = v20[8];
    v28 = (char *)v6 + v27;
    v29 = (char *)a2 + v27;
    v30 = *(_QWORD *)((char *)a2 + v27);
    v31 = *(_QWORD *)((char *)a2 + v27 + 8);
    v32 = *((_BYTE *)a2 + v27 + 16);
    outlined copy of Text.Storage(v30, v31, v32);
    *(_QWORD *)v28 = v30;
    *((_QWORD *)v28 + 1) = v31;
    v28[16] = v32;
    *((_QWORD *)v28 + 3) = *((_QWORD *)v29 + 3);
    v33 = a3[5];
    v34 = (char *)v6 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(_QWORD *)v35;
    LOBYTE(v31) = v35[8];
    swift_bridgeObjectRetain();
    outlined copy of Environment<Bool>.Content(v36, v31);
    *(_QWORD *)v34 = v36;
    v34[8] = v31;
    v37 = a3[6];
    v38 = (char *)v6 + v37;
    v39 = (char *)a2 + v37;
    v40 = *(_QWORD *)v39;
    LOBYTE(v31) = v39[8];
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v39, v31);
    *(_QWORD *)v38 = v40;
    v38[8] = v31;
    v41 = a3[8];
    *((_BYTE *)v6 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v42 = (char *)v6 + v41;
    v43 = *(_QWORD *)((char *)a2 + v41);
    LOBYTE(v31) = *((_BYTE *)a2 + v41 + 8);
    outlined copy of Environment<Bool>.Content(v43, v31);
    *(_QWORD *)v42 = v43;
    v42[8] = v31;
    *((_BYTE *)v6 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return v6;
}

uint64_t destroy for ToolbarSearchFieldStyle.Implementation(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  swift_release();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v5 = *(int *)(v4 + 32);
  v6 = a1 + *(int *)(type metadata accessor for SearchFieldState() + 36) + v5;
  v7 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = type metadata accessor for SearchFieldConfiguration(0);
  v9 = a1 + *(int *)(v8 + 24);
  v10 = *(unsigned __int8 *)(v9 + 8);
  if (v10 != 255)
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v9, v10 & 1);
  outlined consume of Text.Storage(*(_QWORD *)(a1 + *(int *)(v8 + 32)), *(_QWORD *)(a1 + *(int *)(v8 + 32) + 8), *(_BYTE *)(a1 + *(int *)(v8 + 32) + 16));
  swift_bridgeObjectRelease();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + a2[5]), *(_BYTE *)(a1 + a2[5] + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + a2[6]), *(_BYTE *)(a1 + a2[6] + 8));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + a2[8]), *(_BYTE *)(a1 + a2[8] + 8));
}

_QWORD *initializeWithCopy for ToolbarSearchFieldStyle.Implementation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *((_BYTE *)a2 + v7);
  v8[1] = *((_BYTE *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  v8[8] = *((_BYTE *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  v10 = (int *)type metadata accessor for SearchFieldState();
  v11 = v10[9];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for AttributedString();
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_retain();
  swift_retain();
  v15(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  v16 = v10[11];
  v17 = &v8[v16];
  v18 = &v9[v16];
  v17[4] = v18[4];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v19 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v20 = v19[6];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = v22[8];
  if (v23 == 255)
  {
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
  }
  else
  {
    v24 = v23 & 1;
    v25 = *(_QWORD *)v22;
    outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v22, v23 & 1);
    *(_QWORD *)v21 = v25;
    v21[8] = v24;
  }
  *((_BYTE *)a1 + v19[7]) = *((_BYTE *)a2 + v19[7]);
  v26 = v19[8];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = *(_QWORD *)((char *)a2 + v26);
  v30 = *(_QWORD *)((char *)a2 + v26 + 8);
  v31 = *((_BYTE *)a2 + v26 + 16);
  outlined copy of Text.Storage(v29, v30, v31);
  *(_QWORD *)v27 = v29;
  *((_QWORD *)v27 + 1) = v30;
  v27[16] = v31;
  *((_QWORD *)v27 + 3) = *((_QWORD *)v28 + 3);
  v32 = a3[5];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = *(_QWORD *)v34;
  LOBYTE(v30) = v34[8];
  swift_bridgeObjectRetain();
  outlined copy of Environment<Bool>.Content(v35, v30);
  *(_QWORD *)v33 = v35;
  v33[8] = v30;
  v36 = a3[6];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = *(_QWORD *)v38;
  LOBYTE(v30) = v38[8];
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v38, v30);
  *(_QWORD *)v37 = v39;
  v37[8] = v30;
  v40 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v41 = (char *)a1 + v40;
  v42 = *(_QWORD *)((char *)a2 + v40);
  LOBYTE(v30) = *((_BYTE *)a2 + v40 + 8);
  outlined copy of Environment<Bool>.Content(v42, v30);
  *(_QWORD *)v41 = v42;
  v41[8] = v30;
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_QWORD *assignWithCopy for ToolbarSearchFieldStyle.Implementation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *((_BYTE *)a2 + v7);
  v8[1] = *((_BYTE *)a2 + v7 + 1);
  v8[2] = *((_BYTE *)a2 + v7 + 2);
  v8[3] = *((_BYTE *)a2 + v7 + 3);
  LODWORD(v7) = *(_DWORD *)((char *)a2 + v7 + 4);
  v8[8] = v9[8];
  *((_DWORD *)v8 + 1) = v7;
  v10 = (int *)type metadata accessor for SearchFieldState();
  v11 = v10[9];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  v15 = v10[11];
  v16 = &v8[v15];
  v17 = &v9[v15];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  v18 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v19 = v18[6];
  v20 = (uint64_t)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *((unsigned __int8 *)a1 + v19 + 8);
  v23 = *((unsigned __int8 *)a2 + v19 + 8);
  if (v22 == 255)
  {
    if (v23 == 255)
    {
      v25 = *(_QWORD *)v21;
      *(_BYTE *)(v20 + 8) = v21[8];
      *(_QWORD *)v20 = v25;
    }
    else
    {
      v30 = v23 & 1;
      v31 = *(_QWORD *)v21;
      outlined copy of PlatformItemCollection.Storage(v31, v23 & 1);
      *(_QWORD *)v20 = v31;
      *(_BYTE *)(v20 + 8) = v30;
    }
  }
  else if (v23 == 255)
  {
    outlined destroy of PlatformItemCollection(v20);
    v24 = v21[8];
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *(_BYTE *)(v20 + 8) = v24;
  }
  else
  {
    v26 = v23 & 1;
    v27 = *(_QWORD *)v21;
    outlined copy of PlatformItemCollection.Storage(v27, v23 & 1);
    v28 = *(_QWORD *)v20;
    v29 = *(_BYTE *)(v20 + 8);
    *(_QWORD *)v20 = v27;
    *(_BYTE *)(v20 + 8) = v26;
    outlined consume of PlatformItemCollection.Storage(v28, v29);
  }
  *((_BYTE *)a1 + v18[7]) = *((_BYTE *)a2 + v18[7]);
  v32 = v18[8];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = *(_QWORD *)((char *)a2 + v32);
  v36 = *(_QWORD *)((char *)a2 + v32 + 8);
  v37 = *((_BYTE *)a2 + v32 + 16);
  outlined copy of Text.Storage(v35, v36, v37);
  v38 = *(_QWORD *)v33;
  v39 = *((_QWORD *)v33 + 1);
  v40 = v33[16];
  *(_QWORD *)v33 = v35;
  *((_QWORD *)v33 + 1) = v36;
  v33[16] = v37;
  outlined consume of Text.Storage(v38, v39, v40);
  *((_QWORD *)v33 + 3) = *((_QWORD *)v34 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = a3[5];
  v42 = (char *)a1 + v41;
  v43 = (char *)a2 + v41;
  v44 = *(_QWORD *)v43;
  LOBYTE(v36) = v43[8];
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v43, v36);
  v45 = *(_QWORD *)v42;
  v46 = v42[8];
  *(_QWORD *)v42 = v44;
  v42[8] = v36;
  outlined consume of Environment<Bool>.Content(v45, v46);
  v47 = a3[6];
  v48 = (char *)a1 + v47;
  v49 = (char *)a2 + v47;
  v50 = *(_QWORD *)v49;
  LOBYTE(v36) = v49[8];
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v49, v36);
  v51 = *(_QWORD *)v48;
  v52 = v48[8];
  *(_QWORD *)v48 = v50;
  v48[8] = v36;
  outlined consume of Environment<Bool>.Content(v51, v52);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v53 = a3[8];
  v54 = (char *)a1 + v53;
  v55 = (char *)a2 + v53;
  v56 = *(_QWORD *)v55;
  LOBYTE(v36) = v55[8];
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v55, v36);
  v57 = *(_QWORD *)v54;
  v58 = v54[8];
  *(_QWORD *)v54 = v56;
  v54[8] = v36;
  outlined consume of Environment<Bool>.Content(v57, v58);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_QWORD *initializeWithTake for ToolbarSearchFieldStyle.Implementation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v8 = *(int *)(v7 + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  *v9 = *((_BYTE *)a2 + v8);
  v9[1] = *((_BYTE *)a2 + v8 + 1);
  *((_WORD *)v9 + 1) = *(_WORD *)((char *)a2 + v8 + 2);
  v9[8] = *((_BYTE *)a2 + v8 + 8);
  *((_DWORD *)v9 + 1) = *(_DWORD *)((char *)a2 + v8 + 4);
  v11 = (int *)type metadata accessor for SearchFieldState();
  v12 = v11[9];
  v13 = &v9[v12];
  v14 = &v10[v12];
  v15 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v9[v11[10]] = v10[v11[10]];
  v16 = v11[11];
  v17 = &v9[v16];
  v18 = &v10[v16];
  v17[4] = v18[4];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v19 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v20 = v19[6];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  *((_BYTE *)a1 + v19[7]) = *((_BYTE *)a2 + v19[7]);
  v23 = v19[8];
  v24 = (_OWORD *)((char *)a1 + v23);
  v25 = (_OWORD *)((char *)a2 + v23);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  v27 = a3[5];
  v28 = a3[6];
  v29 = (char *)a1 + v27;
  v30 = (char *)a2 + v27;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v29[8] = v30[8];
  v31 = (char *)a1 + v28;
  v32 = (char *)a2 + v28;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  v31[8] = v32[8];
  v33 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v34[8] = v35[8];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_QWORD *assignWithTake for ToolbarSearchFieldStyle.Implementation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *((_BYTE *)a2 + v7);
  v8[1] = *((_BYTE *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  v8[8] = *((_BYTE *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  v10 = (int *)type metadata accessor for SearchFieldState();
  v11 = v10[9];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  v15 = v10[11];
  v16 = &v8[v15];
  v17 = &v9[v15];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  v18 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v19 = v18[6];
  v20 = (uint64_t)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *((unsigned __int8 *)a1 + v19 + 8);
  if (v22 != 255)
  {
    v23 = v21[8];
    if (v23 != 255)
    {
      v24 = *(_QWORD *)v20;
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *(_BYTE *)(v20 + 8) = v23 & 1;
      outlined consume of PlatformItemCollection.Storage(v24, v22 & 1);
      goto LABEL_6;
    }
    outlined destroy of PlatformItemCollection(v20);
  }
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = v21[8];
LABEL_6:
  *((_BYTE *)a1 + v18[7]) = *((_BYTE *)a2 + v18[7]);
  v25 = v18[8];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  LOBYTE(v25) = *((_BYTE *)a2 + v25 + 16);
  v28 = *(_QWORD *)v26;
  v29 = *((_QWORD *)v26 + 1);
  v30 = v26[16];
  *(_OWORD *)v26 = *(_OWORD *)v27;
  v26[16] = v25;
  outlined consume of Text.Storage(v28, v29, v30);
  *((_QWORD *)v26 + 3) = *((_QWORD *)v27 + 3);
  swift_bridgeObjectRelease();
  v31 = a3[5];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)v33;
  LOBYTE(v33) = v33[8];
  v35 = *(_QWORD *)v32;
  v36 = v32[8];
  *(_QWORD *)v32 = v34;
  v32[8] = (char)v33;
  outlined consume of Environment<Bool>.Content(v35, v36);
  v37 = a3[6];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = *(_QWORD *)v39;
  LOBYTE(v39) = v39[8];
  v41 = *(_QWORD *)v38;
  v42 = v38[8];
  *(_QWORD *)v38 = v40;
  v38[8] = (char)v39;
  outlined consume of Environment<Bool>.Content(v41, v42);
  v43 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  v46 = *(_QWORD *)v45;
  LOBYTE(v45) = v45[8];
  v47 = *(_QWORD *)v44;
  v48 = v44[8];
  *(_QWORD *)v44 = v46;
  v44[8] = (char)v45;
  outlined consume of Environment<Bool>.Content(v47, v48);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarSearchFieldStyle.Implementation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187168984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for SearchFieldConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ToolbarSearchFieldStyle.Implementation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187168A0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SearchFieldConfiguration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  return result;
}

uint64_t type metadata completion function for ToolbarSearchFieldStyle.Implementation()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SearchFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_187168B08()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ToolbarSearchFieldStyle.Implementation and conformance ToolbarSearchFieldStyle.Implementation, (uint64_t (*)(uint64_t))type metadata accessor for ToolbarSearchFieldStyle.Implementation, (uint64_t)&protocol conformance descriptor for ToolbarSearchFieldStyle.Implementation);
}

uint64_t associated type witness table accessor for View.Body : View in ToolbarSearchFieldStyle.Implementation()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!lazy cache variable for type metadata for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for TupleToolbarContent);
    v3 = type metadata accessor for ToolbarModifier(a1, MEMORY[0x1E0DEE9C0] + 8, v2, (uint64_t)&protocol witness table for TupleToolbarContent<A>);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>);
  }
}

void type metadata accessor for TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>, (uint64_t (*)(uint64_t))type metadata accessor for (ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem), (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for TupleToolbarContent);
}

void type metadata accessor for (ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem))
  {
    type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>(255);
    type metadata accessor for ToolbarItemGroup<Button<Text>?>(255);
    type metadata accessor for SearchToolbarItem();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem));
  }
}

void type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ToolbarItemGroup<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarItemGroup);
}

void type metadata accessor for ToolbarItemGroup<Button<Text>?>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ToolbarItemGroup<Button<Text>?>)
  {
    type metadata accessor for Button<Text>?();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type Button<Text>? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type Button<Text>? and conformance <A> A?, (uint64_t (*)(uint64_t))type metadata accessor for Button<Text>?, (uint64_t (*)(void))lazy protocol witness table accessor for type Button<Text> and conformance Button<A>);
    v6 = type metadata accessor for ToolbarItemGroup(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ToolbarItemGroup<Button<Text>?>);
  }
}

void type metadata accessor for Button<Text>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Button<Text>?)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>?);
  }
}

unint64_t lazy protocol witness table accessor for type Button<Text> and conformance Button<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>;
  if (!lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>, (void (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>);
}

void type metadata accessor for _UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>)
  {
    type metadata accessor for IDView<SearchFieldConfiguration.Suggestions, Bool>?(255);
    lazy protocol witness table accessor for type Button<Text>? and conformance <A> A?(&lazy protocol witness table cache variable for type IDView<SearchFieldConfiguration.Suggestions, Bool>? and conformance <A> A?, (uint64_t (*)(uint64_t))type metadata accessor for IDView<SearchFieldConfiguration.Suggestions, Bool>?, lazy protocol witness table accessor for type IDView<SearchFieldConfiguration.Suggestions, Bool> and conformance IDView<A, B>);
    v0 = type metadata accessor for _UnaryViewAdaptor();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>);
  }
}

void type metadata accessor for IDView<SearchFieldConfiguration.Suggestions, Bool>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for IDView<SearchFieldConfiguration.Suggestions, Bool>?, (uint64_t (*)(uint64_t))type metadata accessor for IDView<SearchFieldConfiguration.Suggestions, Bool>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for IDView<SearchFieldConfiguration.Suggestions, Bool>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for IDView<SearchFieldConfiguration.Suggestions, Bool>)
  {
    v0 = type metadata accessor for IDView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IDView<SearchFieldConfiguration.Suggestions, Bool>);
  }
}

uint64_t lazy protocol witness table accessor for type Button<Text>? and conformance <A> A?(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7 = a3();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type IDView<SearchFieldConfiguration.Suggestions, Bool> and conformance IDView<A, B>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IDView<SearchFieldConfiguration.Suggestions, Bool> and conformance IDView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for IDView<SearchFieldConfiguration.Suggestions, Bool>, MEMORY[0x1E0CE73F0]);
}

uint64_t type metadata accessor for StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryVie()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedCo;
  if (!lazy cache variable for type metadata for StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedCo)
  {
    type metadata accessor for ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>();
    type metadata accessor for StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>();
    lazy protocol witness table accessor for type HasCustomScopeBarPredicate and conformance HasCustomScopeBarPredicate();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>;
  if (!lazy cache variable for type metadata for ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for EnvironmentValues.SearchCustomScopeBar?);
    type metadata accessor for StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>();
    lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory? and conformance <A> A?(&lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomScopeBar? and conformance <A> A?, &lazy cache variable for type metadata for EnvironmentValues.SearchCustomScopeBar?, (uint64_t)&type metadata for EnvironmentValues.SearchCustomScopeBar, (uint64_t)&protocol witness table for EnvironmentValues.SearchCustomScopeBar);
    lazy protocol witness table accessor for type StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>> and conformance <> StaticIf<A, B, C>();
    type metadata accessor for ViewInputsBinding();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>;
  if (!lazy cache variable for type metadata for StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, MEMORY[0x1E0CE5F08], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(255);
    lazy protocol witness table accessor for type HasCustomAccessoryPredicate and conformance HasCustomAccessoryPredicate();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, MEMORY[0x1E0CE5F08], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ValueActionModifier2<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52E8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>);
  }
}

uint64_t type metadata accessor for ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>;
  if (!lazy cache variable for type metadata for ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for EnvironmentValues.SearchCustomAccessory?);
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(255);
    lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory? and conformance <A> A?(&lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomAccessory? and conformance <A> A?, &lazy cache variable for type metadata for EnvironmentValues.SearchCustomAccessory?, (uint64_t)&type metadata for EnvironmentValues.SearchCustomAccessory, (uint64_t)&protocol witness table for EnvironmentValues.SearchCustomAccessory);
    lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for ViewInputsBinding();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?> and conformance _UnaryViewAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, MEMORY[0x1E0CE4108]);
    v3[1] = &protocol witness table for ToolbarModifier<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HasCustomAccessoryPredicate and conformance HasCustomAccessoryPredicate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasCustomAccessoryPredicate and conformance HasCustomAccessoryPredicate;
  if (!lazy protocol witness table cache variable for type HasCustomAccessoryPredicate and conformance HasCustomAccessoryPredicate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasCustomAccessoryPredicate, &type metadata for HasCustomAccessoryPredicate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomAccessoryPredicate and conformance HasCustomAccessoryPredicate);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory? and conformance <A> A?(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    type metadata accessor for AccessibilityValueStorage?(255, a2);
    v8 = a4;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t HasCustomAccessory;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>> and conformance <> StaticIf<A, B, C>)
  {
    HasCustomAccessory = type metadata accessor for StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>();
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, HasCustomAccessory, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, MEMORY[0x1E0CE5F08], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ValueActionModifier2<Bool> and conformance _ValueActionModifier2<A>);
    v3[1] = MEMORY[0x1E0CE5EF8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, MEMORY[0x1E0CE5F08], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = &protocol witness table for ViewInputsBinding<A, B>;
    v2[1] = MEMORY[0x1E0CE5EF8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ValueActionModifier2<Bool> and conformance _ValueActionModifier2<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ValueActionModifier2<Bool> and conformance _ValueActionModifier2<A>;
  if (!lazy protocol witness table cache variable for type _ValueActionModifier2<Bool> and conformance _ValueActionModifier2<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ValueActionModifier2<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52E8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5300], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ValueActionModifier2<Bool> and conformance _ValueActionModifier2<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HasCustomScopeBarPredicate and conformance HasCustomScopeBarPredicate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasCustomScopeBarPredicate and conformance HasCustomScopeBarPredicate;
  if (!lazy protocol witness table cache variable for type HasCustomScopeBarPredicate and conformance HasCustomScopeBarPredicate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasCustomScopeBarPredicate, &type metadata for HasCustomScopeBarPredicate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomScopeBarPredicate and conformance HasCustomScopeBarPredicate);
  }
  return result;
}

void type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccess, (void (*)(uint64_t))type metadata accessor for StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryVie, (void (*)(uint64_t))type metadata accessor for LazyPlatformItemWriter<LazySearchScopesKey, ModifiedContent<ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>>);
}

uint64_t type metadata accessor for LazyPlatformItemWriter<LazySearchScopesKey, ModifiedContent<ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for LazyPlatformItemWriter<LazySearchScopesKey, ModifiedContent<ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>>;
  if (!lazy cache variable for type metadata for LazyPlatformItemWriter<LazySearchScopesKey, ModifiedContent<ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>);
    type metadata accessor for LazyPlatformItemWriter();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>)
  {
    type metadata accessor for ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE3238], MEMORY[0x1E0CE3228], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>);
  }
}

void type metadata accessor for ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for SearchFieldConfiguration.Scopes?);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PickerStyleWriter<SectionPickerStyle>, (uint64_t)&type metadata for SectionPickerStyle, (uint64_t)&protocol witness table for SectionPickerStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PickerStyleWriter);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory? and conformance <A> A?(&lazy protocol witness table cache variable for type SearchFieldConfiguration.Scopes? and conformance <A> A?, &lazy cache variable for type metadata for SearchFieldConfiguration.Scopes?, (uint64_t)&type metadata for SearchFieldConfiguration.Scopes, (uint64_t)&protocol witness table for SearchFieldConfiguration.Scopes);
    v3[1] = &protocol witness table for PickerStyleWriter<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE3238], MEMORY[0x1E0CE3228], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t type metadata accessor for LazyPlatformItemWriter<LazySearchSuggestionsKey, SearchFieldConfiguration.Suggestions?>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for LazyPlatformItemWriter<LazySearchSuggestionsKey, SearchFieldConfiguration.Suggestions?>;
  if (!lazy cache variable for type metadata for LazyPlatformItemWriter<LazySearchSuggestionsKey, SearchFieldConfiguration.Suggestions?>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, (unint64_t *)&lazy cache variable for type metadata for SearchFieldConfiguration.Suggestions?);
    lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory? and conformance <A> A?(&lazy protocol witness table cache variable for type SearchFieldConfiguration.Suggestions? and conformance <A> A?, (unint64_t *)&lazy cache variable for type metadata for SearchFieldConfiguration.Suggestions?, (uint64_t)&type metadata for SearchFieldConfiguration.Suggestions, (uint64_t)&protocol witness table for SearchFieldConfiguration.Suggestions);
    type metadata accessor for LazyPlatformItemWriter();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.S()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<Envi)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.Se, type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC, (void (*)(uint64_t))type metadata accessor for LazyPlatformItemWriter<LazySearchSuggestionsKey, SearchFieldConfiguration.Suggestions?>);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarRoleKey>, (uint64_t)&type metadata for ToolbarRoleKey, (uint64_t)&protocol witness table for ToolbarRoleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<Envi);
  }
}

_QWORD *partial apply for closure #1 in ToolbarSearchFieldStyle.Implementation.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ToolbarSearchFieldStyle.Implementation() - 8) + 80);
  return closure #1 in ToolbarSearchFieldStyle.Implementation.body.getter(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customScopeBarReader<A>(_:)(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD v26[12];

  v6 = type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  if (*(_BYTE *)(a4 + *(int *)(v6 + 28)) == 1)
  {
    v17 = *(_QWORD *)(a1 + 80);
    v24 = *(_QWORD *)(a1 + 72);
    v14 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 64);
    v18 = *(unsigned int *)(a1 + 48);
    v11 = *(void **)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 24);
    v9 = *(unsigned int *)(a1 + 16);
    v20 = a1;
    v19 = *(_QWORD *)a1;
    v8 = *(_QWORD *)(v20 + 8);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v21 = v11;
    v7 = v19;
    v16 = v24;
    v13 = v18;
  }
  v26[0] = v7;
  v26[1] = v8;
  v26[2] = v9;
  v26[3] = v10;
  v26[4] = v11;
  v26[5] = v12;
  v26[6] = v13;
  v26[7] = v14;
  v26[8] = v15;
  v26[9] = v16;
  v26[10] = v17;
  v22 = v7;
  a2(v26);
  return outlined consume of BoundInputsView?(v22, v8, v9, v10, v11);
}

uint64_t partial apply for specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customScopeBarReader<A>(_:)(uint64_t a1)
{
  return partial apply for specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customScopeBarReader<A>(_:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t))specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customScopeBarReader<A>(_:));
}

uint64_t outlined init with take of BoundInputsView?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_187169C30()
{
  return swift_deallocObject();
}

_BYTE *partial apply for closure #1 in View.transformToolbarRole(_:isEnabled:)(_BYTE *a1)
{
  uint64_t v1;

  return closure #1 in View.transformToolbarRole(_:isEnabled:)(a1, *(_BYTE *)(v1 + 16), *(_BYTE *)(v1 + 17));
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAcces(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.Se, type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC, (void (*)(uint64_t))type metadata accessor for LazyPlatformItemWriter<LazySearchSuggestionsKey, SearchFieldConfiguration.Suggestions?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, (uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.Se, type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC, (void (*)(uint64_t))type metadata accessor for LazyPlatformItemWriter<LazySearchSuggestionsKey, SearchFieldConfiguration.Suggestions?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ToolbarItemPlacement(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ToolbarItemPlacement(a2, a1);
  return a2;
}

uint64_t specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customAccessoryReader<A>(_:)(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD v26[12];

  v6 = type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  if (*(_BYTE *)(a4 + *(int *)(v6 + 36)) == 1)
  {
    v17 = *(_QWORD *)(a1 + 80);
    v24 = *(_QWORD *)(a1 + 72);
    v14 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 64);
    v18 = *(unsigned int *)(a1 + 48);
    v11 = *(void **)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 24);
    v9 = *(unsigned int *)(a1 + 16);
    v20 = a1;
    v19 = *(_QWORD *)a1;
    v8 = *(_QWORD *)(v20 + 8);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v21 = v11;
    v7 = v19;
    v16 = v24;
    v13 = v18;
  }
  v26[0] = v7;
  v26[1] = v8;
  v26[2] = v9;
  v26[3] = v10;
  v26[4] = v11;
  v26[5] = v12;
  v26[6] = v13;
  v26[7] = v14;
  v26[8] = v15;
  v26[9] = v16;
  v26[10] = v17;
  v22 = v7;
  a2(v26);
  return outlined consume of BoundInputsView?(v22, v8, v9, v10, v11);
}

uint64_t outlined destroy of ToolbarItemPlacement(uint64_t a1)
{
  destroy for ToolbarItemPlacement(a1);
  return a1;
}

uint64_t partial apply for closure #1 in ToolbarSearchFieldStyle.Implementation.cancelButton.getter()
{
  type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  return closure #1 in ToolbarSearchFieldStyle.Implementation.cancelButton.getter();
}

uint64_t objectdestroy_11Tm()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v1 = (int *)type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  swift_release();
  v3 = v0 + ((v2 + 32) & ~v2);
  swift_release();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v5 = *(int *)(v4 + 32);
  v6 = v3 + v5 + *(int *)(type metadata accessor for SearchFieldState() + 36);
  v7 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = type metadata accessor for SearchFieldConfiguration(0);
  v9 = v3 + *(int *)(v8 + 24);
  v10 = *(unsigned __int8 *)(v9 + 8);
  if (v10 != 255)
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v9, v10 & 1);
  outlined consume of Text.Storage(*(_QWORD *)(v3 + *(int *)(v8 + 32)), *(_QWORD *)(v3 + *(int *)(v8 + 32) + 8), *(_BYTE *)(v3 + *(int *)(v8 + 32) + 16));
  swift_bridgeObjectRelease();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v3 + v1[5]), *(_BYTE *)(v3 + v1[5] + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v3 + v1[6]), *(_BYTE *)(v3 + v1[6] + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v3 + v1[8]), *(_BYTE *)(v3 + v1[8] + 8));
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customAccessoryReader<A>(_:)(uint64_t a1)
{
  return partial apply for specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customScopeBarReader<A>(_:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t))specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customAccessoryReader<A>(_:));
}

uint64_t partial apply for specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customScopeBarReader<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ToolbarSearchFieldStyle.Implementation() - 8) + 80);
  return a2(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + ((v4 + 32) & ~v4));
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customAccessoryReader<A>(_:)()
{
  type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  return ToolbarSearchFieldStyle.Implementation.updateCustomAccessoryState()();
}

uint64_t objectdestroy_14Tm()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v1 = (int *)type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = v0 + v3;
  swift_release();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v7 = *(int *)(v6 + 32);
  v8 = v5 + v7 + *(int *)(type metadata accessor for SearchFieldState() + 36);
  v9 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = type metadata accessor for SearchFieldConfiguration(0);
  v11 = v5 + *(int *)(v10 + 24);
  v12 = *(unsigned __int8 *)(v11 + 8);
  if (v12 != 255)
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v11, v12 & 1);
  outlined consume of Text.Storage(*(_QWORD *)(v5 + *(int *)(v10 + 32)), *(_QWORD *)(v5 + *(int *)(v10 + 32) + 8), *(_BYTE *)(v5 + *(int *)(v10 + 32) + 16));
  swift_bridgeObjectRelease();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v5 + v1[5]), *(_BYTE *)(v5 + v1[5] + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v5 + v1[6]), *(_BYTE *)(v5 + v1[6] + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v5 + v1[8]), *(_BYTE *)(v5 + v1[8] + 8));
  if (*(_QWORD *)(v0 + v4))
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  return closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.body.getter(a1, v2+ ((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64)+ ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))+ 7) & 0xFFFFFFFFFFFFFFF8), a2);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValue()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<Environmen;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<Environmen)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.Se, type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC, (void (*)(uint64_t))type metadata accessor for LazyPlatformItemWriter<LazySearchSuggestionsKey, SearchFieldConfiguration.Suggestions?>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAc();
    v3[1] = &protocol witness table for LazyPlatformItemWriter<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<Environmen);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAc()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCu;
  if (!lazy protocol witness table cache variable for type ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCu)
  {
    type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, Modifi();
    v3[1] = &protocol witness table for LazyPlatformItemWriter<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCu);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, Modifi()
{
  unint64_t result;
  uint64_t HasCustomAccessory;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ;
  if (!lazy protocol witness table cache variable for type StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, )
  {
    HasCustomAccessory = type metadata accessor for StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryVie();
    v2[0] = &protocol witness table for ViewInputsBinding<A, B>;
    v2[1] = lazy protocol witness table accessor for type StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, HasCustomAccessory, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?,);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarRoleKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarRoleKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarRoleKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarRoleKey>, (uint64_t)&type metadata for ToolbarRoleKey, (uint64_t)&protocol witness table for ToolbarRoleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarRoleKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t sub_18716A474()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBi, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.S, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValue, (uint64_t (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarRoleKey> and conformance _PreferenceTransformModifier<A>);
}

_QWORD *closure #1 in UIKitResponderGestureRecognizer.name.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a1 + OBJC_IVAR____TtC7SwiftUI31UIKitResponderGestureRecognizer_responder;
  result = (_QWORD *)swift_weakLoadStrong();
  if (result)
  {
    v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v3 + 8) + 80))(*result);
    v7 = v6;
    result = (_QWORD *)swift_release();
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
  return result;
}

id UIKitResponderGestureRecognizer.didAttach(to:)(id result)
{
  void *v1;

  if (result)
  {
    type metadata accessor for UIKitResponderEventBindingBridge();
    result = (id)swift_dynamicCastClass();
    if (result)
      return objc_msgSend(v1, sel_addTarget_action_, result, sel_flushActions);
  }
  return result;
}

uint64_t UIKitResponderGestureRecognizer.isKind(of:)(uint64_t a1)
{
  void *v1;
  objc_class *ObjectType;
  uint64_t ObjCClassFromMetadata;
  char v6;
  char v7;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType();
  if (type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITapGestureRecognizer) == a1)
  {
    if (swift_weakLoadStrong())
    {
      AnyGestureResponder.requiredTapCount.getter();
      v7 = v6;
      swift_release();
      if ((v7 & 1) == 0)
        return 1;
    }
  }
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v8.receiver = v1;
  v8.super_class = ObjectType;
  return (uint64_t)objc_msgSendSuper2(&v8, sel_isKindOfClass_, ObjCClassFromMetadata);
}

Swift::UInt __swiftcall UIKitResponderGestureRecognizer.numberOfTapsRequired()()
{
  Swift::UInt v0;
  char v1;
  char v2;

  if (!swift_weakLoadStrong())
    return 0;
  v0 = AnyGestureResponder.requiredTapCount.getter();
  v2 = v1;
  swift_release();
  if ((v2 & 1) != 0)
    return 0;
  if ((v0 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return 0;
  }
  return v0;
}

Swift::Bool __swiftcall UIKitResponderGestureRecognizer.canPrevent(_:)(UIGestureRecognizer *a1)
{
  char *v1;
  void *v2;
  objc_class *ObjectType;
  char *v5;
  uint64_t Strong;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *__return_ptr, uint64_t, uint64_t);
  char v15;
  unsigned __int8 v16;
  UIView *v17;
  UIView *v18;
  uint64_t v19;
  void *v20;
  UIView *v21;
  UIGestureRecognizer *v22;
  uint64_t v23;
  void (*v24)(char *__return_ptr, uint64_t, uint64_t);
  char v25;
  char v26;
  char v28;
  objc_super v29;
  char v30;
  objc_super v31;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = &v1[OBJC_IVAR____TtC7SwiftUI31UIKitResponderGestureRecognizer_responder];
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    v31.receiver = v2;
    v31.super_class = ObjectType;
    v16 = -[UIGestureRecognizer canPreventGestureRecognizer:](&v31, sel_canPreventGestureRecognizer_, a1);
    return v16 & 1;
  }
  v7 = (uint64_t *)Strong;
  v8 = *((_QWORD *)v5 + 1);
  v9 = swift_dynamicCastClass();
  if (v9)
  {
    v10 = v9 + OBJC_IVAR____TtC7SwiftUI31UIKitResponderGestureRecognizer_responder;
    v11 = (uint64_t *)swift_weakLoadStrong();
    if (v11)
    {
      v12 = *(_QWORD *)(v10 + 8);
      v13 = *v11;
      v14 = *(void (**)(char *__return_ptr, uint64_t, uint64_t))(v12 + 72);
      swift_retain();
      v14(&v30, v13, v12);
      swift_release();
      v15 = v30;
LABEL_5:
      v30 = v15;
      v16 = AnyGestureResponder.canPrevent(_:otherExclusionPolicy:)();
      swift_release();
      swift_release();
      return v16 & 1;
    }
  }
  v17 = -[UIGestureRecognizer view](a1, sel_view);
  if (v17)
  {
    v18 = v17;
    type metadata accessor for HostingScrollView();
    v19 = swift_dynamicCastClass();
    if (v19 && (v20 = (void *)v19, swift_weakLoadStrong()))
    {
      v21 = v18;
      v22 = (UIGestureRecognizer *)objc_msgSend(v20, sel_panGestureRecognizer);

      if (v22 == a1)
      {
        swift_retain();
        v28 = AnyGestureResponder.isCancellable.getter();
        swift_release();

        if ((v28 & 1) != 0)
          v15 = 2;
        else
          v15 = 0;
        goto LABEL_5;
      }

      swift_release();
    }
    else
    {

    }
  }
  v23 = *v7;
  if ((AnyGestureResponder.isCancellable.getter() & 1) != 0)
  {
    v24 = *(void (**)(char *__return_ptr, uint64_t, uint64_t))(v8 + 72);
    v24(&v30, v23, v8);
    if (v30 != 1 && UIGestureRecognizer.isCancellingGesture.getter())
      goto LABEL_19;
  }
  else
  {
    v24 = *(void (**)(char *__return_ptr, uint64_t, uint64_t))(v8 + 72);
  }
  v24(&v30, v23, v8);
  if (v30 == 2)
  {
LABEL_19:
    swift_release();
    v16 = 0;
    return v16 & 1;
  }
  v25 = AnyGestureResponder.isPrioritized(over:)(a1, v23, v8);
  if (v25 == 2)
  {
    v29.receiver = v2;
    v29.super_class = ObjectType;
    v16 = -[UIGestureRecognizer canPreventGestureRecognizer:](&v29, sel_canPreventGestureRecognizer_, a1);
    swift_release();
  }
  else
  {
    v26 = v25;
    swift_release();
    v16 = v26 & 1;
  }
  return v16 & 1;
}

BOOL UIGestureRecognizer.isCancellingGesture.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;

  v1 = objc_msgSend(v0, sel_name);
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

    if (v3 == 0xD00000000000001ELL && v5 == 0x8000000187BD8E20)
      goto LABEL_12;
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
  }
  v7 = objc_msgSend(v0, sel_name);
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    if (v9 == 0xD00000000000002ALL && v11 == 0x8000000187BD8DF0)
      goto LABEL_12;
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v12 & 1) != 0)
      return 1;
  }
  v13 = objc_msgSend(v0, sel_name);
  if (!v13)
    goto LABEL_15;
  v14 = v13;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = v16;

  if (v15 == 0xD00000000000002ALL && v17 == 0x8000000187BD8DC0)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return 1;
  }
  v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
    return 1;
LABEL_15:
  objc_opt_self();
  return swift_dynamicCastObjCClass() != 0;
}

uint64_t AnyGestureResponder.isPrioritized(over:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 72))(&v8, a2, a3);
  if (v8 != 1)
    return 2;
  v4 = objc_msgSend(a1, sel_view);
  if (!v4)
    return 2;
  v5 = v4;
  if (!dispatch thunk of ViewResponder.gestureContainer.getter())
  {

    return 2;
  }
  v6 = _UIGestureRecognizerContainerCompare();

  swift_unknownObjectRelease();
  if (v6 == -1)
    return 1;
  else
    return 2;
}

Swift::Bool __swiftcall UIKitResponderGestureRecognizer.canBePrevented(by:)(UIGestureRecognizer *by)
{
  char *v1;
  void *v2;
  objc_class *ObjectType;
  char *v5;
  uint64_t Strong;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *__return_ptr, uint64_t, uint64_t);
  unsigned __int8 v11;
  uint64_t v12;
  char v13;
  char v14;
  objc_super v16;
  char v17;
  objc_super v18;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = &v1[OBJC_IVAR____TtC7SwiftUI31UIKitResponderGestureRecognizer_responder];
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v7 = (uint64_t *)Strong;
    v8 = *((_QWORD *)v5 + 1);
    if (swift_dynamicCastClass() && swift_weakLoadStrong())
    {
      v9 = *v7;
      v10 = *(void (**)(char *__return_ptr, uint64_t, uint64_t))(v8 + 72);
      swift_retain();
      v10(&v17, v9, v8);
      v11 = AnyGestureResponder.canPrevent(_:otherExclusionPolicy:)();
      swift_release();
      swift_release_n();
    }
    else
    {
      v12 = *v7;
      (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(v8 + 72))(&v17, *v7, v8);
      if (v17 == 2)
      {
        swift_release();
        v11 = 0;
      }
      else
      {
        v13 = AnyGestureResponder.isPrioritized(over:)(by, v12, v8);
        if (v13 == 2)
        {
          v16.receiver = v2;
          v16.super_class = ObjectType;
          v11 = -[UIGestureRecognizer canBePreventedByGestureRecognizer:](&v16, sel_canBePreventedByGestureRecognizer_, by);
          swift_release();
        }
        else
        {
          v14 = v13;
          swift_release();
          v11 = (v14 & 1) == 0;
        }
      }
    }
  }
  else
  {
    v18.receiver = v2;
    v18.super_class = ObjectType;
    v11 = -[UIGestureRecognizer canBePreventedByGestureRecognizer:](&v18, sel_canBePreventedByGestureRecognizer_, by);
  }
  return v11 & 1;
}

Swift::Bool __swiftcall UIKitResponderGestureRecognizer.shouldRequireFailure(of:)(UIGestureRecognizer *of)
{
  void *v1;
  objc_class *ObjectType;
  char v4;
  char v6;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType();
  if (!swift_weakLoadStrong())
    goto LABEL_8;
  if (swift_dynamicCastClass() && swift_weakLoadStrong())
  {
    v4 = AnyGestureResponder.shouldRequireFailure(of:)();
    swift_release();
    swift_release();
    return v4 & 1;
  }
  v6 = AnyGestureResponder.isCancellable.getter();
  swift_release();
  if ((v6 & 1) != 0)
  {
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
      return 1;
  }
LABEL_8:
  v7.receiver = v1;
  v7.super_class = ObjectType;
  return -[UIGestureRecognizer shouldRequireFailureOfGestureRecognizer:](&v7, sel_shouldRequireFailureOfGestureRecognizer_, of);
}

Swift::Bool __swiftcall UIKitResponderGestureRecognizer.shouldBeRequiredToFail(by:)(UIGestureRecognizer *by)
{
  void *v1;
  objc_class *ObjectType;
  char v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType();
  if (swift_weakLoadStrong())
  {
    if (swift_dynamicCastClass() && swift_weakLoadStrong())
    {
      v4 = AnyGestureResponder.shouldRequireFailure(of:)();
      swift_release();
      swift_release();
      return v4 & 1;
    }
    swift_release();
  }
  v6.receiver = v1;
  v6.super_class = ObjectType;
  return -[UIGestureRecognizer shouldBeRequiredToFailByGestureRecognizer:](&v6, sel_shouldBeRequiredToFailByGestureRecognizer_, by);
}

uint64_t UIKitResponderGestureRecognizer.__ivar_destroyer()
{
  uint64_t v0;

  return outlined destroy of weak AnyGestureResponder?(v0 + OBJC_IVAR____TtC7SwiftUI31UIKitResponderGestureRecognizer_responder);
}

uint64_t type metadata accessor for UIKitResponderGestureRecognizer()
{
  return objc_opt_self();
}

void specialized UIKitResponderGestureRecognizer.responder.didset()
{
  char *v0;
  void *v1;
  char *v2;
  _QWORD *Strong;
  uint64_t v4;
  Class isa;
  uint64_t v6;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC7SwiftUI31UIKitResponderGestureRecognizer_responder];
  Strong = (_QWORD *)swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD))(*((_QWORD *)v2 + 1) + 16))(&v6, *Strong);
    swift_release();
    swift_bridgeObjectRelease();
    _GraphInputs.interfaceIdiom.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v4 = swift_allocObject();
      *(_OWORD *)(v4 + 16) = xmmword_187BFF9C0;
      *(NSNumber *)(v4 + 32) = Int._bridgeToObjectiveC()();
      v6 = v4;
      specialized Array._endMutation()();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v1, sel_setAllowedTouchTypes_, isa);

    }
  }
}

BOOL specialized UIKitResponderGestureRecognizer._gestureRecognizer(_:canBeCancelledBy:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Strong;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v15;

  swift_getObjectType();
  v3 = v1 + OBJC_IVAR____TtC7SwiftUI31UIKitResponderGestureRecognizer_responder;
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v5 = (_QWORD *)Strong;
    v6 = *(_QWORD *)(v3 + 8);
    v7 = swift_dynamicCastClass();
    if (!v7)
      goto LABEL_8;
    v8 = v7 + OBJC_IVAR____TtC7SwiftUI31UIKitResponderGestureRecognizer_responder;
    v9 = swift_weakLoadStrong();
    if (!v9
      || (v10 = (_QWORD *)v9,
          v11 = *(_QWORD *)(v8 + 8),
          (*(void (**)(char *__return_ptr, _QWORD, uint64_t))(v6 + 72))((char *)&v15 + 1, *v5, v6),
          v12 = BYTE1(v15),
          (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(v11 + 72))(&v15, *v10, v11),
          swift_release(),
          v15 != 2)
      && v12 != 2)
    {
LABEL_8:
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITapGestureRecognizer);
      if (!objc_msgSend(a1, sel_isKindOfClass_, swift_getObjCClassFromMetadata()))
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UILongPressGestureRecognizer);
        if (!objc_msgSend(a1, sel_isKindOfClass_, swift_getObjCClassFromMetadata())
          && (AnyGestureResponder.isCancellable.getter() & 1) != 0)
        {
          v13 = UIGestureRecognizer.isCancellingGesture.getter();
          swift_release();
          return v13;
        }
      }
    }
    swift_release();
  }
  return 0;
}

_QWORD *partial apply for closure #1 in UIKitResponderGestureRecognizer.name.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in UIKitResponderGestureRecognizer.name.getter(*(_QWORD *)(v1 + 16), a1);
}

void ViewRendererHost.accessibilityFocus(id:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  BOOL v16;
  char *v17;
  void *v18;
  char *v19;
  char *v20;
  unsigned __int8 v21;
  char v22;
  __int16 v23;
  unsigned __int8 v24;
  char v25;

  (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v6 = (_QWORD *)ViewGraph.subscript.getter();
  swift_release();
  if (!v6 || !*v6)
    return;
  swift_retain();
  v7 = specialized AccessibilityRelationshipScope.nodes<A>(for:with:in:)(3u, a1, a2);
  if (!(v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
      goto LABEL_5;
LABEL_35:
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_34:
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v8)
    goto LABEL_35;
LABEL_5:
  v9 = v7 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  v10 = 4;
  while (1)
  {
    if (v9)
      v11 = (char *)MEMORY[0x18D75E3BC](v10 - 4, v7);
    else
      v11 = (char *)*(id *)(v7 + 8 * v10);
    v12 = v11;
    v13 = v10 - 3;
    if (__OFADD__(v10 - 4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    v24 = 4;
    AccessibilityNode.impliedVisibility(consideringParent:with:)(1, &v24, &v25);
    if (v25 != 3)
      break;

    ++v10;
    if (v13 == v8)
    {
      v14 = 0;
      while (1)
      {
        if (v9)
        {
          v15 = (id)MEMORY[0x18D75E3BC](v14, v7);
          v16 = __OFADD__(v14++, 1);
          if (v16)
            goto LABEL_36;
        }
        else
        {
          if (v14 >= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_37;
          v15 = *(id *)(v7 + 32 + 8 * v14);
          v16 = __OFADD__(v14++, 1);
          if (v16)
          {
LABEL_36:
            __break(1u);
LABEL_37:
            __break(1u);
            return;
          }
        }
        v17 = (char *)v15;
        v21 = 4;
        v12 = v17;
        AccessibilityNode.impliedVisibility(consideringParent:with:)(1, &v21, &v22);
        if (v22 != 3)
          break;
        while (1)
        {
          v18 = (void *)MEMORY[0x18D760234](&v12[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);

          if (!v18)
            break;
          v12 = v18;
          v21 = 4;
          AccessibilityNode.impliedVisibility(consideringParent:with:)(1, &v21, &v22);
          if (v22 != 3)
            goto LABEL_31;
        }

        if (v14 == v8)
        {
          swift_release();
          swift_bridgeObjectRelease_n();
          return;
        }
      }
LABEL_31:
      swift_bridgeObjectRelease_n();

      AccessibilityNode.platformElement.getter();
      if (v19)
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  swift_bridgeObjectRelease_n();
  AccessibilityNode.platformElement.getter();
  if (v19)
    goto LABEL_27;
LABEL_26:
  v19 = v12;
LABEL_27:
  v20 = v19;
  if (one-time initialization token for focusSupportingTechnologies != -1)
    swift_once();
  v23 = static AccessibilityTechnologies.focusSupportingTechnologies;
  specialized static AccessibilityFocus.move(to:for:)(v20, &v23);

  swift_release();
}

uint64_t View.accessibilityFocusable<A>(id:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.accessibilityRelationship<A>(_:id:in:)(3, a1, a2, a3, a4, a5);
}

void AccessibilityRequestFocusAction.callAsFunction<A>(id:in:)(uint64_t a1, uint64_t a2)
{
  void (**v2)(_BYTE *, uint64_t);
  uint64_t v4;
  uint64_t v5;
  double v6;
  void (*v7)(_BYTE *, uint64_t);
  _BYTE v9[40];

  v6 = MEMORY[0x1E0C80A78](a1, a1);
  v7 = *v2;
  if (*v2)
  {
    (*(void (**)(_BYTE *, double))(v5 + 16))(&v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], v6);
    AnyHashable.init<A>(_:)();
    v7(v9, a2);
    outlined destroy of AnyHashable((uint64_t)v9);
  }
}

uint64_t EnvironmentValues.requestAccessibilityFocus.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityRequestFocusKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityRequestFocusKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityRequestFocusKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityRequestFocusKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<AccessibilityRequestFocusKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityRequestFocusKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityRequestFocusKey>);
  }
}

double key path getter for EnvironmentValues.requestAccessibilityFocus : EnvironmentValues@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityRequestFocusKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityRequestFocusKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityRequestFocusKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityRequestFocusKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.requestAccessibilityFocus : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  outlined copy of AppIntentExecutor?(*a1);
  specialized EnvironmentValues.subscript.setter(v1, v2);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

ValueMetadata *type metadata accessor for AccessibilityRequestFocusKey()
{
  return &type metadata for AccessibilityRequestFocusKey;
}

unint64_t lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityViewGraph and conformance AccessibilityViewGraph;
  if (!lazy protocol witness table cache variable for type AccessibilityViewGraph and conformance AccessibilityViewGraph)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityViewGraph, &type metadata for AccessibilityViewGraph);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityViewGraph and conformance AccessibilityViewGraph);
  }
  return result;
}

uint64_t View.accessibilityHint(_:isEnabled:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v16;

  type metadata accessor for _ContiguousArrayStorage<Text>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v14 + 32) = a1;
  *(_QWORD *)(v14 + 40) = a2;
  *(_BYTE *)(v14 + 48) = a3 & 1;
  *(_QWORD *)(v14 + 56) = a4;
  v16 = v14;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE5870], (uint64_t)&v16, a5, a6, MEMORY[0x1E0CE5870], a7);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityHint(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return View.accessibilityValue(_:isEnabled:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t))View.accessibilityHint(_:isEnabled:));
}

uint64_t View.accessibilityHint<A>(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibilityValue<A>(_:isEnabled:)(a1, a2, a3, a4, a5, a6, (void (*)(void))View.accessibilityHint(_:isEnabled:));
}

uint64_t ModifiedContent<>.accessibilityHint(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v16;

  type metadata accessor for _ContiguousArrayStorage<Text>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v14 + 32) = a1;
  *(_QWORD *)(v14 + 40) = a2;
  *(_BYTE *)(v14 + 48) = a3 & 1;
  *(_QWORD *)(v14 + 56) = a4;
  v16 = v14;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E0CE5870], (uint64_t)&v16, a5, a6, a7);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityHint(_:isEnabled:)@<X0>(char a1@<W4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = Text.init(_:tableName:bundle:comment:)();
  v8 = v7;
  v10 = v9 & 1;
  ModifiedContent<>.accessibilityHint(_:isEnabled:)(v6, v7, v9 & 1, v11, a1, a2, a3);
  outlined consume of Text.Storage(v6, v8, v10);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityHint<A>(_:isEnabled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v17;

  v7 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v9 + 16))((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v10 = Text.init<A>(_:)();
  v12 = v11;
  v14 = v13 & 1;
  ModifiedContent<>.accessibilityHint(_:isEnabled:)(v10, v11, v13 & 1, v15, a2, a3, a4);
  outlined consume of Text.Storage(v10, v12, v14);
  return swift_bridgeObjectRelease();
}

uint64_t TabContent.accessibilityHint(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;

  type metadata accessor for _ContiguousArrayStorage<Text>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v16 + 32) = a1;
  *(_QWORD *)(v16 + 40) = a2;
  *(_BYTE *)(v16 + 48) = a3 & 1;
  *(_QWORD *)(v16 + 56) = a4;
  v19 = v16;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  v17 = lazy protocol witness table accessor for type [Text] and conformance [A]();
  swift_bridgeObjectRetain();
  TabContent.accessibility<A>(_:_:isEnabled:)((uint64_t)&v19, a5, a6, MEMORY[0x1E0CE5870], a7, MEMORY[0x1E0CE5860], v17, a8);
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type [Text] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Text] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Text] and conformance [A])
  {
    type metadata accessor for _ContiguousArrayStorage<Text>(255, (unint64_t *)&lazy cache variable for type metadata for [Text], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE80E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Text] and conformance [A]);
  }
  return result;
}

uint64_t TabContent.accessibilityHint(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return View.accessibilityValue(_:isEnabled:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t))TabContent.accessibilityHint(_:isEnabled:));
}

uint64_t TabContent.accessibilityHint<A>(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibilityValue<A>(_:isEnabled:)(a1, a2, a3, a4, a5, a6, (void (*)(void))TabContent.accessibilityHint(_:isEnabled:));
}

uint64_t View.accessibilityHint(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = Text.init(_:tableName:bundle:comment:)();
  v10 = v9;
  v12 = v11 & 1;
  View.accessibilityHint(_:)(v8, v9, v11 & 1, v13, a5, a6);
  outlined consume of Text.Storage(v8, v10, v12);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityHint(_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = Text.init(_:tableName:bundle:comment:)();
  v6 = v5;
  v8 = v7 & 1;
  ModifiedContent<>.accessibilityHint(_:)(v4, v5, v7 & 1, v9, a1, a2);
  outlined consume of Text.Storage(v4, v6, v8);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityHint<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v15;

  v5 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v7 + 16))((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v8 = Text.init<A>(_:)();
  v10 = v9;
  v12 = v11 & 1;
  ModifiedContent<>.accessibilityHint(_:)(v8, v9, v11 & 1, v13, a2, a3);
  outlined consume of Text.Storage(v8, v10, v12);
  return swift_bridgeObjectRelease();
}

uint64_t sub_18716C690(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for AccessibilityDetachedPropertyModifier<AccessibilityProperties.HintsKey>(255);
  v5 = type metadata accessor for ModifiedTabContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for AccessibilityDetachedPropertyModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, v5, v7);
}

void type metadata accessor for AccessibilityDetachedPropertyModifier<AccessibilityProperties.HintsKey>(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!lazy cache variable for type metadata for AccessibilityDetachedPropertyModifier<AccessibilityProperties.HintsKey>)
  {
    v2 = lazy protocol witness table accessor for type [Text] and conformance [A]();
    v3 = type metadata accessor for AccessibilityDetachedPropertyModifier(a1, MEMORY[0x1E0CE5870], MEMORY[0x1E0CE5860], v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDetachedPropertyModifier<AccessibilityProperties.HintsKey>);
  }
}

uint64_t sub_18716C74C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[2];
  type metadata accessor for AccessibilityDetachedPropertyModifier<AccessibilityProperties.HintsKey>(255);
  v5 = type metadata accessor for ModifiedTabContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for AccessibilityDetachedPropertyModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, v5, v7);
}

uint64_t SubscriptionView.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2);
}

uint64_t SubscriptionView.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2, a1);
}

uint64_t (*SubscriptionView.content.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SubscriptionView.publisher.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t SubscriptionView.publisher.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*SubscriptionView.publisher.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void key path getter for SubscriptionView.action : <A, B>SubscriptionView<A, B>()
{
  type metadata accessor for SubscriptionView();
}

uint64_t sub_18716C884(uint64_t a1)
{
  uint64_t v1;
  uint64_t (**v2)();
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v7 = (uint64_t *)(v1 + *(int *)(a1 + 56));
  v9 = *v7;
  v8 = v7[1];
  v10 = (uint64_t (*)())swift_allocObject();
  *((_QWORD *)v10 + 2) = v3;
  *((_QWORD *)v10 + 3) = v4;
  *((_QWORD *)v10 + 4) = v5;
  *((_QWORD *)v10 + 5) = v6;
  *((_QWORD *)v10 + 6) = v9;
  *((_QWORD *)v10 + 7) = v8;
  *v2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@out ());
  v2[1] = v10;
  return swift_retain();
}

void key path setter for SubscriptionView.action : <A, B>SubscriptionView<A, B>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a4 + a3 - 32);
  v5 = *(_QWORD *)(a4 + a3 - 24);
  v6 = *(_QWORD *)(a4 + a3 - 16);
  v7 = *(_QWORD *)(a4 + a3 - 8);
  v9 = *a1;
  v8 = a1[1];
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v4;
  v10[3] = v5;
  v10[4] = v6;
  v10[5] = v7;
  v10[6] = v9;
  v10[7] = v8;
  type metadata accessor for SubscriptionView();
}

uint64_t sub_18716C948(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t (**v3)();
  uint64_t result;

  v3 = (uint64_t (**)())(v1 + *(int *)(a1 + 56));
  swift_retain();
  result = swift_release();
  *v3 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@out ());
  v3[1] = v2;
  return result;
}

uint64_t SubscriptionView.action.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 56));
  swift_retain();
  return v2;
}

uint64_t SubscriptionView.action.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 56));
  result = swift_release();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*SubscriptionView.action.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance ActionDispatcherSubscriber<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for CombineIdentifier();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

_UNKNOWN **base witness table accessor for View in SubscriptionView<A, B>()
{
  return &protocol witness table for SubscriptionView<A, B>;
}

uint64_t sub_18716CA64()
{
  return 32;
}

__n128 sub_18716CA70(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

