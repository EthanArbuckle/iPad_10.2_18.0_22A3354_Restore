void type metadata accessor for UINotificationFeedbackType(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, (unint64_t *)&lazy cache variable for type metadata for UINotificationFeedbackType);
}

void type metadata accessor for UITableViewCellSeparatorStyle(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for UITableViewCellSeparatorStyle);
}

void type metadata accessor for UITextBorderStyle(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, (unint64_t *)&lazy cache variable for type metadata for UITextBorderStyle);
}

uint64_t getEnumTagSinglePayload for AGWeakAttribute.__Unnamed_struct__details(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void sub_186F5B450()
{
  type metadata accessor for CollectionViewListRoot();
}

uint64_t sub_186F5B470()
{
  uint64_t v0;
  _QWORD v2[8];

  v0 = type metadata accessor for ModifiedContent();
  v2[0] = &protocol witness table for CollectionViewListRoot<A, B>;
  v2[1] = &protocol witness table for AccessibilityAttachmentModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v2);
}

_UNKNOWN **sub_186F5B4B8()
{
  return &protocol witness table for TableViewListCore<A, B>;
}

uint64_t base witness table accessor for Equatable in UITableViewCellSeparatorStyle()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UITableViewCellSeparatorStyle and conformance UITableViewCellSeparatorStyle, (uint64_t (*)(uint64_t))type metadata accessor for UITableViewCellSeparatorStyle, (uint64_t)&protocol conformance descriptor for UITableViewCellSeparatorStyle);
}

uint64_t base witness table accessor for RawRepresentable in UIAccessibilityTextualContext()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIAccessibilityTextualContext and conformance UIAccessibilityTextualContext, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTextualContext, (uint64_t)&protocol conformance descriptor for UIAccessibilityTextualContext);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIAccessibilityTextualContext()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIAccessibilityTextualContext and conformance UIAccessibilityTextualContext, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTextualContext, (uint64_t)&protocol conformance descriptor for UIAccessibilityTextualContext);
}

uint64_t base witness table accessor for Equatable in UIAccessibilityTextualContext()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIAccessibilityTextualContext and conformance UIAccessibilityTextualContext, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTextualContext, (uint64_t)&protocol conformance descriptor for UIAccessibilityTextualContext);
}

void type metadata accessor for UITableViewRowAnimation(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, (unint64_t *)&lazy cache variable for type metadata for UITableViewRowAnimation);
}

uint64_t View.accessibilityValue(_:isEnabled:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  _BYTE v11[48];

  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  AccessibilityValueStorage.init(description:)();
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE58A0], (uint64_t)v11, a5, a6, MEMORY[0x1E0CE58A0], a7);
  return outlined destroy of AccessibilityValueStorage?((uint64_t)v11, &lazy cache variable for type metadata for AccessibilityValueStorage?);
}

uint64_t View.accessibilityValue(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return View.accessibilityValue(_:isEnabled:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t))View.accessibilityValue(_:isEnabled:));
}

uint64_t View.accessibilityValue<A>(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibilityValue<A>(_:isEnabled:)(a1, a2, a3, a4, a5, a6, (void (*)(void))View.accessibilityValue(_:isEnabled:));
}

uint64_t ModifiedContent<>.accessibilityValue(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  unint64_t v9;
  _BYTE v11[48];

  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  AccessibilityValueStorage.init(description:)();
  v9 = lazy protocol witness table accessor for type AccessibilityValueStorage? and conformance <A> A?();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E0CE58A0], (uint64_t)v11, a4, a5, MEMORY[0x1E0CE58A0], MEMORY[0x1E0CE5890], v9, a6);
  return outlined destroy of AccessibilityValueStorage?((uint64_t)v11, &lazy cache variable for type metadata for AccessibilityValueStorage?);
}

unint64_t lazy protocol witness table accessor for type AccessibilityValueStorage? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type AccessibilityValueStorage? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AccessibilityValueStorage? and conformance <A> A?)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    v2 = MEMORY[0x1E0CE5E30];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityValueStorage? and conformance <A> A?);
  }
  return result;
}

uint64_t ModifiedContent<>.accessibilityValue(_:isEnabled:)@<X0>(char a1@<W4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = Text.init(_:tableName:bundle:comment:)();
  v8 = v7;
  v10 = v9 & 1;
  ModifiedContent<>.accessibilityValue(_:isEnabled:)(v6, v7, v9 & 1, a1, a2, a3);
  outlined consume of Text.Storage(v6, v8, v10);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityValue<A>(_:isEnabled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v16;

  v7 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v9 + 16))((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v10 = Text.init<A>(_:)();
  v12 = v11;
  v14 = v13 & 1;
  ModifiedContent<>.accessibilityValue(_:isEnabled:)(v10, v11, v13 & 1, a2, a3, a4);
  outlined consume of Text.Storage(v10, v12, v14);
  return swift_bridgeObjectRelease();
}

uint64_t TabContent.accessibilityValue(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  unint64_t v11;
  _BYTE v13[48];

  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  AccessibilityValueStorage.init(description:)();
  v11 = lazy protocol witness table accessor for type AccessibilityValueStorage? and conformance <A> A?();
  TabContent.accessibility<A>(_:_:isEnabled:)((uint64_t)v13, a4, a5, MEMORY[0x1E0CE58A0], a6, MEMORY[0x1E0CE5890], v11, a7);
  return outlined destroy of AccessibilityValueStorage?((uint64_t)v13, &lazy cache variable for type metadata for AccessibilityValueStorage?);
}

uint64_t TabContent.accessibilityValue(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return View.accessibilityValue(_:isEnabled:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t))TabContent.accessibilityValue(_:isEnabled:));
}

uint64_t View.accessibilityValue(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = Text.init(_:tableName:bundle:comment:)();
  v11 = v10;
  v13 = v12 & 1;
  a8(v9, v10);
  outlined consume of Text.Storage(v9, v11, v13);
  return swift_bridgeObjectRelease();
}

uint64_t TabContent.accessibilityValue<A>(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibilityValue<A>(_:isEnabled:)(a1, a2, a3, a4, a5, a6, (void (*)(void))TabContent.accessibilityValue(_:isEnabled:));
}

uint64_t View.accessibilityValue<A>(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v17;

  v8 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v10 + 16))((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v11 = Text.init<A>(_:)();
  v13 = v12;
  v15 = v14 & 1;
  a7();
  outlined consume of Text.Storage(v11, v13, v15);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityValue(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE v9[48];

  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  AccessibilityValueStorage.init(description:)();
  View.accessibilityValue(_:)((uint64_t)v9, a5, a6);
  return outlined destroy of AccessibilityValueStorage((uint64_t)v9);
}

uint64_t View.accessibilityValue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v6[48];

  outlined init with copy of AccessibilityValueStorage(a1, (uint64_t)v6);
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE58A0], (uint64_t)v6, 1, a2, MEMORY[0x1E0CE58A0], a3);
  return outlined destroy of AccessibilityValueStorage?((uint64_t)v6, &lazy cache variable for type metadata for AccessibilityValueStorage?);
}

{
  _BYTE v6[48];

  AccessibilityValueStorage.init<A>(_:description:)();
  View.accessibilityValue(_:)((uint64_t)v6, a2, a3);
  return outlined destroy of AccessibilityValueStorage((uint64_t)v6);
}

uint64_t outlined destroy of AccessibilityValueStorage(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE5E40] - 8) + 8))();
  return a1;
}

uint64_t View.accessibilityValue(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = Text.init(_:tableName:bundle:comment:)();
  v10 = v9;
  v12 = v11 & 1;
  View.accessibilityValue(_:)(v8, v9, v11 & 1, v13, a5, a6);
  outlined consume of Text.Storage(v8, v10, v12);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityValue<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v16;

  v6 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v8 + 16))((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v9 = Text.init<A>(_:)();
  v11 = v10;
  v13 = v12 & 1;
  View.accessibilityValue(_:)(v9, v10, v12 & 1, v14, a2, a4);
  outlined consume of Text.Storage(v9, v11, v13);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  _BYTE v8[48];

  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  AccessibilityValueStorage.init(description:)();
  ModifiedContent<>.accessibilityValue(_:)((uint64_t)v8, a4, a5);
  return outlined destroy of AccessibilityValueStorage((uint64_t)v8);
}

uint64_t ModifiedContent<>.accessibilityValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  _BYTE v7[48];

  outlined init with copy of AccessibilityValueStorage(a1, (uint64_t)v7);
  v5 = lazy protocol witness table accessor for type AccessibilityValueStorage? and conformance <A> A?();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E0CE58A0], (uint64_t)v7, 1, a2, MEMORY[0x1E0CE58A0], MEMORY[0x1E0CE5890], v5, a3);
  return outlined destroy of AccessibilityValueStorage?((uint64_t)v7, &lazy cache variable for type metadata for AccessibilityValueStorage?);
}

uint64_t ModifiedContent<>.accessibilityValue(_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = Text.init(_:tableName:bundle:comment:)();
  v6 = v5;
  v8 = v7 & 1;
  ModifiedContent<>.accessibilityValue(_:)(v4, v5, v7 & 1, a1, a2);
  outlined consume of Text.Storage(v4, v6, v8);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityValue<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v14;

  v5 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v7 + 16))((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v8 = Text.init<A>(_:)();
  v10 = v9;
  v12 = v11 & 1;
  ModifiedContent<>.accessibilityValue(_:)(v8, v9, v11 & 1, a2, a3);
  outlined consume of Text.Storage(v8, v10, v12);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityValue(percentage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  double v9;

  v9 = a4;
  v7 = 0;
  v8 = 0;
  v5 = 0x3FF0000000000000;
  v6 = 0;
  return View.accessibilityValue<A>(_:from:to:description:)((uint64_t)&v9, (uint64_t)&v7, (uint64_t)&v5, 0, 0, 0, 0, a1, a3, MEMORY[0x1E0DEB070], a2, MEMORY[0x1E0DEB0B0]);
}

uint64_t View.accessibilityValue<A>(_:from:to:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[48];

  v38 = a8;
  v32 = a2;
  v33 = a3;
  v37 = a9;
  v34 = a12;
  v35 = a7;
  v36 = a11;
  v16 = type metadata accessor for Optional();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v32 - v23;
  v27 = MEMORY[0x1E0C80A78](v25, v26);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v29 + 16))((char *)&v32 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a10, v27);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v30(v24, v32, v16);
  v30(v20, v33, v16);
  outlined copy of Text?(a4, a5, a6, v35);
  AccessibilityValueStorage.init<A>(_:from:to:description:)();
  View.accessibilityValue(_:)((uint64_t)v39, v38, v36);
  return outlined destroy of AccessibilityValueStorage((uint64_t)v39);
}

uint64_t ModifiedContent<>.accessibilityValue(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _BYTE v5[48];

  AccessibilityValueStorage.init<A>(_:description:)();
  ModifiedContent<>.accessibilityValue(_:)((uint64_t)v5, a1, a2);
  return outlined destroy of AccessibilityValueStorage((uint64_t)v5);
}

uint64_t ModifiedContent<>.accessibilityValue(percentage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  double v8;

  v8 = a3;
  v6 = 0;
  v7 = 0;
  v4 = 0x3FF0000000000000;
  v5 = 0;
  return ModifiedContent<>.accessibilityValue<A>(_:from:to:description:)((uint64_t)&v8, (uint64_t)&v6, (uint64_t)&v4, 0, 0, 0, 0, a1, a2, MEMORY[0x1E0DEB070], MEMORY[0x1E0DEB0B0]);
}

uint64_t ModifiedContent<>.accessibilityValue<A>(_:from:to:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[48];

  v37 = a8;
  v35 = a7;
  v36 = a9;
  v32 = a2;
  v33 = a3;
  v34 = a11;
  v15 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v31 - v22;
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v28 + 16))((char *)&v31 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a10, v26);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v29(v23, v32, v15);
  v29(v19, v33, v15);
  outlined copy of Text?(a4, a5, a6, v35);
  AccessibilityValueStorage.init<A>(_:from:to:description:)();
  ModifiedContent<>.accessibilityValue(_:)((uint64_t)v38, v37, v36);
  return outlined destroy of AccessibilityValueStorage((uint64_t)v38);
}

uint64_t View.accessibilityValue<A>(_:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[48];

  v25 = a8;
  v23[2] = a9;
  v24 = a6;
  v23[1] = a10;
  v16 = type metadata accessor for Optional();
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)v23 - v19;
  v21 = *(_QWORD *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))((char *)v23 - v19, a1, a7, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v20, 0, 1, a7);
  outlined copy of Text?(a2, a3, a4, a5);
  AccessibilityValueStorage.init<A>(_:description:)();
  View.accessibilityValue(_:)((uint64_t)v26, v24, v25);
  return outlined destroy of AccessibilityValueStorage((uint64_t)v26);
}

uint64_t View.accessibilityValue<A>(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(double);
  uint64_t v18;

  v12 = *(_QWORD *)(a4 - 8);
  v13 = MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16(v13);
  View.accessibilityAttachment<A>(content:_:)((uint64_t)v15, (uint64_t)closure #1 in View.accessibilityValue<A>(value:), 0, a3, a4, a5, a6, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, a4);
}

uint64_t closure #1 in View.accessibilityValue<A>(value:)(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  __int128 v17;
  _OWORD v18[2];
  __int128 v19;

  v3 = *(_QWORD *)a1;
  v2 = *(void **)(a1 + 8);
  if (!*(_BYTE *)(a1 + 16))
  {
    *(_QWORD *)&v18[0] = *(_QWORD *)a1;
    *((_QWORD *)&v18[0] + 1) = v2;
    AccessibilityAttachment.mergedProperties.getter((uint64_t *)v16);
    if (*(_QWORD *)&v16[0])
      goto LABEL_4;
LABEL_12:
    v19 = 0u;
    memset(v18, 0, sizeof(v18));
    goto LABEL_13;
  }
  if (*(_BYTE *)(a1 + 16) != 1)
    goto LABEL_12;
  v4 = swift_bridgeObjectRetain();
  v5 = specialized Sequence.compactMap<A>(_:)(v4);
  static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)((uint64_t)v5, 1, (uint64_t *)v18);
  swift_bridgeObjectRelease();
  outlined consume of AccessibilityAttachment.Tree(v3, v2, 1);
  if (!*(_QWORD *)&v18[0])
    goto LABEL_12;
LABEL_4:
  v6 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v6, v18);
  swift_bridgeObjectRelease();
  v7 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v7, (uint64_t)v16);
  swift_bridgeObjectRelease_n();
  v8 = *(_QWORD *)&v16[0];
  if (!*(_QWORD *)&v16[0])
  {
LABEL_13:
    outlined consume of AccessibilityAttachment.Tree(*(_QWORD *)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
    goto LABEL_14;
  }
  if (!*(_QWORD *)(*(_QWORD *)&v16[0] + 16))
  {
LABEL_10:
    outlined consume of AccessibilityAttachment.Tree(*(_QWORD *)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
LABEL_14:
    AccessibilityAttachment.init()();
    outlined init with copy of AccessibilityValueStorage?((uint64_t)v18, (uint64_t)v16, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v16);
    v12 = *((_QWORD *)&v13 + 1);
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 16) = 0;
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v18, &lazy cache variable for type metadata for AccessibilityValueStorage?);
  }
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v18, (uint64_t)v16, &lazy cache variable for type metadata for AccessibilityValueStorage?);
  v9 = *((_QWORD *)&v17 + 1);
  outlined destroy of AccessibilityValueStorage?((uint64_t)v16, &lazy cache variable for type metadata for AccessibilityValueStorage?);
  if (!v9)
  {
    outlined consume of AccessibilityAttachment.Tree(*(_QWORD *)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
    *(_QWORD *)&v15 = 0;
    v13 = 0u;
    v14 = 0u;
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v13, &lazy cache variable for type metadata for AnyAccessibilityValue?);
    v13 = 0u;
    v14 = 0u;
    *(_QWORD *)&v15 = 0;
    *((_QWORD *)&v15 + 1) = v8;
    memset(v16, 0, sizeof(v16));
    v17 = v15;
    outlined assign with take of AccessibilityValueStorage?((uint64_t)v16, (uint64_t)v18);
    goto LABEL_14;
  }
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v18, (uint64_t)v16, &lazy cache variable for type metadata for AccessibilityValueStorage?);
  if (!*((_QWORD *)&v17 + 1))
  {
    swift_bridgeObjectRelease();
    outlined destroy of AccessibilityValueStorage?((uint64_t)v16, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    goto LABEL_13;
  }
  result = outlined destroy of AccessibilityValueStorage?((uint64_t)v16, &lazy cache variable for type metadata for AccessibilityValueStorage?);
  if (*((_QWORD *)&v19 + 1))
  {
    v11 = *(_QWORD *)(AccessibilityValueStorage.valueDescription.getter() + 16);
    result = swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_10;
    if (*((_QWORD *)&v19 + 1))
    {
      outlined consume of AccessibilityAttachment.Tree(*(_QWORD *)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
      swift_bridgeObjectRelease();
      *((_QWORD *)&v19 + 1) = v8;
      goto LABEL_14;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t ModifiedContent<>.accessibilityValue<A>(_:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22[2];
  uint64_t v23;
  _BYTE v24[48];

  v23 = a6;
  v22[0] = a9;
  v22[1] = a8;
  v15 = type metadata accessor for Optional();
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)v22 - v18;
  v20 = *(_QWORD *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)v22 - v18, a1, a7, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, a7);
  outlined copy of Text?(a2, a3, a4, a5);
  AccessibilityValueStorage.init<A>(_:description:)();
  ModifiedContent<>.accessibilityValue(_:)((uint64_t)v24, v23, v22[0]);
  return outlined destroy of AccessibilityValueStorage((uint64_t)v24);
}

uint64_t View.accessibility(value:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibilityValue(_:)(a1, a2, a3 & 1, a4, a5, a6);
}

uint64_t ModifiedContent<>.accessibility(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return ModifiedContent<>.accessibilityValue(_:)(a1, a2, a3 & 1, a4, a5);
}

uint64_t sub_186F5CCEC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for AccessibilityDetachedPropertyModifier<AccessibilityProperties.ValueKey>(255);
  v5 = type metadata accessor for ModifiedTabContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for AccessibilityDetachedPropertyModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, v5, v7);
}

void type metadata accessor for AccessibilityDetachedPropertyModifier<AccessibilityProperties.ValueKey>(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!lazy cache variable for type metadata for AccessibilityDetachedPropertyModifier<AccessibilityProperties.ValueKey>)
  {
    v2 = lazy protocol witness table accessor for type AccessibilityValueStorage? and conformance <A> A?();
    v3 = type metadata accessor for AccessibilityDetachedPropertyModifier(a1, MEMORY[0x1E0CE58A0], MEMORY[0x1E0CE5890], v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDetachedPropertyModifier<AccessibilityProperties.ValueKey>);
  }
}

uint64_t sub_186F5CDA8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[2];
  type metadata accessor for AccessibilityDetachedPropertyModifier<AccessibilityProperties.ValueKey>(255);
  v5 = type metadata accessor for ModifiedTabContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for AccessibilityDetachedPropertyModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, v5, v7);
}

uint64_t AccessibilityValueStorage.impliedRole(for:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v2 = a1[1];
  outlined init with copy of AccessibilityValueStorage?(v1, (uint64_t)&v6, &lazy cache variable for type metadata for AnyAccessibilityValue?);
  if (v8)
  {
    AnyAccessibilityValue.type.getter();
    outlined destroy of AnyAccessibilityValue((uint64_t)&v6);
    switch(v5)
    {
      case 4:
        v6 = v3;
        v7 = v2;
        if ((AccessibilityNullableOptionSet<>.subscript.getter() & 1) != 0)
          goto LABEL_4;
        return 0;
      case 5:
        v6 = v3;
        v7 = v2;
        if ((AccessibilityNullableOptionSet<>.subscript.getter() & 1) != 0)
          return 1048577;
        v6 = v3;
        v7 = v2;
        if (AccessibilityNullableOptionSet<>.subscript.getter() != 2)
          return 0;
        v6 = v3;
        v7 = v2;
        if ((AccessibilityNullableOptionSet<>.subscript.getter() & 1) != 0)
        {
          result = 0x20000000000000;
        }
        else
        {
          v6 = v3;
          v7 = v2;
          if ((AccessibilityNullableOptionSet<>.subscript.getter() & 1) != 0)
          {
            result = 0x20000000000000;
          }
          else
          {
            v6 = v3;
            v7 = v2;
            if ((AccessibilityNullableOptionSet<>.subscript.getter() & 1) != 0)
              result = 0x20000000000001;
            else
LABEL_4:
              result = 0;
          }
        }
        break;
      case 6:
        return 4096;
      case 7:
        return 4096;
      case 8:
        AccessibilityValueStorage.isBounded.getter();
        return 0;
      default:
        return 0;
    }
  }
  else
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v6, &lazy cache variable for type metadata for AnyAccessibilityValue?);
    return 0;
  }
  return result;
}

char *specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (char *)MEMORY[0x1E0DEE9D8];
  v2 = (_BYTE *)(swift_bridgeObjectRetain() + 48);
  v3 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v4 = *((_QWORD *)v2 - 2);
    v5 = (void *)*((_QWORD *)v2 - 1);
    v6 = *v2;
    if (*v2)
    {
      if (v6 != 1)
        goto LABEL_4;
      outlined copy of AccessibilityAttachment.Tree(*((_QWORD *)v2 - 2), *((void **)v2 - 1), 1);
      v7 = swift_bridgeObjectRetain();
      v8 = specialized Sequence.compactMap<A>(_:)(v7);
      static AccessibilityAttachment.combine(_:)(v8, &v17);
      swift_bridgeObjectRelease();
      v9 = v17;
      v10 = v18;
    }
    else
    {
      outlined copy of AccessibilityAttachment.Tree(*((_QWORD *)v2 - 2), *((void **)v2 - 1), 0);
      v11 = v5;
      swift_bridgeObjectRetain_n();
      v12 = v11;
      v9 = v4;
      v10 = v5;
    }
    v17 = v9;
    v18 = v10;
    AccessibilityAttachment.mergedProperties.getter(&v19);
    outlined consume of AccessibilityAttachment?(v9, v10);
    outlined consume of AccessibilityAttachment.Tree(v4, v5, v6);
    outlined consume of AccessibilityAttachment.Tree(v4, v5, v6);
    v13 = v19;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
    v15 = *((_QWORD *)v3 + 2);
    v14 = *((_QWORD *)v3 + 3);
    if (v15 >= v14 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, v3);
    *((_QWORD *)v3 + 2) = v15 + 1;
    *(_QWORD *)&v3[8 * v15 + 32] = v13;
LABEL_4:
    v2 += 24;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  uint64_t v11;
  _OWORD v12[2];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (char *)MEMORY[0x1E0DEE9D8];
  v2 = swift_bridgeObjectRetain();
  v3 = (char *)MEMORY[0x1E0DEE9D8];
  v4 = v2 + 104;
  v5 = MEMORY[0x1E0DEE9B8];
  v6 = MEMORY[0x1E0DEE9B8] + 8;
  do
  {
    outlined init with copy of SwiftUIAnySortComparator?(v4, (uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for Any?, v6);
    if (v11)
    {
      outlined init with take of Any(&v10, v12);
      outlined init with take of Any(v12, &v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
      v8 = *((_QWORD *)v3 + 2);
      v7 = *((_QWORD *)v3 + 3);
      if (v8 >= v7 >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, v3);
      *((_QWORD *)v3 + 2) = v8 + 1;
      outlined init with take of Any(&v10, &v3[32 * v8 + 32]);
    }
    else
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for Any?, v5 + 8);
    }
    v4 += 112;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  int v5;
  char v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (char *)MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v3 = 0;
  v4 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v5 = *(unsigned __int8 *)(a1 + v3 + 32);
    if (*(_BYTE *)(a1 + v3 + 32))
    {
      if (v5 == 5)
      {
        v6 = 1;
      }
      else
      {
        if (v5 != 4)
          goto LABEL_4;
        v6 = 0;
      }
    }
    else
    {
      v6 = 2;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
    v8 = *((_QWORD *)v4 + 2);
    v7 = *((_QWORD *)v4 + 3);
    if (v8 >= v7 >> 1)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, v4);
    *((_QWORD *)v4 + 2) = v8 + 1;
    v4[v8 + 32] = v6;
LABEL_4:
    ++v3;
  }
  while (v1 != v3);
  swift_bridgeObjectRelease();
  return v4;
}

{
  uint64_t v1;
  _BYTE *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15[2];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (char *)MEMORY[0x1E0DEE9D8];
  v2 = (_BYTE *)(swift_bridgeObjectRetain() + 48);
  v3 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v4 = *((_QWORD *)v2 - 2);
    v5 = (void *)*((_QWORD *)v2 - 1);
    v6 = *v2;
    if (*v2)
    {
      if (v6 != 1)
        goto LABEL_4;
      outlined copy of AccessibilityAttachment.Tree(*((_QWORD *)v2 - 2), *((void **)v2 - 1), 1);
      v7 = swift_bridgeObjectRetain();
      v8 = specialized Sequence.compactMap<A>(_:)(v7);
      static AccessibilityAttachment.combine(_:)(v8, v15);
      swift_bridgeObjectRelease();
      v10 = v15[0];
      v9 = (id)v15[1];
    }
    else
    {
      outlined copy of AccessibilityAttachment.Tree(*((_QWORD *)v2 - 2), *((void **)v2 - 1), 0);
      v11 = v5;
      swift_bridgeObjectRetain_n();
      v9 = v11;
      v10 = v4;
    }

    outlined consume of AccessibilityAttachment.Tree(v4, v5, v6);
    outlined consume of AccessibilityAttachment.Tree(v4, v5, v6);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
    v13 = *((_QWORD *)v3 + 2);
    v12 = *((_QWORD *)v3 + 3);
    if (v13 >= v12 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v3);
    *((_QWORD *)v3 + 2) = v13 + 1;
    *(_QWORD *)&v3[8 * v13 + 32] = v10;
LABEL_4:
    v2 += 24;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  _OWORD v59[2];
  uint64_t v60;
  unsigned __int8 v61;
  _BYTE v62[56];
  uint64_t v63;

  v3 = type metadata accessor for ToolbarStorage.GroupItem(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v57 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v53 = (uint64_t)v48 - v8;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v48 - v11;
  v13 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v48 - v19;
  v50 = type metadata accessor for ToolbarStorage.Item(0);
  v49 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50, v21);
  v56 = (uint64_t)v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v48 - v25;
  v27 = *(_QWORD *)(a1 + 16);
  if (!v27)
    return (char *)MEMORY[0x1E0DEE9D8];
  v48[1] = v1;
  v28 = *(_QWORD *)(type metadata accessor for ToolbarStorage.Entry(0) - 8);
  v29 = a1 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
  v63 = *(_QWORD *)(v28 + 72);
  v51 = v12 + 16;
  v52 = v12;
  v54 = v26 + 48;
  v55 = v26;
  v48[0] = a1;
  swift_bridgeObjectRetain();
  v30 = (char *)MEMORY[0x1E0DEE9D8];
  v31 = (uint64_t)v57;
  v58 = v20;
  while (1)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v29, (uint64_t)v20, type metadata accessor for ToolbarStorage.Entry.Kind);
    if (swift_getEnumCaseMultiPayload())
      break;
    v41 = (uint64_t)v20;
    v35 = v31;
    v42 = v56;
    outlined init with take of TableCellFormula(v41, v56, type metadata accessor for ToolbarStorage.Item);
    v43 = v42;
    v44 = (uint64_t)v55;
    outlined init with take of TableCellFormula(v43, (uint64_t)v55, type metadata accessor for ToolbarStorage.Item);
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v54, (uint64_t)v59);
    v39 = v44;
    v40 = type metadata accessor for ToolbarStorage.Item;
LABEL_14:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v39, v40);
    v31 = v35;
    v20 = v58;
    if (v61 != 255)
    {
      outlined init with take of ToolbarItemPlacement.Role((uint64_t)v59, (uint64_t)v62);
      outlined init with take of ToolbarItemPlacement.Role((uint64_t)v62, (uint64_t)v59);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v30 + 2) + 1, 1, v30);
      v46 = *((_QWORD *)v30 + 2);
      v45 = *((_QWORD *)v30 + 3);
      if (v46 >= v45 >> 1)
        v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v45 > 1), v46 + 1, 1, v30);
      *((_QWORD *)v30 + 2) = v46 + 1;
      outlined init with take of ToolbarItemPlacement.Role((uint64_t)v59, (uint64_t)&v30[48 * v46 + 32]);
      v31 = (uint64_t)v57;
      goto LABEL_5;
    }
LABEL_4:
    outlined destroy of AccessibilityTableContext?((uint64_t)v59, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
LABEL_5:
    v29 += v63;
    if (!--v27)
      goto LABEL_22;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, type metadata accessor for ToolbarStorage.Entry.Kind);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v29, (uint64_t)v16, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, type metadata accessor for ToolbarStorage.Entry.Kind);
    memset(v59, 0, sizeof(v59));
    v60 = 0;
    v61 = -1;
    goto LABEL_4;
  }
  outlined init with take of TableCellFormula((uint64_t)v16, v31, type metadata accessor for ToolbarStorage.GroupItem);
  v32 = v31;
  v33 = *(_QWORD **)(v31 + 72);
  if (v33[2] != 1)
  {
LABEL_12:
    v35 = v32;
    v36 = v53;
    outlined init with take of TableCellFormula(v32, v53, type metadata accessor for ToolbarStorage.GroupItem);
    v37 = v36;
    v38 = (uint64_t)v52;
    outlined init with take of TableCellFormula(v37, (uint64_t)v52, type metadata accessor for ToolbarStorage.GroupItem);
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v51, (uint64_t)v59);
    v39 = v38;
    v40 = type metadata accessor for ToolbarStorage.GroupItem;
    goto LABEL_14;
  }
  v34 = v32;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    if (!v33[2])
      goto LABEL_21;
    goto LABEL_11;
  }
  v33 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v33);
  if (v33[2])
  {
LABEL_11:
    *((_BYTE *)v33
    + ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))
    + *(int *)(v50 + 60)) = 1;
    v32 = v34;
    *(_QWORD *)(v34 + 72) = v33;
    goto LABEL_12;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  swift_bridgeObjectRelease();
  return v30;
}

{
  uint64_t v1;
  _BYTE *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11[2];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (char *)MEMORY[0x1E0DEE9D8];
  v2 = (_BYTE *)(swift_bridgeObjectRetain() + 48);
  v3 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v5 = *((_QWORD *)v2 - 2);
    v6 = (void *)*((_QWORD *)v2 - 1);
    if (*v2)
    {
      if (*v2 != 1)
        goto LABEL_4;
      outlined copy of AccessibilityAttachment.Tree(*((_QWORD *)v2 - 2), *((void **)v2 - 1), 1);
      v7 = (_QWORD *)specialized Sequence.compactMap<A>(_:)(v5);
      static AccessibilityAttachment.combine(_:)(v7, v11);
      swift_bridgeObjectRelease();
      outlined consume of AccessibilityAttachment.Tree(v5, v6, 1);
      v5 = v11[0];
      v6 = (void *)v11[1];
    }
    else
    {
      outlined copy of AccessibilityAttachment.Tree(*((_QWORD *)v2 - 2), *((void **)v2 - 1), 0);
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
    v9 = *((_QWORD *)v3 + 2);
    v8 = *((_QWORD *)v3 + 3);
    if (v9 >= v8 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, v3);
    *((_QWORD *)v3 + 2) = v9 + 1;
    v4 = &v3[16 * v9];
    *((_QWORD *)v4 + 4) = v5;
    *((_QWORD *)v4 + 5) = v6;
LABEL_4:
    v2 += 24;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;

  v34 = *(_QWORD *)(a1 + 16);
  if (v34)
  {
    v33 = a1 + 32;
    swift_bridgeObjectRetain();
    v1 = 0;
    v31 = (char *)MEMORY[0x1E0DEE9D8];
    v32 = MEMORY[0x1E0DEE9B8] + 8;
    while (1)
    {
      v6 = (uint64_t *)(v33 + 32 * v1);
      v7 = *v6;
      v8 = (void *)v6[1];
      v9 = v6[2];
      v10 = v6[3];
      outlined copy of AccessibilityActionKind.ActionKind(*v6, (uint64_t)v8, v9, v10);
      v42 = v9;
      outlined copy of AccessibilityActionKind.ActionKind(v7, (uint64_t)v8, v9, v10);
      AccessibilityNode.attachment.getter(&v36);
      v11 = v36;

      if (*(_QWORD *)(v11 + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey),
            (v13 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(_QWORD *)(v11 + 56) + 40 * v12, (uint64_t)&v36);
        v14 = v39;
        v15 = v40;
        __swift_project_boxed_opaque_existential_1(&v36, v39);
        v16 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v15 + 8);
        swift_bridgeObjectRetain();
        v16(v41, v14, v15);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      }
      else
      {
        memset(v41, 0, sizeof(v41));
        swift_bridgeObjectRetain();
      }
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v32, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      if (swift_dynamicCast())
      {
        v17 = v36;
        swift_bridgeObjectRelease_n();
        v18 = *(_QWORD *)(v17 + 16);
        if (!v18)
          goto LABEL_3;
      }
      else
      {
        v36 = 0;
        if (one-time initialization token for defaultValue != -1)
          swift_once();
        v17 = static AccessibilityProperties.ActionsKey.defaultValue;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v18 = *(_QWORD *)(v17 + 16);
        if (!v18)
        {
LABEL_3:
          swift_bridgeObjectRelease();
          v2 = v42;
          outlined consume of AccessibilityActionKind.ActionKind(v7, (uint64_t)v8, v42, v10);
          v3 = v7;
          v4 = (uint64_t)v8;
          v5 = v2;
          goto LABEL_4;
        }
      }
      v35 = v1;
      v19 = (_QWORD *)(v17 + 32);
      swift_bridgeObjectRetain();
      while (1)
      {
        v36 = v7;
        v37 = v8;
        v38 = v42;
        v39 = v10;
        v20 = v19[3];
        v21 = v19[4];
        __swift_project_boxed_opaque_existential_1(v19, v20);
        v22 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v21 + 80);
        v23 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
        if ((v22(&v36, &type metadata for AccessibilityVoidAction, v23, v20, v21) & 1) != 0)
          break;
        v19 += 6;
        if (!--v18)
        {
          swift_bridgeObjectRelease();
          v1 = v35;
          goto LABEL_3;
        }
      }
      swift_bridgeObjectRelease_n();
      outlined consume of AccessibilityActionKind.ActionKind(v7, (uint64_t)v8, v42, v10);
      if (!v10)
      {
        v24 = 0xE800000000000000;
        v25 = 0x6574617669746361;
        v1 = v35;
        goto LABEL_26;
      }
      v1 = v35;
      if (v10 == 1)
      {
        v24 = 0xE600000000000000;
        v25 = 0x657061637365;
        goto LABEL_26;
      }
      if (v10 == 2)
      {
        v24 = 0xE800000000000000;
        v25 = 0x706154636967616DLL;
LABEL_26:
        outlined consume of AccessibilityActionKind.ActionKind(v7, (uint64_t)v8, v42, v10);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v26 = v31;
        else
          v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v31 + 2) + 1, 1, v31);
        v28 = *((_QWORD *)v26 + 2);
        v27 = *((_QWORD *)v26 + 3);
        if (v28 >= v27 >> 1)
          v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v26);
        *((_QWORD *)v26 + 2) = v28 + 1;
        v31 = v26;
        v29 = &v26[16 * v28];
        *((_QWORD *)v29 + 4) = v25;
        *((_QWORD *)v29 + 5) = v24;
        goto LABEL_5;
      }
      v3 = v7;
      v4 = (uint64_t)v8;
      v5 = v42;
LABEL_4:
      outlined consume of AccessibilityActionKind.ActionKind(v3, v4, v5, v10);
LABEL_5:
      if (++v1 == v34)
      {
        swift_bridgeObjectRelease();
        return v31;
      }
    }
  }
  return (char *)MEMORY[0x1E0DEE9D8];
}

void outlined consume of AccessibilityAttachment.Tree(uint64_t a1, void *a2, char a3)
{
  if (a3 == 1)
  {
    swift_bridgeObjectRelease();
  }
  else if (!a3)
  {
    swift_bridgeObjectRelease();

  }
}

uint64_t outlined assign with take of AccessibilityValueStorage?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for AccessibilityValueStorage?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of AccessibilityAttachment.Tree(uint64_t a1, void *a2, char a3)
{
  id v3;
  uint64_t result;

  if (a3 != 1)
  {
    if (a3)
      return result;
    v3 = a2;
  }
  return swift_bridgeObjectRetain();
}

void outlined consume of AccessibilityAttachment?(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_bridgeObjectRelease();

  }
}

uint64_t outlined destroy of AnyAccessibilityValue(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE5030] - 8) + 8))();
  return a1;
}

uint64_t outlined init with copy of AccessibilityValueStorage(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE5E40] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t type metadata completion function for CapsuleSlider.ScrollState()
{
  return swift_initClassMetadata2();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance CapsuleSlider<A>.ScrollState.Orientation()
{
  Hasher.init(_seed:)();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void CapsuleSlider.ScrollState.__deallocating_deinit()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t type metadata accessor for CapsuleSlider.ScrollState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CapsuleSlider.ScrollState);
}

uint64_t storeEnumTagSinglePayload for CapsuleSlider.ScrollState.Orientation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_186F5D4CC + 4 * byte_187BF91D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_186F5D500 + 4 * byte_187BF91D0[v4]))();
}

uint64_t sub_186F5D500(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F5D508(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186F5D510);
  return result;
}

uint64_t sub_186F5D51C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186F5D524);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_186F5D528(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F5D530(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for CapsuleSlider.ScrollState.Orientation(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

uint64_t type metadata accessor for CapsuleSlider.ScrollState.Orientation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CapsuleSlider.ScrollState.Orientation);
}

uint64_t type metadata completion function for CapsuleSlider()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CapsuleSlider(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  v7 = *(_DWORD *)(v4 + 80) & 0x100000;
  v8 = *a2;
  *a1 = *a2;
  if (v5 > 7
    || v7 != 0
    || ((((((v6 + ((v5 + 56) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 119) & 0xFFFFFFFFFFFFFFF8) + 20) & 0xFFFFFFFFFFFFFFF8)
     + 32 > 0x18)
  {
    v11 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    v11 = a1;
    v12 = a2[2];
    a1[1] = a2[1];
    a1[2] = v12;
    v13 = (_OWORD *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
    v14 = (_OWORD *)(((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *v14;
    v15 = (_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
    v16 = (_QWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = ((unint64_t)v15 + v5 + 16) & ~v5;
    v19 = ((unint64_t)v16 + v5 + 16) & ~v5;
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    v20(v18, v19, v3);
    v21 = (v6 + v18) & 0xFFFFFFFFFFFFFFF8;
    v22 = (v6 + v19) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v21 = *(_BYTE *)v22;
    *(_QWORD *)(v21 + 8) = *(_QWORD *)(v22 + 8);
    v23 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
    v24 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
    v25 = *(_QWORD *)v24;
    v26 = *(_BYTE *)(v24 + 8);
    swift_retain();
    outlined copy of Environment<Bool>.Content(v25, v26);
    *(_QWORD *)v23 = v25;
    *(_BYTE *)(v23 + 8) = v26;
    v27 = (v21 + 39) & 0xFFFFFFFFFFFFFFF8;
    v28 = (v22 + 39) & 0xFFFFFFFFFFFFFFF8;
    v29 = *(_QWORD *)v28;
    v30 = *(_BYTE *)(v28 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v28, v30);
    *(_QWORD *)v27 = v29;
    *(_BYTE *)(v27 + 8) = v30;
    v31 = (v21 + 55) & 0xFFFFFFFFFFFFFFF8;
    v32 = (v22 + 55) & 0xFFFFFFFFFFFFFFF8;
    v33 = *(_QWORD *)v32;
    v34 = *(_BYTE *)(v32 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v32, v34);
    *(_QWORD *)v31 = v33;
    *(_BYTE *)(v31 + 8) = v34;
    v35 = (v21 + 71) & 0xFFFFFFFFFFFFFFF8;
    v36 = (v22 + 71) & 0xFFFFFFFFFFFFFFF8;
    v37 = *(_QWORD *)v36;
    v38 = *(_BYTE *)(v36 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v36, v38);
    *(_QWORD *)v35 = v37;
    *(_BYTE *)(v35 + 8) = v38;
    v39 = (v21 + 87) & 0xFFFFFFFFFFFFFFF8;
    v40 = (v22 + 87) & 0xFFFFFFFFFFFFFFF8;
    v41 = *(_QWORD *)v40;
    v42 = *(_BYTE *)(v40 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v40, v42);
    *(_QWORD *)v39 = v41;
    *(_BYTE *)(v39 + 8) = v42;
    v43 = (v21 + 103) & 0xFFFFFFFFFFFFFFF8;
    v44 = (v22 + 103) & 0xFFFFFFFFFFFFFFF8;
    v45 = *(_QWORD *)v44;
    v46 = *(_BYTE *)(v44 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v44, v46);
    *(_QWORD *)v43 = v45;
    *(_BYTE *)(v43 + 8) = v46;
    v47 = (v21 + 119) & 0xFFFFFFFFFFFFFFF8;
    v48 = (v22 + 119) & 0xFFFFFFFFFFFFFFF8;
    v49 = *(_QWORD *)v48;
    v50 = *(_DWORD *)(v48 + 8);
    LOBYTE(v21) = *(_BYTE *)(v48 + 12);
    outlined copy of Environment<Material?>.Content(*(_QWORD *)v48, v50, v21);
    *(_QWORD *)v47 = v49;
    *(_DWORD *)(v47 + 8) = v50;
    *(_BYTE *)(v47 + 12) = v21;
    v51 = (_QWORD *)((v47 + 20) & 0xFFFFFFFFFFFFFFF8);
    v52 = (_QWORD *)((v48 + 20) & 0xFFFFFFFFFFFFFFF8);
    *v51 = *v52;
    v51[1] = v52[1];
    v53 = v52[3];
    v51[2] = v52[2];
    v51[3] = v53;
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v11;
}

unint64_t outlined copy of Environment<Material?>.Content(unint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return outlined copy of Material?(result);
  else
    return swift_retain();
}

uint64_t destroy for CapsuleSlider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  swift_release();
  swift_release();
  swift_release();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (((((a1 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((v6 + 23) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((v6 + 39) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v6 + 39) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((v6 + 55) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v6 + 55) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((v6 + 71) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v6 + 71) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((v6 + 87) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v6 + 87) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((v6 + 103) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v6 + 103) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Material?>.Content(*(_QWORD *)((v6 + 119) & 0xFFFFFFFFFFFFFFF8), *(unsigned int *)(((v6 + 119) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v6 + 119) & 0xFFFFFFFFFFFFFFF8) + 12));
  swift_release();
  swift_release();
  return swift_release();
}

unint64_t outlined consume of Environment<Material?>.Content(unint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return outlined consume of Material?(result);
  else
    return swift_release();
}

_QWORD *initializeWithCopy for CapsuleSlider(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = (_OWORD *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_OWORD *)(((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = (_QWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ((unint64_t)v7 + v12 + 16) & ~v12;
  v14 = ((unint64_t)v8 + v12 + 16) & ~v12;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  v15(v13, v14, v10);
  v16 = *(_QWORD *)(v11 + 64) + 7;
  v17 = (v16 + v13) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v17 = *(_BYTE *)v18;
  *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
  v19 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)v20;
  LOBYTE(v9) = *(_BYTE *)(v20 + 8);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v21, v9);
  *(_QWORD *)v19 = v21;
  *(_BYTE *)(v19 + 8) = v9;
  v22 = (v17 + 39) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v18 + 39) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)v23;
  LOBYTE(v9) = *(_BYTE *)(v23 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v23, v9);
  *(_QWORD *)v22 = v24;
  *(_BYTE *)(v22 + 8) = v9;
  v25 = (v17 + 55) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(_QWORD *)v26;
  LOBYTE(v9) = *(_BYTE *)(v26 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v26, v9);
  *(_QWORD *)v25 = v27;
  *(_BYTE *)(v25 + 8) = v9;
  v28 = (v17 + 71) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v18 + 71) & 0xFFFFFFFFFFFFFFF8;
  v30 = *(_QWORD *)v29;
  LOBYTE(v9) = *(_BYTE *)(v29 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v29, v9);
  *(_QWORD *)v28 = v30;
  *(_BYTE *)(v28 + 8) = v9;
  v31 = (v17 + 87) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v18 + 87) & 0xFFFFFFFFFFFFFFF8;
  v33 = *(_QWORD *)v32;
  LOBYTE(v9) = *(_BYTE *)(v32 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v32, v9);
  *(_QWORD *)v31 = v33;
  *(_BYTE *)(v31 + 8) = v9;
  v34 = (v17 + 103) & 0xFFFFFFFFFFFFFFF8;
  v35 = (v18 + 103) & 0xFFFFFFFFFFFFFFF8;
  v36 = *(_QWORD *)v35;
  LOBYTE(v9) = *(_BYTE *)(v35 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v35, v9);
  *(_QWORD *)v34 = v36;
  *(_BYTE *)(v34 + 8) = v9;
  v37 = (v17 + 119) & 0xFFFFFFFFFFFFFFF8;
  v38 = (v18 + 119) & 0xFFFFFFFFFFFFFFF8;
  v39 = *(_QWORD *)v38;
  LODWORD(v9) = *(_DWORD *)(v38 + 8);
  LOBYTE(v17) = *(_BYTE *)(v38 + 12);
  outlined copy of Environment<Material?>.Content(*(_QWORD *)v38, v9, v17);
  *(_QWORD *)v37 = v39;
  *(_DWORD *)(v37 + 8) = v9;
  *(_BYTE *)(v37 + 12) = v17;
  v40 = (_QWORD *)((v37 + 20) & 0xFFFFFFFFFFFFFFF8);
  v41 = (_QWORD *)((v38 + 20) & 0xFFFFFFFFFFFFFFF8);
  *v40 = *v41;
  v40[1] = v41[1];
  v42 = v41[3];
  v40[2] = v41[2];
  v40[3] = v42;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for CapsuleSlider(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  v6 = (_QWORD *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v6[1] = v7[1];
  v8 = (_QWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ((unint64_t)v8 + v12 + 16) & ~v12;
  v14 = ((unint64_t)v9 + v12 + 16) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 24))(v13, v14);
  v15 = *(_QWORD *)(v11 + 64) + 7;
  v16 = (v15 + v13) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + v14) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v16 = *(_BYTE *)v17;
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  swift_retain();
  swift_release();
  v18 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)v19;
  LOBYTE(v14) = *(_BYTE *)(v19 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v19, v14);
  v21 = *(_QWORD *)v18;
  v22 = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v18 = v20;
  *(_BYTE *)(v18 + 8) = v14;
  outlined consume of Environment<Bool>.Content(v21, v22);
  v23 = (v16 + 39) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v17 + 39) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)v24;
  LOBYTE(v14) = *(_BYTE *)(v24 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v24, v14);
  v26 = *(_QWORD *)v23;
  v27 = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v23 = v25;
  *(_BYTE *)(v23 + 8) = v14;
  outlined consume of Environment<Bool>.Content(v26, v27);
  v28 = (v16 + 55) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v17 + 55) & 0xFFFFFFFFFFFFFFF8;
  v30 = *(_QWORD *)v29;
  LOBYTE(v14) = *(_BYTE *)(v29 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v29, v14);
  v31 = *(_QWORD *)v28;
  v32 = *(_BYTE *)(v28 + 8);
  *(_QWORD *)v28 = v30;
  *(_BYTE *)(v28 + 8) = v14;
  outlined consume of Environment<Bool>.Content(v31, v32);
  v33 = (v16 + 71) & 0xFFFFFFFFFFFFFFF8;
  v34 = (v17 + 71) & 0xFFFFFFFFFFFFFFF8;
  v35 = *(_QWORD *)v34;
  LOBYTE(v14) = *(_BYTE *)(v34 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v34, v14);
  v36 = *(_QWORD *)v33;
  v37 = *(_BYTE *)(v33 + 8);
  *(_QWORD *)v33 = v35;
  *(_BYTE *)(v33 + 8) = v14;
  outlined consume of Environment<Bool>.Content(v36, v37);
  v38 = (v16 + 87) & 0xFFFFFFFFFFFFFFF8;
  v39 = (v17 + 87) & 0xFFFFFFFFFFFFFFF8;
  v40 = *(_QWORD *)v39;
  LOBYTE(v14) = *(_BYTE *)(v39 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v39, v14);
  v41 = *(_QWORD *)v38;
  v42 = *(_BYTE *)(v38 + 8);
  *(_QWORD *)v38 = v40;
  *(_BYTE *)(v38 + 8) = v14;
  outlined consume of Environment<Bool>.Content(v41, v42);
  v43 = (v16 + 103) & 0xFFFFFFFFFFFFFFF8;
  v44 = (v17 + 103) & 0xFFFFFFFFFFFFFFF8;
  v45 = *(_QWORD *)v44;
  LOBYTE(v14) = *(_BYTE *)(v44 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v44, v14);
  v46 = *(_QWORD *)v43;
  v47 = *(_BYTE *)(v43 + 8);
  *(_QWORD *)v43 = v45;
  *(_BYTE *)(v43 + 8) = v14;
  outlined consume of Environment<Bool>.Content(v46, v47);
  v48 = (v16 + 119) & 0xFFFFFFFFFFFFFFF8;
  v49 = (v17 + 119) & 0xFFFFFFFFFFFFFFF8;
  v50 = *(_QWORD *)v49;
  LODWORD(v14) = *(_DWORD *)(v49 + 8);
  LOBYTE(v16) = *(_BYTE *)(v49 + 12);
  outlined copy of Environment<Material?>.Content(*(_QWORD *)v49, v14, v16);
  v51 = *(_QWORD *)v48;
  v52 = *(unsigned int *)(v48 + 8);
  v53 = *(_BYTE *)(v48 + 12);
  *(_QWORD *)v48 = v50;
  *(_DWORD *)(v48 + 8) = v14;
  *(_BYTE *)(v48 + 12) = v16;
  outlined consume of Environment<Material?>.Content(v51, v52, v53);
  v54 = (_QWORD *)((v48 + 20) & 0xFFFFFFFFFFFFFFF8);
  v55 = (_QWORD *)((v49 + 20) & 0xFFFFFFFFFFFFFFF8);
  *v54 = *v55;
  swift_retain();
  swift_release();
  v54[1] = v55[1];
  swift_retain();
  swift_release();
  v56 = v55[3];
  v54[2] = v55[2];
  v54[3] = v56;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for CapsuleSlider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = (_OWORD *)((a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_OWORD *)((a2 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = (_OWORD *)(((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_OWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 16) & ~v9;
  v11 = ((unint64_t)v7 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = (_OWORD *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_OWORD *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  v15 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = v17;
  v18 = ((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v14 + 39) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v17) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v17;
  v20 = ((unint64_t)v13 + 55) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v14 + 55) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v17) = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = v17;
  v22 = ((unint64_t)v13 + 71) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v14 + 71) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v17) = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = v17;
  v24 = ((unint64_t)v13 + 87) & 0xFFFFFFFFFFFFFFF8;
  v25 = ((unint64_t)v14 + 87) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v17) = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = v17;
  v26 = ((unint64_t)v13 + 103) & 0xFFFFFFFFFFFFFFF8;
  v27 = ((unint64_t)v14 + 103) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v17) = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_BYTE *)(v26 + 8) = v17;
  v28 = (_QWORD *)(((unint64_t)v13 + 119) & 0xFFFFFFFFFFFFFFF8);
  v29 = (uint64_t *)(((unint64_t)v14 + 119) & 0xFFFFFFFFFFFFFFF8);
  v30 = *v29;
  *(_QWORD *)((char *)v28 + 5) = *(uint64_t *)((char *)v29 + 5);
  *v28 = v30;
  v31 = (_OWORD *)(((unint64_t)v28 + 20) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_OWORD *)(((unint64_t)v29 + 20) & 0xFFFFFFFFFFFFFFF8);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  return a1;
}

_QWORD *assignWithTake for CapsuleSlider(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  v6 = (_QWORD *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v6[1] = v7[1];
  v8 = (_OWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  swift_release();
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v8 + v11 + 16) & ~v11;
  v13 = ((unint64_t)v9 + v11 + 16) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v15 = *(_BYTE *)v16;
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  swift_release();
  v17 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  LOBYTE(v18) = *(_BYTE *)(v18 + 8);
  v20 = *(_QWORD *)v17;
  v21 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v17 = v19;
  *(_BYTE *)(v17 + 8) = v18;
  outlined consume of Environment<Bool>.Content(v20, v21);
  v22 = (v15 + 39) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v16 + 39) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)v23;
  LOBYTE(v23) = *(_BYTE *)(v23 + 8);
  v25 = *(_QWORD *)v22;
  v26 = *(_BYTE *)(v22 + 8);
  *(_QWORD *)v22 = v24;
  *(_BYTE *)(v22 + 8) = v23;
  outlined consume of Environment<Bool>.Content(v25, v26);
  v27 = (v15 + 55) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v16 + 55) & 0xFFFFFFFFFFFFFFF8;
  v29 = *(_QWORD *)v28;
  LOBYTE(v28) = *(_BYTE *)(v28 + 8);
  v30 = *(_QWORD *)v27;
  v31 = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v27 = v29;
  *(_BYTE *)(v27 + 8) = v28;
  outlined consume of Environment<Bool>.Content(v30, v31);
  v32 = (v15 + 71) & 0xFFFFFFFFFFFFFFF8;
  v33 = (v16 + 71) & 0xFFFFFFFFFFFFFFF8;
  v34 = *(_QWORD *)v33;
  LOBYTE(v33) = *(_BYTE *)(v33 + 8);
  v35 = *(_QWORD *)v32;
  v36 = *(_BYTE *)(v32 + 8);
  *(_QWORD *)v32 = v34;
  *(_BYTE *)(v32 + 8) = v33;
  outlined consume of Environment<Bool>.Content(v35, v36);
  v37 = (v15 + 87) & 0xFFFFFFFFFFFFFFF8;
  v38 = (v16 + 87) & 0xFFFFFFFFFFFFFFF8;
  v39 = *(_QWORD *)v38;
  LOBYTE(v38) = *(_BYTE *)(v38 + 8);
  v40 = *(_QWORD *)v37;
  v41 = *(_BYTE *)(v37 + 8);
  *(_QWORD *)v37 = v39;
  *(_BYTE *)(v37 + 8) = v38;
  outlined consume of Environment<Bool>.Content(v40, v41);
  v42 = (v15 + 103) & 0xFFFFFFFFFFFFFFF8;
  v43 = (v16 + 103) & 0xFFFFFFFFFFFFFFF8;
  v44 = *(_QWORD *)v43;
  LOBYTE(v43) = *(_BYTE *)(v43 + 8);
  v45 = *(_QWORD *)v42;
  v46 = *(_BYTE *)(v42 + 8);
  *(_QWORD *)v42 = v44;
  *(_BYTE *)(v42 + 8) = v43;
  outlined consume of Environment<Bool>.Content(v45, v46);
  v47 = (v15 + 119) & 0xFFFFFFFFFFFFFFF8;
  v48 = (v16 + 119) & 0xFFFFFFFFFFFFFFF8;
  v49 = *(_DWORD *)(v48 + 8);
  v50 = *(_BYTE *)(v48 + 12);
  v51 = *(_QWORD *)v47;
  v52 = *(unsigned int *)(v47 + 8);
  v53 = *(_BYTE *)(v47 + 12);
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *(_DWORD *)(v47 + 8) = v49;
  *(_BYTE *)(v47 + 12) = v50;
  outlined consume of Environment<Material?>.Content(v51, v52, v53);
  v54 = (v47 + 20) & 0xFFFFFFFFFFFFFFF8;
  v55 = (v48 + 20) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v54 = *(_QWORD *)v55;
  swift_release();
  *(_QWORD *)(v54 + 8) = *(_QWORD *)(v55 + 8);
  swift_release();
  *(_OWORD *)(v54 + 16) = *(_OWORD *)(v55 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CapsuleSlider(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((((((a1 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                                                                    + v7
                                                                    + 16) & ~v7);
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((((((*(_QWORD *)(v4 + 64) + ((v7 + 56) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 119) & 0xFFFFFFFFFFFFFFF8)
           + 20) & 0xFFFFFFFFFFFFFFF8)
         + 32) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_186F5E458 + 4 * byte_187BF91DA[v10]))();
  }
}

void storeEnumTagSinglePayload for CapsuleSlider(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 56) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 119) & 0xFFFFFFF8) + 20) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 56) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 119) & 0xFFFFFFF8) + 20) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((((*(_QWORD *)(v5 + 64) + ((v7 + 56) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 119) & 0xFFFFFFFFFFFFFFF8) + 20) & 0xFFFFFFFFFFFFFFF8)+ 32);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_186F5E600()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x186F5E680);
}

void sub_186F5E608(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x186F5E610);
  JUMPOUT(0x186F5E680);
}

void sub_186F5E624()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F5E680);
}

void sub_186F5E62C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F5E680);
}

void sub_186F5E634(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (a3 < 0)
      JUMPOUT(0x186F5E640);
    if (a2 < 0)
      JUMPOUT(0x186F5E674);
    *(_QWORD *)(v3 + 8) = (a2 - 1);
  }
  JUMPOUT(0x186F5E680);
}

uint64_t type metadata accessor for CapsuleSlider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CapsuleSlider);
}

void base witness table accessor for Equatable in CapsuleSlider<A>.ScrollState.Orientation()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for View.Body : View in CapsuleSlider<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_186F5E6E8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[2];
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[2];
  _QWORD v41[2];
  _QWORD v42[2];
  _QWORD v43[2];
  _QWORD v44[2];
  _QWORD v45[2];
  _QWORD v46[3];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _MaskEffect<Image>>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image, _MaskEffect<Image>>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for HStack<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>>);
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>();
  v3 = type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for ModifiedContent();
  v46[0] = v2;
  v46[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Color?>, MEMORY[0x1E0CE65C0]);
  v7 = MEMORY[0x1E0CE2E70];
  v45[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v46);
  v45[1] = MEMORY[0x1E0CE35A8];
  v44[0] = MEMORY[0x18D75FFDC](v7, v4, v45);
  v44[1] = MEMORY[0x1E0CE2BC0];
  v43[0] = MEMORY[0x18D75FFDC](v7, v5, v44);
  v43[1] = MEMORY[0x1E0CE1A80];
  MEMORY[0x18D75FFDC](v7, v6, v43);
  type metadata accessor for HStack();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v8 = type metadata accessor for TupleView();
  v9 = MEMORY[0x1E0CE7EB8];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v8);
  type metadata accessor for ZStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  v10 = type metadata accessor for TupleView();
  MEMORY[0x18D75FFDC](v9, v10);
  v11 = type metadata accessor for ZStack();
  v12 = type metadata accessor for ModifiedContent();
  type metadata accessor for AddGestureModifier<_EndedGesture<_ChangedGesture<DragGesture>>>();
  v13 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EndedGesture<_ChangedGesture<IndirectScrollGesture>>(255);
  v15 = v14;
  type metadata accessor for CapsuleSlider.ScrollState(255, v1, v2, v16);
  v17 = type metadata accessor for Optional();
  v18 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<IndirectScrollGesture>> and conformance _EndedGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EndedGesture<_ChangedGesture<IndirectScrollGesture>>, MEMORY[0x1E0CE2260]);
  v19 = type metadata accessor for GestureStateGesture(255, v15, v17, v18);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for GestureStateGesture<A, B>, v19);
  v20 = type metadata accessor for AddGestureModifier();
  v21 = type metadata accessor for ModifiedContent();
  type metadata accessor for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>>();
  v22 = type metadata accessor for ModifiedContent();
  v23 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v11);
  v24 = MEMORY[0x1E0CE35E0];
  v42[0] = v23;
  v42[1] = MEMORY[0x1E0CE35E0];
  v25 = MEMORY[0x18D75FFDC](v7, v12, v42);
  v26 = MEMORY[0x1E0CE41B8];
  v41[0] = v25;
  v41[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AddGestureModifier<_EndedGesture<_ChangedGesture<DragGesture>>> and conformance AddGestureModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for AddGestureModifier<_EndedGesture<_ChangedGesture<DragGesture>>>, MEMORY[0x1E0CE41B8]);
  v40[0] = MEMORY[0x18D75FFDC](v7, v13, v41);
  v40[1] = MEMORY[0x18D75FFDC](v26, v20);
  v39[0] = MEMORY[0x18D75FFDC](v7, v21, v40);
  v39[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>> and conformance _OverlayModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>>, MEMORY[0x1E0CE3620]);
  MEMORY[0x18D75FFDC](v7, v22, v39);
  v27 = type metadata accessor for GeometryReader();
  v28 = type metadata accessor for ModifiedContent();
  v29 = type metadata accessor for ModifiedContent();
  v30 = type metadata accessor for ModifiedContent();
  v31 = type metadata accessor for ModifiedContent();
  type metadata accessor for _ContentShapeModifier<RoundedRectangle>(255);
  v32 = type metadata accessor for ModifiedContent();
  v38[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2768], v27);
  v38[1] = v24;
  v37[0] = MEMORY[0x18D75FFDC](v7, v28, v38);
  v37[1] = MEMORY[0x1E0CE35C0];
  v36[0] = MEMORY[0x18D75FFDC](v7, v29, v37);
  v36[1] = &protocol witness table for IgnoreViewRespondersModifier;
  v35[0] = MEMORY[0x18D75FFDC](v7, v30, v36);
  v35[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v34[0] = MEMORY[0x18D75FFDC](v7, v31, v35);
  v34[1] = &protocol witness table for _ContentShapeModifier<A>;
  return MEMORY[0x18D75FFDC](v7, v32, v34);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>);
}

void type metadata accessor for ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>)
  {
    type metadata accessor for _ShapeView<Rectangle, Color>();
    type metadata accessor for _MaskEffect<Image>(255, &lazy cache variable for type metadata for _MaskEffect<Image>, MEMORY[0x1E0CE7238], MEMORY[0x1E0CE14E0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>);
  }
}

void type metadata accessor for _ShapeView<Rectangle, Color>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, Color>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    v0 = type metadata accessor for _ShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle, Color>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image, _MaskEffect<Image>>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _MaskEffect<Image>>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>, type metadata accessor for ModifiedContent<ModifiedContent<Image, _MaskEffect<Image>>, _FlexFrameLayout>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<Image, _MaskEffect<Image>>, _FlexFrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _MaskEffect<Image>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Image, _MaskEffect<Image>>);
}

void type metadata accessor for ModifiedContent<Image, _MaskEffect<Image>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Image, _MaskEffect<Image>>)
  {
    type metadata accessor for _MaskEffect<Image>(255, &lazy cache variable for type metadata for _MaskEffect<Image>, MEMORY[0x1E0CE7238], MEMORY[0x1E0CE14E0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Image, _MaskEffect<Image>>);
  }
}

void type metadata accessor for HStack<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>();
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>)
  {
    type metadata accessor for _MaskEffect<Image>(255, &lazy cache variable for type metadata for ModifiedContent<Image, _FrameLayout>, MEMORY[0x1E0CE1A90], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>);
  }
}

void type metadata accessor for _MaskEffect<Image>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, MEMORY[0x1E0CE7298]);
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for DisableAccessibilityNodesModifier);
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for _MaskEffect<Image>(255, &lazy cache variable for type metadata for ModifiedContent<Image, _FrameLayout>, MEMORY[0x1E0CE1A90], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CE2E48]);
    v2[0] = MEMORY[0x1E0CE7238];
    v2[1] = MEMORY[0x1E0CE1A80];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Color?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
  }
}

void type metadata accessor for AddGestureModifier<_EndedGesture<_ChangedGesture<DragGesture>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<_ChangedGesture<DragGesture>>>)
  {
    type metadata accessor for _EndedGesture<_ChangedGesture<DragGesture>>(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<DragGesture>> and conformance _EndedGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EndedGesture<_ChangedGesture<DragGesture>>, MEMORY[0x1E0CE2260]);
    v0 = type metadata accessor for AddGestureModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<_ChangedGesture<DragGesture>>>);
  }
}

void type metadata accessor for _EndedGesture<_ChangedGesture<DragGesture>>(uint64_t a1)
{
  type metadata accessor for _EndedGesture<_ChangedGesture<IndirectScrollGesture>>(a1, &lazy cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>, (uint64_t (*)(uint64_t))type metadata accessor for _ChangedGesture<DragGesture>, &lazy protocol witness table cache variable for type _ChangedGesture<DragGesture> and conformance _ChangedGesture<A>);
}

void type metadata accessor for _EndedGesture<_ChangedGesture<IndirectScrollGesture>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, MEMORY[0x1E0CE2F88]);
    v7 = type metadata accessor for _EndedGesture();
    if (!v8)
      atomic_store(v7, a2);
  }
}

void type metadata accessor for _ChangedGesture<DragGesture>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ChangedGesture<DragGesture>)
  {
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DragGesture.Value and conformance DragGesture.Value, type metadata accessor for DragGesture.Value, (uint64_t)&protocol conformance descriptor for DragGesture.Value);
    v0 = type metadata accessor for _ChangedGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ChangedGesture<DragGesture>);
  }
}

void type metadata accessor for _EndedGesture<_ChangedGesture<IndirectScrollGesture>>(uint64_t a1)
{
  type metadata accessor for _EndedGesture<_ChangedGesture<IndirectScrollGesture>>(a1, &lazy cache variable for type metadata for _EndedGesture<_ChangedGesture<IndirectScrollGesture>>, (uint64_t (*)(uint64_t))type metadata accessor for _ChangedGesture<IndirectScrollGesture>, &lazy protocol witness table cache variable for type _ChangedGesture<IndirectScrollGesture> and conformance _ChangedGesture<A>);
}

void type metadata accessor for _ChangedGesture<IndirectScrollGesture>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ChangedGesture<IndirectScrollGesture>)
  {
    lazy protocol witness table accessor for type IndirectScrollGesture and conformance IndirectScrollGesture();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x1E0C9BA00]);
    v0 = type metadata accessor for _ChangedGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ChangedGesture<IndirectScrollGesture>);
  }
}

unint64_t lazy protocol witness table accessor for type IndirectScrollGesture and conformance IndirectScrollGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndirectScrollGesture and conformance IndirectScrollGesture;
  if (!lazy protocol witness table cache variable for type IndirectScrollGesture and conformance IndirectScrollGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IndirectScrollGesture, &type metadata for IndirectScrollGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndirectScrollGesture and conformance IndirectScrollGesture);
  }
  return result;
}

void type metadata accessor for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for _AllowsHitTestingModifier);
    v0 = type metadata accessor for _OverlayModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, type metadata accessor for ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Image?, _OpacityEffect>);
}

void type metadata accessor for ModifiedContent<Image?, _OpacityEffect>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Image?, _OpacityEffect>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Image?, MEMORY[0x1E0CE7298], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Image?, _OpacityEffect>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE35E0]);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE2BC0]);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for AccessibilityAttachmentModifier);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE35C0]);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, lazy protocol witness table accessor for type ModifiedContent<Image?, _OpacityEffect> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE35E0]);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Image?, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Image?, _OpacityEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Image?, _OpacityEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image? and conformance <A> A?, MEMORY[0x1E0CE2BA8]);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3();
    v9[1] = a4;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Image? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type Image? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Image? and conformance <A> A?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Image?, MEMORY[0x1E0CE7298], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = MEMORY[0x1E0CE7238];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for _ContentShapeModifier<RoundedRectangle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _ContentShapeModifier<RoundedRectangle>)
  {
    v2 = lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle();
    v4 = type metadata accessor for _ContentShapeModifier(a1, MEMORY[0x1E0CE3358], v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _ContentShapeModifier<RoundedRectangle>);
  }
}

_OWORD *protocol witness for static PreferenceKey.defaultValue.getter in conformance AccessibilityLargeContentViewTree.Key@<X0>(_OWORD *a1@<X8>)
{
  __int128 v3[15];

  _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi1_((uint64_t)v3);
  return outlined init with take of AccessibilityLargeContentViewTree(v3, a1);
}

BOOL AccessibilityLargeContentViewTree.hasValue.getter()
{
  __int128 *v0;
  int Enum;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 *v6;
  __int128 *v7;
  _OWORD *v8;
  char v9;
  _OWORD v11[15];
  __int128 v12[15];
  _OWORD v13[15];
  __int128 v14[15];
  _OWORD v15[15];

  outlined init with take of AccessibilityLargeContentViewTree(v0, v14);
  outlined init with take of AccessibilityLargeContentViewTree(v14, v15);
  Enum = getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v15);
  if (!Enum)
    return *(_BYTE *)(destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v15) + 232) == 2;
  if (Enum == 1)
  {
    v2 = destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v15);
    v3 = *(_QWORD *)v2;
    v4 = *(_QWORD *)(*(_QWORD *)v2 + 16);
    if (v4)
    {
      outlined init with take of AccessibilityLargeContentViewTree(v14, v13);
      destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v13);
      swift_bridgeObjectRetain();
      outlined init with take of AccessibilityLargeContentViewTree((__int128 *)(v3 + 32), v12);
      v5 = outlined init with take of AccessibilityLargeContentViewTree(v12, v11);
      if ((AccessibilityLargeContentViewTree.hasValue.getter(v5) & 1) != 0)
      {
LABEL_8:
        outlined release of AccessibilityLargeContentViewTree((uint64_t)v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
        return 1;
      }
      v6 = (__int128 *)(v3 + 272);
      while (--v4)
      {
        v7 = v6 + 15;
        outlined init with take of AccessibilityLargeContentViewTree(v6, v12);
        v8 = outlined init with take of AccessibilityLargeContentViewTree(v12, v11);
        v9 = AccessibilityLargeContentViewTree.hasValue.getter(v8);
        v6 = v7;
        if ((v9 & 1) != 0)
          goto LABEL_8;
      }
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
    }
  }
  return 0;
}

uint64_t AccessibilityLargeContentViewTree.hitTest(at:)@<X0>(_OWORD *a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  __int128 *v3;
  int Enum;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  unint64_t i;
  _OWORD *v13;
  uint64_t result;
  uint64_t v15;
  __int128 *v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[13];
  _OWORD v43[2];
  __int128 v44[15];
  _OWORD v45[15];
  _QWORD v46[30];
  __int128 v47[15];
  _BYTE v48[202];
  _OWORD v49[13];
  _OWORD v50[2];
  _OWORD v51[15];
  __int128 v52[15];
  _OWORD v53[15];
  CGPoint v54;
  CGRect v55;

  outlined init with take of AccessibilityLargeContentViewTree(v3, v52);
  outlined init with take of AccessibilityLargeContentViewTree(v52, v53);
  Enum = getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v53);
  if (!Enum)
  {
    v15 = destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v53);
    if (*(_BYTE *)(v15 + 232) == 2)
    {
      v16 = (__int128 *)v15;
      v17 = *(double *)(v15 + 200);
      v18 = *(double *)(v15 + 208);
      v19 = *(double *)(v15 + 216);
      v20 = *(double *)(v15 + 224);
      outlined init with take of AccessibilityLargeContentViewTree(v52, v51);
      v21 = destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v51);
      outlined retain of AccessibilityLargeContentViewItem(v21);
      v55.origin.x = v17;
      v55.origin.y = v18;
      v55.size.width = v19;
      v55.size.height = v20;
      v54.x = a2;
      v54.y = a3;
      if (CGRectContainsPoint(v55, v54))
      {
        v22 = *v16;
        v23 = v16[1];
        v49[2] = v16[2];
        v49[1] = v23;
        v49[0] = v22;
        v24 = v16[3];
        v25 = v16[4];
        v26 = v16[5];
        v49[6] = v16[6];
        v49[5] = v26;
        v49[4] = v25;
        v49[3] = v24;
        v27 = v16[7];
        v28 = v16[8];
        v29 = v16[9];
        v49[10] = v16[10];
        v49[9] = v29;
        v49[8] = v28;
        v49[7] = v27;
        v30 = v16[11];
        v31 = v16[12];
        v32 = v16[13];
        *(_OWORD *)((char *)v50 + 9) = *(__int128 *)((char *)v16 + 217);
        v50[0] = v32;
        v49[12] = v31;
        v49[11] = v30;
        destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v49);
        v33 = v49;
        return outlined init with take of Image.Resolved?((uint64_t)v33, (uint64_t)a1, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewItem?, (uint64_t)&type metadata for AccessibilityLargeContentViewItem);
      }
LABEL_11:
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
    }
LABEL_12:
    _s7SwiftUI33AccessibilityLargeContentViewItemVSgWOi0_(v51);
    v33 = v51;
    return outlined init with take of Image.Resolved?((uint64_t)v33, (uint64_t)a1, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewItem?, (uint64_t)&type metadata for AccessibilityLargeContentViewItem);
  }
  if (Enum != 1)
    goto LABEL_12;
  v8 = destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v53);
  v9 = *(_QWORD *)v8;
  v10 = *(_QWORD *)(*(_QWORD *)v8 + 16);
  if (!v10)
    goto LABEL_12;
  v11 = (__int128 *)(v9 + 32);
  outlined init with take of AccessibilityLargeContentViewTree(v52, v51);
  destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v51);
  swift_bridgeObjectRetain();
  for (i = 0; ; ++i)
  {
    outlined init with take of AccessibilityLargeContentViewTree(v11, v47);
    v13 = outlined init with take of AccessibilityLargeContentViewTree(v47, v45);
    AccessibilityLargeContentViewTree.hitTest(at:)(v46, v13, a2, a3);
    outlined init with take of Image.Resolved?((uint64_t)v46, (uint64_t)v48, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewItem?, (uint64_t)&type metadata for AccessibilityLargeContentViewItem);
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewItem?);
    outlined init with take of Image.Resolved?((uint64_t)v48, (uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewItem?, (uint64_t)&type metadata for AccessibilityLargeContentViewItem);
    result = _s7SwiftUI33AccessibilityLargeContentViewItemVSgWOg((uint64_t)v49);
    if ((_DWORD)result != 1)
      break;
    if (v10 - 1 == i)
      goto LABEL_11;
    v11 += 15;
  }
  if (i >= *(_QWORD *)(v9 + 16))
  {
    __break(1u);
  }
  else
  {
    outlined init with take of AccessibilityLargeContentViewTree(v11, v44);
    v34 = outlined init with take of AccessibilityLargeContentViewTree(v44, v45);
    AccessibilityLargeContentViewTree.hitTest(at:)(v46, v34, a2, a3);
    outlined init with take of Image.Resolved?((uint64_t)v46, (uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewItem?, (uint64_t)&type metadata for AccessibilityLargeContentViewItem);
    outlined init with take of Image.Resolved?((uint64_t)v45, (uint64_t)v46, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewItem?, (uint64_t)&type metadata for AccessibilityLargeContentViewItem);
    result = _s7SwiftUI33AccessibilityLargeContentViewItemVSgWOg((uint64_t)v46);
    if ((_DWORD)result != 1)
    {
      outlined init with take of Image.Resolved?((uint64_t)v45, (uint64_t)v42, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewItem?, (uint64_t)&type metadata for AccessibilityLargeContentViewItem);
      v35 = v43[0];
      a1[12] = v42[12];
      a1[13] = v35;
      *(_OWORD *)((char *)a1 + 217) = *(_OWORD *)((char *)v43 + 9);
      v36 = v42[9];
      a1[8] = v42[8];
      a1[9] = v36;
      v37 = v42[11];
      a1[10] = v42[10];
      a1[11] = v37;
      v38 = v42[5];
      a1[4] = v42[4];
      a1[5] = v38;
      v39 = v42[7];
      a1[6] = v42[6];
      a1[7] = v39;
      v40 = v42[1];
      *a1 = v42[0];
      a1[1] = v40;
      v41 = v42[3];
      a1[2] = v42[2];
      a1[3] = v41;
      destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1);
      return outlined release of AccessibilityLargeContentViewTree((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
    }
  }
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in static AccessibilityLargeContentViewModifier._makeView(modifier:inputs:body:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type AccessibilityLargeContentViewTransform and conformance AccessibilityLargeContentViewTransform();
  return Attribute.init<A>(body:value:flags:update:)();
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityLargeContentViewModifier<A>()
{
  specialized ViewModifier<>.body(content:)();
}

uint64_t closure #1 in static ViewModifier._makeAccessibilityHitTestingModifier(modifier:inputs:outputs:)(uint64_t a1)
{
  return a1 - 1;
}

uint64_t implicit closure #1 in static ViewModifier._makeAccessibilityHitTestingModifier(modifier:inputs:outputs:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type AccessibilityLargeContentViewHitTestingTransform and conformance AccessibilityLargeContentViewHitTestingTransform();
  return Attribute.init<A>(body:value:flags:update:)();
}

_OWORD *closure #1 in AccessibilityLargeContentViewHitTestingTransform.value.getter(__int128 *a1)
{
  _OWORD *result;
  _OWORD v3[15];
  __int128 v4[15];

  result = (_OWORD *)AGGraphGetValue();
  if ((*(_BYTE *)result & 1) == 0)
  {
    outlined init with take of AccessibilityLargeContentViewTree(a1, v3);
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
    _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi1_((uint64_t)v4);
    return outlined init with take of AccessibilityLargeContentViewTree(v4, a1);
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityLargeContentViewHitTestingTransform@<X0>(_QWORD *a1@<X8>)
{
  int *v1;
  int v3;
  uint64_t v4;
  uint64_t result;

  v3 = *v1;
  v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = v3;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = partial apply for closure #1 in AccessibilityLargeContentViewHitTestingTransform.value.getter;
  *(_QWORD *)(result + 24) = v4;
  *a1 = thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ()partial apply;
  a1[1] = result;
  return result;
}

uint64_t (*AccessibilityLargeContentViewTransform.value.getter())(__int128 *a1)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  uint64_t Value;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t (*result)(__int128 *);
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD v53[3];
  __int128 v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;

  v0 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (id *)((char *)&v37 - v6);
  Value = AGGraphGetValue();
  v57 = *(_QWORD *)Value;
  v58 = *(_OWORD *)(Value + 8);
  v59 = *(_OWORD *)(Value + 24);
  v41 = *(_OWORD *)AGGraphGetValue();
  v9 = swift_retain();
  *(double *)&v10 = MEMORY[0x18D755E9C](v9);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v11, v10));
  v12 = (__int128 *)AGGraphGetValue();
  v13 = v12[1];
  v41 = *v12;
  v42 = v13;
  v14 = MEMORY[0x18D75BE3C]();
  v54 = 0uLL;
  v55 = v14;
  v56 = v15;
  *(_QWORD *)&v43 = 0;
  v41 = 0u;
  v42 = 0u;
  BYTE8(v43) = 2;
  v38 = v57;
  v39 = v58;
  v40 = v59;
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)&v41);
  AGGraphGetValue();
  v16 = swift_bridgeObjectRetain();
  PlatformItemList.mergedContentItem.getter(v16, (uint64_t)v7);
  swift_bridgeObjectRelease();
  if (!*v7)
  {
    outlined init with copy of PlatformItemList.Item((uint64_t)v7, (uint64_t)v3);
    v21 = (void *)*((_QWORD *)v3 + 72);
    if (v21)
      goto LABEL_4;
    goto LABEL_6;
  }
  v17 = objc_msgSend(*v7, sel_string);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v20 = v19;

  outlined init with copy of PlatformItemList.Item((uint64_t)v7, (uint64_t)v3);
  if (!v20)
  {
    v21 = (void *)*((_QWORD *)v3 + 72);
    if (v21)
    {
LABEL_4:
      v22 = objc_msgSend(v21, sel_string);
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v20 = v23;

      goto LABEL_7;
    }
LABEL_6:
    v18 = 0;
    v20 = 0;
  }
LABEL_7:
  outlined destroy of PlatformItemList.Item((uint64_t)v3);
  v24 = MEMORY[0x1E0CE7280];
  outlined init with take of Image.Resolved?((uint64_t)(v7 + 8), (uint64_t)&v38, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  v37 = v54;
  v25 = v55;
  v26 = v56;
  v27 = *(_BYTE *)AGGraphGetValue();
  outlined retain of Image.Resolved?((uint64_t)&v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
  outlined destroy of PlatformItemList.Item((uint64_t)v7);
  swift_release();
  *(_QWORD *)&v41 = v18;
  *((_QWORD *)&v41 + 1) = v20;
  outlined init with take of Image.Resolved?((uint64_t)&v38, (uint64_t)&v42, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v24);
  *(_OWORD *)((char *)v53 + 8) = v37;
  *((double *)&v53[1] + 1) = v25;
  *(_QWORD *)&v53[2] = v26;
  BYTE8(v53[2]) = v27;
  v28 = (_OWORD *)swift_allocObject();
  v29 = v53[1];
  v28[13] = v53[0];
  v28[14] = v29;
  *(_OWORD *)((char *)v28 + 233) = *(_OWORD *)((char *)&v53[1] + 9);
  v30 = v50;
  v28[9] = v49;
  v28[10] = v30;
  v31 = v52;
  v28[11] = v51;
  v28[12] = v31;
  v32 = v46;
  v28[5] = v45;
  v28[6] = v32;
  v33 = v48;
  v28[7] = v47;
  v28[8] = v33;
  v34 = v42;
  v28[1] = v41;
  v28[2] = v34;
  v35 = v44;
  result = partial apply for closure #1 in AccessibilityLargeContentViewTransform.value.getter;
  v28[3] = v43;
  v28[4] = v35;
  return result;
}

uint64_t closure #1 in AccessibilityLargeContentViewTransform.value.getter(__int128 *a1, __int128 *a2)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[25];
  _OWORD v19[12];
  __int128 v20[13];
  _OWORD v21[2];

  v17 = a2[12];
  *(_OWORD *)v18 = a2[13];
  *(_OWORD *)&v18[9] = *(__int128 *)((char *)a2 + 217);
  v13 = a2[8];
  v14 = a2[9];
  v15 = a2[10];
  v16 = a2[11];
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[6];
  v12 = a2[7];
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  outlined init with take of AccessibilityLargeContentViewTree(a1, v19);
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
  v20[12] = v17;
  v21[0] = *(_OWORD *)v18;
  *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)&v18[9];
  v20[8] = v13;
  v20[9] = v14;
  v20[10] = v15;
  v20[11] = v16;
  v20[4] = v9;
  v20[5] = v10;
  v20[6] = v11;
  v20[7] = v12;
  v20[0] = v5;
  v20[1] = v6;
  v20[2] = v7;
  v20[3] = v8;
  _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi_((uint64_t)v20);
  outlined init with take of AccessibilityLargeContentViewTree(v20, a1);
  return outlined retain of AccessibilityLargeContentViewItem((uint64_t)a2);
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityLargeContentViewTransform@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t (*v2)(__int128 *);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = AccessibilityLargeContentViewTransform.value.getter();
  v4 = v3;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v4;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityLargeContentViewBehavior()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityLargeContentViewBehavior()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityLargeContentViewBehavior()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityLargeContentViewBehavior@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2;

  v2 = *result;
  if (v2 >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

uint64_t EnvironmentValues.accessibilityLargeContentViewerEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues._accessibilityLargeContentViewerEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues._accessibilityLargeContentViewerEnabled.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues._accessibilityLargeContentViewerEnabled.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;

  v2 = a1 + 1;
  *a1 = v1;
  v3 = (char *)a1 + 9;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *v2 = *v3;
  return EnvironmentValues._accessibilityLargeContentViewerEnabled.modify;
}

uint64_t EnvironmentValues._accessibilityLargeContentViewerEnabled.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *((_BYTE *)a1 + 9) = *((_BYTE *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.accessibilityShowsLargeContentViewer()()
{
  return View.accessibilityShowsLargeContentViewer(_:)(2);
}

uint64_t View.accessibilityShowsLargeContentViewer(_:)(char a1)
{
  *(_BYTE *)(swift_allocObject() + 16) = a1;
  View.transformPreference<A>(_:_:)();
  return swift_release();
}

uint64_t sub_186F60A20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.accessibilityLargeContentViewerEnabled.getter, a3);
}

uint64_t sub_186F60A2C()
{
  return EnvironmentValues.accessibilityLargeContentViewerEnabled.setter();
}

uint64_t sub_186F60A50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues._accessibilityLargeContentViewerEnabled.getter, a3);
}

uint64_t keypath_getTm@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, _BYTE *a4@<X8>)
{
  uint64_t result;

  result = a3(a1, a2);
  *a4 = result & 1;
  return result;
}

uint64_t sub_186F60A98()
{
  return EnvironmentValues._accessibilityLargeContentViewerEnabled.setter();
}

uint64_t sub_186F60ABC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for AccessibilityLargeContentViewModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for AccessibilityLargeContentViewModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t sub_186F60B1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>, (uint64_t)&type metadata for AccessibilityLargeContentViewTree.Key, (uint64_t)&protocol witness table for AccessibilityLargeContentViewTree.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key> and conformance _PreferenceTransformModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>, (uint64_t)&type metadata for AccessibilityLargeContentViewTree.Key, (uint64_t)&protocol witness table for AccessibilityLargeContentViewTree.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

void *outlined copy of AccessibilityLargeContentViewTree(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,unsigned __int8 a30)
{
  int v30;
  void *result;

  v30 = a30 >> 6;
  if (v30 == 1)
    return (void *)swift_bridgeObjectRetain();
  if (!v30)
  {
    swift_bridgeObjectRetain();
    return outlined copy of Image.Resolved?(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21,
             a22,
             a23,
             a24);
  }
  return result;
}

void *outlined copy of Image.Resolved?(void *result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  id v22;

  if (a16 >> 1 != 4294967294)
  {
    outlined copy of GraphicsImage.Contents?(result, a2);
    outlined copy of AccessibilityImageLabel?(a14, a15, a16);
    v22 = a22;
    swift_unknownObjectRetain();
    return (void *)swift_retain();
  }
  return result;
}

void destroy for AccessibilityLargeContentViewTree(uint64_t a1)
{
  outlined consume of AccessibilityLargeContentViewTree(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(void **)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_BYTE *)(a1 + 232));
}

void outlined consume of Image.Resolved?(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  if (a16 >> 1 != 4294967294)
  {
    outlined consume of GraphicsImage.Contents?(a1, a2);
    outlined consume of AccessibilityImageLabel?(a14, a15, a16);
    swift_unknownObjectRelease();
    swift_release();

  }
}

uint64_t initializeWithCopy for AccessibilityLargeContentViewTree(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;

  v3 = *(void **)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a2 + 152);
  v24 = *(_QWORD *)(a2 + 160);
  v25 = *(_QWORD *)(a2 + 168);
  v26 = *(_QWORD *)(a2 + 176);
  v27 = *(void **)(a2 + 184);
  v28 = *(_QWORD *)(a2 + 192);
  v29 = *(_QWORD *)(a2 + 200);
  v30 = *(_QWORD *)(a2 + 208);
  v31 = *(_QWORD *)(a2 + 216);
  v32 = *(_QWORD *)(a2 + 224);
  v33 = *(_BYTE *)(a2 + 232);
  v9 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)a2;
  outlined copy of AccessibilityLargeContentViewTree(*(_QWORD *)a2, v11, v3, v4, v5, v6, v7, v8, v9, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v21;
  *(_QWORD *)(a1 + 144) = v22;
  *(_QWORD *)(a1 + 152) = v23;
  *(_QWORD *)(a1 + 160) = v24;
  *(_QWORD *)(a1 + 168) = v25;
  *(_QWORD *)(a1 + 176) = v26;
  *(_QWORD *)(a1 + 184) = v27;
  *(_QWORD *)(a1 + 192) = v28;
  *(_QWORD *)(a1 + 200) = v29;
  *(_QWORD *)(a1 + 208) = v30;
  *(_QWORD *)(a1 + 216) = v31;
  *(_QWORD *)(a1 + 224) = v32;
  *(_BYTE *)(a1 + 232) = v33;
  return a1;
}

uint64_t assignWithCopy for AccessibilityLargeContentViewTree(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;

  v52 = *(_QWORD *)a2;
  v53 = *(_QWORD *)(a2 + 8);
  v33 = *(_QWORD *)(a2 + 72);
  v34 = *(_QWORD *)(a2 + 80);
  v35 = *(_QWORD *)(a2 + 88);
  v36 = *(_QWORD *)(a2 + 96);
  v37 = *(_QWORD *)(a2 + 104);
  v38 = *(_QWORD *)(a2 + 112);
  v39 = *(_QWORD *)(a2 + 120);
  v40 = *(_QWORD *)(a2 + 128);
  v3 = *(_QWORD *)(a2 + 144);
  v4 = *(_QWORD *)(a2 + 152);
  v41 = *(_QWORD *)(a2 + 136);
  v42 = *(_QWORD *)(a2 + 160);
  v43 = *(_QWORD *)(a2 + 168);
  v44 = *(_QWORD *)(a2 + 176);
  v45 = *(void **)(a2 + 184);
  v46 = *(_QWORD *)(a2 + 192);
  v47 = *(_QWORD *)(a2 + 200);
  v48 = *(_QWORD *)(a2 + 208);
  v49 = *(_QWORD *)(a2 + 216);
  v50 = *(_QWORD *)(a2 + 224);
  v51 = *(_BYTE *)(a2 + 232);
  v5 = *(_QWORD *)(a2 + 64);
  v6 = *(void **)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  outlined copy of AccessibilityLargeContentViewTree(*(_QWORD *)a2, v53, v6, v7, v8, v9, v10, v11, v5, v33, v34, v35, v36, v37, v38, v39, v40, v41, v3,
    v4,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47,
    v48,
    v49,
    v50,
    v51);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v52;
  v14 = *(void **)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = v53;
  *(_QWORD *)(a1 + 16) = v6;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = v33;
  *(_QWORD *)(a1 + 80) = v34;
  *(_QWORD *)(a1 + 88) = v35;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v36;
  *(_QWORD *)(a1 + 104) = v37;
  *(_QWORD *)(a1 + 112) = v38;
  *(_QWORD *)(a1 + 120) = v39;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v40;
  *(_QWORD *)(a1 + 136) = v41;
  *(_QWORD *)(a1 + 144) = v3;
  v26 = *(_OWORD *)(a1 + 160);
  v27 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 152) = v4;
  *(_QWORD *)(a1 + 160) = v42;
  *(_QWORD *)(a1 + 168) = v43;
  *(_QWORD *)(a1 + 176) = v44;
  *(_QWORD *)(a1 + 184) = v45;
  v28 = *(_OWORD *)(a1 + 192);
  v29 = *(_OWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 192) = v46;
  *(_QWORD *)(a1 + 200) = v47;
  *(_QWORD *)(a1 + 208) = v48;
  *(_QWORD *)(a1 + 216) = v49;
  v30 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v50;
  v31 = *(_BYTE *)(a1 + 232);
  *(_BYTE *)(a1 + 232) = v51;
  outlined consume of AccessibilityLargeContentViewTree(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((unint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((void **)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    v31);
  return a1;
}

__n128 __swift_memcpy233_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[13];
  *(_OWORD *)(a1 + 217) = *(__int128 *)((char *)a2 + 217);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for AccessibilityLargeContentViewTree(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unsigned __int8 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v4 = *(_QWORD *)(a2 + 224);
  v5 = *(_BYTE *)(a2 + 232);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(void **)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_OWORD *)(a1 + 64);
  v15 = *(_OWORD *)(a1 + 80);
  v16 = *(_OWORD *)(a1 + 96);
  v17 = *(_OWORD *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 128);
  v19 = *(_OWORD *)(a1 + 144);
  v20 = *(_OWORD *)(a1 + 160);
  v21 = *(_OWORD *)(a1 + 176);
  v22 = *(_OWORD *)(a1 + 192);
  v23 = *(_OWORD *)(a1 + 208);
  v24 = *(_QWORD *)(a1 + 224);
  v25 = *(_BYTE *)(a1 + 232);
  v26 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v26;
  v27 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v27;
  v28 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v28;
  v29 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v29;
  v30 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v30;
  v31 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v31;
  v32 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v32;
  *(_QWORD *)(a1 + 224) = v4;
  *(_BYTE *)(a1 + 232) = v5;
  outlined consume of AccessibilityLargeContentViewTree(v6, v7, v8, v9, v10, v11, v12, v13, v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18, *((unint64_t *)&v18 + 1), v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((void **)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityLargeContentViewTree(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 233))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_DWORD *)(a1 + 195);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for AccessibilityLargeContentViewTree(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 232) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 233) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 160) = 0u;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 192) = (unint64_t)-a2 << 24;
      *(_OWORD *)(a1 + 200) = 0u;
      *(_OWORD *)(a1 + 216) = 0u;
      *(_BYTE *)(a1 + 232) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 233) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for AccessibilityLargeContentViewTree(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 232);
  v2 = (char)v1;
  v3 = v1 >> 6;
  if (v2 >= 0)
    return v3;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveProjectEnumData for AccessibilityLargeContentViewTree(uint64_t result)
{
  *(_BYTE *)(result + 232) &= 0x3Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for AccessibilityLargeContentViewTree(uint64_t result, unsigned int a2)
{
  char v2;

  if (a2 < 2)
  {
    v2 = *(_BYTE *)(result + 232) & 3 | ((_BYTE)a2 << 6);
    *(_QWORD *)(result + 192) &= 0xFFFFFFuLL;
    *(_BYTE *)(result + 232) = v2;
  }
  else
  {
    *(_QWORD *)result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_BYTE *)(result + 232) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityLargeContentViewTree()
{
  return &type metadata for AccessibilityLargeContentViewTree;
}

ValueMetadata *type metadata accessor for AccessibilityLargeContentViewTree.Key()
{
  return &type metadata for AccessibilityLargeContentViewTree.Key;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityLargeContentViewModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = ~v5;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 1) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 + 16) & v6));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 1) & v6, ((unint64_t)a2 + v5 + 1) & v6);
  }
  return v3;
}

_BYTE *initializeWithTake for AccessibilityLargeContentViewModifier(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *assignWithTake for AccessibilityLargeContentViewModifier(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityLargeContentViewModifier(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFD)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 1) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)&a1[v9];
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9])
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFD)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v7 + 1] & ~v7);
      v15 = *a1;
      if (v15 >= 3)
        return v15 - 2;
      else
        return 0;
    }
  }
  v11 = a1[v9];
  if (!a1[v9])
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_186F617DC + 4 * byte_187BF93DC[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for AccessibilityLargeContentViewModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFDu)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

ValueMetadata *type metadata accessor for AccessibilityLargeContentViewerKey()
{
  return &type metadata for AccessibilityLargeContentViewerKey;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityLargeContentViewModifier<A>()
{
  return &protocol witness table for AccessibilityLargeContentViewModifier<A>;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityLargeContentViewModifier<A>()
{
  return MEMORY[0x1E0CE83E0];
}

uint64_t modify #1 <A>(_:) in closure #1 in View.accessibilityShowsLargeContentViewer(_:)(__int128 *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[11];
  __int128 v15;
  _BYTE v16[25];
  __int128 v17[13];
  _OWORD v18[2];
  __int128 v19[15];
  _OWORD v20[15];

  outlined init with take of AccessibilityLargeContentViewTree(a1, v19);
  outlined init with take of AccessibilityLargeContentViewTree(v19, v20);
  result = getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v20);
  if (!(_DWORD)result)
  {
    result = destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v20);
    if (a2 == 1)
      return result;
    v10 = *(_QWORD *)(result + 200);
    v11 = *(_QWORD *)(result + 224);
    v12 = *(_OWORD *)(result + 208);
    v13 = *(_OWORD *)result;
    outlined init with take of Image.Resolved?(result + 16, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
    *((_QWORD *)&v15 + 1) = v10;
    *(_OWORD *)v16 = v12;
    *(_QWORD *)&v16[16] = v11;
    v16[24] = a2;
    v17[8] = v14[7];
    v17[9] = v14[8];
    v17[10] = v14[9];
    v17[11] = v14[10];
    v17[4] = v14[3];
    v17[5] = v14[4];
    v17[6] = v14[5];
    v17[7] = v14[6];
    v17[0] = v13;
    v17[1] = v14[0];
    v17[2] = v14[1];
    v17[3] = v14[2];
    v17[12] = v15;
    v18[0] = v12;
    *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)&v16[9];
    _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi_((uint64_t)v17);
    return (uint64_t)outlined init with take of AccessibilityLargeContentViewTree(v17, a1);
  }
  if ((_DWORD)result != 1)
    return result;
  v5 = destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v20);
  v6 = *(_QWORD *)v5;
  v7 = *(_QWORD *)(*(_QWORD *)v5 + 16);
  if (!v7)
  {
LABEL_12:
    *(_QWORD *)&v17[0] = v6;
    _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi0_((uint64_t)v17);
    return (uint64_t)outlined init with take of AccessibilityLargeContentViewTree(v17, a1);
  }
  v8 = 0;
  v9 = 32;
  while (1)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
      v6 = result;
    }
    if (v8 >= *(_QWORD *)(v6 + 16))
      break;
    ++v8;
    modify #1 <A>(_:) in closure #1 in View.accessibilityShowsLargeContentViewer(_:)(v6 + v9, a2);
    v9 += 240;
    if (v7 == v8)
      goto LABEL_12;
  }
  __break(1u);
  return result;
}

_OWORD *outlined init with take of AccessibilityLargeContentViewTree(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[6];
  a2[5] = a1[5];
  a2[6] = v6;
  a2[3] = v4;
  a2[4] = v5;
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[10];
  a2[9] = a1[9];
  a2[10] = v9;
  a2[7] = v7;
  a2[8] = v8;
  v10 = a1[11];
  v11 = a1[12];
  v12 = a1[13];
  *(_OWORD *)((char *)a2 + 217) = *(__int128 *)((char *)a1 + 217);
  a2[12] = v11;
  a2[13] = v12;
  a2[11] = v10;
  return a2;
}

uint64_t specialized static IndirectOptional<A>.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  char v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[4];
  _OWORD v9[4];

  v2 = (a1 | a2) == 0;
  if (a1 && a2)
  {
    v3 = *(_OWORD *)(a1 + 32);
    v9[0] = *(_OWORD *)(a1 + 16);
    v9[1] = v3;
    v4 = *(_OWORD *)(a1 + 64);
    v9[2] = *(_OWORD *)(a1 + 48);
    v9[3] = v4;
    v5 = *(_OWORD *)(a2 + 32);
    v8[0] = *(_OWORD *)(a2 + 16);
    v8[1] = v5;
    v6 = *(_OWORD *)(a2 + 64);
    v8[2] = *(_OWORD *)(a2 + 48);
    v8[3] = v6;
    v2 = MEMORY[0x18D75B740](v9, v8);
  }
  return v2 & 1;
}

uint64_t _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi0_(uint64_t result)
{
  char v1;

  v1 = *(_BYTE *)(result + 232);
  *(_QWORD *)(result + 192) &= 0xFFFFFFuLL;
  *(_BYTE *)(result + 232) = v1 & 3 | 0x40;
  return result;
}

uint64_t _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi_(uint64_t result)
{
  char v1;

  v1 = *(_BYTE *)(result + 232) & 3;
  *(_QWORD *)(result + 192) &= 0xFFFFFFuLL;
  *(_BYTE *)(result + 232) = v1;
  return result;
}

uint64_t specialized static Image.Resolved.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  float v31;
  __int16 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  char v36;
  char v38;
  char v39;
  char v40;
  __int16 v41;
  uint64_t v42;
  char v43;
  __int16 v44;
  uint64_t v45;
  int v46;
  char v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  char v60;
  __int128 v61;
  __int128 v62;
  char v63;
  char v64;
  __int16 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  char v70;
  __int128 v71;
  char v72;
  __int128 v73;
  __int128 v74;
  char v75;
  char v76;
  __int16 v77;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  v5 = *(_BYTE *)(a1 + 60);
  v6 = *(_BYTE *)(a1 + 96);
  v7 = *(_BYTE *)(a1 + 97);
  v8 = *(_WORD *)(a1 + 98);
  v10 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 112);
  v12 = *(_QWORD *)(a1 + 120);
  v11 = *(_QWORD *)(a1 + 128);
  v52 = *(_QWORD *)(a1 + 144);
  v53 = *(_QWORD *)(a1 + 136);
  v51 = *(unsigned __int8 *)(a1 + 152);
  v49 = *(unsigned __int8 *)(a1 + 153);
  v13 = *(float *)(a1 + 156);
  v47 = *(_BYTE *)(a1 + 160);
  v45 = *(_QWORD *)(a1 + 168);
  v43 = *(_BYTE *)(a1 + 178);
  v44 = *(_WORD *)(a1 + 176);
  v14 = *(_QWORD *)a2;
  v15 = *(_BYTE *)(a2 + 8);
  v16 = *(_QWORD *)(a2 + 32);
  v66 = *(_QWORD *)a1;
  v17 = *(_BYTE *)(a2 + 40);
  LOBYTE(v67) = v2;
  v18 = *(_BYTE *)(a2 + 60);
  v70 = v4;
  v19 = *(_BYTE *)(a2 + 96);
  v72 = v5;
  v20 = *(_BYTE *)(a2 + 97);
  v21 = *(_OWORD *)(a1 + 16);
  v71 = *(_OWORD *)(a1 + 44);
  v22 = *(_OWORD *)(a1 + 64);
  v23 = *(_OWORD *)(a1 + 80);
  v24 = *(_WORD *)(a2 + 98);
  v73 = v22;
  v74 = v23;
  v75 = v6;
  v26 = *(_QWORD *)(a2 + 104);
  v25 = *(_QWORD *)(a2 + 112);
  v76 = v7;
  v77 = v8;
  v28 = *(_QWORD *)(a2 + 120);
  v27 = *(_QWORD *)(a2 + 128);
  v54 = v14;
  LOBYTE(v55) = v15;
  v29 = *(_QWORD *)(a2 + 136);
  v30 = *(_QWORD *)(a2 + 144);
  v58 = v17;
  v50 = *(unsigned __int8 *)(a2 + 152);
  v60 = v18;
  v48 = *(unsigned __int8 *)(a2 + 153);
  v31 = *(float *)(a2 + 156);
  v63 = v19;
  v46 = *(unsigned __int8 *)(a2 + 160);
  v64 = v20;
  v42 = *(_QWORD *)(a2 + 168);
  v65 = v24;
  v32 = *(_WORD *)(a2 + 176);
  v68 = v21;
  v69 = v3;
  v56 = *(_OWORD *)(a2 + 16);
  v57 = v16;
  v33 = *(_OWORD *)(a2 + 64);
  v34 = *(_OWORD *)(a2 + 80);
  v40 = *(_BYTE *)(a2 + 178);
  v41 = v32;
  v59 = *(_OWORD *)(a2 + 44);
  v61 = v33;
  v62 = v34;
  if ((MEMORY[0x18D757174](&v66, &v54) & 1) == 0)
    goto LABEL_14;
  if (v12 >> 1 == 0xFFFFFFFF)
  {
    if (v28 >> 1 == 0xFFFFFFFF)
      goto LABEL_9;
LABEL_7:
    outlined copy of AccessibilityImageLabel?(v26, v25, v28);
    outlined consume of AccessibilityImageLabel?(v10, v9, v12);
    outlined consume of AccessibilityImageLabel?(v26, v25, v28);
    goto LABEL_14;
  }
  v66 = v10;
  v67 = v9;
  *(_QWORD *)&v68 = v12;
  *((_QWORD *)&v68 + 1) = v11;
  if (v28 >> 1 == 0xFFFFFFFF)
  {
    outlined copy of AccessibilityImageLabel(v10, v9, v12);
    outlined copy of AccessibilityImageLabel(v10, v9, v12);
    outlined consume of AccessibilityImageLabel(v10, v9, v12);
    goto LABEL_7;
  }
  v54 = v26;
  v55 = v25;
  *(_QWORD *)&v56 = v28;
  *((_QWORD *)&v56 + 1) = v27;
  outlined copy of AccessibilityImageLabel(v10, v9, v12);
  outlined copy of AccessibilityImageLabel(v10, v9, v12);
  v35 = MEMORY[0x18D75A210](&v66, &v54);
  outlined consume of AccessibilityImageLabel(v66, v67, v68);
  outlined consume of AccessibilityImageLabel?(v10, v9, v12);
  if ((v35 & 1) == 0)
    goto LABEL_14;
LABEL_9:
  if (!v53)
  {
    if (v29)
      goto LABEL_14;
    goto LABEL_16;
  }
  v36 = 0;
  if (v29 && v53 == v29)
  {
LABEL_16:
    v38 = specialized static IndirectOptional<A>.== infix(_:_:)(v52, v30);
    v36 = 0;
    if ((v38 & 1) == 0 || ((v51 ^ v50) & 1) != 0)
      return v36 & 1;
    if (v49 == 3)
    {
      if (v48 != 3)
        goto LABEL_14;
    }
    else
    {
      v36 = 0;
      if (v48 == 3 || v49 != v48)
        return v36 & 1;
    }
    if ((v47 & 1) == 0)
    {
      v39 = v46;
      if (v13 != v31)
        v39 = 1;
      if ((v39 & 1) != 0)
        goto LABEL_14;
LABEL_29:
      v66 = v45;
      LOWORD(v67) = v44;
      BYTE2(v67) = v43;
      v54 = v42;
      LOWORD(v55) = v41;
      BYTE2(v55) = v40;
      v36 = MEMORY[0x18D75A564](&v66, &v54);
      return v36 & 1;
    }
    if (v46)
      goto LABEL_29;
LABEL_14:
    v36 = 0;
  }
  return v36 & 1;
}

BOOL specialized static AccessibilityLargeContentViewItem.== infix(_:_:)(double *a1, double *a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  int v11;
  uint64_t v12;
  double v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  int v18;
  char v19;
  _BOOL8 result;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _OWORD v24[10];
  _BYTE v25[19];
  _OWORD v26[10];
  _BYTE v27[19];
  _OWORD v28[10];
  _OWORD v29[2];
  _OWORD v30[10];
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[19];
  _BYTE v43[184];
  uint64_t v44;
  _BYTE v45[184];
  _BYTE v46[184];
  _BYTE v47[184];
  CGRect v48;
  CGRect v49;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  v6 = MEMORY[0x1E0CE7280];
  outlined init with take of Image.Resolved?((uint64_t)(a1 + 2), (uint64_t)v46, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  v7 = a1[25];
  v8 = a1[26];
  v9 = a1[27];
  v10 = a1[28];
  v11 = *((unsigned __int8 *)a1 + 232);
  v13 = *a2;
  v12 = *((_QWORD *)a2 + 1);
  outlined init with take of Image.Resolved?((uint64_t)(a2 + 2), (uint64_t)v47, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v6);
  v14 = a2[25];
  v15 = a2[26];
  v16 = a2[27];
  v17 = a2[28];
  v18 = *((unsigned __int8 *)a2 + 232);
  if (!v5)
  {
    if (v12)
      return 0;
    goto LABEL_9;
  }
  if (!v12)
    return 0;
  if (*(_QWORD *)&v4 == *(_QWORD *)&v13 && v5 == v12
    || (v19 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v19 & 1) != 0))
  {
LABEL_9:
    outlined init with take of Image.Resolved?((uint64_t)v46, (uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
    if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v45) == 1)
    {
      outlined init with take of Image.Resolved?((uint64_t)v47, (uint64_t)v43, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
      if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v43) == 1)
      {
LABEL_16:
        v48.origin.x = v7;
        v48.origin.y = v8;
        v48.size.width = v9;
        v48.size.height = v10;
        v49.origin.x = v14;
        v49.origin.y = v15;
        v49.size.width = v16;
        v49.size.height = v17;
        result = CGRectEqualToRect(v48, v49);
        if (result)
          return v11 == v18;
        return result;
      }
LABEL_14:
      v22 = MEMORY[0x1E0CE7280];
      outlined init with take of Image.Resolved?((uint64_t)v46, (uint64_t)v43, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
      outlined init with take of Image.Resolved?((uint64_t)v47, (uint64_t)&v44, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v22);
      outlined retain of Image.Resolved?((uint64_t)v47, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
      outlined release of (Image.Resolved?, Image.Resolved?)((uint64_t)v43);
      return 0;
    }
    v21 = MEMORY[0x1E0CE7280];
    outlined init with take of Image.Resolved?((uint64_t)v46, (uint64_t)&v32, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
    outlined init with take of Image.Resolved?((uint64_t)v47, (uint64_t)v43, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v21);
    if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v43) == 1)
    {
      v28[8] = v40;
      v28[9] = v41;
      v29[0] = *(_OWORD *)v42;
      *(_DWORD *)((char *)v29 + 15) = *(_DWORD *)&v42[15];
      v28[4] = v36;
      v28[5] = v37;
      v28[6] = v38;
      v28[7] = v39;
      v28[0] = v32;
      v28[1] = v33;
      v28[2] = v34;
      v28[3] = v35;
      outlined init with take of Image.Resolved?((uint64_t)v46, (uint64_t)v30, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
      outlined retain of Image.Resolved((uint64_t)v30);
      outlined retain of Image.Resolved((uint64_t)v30);
      outlined release of Image.Resolved((uint64_t)v28);
      goto LABEL_14;
    }
    outlined init with take of Image.Resolved?((uint64_t)v47, (uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v21);
    v24[8] = v26[8];
    v24[9] = v26[9];
    *(_OWORD *)v25 = *(_OWORD *)v27;
    *(_DWORD *)&v25[15] = *(_DWORD *)&v27[15];
    v24[4] = v26[4];
    v24[5] = v26[5];
    v24[6] = v26[6];
    v24[7] = v26[7];
    v24[0] = v26[0];
    v24[1] = v26[1];
    v24[2] = v26[2];
    v24[3] = v26[3];
    outlined init with take of Image.Resolved?((uint64_t)v46, (uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v21);
    outlined retain of Image.Resolved?((uint64_t)v46, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
    outlined retain of Image.Resolved((uint64_t)v28);
    v23 = specialized static Image.Resolved.== infix(_:_:)((uint64_t)&v32, (uint64_t)v24);
    v30[8] = v40;
    v30[9] = v41;
    v31[0] = *(_OWORD *)v42;
    *(_DWORD *)((char *)v31 + 15) = *(_DWORD *)&v42[15];
    v30[4] = v36;
    v30[5] = v37;
    v30[6] = v38;
    v30[7] = v39;
    v30[0] = v32;
    v30[1] = v33;
    v30[2] = v34;
    v30[3] = v35;
    outlined release of Image.Resolved((uint64_t)v30);
    outlined retain of Image.Resolved?((uint64_t)v46, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    if ((v23 & 1) != 0)
      goto LABEL_16;
    return 0;
  }
  return result;
}

uint64_t specialized static AccessibilityLargeContentViewTree.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  int Enum;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v24[13];
  _OWORD v25[2];
  _OWORD v26[13];
  _OWORD v27[2];
  _OWORD v28[15];
  __int128 v29[15];
  __int128 v30[15];
  _OWORD v31[15];
  _OWORD v32[15];
  _OWORD v33[15];

  outlined init with take of AccessibilityLargeContentViewTree(a1, v29);
  outlined init with take of AccessibilityLargeContentViewTree(a2, v30);
  outlined init with take of AccessibilityLargeContentViewTree(v29, v31);
  outlined init with take of AccessibilityLargeContentViewTree(v30, v32);
  outlined init with take of AccessibilityLargeContentViewTree(v29, v33);
  Enum = getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v33);
  if (!Enum)
  {
    v7 = (_OWORD *)destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v33);
    outlined init with take of AccessibilityLargeContentViewTree(v30, v28);
    if (!getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v28))
    {
      v8 = (_OWORD *)destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v28);
      v9 = v7[13];
      v26[12] = v7[12];
      v27[0] = v9;
      *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)((char *)v7 + 217);
      v10 = v7[9];
      v26[8] = v7[8];
      v26[9] = v10;
      v11 = v7[11];
      v26[10] = v7[10];
      v26[11] = v11;
      v12 = v7[5];
      v26[4] = v7[4];
      v26[5] = v12;
      v13 = v7[7];
      v26[6] = v7[6];
      v26[7] = v13;
      v14 = v7[1];
      v26[0] = *v7;
      v26[1] = v14;
      v15 = v7[3];
      v26[2] = v7[2];
      v26[3] = v15;
      v16 = v8[13];
      v24[12] = v8[12];
      v25[0] = v16;
      *(_OWORD *)((char *)v25 + 9) = *(_OWORD *)((char *)v8 + 217);
      v17 = v8[9];
      v24[8] = v8[8];
      v24[9] = v17;
      v18 = v8[11];
      v24[10] = v8[10];
      v24[11] = v18;
      v19 = v8[5];
      v24[4] = v8[4];
      v24[5] = v19;
      v20 = v8[7];
      v24[6] = v8[6];
      v24[7] = v20;
      v21 = v8[1];
      v24[0] = *v8;
      v24[1] = v21;
      v22 = v8[3];
      v24[2] = v8[2];
      v24[3] = v22;
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
      v6 = specialized static AccessibilityLargeContentViewItem.== infix(_:_:)((double *)v26, (double *)v24);
      outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)((uint64_t)v31);
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
      return v6 & 1;
    }
LABEL_9:
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
    outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)((uint64_t)v31);
    v6 = 0;
    return v6 & 1;
  }
  if (Enum != 1)
  {
    outlined init with take of AccessibilityLargeContentViewTree(v30, v28);
    if (getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v28) == 2)
    {
      outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)((uint64_t)v31);
      v6 = 1;
      return v6 & 1;
    }
    goto LABEL_9;
  }
  v4 = *(_QWORD *)destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v33);
  outlined init with take of AccessibilityLargeContentViewTree(v30, v28);
  if (getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v28) != 1)
    goto LABEL_9;
  v5 = *(_QWORD *)destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v28);
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
  v6 = specialized static Array<A>.== infix(_:_:)(v4, v5);
  outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)((uint64_t)v31);
  return v6 & 1;
}

_OWORD *specialized static AccessibilityLargeContentViewTree.Key.reduce(value:nextValue:)(__int128 *a1, void (*a2)(__int128 *__return_ptr, uint64_t))
{
  uint64_t v4;
  int Enum;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD v16[30];
  _OWORD v17[15];
  _OWORD v18[15];
  __int128 v19[15];
  __int128 v20[15];
  __int128 v21[15];
  _OWORD v22[15];

  outlined init with take of AccessibilityLargeContentViewTree(a1, v20);
  v4 = outlined release of AccessibilityLargeContentViewTree((uint64_t)v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
  a2(v19, v4);
  outlined init with take of AccessibilityLargeContentViewTree(v19, v21);
  outlined init with take of AccessibilityLargeContentViewTree(v21, v22);
  if (getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v22) == 2)
    return (_OWORD *)outlined release of AccessibilityLargeContentViewTree((uint64_t)v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
  outlined init with take of AccessibilityLargeContentViewTree(v20, v18);
  Enum = getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v18);
  if (!Enum)
  {
    destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v18);
    outlined init with take of AccessibilityLargeContentViewTree(v21, v17);
    if (getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v17) == 1)
    {
      v9 = *(_QWORD *)destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v17);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityLargeContentViewTree>, (uint64_t)&type metadata for AccessibilityLargeContentViewTree, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_187BF9830;
      outlined init with take of AccessibilityLargeContentViewTree(v20, (_OWORD *)(v10 + 32));
      v16[0] = v10;
      v8 = v9;
      goto LABEL_9;
    }
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityLargeContentViewTree>, (uint64_t)&type metadata for AccessibilityLargeContentViewTree, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_187BF9820;
    outlined init with take of AccessibilityLargeContentViewTree(v20, (_OWORD *)(v7 + 32));
    outlined init with take of AccessibilityLargeContentViewTree(v21, (_OWORD *)(v7 + 272));
LABEL_17:
    v16[0] = v7;
    goto LABEL_18;
  }
  if (Enum == 1)
  {
    v7 = *(_QWORD *)destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v18);
    outlined init with take of AccessibilityLargeContentViewTree(v21, v17);
    if (getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v17) == 1)
    {
      v8 = *(_QWORD *)destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v17);
      v16[0] = v7;
LABEL_9:
      specialized Array.append<A>(contentsOf:)(v8);
LABEL_18:
      _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi0_((uint64_t)v16);
      v11 = (__int128 *)v16;
      return outlined init with take of AccessibilityLargeContentViewTree(v11, a1);
    }
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1, (char *)v7);
    v13 = *(_QWORD *)(v7 + 16);
    v12 = *(_QWORD *)(v7 + 24);
    v14 = v13 + 1;
    if (v13 >= v12 >> 1)
    {
      v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, (char *)v7);
      v14 = v13 + 1;
      v7 = (uint64_t)v15;
    }
    *(_QWORD *)(v7 + 16) = v14;
    outlined init with take of AccessibilityLargeContentViewTree(v21, (_OWORD *)(v7 + 240 * v13 + 32));
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
    goto LABEL_17;
  }
  v11 = v21;
  return outlined init with take of AccessibilityLargeContentViewTree(v11, a1);
}

uint64_t partial apply for implicit closure #1 in static AccessibilityLargeContentViewModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static AccessibilityLargeContentViewModifier._makeView(modifier:inputs:body:)();
}

uint64_t outlined destroy of PlatformItemList.Item(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_186F629BC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  int v3;

  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 152);
  v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
  if ((v1 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    v3 = *(unsigned __int8 *)(v0 + 40);
    if (v3 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(v0 + 32), v3);
      v1 = *(_QWORD *)(v0 + 152);
      v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v2 != 0x1FFFFFFFELL)
      outlined consume of AccessibilityImageLabel(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), v1);
    swift_unknownObjectRelease();
    swift_release();

  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityLargeContentViewTransform.value.getter(__int128 *a1)
{
  uint64_t v1;

  return closure #1 in AccessibilityLargeContentViewTransform.value.getter(a1, (__int128 *)(v1 + 16));
}

uint64_t outlined retain of AccessibilityLargeContentViewItem(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *v18;

  v2 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(void **)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 112);
  v12 = *(_OWORD *)(a1 + 144);
  v13 = *(_OWORD *)(a1 + 128);
  v11 = *(_OWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 176);
  v9 = *(void **)(a1 + 184);
  swift_bridgeObjectRetain();
  outlined copy of Image.Resolved?(v18, v17, v2, v3, v4, v5, v6, v7, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((unint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11,
    *((uint64_t *)&v11 + 1),
    v8,
    v9);
  return a1;
}

double _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi1_(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 224) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 232) = 0x80;
  return result;
}

uint64_t outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v2 = *(_QWORD *)(a1 + 248);
  v22 = *(_QWORD *)(a1 + 240);
  v3 = *(void **)(a1 + 256);
  v4 = *(_QWORD *)(a1 + 264);
  v5 = *(_QWORD *)(a1 + 272);
  v6 = *(_QWORD *)(a1 + 280);
  v7 = *(_QWORD *)(a1 + 288);
  v8 = *(_QWORD *)(a1 + 296);
  v20 = *(_OWORD *)(a1 + 320);
  v21 = *(_OWORD *)(a1 + 304);
  v18 = *(_OWORD *)(a1 + 352);
  v19 = *(_OWORD *)(a1 + 336);
  v16 = *(_OWORD *)(a1 + 384);
  v17 = *(_OWORD *)(a1 + 368);
  v15 = *(_OWORD *)(a1 + 400);
  v13 = *(_OWORD *)(a1 + 432);
  v14 = *(_OWORD *)(a1 + 416);
  v12 = *(_OWORD *)(a1 + 448);
  v9 = *(_QWORD *)(a1 + 464);
  v10 = *(_BYTE *)(a1 + 472);
  outlined consume of AccessibilityLargeContentViewTree(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(void **)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_BYTE *)(a1 + 232));
  outlined consume of AccessibilityLargeContentViewTree(v22, v2, v3, v4, v5, v6, v7, v8, v21, *((uint64_t *)&v21 + 1), v20, *((uint64_t *)&v20 + 1), v19, *((uint64_t *)&v19 + 1), v18, *((uint64_t *)&v18 + 1), v17, *((unint64_t *)&v17 + 1), v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((void **)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v9,
    v10);
  return a1;
}

uint64_t _s7SwiftUI5ImageVAAE8ResolvedVSgWOg(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 120) >> 1;
  v2 = -2 - v1;
  if (-2 - (int)v1 < 0)
    v2 = -1;
  if (v1 > 0x80000000)
    return (v2 + 1);
  else
    return 0;
}

uint64_t outlined release of (Image.Resolved?, Image.Resolved?)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *v18;

  v2 = *(_QWORD *)(a1 + 200);
  v17 = *(_QWORD *)(a1 + 192);
  v18 = *(void **)(a1 + 184);
  v3 = *(_QWORD *)(a1 + 208);
  v4 = *(_QWORD *)(a1 + 216);
  v5 = *(_QWORD *)(a1 + 224);
  v6 = *(_QWORD *)(a1 + 232);
  v7 = *(_QWORD *)(a1 + 240);
  v15 = *(_OWORD *)(a1 + 264);
  v16 = *(_OWORD *)(a1 + 248);
  v14 = *(_OWORD *)(a1 + 280);
  v12 = *(_OWORD *)(a1 + 312);
  v13 = *(_OWORD *)(a1 + 296);
  v11 = *(_OWORD *)(a1 + 328);
  v8 = *(_QWORD *)(a1 + 344);
  v9 = *(void **)(a1 + 352);
  outlined consume of Image.Resolved?(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(void **)(a1 + 168));
  outlined consume of Image.Resolved?(v18, v17, v2, v3, v4, v5, v6, v7, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((unint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11,
    *((uint64_t *)&v11 + 1),
    v8,
    v9);
  return a1;
}

uint64_t outlined retain of Image.Resolved(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(void **)(a1 + 168);
  outlined copy of GraphicsImage.Contents?(*(id *)a1, *(_BYTE *)(a1 + 8));
  outlined copy of AccessibilityImageLabel?(v2, v3, v4);
  v6 = v5;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

uint64_t outlined release of Image.Resolved(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(void **)(a1 + 168);
  outlined consume of GraphicsImage.Contents?(*(void **)a1, *(_BYTE *)(a1 + 8));
  outlined consume of AccessibilityImageLabel?(v2, v3, v4);
  swift_unknownObjectRelease();
  swift_release();

  return a1;
}

uint64_t outlined retain of Image.Resolved?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16));
  return a1;
}

uint64_t outlined release of AccessibilityLargeContentViewTree(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 232);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    v4);
  return a1;
}

void outlined consume of AccessibilityLargeContentViewItem?(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    outlined consume of Image.Resolved?(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21,
      a22,
      a23,
      a24);
  }
}

uint64_t _s7SwiftUI33AccessibilityLargeContentViewItemVSgWOg(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

double _s7SwiftUI33AccessibilityLargeContentViewItemVSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  *a1 = xmmword_187BF9840;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  *(_OWORD *)((char *)a1 + 217) = 0u;
  return result;
}

uint64_t sub_186F631CC()
{
  return swift_deallocObject();
}

_OWORD *partial apply for closure #1 in AccessibilityLargeContentViewHitTestingTransform.value.getter(__int128 *a1)
{
  return closure #1 in AccessibilityLargeContentViewHitTestingTransform.value.getter(a1);
}

uint64_t sub_186F631E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_186F63208()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.accessibilityShowsLargeContentViewer(_:)(__int128 *a1)
{
  uint64_t v1;

  return modify #1 <A>(_:) in closure #1 in View.accessibilityShowsLargeContentViewer(_:)(a1, *(unsigned __int8 *)(v1 + 16));
}

void *type metadata accessor for AccessibilityLargeContentViewHitTestingTransform()
{
  return &unk_1E1B0A220;
}

void *type metadata accessor for AccessibilityLargeContentViewTransform()
{
  return &unk_1E1B07BD8;
}

void destroy for AccessibilityLargeContentViewItem(uint64_t a1)
{
  uint64_t v2;
  int v3;

  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(a1 + 136);
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    v3 = *(unsigned __int8 *)(a1 + 24);
    if (v3 != 255)
      outlined consume of GraphicsImage.Contents(*(void **)(a1 + 16), v3);
    if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL)
      outlined consume of AccessibilityImageLabel(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), v2);
    swift_unknownObjectRelease();
    swift_release();

  }
}

uint64_t initializeWithCopy for AccessibilityLargeContentViewItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (_OWORD *)(a1 + 16);
  v6 = (uint64_t *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  if ((v7 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFCLL)
  {
    v8 = *((_OWORD *)v6 + 9);
    *(_OWORD *)(a1 + 144) = *((_OWORD *)v6 + 8);
    *(_OWORD *)(a1 + 160) = v8;
    *(_OWORD *)(a1 + 176) = *((_OWORD *)v6 + 10);
    *(_DWORD *)(a1 + 191) = *(_DWORD *)((char *)v6 + 175);
    v9 = *((_OWORD *)v6 + 5);
    *(_OWORD *)(a1 + 80) = *((_OWORD *)v6 + 4);
    *(_OWORD *)(a1 + 96) = v9;
    v10 = *((_OWORD *)v6 + 7);
    *(_OWORD *)(a1 + 112) = *((_OWORD *)v6 + 6);
    *(_OWORD *)(a1 + 128) = v10;
    v11 = *((_OWORD *)v6 + 1);
    *v5 = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 32) = v11;
    v12 = *((_OWORD *)v6 + 3);
    *(_OWORD *)(a1 + 48) = *((_OWORD *)v6 + 2);
    *(_OWORD *)(a1 + 64) = v12;
  }
  else
  {
    v13 = *(unsigned __int8 *)(a2 + 24);
    if (v13 == 255)
    {
      *(_QWORD *)v5 = *v6;
      *(_BYTE *)(a1 + 24) = *((_BYTE *)v6 + 8);
    }
    else
    {
      v14 = *v6;
      outlined copy of GraphicsImage.Contents((id)*v6, *(_BYTE *)(a2 + 24));
      *(_QWORD *)(a1 + 16) = v14;
      *(_BYTE *)(a1 + 24) = v13;
    }
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
    *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
    v15 = *(_OWORD *)(a2 + 80);
    v16 = *(_OWORD *)(a2 + 96);
    *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
    *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
    *(_BYTE *)(a1 + 115) = *(_BYTE *)(a2 + 115);
    *(_OWORD *)(a1 + 80) = v15;
    *(_OWORD *)(a1 + 96) = v16;
    if ((v7 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
    {
      v17 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v17;
    }
    else
    {
      v18 = *(_QWORD *)(a2 + 120);
      v19 = *(_QWORD *)(a2 + 128);
      v20 = *(_QWORD *)(a2 + 144);
      outlined copy of AccessibilityImageLabel(v18, v19, v7);
      *(_QWORD *)(a1 + 120) = v18;
      *(_QWORD *)(a1 + 128) = v19;
      *(_QWORD *)(a1 + 136) = v7;
      *(_QWORD *)(a1 + 144) = v20;
    }
    v21 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v21;
    *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
    *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
    v22 = *(void **)(a2 + 184);
    *(_QWORD *)(a1 + 184) = v22;
    *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
    *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
    swift_unknownObjectRetain();
    swift_retain();
    v23 = v22;
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  return a1;
}

uint64_t assignWithCopy for AccessibilityLargeContentViewItem(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  id *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  id v26;
  int v27;
  id v28;
  void *v29;
  char v30;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  void *v41;
  id v42;
  id v43;
  char v44;
  id v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD *v49;
  _OWORD *v50;
  uint64_t v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  void *v65;
  void *v66;
  id v67;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 16);
  v5 = (id *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 136) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a1 + 136) >> 1 == 4294967294)
  {
    if (v6 == 0x1FFFFFFFCLL)
    {
      v7 = *(_OWORD *)v5;
      v8 = *(_OWORD *)(a2 + 32);
      v9 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v9;
      *v4 = v7;
      *(_OWORD *)(a1 + 32) = v8;
      v10 = *(_OWORD *)(a2 + 80);
      v11 = *(_OWORD *)(a2 + 96);
      v12 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v12;
      *(_OWORD *)(a1 + 80) = v10;
      *(_OWORD *)(a1 + 96) = v11;
      v13 = *(_OWORD *)(a2 + 144);
      v14 = *(_OWORD *)(a2 + 160);
      v15 = *(_OWORD *)(a2 + 176);
      *(_DWORD *)(a1 + 191) = *(_DWORD *)(a2 + 191);
      *(_OWORD *)(a1 + 160) = v14;
      *(_OWORD *)(a1 + 176) = v15;
      *(_OWORD *)(a1 + 144) = v13;
    }
    else
    {
      v25 = *(unsigned __int8 *)(a2 + 24);
      if (v25 == 255)
      {
        v31 = *v5;
        *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
        *(_QWORD *)v4 = v31;
      }
      else
      {
        v26 = *v5;
        outlined copy of GraphicsImage.Contents(*v5, *(_BYTE *)(a2 + 24));
        *(_QWORD *)(a1 + 16) = v26;
        *(_BYTE *)(a1 + 24) = v25;
      }
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v32 = *(_OWORD *)(a2 + 60);
      *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
      *(_OWORD *)(a1 + 60) = v32;
      v33 = *(_OWORD *)(a2 + 80);
      v34 = *(_OWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      *(_OWORD *)(a1 + 80) = v33;
      *(_OWORD *)(a1 + 96) = v34;
      *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
      *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
      *(_BYTE *)(a1 + 115) = *(_BYTE *)(a2 + 115);
      v35 = *(_QWORD *)(a2 + 136);
      if (v35 >> 1 == 0xFFFFFFFF)
      {
        v36 = *(_OWORD *)(a2 + 136);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
        *(_OWORD *)(a1 + 136) = v36;
      }
      else
      {
        v37 = *(_QWORD *)(a2 + 120);
        v38 = *(_QWORD *)(a2 + 128);
        v39 = *(_QWORD *)(a2 + 144);
        outlined copy of AccessibilityImageLabel(v37, v38, *(_QWORD *)(a2 + 136));
        *(_QWORD *)(a1 + 120) = v37;
        *(_QWORD *)(a1 + 128) = v38;
        *(_QWORD *)(a1 + 136) = v35;
        *(_QWORD *)(a1 + 144) = v39;
      }
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
      v40 = *(_DWORD *)(a2 + 172);
      *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
      *(_DWORD *)(a1 + 172) = v40;
      v41 = *(void **)(a2 + 184);
      *(_QWORD *)(a1 + 184) = v41;
      *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
      *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
      swift_unknownObjectRetain();
      swift_retain();
      v42 = v41;
    }
  }
  else if (v6 == 0x1FFFFFFFCLL)
  {
    outlined destroy of Image.Resolved(a1 + 16);
    v16 = *(_OWORD *)(a2 + 64);
    v18 = *(_OWORD *)v5;
    v17 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v16;
    *v4 = v18;
    *(_OWORD *)(a1 + 32) = v17;
    v19 = *(_OWORD *)(a2 + 128);
    v21 = *(_OWORD *)(a2 + 80);
    v20 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v19;
    *(_OWORD *)(a1 + 80) = v21;
    *(_OWORD *)(a1 + 96) = v20;
    v23 = *(_OWORD *)(a2 + 160);
    v22 = *(_OWORD *)(a2 + 176);
    v24 = *(_OWORD *)(a2 + 144);
    *(_DWORD *)(a1 + 191) = *(_DWORD *)(a2 + 191);
    *(_OWORD *)(a1 + 160) = v23;
    *(_OWORD *)(a1 + 176) = v22;
    *(_OWORD *)(a1 + 144) = v24;
  }
  else
  {
    v27 = *(unsigned __int8 *)(a2 + 24);
    if (*(unsigned __int8 *)(a1 + 24) == 255)
    {
      if (v27 == 255)
      {
        v45 = *v5;
        *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
        *(_QWORD *)v4 = v45;
      }
      else
      {
        v43 = *v5;
        outlined copy of GraphicsImage.Contents(*v5, *(_BYTE *)(a2 + 24));
        *(_QWORD *)(a1 + 16) = v43;
        *(_BYTE *)(a1 + 24) = v27;
      }
    }
    else if (v27 == 255)
    {
      outlined destroy of GraphicsImage.Contents(a1 + 16);
      v44 = *(_BYTE *)(a2 + 24);
      *(_QWORD *)v4 = *v5;
      *(_BYTE *)(a1 + 24) = v44;
    }
    else
    {
      v28 = *v5;
      outlined copy of GraphicsImage.Contents(*v5, *(_BYTE *)(a2 + 24));
      v29 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v28;
      v30 = *(_BYTE *)(a1 + 24);
      *(_BYTE *)(a1 + 24) = v27;
      outlined consume of GraphicsImage.Contents(v29, v30);
    }
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v46 = *(_OWORD *)(a2 + 60);
    *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
    *(_OWORD *)(a1 + 60) = v46;
    v47 = *(_OWORD *)(a2 + 80);
    v48 = *(_OWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    *(_OWORD *)(a1 + 80) = v47;
    *(_OWORD *)(a1 + 96) = v48;
    *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
    *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
    *(_BYTE *)(a1 + 115) = *(_BYTE *)(a2 + 115);
    v49 = (_OWORD *)(a1 + 120);
    v50 = (_OWORD *)(a2 + 120);
    v51 = *(_QWORD *)(a2 + 136);
    v52 = v51 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_QWORD *)(a1 + 136) >> 1 == 0xFFFFFFFFLL)
    {
      if (v52 == 0x1FFFFFFFELL)
      {
        v53 = *(_OWORD *)(a2 + 136);
        *v49 = *v50;
        *(_OWORD *)(a1 + 136) = v53;
      }
      else
      {
        v55 = *(_QWORD *)(a2 + 120);
        v56 = *(_QWORD *)(a2 + 128);
        v57 = *(_QWORD *)(a2 + 144);
        outlined copy of AccessibilityImageLabel(v55, v56, *(_QWORD *)(a2 + 136));
        *(_QWORD *)(a1 + 120) = v55;
        *(_QWORD *)(a1 + 128) = v56;
        *(_QWORD *)(a1 + 136) = v51;
        *(_QWORD *)(a1 + 144) = v57;
      }
    }
    else if (v52 == 0x1FFFFFFFELL)
    {
      outlined destroy of AccessibilityImageLabel(a1 + 120);
      v54 = *(_OWORD *)(a2 + 136);
      *v49 = *v50;
      *(_OWORD *)(a1 + 136) = v54;
    }
    else
    {
      v58 = *(_QWORD *)(a2 + 120);
      v59 = *(_QWORD *)(a2 + 128);
      v60 = *(_QWORD *)(a2 + 144);
      outlined copy of AccessibilityImageLabel(v58, v59, *(_QWORD *)(a2 + 136));
      v61 = *(_QWORD *)(a1 + 120);
      v62 = *(_QWORD *)(a1 + 128);
      v63 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 120) = v58;
      *(_QWORD *)(a1 + 128) = v59;
      *(_QWORD *)(a1 + 136) = v51;
      *(_QWORD *)(a1 + 144) = v60;
      outlined consume of AccessibilityImageLabel(v61, v62, v63);
    }
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_retain();
    swift_release();
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
    v64 = *(_DWORD *)(a2 + 172);
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
    *(_DWORD *)(a1 + 172) = v64;
    v65 = *(void **)(a1 + 184);
    v66 = *(void **)(a2 + 184);
    *(_QWORD *)(a1 + 184) = v66;
    v67 = v66;

    *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
    *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
  }
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  return a1;
}

uint64_t outlined destroy of GraphicsImage.Contents(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE1F58] - 8) + 8))();
  return a1;
}

uint64_t outlined destroy of AccessibilityImageLabel(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE56C8] - 8) + 8))();
  return a1;
}

uint64_t outlined destroy of Image.Resolved(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE7280] - 8) + 8))();
  return a1;
}

uint64_t assignWithTake for AccessibilityLargeContentViewItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  void *v15;
  __int128 v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = (_QWORD *)(a1 + 16);
  v6 = (_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 136) >> 1 == 4294967294)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 136);
  if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    v13 = *(unsigned __int8 *)(a1 + 24);
    if (v13 != 255)
    {
      v14 = *(unsigned __int8 *)(a2 + 24);
      if (v14 != 255)
      {
        v15 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *v6;
        *(_BYTE *)(a1 + 24) = v14;
        outlined consume of GraphicsImage.Contents(v15, v13);
        goto LABEL_10;
      }
      outlined destroy of GraphicsImage.Contents(a1 + 16);
    }
    *v5 = *v6;
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
LABEL_10:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
    *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
    v16 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v16;
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
    v17 = *(_QWORD *)(a1 + 136);
    *(_WORD *)(a1 + 114) = *(_WORD *)(a2 + 114);
    if (v17 >> 1 != 0xFFFFFFFF)
    {
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL)
      {
        v19 = *(_QWORD *)(a2 + 144);
        v20 = *(_QWORD *)(a1 + 120);
        v21 = *(_QWORD *)(a1 + 128);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
        *(_QWORD *)(a1 + 136) = v7;
        *(_QWORD *)(a1 + 144) = v19;
        outlined consume of AccessibilityImageLabel(v20, v21, v17);
        goto LABEL_15;
      }
      outlined destroy of AccessibilityImageLabel(a1 + 120);
    }
    v18 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v18;
LABEL_15:
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_release();
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
    *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
    v22 = *(void **)(a1 + 184);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);

    *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
    *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
    goto LABEL_16;
  }
  outlined destroy of Image.Resolved(a1 + 16);
LABEL_4:
  v8 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v8;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 191) = *(_DWORD *)(a2 + 191);
  v9 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v9;
  v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v10;
  v11 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)v5 = *(_OWORD *)v6;
  *(_OWORD *)(a1 + 32) = v11;
  v12 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v12;
LABEL_16:
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityLargeContentViewItem(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 233))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityLargeContentViewItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 232) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 233) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 233) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityLargeContentViewItem()
{
  return &type metadata for AccessibilityLargeContentViewItem;
}

uint64_t storeEnumTagSinglePayload for AccessibilityLargeContentViewBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_186F63CF8 + 4 * byte_187BF93EF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_186F63D2C + 4 * byte_187BF93EA[v4]))();
}

uint64_t sub_186F63D2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F63D34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186F63D3CLL);
  return result;
}

uint64_t sub_186F63D48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186F63D50);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_186F63D54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F63D5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityLargeContentViewBehavior and conformance AccessibilityLargeContentViewBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityLargeContentViewBehavior and conformance AccessibilityLargeContentViewBehavior;
  if (!lazy protocol witness table cache variable for type AccessibilityLargeContentViewBehavior and conformance AccessibilityLargeContentViewBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLargeContentViewBehavior, &type metadata for AccessibilityLargeContentViewBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLargeContentViewBehavior and conformance AccessibilityLargeContentViewBehavior);
  }
  return result;
}

void AsOptional.init(_:transform:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for AsOptional();
}

uint64_t sub_186F63E24(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + *(int *)(result + 52));
  *v4 = v2;
  v4[1] = v1;
  return result;
}

void type metadata accessor for AsOptional()
{
  JUMPOUT(0x18D75FF28);
}

void static AsOptional._makeViewList(view:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  int v31;
  uint64_t v32;

  v12 = *a1;
  v18 = *(_DWORD *)(a2 + 32);
  v17 = *(_DWORD *)(a2 + 36);
  v10 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 56);
  v16 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 72);
  v13 = *(_BYTE *)(a2 + 80);
  v14 = *(_DWORD *)(a2 + 64);
  HIDWORD(v20) = HIDWORD(*(_QWORD *)(a2 + 16));
  v22 = v18;
  v23 = v17;
  v24 = v10;
  v25 = v16;
  v26 = v15;
  v27 = v14;
  v28 = v11;
  v29 = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListCountInputs.init(_:)();
  v19 = v30;
  LODWORD(v20) = v31;
  v21 = v32;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(a5 + 40))(&v19, a3, a5);
  swift_bridgeObjectRelease();
  swift_release();
  LODWORD(v30) = v12;
  *(_QWORD *)&v19 = a3;
  *((_QWORD *)&v19 + 1) = a4;
  v20 = a5;
  v21 = a6;
  type metadata accessor for AsOptional();
}

void sub_186F63FA0()
{
  char v0;
  uint64_t v1;
  int v2;

  type metadata accessor for _GraphValue();
  v2 = _GraphValue.value.getter();
  *(_BYTE *)(v1 - 128) = v0;
  *(_DWORD *)(v1 - 124) = v2;
  type metadata accessor for AsOptional.Child();
}

uint64_t sub_186F63FD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char v30;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AsOptional<A, B>.Child, a1);
  _GraphValue.init<A>(_:)();
  v18 = v7;
  v19 = v16;
  v20 = v3;
  v21 = v15;
  v22 = v14;
  v23 = v13;
  v24 = v12;
  v25 = v4;
  v26 = v11;
  v27 = v10;
  v28 = v9;
  v29 = v5;
  v30 = v8;
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t))(v1 + 32))(&v17, &v18, v2, v1);
}

void type metadata accessor for AsOptional.Child()
{
  JUMPOUT(0x18D75FF28);
}

void AsOptional.Child.view.getter()
{
  type metadata accessor for AsOptional();
}

uint64_t sub_186F640C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void AsOptional.Child.value.getter(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[12];

  v12[5] = a5;
  v9 = type metadata accessor for Optional();
  v12[6] = *(_QWORD *)(v9 - 8);
  v12[7] = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v12[4] = (char *)v12 - v11;
  v12[8] = a1;
  v12[9] = a2;
  v12[10] = a3;
  v12[11] = a4;
  type metadata accessor for AsOptional();
}

void sub_186F6418C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v6, v7);
  *(_QWORD *)(v5 - 168) = v2;
  *(_QWORD *)(v5 - 160) = v3;
  *(_QWORD *)(v5 - 152) = v4;
  AsOptional.Child.view.getter();
}

uint64_t sub_186F64200()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  v6 = *(void (**)(uint64_t))(v3 + *(int *)(v4 + 52));
  v7 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  swift_retain();
  v7(v3, v4);
  if ((v0 & 1) == 0)
    AsOptional.Child.view.getter();
  v8 = *(_QWORD *)(v5 - 144);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v8, 1, 1, v1);
  v6(v8);
  swift_release();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 128) + 8))(v8, *(_QWORD *)(v5 - 120));
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance AsOptional<A, B>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 56))(a2, 1, 1);
}

void protocol witness for Rule.value.getter in conformance AsOptional<A, B>.Child(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  AsOptional.Child.value.getter(a1[2], a1[3], a1[4], a1[5], a2);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance AsOptional<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AsOptional<A, B>, a3);
  return static MultiView._makeView(view:inputs:)();
}

void protocol witness for static View._makeViewList(view:inputs:) in conformance AsOptional<A, B>(int *a1, uint64_t a2, uint64_t *a3)
{
  static AsOptional._makeViewList(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance AsOptional<A, B>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AsOptional<A, B>);
  return static MultiView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance AsOptional<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AsOptional<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

_UNKNOWN **base witness table accessor for View in AsOptional<A, B>()
{
  return &protocol witness table for AsOptional<A, B>;
}

uint64_t type metadata completion function for AsOptional()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsOptional(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = v10[1];
    v12 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithTake for AsOptional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AsOptional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AsOptional(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_186F64660 + 4 * byte_187BF9850[v10]))();
  }
}

void storeEnumTagSinglePayload for AsOptional(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_186F647D8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x186F64850);
}

void sub_186F647E0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x186F647E8);
  JUMPOUT(0x186F64850);
}

void sub_186F64828()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F64850);
}

void sub_186F64830()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F64850);
}

uint64_t sub_186F64838(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x186F64850);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x186F6484CLL);
    JUMPOUT(0x186F64844);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t getEnumTagSinglePayload for AsOptional.Child(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[8])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AsOptional.Child(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

void base witness table accessor for _AttributeBody in AsOptional<A, B>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t OptionalFormatInputToString.get(base:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v15 - v6;
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, a1, v3, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v7, AssociatedTypeWitness);
    dispatch thunk of FormatStyle.format(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, AssociatedTypeWitness);
    return v15;
  }
}

uint64_t OptionalFormatInputToString.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  void (*v15)(uint64_t, uint64_t, double);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v18 = a2;
  v19 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  v7 = (char *)&v17 - v6;
  v8 = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v14 = (char *)&v17 - v13;
  v15 = *(void (**)(uint64_t, uint64_t, double))(v10 + 8);
  v21 = a1;
  v15(a1, v9, v12);
  dispatch thunk of ParseableFormatStyle.parseStrategy.getter();
  v22 = v18;
  v23 = v19;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of ParseStrategy.parse(_:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v7, AssociatedTypeWitness);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v14, 0, 1, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v21, v14, v9);
}

uint64_t protocol witness for Projection.get(base:) in conformance OptionalFormatInputToString<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = OptionalFormatInputToString.get(base:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance OptionalFormatInputToString<A>(uint64_t a1, uint64_t *a2)
{
  return OptionalFormatInputToString.set(base:newValue:)(a1, *a2, a2[1]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OptionalFormatInputToString<A>()
{
  return OptionalFormatInputToString.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OptionalFormatInputToString<A>()
{
  return OptionalFormatInputToString.hash(into:)();
}

uint64_t FormatInputToString.get(base:)()
{
  uint64_t v1;

  dispatch thunk of FormatStyle.format(_:)();
  return v1;
}

uint64_t FormatInputToString.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v16 = a1;
  v17 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  v7 = (char *)&v16 - v6;
  v8 = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v16 - v11;
  dispatch thunk of ParseableFormatStyle.parseStrategy.getter();
  v19 = a2;
  v20 = v17;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of ParseStrategy.parse(_:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v7, AssociatedTypeWitness);
  v13 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v12, 0, 1, v8);
  v14 = v16;
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v14, v12, v8);
}

uint64_t OptionalFormatInputToString.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static OptionalFormatInputToString.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

Swift::Int OptionalFormatInputToString.hashValue.getter()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Projection.get(base:) in conformance FormatInputToString<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FormatInputToString.get(base:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance FormatInputToString<A>(uint64_t a1, uint64_t *a2)
{
  return FormatInputToString.set(base:newValue:)(a1, *a2, a2[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OptionalFormatInputToString<A>()
{
  Hasher.init(_seed:)();
  OptionalFormatInputToString.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FormatInputToString<A>()
{
  return static OptionalFormatInputToString.== infix(_:_:)() & 1;
}

uint64_t Optional<A>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  dispatch thunk of BinaryFloatingPoint.init(_:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 0, 1, a1);
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 0, 1, v4);
}

uint64_t protocol witness for OptionalBinaryFloatingPoint.init(_:) in conformance <A> A?@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Optional<A>.init(_:)(*(_QWORD *)(a1 + 16), a2);
}

uint64_t Optional<A>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v10 = a1;
  v7 = lazy protocol witness table accessor for type Int and conformance Int();
  MEMORY[0x18D75E08C](&v10, MEMORY[0x1E0DEB418], v7, a2, a3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, 0, 1, a2);
  v8 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a4, 0, 1, v8);
}

uint64_t protocol witness for OptionalBinaryInteger.init(_:) in conformance <A> A?@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional<A>.init(_:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t AnyToFormattedString.__allocating_init(_:)(void *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  AnyToFormattedString.init(_:)(a1);
  return v2;
}

uint64_t AnyToFormattedString.init(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v4;

  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSFormatter);
  swift_dynamicCast();
  *(_QWORD *)(v1 + 16) = v4;
  return v1;
}

void AnyToFormattedString.hash(into:)()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + 16);
  NSObject.hash(into:)();

}

uint64_t static AnyToFormattedString.== infix(_:_:)()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t AnyToFormattedString.get(base:)()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_stringForObjectValue_, _bridgeAnythingToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (!v1)
    return 0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void AnyToFormattedString.set(base:newValue:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  static AnyToFormattedString.applyFormatting(to:string:formatter:)(a1, a2, a3, *(void **)(v3 + 16));
}

void static AnyToFormattedString.applyFormatting(to:string:formatter:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  char *v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t DynamicType;
  uint64_t v43;
  char *v44;
  id v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  double v77;
  void (*v78)(uint64_t, uint64_t, double);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  void (*v90)(id, uint64_t, uint64_t, double);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t *boxed_opaque_existential_1;
  char *v99;
  uint64_t v100;
  uint64_t *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  id v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  _QWORD v115[3];
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v107 = a1;
  v118 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(v4 + 80);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v104 - v12;
  v108 = *(_QWORD *)(v8 - 8);
  v109 = v8;
  MEMORY[0x1E0C80A78](v14, v15);
  v105 = (char *)&v104 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v104 - v19;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v104 - v23;
  MEMORY[0x1E0C80A78](v25, v26);
  v106 = (char *)&v104 - v27;
  v30 = MEMORY[0x1E0C80A78](v28, v29);
  v32 = (char *)&v104 - v31;
  v33 = (void *)MEMORY[0x18D75CC88](a2, a3, v30);
  v115[0] = 0;
  *(_QWORD *)&v112 = 0;
  LODWORD(a4) = objc_msgSend(a4, sel_getObjectValue_forString_errorDescription_, v115, v33, &v112);

  v34 = v115[0];
  v110 = (id)v112;
  if (!(_DWORD)a4)
  {
    v45 = (id)v112;
    swift_unknownObjectRetain();
    static Semantics.v3.getter();
    if ((isLinkedOnOrAfter(_:)() & 1) != 0)
      goto LABEL_21;
    if (v45)
    {
      v46 = v45;
      static os_log_type_t.fault.getter();
      v47 = (void *)static Log.runtimeIssuesLog.getter();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = xmmword_187BF9830;
      v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v51 = v50;
      *(_QWORD *)(v48 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v48 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v48 + 32) = v49;
      *(_QWORD *)(v48 + 40) = v51;
      os_log(_:dso:log:_:_:)();

    }
    else
    {
      static os_log_type_t.fault.getter();
      v67 = (void *)static Log.runtimeIssuesLog.getter();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v68 = swift_allocObject();
      *(_OWORD *)(v68 + 16) = xmmword_187BF9820;
      v69 = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v68 + 56) = MEMORY[0x1E0DEA968];
      v70 = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v68 + 64) = v70;
      *(_QWORD *)(v68 + 32) = a2;
      *(_QWORD *)(v68 + 40) = a3;
      v115[0] = v109;
      swift_getMetatypeMetadata();
      swift_bridgeObjectRetain();
      v71 = String.init<A>(describing:)();
      *(_QWORD *)(v68 + 96) = v69;
      *(_QWORD *)(v68 + 104) = v70;
      *(_QWORD *)(v68 + 72) = v71;
      *(_QWORD *)(v68 + 80) = v72;
      os_log(_:dso:log:_:_:)();

    }
LABEL_20:
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  v35 = (id)v112;
  v36 = v109;
  if (v34)
  {
    swift_unknownObjectRetain_n();
    objc_opt_self();
    v37 = swift_dynamicCastObjCClass();
    if (v37)
    {
      v38 = (void *)v37;
      v40 = v107;
      v39 = v108;
      v41 = *(void (**)(char *, uint64_t, uint64_t))(v108 + 16);
      v41(v32, v107, v36);
      type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for BinaryFloatingPoint);
      if (swift_dynamicCast())
      {
        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v36);
        outlined init with take of OptionalBinaryInteger(&v112, (uint64_t)v115);
        __swift_project_boxed_opaque_existential_1(v115, v116);
        DynamicType = swift_getDynamicType();
        v43 = v117;
        objc_msgSend(v38, sel_doubleValue);
        *((_QWORD *)&v113 + 1) = DynamicType;
        v114 = v43;
        __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v112);
        dispatch thunk of BinaryFloatingPoint.init(_:)();
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
        v44 = v106;
        swift_dynamicCast();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v44, v36);
      }
      else
      {
        v114 = 0;
        v112 = 0u;
        v113 = 0u;
        outlined destroy of BinaryFloatingPoint?((uint64_t)&v112, &lazy cache variable for type metadata for BinaryFloatingPoint?, &lazy cache variable for type metadata for BinaryFloatingPoint, MEMORY[0x1E0DE9DD8]);
        v41(v24, v40, v36);
        type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for BinaryInteger);
        if (swift_dynamicCast())
        {
          v62 = v108;
          (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v40, v36);
          outlined init with take of OptionalBinaryInteger(&v112, (uint64_t)v115);
          __swift_project_boxed_opaque_existential_1(v115, v116);
          v63 = swift_getDynamicType();
          v64 = v117;
          v111 = objc_msgSend(v38, sel_integerValue);
          *((_QWORD *)&v113 + 1) = v63;
          v114 = v64;
          __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v112);
          v65 = lazy protocol witness table accessor for type Int and conformance Int();
          MEMORY[0x18D75E08C](&v111, MEMORY[0x1E0DEB418], v65, v63, v64);
          swift_unknownObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
          v66 = v106;
          swift_dynamicCast();
          (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v40, v66, v36);
        }
        else
        {
          v114 = 0;
          v112 = 0u;
          v113 = 0u;
          outlined destroy of BinaryFloatingPoint?((uint64_t)&v112, &lazy cache variable for type metadata for BinaryInteger?, &lazy cache variable for type metadata for BinaryInteger, MEMORY[0x1E0DEBE20]);
          v41(v20, v40, v36);
          type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for OptionalBinaryFloatingPoint);
          if (swift_dynamicCast())
          {
            v73 = v108;
            (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v40, v36);
            outlined init with take of OptionalBinaryInteger(&v112, (uint64_t)v115);
            __swift_project_boxed_opaque_existential_1(v115, v116);
            v74 = swift_getDynamicType();
            v75 = v117;
            objc_msgSend(v38, sel_doubleValue);
            v77 = v76;
            v78 = *(void (**)(uint64_t, uint64_t, double))(v75 + 8);
            v79 = type metadata accessor for Optional();
            v80 = *(_QWORD *)(v79 - 8);
            MEMORY[0x1E0C80A78](v79, v81);
            v83 = (char *)&v104 - v82;
            v78(v74, v75, v77);
            v84 = *(_QWORD *)(v74 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v83, 1, v74) == 1)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
              swift_unknownObjectRelease();
              (*(void (**)(char *, uint64_t))(v80 + 8))(v83, v79);
              v114 = 0;
              v112 = 0u;
              v113 = 0u;
            }
            else
            {
              *((_QWORD *)&v113 + 1) = v74;
              v114 = v75;
              boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v112);
              (*(void (**)(uint64_t *, char *, uint64_t))(v84 + 32))(boxed_opaque_existential_1, v83, v74);
              swift_unknownObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
            }
            type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, &lazy cache variable for type metadata for OptionalBinaryFloatingPoint?, &lazy cache variable for type metadata for OptionalBinaryFloatingPoint, (uint64_t)&protocol descriptor for OptionalBinaryFloatingPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
            v99 = v106;
            v100 = v109;
            swift_dynamicCast();
            (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))(v40, v99, v100);
          }
          else
          {
            v114 = 0;
            v112 = 0u;
            v113 = 0u;
            outlined destroy of BinaryFloatingPoint?((uint64_t)&v112, &lazy cache variable for type metadata for OptionalBinaryFloatingPoint?, &lazy cache variable for type metadata for OptionalBinaryFloatingPoint, (uint64_t)&protocol descriptor for OptionalBinaryFloatingPoint);
            v41(v105, v40, v36);
            type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for OptionalBinaryInteger);
            v85 = swift_dynamicCast();
            v86 = v108;
            if ((v85 & 1) != 0)
            {
              (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v40, v36);
              outlined init with take of OptionalBinaryInteger(&v112, (uint64_t)v115);
              __swift_project_boxed_opaque_existential_1(v115, v116);
              v87 = swift_getDynamicType();
              v88 = v117;
              v89 = objc_msgSend(v38, sel_integerValue);
              v90 = *(void (**)(id, uint64_t, uint64_t, double))(v88 + 8);
              v91 = type metadata accessor for Optional();
              v92 = *(_QWORD *)(v91 - 8);
              v94 = MEMORY[0x1E0C80A78](v91, v93);
              v96 = (char *)&v104 - v95;
              v90(v89, v87, v88, v94);
              v97 = *(_QWORD *)(v87 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v96, 1, v87) == 1)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
                swift_unknownObjectRelease();
                (*(void (**)(char *, uint64_t))(v92 + 8))(v96, v91);
                v114 = 0;
                v112 = 0u;
                v113 = 0u;
              }
              else
              {
                *((_QWORD *)&v113 + 1) = v87;
                v114 = v88;
                v101 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v112);
                (*(void (**)(uint64_t *, char *, uint64_t))(v97 + 32))(v101, v96, v87);
                swift_unknownObjectRelease();
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
              }
              type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, &lazy cache variable for type metadata for OptionalBinaryInteger?, &lazy cache variable for type metadata for OptionalBinaryInteger, (uint64_t)&protocol descriptor for OptionalBinaryInteger, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
              v102 = v106;
              v103 = v109;
              swift_dynamicCast();
              (*(void (**)(uint64_t, char *, uint64_t))(v86 + 32))(v107, v102, v103);
            }
            else
            {
              v114 = 0;
              v112 = 0u;
              v113 = 0u;
              swift_unknownObjectRelease();
              outlined destroy of BinaryFloatingPoint?((uint64_t)&v112, &lazy cache variable for type metadata for OptionalBinaryInteger?, &lazy cache variable for type metadata for OptionalBinaryInteger, (uint64_t)&protocol descriptor for OptionalBinaryInteger);
            }
          }
        }
      }
      goto LABEL_21;
    }
    swift_unknownObjectRelease();
  }
  v115[0] = v34;
  type metadata accessor for Swift.AnyObject?();
  swift_unknownObjectRetain();
  v52 = swift_dynamicCast();
  v53 = v108;
  v54 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56);
  if (v52)
  {
    v54(v13, 0, 1, v36);
    v55 = v107;
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v107, v36);
    (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v55, v13, v36);
    goto LABEL_21;
  }
  v54(v13, 1, 1, v36);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v56 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v56 = a2 & 0xFFFFFFFFFFFFLL;
  if (v56)
  {
    v115[0] = v109;
    swift_getMetatypeMetadata();
    v57 = String.init<A>(describing:)();
    v59 = v58;
    static os_log_type_t.fault.getter();
    v60 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v61 = swift_allocObject();
    *(_OWORD *)(v61 + 16) = xmmword_187BF9830;
    *(_QWORD *)(v61 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v61 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v61 + 32) = v57;
    *(_QWORD *)(v61 + 40) = v59;
    os_log(_:dso:log:_:_:)();

    goto LABEL_20;
  }
LABEL_21:
  swift_unknownObjectRelease();

}

uint64_t AnyToFormattedString.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

Swift::Int AnyToFormattedString.hashValue.getter()
{
  Hasher.init(_seed:)();
  AnyToFormattedString.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Projection.get(base:) in conformance AnyToFormattedString<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = AnyToFormattedString.get(base:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void protocol witness for Projection.set(base:newValue:) in conformance AnyToFormattedString<A>(uint64_t a1, uint64_t a2)
{
  AnyToFormattedString.set(base:newValue:)(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyToFormattedString<A>()
{
  return AnyToFormattedString.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance AnyToFormattedString<A>()
{
  AnyToFormattedString.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyToFormattedString<A1>()
{
  Hasher.init(_seed:)();
  AnyToFormattedString.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyToFormattedString<A>()
{
  return static AnyToFormattedString.== infix(_:_:)() & 1;
}

uint64_t TextField<>.init<A>(_:value:format:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[16];
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v33 = a7;
  v34 = a8;
  v25 = a5;
  v26 = a1;
  v29 = a4;
  v30 = a9;
  v28 = a3;
  v27 = a2;
  v31 = a11;
  v32 = a10;
  v15 = *(_QWORD *)(a12 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  v18 = type metadata accessor for Binding();
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)&v25 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v25 - v22, a5, v18, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a6, a12);
  v36 = v26;
  v37 = v27;
  v38 = v28;
  v39 = v29;
  TextField.init<A>(_:format:prompt:label:)((uint64_t)v23, (uint64_t)v17, v33, v34, v32, v31, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v35, v30, MEMORY[0x1E0CE6CF8], a12, MEMORY[0x1E0CE6C58], a13);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a6, a12);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v25, v18);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[16];
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v33 = a7;
  v34 = a8;
  v25 = a5;
  v26 = a1;
  v29 = a4;
  v30 = a9;
  v28 = a3;
  v27 = a2;
  v31 = a11;
  v32 = a10;
  v15 = *(_QWORD *)(a12 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  v18 = type metadata accessor for Binding();
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)&v25 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v25 - v22, a5, v18, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a6, a12);
  v36 = v26;
  v37 = v27;
  v38 = v28;
  v39 = v29;
  TextField.init<A>(_:format:prompt:label:)((uint64_t)v23, (uint64_t)v17, v33, v34, v32, v31, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v35, v30, MEMORY[0x1E0CE6CF8], a12, MEMORY[0x1E0CE6C58], a13);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a6, a12);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v25, v18);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t TextField<>.init<A, B>(_:value:format:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[16];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v32 = a6;
  v33 = a7;
  v30 = a4;
  v31 = a5;
  v28 = a1;
  v29 = a9;
  v26 = a2;
  v27 = a11;
  v15 = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  v18 = type metadata accessor for Binding();
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)&v26 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v26 - v22, a2, v18, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, a10);
  v35 = a8;
  v36 = a10;
  v24 = v28;
  v37 = v27;
  v38 = a12;
  v39 = v28;
  TextField.init<A>(_:format:prompt:label:)((uint64_t)v23, (uint64_t)v17, v30, v31, v32, v33, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A, B>(_:value:format:prompt:), (uint64_t)v34, v29, MEMORY[0x1E0CE6CF8], a10, MEMORY[0x1E0CE6C58], a12);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a3, a10);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v26, v18);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 8))(v24, a8);
}

{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[16];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v32 = a6;
  v33 = a7;
  v30 = a4;
  v31 = a5;
  v28 = a1;
  v29 = a9;
  v26 = a2;
  v27 = a11;
  v15 = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  v18 = type metadata accessor for Binding();
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)&v26 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v26 - v22, a2, v18, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, a10);
  v35 = a8;
  v36 = a10;
  v24 = v28;
  v37 = v27;
  v38 = a12;
  v39 = v28;
  TextField.init<A>(_:format:prompt:label:)((uint64_t)v23, (uint64_t)v17, v30, v31, v32, v33, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A, B>(_:value:format:prompt:), (uint64_t)v34, v29, MEMORY[0x1E0CE6CF8], a10, MEMORY[0x1E0CE6C58], a12);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a3, a10);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v26, v18);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 8))(v24, a8);
}

uint64_t partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TextField<>.init<A>(_:value:format:prompt:)(a1);
}

uint64_t closure #1 in TextField<>.init<A, B>(_:value:format:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  result = Text.init<A>(_:)();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v8 & 1;
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #1 in TextField<>.init<A, B>(_:value:format:prompt:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in TextField<>.init<A, B>(_:value:format:prompt:)(*(_QWORD *)(v1 + 48), a1);
}

uint64_t TextField.init<A>(value:format:prompt:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;

  v31 = a7;
  v32 = a8;
  v29 = a5;
  v30 = a6;
  v27 = a3;
  v28 = a4;
  v26 = a9;
  v25 = a10;
  v15 = *(_QWORD *)(a11 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  v18 = type metadata accessor for Binding();
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)&v25 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v25 - v22, a1, v18, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, a11);
  TextField.init<A>(_:format:prompt:label:)((uint64_t)v23, (uint64_t)v17, v27, v28, v29, v30, v31, v32, v26, v25, a11, a12, a13);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, a11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a1, v18);
}

{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;

  v31 = a7;
  v32 = a8;
  v29 = a5;
  v30 = a6;
  v27 = a3;
  v28 = a4;
  v26 = a9;
  v25 = a10;
  v15 = *(_QWORD *)(a11 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  v18 = type metadata accessor for Binding();
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)&v25 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v25 - v22, a1, v18, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, a11);
  TextField.init<A>(_:format:prompt:label:)((uint64_t)v23, (uint64_t)v17, v27, v28, v29, v30, v31, v32, v26, v25, a11, a12, a13);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, a11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a1, v18);
}

uint64_t TextField<>.init<A>(_:value:formatter:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;

  v29 = a7;
  v30 = a8;
  v27 = a10;
  v28 = a6;
  v26 = a11;
  v18 = type metadata accessor for Binding();
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)&v25 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v25 - v22, a5, v18, v21);
  v32 = a1;
  v33 = a2;
  v34 = a3;
  v35 = a4;
  TextField.init<A>(_:formatter:prompt:onEditingChanged:onCommit:label:)((uint64_t)v23, v28, v29, v30, v27, v26, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a9, 0, 0, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v31, MEMORY[0x1E0CE6CF8], a12, MEMORY[0x1E0CE6C58]);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a5, v18);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t TextField<>.init<A, B>(_:value:formatter:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v25 = a6;
  v26 = a7;
  v23 = a4;
  v24 = a5;
  v16 = type metadata accessor for Binding();
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = (char *)&v23 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v23 - v20, a2, v16, v19);
  v28 = a8;
  v29 = a10;
  v30 = a11;
  v31 = a1;
  TextField.init<A>(_:formatter:prompt:onEditingChanged:onCommit:label:)((uint64_t)v21, a3, v23, v24, v25, v26, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a9, 0, 0, (void (*)(uint64_t))partial apply for closure #2 in TextField<>.init<A, B>(_:value:formatter:prompt:), (uint64_t)v27, MEMORY[0x1E0CE6CF8], a10, MEMORY[0x1E0CE6C58]);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a2, v16);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 8))(a1, a8);
}

uint64_t TextField.init<A>(value:formatter:prompt:label:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v25 = a7;
  v26 = a8;
  v27 = a5;
  v28 = a6;
  v24 = a4;
  v16 = type metadata accessor for Binding();
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = (char *)&v23 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v23 - v20, a1, v16, v19);
  TextField.init<A>(_:formatter:prompt:onEditingChanged:onCommit:label:)((uint64_t)v21, a2, a3, v24, v27, v28, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a9, 0, 0, v25, v26, a10, a11, a12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, v16);
}

uint64_t TextField<>.init<A>(_:value:formatter:onEditingChanged:onCommit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE v24[12];
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v28 = a6;
  v29 = a7;
  v25 = a3;
  v27 = a9;
  v26 = a10;
  v17 = type metadata accessor for Binding();
  v18 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v22 = &v24[-v21];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v18 + 16))(&v24[-v21], a5, v17, v20);
  v31 = a1;
  v32 = a2;
  v33 = v25;
  v34 = a4;
  swift_retain();
  swift_retain();
  TextField.init<A>(_:formatter:prompt:onEditingChanged:onCommit:label:)((uint64_t)v22, v28, 0, 0, 0, 0, v29, a8, v27, v26, a11, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v30, MEMORY[0x1E0CE6CF8], a12, MEMORY[0x1E0CE6C58]);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a5, v17);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t TextField<>.init<A, B>(_:value:formatter:onEditingChanged:onCommit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v24 = a6;
  v25 = a3;
  v26 = a4;
  v23 = a9;
  v16 = type metadata accessor for Binding();
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = (char *)&v23 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v23 - v20, a2, v16, v19);
  v28 = a8;
  v29 = a10;
  v30 = a11;
  v31 = a1;
  swift_retain();
  swift_retain();
  TextField.init<A>(_:formatter:prompt:onEditingChanged:onCommit:label:)((uint64_t)v21, v25, 0, 0, 0, 0, v26, a5, v23, v24, a7, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A, B>(_:value:formatter:onEditingChanged:onCommit:), (uint64_t)v27, MEMORY[0x1E0CE6CF8], a10, MEMORY[0x1E0CE6C58]);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a2, v16);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 8))(a1, a8);
}

uint64_t closure #1 in TextField<>.init<A>(_:value:format:prompt:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = Text.init(_:tableName:bundle:comment:)();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  *(_QWORD *)(a1 + 24) = v5;
  return result;
}

uint64_t partial apply for closure #1 in TextField<>.init<A, B>(_:value:formatter:onEditingChanged:onCommit:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in TextField<>.init<A, B>(_:value:format:prompt:)(*(_QWORD *)(v1 + 40), a1);
}

uint64_t type metadata completion function for AnyToFormattedString()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AnyToFormattedString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyToFormattedString);
}

void base witness table accessor for Equatable in AnyToFormattedString<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Hashable in AnyToFormattedString<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for Swift.AnyObject?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Swift.AnyObject?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Swift.AnyObject?);
  }
}

uint64_t outlined destroy of BinaryFloatingPoint?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEB460], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEB470], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t type metadata accessor for OptionalFormatInputToString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OptionalFormatInputToString);
}

uint64_t *initializeBufferWithCopyOfBuffer for OptionalFormatInputToString(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t initializeWithTake for FormatInputToString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t getEnumTagSinglePayload for OptionalFormatInputToString(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_186F673D0 + 4 * byte_187BF9990[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for OptionalFormatInputToString(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for FormatInputToString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormatInputToString);
}

void base witness table accessor for Equatable in FormatInputToString<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Equatable in OptionalFormatInputToString<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Hashable in OptionalFormatInputToString<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Hashable in FormatInputToString<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t PickerContent.onHover(perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v11 = *(_QWORD *)(a3 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v11 + 16))(v14, v5, v12);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v14, a3);
  v16 = (_QWORD *)(a5 + *(int *)(type metadata accessor for _OnHoverPickerContent(0, a3, a4, v15) + 36));
  *v16 = a1;
  v16[1] = a2;
  return swift_retain();
}

uint64_t _OnHoverPickerContent._identifiedView.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v10 = (char *)&v15 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v3 + 56))(v4, v3, v8);
  v11 = (uint64_t *)(v1 + *(int *)(a1 + 36));
  v12 = *v11;
  v13 = v11[1];
  swift_getAssociatedConformanceWitness();
  View.onHover(perform:)(v12, v13, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, AssociatedTypeWitness);
}

void associated type witness table accessor for PickerContent.Body : PickerContent in _OnHoverPickerContent<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for PickerContent.SelectionValue : Hashable in _OnHoverPickerContent<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for PickerContent._IdentifiedView : View in _OnHoverPickerContent<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for _OnHoverPickerContent<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _OnHoverPickerContent<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _OnHoverPickerContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_186F678FC + 4 * byte_187BF9CE0[v10]))();
  }
}

void storeEnumTagSinglePayload for _OnHoverPickerContent(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_186F67A74()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x186F67AECLL);
}

void sub_186F67A7C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x186F67A84);
  JUMPOUT(0x186F67AECLL);
}

void sub_186F67AC4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F67AECLL);
}

void sub_186F67ACC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F67AECLL);
}

uint64_t sub_186F67AD4(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x186F67AECLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x186F67AE8);
    JUMPOUT(0x186F67AE0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata accessor for _OnHoverPickerContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _OnHoverPickerContent);
}

uint64_t sub_186F67B10()
{
  uint64_t v0;
  _QWORD v2[2];

  swift_getAssociatedTypeWitness();
  v0 = type metadata accessor for ModifiedContent();
  v2[0] = swift_getAssociatedConformanceWitness();
  v2[1] = &protocol witness table for _HoverRegionModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v2);
}

uint64_t RichTextEditor.init(text:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of Binding<AttributedString>(a1, a2);
}

uint64_t outlined init with take of Binding<AttributedString>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Binding<AttributedString>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Binding<AttributedString>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<AttributedString>)
  {
    type metadata accessor for AttributedString();
    v0 = type metadata accessor for Binding();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>);
  }
}

uint64_t RichTextEditor.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Binding<AttributedString>(v1, a1);
}

uint64_t outlined init with copy of Binding<AttributedString>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Binding<AttributedString>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t associated type witness table accessor for View.Body : View in RichTextEditor()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance RichTextEditor()
{
  return static View.makeView(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance RichTextEditor()
{
  return 0;
}

uint64_t protocol witness for View.body.getter in conformance RichTextEditor@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Binding<AttributedString>(v1, a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for RichTextEditor(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  type metadata accessor for Binding<AttributedString>();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    a1[1] = a2[1];
    v7 = *(int *)(v4 + 32);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for AttributedString();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_retain();
    swift_retain();
    v11(v8, v9, v10);
  }
  return a1;
}

uint64_t destroy for RichTextEditor(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  v3 = a1 + *(int *)(v2 + 32);
  v4 = type metadata accessor for AttributedString();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

_QWORD *initializeWithCopy for RichTextEditor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  type metadata accessor for Binding<AttributedString>();
  v6 = *(int *)(v5 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AttributedString();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_retain();
  swift_retain();
  v10(v7, v8, v9);
  return a1;
}

_QWORD *assignWithCopy for RichTextEditor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  v5 = *(int *)(v4 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

_QWORD *initializeWithTake for RichTextEditor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  type metadata accessor for Binding<AttributedString>();
  v6 = *(int *)(v5 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

_QWORD *assignWithTake for RichTextEditor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  v5 = *(int *)(v4 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RichTextEditor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_186F68060(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Binding<AttributedString>();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for RichTextEditor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_186F680A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Binding<AttributedString>();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for RichTextEditor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for RichTextEditor;
  if (!type metadata singleton initialization cache for RichTextEditor)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for RichTextEditor()
{
  unint64_t v0;

  type metadata accessor for Binding<AttributedString>();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

_UNKNOWN **sub_186F6818C()
{
  return &protocol witness table for UIKitRichTextEditor;
}

uint64_t TableDataSourceAdaptor.init(rowList:columnList:cellFormulas:hasSelection:sortOrder:columnCustomization:showsFirstColumnOnly:tableColumnHeadersVisibility:accessibilityEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int128 a11, char a12, char a13, char a14)
{
  char v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t result;
  uint64_t v30[5];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[56];

  v17 = a14;
  *(_QWORD *)(a9 + 160) = 0;
  *(_OWORD *)(a9 + 128) = 0u;
  *(_OWORD *)(a9 + 144) = 0u;
  *(_OWORD *)(a9 + 112) = 0u;
  outlined init with copy of TableColumnList(a2, (uint64_t)v34);
  v34[40] = 0;
  if (a10)
  {
    *(_QWORD *)&v31 = a8;
    *((_QWORD *)&v31 + 1) = a10;
    v32 = a11;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v19 = v18;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MEMORY[0x18D75B9C8](v30, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v20 = specialized static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)((uint64_t)v34, v30[0], v30[1], 0, (uint64_t)specialized implicit closure #1 in TableDataSourceAdaptor.init(rowList:columnList:cellFormulas:hasSelection:sortOrder:columnCustomization:showsFirstColumnOnly:tableColumnHeadersVisibility:accessibilityEnabled:), 0, (uint64_t)specialized implicit closure #2 in TableDataSourceAdaptor.init(rowList:columnList:cellFormulas:hasSelection:sortOrder:columnCustomization:showsFirstColumnOnly:tableColumnHeadersVisibility:accessibilityEnabled:), 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a9 + 48) = v20;
    *(_BYTE *)(a9 + 88) = 1;
  }
  else
  {
    outlined init with copy of TableColumnCollection((uint64_t)v34, a9 + 48);
  }
  if ((a14 & 1) != 0)
  {
    v21 = Array<A>.withResolvedOffsets.getter(a3);
    swift_bridgeObjectRelease();
    a3 = v21;
    v17 = a14;
  }
  *(_QWORD *)(a9 + 96) = a3;
  outlined init with copy of TableRowList(a1, (uint64_t)v30);
  TableSections.init(list:)(v30, (uint64_t)&v31);
  __swift_destroy_boxed_opaque_existential_1(a2);
  outlined destroy of TableRowList(a1);
  outlined destroy of TableColumnCollection((uint64_t)v34);
  v22 = v32;
  *(_OWORD *)a9 = v31;
  *(_OWORD *)(a9 + 16) = v22;
  *(_OWORD *)(a9 + 32) = v33;
  *(_BYTE *)(a9 + 104) = a4 & 1;
  outlined consume of Binding<[SwiftUIAnySortComparator]>?(*(_QWORD *)(a9 + 112), *(_QWORD *)(a9 + 120));
  *(_QWORD *)(a9 + 112) = a5;
  *(_QWORD *)(a9 + 120) = a6;
  *(_QWORD *)(a9 + 128) = a7;
  result = outlined consume of Binding<AnyTableColumnCustomization>?(*(_QWORD *)(a9 + 136), *(_QWORD *)(a9 + 144));
  *(_QWORD *)(a9 + 136) = a8;
  *(_QWORD *)(a9 + 144) = a10;
  *(_OWORD *)(a9 + 152) = a11;
  *(_BYTE *)(a9 + 168) = a12 & 1;
  *(_BYTE *)(a9 + 170) = v17 & 1;
  *(_BYTE *)(a9 + 169) = a13;
  return result;
}

uint64_t specialized implicit closure #1 in TableDataSourceAdaptor.init(rowList:columnList:cellFormulas:hasSelection:sortOrder:columnCustomization:showsFirstColumnOnly:tableColumnHeadersVisibility:accessibilityEnabled:)(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for TableColumnCollection.Entry(0) + 40));
}

uint64_t specialized implicit closure #2 in TableDataSourceAdaptor.init(rowList:columnList:cellFormulas:hasSelection:sortOrder:columnCustomization:showsFirstColumnOnly:tableColumnHeadersVisibility:accessibilityEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;

  v3 = a1 + *(int *)(type metadata accessor for TableColumnCollection.Entry(0) + 20);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_BYTE *)(v3 + 32);
  result = outlined copy of TableColumnCustomizationID.Base(*(_QWORD *)v3, v5, v6, v7, v8);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  *(_BYTE *)(a2 + 32) = v8;
  return result;
}

uint64_t Array<A>.withResolvedOffsets.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD v42[2];
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v51 = type metadata accessor for TableCellFormula();
  v2 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51, v3);
  v50 = (uint64_t)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v42 - v7;
  type metadata accessor for (offset: Int, element: TableCellFormula)();
  v49 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v48 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v47 = (_QWORD *)((char *)v42 - v14);
  MEMORY[0x1E0C80A78](v15, v16);
  v46 = (_QWORD *)((char *)v42 - v17);
  v54 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v18 = v54;
  v19 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v45 = v19;
  v42[1] = a1;
  if (v19)
  {
    v20 = 0;
    v21 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    v43 = *(_QWORD *)(v2 + 72);
    v44 = v21;
    v22 = a1 + v21;
    v24 = v48;
    v23 = v49;
    do
    {
      v52 = v18;
      v53 = v22;
      v25 = (uint64_t)v24 + *(int *)(v23 + 48);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v22, v25, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
      v26 = (uint64_t)v47;
      v27 = (uint64_t)v47 + *(int *)(v23 + 48);
      *v47 = v20;
      outlined init with take of TableCellFormula(v25, v27, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
      v28 = v46;
      outlined init with take of TableCellFormula(v26, (uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableCellFormula));
      v29 = *(int *)(v23 + 48);
      v30 = (uint64_t)v24 + v29;
      v31 = (uint64_t)v28 + v29;
      v32 = *v28;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v28 + v29, (uint64_t)v24 + v29, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
      v33 = v8;
      v34 = v50;
      outlined init with take of TableCellFormula(v30, v50, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
      v35 = (uint64_t)v24 + *(int *)(v23 + 48);
      *v24 = v32;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v31, v35, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
      v36 = v34 + *(int *)(v51 + 40);
      *(_QWORD *)v36 = v32;
      *(_BYTE *)(v36 + 8) = 0;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v35, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
      v37 = v34;
      v8 = v33;
      v18 = v52;
      outlined init with take of TableCellFormula(v37, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableCellFormula));
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v18 = v54;
      }
      v39 = *(_QWORD *)(v18 + 16);
      v38 = *(_QWORD *)(v18 + 24);
      if (v39 >= v38 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
        v18 = v54;
      }
      ++v20;
      *(_QWORD *)(v18 + 16) = v39 + 1;
      v40 = v43;
      outlined init with take of TableCellFormula((uint64_t)v8, v18 + v44 + v39 * v43, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
      v22 = v53 + v40;
    }
    while (v45 != v20);
  }
  swift_bridgeObjectRelease_n();
  return v18;
}

Swift::Bool __swiftcall TableDataSourceAdaptor.hasHeader(forSectionAt:)(Swift::Int forSectionAt)
{
  uint64_t v1;
  Swift::Int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  int v6;
  int v7;
  _BYTE v9[176];
  _BYTE v10[176];
  _BYTE v11[176];

  if (forSectionAt < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v2 = forSectionAt;
  v3 = *(_QWORD *)(v1 + 40);
  if (*(_QWORD *)(v3 + 16) <= (unint64_t)forSectionAt)
  {
LABEL_13:
    __break(1u);
    return forSectionAt;
  }
  v4 = *(unsigned __int8 *)(v3 + 96 * forSectionAt + 40);
  outlined init with copy of TableDataSourceAdaptor(v1, (uint64_t)v11);
  if (v4 == 1)
  {
    outlined destroy of TableDataSourceAdaptor((uint64_t)v11);
    v5 = 1;
  }
  else
  {
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v11, (uint64_t)v10);
    if (v2)
    {
      v5 = 0;
    }
    else
    {
      v6 = v10[168];
      outlined init with copy of TableDataSourceAdaptor((uint64_t)v10, (uint64_t)v9);
      if (v6 == 1)
      {
        outlined destroy of TableDataSourceAdaptor((uint64_t)v9);
        v5 = 0;
      }
      else
      {
        v7 = v9[169];
        outlined destroy of TableDataSourceAdaptor((uint64_t)v9);
        v5 = v7 != 2;
      }
    }
    outlined destroy of TableDataSourceAdaptor((uint64_t)v10);
    outlined destroy of TableDataSourceAdaptor((uint64_t)v11);
  }
  LOBYTE(forSectionAt) = v5;
  return forSectionAt;
}

uint64_t TableDataSourceAdaptor.headerDisplayMode.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD v4[6];
  _OWORD v5[3];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[3];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 40);
  if (*(_QWORD *)(v1 + 16))
  {
    outlined init with copy of TableSections.Item(v1 + 32, (uint64_t)v9);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
    v11 = 0u;
    v12 = 0u;
    v10 = 1;
    v13 = 0;
  }
  outlined init with copy of TableRowList?((uint64_t)v9, (uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for TableSections.Item?, (uint64_t)&type metadata for TableSections.Item, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if ((_QWORD)v6 == 1)
  {
    outlined destroy of TableRowList?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for TableSections.Item?, (uint64_t)&type metadata for TableSections.Item, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    return 2;
  }
  v4[2] = v5[2];
  v4[3] = v6;
  v4[4] = v7;
  v4[5] = v8;
  v4[0] = v5[0];
  v4[1] = v5[1];
  v2 = *(_QWORD *)&v5[0];
  outlined destroy of TableSections.Item((uint64_t)v4);
  outlined destroy of TableRowList?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for TableSections.Item?, (uint64_t)&type metadata for TableSections.Item, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v2)
    return 2;
  return 1;
}

uint64_t TableDataSourceAdaptor.configureHeader(_:transaction:forSectionAt:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  _QWORD v17[5];
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[9];
  char v21;
  BOOL v22;

  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (*(_QWORD *)(v4 + 16) <= a3)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v6 = (void *)result;
  v7 = v4 + 96 * a3;
  v8 = *(_QWORD *)(v7 + 32);
  outlined init with copy of TableColumnCollection(v3 + 48, (uint64_t)v20);
  v9 = *(_QWORD *)(v3 + 112);
  v10 = *(_QWORD *)(v3 + 120);
  v11 = *(_QWORD *)(v3 + 128);
  v12 = *(_BYTE *)(v3 + 104);
  v19[0] = v6;
  v19[1] = a2;
  v20[6] = v9;
  v20[7] = v10;
  v20[8] = v11;
  v21 = v12;
  v22 = v8 == 0;
  if (*(_BYTE *)(v7 + 40) == 1)
  {
    v13 = outlined init with copy of TableRowList(v3, (uint64_t)v17);
    MEMORY[0x1E0C80A78](v13, v14);
    v15 = v6;
    outlined copy of Transaction?(a2);
    outlined copy of Binding<[SwiftUIAnySortComparator]>?(v9, v10);
    static Update.ensure<A>(_:)();
    outlined destroy of TableRowList((uint64_t)v17);
  }
  else
  {
    v16 = v6;
    outlined copy of Transaction?(a2);
    outlined copy of Binding<[SwiftUIAnySortComparator]>?(v9, v10);
    ViewTraitCollection.init()();
    v18 = v17[0];
    CollectionViewTableHeaderVisitor.visitCommon(view:traits:)(0, &v18);
    swift_bridgeObjectRelease();
  }
  return outlined destroy of CollectionViewTableHeaderVisitor((uint64_t)v19);
}

uint64_t TableDataSourceAdaptor.configureCell(_:transaction:context:)(_BYTE *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  int *v20;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  _BYTE v26[24];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  v7 = v6;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v26[-v9];
  v11 = type metadata accessor for CollectionViewCellModifier();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v26[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of TableRowList?(a3 + 160, (uint64_t)&v28, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (*((_QWORD *)&v29 + 1))
  {
    v31 = v28;
    v32 = v29;
    v33 = v30;
    static _ViewList_ID.explicit<A>(_:)();
    *(_OWORD *)&v26[8] = v28;
    _ViewList_ID.canonicalID.getter();
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&v31);
    v15 = *((_QWORD *)&v27 + 1);
    v16 = v27;
  }
  else
  {
    outlined destroy of TableRowList?((uint64_t)&v28, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    *(_QWORD *)&v27 = *(_QWORD *)(a3 + 152);
    *(_QWORD *)&v28 = 0;
    BYTE8(v28) = 1;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    _ViewList_ID.init(implicitID:)();
    v27 = v31;
    _ViewList_ID.canonicalID.getter();
    swift_bridgeObjectRelease();
    v15 = *((_QWORD *)&v28 + 1);
    v16 = v28;
  }
  LOBYTE(v27) = 0;
  *(_QWORD *)&v28 = *(_QWORD *)(a3 + 152);
  *(_QWORD *)&v31 = v16;
  *((_QWORD *)&v31 + 1) = v15;
  swift_retain();
  swift_bridgeObjectRetain();
  CollectionViewCellModifier.init(position:traits:minHeight:id:alignment:shouldHugContent:)((unsigned __int8 *)&v27, (uint64_t *)&v31, 0, 0, (uint64_t)v14, 44.0);
  v17 = &a1[direct field offset for ListCollectionViewCellBase.viewListID];
  *v17 = 0;
  v17[1] = 0;
  swift_bridgeObjectRelease();
  v18 = direct field offset for TableCollectionViewCell.isHeader;
  v19 = a1[direct field offset for TableCollectionViewCell.isHeader];
  a1[direct field offset for TableCollectionViewCell.isHeader] = 0;
  if (v19 == 1)
  {
    objc_msgSend(a1, sel_setNeedsUpdateConfiguration);
    objc_msgSend(a1, sel_setAutomaticallyUpdatesBackgroundConfiguration_, a1[v18]);
  }
  outlined init with copy of TableRowView(a3 + 16, (uint64_t)v10);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, (uint64_t)&v10[*(int *)(v7 + 36)], (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
  if (one-time initialization token for isEnabledInProcessEnv != -1)
    swift_once();
  if (static ListUsesUIHostingConfigurationFeature.isEnabledInProcessEnv == 1)
  {
    v20 = (int *)type metadata accessor for UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView>();
    *((_QWORD *)&v32 + 1) = v20;
    v33 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView> and conformance UIHostingConfiguration<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView>, (uint64_t)&protocol conformance descriptor for UIHostingConfiguration<A, B>);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v31);
    v22 = v20[14];
    OptionalEdgeInsets.init()();
    v23 = (char *)boxed_opaque_existential_1 + v20[16];
    *(_QWORD *)v23 = 0;
    v23[8] = 1;
    *((_QWORD *)v23 + 2) = 0;
    v23[24] = 1;
    *((_BYTE *)boxed_opaque_existential_1 + v20[17]) = 1;
    *((_BYTE *)boxed_opaque_existential_1 + v20[18]) = 0;
    outlined init with copy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>((uint64_t)v10, (uint64_t)boxed_opaque_existential_1, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    *((_BYTE *)boxed_opaque_existential_1 + v22) = 0;
    MEMORY[0x18D75D9F0](&v31);
  }
  else
  {
    specialized PlatformListCell<>.defaultConfigureContent(_:transaction:)((uint64_t)v10, a2);
  }
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  *(_QWORD *)&v31 = *(_QWORD *)(a3 + 152);
  LOBYTE(v28) = 0;
  v24 = ViewTraitCollection.listItemBackground(kind:)((unsigned __int8 *)&v28);
  swift_bridgeObjectRetain();
  specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(v24, a2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewCellModifier);
}

uint64_t specialized TableSections.firstIndexPath<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t (*v7)(void);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  _OWORD v30[7];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v4 = *(_QWORD *)(v2 + 40);
  v19 = v4 + 32;
  v22 = *(_QWORD *)(v4 + 16);
  v20 = v4;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  v7 = MEMORY[0x1E0DEB940];
  while (1)
  {
    if (v6 == v22)
    {
      v32 = 0u;
      v33 = 0u;
      v31 = 0u;
      *(_QWORD *)&v34 = 0;
      *((_QWORD *)&v34 + 1) = 1;
      v35 = 0u;
      v36 = 0u;
      v6 = v22;
      v37 = 0;
      goto LABEL_6;
    }
    if (v6 >= *(_QWORD *)(v20 + 16))
      break;
    outlined init with copy of TableSections.Item(v19 + 96 * v6, (uint64_t)v30 + 8);
    *(_QWORD *)&v31 = v6;
    v8 = *(_OWORD *)((char *)&v30[3] + 8);
    v18[2] = *(_OWORD *)((char *)&v30[2] + 8);
    v18[3] = v8;
    v9 = *(_OWORD *)((char *)&v30[5] + 8);
    v18[4] = *(_OWORD *)((char *)&v30[4] + 8);
    v18[5] = v9;
    v10 = *(_OWORD *)((char *)&v30[1] + 8);
    ++v6;
    *v18 = *(_OWORD *)((char *)v30 + 8);
    v18[1] = v10;
LABEL_6:
    outlined init with take of (offset: Int, element: TableSections.Item)?((uint64_t)&v31, (uint64_t)&v38);
    if ((_QWORD)v42 == 1)
    {
      swift_bridgeObjectRelease();
      v15 = type metadata accessor for IndexPath();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 1, 1, v15);
    }
    v21 = v38;
    v33 = v41;
    v34 = v42;
    v35 = v43;
    v36 = v44;
    v31 = v39;
    v32 = v40;
    v26 = a1;
    v27 = v40;
    v28 = 0;
    v29 = 0;
    v11 = outlined init with copy of TableRowList?((uint64_t)&v32 + 8, (uint64_t)&v23, (uint64_t)&lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, (uint64_t)v7, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    if (*((_QWORD *)&v24 + 1))
    {
      v30[0] = v23;
      v30[1] = v24;
      *(_QWORD *)&v30[2] = v25;
      MEMORY[0x1E0C80A78](v11, v12);
      swift_retain();
      static Update.ensure<A>(_:)();
      outlined destroy of TableRowList((uint64_t)v30);
    }
    else
    {
      swift_retain();
      v13 = outlined destroy of TableRowList?((uint64_t)&v23, (uint64_t)&lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      MEMORY[0x1E0C80A78](v13, v14);
      static Update.ensure<A>(_:)();
    }
    if (v28 == 1)
    {
      swift_bridgeObjectRelease();
      MEMORY[0x18D754BAC](v29, v21);
      swift_release();
      outlined destroy of TableSections.Item((uint64_t)&v31);
      v16 = type metadata accessor for IndexPath();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 0, 1, v16);
    }
    swift_release();
    result = outlined destroy of TableSections.Item((uint64_t)&v31);
  }
  __break(1u);
  return result;
}

uint64_t TableDataSourceAdaptor.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t result;
  _BYTE v9[40];
  uint64_t (*v10)();
  uint64_t v11;
  unsigned __int8 v12;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  v10 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  v11 = v6;
  v12 = 0;
  outlined init with copy of TableRowList(v3, (uint64_t)v9);
  swift_retain();
  static Update.ensure<A>(_:)();
  outlined destroy of TableRowList((uint64_t)v9);
  v7 = v12;
  swift_release();
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((a3 & 1) == 0)
    return v7 ^ 1u;
  __break(1u);
  return result;
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ()(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

unint64_t TableDataSourceAdaptor.contextForItem(index:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  int v8;
  int v9;
  _BOOL8 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  char v39;
  _BYTE v40[128];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[27];
  uint64_t v45;
  _BYTE v46[24];
  uint64_t v47;

  if ((result & 0x8000000000000000) != 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v4 = result;
  v6 = *(_QWORD *)(v3 + 40);
  if (*(_QWORD *)(v6 + 16) <= result)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  outlined init with copy of TableSections.Item(v6 + 96 * result + 32, (uint64_t)v46);
  v8 = *(unsigned __int8 *)(v3 + 170);
  if (v8 == 1)
  {
    v9 = *(unsigned __int8 *)(v3 + 168);
    outlined init with copy of TableDataSourceAdaptor(v3, (uint64_t)v37);
    if (v9 == 1)
    {
      result = outlined destroy of TableDataSourceAdaptor((uint64_t)v37);
      v10 = 0;
    }
    else
    {
      v12 = BYTE9(v41);
      result = outlined destroy of TableDataSourceAdaptor((uint64_t)v37);
      v10 = v12 != 2;
    }
    v13 = *(_QWORD *)(v3 + 40);
    if (*(_QWORD *)(v13 + 16) <= v4)
      goto LABEL_34;
    v14 = v13 + 32;
    v15 = v13 + 32 + 96 * v4;
    v16 = *(_QWORD *)(v15 + 80);
    v17 = *(_QWORD *)(v15 + 88);
    v18 = __OFADD__(v16, v17);
    v19 = v16 + v17;
    if (v18)
    {
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 < a2 || v16 > a2 || v19 < v16)
      goto LABEL_36;
    v18 = __OFSUB__(a2, v16);
    v22 = a2 - v16;
    if (v18)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    v23 = v10 + v22;
    if (__OFADD__(v10, v22))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v31 = a3;
    if (!v4)
    {
      v24 = 0;
LABEL_25:
      v11 = v23 + v24;
      if (!__OFADD__(v23, v24))
      {
        a3 = v31;
        goto LABEL_27;
      }
LABEL_39:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    v24 = 0;
    v25 = v4;
    while (1)
    {
      result = outlined init with copy of TableSections.Item(v14, (uint64_t)v37);
      v18 = __OFADD__(v24, v38);
      v24 += v38;
      if (v18)
        break;
      outlined destroy of TableSections.Item((uint64_t)v37);
      v14 += 96;
      if (!--v25)
      {
        result = swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    __break(1u);
    goto LABEL_32;
  }
  v11 = 0;
LABEL_27:
  v43 = 0u;
  memset(v44, 0, sizeof(v44));
  v41 = 0u;
  v42 = 0u;
  memset(v40, 0, sizeof(v40));
  v26 = *(_QWORD *)(v3 + 96);
  v37[0] = v4;
  v37[1] = a2;
  v38 = v11;
  v39 = v8 ^ 1;
  v45 = v26;
  v27 = outlined init with copy of TableRowList?((uint64_t)&v47, (uint64_t)&v32, (uint64_t)&lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (*((_QWORD *)&v33 + 1))
  {
    v35[0] = v32;
    v35[1] = v33;
    v36 = v34;
    MEMORY[0x1E0C80A78](v27, v28);
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of TableRowList?((uint64_t)&v32, (uint64_t)&lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    v29 = outlined init with copy of TableRowList(v3, (uint64_t)v35);
    MEMORY[0x1E0C80A78](v29, v30);
  }
  static Update.ensure<A>(_:)();
  outlined destroy of TableRowList((uint64_t)v35);
  outlined destroy of TableSections.Item((uint64_t)v46);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v40, a3, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?);
  return outlined destroy of UIBackgroundConfiguration?((uint64_t)v37, (uint64_t)&lazy cache variable for type metadata for TableContentVisitor<TableDataSourceAdaptor>, (uint64_t)type metadata accessor for TableContentVisitor, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
}

uint64_t protocol witness for CollectionViewListDataSourceBase.style.getter in conformance TableDataSourceAdaptor@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  unsigned int *v5;

  v3 = *(unsigned __int8 *)(v1 + 168);
  v4 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v5 = (unsigned int *)MEMORY[0x1E0DC2890];
  if (!v3)
    v5 = (unsigned int *)MEMORY[0x1E0DC2880];
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(a1, *v5, v4);
}

uint64_t protocol witness for CollectionViewListDataSourceBase.section(forSectionLabelIndex:) in conformance TableDataSourceAdaptor()
{
  return 0;
}

BOOL protocol witness for ListCoreDataSource.hasGlobalHeader.getter in conformance TableDataSourceAdaptor()
{
  uint64_t v0;
  int v1;
  int v3;
  _BYTE v4[176];

  v1 = *(unsigned __int8 *)(v0 + 168);
  outlined init with copy of TableDataSourceAdaptor(v0, (uint64_t)v4);
  if (v1 == 1)
  {
    outlined destroy of TableDataSourceAdaptor((uint64_t)v4);
    return 0;
  }
  else
  {
    v3 = v4[169];
    outlined destroy of TableDataSourceAdaptor((uint64_t)v4);
    return v3 != 2;
  }
}

uint64_t protocol witness for ListCoreDataSource.configureHeader(_:transaction:forSectionAt:) in conformance TableDataSourceAdaptor(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  return TableDataSourceAdaptor.configureHeader(_:transaction:forSectionAt:)(a1, a2, *a3);
}

void protocol witness for ListCoreDataSource.configureFooter(_:transaction:forSectionAt:) in conformance TableDataSourceAdaptor()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for ListCoreDataSource.spacing(forSectionAt:) in conformance TableDataSourceAdaptor(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t protocol witness for ListCoreDataSource.configureCell(_:transaction:context:) in conformance TableDataSourceAdaptor(_BYTE *a1, unint64_t a2, uint64_t a3)
{
  return TableDataSourceAdaptor.configureCell(_:transaction:context:)(a1, a2, a3);
}

uint64_t protocol witness for ListCoreDataSource.firstIndexPath(viewListID:) in conformance TableDataSourceAdaptor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 8))
  {
    v3 = swift_retain();
    specialized TableSections.firstIndexPath<A>(for:)(v3, a2);
    return swift_release();
  }
  else
  {
    v5 = type metadata accessor for IndexPath();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, 1, 1, v5);
  }
}

unint64_t protocol witness for ListCoreDataSource.contextForItem(index:) in conformance TableDataSourceAdaptor@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return TableDataSourceAdaptor.contextForItem(index:)(*a1, *a2, a3);
}

uint64_t protocol witness for ListCoreDataSource.separatorConfiguration(forRowAt:) in conformance TableDataSourceAdaptor(_QWORD *a1, _QWORD *a2)
{
  unsigned int v2;

  if (*a1)
    v2 = 1;
  else
    v2 = 2;
  if (*a2)
    return 0;
  else
    return v2;
}

uint64_t protocol witness for ListDiffable.sectionIDs.getter in conformance TableDataSourceAdaptor@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 40);
  a1[1] = protocol witness for OptionSet.init(rawValue:) in conformance UIRectEdge;
  a1[2] = 0;
  return swift_bridgeObjectRetain();
}

BOOL protocol witness for ListDiffable.hasHeader(forSectionAt:) in conformance TableDataSourceAdaptor(Swift::Int *a1)
{
  return TableDataSourceAdaptor.hasHeader(forSectionAt:)(*a1);
}

unint64_t *protocol witness for ListDiffable.rowIDs(forSectionAt:) in conformance TableDataSourceAdaptor@<X0>(unint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 40);
    if (v3 < *(_QWORD *)(v4 + 16))
    {
      v5 = v4 + 96 * v3;
      v6 = *(_QWORD *)(v5 + 96);
      v7 = *(_BYTE *)(v5 + 104);
      *(_QWORD *)a2 = v6;
      *(_BYTE *)(a2 + 8) = v7;
      *(_OWORD *)(a2 + 16) = *(_OWORD *)(v5 + 112);
      return (unint64_t *)outlined copy of ResolvedTableRowIDs.Storage(v6, v7);
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of TableSections.Item(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TableSections.Item(a2, a1);
  return a2;
}

uint64_t outlined init with copy of TableRowList(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ZoomPresentationTransitionStyle(a2, a1);
  return a2;
}

uint64_t specialized _UIHostingView.updateRemovedState()()
{
  return specialized _UIHostingView.updateRemovedState()();
}

{
  _QWORD *v0;
  _QWORD *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8);
  v3 = swift_beginAccess();
  v5 = MEMORY[0x1E0DEE9C0];
  if (*v2 == 1)
  {
    MEMORY[0x1E0C80A78](v3, v4);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for ()?, v5 + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v6 = static Update.locked<A>(_:)();
    v8 = *(_QWORD *)((*v1 & *v0) + 0x148);
    v9 = *(void **)((char *)v0 + v8);
    if (v9)
    {
      MEMORY[0x1E0C80A78](v6, v7);
      v11 = v10;
      static Update.locked<A>(_:)();

      v9 = *(void **)((char *)v0 + v8);
    }
    *(_QWORD *)((char *)v0 + v8) = 0;

  }
  MEMORY[0x1E0C80A78](v3, v4);
  return static Update.ensure<A>(_:)();
}

{
  return specialized _UIHostingView.updateRemovedState()();
}

uint64_t specialized _UIHostingView.setRootView(_:transaction:)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(0, a3);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v12 - v8;
  outlined init with copy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>(a1, (uint64_t)&v12 - v8, a3);
  v10 = (uint64_t)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x60);
  swift_beginAccess();
  outlined assign with take of ModifiedContent<TableRowView, CollectionViewCellModifier>((uint64_t)v9, v10, a3);
  swift_endAccess();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
  GraphHost.asyncTransaction(_:id:_:)();
  return swift_release_n();
}

uint64_t specialized _UIHostingView.setRootView(_:transaction:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _BYTE v4[112];

  outlined init with copy of TabItem.RootView(a1, (uint64_t)v4);
  v2 = (uint64_t)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x60);
  swift_beginAccess();
  outlined assign with take of TabItem.RootView((uint64_t)v4, v2);
  swift_endAccess();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
  GraphHost.asyncTransaction(_:id:_:)();
  return swift_release_n();
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[256];

  v2 = MEMORY[0x1E0CE0A40];
  outlined init with copy of TableRowList?(a1, (uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<AnyView, EmptyModifier>);
  v3 = (uint64_t)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x60);
  swift_beginAccess();
  outlined assign with take of ModifiedContent<_ViewList_View, ListTableCellModifier>((uint64_t)v5, v3, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, v2, (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<AnyView, EmptyModifier>);
  swift_endAccess();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
  GraphHost.asyncTransaction(_:id:_:)();
  return swift_release_n();
}

{
  _QWORD *v1;
  uint64_t v2;
  _BYTE v4[96];

  outlined init with copy of BridgedNavigationView.RootView(a1, (uint64_t)v4);
  v2 = (uint64_t)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x60);
  swift_beginAccess();
  outlined assign with take of BridgedNavigationView.RootView((uint64_t)v4, v2);
  swift_endAccess();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
  GraphHost.asyncTransaction(_:id:_:)();
  return swift_release_n();
}

uint64_t specialized _UIHostingView.as<A>(_:)()
{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t result;
  id v4;
  unint64_t *v5;
  void *v6;

  v1 = type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for ContainerBackgroundHost);
  if (v1 == type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for FocusHost))
  {
    v5 = (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>;
    v6 = &protocol conformance descriptor for _UIHostingView<A>;
LABEL_13:
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(v5, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>, (uint64_t)v6);
    swift_unknownObjectRetain();
    return (uint64_t)v0;
  }
  if (v1 == type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListHost)|| v1 == type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityHost)|| v1 == type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for UIViewControllerProvider))
  {
    goto LABEL_17;
  }
  if (v1 == type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for EventGraphHost))
  {
    v5 = (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>;
    v6 = &protocol conformance descriptor for _UIHostingView<A>;
    goto LABEL_13;
  }
  if (v1 == type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for PointerHost)|| v1 == type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for WindowLayoutHost))
  {
    goto LABEL_17;
  }
  v2 = type metadata accessor for UIView();
  result = type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for CurrentEventProvider);
  if (v1 != v2 && v1 != result)
  {
    if (v1 != type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for FallbackResponderProvider))
    {
      v4 = v0;
      return (uint64_t)v0;
    }
LABEL_17:
    swift_unknownObjectRetain();
    return (uint64_t)v0;
  }
  __break(1u);
  return result;
}

void specialized ListCollectionViewCellBase.backgroundHost.setter(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  _BYTE *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;

  v2 = type metadata accessor for UIBackgroundConfiguration();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v22 - v14;
  v16 = a1;
  MEMORY[0x18D75D9FC]();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v15, 1, v2))
  {
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t)MEMORY[0x1E0DC2130], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
LABEL_3:
    v17 = 0;
    goto LABEL_4;
  }
  v21 = (void *)UIBackgroundConfiguration.customView.getter();
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t)MEMORY[0x1E0DC2130], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  if (!v21)
    goto LABEL_3;
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(0);
  v17 = (_QWORD *)swift_dynamicCastClass();
  if (!v17)

LABEL_4:
  if (a1)
  {

    if (v17 && (v17, v16 == v17))
    {

    }
    else
    {
      v18 = (char *)v16 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v16) + 0xF8);
      swift_beginAccess();
      *v18 = 1;
      v19 = v16;
      specialized _UIHostingView.updateRemovedState()();
      static UIBackgroundConfiguration.clear()();
      v20 = v19;
      UIBackgroundConfiguration.customView.setter();
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v11, v6, v2);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v11, 0, 1, v2);
      MEMORY[0x18D75DA08](v11);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    }
  }
  else if (v17)
  {

    MEMORY[0x18D75DA14]();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v11, 0, 1, v2);
    MEMORY[0x18D75DA08](v11);
  }
}

void specialized PlatformListViewBase<>.backgroundHost.setter(void *a1, void (*a2)(void), void (*a3)(char *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  _BYTE *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void (*v25)(char *);

  v25 = a3;
  v5 = type metadata accessor for UIBackgroundConfiguration();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, v10);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v25 - v17;
  v19 = a1;
  a2();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v18, 1, v5))
  {
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t)MEMORY[0x1E0DC2130], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
LABEL_3:
    v20 = 0;
    goto LABEL_4;
  }
  v24 = (void *)UIBackgroundConfiguration.customView.getter();
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t)MEMORY[0x1E0DC2130], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  if (!v24)
    goto LABEL_3;
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(0);
  v20 = (_QWORD *)swift_dynamicCastClass();
  if (!v20)

LABEL_4:
  if (a1)
  {

    if (v20 && (v20, v19 == v20))
    {

    }
    else
    {
      v21 = (char *)v19 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v19) + 0xF8);
      swift_beginAccess();
      *v21 = 1;
      v22 = v19;
      specialized _UIHostingView.updateRemovedState()();
      static UIBackgroundConfiguration.clear()();
      v23 = v22;
      UIBackgroundConfiguration.customView.setter();
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v14, v9, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
      v25(v14);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
  }
  else if (v20)
  {

    static UIBackgroundConfiguration.listCell()();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
    v25(v14);
  }
}

uint64_t specialized ListCollectionViewCellBase.host.didset()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _DWORD *v3;

  MEMORY[0x18D75B908]();
  v1 = direct field offset for ListCollectionViewCellBase.host;
  v2 = *(_QWORD **)(v0 + direct field offset for ListCollectionViewCellBase.host);
  if (v2)
  {
    *(_QWORD *)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x240) + 8) = &protocol witness table for ListCollectionViewCellBase<A>;
    swift_unknownObjectWeakAssign();
    if (*(_QWORD *)(v0 + v1))
    {
      lazy protocol witness table accessor for type SwipeActions.Feature and conformance SwipeActions.Feature();
      swift_retain();
      ViewGraph.append<A>(feature:)();
      swift_release();
      if (*(_QWORD *)(v0 + v1))
      {
        swift_retain();
        GraphHost.addPreference<A>(_:)();
        swift_release();
      }
    }
  }
  v3 = (_DWORD *)(v0 + direct field offset for ListCollectionViewCellBase.popUpButtonSeed);
  swift_beginAccess();
  *v3 = -1;
  return static Update.end()();
}

void specialized PlatformListCell<>.defaultConfigureContent(_:transaction:)(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  Class v22;
  id v23;
  _QWORD *v24;
  _BYTE *v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  id v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  id v39;
  _QWORD *v40;
  _WORD v41[16];

  v3 = v2;
  type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v41 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v41 - v16;
  v18 = direct field offset for ListCollectionViewCellBase.host;
  v19 = *(_QWORD **)&v3[direct field offset for ListCollectionViewCellBase.host];
  if (v19)
  {
    if (a2 >= 2)
    {
      v40 = v19;
      outlined copy of Transaction?(a2);
      specialized _UIHostingView.setRootView(_:transaction:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);

      outlined consume of Transaction?(a2);
    }
    else
    {
      outlined init with copy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>(a1, (uint64_t)v41 - v16, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
      outlined init with copy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>((uint64_t)v17, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
      v20 = (uint64_t)v19 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v19) + 0x60);
      swift_beginAccess();
      v21 = v19;
      outlined assign with take of ModifiedContent<TableRowView, CollectionViewCellModifier>((uint64_t)v13, v20, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
      swift_endAccess();
      v41[4] = 1;
      type metadata accessor for CellHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for _UIHostingView);
      lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (uint64_t)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))type metadata accessor for CellHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);

    }
  }
  else
  {
    outlined init with copy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>(a1, (uint64_t)v41 - v16, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    type metadata accessor for CellHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>(0, &lazy cache variable for type metadata for CellHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for CellHostingView);
    v23 = objc_allocWithZone(v22);
    outlined init with copy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>((uint64_t)v17, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    outlined init with copy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>((uint64_t)v13, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    v24 = specialized _UIHostingView.init(rootView:)((uint64_t)v9);
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    v25 = (char *)v24 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v24) + 0xF8);
    swift_beginAccess();
    *v25 = 1;
    v26 = v24;
    specialized _UIHostingView.updateRemovedState()();

    outlined destroy of UIBackgroundConfiguration?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    if (a2 != 1)
    {
      swift_retain();
      GraphHost.emptyTransaction(_:)();
      outlined consume of Transaction?(a2);
    }
    v27 = *(void **)&v3[v18];
    *(_QWORD *)&v3[v18] = v26;
    v28 = v26;

    specialized ListCollectionViewCellBase.host.didset();
    v29 = v28;
    v30 = objc_msgSend(v3, sel_contentView);
    objc_msgSend(v30, sel_bounds);
    v32 = v31;
    v34 = v33;
    v36 = v35;
    v38 = v37;

    objc_msgSend(v29, sel_setFrame_, v32, v34, v36, v38);
    objc_msgSend(v29, sel_setAutoresizingMask_, 18);
    objc_msgSend(v29, sel_setPreservesSuperviewLayoutMargins_, 1);
    v39 = objc_msgSend(v3, sel_contentView);
    objc_msgSend(v39, sel_addSubview_, v29);

  }
}

{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  Class v24;
  id v25;
  _QWORD *v26;
  _BYTE *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  id v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  id v41;
  _QWORD *v42;
  _WORD v43[16];

  v3 = v2;
  type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v43 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v43 - v16;
  v18 = direct field offset for ListCollectionViewCellBase.host;
  v19 = *(_QWORD **)&v3[direct field offset for ListCollectionViewCellBase.host];
  if (v19)
  {
    if (a2 >= 2)
    {
      v42 = v19;
      outlined copy of Transaction?(a2);
      specialized _UIHostingView.setRootView(_:transaction:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);

      outlined consume of Transaction?(a2);
    }
    else
    {
      v20 = MEMORY[0x1E0CE0A40];
      outlined init with copy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>(a1, (uint64_t)v43 - v16, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
      outlined init with copy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>((uint64_t)v17, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
      v21 = (uint64_t)v19 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v19) + 0x60);
      swift_beginAccess();
      v22 = v19;
      outlined assign with take of ModifiedContent<TableRowView, CollectionViewCellModifier>((uint64_t)v13, v21, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
      swift_endAccess();
      v43[4] = 1;
      type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for _UIHostingView);
      lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (uint64_t)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, v20, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);

    }
  }
  else
  {
    v23 = MEMORY[0x1E0CE0A40];
    outlined init with copy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>(a1, (uint64_t)v43 - v16, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(0, &lazy cache variable for type metadata for CellHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for CellHostingView);
    v25 = objc_allocWithZone(v24);
    outlined init with copy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>((uint64_t)v17, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    outlined init with copy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>((uint64_t)v13, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    v26 = specialized _UIHostingView.init(rootView:)((uint64_t)v9);
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, v23, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    v27 = (char *)v26 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v26) + 0xF8);
    swift_beginAccess();
    *v27 = 1;
    v28 = v26;
    specialized _UIHostingView.updateRemovedState()();

    outlined destroy of UIBackgroundConfiguration?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, v23, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    if (a2 != 1)
    {
      swift_retain();
      GraphHost.emptyTransaction(_:)();
      outlined consume of Transaction?(a2);
    }
    v29 = *(void **)&v3[v18];
    *(_QWORD *)&v3[v18] = v28;
    v30 = v28;

    specialized ListCollectionViewCellBase.host.didset();
    v31 = v30;
    v32 = objc_msgSend(v3, sel_contentView);
    objc_msgSend(v32, sel_bounds);
    v34 = v33;
    v36 = v35;
    v38 = v37;
    v40 = v39;

    objc_msgSend(v31, sel_setFrame_, v34, v36, v38, v40);
    objc_msgSend(v31, sel_setAutoresizingMask_, 18);
    objc_msgSend(v31, sel_setPreservesSuperviewLayoutMargins_, 1);
    v41 = objc_msgSend(v3, sel_contentView);
    objc_msgSend(v41, sel_addSubview_, v31);

  }
}

{
  char *v2;
  char *v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  Class v12;
  id v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  id v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  id v31;
  _QWORD *v32;
  _BYTE v33[256];
  _WORD v34[128];
  _BYTE v35[264];

  v3 = v2;
  v6 = OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host;
  v7 = *(_QWORD **)&v3[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host];
  if (v7)
  {
    if (a2 >= 2)
    {
      v32 = v7;
      outlined copy of Transaction?(a2);
      specialized _UIHostingView.setRootView(_:transaction:)(a1);

      outlined consume of Transaction?(a2);
    }
    else
    {
      v8 = MEMORY[0x1E0CE0A40];
      outlined init with copy of TableRowList?(a1, (uint64_t)v35, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<AnyView, EmptyModifier>);
      outlined init with copy of TableRowList?((uint64_t)v35, (uint64_t)v34, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, v8, (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<AnyView, EmptyModifier>);
      v9 = (uint64_t)v7 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v7) + 0x60);
      swift_beginAccess();
      v10 = v7;
      outlined assign with take of ModifiedContent<_ViewList_View, ListTableCellModifier>((uint64_t)v34, v9, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, v8, (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<AnyView, EmptyModifier>);
      swift_endAccess();
      v34[0] = 1;
      type metadata accessor for CellHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for _UIHostingView);
      lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>();
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      outlined destroy of TableRowList?((uint64_t)v35, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, v8, (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<AnyView, EmptyModifier>);

    }
  }
  else
  {
    v11 = MEMORY[0x1E0CE0A40];
    outlined init with copy of TableRowList?(a1, (uint64_t)v35, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<AnyView, EmptyModifier>);
    type metadata accessor for CellHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>(0, &lazy cache variable for type metadata for CellHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for CellHostingView);
    v13 = objc_allocWithZone(v12);
    outlined init with copy of TableRowList?((uint64_t)v35, (uint64_t)v34, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, v11, (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<AnyView, EmptyModifier>);
    outlined init with copy of TableRowList?((uint64_t)v34, (uint64_t)v33, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, v11, (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<AnyView, EmptyModifier>);
    v14 = specialized _UIHostingView.init(rootView:)((uint64_t)v33);
    outlined destroy of TableRowList?((uint64_t)v34, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, v11, (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<AnyView, EmptyModifier>);
    v15 = (char *)v14 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v14) + 0xF8);
    swift_beginAccess();
    *v15 = 1;
    v16 = v14;
    specialized _UIHostingView.updateRemovedState()();

    v17 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    outlined destroy of TableRowList?((uint64_t)v35, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, v11, (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<AnyView, EmptyModifier>);
    if (a2 != 1)
    {
      swift_retain();
      GraphHost.emptyTransaction(_:)();
      outlined consume of Transaction?(a2);
    }
    v18 = *(void **)&v3[v6];
    *(_QWORD *)&v3[v6] = v16;
    v19 = v16;

    v20 = *(_QWORD **)&v3[v6];
    if (v20)
    {
      *(_QWORD *)((char *)v20 + *(_QWORD *)((*v17 & *v20) + 0x240) + 8) = &protocol witness table for ListTableViewCell;
      swift_unknownObjectWeakAssign();
    }
    ListTableViewCell.updateSeparatorsFromConfiguration()();

    v21 = v19;
    v22 = objc_msgSend(v3, sel_contentView);
    objc_msgSend(v22, sel_bounds);
    v24 = v23;
    v26 = v25;
    v28 = v27;
    v30 = v29;

    objc_msgSend(v21, sel_setFrame_, v24, v26, v28, v30);
    objc_msgSend(v21, sel_setAutoresizingMask_, 18);
    objc_msgSend(v21, sel_setPreservesSuperviewLayoutMargins_, 1);
    v31 = objc_msgSend(v3, sel_contentView);
    objc_msgSend(v31, sel_addSubview_, v21);

  }
}

uint64_t partial apply for specialized closure #1 in TableRowList.visitRows<A>(applying:from:)()
{
  uint64_t v0;

  return specialized closure #1 in TableRowList.visitRows<A>(applying:from:)(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

{
  uint64_t v0;

  return specialized closure #1 in TableRowList.visitRows<A>(applying:from:)(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

{
  uint64_t v0;

  return specialized closure #1 in TableRowList.visitRows<A>(applying:from:)(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

{
  uint64_t v0;

  return specialized closure #1 in TableRowList.visitRows<A>(applying:from:)(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

{
  uint64_t v0;

  return specialized closure #1 in TableRowList.visitRows<A>(applying:from:)(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

{
  uint64_t v0;

  return specialized closure #1 in TableRowList.visitRows<A>(applying:from:)(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

{
  uint64_t v0;

  return specialized closure #1 in TableRowList.visitRows<A>(applying:from:)(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

{
  uint64_t v0;

  return specialized closure #1 in TableRowList.visitRows<A>(applying:from:)(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t outlined destroy of TableRowList(uint64_t a1)
{
  destroy for AccessibilityRelationshipScope.Key();
  return a1;
}

uint64_t outlined destroy of TableSections.Item(uint64_t a1)
{
  destroy for TableSections.Item(a1);
  return a1;
}

void type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>?)
  {
    type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>(255, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for _RowVisitationContext);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>?);
  }
}

unint64_t lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor;
  if (!lazy protocol witness table cache variable for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableDataSourceAdaptor, &type metadata for TableDataSourceAdaptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor;
  if (!lazy protocol witness table cache variable for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableDataSourceAdaptor, &type metadata for TableDataSourceAdaptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor;
  if (!lazy protocol witness table cache variable for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableDataSourceAdaptor, &type metadata for TableDataSourceAdaptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor);
  }
  return result;
}

void type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
    v7 = a3(a1, &type metadata for TableDataSourceAdaptor, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t outlined init with copy of TableDataSourceAdaptor(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TableDataSourceAdaptor(a2, a1);
  return a2;
}

uint64_t outlined destroy of TableDataSourceAdaptor(uint64_t a1)
{
  destroy for TableDataSourceAdaptor(a1);
  return a1;
}

void specialized closure #1 in _UIHostingView.updateRemovedState()(_QWORD *a1, char *a2)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)((char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x68));
  v3 = *a2;
  swift_beginAccess();
  *(_BYTE *)(v2 + 169) = v3;
  GraphHost.updateRemovedState()();
}

void specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  BOOL *v18;
  _BYTE v19[24];

  type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = &v19[-v5];
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v19[-v9];
  swift_beginAccess();
  v11 = (_QWORD *)MEMORY[0x18D760234](a1 + 16);
  if (v11)
  {
    v12 = v11;
    v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v14 = (void *)MEMORY[0x18D760234]((char *)v11 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v11) + 0x130));
    v15 = v14;
    if (v14)

    v16 = v15 != 0;
    v17 = (uint64_t)v12 + *(_QWORD *)((*v13 & *v12) + 0x60);
    swift_beginAccess();
    outlined init with copy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>(v17, (uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    v18 = &v6[*(int *)(v3 + 36)];
    *v18 = v16;
    v18[8] = 0;
    *((_QWORD *)v18 + 2) = 0;
    outlined init with copy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v6, (uint64_t)v10, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    outlined destroy of ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v6, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>();
    ViewGraph.setRootView<A>(_:)();
    outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);

  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  BOOL *v18;
  _BYTE v19[24];

  type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = &v19[-v5];
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v19[-v9];
  swift_beginAccess();
  v11 = (_QWORD *)MEMORY[0x18D760234](a1 + 16);
  if (v11)
  {
    v12 = v11;
    v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v14 = (void *)MEMORY[0x18D760234]((char *)v11 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v11) + 0x130));
    v15 = v14;
    if (v14)

    v16 = v15 != 0;
    v17 = (uint64_t)v12 + *(_QWORD *)((*v13 & *v12) + 0x60);
    swift_beginAccess();
    outlined init with copy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>(v17, (uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    v18 = &v6[*(int *)(v3 + 36)];
    *v18 = v16;
    v18[8] = 0;
    *((_QWORD *)v18 + 2) = 0;
    outlined init with copy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v6, (uint64_t)v10, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    outlined destroy of ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v6, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>();
    ViewGraph.setRootView<A>(_:)();
    outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);

  }
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  BOOL v7;
  uint64_t v8;
  _BYTE v9[128];
  uint64_t v10;
  _BYTE v11[136];

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (_QWORD *)MEMORY[0x18D760234](v1);
  if (v2)
  {
    v3 = v2;
    v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v5 = (void *)MEMORY[0x18D760234]((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x130));
    v6 = v5;
    if (v5)

    v7 = v6 != 0;
    v8 = (uint64_t)v3 + *(_QWORD *)((*v4 & *v3) + 0x60);
    swift_beginAccess();
    outlined init with copy of TabItem.RootView(v8, (uint64_t)v9);
    v9[112] = v7;
    v9[120] = 0;
    v10 = 0;
    outlined init with copy of TableRowList?((uint64_t)v9, (uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TabItem.RootView, EditModeScopeModifier>, (uint64_t)&type metadata for TabItem.RootView, (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<AnyView, EmptyModifier>);
    outlined destroy of TableRowList?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TabItem.RootView, EditModeScopeModifier>, (uint64_t)&type metadata for TabItem.RootView, (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<AnyView, EmptyModifier>);
    type metadata accessor for ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>();
    ViewGraph.setRootView<A>(_:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>);

  }
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  BOOL v7;
  uint64_t v8;
  _BYTE v9[272];
  uint64_t v10;
  _BYTE v11[280];

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (_QWORD *)MEMORY[0x18D760234](v1);
  if (v2)
  {
    v3 = v2;
    v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v5 = (void *)MEMORY[0x18D760234]((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x130));
    v6 = v5;
    if (v5)

    v7 = v6 != 0;
    v8 = (uint64_t)v3 + *(_QWORD *)((*v4 & *v3) + 0x60);
    swift_beginAccess();
    outlined init with copy of TableRowList?(v8, (uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<AnyView, EmptyModifier>);
    v9[256] = v7;
    v9[264] = 0;
    v10 = 0;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v9, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
    ViewGraph.setRootView<A>(_:)();
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (uint64_t)type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>);

  }
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  BOOL v7;
  uint64_t v8;
  _BYTE v9[112];
  uint64_t v10;
  _BYTE v11[120];

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (_QWORD *)MEMORY[0x18D760234](v1);
  if (v2)
  {
    v3 = v2;
    v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v5 = (void *)MEMORY[0x18D760234]((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x130));
    v6 = v5;
    if (v5)

    v7 = v6 != 0;
    v8 = (uint64_t)v3 + *(_QWORD *)((*v4 & *v3) + 0x60);
    swift_beginAccess();
    outlined init with copy of BridgedNavigationView.RootView(v8, (uint64_t)v9);
    v9[96] = v7;
    v9[104] = 0;
    v10 = 0;
    outlined init with copy of TableRowList?((uint64_t)v9, (uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<AnyView, EmptyModifier>);
    outlined destroy of TableRowList?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<AnyView, EmptyModifier>);
    type metadata accessor for ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>();
    ViewGraph.setRootView<A>(_:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier>);

  }
}

_QWORD *specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  void *v3;
  void *v4;

  v1 = a1 + 16;
  swift_beginAccess();
  result = (_QWORD *)MEMORY[0x18D760234](v1);
  if (result)
  {
    v3 = result;
    v4 = (void *)MEMORY[0x18D760234]((char *)result + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *result) + 0x130));
    if (v4)

    swift_beginAccess();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
    swift_retain();
    ViewGraph.setRootView<A>(_:)();

    return (_QWORD *)swift_release();
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *result;
  void *v3;
  void *v4;

  v1 = a1 + 16;
  swift_beginAccess();
  result = (_QWORD *)MEMORY[0x18D760234](v1);
  if (result)
  {
    v3 = result;
    v4 = (void *)MEMORY[0x18D760234]((char *)result + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *result) + 0x130));
    if (v4)

    swift_beginAccess();
    type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>();
    swift_retain();
    ViewGraph.setRootView<A>(_:)();

    return (_QWORD *)swift_release();
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *result;
  void *v3;
  void *v4;

  v1 = a1 + 16;
  swift_beginAccess();
  result = (_QWORD *)MEMORY[0x18D760234](v1);
  if (result)
  {
    v3 = result;
    v4 = (void *)MEMORY[0x18D760234]((char *)result + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *result) + 0x130));
    if (v4)

    swift_beginAccess();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
    swift_retain();
    ViewGraph.setRootView<A>(_:)();

    return (_QWORD *)swift_release();
  }
  return result;
}

uint64_t outlined init with copy of TableRowView(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TableRowView(a2, a1);
  return a2;
}

_QWORD *specialized closure #1 in _UIHostingView.cancelAsyncRendering()@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)((char *)result + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *result) + 0x148));
  if (v2)
    *(_BYTE *)(v2 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextThread) = 0;
  *a2 = v2 == 0;
  return result;
}

void specialized TableDataSourceAdaptor.configureGlobalHeader(_:transaction:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  _QWORD v12[3];
  _BYTE v13[48];

  type metadata accessor for TableGlobalHeader();
  v3 = swift_dynamicCastClass();
  if (v3)
  {
    v4 = (void *)v3;
    v5 = a1;
    objc_msgSend(v4, sel_setAutomaticallyUpdatesContentConfiguration_, 0);
    v6 = *(_QWORD *)(v1 + 112);
    v7 = *(_QWORD *)(v1 + 120);
    v8 = *(_QWORD *)(v1 + 128);
    outlined init with copy of TableColumnCollection(v1 + 48, (uint64_t)v13);
    outlined copy of Binding<[SwiftUIAnySortComparator]>?(v6, v7);
    v9 = TableDataSourceAdaptor.headerDisplayMode.getter();
    v10 = *(_BYTE *)(v1 + 104);
    v12[0] = v6;
    v12[1] = v7;
    v12[2] = v8;
    v13[41] = v9;
    v13[42] = v10;
    v11 = (uint64_t)v4 + OBJC_IVAR____TtC7SwiftUI17TableGlobalHeader_globalHeader;
    swift_beginAccess();
    outlined assign with take of ModifiedContent<_ViewList_View, ListTableCellModifier>((uint64_t)v12, v11, (uint64_t)&lazy cache variable for type metadata for TableHeaderView?, (uint64_t)&type metadata for TableHeaderView, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    swift_endAccess();
    objc_msgSend(v4, sel_setNeedsUpdateConfiguration);

  }
}

uint64_t type metadata accessor for UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView>;
  if (!lazy cache variable for type metadata for UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for UIHostingConfiguration();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type TableRowView and conformance TableRowView();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CollectionViewCellModifier and conformance CollectionViewCellModifier, (uint64_t (*)(uint64_t))type metadata accessor for CollectionViewCellModifier, (uint64_t)&protocol conformance descriptor for CollectionViewCellModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>)
  {
    v2 = MEMORY[0x1E0CE7518];
    type metadata accessor for ModifiedContent<AnyView, EmptyModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>);
    v4 = v3;
    v5 = lazy protocol witness table accessor for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v2, MEMORY[0x1E0CE7508]);
    v7 = type metadata accessor for _UIHostingView(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>);
  }
}

uint64_t sub_186F6C834()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

_QWORD *partial apply for specialized closure #1 in _UIHostingView.setRootView(_:transaction:)()
{
  uint64_t v0;

  return specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(v0);
}

{
  uint64_t v0;

  return specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(v0);
}

{
  uint64_t v0;

  return specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(v0);
}

void type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>)
  {
    type metadata accessor for ModifiedContent<AnyView, EmptyModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508]);
    v3[1] = lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void partial apply for specialized closure #1 in _UIHostingView.updateRemovedState()()
{
  partial apply for specialized closure #1 in _UIHostingView.updateRemovedState()();
}

{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  char v3;

  v1 = *(char **)(v0 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0x68));
  v3 = *v1;
  swift_beginAccess();
  *(_BYTE *)(v2 + 169) = v3;
  GraphHost.updateRemovedState()();
}

{
  uint64_t v0;

  specialized closure #1 in _UIHostingView.updateRemovedState()(*(_QWORD **)(v0 + 16), *(char **)(v0 + 24));
}

void partial apply for specialized closure #1 in _UIHostingView.cancelAsyncRendering()(BOOL *a1@<X8>)
{
  partial apply for specialized closure #1 in _UIHostingView.cancelAsyncRendering()(a1);
}

{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v1 + 16)) + 0x148));
  if (v2)
    *(_BYTE *)(v2 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextThread) = 0;
  *a1 = v2 == 0;
}

void partial apply for closure #1 in DisplayLink.invalidate()()
{
  uint64_t v0;

  closure #1 in DisplayLink.invalidate()(*(_QWORD *)(v0 + 16));
}

void type metadata accessor for CellHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    v7 = v6;
    v8 = lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void partial apply for specialized closure #1 in _UIHostingView.setRootView(_:transaction:)()
{
  uint64_t v0;

  specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(v0);
}

{
  uint64_t v0;

  specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(v0);
}

{
  uint64_t v0;

  specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(v0);
}

{
  uint64_t v0;

  specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(v0);
}

{
  uint64_t v0;

  specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(v0);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, a3);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v6;

  type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE5420];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v5;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unint64_t lazy protocol witness table accessor for type SwipeActions.Feature and conformance SwipeActions.Feature()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwipeActions.Feature and conformance SwipeActions.Feature;
  if (!lazy protocol witness table cache variable for type SwipeActions.Feature and conformance SwipeActions.Feature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwipeActions.Feature, &type metadata for SwipeActions.Feature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeActions.Feature and conformance SwipeActions.Feature);
  }
  return result;
}

uint64_t outlined init with copy of TableColumnCollection(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TableColumnCollection(a2, a1);
  return a2;
}

uint64_t outlined copy of Binding<[SwiftUIAnySortComparator]>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined destroy of CollectionViewTableHeaderVisitor(uint64_t a1)
{
  destroy for CollectionViewTableHeaderVisitor(a1);
  return a1;
}

uint64_t outlined destroy of TableColumnCollection(uint64_t a1)
{
  destroy for TableColumnCollection(a1);
  return a1;
}

uint64_t outlined consume of Binding<[SwiftUIAnySortComparator]>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of Binding<AnyTableColumnCustomization>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of TableColumnCustomizationID.Base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void type metadata accessor for (offset: Int, element: TableCellFormula)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (offset: Int, element: TableCellFormula))
  {
    type metadata accessor for TableCellFormula();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: TableCellFormula));
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for ModifiedContent<AnyView, EmptyModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EditModeScopeModifier>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<AnyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE5420];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<AnyView, EmptyModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EditModeScopeModifier>);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    v4[0] = MEMORY[0x1E0CE7508];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t destroy for TableDataSourceAdaptor(uint64_t a1)
{
  uint64_t result;

  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
    swift_bridgeObjectRelease();
  else
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 120))
  {
    swift_release();
    swift_release();
    result = swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 144))
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for TableDataSourceAdaptor(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = *(_BYTE *)(a2 + 88);
  swift_bridgeObjectRetain();
  if ((v5 & 1) != 0)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 72) = v6;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 48, a2 + 48);
  }
  *(_BYTE *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v7 = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  if (!v7)
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v8 = *(_QWORD *)(a2 + 144);
    if (v8)
      goto LABEL_6;
LABEL_8:
    v10 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v10;
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v7;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v8 = *(_QWORD *)(a2 + 144);
  if (!v8)
    goto LABEL_8;
LABEL_6:
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v8;
  v9 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_9:
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_WORD *)(a1 + 169) = *(_WORD *)(a2 + 169);
  return a1;
}

uint64_t assignWithCopy for TableDataSourceAdaptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    outlined destroy of TableColumnCollection.Backing(a1 + 48);
    if ((*(_BYTE *)(a2 + 88) & 1) != 0)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 88) = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      v4 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 72) = v4;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 48, a2 + 48);
      *(_BYTE *)(a1 + 88) = 0;
    }
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v5 = (_OWORD *)(a1 + 112);
  v6 = (_OWORD *)(a2 + 112);
  v7 = *(_QWORD *)(a2 + 120);
  if (*(_QWORD *)(a1 + 120))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + 112, (uint64_t (*)(_QWORD))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
      v8 = *(_QWORD *)(a2 + 128);
      *v5 = *v6;
      *(_QWORD *)(a1 + 128) = v8;
    }
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *v6;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *v5 = v9;
  }
  v10 = (_OWORD *)(a1 + 136);
  v11 = (_OWORD *)(a2 + 136);
  v12 = *(_QWORD *)(a2 + 144);
  if (*(_QWORD *)(a1 + 144))
  {
    if (v12)
    {
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of TableRowList?(a1 + 136, (uint64_t)&lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization, (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      v13 = *(_OWORD *)(a2 + 152);
      *v10 = *v11;
      *(_OWORD *)(a1 + 152) = v13;
    }
  }
  else if (v12)
  {
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 152);
    *v10 = *v11;
    *(_OWORD *)(a1 + 152) = v14;
  }
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
  *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
  return a1;
}

uint64_t outlined destroy of TableColumnCollection.Backing(uint64_t a1)
{
  destroy for TableColumnCollection.Backing(a1);
  return a1;
}

void type metadata accessor for Binding<[SwiftUIAnySortComparator]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<[SwiftUIAnySortComparator]>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for [SwiftUIAnySortComparator], (uint64_t)&type metadata for SwiftUIAnySortComparator, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for Binding();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<[SwiftUIAnySortComparator]>);
  }
}

__n128 __swift_memcpy171_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_OWORD *)(a1 + 155) = *(__int128 *)((char *)a2 + 155);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for TableDataSourceAdaptor(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    outlined destroy of TableColumnCollection.Backing(a1 + 48);
    v6 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v6;
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  if (*(_QWORD *)(a1 + 120))
  {
    if (*(_QWORD *)(a2 + 120))
    {
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_release();
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_release();
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + 112, (uint64_t (*)(_QWORD))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
LABEL_8:
  if (!*(_QWORD *)(a1 + 144))
  {
LABEL_12:
    v7 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v7;
    goto LABEL_13;
  }
  if (!*(_QWORD *)(a2 + 144))
  {
    outlined destroy of TableRowList?(a1 + 136, (uint64_t)&lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization, (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    goto LABEL_12;
  }
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_release();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
LABEL_13:
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
  *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableDataSourceAdaptor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 171))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TableDataSourceAdaptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 170) = 0;
    *(_WORD *)(result + 168) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 171) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 171) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TableDataSourceAdaptor()
{
  return &type metadata for TableDataSourceAdaptor;
}

unint64_t lazy protocol witness table accessor for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs;
  if (!lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedTableRowIDs, &type metadata for ResolvedTableRowIDs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs;
  if (!lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedTableRowIDs, &type metadata for ResolvedTableRowIDs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs;
  if (!lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedTableRowIDs, &type metadata for ResolvedTableRowIDs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs;
  if (!lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedTableRowIDs, &type metadata for ResolvedTableRowIDs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyMapSequence<[TableSections.Item], Int> and conformance <> LazyMapSequence<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type LazyMapSequence<[TableSections.Item], Int> and conformance <> LazyMapSequence<A, B>;
  if (!lazy protocol witness table cache variable for type LazyMapSequence<[TableSections.Item], Int> and conformance <> LazyMapSequence<A, B>)
  {
    type metadata accessor for LazyMapSequence<[TableSections.Item], Int>();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type [TableSections.Item] and conformance [A](&lazy protocol witness table cache variable for type [TableSections.Item] and conformance [A], MEMORY[0x1E0DEAF20]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC850], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyMapSequence<[TableSections.Item], Int> and conformance <> LazyMapSequence<A, B>);
  }
  return result;
}

void type metadata accessor for LazyMapSequence<[TableSections.Item], Int>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for LazyMapSequence<[TableSections.Item], Int>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [TableSections.Item], (uint64_t)&type metadata for TableSections.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type [TableSections.Item] and conformance [A](&lazy protocol witness table cache variable for type [TableSections.Item] and conformance [A], MEMORY[0x1E0DEAF38]);
    v0 = type metadata accessor for LazyMapSequence();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LazyMapSequence<[TableSections.Item], Int>);
  }
}

uint64_t lazy protocol witness table accessor for type [TableSections.Item] and conformance [A](unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [TableSections.Item], (uint64_t)&type metadata for TableSections.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableRowID and conformance TableRowID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableRowID and conformance TableRowID;
  if (!lazy protocol witness table cache variable for type TableRowID and conformance TableRowID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRowID, &type metadata for TableRowID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableRowID and conformance TableRowID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableRowID and conformance TableRowID;
  if (!lazy protocol witness table cache variable for type TableRowID and conformance TableRowID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRowID, &type metadata for TableRowID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableRowID and conformance TableRowID);
  }
  return result;
}

uint64_t associated type witness table accessor for ListDiffable.SectionIDs.Sequence.Element : Hashable in TableDataSourceAdaptor()
{
  return MEMORY[0x1E0DEB428];
}

uint64_t associated type witness table accessor for ListCoreDataSource.Cell : PlatformListCell in TableDataSourceAdaptor()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TableCollectionViewCell and conformance ListCollectionViewCellBase<A>, (uint64_t (*)(uint64_t))type metadata accessor for TableCollectionViewCell, (uint64_t)&protocol conformance descriptor for ListCollectionViewCellBase<A>);
}

_UNKNOWN **associated type witness table accessor for ListCoreDataSource.Cell : UIHostingViewDelegate in TableDataSourceAdaptor()
{
  return &protocol witness table for ListCollectionViewCellBase<A>;
}

uint64_t associated type witness table accessor for ListCoreDataSource.HeaderFooter : PlatformListHeaderFooter in TableDataSourceAdaptor()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TableCollectionViewCell and conformance ListCollectionViewCellBase<A>, (uint64_t (*)(uint64_t))type metadata accessor for TableCollectionViewCell, (uint64_t)&protocol conformance descriptor for ListCollectionViewCellBase<A>);
}

uint64_t associated type witness table accessor for ListCoreDataSource.SelectionValue : Hashable in TableDataSourceAdaptor()
{
  return MEMORY[0x1E0DEC1A0];
}

unint64_t instantiation function for generic protocol witness table for TableDataSourceAdaptor(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_186F6DA88()
{
  return swift_deallocObject();
}

uint64_t outlined init with take of (offset: Int, element: TableSections.Item)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for (offset: Int, element: TableSections.Item)?, (void (*)(uint64_t))type metadata accessor for (offset: Int, element: TableSections.Item));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (offset: Int, element: TableSections.Item)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (offset: Int, element: TableSections.Item))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: TableSections.Item));
  }
}

uint64_t outlined init with copy of BridgedNavigationView.RootView(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Subview(a2, a1);
  return a2;
}

uint64_t outlined assign with take of BridgedNavigationView.RootView(uint64_t a1, uint64_t a2)
{
  assignWithTake for Subview(a2, a1);
  return a2;
}

void type metadata accessor for ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for ModifiedContent<AnyView, EmptyModifier>(255, &lazy cache variable for type metadata for ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<TabItem.RootView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView);
    v3[1] = MEMORY[0x1E0CE5420];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<TabItem.RootView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<AnyView, EmptyModifier>(255, a2);
    v8 = v7;
    v9[0] = a4();
    v9[1] = lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView;
  if (!lazy protocol witness table cache variable for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BridgedNavigationView.RootView, &type metadata for BridgedNavigationView.RootView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView);
  }
  return result;
}

void specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int (*v16)(char *, uint64_t, _QWORD *);
  Class v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  _BYTE *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  id v31;
  __int16 v32;

  v3 = v2;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (void (*)(uint64_t))MEMORY[0x1E0DC2130]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v30 - v12;
  if (!a1)
  {
    specialized ListCollectionViewCellBase.backgroundHost.setter(0);
    return;
  }
  v14 = swift_retain();
  MEMORY[0x18D75D9FC](v14);
  v15 = (_QWORD *)type metadata accessor for UIBackgroundConfiguration();
  v16 = *(unsigned int (**)(char *, uint64_t, _QWORD *))(*(v15 - 1) + 48);
  if (v16(v13, 1, v15))
  {
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t)MEMORY[0x1E0DC2130], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
LABEL_4:
    type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(0);
    v18 = objc_allocWithZone(v17);
    v19 = swift_retain();
    v20 = specialized _UIHostingView.init(rootView:)(v19);
    swift_release();
    v21 = (char *)v20 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v20) + 0xF8);
    swift_beginAccess();
    *v21 = 1;
    specialized _UIHostingView.updateRemovedState()();
    v22 = v20;
    specialized ListCollectionViewCellBase.backgroundHost.setter(v20);

    goto LABEL_5;
  }
  v27 = (void *)UIBackgroundConfiguration.customView.getter();
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t)MEMORY[0x1E0DC2130], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  if (!v27)
    goto LABEL_4;
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(0);
  v28 = (_QWORD *)swift_dynamicCastClass();
  if (!v28)
  {

    goto LABEL_4;
  }
  v31 = v27;
  v29 = (_QWORD *)((char *)v28 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v28) + 0x60));
  swift_beginAccess();
  *v29 = a1;
  if (a2 == 1)
  {
    swift_retain_n();
    swift_release();
    v32 = 1;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_release();
  }
  else
  {
    swift_retain();
    outlined copy of Transaction?(a2);
    swift_release();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
    GraphHost.asyncTransaction(_:id:_:)();

    swift_release_n();
    outlined consume of Transaction?(a2);
  }
LABEL_5:
  MEMORY[0x18D75D9FC]();
  if (v16(v9, 1, v15))
  {
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t)MEMORY[0x1E0DC2130], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
    goto LABEL_19;
  }
  v15 = (_QWORD *)UIBackgroundConfiguration.customView.getter();
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t)MEMORY[0x1E0DC2130], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  if (!v15)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(0);
  if (!swift_dynamicCastClass())
  {
LABEL_20:

    __break(1u);
    return;
  }
  v23 = specialized _UIHostingView.as<A>(_:)();
  v25 = v24;

  if (v23)
  {
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8))(16, 1, ObjectType, v25);
    swift_unknownObjectRelease();
  }
  objc_msgSend(v3, sel_setBackgroundColor_, 0);
  swift_release();
}

{
  specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(a1, a2, (void (*)(void))MEMORY[0x1E0DC2B28], (void (*)(char *))MEMORY[0x1E0DC2B30], (uint64_t)partial apply for specialized closure #1 in _UIHostingView.setRootView(_:transaction:));
}

{
  specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(a1, a2, (void (*)(void))MEMORY[0x1E0DC2A78], (void (*)(char *))MEMORY[0x1E0DC2A80], (uint64_t)partial apply for specialized closure #1 in _UIHostingView.setRootView(_:transaction:));
}

{
  specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(a1, a2);
}

{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int (*v16)(char *, uint64_t, _QWORD *);
  Class v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  _BYTE *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  id v31;
  __int16 v32;

  v3 = v2;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (void (*)(uint64_t))MEMORY[0x1E0DC2130]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v30 - v12;
  if (!a1)
  {
    specialized ListCollectionViewCellBase.backgroundHost.setter(0);
    return;
  }
  v14 = swift_retain();
  MEMORY[0x18D75D9FC](v14);
  v15 = (_QWORD *)type metadata accessor for UIBackgroundConfiguration();
  v16 = *(unsigned int (**)(char *, uint64_t, _QWORD *))(*(v15 - 1) + 48);
  if (v16(v13, 1, v15))
  {
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t)MEMORY[0x1E0DC2130], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
LABEL_4:
    type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(0);
    v18 = objc_allocWithZone(v17);
    v19 = swift_retain();
    v20 = specialized _UIHostingView.init(rootView:)(v19);
    swift_release();
    v21 = (char *)v20 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v20) + 0xF8);
    swift_beginAccess();
    *v21 = 1;
    specialized _UIHostingView.updateRemovedState()();
    v22 = v20;
    specialized ListCollectionViewCellBase.backgroundHost.setter(v20);

    goto LABEL_5;
  }
  v27 = (void *)UIBackgroundConfiguration.customView.getter();
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t)MEMORY[0x1E0DC2130], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  if (!v27)
    goto LABEL_4;
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(0);
  v28 = (_QWORD *)swift_dynamicCastClass();
  if (!v28)
  {

    goto LABEL_4;
  }
  v31 = v27;
  v29 = (_QWORD *)((char *)v28 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v28) + 0x60));
  swift_beginAccess();
  *v29 = a1;
  if (a2 == 1)
  {
    swift_retain_n();
    swift_release();
    v32 = 1;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_release();
  }
  else
  {
    swift_retain();
    outlined copy of Transaction?(a2);
    swift_release();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
    GraphHost.asyncTransaction(_:id:_:)();

    swift_release_n();
    outlined consume of Transaction?(a2);
  }
LABEL_5:
  MEMORY[0x18D75D9FC]();
  if (v16(v9, 1, v15))
  {
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t)MEMORY[0x1E0DC2130], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
    goto LABEL_19;
  }
  v15 = (_QWORD *)UIBackgroundConfiguration.customView.getter();
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t)MEMORY[0x1E0DC2130], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  if (!v15)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(0);
  if (!swift_dynamicCastClass())
  {
LABEL_20:

    __break(1u);
    return;
  }
  v23 = specialized _UIHostingView.as<A>(_:)();
  v25 = v24;

  if (v23)
  {
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8))(16, 1, ObjectType, v25);
    swift_unknownObjectRelease();
  }
  objc_msgSend(v3, sel_setBackgroundColor_, 0);
  swift_release();
}

void specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(char *), uint64_t a5)
{
  void *v5;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  Class v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  _BYTE *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;

  v9 = v5;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (void (*)(uint64_t))MEMORY[0x1E0DC2130]);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v37 - v18;
  if (!a1)
  {
    specialized PlatformListViewBase<>.backgroundHost.setter(0, a3, a4);
    return;
  }
  v40 = a5;
  v20 = swift_retain();
  ((void (*)(uint64_t))a3)(v20);
  v21 = type metadata accessor for UIBackgroundConfiguration();
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48);
  if (v22(v19, 1, v21))
  {
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t)MEMORY[0x1E0DC2130], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
LABEL_4:
    type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(0);
    v24 = objc_allocWithZone(v23);
    v25 = swift_retain();
    v26 = specialized _UIHostingView.init(rootView:)(v25);
    swift_release();
    v27 = (char *)v26 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v26) + 0xF8);
    swift_beginAccess();
    *v27 = 1;
    specialized _UIHostingView.updateRemovedState()();
    v28 = v26;
    specialized PlatformListViewBase<>.backgroundHost.setter(v26, a3, a4);

    goto LABEL_5;
  }
  v33 = (void *)UIBackgroundConfiguration.customView.getter();
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t)MEMORY[0x1E0DC2130], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  if (!v33)
    goto LABEL_4;
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(0);
  v39 = v34;
  v35 = (_QWORD *)swift_dynamicCastClass();
  if (!v35)
  {

    goto LABEL_4;
  }
  v38 = v33;
  v36 = (_QWORD *)((char *)v35 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v35) + 0x60));
  swift_beginAccess();
  *v36 = a1;
  if (a2 == 1)
  {
    swift_retain_n();
    swift_release();
    v41 = 1;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_release();
  }
  else
  {
    swift_retain();
    outlined copy of Transaction?(a2);
    swift_release();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
    GraphHost.asyncTransaction(_:id:_:)();

    swift_release_n();
    outlined consume of Transaction?(a2);
  }
LABEL_5:
  a3();
  if (v22(v15, 1, v21))
  {
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t)MEMORY[0x1E0DC2130], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
    goto LABEL_19;
  }
  a3 = (void (*)(void))UIBackgroundConfiguration.customView.getter();
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t)MEMORY[0x1E0DC2130], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  if (!a3)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(0);
  if (!swift_dynamicCastClass())
  {
LABEL_20:

    __break(1u);
    return;
  }
  v29 = specialized _UIHostingView.as<A>(_:)();
  v31 = v30;

  if (v29)
  {
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 8))(16, 1, ObjectType, v31);
    swift_unknownObjectRelease();
  }
  objc_msgSend(v9, sel_setBackgroundColor_, 0);
  swift_release();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<AnyView, EmptyModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ListTableCellModifier and conformance ListTableCellModifier();
    v4[0] = MEMORY[0x1E0CE0A30];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListTableCellModifier and conformance ListTableCellModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListTableCellModifier and conformance ListTableCellModifier;
  if (!lazy protocol witness table cache variable for type ListTableCellModifier and conformance ListTableCellModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListTableCellModifier, &type metadata for ListTableCellModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListTableCellModifier and conformance ListTableCellModifier);
  }
  return result;
}

void type metadata accessor for CellHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<AnyView, EmptyModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>);
    v7 = v6;
    v8 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>)
  {
    type metadata accessor for CellHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>)
  {
    type metadata accessor for ModifiedContent<AnyView, EmptyModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(255, a2, a3);
    v8 = v7;
    v9[0] = a4();
    v9[1] = MEMORY[0x1E0CE5420];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    v7 = v6;
    v8 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t outlined assign with take of ModifiedContent<TableRowView, CollectionViewCellModifier>(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;

  type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t (*)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = a3(255, a2, type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v5);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>(255, a3, a4);
    v5 = type metadata accessor for ModifiedContent();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE5420];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined init with copy of TabItem.RootView(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TabItem.RootView(a2, a1);
  return a2;
}

uint64_t outlined assign with take of TabItem.RootView(uint64_t a1, uint64_t a2)
{
  assignWithTake for TabItem.RootView(a2, a1);
  return a2;
}

void type metadata accessor for ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for ModifiedContent<AnyView, EmptyModifier>(255, &lazy cache variable for type metadata for ModifiedContent<TabItem.RootView, EditModeScopeModifier>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<TabItem.RootView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<TabItem.RootView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<TabItem.RootView, EditModeScopeModifier>, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView);
    v3[1] = MEMORY[0x1E0CE5420];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabItem.RootView and conformance TabItem.RootView;
  if (!lazy protocol witness table cache variable for type TabItem.RootView and conformance TabItem.RootView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabItem.RootView, &type metadata for TabItem.RootView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabItem.RootView and conformance TabItem.RootView);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>)
  {
    type metadata accessor for ModifiedContent<AnyView, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>);
  }
}

void type metadata accessor for ModifiedContent<AnyView, EmptyModifier>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for ModifiedContent();
    if (!v4)
      atomic_store(v3, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, (uint64_t)&protocol witness table for TableViewListHeaderFooterContent);
    v3[1] = lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<AnyView, EmptyModifier>(255, a2);
    v8[0] = a4;
    v8[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v8);
    atomic_store(result, a1);
  }
  return result;
}

void closure #1 in DisplayLink.invalidate()partial apply()
{
  partial apply for closure #1 in DisplayLink.invalidate()();
}

uint64_t closure #1 in TableRowList.visitRows<A>(applying:from:)specialized partial apply()
{
  return partial apply for specialized closure #1 in TableRowList.visitRows<A>(applying:from:)();
}

{
  return partial apply for specialized closure #1 in TableRowList.visitRows<A>(applying:from:)();
}

{
  return partial apply for specialized closure #1 in TableRowList.visitRows<A>(applying:from:)();
}

{
  return partial apply for specialized closure #1 in TableRowList.visitRows<A>(applying:from:)();
}

void static SceneRestorationBehavior.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static SceneRestorationBehavior.disabled.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SceneRestorationBehavior.Role()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SceneRestorationBehavior.Role()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SceneRestorationBehavior.Role()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Scene.restorationBehavior(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = *a1;
  return Scene.modifier<A>(_:)(&v4, a2, &type metadata for RestorationBehaviorModifier, a3);
}

void Scene.stateRestorationBehavior(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for SceneRestorationBehavior()
{
  return &type metadata for SceneRestorationBehavior;
}

ValueMetadata *type metadata accessor for StateRestorationBehavior()
{
  return &type metadata for StateRestorationBehavior;
}

uint64_t sub_186F6F694(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for RestorationBehaviorModifier;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

uint64_t sub_186F6F6E8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

ValueMetadata *type metadata accessor for SceneRestorationBehavior.Role()
{
  return &type metadata for SceneRestorationBehavior.Role;
}

uint64_t storeEnumTagSinglePayload for SceneRestorationBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_186F6F74C + 4 * byte_187BF9E05[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_186F6F780 + 4 * byte_187BF9E00[v4]))();
}

uint64_t sub_186F6F780(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F6F788(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186F6F790);
  return result;
}

uint64_t sub_186F6F79C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186F6F7A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_186F6F7A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F6F7B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RestorationBehaviorModifier()
{
  return &type metadata for RestorationBehaviorModifier;
}

unint64_t lazy protocol witness table accessor for type SceneRestorationBehavior.Role and conformance SceneRestorationBehavior.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneRestorationBehavior.Role and conformance SceneRestorationBehavior.Role;
  if (!lazy protocol witness table cache variable for type SceneRestorationBehavior.Role and conformance SceneRestorationBehavior.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SceneRestorationBehavior.Role, &type metadata for SceneRestorationBehavior.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneRestorationBehavior.Role and conformance SceneRestorationBehavior.Role);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for _SceneModifier.Body : Scene in RestorationBehaviorModifier()
{
  return &protocol witness table for Never;
}

uint64_t static RestorationBehaviorModifier._makeScene(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t result;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_DWORD *)(a2 + 56);
  v18 = *(_QWORD *)a2;
  v19 = v6;
  v20 = v7;
  v21 = *(_OWORD *)(a2 + 24);
  v22 = v8;
  v23 = v9;
  v24 = v10;
  a3(&v16);
  v18 = v9;
  v19 = v10;
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
  {
    LODWORD(v18) = v5;
    type metadata accessor for _GraphValue<RestorationBehaviorModifier>();
    v12 = _GraphValue.value.getter();
    v18 = v16;
    v19 = v17;
    v13 = PreferencesOutputs.subscript.getter();
    v14 = *MEMORY[0x1E0CFED28];
    if ((v13 & 0x100000000) == 0)
      v14 = v13;
    v18 = __PAIR64__(v14, v12);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type RestorationBehaviorModifier.UpdateSceneList and conformance RestorationBehaviorModifier.UpdateSceneList();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v18) = 0;
    result = PreferencesOutputs.subscript.setter();
  }
  v15 = v17;
  *(_QWORD *)a4 = v16;
  *(_DWORD *)(a4 + 8) = v15;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance RestorationBehaviorModifier.UpdateSceneList@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  if (*(_DWORD *)(v1 + 4) == *MEMORY[0x1E0CFED28])
  {
    v3 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    AGGraphGetValue();
    v3 = swift_bridgeObjectRetain();
  }
  v5 = v3;
  result = specialized SceneList.modify(_:)((uint64_t)&v5);
  *a1 = v5;
  return result;
}

void type metadata accessor for _GraphValue<RestorationBehaviorModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<RestorationBehaviorModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<RestorationBehaviorModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type RestorationBehaviorModifier.UpdateSceneList and conformance RestorationBehaviorModifier.UpdateSceneList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RestorationBehaviorModifier.UpdateSceneList and conformance RestorationBehaviorModifier.UpdateSceneList;
  if (!lazy protocol witness table cache variable for type RestorationBehaviorModifier.UpdateSceneList and conformance RestorationBehaviorModifier.UpdateSceneList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RestorationBehaviorModifier.UpdateSceneList, &unk_1E1AF3EB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestorationBehaviorModifier.UpdateSceneList and conformance RestorationBehaviorModifier.UpdateSceneList);
  }
  return result;
}

void *type metadata accessor for RestorationBehaviorModifier.UpdateSceneList()
{
  return &unk_1E1AF3EB0;
}

void static StateRestorationBehavior.automatic.getter()
{
  static SceneRestorationBehavior.disabled.getter();
}

void static StateRestorationBehavior.enabled.getter()
{
  static SceneRestorationBehavior.disabled.getter();
}

void static StateRestorationBehavior.disabled.getter()
{
  static SceneRestorationBehavior.disabled.getter();
}

uint64_t destroy for TableHeaderView(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
    return swift_bridgeObjectRelease();
  else
    return __swift_destroy_boxed_opaque_existential_1(a1 + 24);
}

uint64_t initializeWithCopy for TableHeaderView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  __int128 v8;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  v5 = (_QWORD *)(a1 + 24);
  v6 = (_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 64);
  if ((v7 & 1) != 0)
  {
    *v5 = *v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 48) = v8;
    (**(void (***)(_QWORD *, _QWORD *))(v8 - 8))(v5, v6);
  }
  *(_BYTE *)(a1 + 64) = v7;
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  return a1;
}

uint64_t assignWithCopy for TableHeaderView(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if ((__int128 *)a1 == a2)
        goto LABEL_14;
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
      v5 = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 16) = v5;
      if ((__int128 *)a1 == a2)
        goto LABEL_14;
    }
  }
  else if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if ((__int128 *)a1 == a2)
      goto LABEL_14;
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v6;
    if ((__int128 *)a1 == a2)
      goto LABEL_14;
  }
  outlined destroy of TableColumnCollection.Backing(a1 + 24);
  if ((a2[4] & 1) != 0)
  {
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    *(_BYTE *)(a1 + 64) = 1;
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = *((_QWORD *)a2 + 6);
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 24, (uint64_t)a2 + 24);
    *(_BYTE *)(a1 + 64) = 0;
  }
LABEL_14:
  *(_BYTE *)(a1 + 65) = *((_BYTE *)a2 + 65);
  *(_BYTE *)(a1 + 66) = *((_BYTE *)a2 + 66);
  return a1;
}

__n128 __swift_memcpy67_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for TableHeaderView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_release();
      *(_QWORD *)(a1 + 8) = v4;
      swift_release();
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRelease();
      if (a1 == a2)
        goto LABEL_8;
      goto LABEL_7;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  if (a1 != a2)
  {
LABEL_7:
    outlined destroy of TableColumnCollection.Backing(a1 + 24);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  }
LABEL_8:
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  return a1;
}

uint64_t storeEnumTagSinglePayload for TableHeaderView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 66) = 0;
    *(_WORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 67) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 67) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TableHeaderView()
{
  return &type metadata for TableHeaderView;
}

uint64_t associated type witness table accessor for View.Body : View in TableHeaderView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t TableHeaderView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t KeyPath;
  uint64_t v9;
  __int128 v10;
  __int128 v12;
  _OWORD v13[2];

  *(_QWORD *)a1 = static HorizontalAlignment.center.getter();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  outlined init with copy of TableColumnCollection(v1 + 24, (uint64_t)&v12);
  v6 = *(_BYTE *)(v1 + 65);
  v7 = *(_BYTE *)(v1 + 66);
  KeyPath = swift_getKeyPath();
  v9 = swift_getKeyPath();
  *(_QWORD *)(a1 + 24) = KeyPath;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = v5;
  v10 = v13[0];
  *(_OWORD *)(a1 + 80) = v12;
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 105) = *(_OWORD *)((char *)v13 + 9);
  *(_BYTE *)(a1 + 121) = v6;
  *(_BYTE *)(a1 + 122) = v7;
  return outlined copy of Binding<[SwiftUIAnySortComparator]>?(v3, v4);
}

uint64_t TableHeaderViewCore.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t *v38;
  uint64_t v39;
  char *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[98];

  v2 = v1;
  v45 = a1;
  type metadata accessor for HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>(0);
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>();
  v43 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>();
  v44 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>();
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static VerticalAlignment.firstTextBaseline.getter();
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  type metadata accessor for _VariadicView.Tree<_HStackLayout, _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>();
  closure #1 in TableHeaderViewCore.body.getter(v2, (uint64_t)&v6[*(int *)(v24 + 44)]);
  v25 = *(_QWORD *)(v2 + 16);
  v26 = *(_BYTE *)(v2 + 24);
  outlined copy of Environment<Bool>.Content(v25, v26);
  specialized Environment.wrappedValue.getter(v25, v26);
  outlined consume of Environment<Bool>.Content(v25, v26);
  outlined init with copy of TableHeaderViewCore(v2, (uint64_t)v46);
  outlined destroy of TableHeaderViewCore((uint64_t)v46);
  EdgeInsets.init(_all:)();
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v34 = v33;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v6, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>);
  v35 = &v11[*(int *)(v8 + 36)];
  *v35 = 2;
  *((_QWORD *)v35 + 1) = v28;
  *((_QWORD *)v35 + 2) = v30;
  *((_QWORD *)v35 + 3) = v32;
  *((_QWORD *)v35 + 4) = v34;
  v35[40] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>);
  if (one-time initialization token for tableHeaderFont != -1)
    swift_once();
  v36 = static ListMetrics.tableHeaderFont;
  KeyPath = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>);
  v38 = (uint64_t *)&v15[*(int *)(v43 + 36)];
  *v38 = KeyPath;
  v38[1] = v36;
  swift_retain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>);
  v39 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>);
  v40 = &v19[*(int *)(v44 + 36)];
  *(_QWORD *)v40 = v39;
  *((_QWORD *)v40 + 1) = 1;
  v40[16] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v19, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>);
  return outlined init with take of TableCellFormula((uint64_t)v23, v45, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>);
}

uint64_t closure #1 in TableHeaderViewCore.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  double v62;
  double v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t, uint64_t);
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  double v96;
  char v97;
  double v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t (*v112)(uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  char v129;
  char v130;
  _BYTE v131[104];
  _BYTE v132[168];
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  _BYTE v138[19];
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  _BYTE v145[104];
  _OWORD v146[10];
  _QWORD v147[2];
  char v148;
  char *v149;
  char v150;
  char *v151;
  char v152;
  uint64_t v153;
  char v154;
  uint64_t *v155;
  char v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  _BYTE v161[168];
  _QWORD v162[9];

  v127 = a2;
  type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v118 = (uint64_t)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v121 = (char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>();
  v126 = v9;
  v123 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v117 = (uint64_t *)((char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v116 = (uint64_t)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v122 = (char *)&v114 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v120 = (char *)&v114 - v20;
  type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>(0);
  MEMORY[0x1E0C80A78](v21, v22);
  v124 = (uint64_t)&v114 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TableColumnCollection.Entry?(0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v114 - v30;
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v114 - v34;
  v36 = type metadata accessor for TableColumnCollection.Entry(0);
  v37 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v38);
  v115 = (uint64_t)&v114 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40, v41);
  v43 = (char *)&v114 - v42;
  MEMORY[0x1E0C80A78](v44, v45);
  v119 = (uint64_t)&v114 - v46;
  outlined init with copy of TableColumnCollection(a1 + 56, (uint64_t)&v133);
  specialized Collection.dropFirst(_:)(1, v162);
  v125 = a1;
  if (*(_BYTE *)(a1 + 97))
  {
    if (*(_BYTE *)(a1 + 97) == 1)
    {
      specialized Collection.first.getter((uint64_t)v35);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36) == 1)
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for TableColumnCollection.Entry?);
        _s7SwiftUI15ModifiedContentVyACyAA5ColorVAA16_FlexFrameLayoutVGAA01_gH0VGSgWOi0_((uint64_t)&v133);
      }
      else
      {
        v56 = (uint64_t)v35;
        v57 = v119;
        outlined init with take of TableCellFormula(v56, v119, type metadata accessor for TableColumnCollection.Entry);
        v58 = static Color.clear.getter();
        v59 = v57 + *(int *)(v36 + 28);
        v60 = *(double *)v59;
        v61 = *(_QWORD *)(v59 + 8);
        v62 = *(double *)(v59 + 16);
        v63 = *(double *)(v59 + 24);
        v64 = *(_BYTE *)(v59 + 32);
        if (*(_BYTE *)(v57 + *(int *)(v36 + 36)))
        {
          if (*(_BYTE *)(v57 + *(int *)(v36 + 36)) == 1)
            v65 = static Alignment.center.getter();
          else
            v65 = static Alignment.trailing.getter();
        }
        else
        {
          v65 = static Alignment.leading.getter();
        }
        if ((v64 & 1) != 0)
          v95 = 0.0;
        else
          v95 = v63;
        if ((v64 & 1) != 0)
          v96 = 0.0;
        else
          v96 = v60;
        if ((v64 & 1) != 0)
          v97 = 1;
        else
          v97 = v61 & 1;
        if ((v64 & 1) != 0)
          v98 = 0.0;
        else
          v98 = v62;
        specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v98, v64, v96, v97, v95, v64, 0.0, 1, (uint64_t)v147, 0.0, 1, 0.0, 1, v65, v66, v58);
        swift_release();
        v122 = (char *)v147[1];
        v123 = v147[0];
        v99 = v148;
        v100 = v150;
        v120 = v151;
        v121 = v149;
        v101 = v152;
        v102 = v154;
        v117 = v155;
        v118 = v153;
        v103 = v156;
        v116 = v157;
        v104 = v158;
        v105 = v159;
        v106 = v160;
        static Alignment.center.getter();
        _FrameLayout.init(width:height:alignment:)();
        v132[0] = v99;
        v145[0] = v100;
        v131[0] = v101;
        v130 = v102;
        v129 = v103;
        v128 = v104;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v119, type metadata accessor for TableColumnCollection.Entry);
        v141 = v146[0];
        *(_QWORD *)&v133 = v123;
        *((_QWORD *)&v133 + 1) = v122;
        LOBYTE(v134) = v132[0];
        *((_QWORD *)&v134 + 1) = v121;
        LOBYTE(v135) = v145[0];
        *((_QWORD *)&v135 + 1) = v120;
        LOBYTE(v136) = v131[0];
        *((_QWORD *)&v136 + 1) = v118;
        LOBYTE(v137) = v130;
        *((_QWORD *)&v137 + 1) = v117;
        v138[0] = v129;
        *(_QWORD *)&v138[8] = v116;
        v138[16] = v128;
        v139 = v105;
        v140 = v106;
        v142 = v146[1];
        v143 = v146[2];
        destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v133);
      }
      outlined init with take of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v133, (uint64_t)v161);
      outlined init with copy of Slice<TableColumnCollection>((uint64_t)v162, (uint64_t)v147);
      outlined init with copy of TableHeaderViewCore(v125, (uint64_t)&v133);
      v107 = swift_allocObject();
      v108 = *(_OWORD *)v138;
      *(_OWORD *)(v107 + 80) = v137;
      *(_OWORD *)(v107 + 96) = v108;
      *(_DWORD *)(v107 + 111) = *(_DWORD *)&v138[15];
      v109 = v134;
      *(_OWORD *)(v107 + 16) = v133;
      *(_OWORD *)(v107 + 32) = v109;
      v110 = v136;
      *(_OWORD *)(v107 + 48) = v135;
      *(_OWORD *)(v107 + 64) = v110;
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for Slice<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type Slice<TableColumnCollection> and conformance <> Slice<A>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>, MEMORY[0x1E0CE74B8]);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TableColumnCollection.Entry and conformance TableColumnCollection.Entry, type metadata accessor for TableColumnCollection.Entry, (uint64_t)&protocol conformance descriptor for TableColumnCollection.Entry);
      ForEach<>.init(_:content:)();
      outlined init with take of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v161, (uint64_t)v132);
      v76 = type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v145, (uint64_t)v131, (uint64_t (*)(_QWORD))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>);
      outlined init with take of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v132, (uint64_t)v146);
      outlined init with take of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v146, (uint64_t)&v133);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v131, (uint64_t)&v144, (uint64_t (*)(_QWORD))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>);
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v146);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v131, (uint64_t (*)(_QWORD))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>);
      outlined init with take of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v132, (uint64_t)v147);
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v147);
      v111 = v124;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v133, v124, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>);
      v112 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90];
      type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
      swift_storeEnumTagMultiPayload();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v133, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v111, v127, (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>);
      type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, v112);
      swift_storeEnumTagMultiPayload();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v111, (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>);
      v80 = v145;
    }
    else
    {
      specialized Collection.first.getter((uint64_t)v27);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v27, 1, v36) == 1)
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for TableColumnCollection.Entry?);
        v50 = 1;
        v52 = v126;
        v51 = v127;
        v53 = (_QWORD *)v125;
        v54 = (uint64_t)v122;
        v55 = v116;
      }
      else
      {
        v81 = v115;
        outlined init with take of TableCellFormula((uint64_t)v27, v115, type metadata accessor for TableColumnCollection.Entry);
        v53 = (_QWORD *)v125;
        v82 = *(_QWORD *)v125;
        v83 = *(_BYTE *)(v125 + 8);
        outlined copy of Environment<Bool>.Content(*(_QWORD *)v125, v83);
        v84 = specialized Environment.wrappedValue.getter(v82, v83);
        outlined consume of Environment<Bool>.Content(v82, v83);
        v85 = static HorizontalAlignment.center.getter();
        v86 = (uint64_t)v117;
        *v117 = v85;
        *(_QWORD *)(v86 + 8) = 0;
        *(_BYTE *)(v86 + 16) = 1;
        type metadata accessor for _VariadicView.Tree<_VStackLayout, _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>();
        closure #1 in TableHeaderViewCore.headerButton(entry:leadingMargin:column:)(v53, v81, 0, v86 + *(int *)(v87 + 44), v84);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v81, type metadata accessor for TableColumnCollection.Entry);
        v55 = v116;
        outlined init with take of TableCellFormula(v86, v116, (uint64_t (*)(_QWORD))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>);
        v50 = 0;
        v52 = v126;
        v51 = v127;
        v54 = (uint64_t)v122;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v123 + 56))(v55, v50, 1, v52);
      outlined init with copy of Slice<TableColumnCollection>((uint64_t)v162, (uint64_t)v161);
      outlined init with copy of TableHeaderViewCore((uint64_t)v53, (uint64_t)&v133);
      v88 = swift_allocObject();
      v89 = v55;
      v90 = *(_OWORD *)v138;
      *(_OWORD *)(v88 + 80) = v137;
      *(_OWORD *)(v88 + 96) = v90;
      *(_DWORD *)(v88 + 111) = *(_DWORD *)&v138[15];
      v91 = v134;
      *(_OWORD *)(v88 + 16) = v133;
      *(_OWORD *)(v88 + 32) = v91;
      v92 = v136;
      *(_OWORD *)(v88 + 48) = v135;
      *(_OWORD *)(v88 + 64) = v92;
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for Slice<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type Slice<TableColumnCollection> and conformance <> Slice<A>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>, MEMORY[0x1E0CE74B8]);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TableColumnCollection.Entry and conformance TableColumnCollection.Entry, type metadata accessor for TableColumnCollection.Entry, (uint64_t)&protocol conformance descriptor for TableColumnCollection.Entry);
      ForEach<>.init(_:content:)();
      v76 = type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v89, v54, (uint64_t (*)(_QWORD))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v133, (uint64_t)v161, (uint64_t (*)(_QWORD))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>);
      v93 = v118;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v54, v118, (uint64_t (*)(_QWORD))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?);
      type metadata accessor for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)(0);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v161, v93 + *(int *)(v94 + 48), (uint64_t (*)(_QWORD))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v161, (uint64_t (*)(_QWORD))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v54, (uint64_t (*)(_QWORD))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v93, v51, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>);
      type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
      swift_storeEnumTagMultiPayload();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v93, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v133, (uint64_t (*)(_QWORD))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>);
      v80 = (_BYTE *)v89;
    }
  }
  else
  {
    v48 = (uint64_t)v120;
    v47 = (uint64_t)v121;
    specialized Collection.first.getter((uint64_t)v31);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v31, 1, v36) == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for TableColumnCollection.Entry?);
      v49 = 1;
    }
    else
    {
      outlined init with take of TableCellFormula((uint64_t)v31, (uint64_t)v43, type metadata accessor for TableColumnCollection.Entry);
      v67 = (_QWORD *)v125;
      v68 = *(_QWORD *)v125;
      v69 = *(_BYTE *)(v125 + 8);
      outlined copy of Environment<Bool>.Content(*(_QWORD *)v125, v69);
      v70 = specialized Environment.wrappedValue.getter(v68, v69);
      outlined consume of Environment<Bool>.Content(v68, v69);
      v71 = static HorizontalAlignment.center.getter();
      v72 = (uint64_t)v117;
      *v117 = v71;
      *(_QWORD *)(v72 + 8) = 0;
      *(_BYTE *)(v72 + 16) = 1;
      type metadata accessor for _VariadicView.Tree<_VStackLayout, _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>();
      closure #1 in TableHeaderViewCore.headerButton(entry:leadingMargin:column:)(v67, (uint64_t)v43, 0, v72 + *(int *)(v73 + 44), v70);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v43, type metadata accessor for TableColumnCollection.Entry);
      outlined init with take of TableCellFormula(v72, v48, (uint64_t (*)(_QWORD))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>);
      v49 = 0;
    }
    v74 = v127;
    v75 = (uint64_t)v122;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v123 + 56))(v48, v49, 1, v126);
    outlined init with copy of Slice<TableColumnCollection>((uint64_t)v162, (uint64_t)v161);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for Slice<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
    type metadata accessor for UUID();
    type metadata accessor for ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>();
    lazy protocol witness table accessor for type Slice<TableColumnCollection> and conformance <> Slice<A>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<Color, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE1A80]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TableColumnCollection.Entry and conformance TableColumnCollection.Entry, type metadata accessor for TableColumnCollection.Entry, (uint64_t)&protocol conformance descriptor for TableColumnCollection.Entry);
    ForEach<>.init(_:content:)();
    v76 = type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v48, v75, (uint64_t (*)(_QWORD))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v133, (uint64_t)v161, (uint64_t (*)(_QWORD))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v75, v47, (uint64_t (*)(_QWORD))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?);
    type metadata accessor for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)(0);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v161, v47 + *(int *)(v77 + 48), (uint64_t (*)(_QWORD))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v161, (uint64_t (*)(_QWORD))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v75, (uint64_t (*)(_QWORD))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?);
    v78 = v124;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v47, v124, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>);
    v79 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90];
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v47, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v78, v74, (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>);
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, v79);
    swift_storeEnumTagMultiPayload();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v78, (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v133, (uint64_t (*)(_QWORD))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>);
    v80 = (_BYTE *)v48;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v80, (uint64_t (*)(_QWORD))v76);
  return outlined destroy of Slice<TableColumnCollection>((uint64_t)v162);
}

uint64_t specialized Collection.dropFirst(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23[2];
  char v24;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = v2;
    v4 = result;
    outlined init with copy of TableColumnCollection.Backing(v2, (uint64_t)v23);
    if ((v24 & 1) != 0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)&v23[0] + 16);
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with take of OptionalBinaryInteger(v23, (uint64_t)&v19);
      v7 = v20;
      v8 = v21;
      __swift_project_boxed_opaque_existential_1(&v19, v20);
      v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
    }
    v9 = specialized RandomAccessCollection<>.distance(from:to:)(0, v6);
    if (!v4 || v9 < 0 || v9 >= v4)
    {
      v10 = specialized RandomAccessCollection<>.index(_:offsetBy:)(0, v4);
      outlined init with copy of TableColumnCollection(v3, (uint64_t)v23);
    }
    else
    {
      outlined init with copy of TableColumnCollection(v3, (uint64_t)v23);
      outlined init with copy of TableColumnCollection.Backing((uint64_t)v23, (uint64_t)&v19);
      if ((v22 & 1) != 0)
      {
        v10 = *(_QWORD *)(v19 + 16);
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined init with take of OptionalBinaryInteger(&v19, (uint64_t)v16);
        v14 = v17;
        v15 = v18;
        __swift_project_boxed_opaque_existential_1(v16, v17);
        v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      }
    }
    outlined destroy of TableColumnCollection((uint64_t)v23);
    outlined init with copy of TableColumnCollection.Backing(v3, (uint64_t)v23);
    if ((v24 & 1) != 0)
    {
      v11 = *(_QWORD *)(*(_QWORD *)&v23[0] + 16);
      result = swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with take of OptionalBinaryInteger(v23, (uint64_t)&v19);
      v12 = v20;
      v13 = v21;
      __swift_project_boxed_opaque_existential_1(&v19, v20);
      v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
    }
    if (v11 >= v10)
    {
      specialized Collection<>.subscript.getter(v10, v11, a2);
      return outlined destroy of TableColumnCollection(v3);
    }
  }
  __break(1u);
  return result;
}

double closure #2 in closure #1 in TableHeaderViewCore.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  _QWORD v35[2];
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  double v53[3];

  v4 = static Color.clear.getter();
  v5 = type metadata accessor for TableColumnCollection.Entry(0);
  v6 = a1 + *(int *)(v5 + 28);
  v7 = *(double *)v6;
  v8 = *(_QWORD *)(v6 + 8);
  v10 = *(double *)(v6 + 16);
  v9 = *(double *)(v6 + 24);
  v11 = *(_BYTE *)(v6 + 32);
  if (!*(_BYTE *)(a1 + *(int *)(v5 + 36)))
  {
    v12 = static Alignment.leading.getter();
    if ((v11 & 1) == 0)
      goto LABEL_6;
LABEL_8:
    v9 = 0.0;
    v7 = 0.0;
    v10 = 0.0;
    v14 = 1;
    goto LABEL_9;
  }
  if (*(_BYTE *)(a1 + *(int *)(v5 + 36)) != 1)
  {
    v12 = static Alignment.trailing.getter();
    if ((v11 & 1) == 0)
      goto LABEL_6;
    goto LABEL_8;
  }
  v12 = static Alignment.center.getter();
  if ((v11 & 1) != 0)
    goto LABEL_8;
LABEL_6:
  v14 = v8 & 1;
LABEL_9:
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v10, v11, v7, v14, v9, v11, 0.0, 1, (uint64_t)v35, 0.0, 1, 0.0, 1, v12, v13, v4);
  swift_release();
  v29 = v35[1];
  v30 = v35[0];
  v15 = v36;
  v16 = v37;
  v17 = v38;
  v18 = v39;
  v19 = v40;
  v20 = v41;
  v21 = v42;
  v22 = v44;
  v27 = v45;
  v28 = v43;
  v23 = v46;
  v31 = v48;
  v32 = v47;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v24 = v49;
  v25 = v51;
  v34 = v50;
  v33 = v52;
  *(_QWORD *)a2 = v30;
  *(_QWORD *)(a2 + 8) = v29;
  *(_BYTE *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 24) = v16;
  *(_BYTE *)(a2 + 32) = v17;
  *(_QWORD *)(a2 + 40) = v18;
  *(_BYTE *)(a2 + 48) = v19;
  *(_QWORD *)(a2 + 56) = v20;
  *(_BYTE *)(a2 + 64) = v21;
  *(_QWORD *)(a2 + 72) = v28;
  *(_BYTE *)(a2 + 80) = v22;
  *(_QWORD *)(a2 + 88) = v27;
  *(_BYTE *)(a2 + 96) = v23;
  *(_QWORD *)(a2 + 104) = v32;
  *(_QWORD *)(a2 + 112) = v31;
  *(_QWORD *)(a2 + 120) = v24;
  *(_BYTE *)(a2 + 128) = v34;
  *(_QWORD *)(a2 + 136) = v25;
  *(_BYTE *)(a2 + 144) = v33;
  result = v53[0];
  *(_OWORD *)(a2 + 152) = *(_OWORD *)v53;
  return result;
}

uint64_t closure #1 in closure #1 in TableHeaderViewCore.body.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for TableColumnCollection.Entry(0) + 24));
  *(_QWORD *)a3 = static HorizontalAlignment.center.getter();
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>();
  return closure #1 in TableHeaderViewCore.headerButton(entry:leadingMargin:column:)(a2, a1, v6, a3 + *(int *)(v7 + 44), 0.0);
}

uint64_t closure #1 in TableHeaderViewCore.headerButton(entry:leadingMargin:column:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  _BYTE v27[24];
  uint64_t v28;

  v10 = type metadata accessor for StaticTableHeaderButton(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v27[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v14 = (int *)type metadata accessor for SortableTableHeaderButton(0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = &v27[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v18 = a1[5];
  if (!v18)
    goto LABEL_5;
  v19 = a1[4];
  v20 = a1[6];
  v21 = type metadata accessor for TableColumnCollection.Entry(0);
  outlined init with copy of SwiftUIAnySortComparator?(a2 + *(int *)(v21 + 44), (uint64_t)v27, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  if (!v28)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v27, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
LABEL_5:
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v13, type metadata accessor for TableColumnCollection.Entry);
    *(double *)&v13[*(int *)(v10 + 20)] = a5;
    *(_QWORD *)&v13[*(int *)(v10 + 24)] = a3;
    v23 = type metadata accessor for StaticTableHeaderButton;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, a4, type metadata accessor for StaticTableHeaderButton);
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>.Storage, type metadata accessor for SortableTableHeaderButton, type metadata accessor for StaticTableHeaderButton, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    v24 = (uint64_t)v13;
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v24, v23);
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined destroy of AccessibilityTableContext?((uint64_t)v27, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v17, type metadata accessor for TableColumnCollection.Entry);
  *(double *)&v17[v14[5]] = a5;
  v22 = &v17[v14[6]];
  *v22 = v19;
  v22[1] = v18;
  v22[2] = v20;
  *(_QWORD *)&v17[v14[7]] = a3;
  v23 = type metadata accessor for SortableTableHeaderButton;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v17, a4, type metadata accessor for SortableTableHeaderButton);
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>.Storage, type metadata accessor for SortableTableHeaderButton, type metadata accessor for StaticTableHeaderButton, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
  swift_storeEnumTagMultiPayload();
  v24 = (uint64_t)v17;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v24, v23);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TableHeaderViewCore()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for StyleContextWriter<TableStyleContext>, MEMORY[0x1E0CE3FB0], MEMORY[0x1E0CE3FA0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type StyleContextWriter<TableStyleContext> and conformance StyleContextWriter<A>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t SortableTableHeaderButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];
  char v33;

  v2 = v1;
  v31 = a1;
  v30 = type metadata accessor for SortableTableHeaderButton(0);
  v3 = *(_QWORD *)(v30 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](v30, v5);
  v6 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>(0);
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (_WORD *)((char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v6, type metadata accessor for SortableTableHeaderButton);
  v20 = *(unsigned __int8 *)(v3 + 80);
  v21 = (v20 + 16) & ~v20;
  v29[0] = v20 | 7;
  v29[1] = v21 + v4;
  v22 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v6, v22 + v21, type metadata accessor for SortableTableHeaderButton);
  *v11 = 256;
  v23 = (_QWORD *)((char *)v11 + *(int *)(v8 + 36));
  *v23 = partial apply for closure #1 in SortableTableHeaderButton.sortableButton.getter;
  v23[1] = v22;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  closure #2 in SortableTableHeaderButton.sortableButton.getter(v2, (uint64_t)v11 + *(int *)(v8 + 40));
  v24 = *(int *)(v30 + 28);
  v32[0] = *(_QWORD *)(v2 + v24);
  v33 = 3;
  specialized View.accessibilityTableContext(_:)((uint64_t)v32, (uint64_t)v15);
  outlined destroy of AccessibilityTableContext?((uint64_t)v32, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>);
  v25 = v31;
  outlined init with take of TableCellFormula((uint64_t)v19, v31, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>);
  v31 = v25
      + *(int *)(type metadata accessor for StaticIf<IsVisionEnabledPredicate, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>>()
               + 52);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v6, type metadata accessor for SortableTableHeaderButton);
  v26 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v6, v26 + v21, type metadata accessor for SortableTableHeaderButton);
  *v11 = 256;
  v27 = (_QWORD *)((char *)v11 + *(int *)(v8 + 36));
  *v27 = partial apply for closure #1 in SortableTableHeaderButton.sortableButton.getter;
  v27[1] = v26;
  swift_storeEnumTagMultiPayload();
  closure #2 in SortableTableHeaderButton.sortableButton.getter(v2, (uint64_t)v11 + *(int *)(v8 + 40));
  v32[0] = *(_QWORD *)(v2 + v24);
  v33 = 3;
  specialized View.accessibilityTableContext(_:)((uint64_t)v32, (uint64_t)v15);
  outlined destroy of AccessibilityTableContext?((uint64_t)v32, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>);
  return outlined init with take of TableCellFormula((uint64_t)v15, v31, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>);
}

uint64_t closure #1 in SortableTableHeaderButton.sortableButton.getter(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _BYTE v8[24];
  uint64_t v9;

  v2 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SortableTableHeaderButton(0) + 24));
  v3 = *v2;
  v4 = v2[1];
  v5 = v2[2];
  v6 = type metadata accessor for TableColumnCollection.Entry(0);
  result = outlined init with copy of SwiftUIAnySortComparator?(a1 + *(int *)(v6 + 44), (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  if (v9)
  {
    sort(_:comparator:)(v3, v4, v5, (uint64_t)v8);
    return outlined destroy of SwiftUIAnySortComparator((uint64_t)v8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sort(_:comparator:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  void (*v12)(__int128 *__return_ptr, __int128 *, _BOOL8);
  _BOOL8 v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  void (*v19)(__int128 *__return_ptr, __int128 *, _BOOL8);
  _BOOL8 v20;
  char v21;
  char v22;
  _OWORD v23[2];
  _OWORD v24[5];
  uint64_t v25;
  _BYTE v26[32];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[3];
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _QWORD v42[15];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _QWORD v51[3];

  if (a2)
  {
    v7 = result;
    *(_QWORD *)&v28 = result;
    *((_QWORD *)&v28 + 1) = a2;
    *(_QWORD *)&v29 = a3;
    type metadata accessor for Binding<[SwiftUIAnySortComparator]>();
    v9 = v8;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    MEMORY[0x18D75B9C8](v51, v9);
    if (*(_QWORD *)(v51[0] + 16))
    {
      outlined init with copy of SwiftUIAnySortComparator(v51[0] + 32, (uint64_t)&v43);
    }
    else
    {
      v50 = 0;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v43 = 0u;
    }
    swift_bridgeObjectRelease();
    outlined init with copy of SwiftUIAnySortComparator(a4, (uint64_t)v42);
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v43, (uint64_t)&v28, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v42, (uint64_t)&v34, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
    if (*((_QWORD *)&v29 + 1))
    {
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v28, (uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      if (*((_QWORD *)&v35 + 1))
      {
        v24[2] = v38;
        v24[3] = v39;
        v24[4] = v40;
        v25 = v41;
        v23[0] = v34;
        v23[1] = v35;
        v24[0] = v36;
        v24[1] = v37;
        v10 = MEMORY[0x18D75E284](&v27, v24);
        outlined destroy of SwiftUIAnySortComparator((uint64_t)v23);
        outlined destroy of AccessibilityTableContext?((uint64_t)v42, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
        outlined destroy of AccessibilityTableContext?((uint64_t)&v43, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
        outlined destroy of SwiftUIAnySortComparator((uint64_t)v26);
        outlined destroy of AccessibilityTableContext?((uint64_t)&v28, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
        if ((v10 & 1) == 0)
        {
LABEL_14:
          *(_QWORD *)&v28 = v7;
          *((_QWORD *)&v28 + 1) = a2;
          *(_QWORD *)&v29 = a3;
          MEMORY[0x18D75B9C8](&v43, v9);
          v14 = specialized Collection<>.firstIndex(of:)(a4, v43);
          v16 = v15;
          swift_bridgeObjectRelease();
          if ((v16 & 1) == 0)
            goto LABEL_16;
          *(_QWORD *)&v28 = v7;
          *((_QWORD *)&v28 + 1) = a2;
          *(_QWORD *)&v29 = a3;
          MEMORY[0x18D75B9C8](v42, v9);
          v17 = v42[0];
          outlined init with copy of SwiftUIAnySortComparator(a4, (uint64_t)&v28);
          v18 = (*(uint64_t (**)(uint64_t))(a4 + 104))(a4);
          v19 = (void (*)(__int128 *__return_ptr, __int128 *, _BOOL8))*((_QWORD *)&v31 + 1);
          v20 = (v18 & 1) == 0;
          swift_retain();
          v19(&v43, &v28, v20);
          swift_release();
          outlined assign with take of AnyHashable((uint64_t)&v43, (uint64_t)v30);
          v14 = specialized Collection<>.firstIndex(of:)((uint64_t)&v28, v17);
          v22 = v21;
          outlined destroy of SwiftUIAnySortComparator((uint64_t)&v28);
          swift_bridgeObjectRelease();
          if ((v22 & 1) == 0)
          {
LABEL_16:
            *(_QWORD *)&v28 = v7;
            *((_QWORD *)&v28 + 1) = a2;
            *(_QWORD *)&v29 = a3;
            MEMORY[0x18D75B9C8](&v43, v9);
            specialized Array.remove(at:)(v14, (uint64_t)&v28);
            outlined destroy of SwiftUIAnySortComparator((uint64_t)&v28);
            v42[0] = v43;
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
            dispatch thunk of AnyLocation.set(_:transaction:)();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
          }
          *(_QWORD *)&v28 = v7;
          *((_QWORD *)&v28 + 1) = a2;
          *(_QWORD *)&v29 = a3;
          MEMORY[0x18D75B9C8](&v43, v9);
          outlined init with copy of SwiftUIAnySortComparator(a4, (uint64_t)&v28);
          specialized Array.replaceSubrange<A>(_:with:)(0, 0, (uint64_t)&v28);
          *(_QWORD *)&v28 = v43;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          goto LABEL_18;
        }
LABEL_11:
        *(_QWORD *)&v28 = v7;
        *((_QWORD *)&v28 + 1) = a2;
        *(_QWORD *)&v29 = a3;
        MEMORY[0x18D75B9C8](&v43, v9);
        specialized Array.remove(at:)(0, (uint64_t)&v28);
        outlined destroy of SwiftUIAnySortComparator((uint64_t)&v28);
        v42[0] = v43;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        outlined init with copy of SwiftUIAnySortComparator(a4, (uint64_t)&v28);
        v11 = (*(uint64_t (**)(uint64_t))(a4 + 104))(a4);
        v12 = (void (*)(__int128 *__return_ptr, __int128 *, _BOOL8))*((_QWORD *)&v31 + 1);
        v13 = (v11 & 1) == 0;
        swift_retain();
        v12(&v43, &v28, v13);
        swift_release();
        outlined assign with take of AnyHashable((uint64_t)&v43, (uint64_t)v30);
        *(_QWORD *)&v43 = v7;
        *((_QWORD *)&v43 + 1) = a2;
        *(_QWORD *)&v44 = a3;
        MEMORY[0x18D75B9C8](v42, v9);
        v47 = v30[2];
        v48 = v31;
        v49 = v32;
        v50 = v33;
        v43 = v28;
        v44 = v29;
        v45 = v30[0];
        v46 = v30[1];
        specialized Array.replaceSubrange<A>(_:with:)(0, 0, (uint64_t)&v43);
        *(_QWORD *)&v43 = v42[0];
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
LABEL_18:
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_bridgeObjectRelease_n();
        swift_release_n();
        swift_release_n();
        return swift_bridgeObjectRelease();
      }
      outlined destroy of AccessibilityTableContext?((uint64_t)v42, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      outlined destroy of AccessibilityTableContext?((uint64_t)&v43, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      outlined destroy of SwiftUIAnySortComparator((uint64_t)v26);
    }
    else
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)v42, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      outlined destroy of AccessibilityTableContext?((uint64_t)&v43, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      if (!*((_QWORD *)&v35 + 1))
      {
        outlined destroy of AccessibilityTableContext?((uint64_t)&v28, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
        goto LABEL_11;
      }
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v28, (uint64_t (*)(_QWORD))type metadata accessor for (SwiftUIAnySortComparator?, SwiftUIAnySortComparator?));
    goto LABEL_14;
  }
  return result;
}

__n128 closure #2 in SortableTableHeaderButton.sortableButton.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __n128 result;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __n128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;

  v4 = static VerticalAlignment.center.getter();
  closure #1 in closure #2 in SortableTableHeaderButton.sortableButton.getter(a1, (uint64_t)&v28);
  v5 = v28;
  v6 = v29;
  v7 = BYTE8(v29);
  KeyPath = swift_getKeyPath();
  type metadata accessor for SortableTableHeaderButton(0);
  EdgeInsets.init(_all:)();
  v43 = v4;
  v44 = 0;
  v45 = 1;
  v46 = v5;
  v47 = v6;
  v48 = v7;
  v49 = KeyPath;
  v50 = 0;
  v51 = 2;
  v52 = v9;
  v53 = v10;
  v54 = v11;
  v55 = v12;
  v56 = 0;
  v13 = type metadata accessor for TableColumnCollection.Entry(0);
  v14 = a1 + *(int *)(v13 + 28);
  v16 = *(double *)v14;
  v15 = *(_QWORD *)(v14 + 8);
  v18 = *(double *)(v14 + 16);
  v17 = *(double *)(v14 + 24);
  v19 = *(_BYTE *)(v14 + 32);
  if (!*(_BYTE *)(a1 + *(int *)(v13 + 36)))
  {
    static Alignment.leading.getter();
    if ((v19 & 1) == 0)
      goto LABEL_6;
LABEL_8:
    v17 = 0.0;
    v16 = 0.0;
    v18 = 0.0;
    v20 = 1;
    goto LABEL_9;
  }
  if (*(_BYTE *)(a1 + *(int *)(v13 + 36)) != 1)
  {
    static Alignment.trailing.getter();
    if ((v19 & 1) == 0)
      goto LABEL_6;
    goto LABEL_8;
  }
  static Alignment.center.getter();
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_6:
  v20 = v15 & 1;
LABEL_9:
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v18, v19, v16, v20, v17, v19, 0.0, 1, (uint64_t)&v28, 0.0, 1, 0.0, 1);
  swift_release();
  outlined consume of _ConditionalContent<Image, Image>?(v6, v7);
  swift_release();
  v21 = v41;
  *(_OWORD *)(a2 + 192) = v40;
  *(_OWORD *)(a2 + 208) = v21;
  *(_QWORD *)(a2 + 224) = v42;
  v22 = v37;
  *(_OWORD *)(a2 + 128) = v36;
  *(_OWORD *)(a2 + 144) = v22;
  v23 = v39;
  *(_OWORD *)(a2 + 160) = v38;
  *(_OWORD *)(a2 + 176) = v23;
  v24 = v33;
  *(_OWORD *)(a2 + 64) = v32;
  *(_OWORD *)(a2 + 80) = v24;
  v25 = v35;
  *(_OWORD *)(a2 + 96) = v34;
  *(_OWORD *)(a2 + 112) = v25;
  v26 = v29;
  *(_OWORD *)a2 = v28;
  *(_OWORD *)(a2 + 16) = v26;
  result = v31;
  *(_OWORD *)(a2 + 32) = v30;
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t closure #1 in closure #2 in SortableTableHeaderButton.sortableButton.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  char v16;
  void (*v17)(uint64_t *__return_ptr, _OWORD *, _BOOL8);
  _BOOL8 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _BYTE v28[32];
  _BYTE v29[88];
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _OWORD v49[2];
  _OWORD v50[3];
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;

  v4 = type metadata accessor for TableColumnCollection.Entry(0);
  v5 = *(_QWORD *)(a1 + *(int *)(v4 + 48));
  v6 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SortableTableHeaderButton(0) + 24));
  v30 = *v6;
  v31 = *(_OWORD *)(v6 + 1);
  type metadata accessor for Binding<[SwiftUIAnySortComparator]>();
  v8 = v7;
  swift_retain();
  MEMORY[0x18D75B9C8](&v62, v8);
  if (*(_QWORD *)(v62 + 16))
  {
    outlined init with copy of SwiftUIAnySortComparator(v62 + 32, (uint64_t)&v54);
  }
  else
  {
    v61 = 0;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v54 = 0u;
  }
  swift_bridgeObjectRelease();
  v9 = a1 + *(int *)(v4 + 44);
  result = outlined init with copy of SwiftUIAnySortComparator?(v9, (uint64_t)&v41, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  if (!*((_QWORD *)&v42 + 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  v50[2] = v45;
  v51 = v46;
  v52 = v47;
  v53 = v48;
  v49[0] = v41;
  v49[1] = v42;
  v50[0] = v43;
  v50[1] = v44;
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v54, (uint64_t)&v30, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v49, (uint64_t)&v33, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  if (!v32)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
    outlined destroy of AccessibilityTableContext?((uint64_t)&v54, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
    if (!*((_QWORD *)&v34 + 1))
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)&v30, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      goto LABEL_11;
    }
LABEL_13:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v30, (uint64_t (*)(_QWORD))type metadata accessor for (SwiftUIAnySortComparator?, SwiftUIAnySortComparator?));
    goto LABEL_14;
  }
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v30, (uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  if (!*((_QWORD *)&v34 + 1))
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
    outlined destroy of AccessibilityTableContext?((uint64_t)&v54, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
    outlined destroy of SwiftUIAnySortComparator((uint64_t)v28);
    goto LABEL_13;
  }
  v24 = v37;
  v25 = v38;
  v26 = v39;
  v27 = v40;
  v20 = v33;
  v21 = v34;
  v22 = v35;
  v23 = v36;
  v11 = MEMORY[0x18D75E284](v29, &v22);
  outlined destroy of SwiftUIAnySortComparator((uint64_t)&v20);
  outlined destroy of AccessibilityTableContext?((uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  outlined destroy of AccessibilityTableContext?((uint64_t)&v54, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  outlined destroy of SwiftUIAnySortComparator((uint64_t)v28);
  outlined destroy of AccessibilityTableContext?((uint64_t)&v30, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  if ((v11 & 1) != 0)
  {
LABEL_11:
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
    v12 = swift_allocObject();
    v13 = v12;
    v14 = 0;
    *(_QWORD *)(v12 + 16) = 0x2E6E6F7276656863;
    *(_QWORD *)(v12 + 24) = 0xEA00000000007075;
    *(_BYTE *)(v12 + 36) = 1;
    *(_OWORD *)(v12 + 40) = xmmword_187BF9F90;
    *(_OWORD *)(v12 + 56) = xmmword_187BF9FC0;
    v15 = xmmword_187BF9FB0;
    *(_DWORD *)(v12 + 32) = 0;
LABEL_25:
    *(_OWORD *)(v12 + 72) = v15;
    *(_BYTE *)(v12 + 88) = 0;
LABEL_29:
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 16) = v13;
    *(_BYTE *)(a2 + 24) = v14;
    swift_retain();
    outlined copy of _ConditionalContent<Image, Image>?(v13, v14);
    outlined consume of _ConditionalContent<Image, Image>?(v13, v14);
    return swift_release();
  }
LABEL_14:
  v30 = *v6;
  v31 = *(_OWORD *)(v6 + 1);
  MEMORY[0x18D75B9C8](&v62, v8);
  if (*(_QWORD *)(v62 + 16))
  {
    outlined init with copy of SwiftUIAnySortComparator(v62 + 32, (uint64_t)&v54);
  }
  else
  {
    v61 = 0;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v54 = 0u;
  }
  swift_bridgeObjectRelease();
  result = outlined init with copy of SwiftUIAnySortComparator?(v9, (uint64_t)&v41, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  if (*((_QWORD *)&v42 + 1))
  {
    outlined init with copy of SwiftUIAnySortComparator((uint64_t)&v41, (uint64_t)v49);
    v16 = (*((uint64_t (**)(__int128 *))&v47 + 1))(&v41);
    v17 = (void (*)(uint64_t *__return_ptr, _OWORD *, _BOOL8))*((_QWORD *)&v51 + 1);
    v18 = (v16 & 1) == 0;
    swift_retain();
    v17(&v30, v49, v18);
    swift_release();
    outlined assign with take of AnyHashable((uint64_t)&v30, (uint64_t)v50);
    outlined destroy of SwiftUIAnySortComparator((uint64_t)&v41);
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v54, (uint64_t)&v30, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v49, (uint64_t)&v33, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
    if (v32)
    {
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v30, (uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      if (*((_QWORD *)&v34 + 1))
      {
        v24 = v37;
        v25 = v38;
        v26 = v39;
        v27 = v40;
        v20 = v33;
        v21 = v34;
        v22 = v35;
        v23 = v36;
        v19 = MEMORY[0x18D75E284](v29, &v22);
        outlined destroy of SwiftUIAnySortComparator((uint64_t)&v20);
        outlined destroy of AccessibilityTableContext?((uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
        outlined destroy of AccessibilityTableContext?((uint64_t)&v54, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
        outlined destroy of SwiftUIAnySortComparator((uint64_t)v28);
        outlined destroy of AccessibilityTableContext?((uint64_t)&v30, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
        if ((v19 & 1) == 0)
          goto LABEL_28;
        goto LABEL_24;
      }
      outlined destroy of AccessibilityTableContext?((uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      outlined destroy of AccessibilityTableContext?((uint64_t)&v54, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      outlined destroy of SwiftUIAnySortComparator((uint64_t)v28);
    }
    else
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      outlined destroy of AccessibilityTableContext?((uint64_t)&v54, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      if (!*((_QWORD *)&v34 + 1))
      {
        outlined destroy of AccessibilityTableContext?((uint64_t)&v30, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
LABEL_24:
        type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
        v12 = swift_allocObject();
        v13 = v12;
        strcpy((char *)(v12 + 16), "chevron.down");
        *(_BYTE *)(v12 + 29) = 0;
        *(_WORD *)(v12 + 30) = -5120;
        *(_DWORD *)(v12 + 32) = 0;
        v14 = 1;
        *(_BYTE *)(v12 + 36) = 1;
        *(_OWORD *)(v12 + 40) = xmmword_187BF9F90;
        *(_OWORD *)(v12 + 56) = xmmword_187BF9FA0;
        v15 = xmmword_187BF9FB0;
        goto LABEL_25;
      }
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v30, (uint64_t (*)(_QWORD))type metadata accessor for (SwiftUIAnySortComparator?, SwiftUIAnySortComparator?));
LABEL_28:
    v13 = 0;
    v14 = -1;
    goto LABEL_29;
  }
LABEL_31:
  __break(1u);
  return result;
}

void specialized View.accessibilityTableContext(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;
  _QWORD v16[5];
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    v16[0] = Dictionary.init(minimumCapacity:)();
    AccessibilityAttachment.init(properties:)();
    v11 = v19;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v18;
    *(_QWORD *)(v12 + 24) = v11;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, a2, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>);
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>(0);
    v10 = (uint64_t *)(a2 + *(int *)(v13 + 36));
    *v10 = v12;
    goto LABEL_5;
  }
  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v16, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  if (v17 != 255)
  {
    outlined init with take of AccessibilityTableContext((uint64_t)v16, (uint64_t)&v18);
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    v15 = Dictionary.init(minimumCapacity:)();
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTableContext?>, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
    v14[3] = v5;
    v14[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTableContext?> and conformance AccessibilityPropertiesEntry<A>();
    v14[0] = swift_allocObject();
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v18, v14[0] + 16, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    specialized Dictionary.subscript.setter((uint64_t)v14, (uint64_t)&type metadata for AccessibilityProperties.TableContextKey);
    outlined destroy of AccessibilityTableContext?((uint64_t)&v18, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    v16[0] = v15;
    static AccessibilityAttachment.properties(_:)();
    v6 = v18;
    v7 = v19;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v6;
    *(_QWORD *)(v8 + 24) = v7;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, a2, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>);
    swift_bridgeObjectRelease();
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>(0);
    v10 = (uint64_t *)(a2 + *(int *)(v9 + 36));
    *v10 = v8;
LABEL_5:
    v10[1] = 0;
    return;
  }
  __break(1u);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SortableTableHeaderButton()
{
  _ViewListCountInputs.base.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>, (uint64_t (*)(uint64_t))type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, (uint64_t)&protocol conformance descriptor for Button<A>);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t StaticTableHeaderButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  char v16;
  double v17;
  double v18;
  char v19;
  double v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  _BYTE v33[41];
  _BYTE v34[9];
  uint64_t v35;
  char v36;
  uint64_t v37;
  _OWORD v38[12];
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;

  v3 = static VerticalAlignment.center.getter();
  v4 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  v5 = *(_QWORD *)(v1 + v4[12]);
  swift_retain();
  v6 = AnyShapeStyle.init<A>(_:)();
  v31 = type metadata accessor for StaticTableHeaderButton(0);
  EdgeInsets.init(_all:)();
  v54 = v3;
  v55 = 0;
  v56 = 1;
  v57 = v5;
  v58 = v6;
  v59 = 2;
  v60 = v7;
  v61 = v8;
  v62 = v9;
  v63 = v10;
  v64 = 0;
  v11 = v1 + v4[7];
  v13 = *(double *)v11;
  v12 = *(_QWORD *)(v11 + 8);
  v15 = *(double *)(v11 + 16);
  v14 = *(double *)(v11 + 24);
  v16 = *(_BYTE *)(v11 + 32);
  if (*(_BYTE *)(v1 + v4[9]))
  {
    if (*(_BYTE *)(v1 + v4[9]) == 1)
      static Alignment.center.getter();
    else
      static Alignment.trailing.getter();
  }
  else
  {
    static Alignment.leading.getter();
  }
  if ((v16 & 1) != 0)
    v17 = 0.0;
  else
    v17 = v14;
  if ((v16 & 1) != 0)
    v18 = 0.0;
  else
    v18 = v13;
  if ((v16 & 1) != 0)
    v19 = 1;
  else
    v19 = v12 & 1;
  if ((v16 & 1) != 0)
    v20 = 0.0;
  else
    v20 = v15;
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v20, v16, v18, v19, v17, v16, 0.0, 1, (uint64_t)v38, 0.0, 1, 0.0, 1);
  swift_release();
  swift_release();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  v21 = swift_allocObject();
  *(_BYTE *)(v21 + 16) = 0;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  v35 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  v22 = v40;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = v22;
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>((uint64_t)v38);
  swift_release();
  v50 = v38[10];
  v51 = v38[11];
  v46 = v38[6];
  v47 = v38[7];
  v48 = v38[8];
  v49 = v38[9];
  v42 = v38[2];
  v43 = v38[3];
  v44 = v38[4];
  v45 = v38[5];
  v40 = v38[0];
  v41 = v38[1];
  *(_QWORD *)&v52 = v39;
  *((_QWORD *)&v52 + 1) = v23;
  v53 = v21;
  AccessibilityTraitSet.init(traits:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v23 + 16, 0, v37);
  swift_endAccess();
  swift_release();
  swift_release();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v23 + 16, 0x4000000040);
  swift_endAccess();
  swift_release();
  swift_release();
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>((uint64_t)v38);
  v35 = *(_QWORD *)(v1 + *(int *)(v31 + 24));
  v36 = 3;
  result = outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v35, (uint64_t)v33, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  if (v33[40] == 255)
  {
    __break(1u);
  }
  else
  {
    outlined init with take of AccessibilityTableContext((uint64_t)v33, (uint64_t)v34);
    swift_beginAccess();
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v34, (uint64_t)&v32, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    swift_retain();
    swift_retain();
    specialized AccessibilityProperties.subscript.setter((uint64_t)&v32);
    swift_endAccess();
    swift_release();
    swift_release();
    outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier>((uint64_t)&v40);
    outlined destroy of AccessibilityTableContext?((uint64_t)v34, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    outlined destroy of AccessibilityTableContext?((uint64_t)&v35, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    result = outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier>((uint64_t)&v40);
    v25 = v51;
    *(_OWORD *)(a1 + 160) = v50;
    *(_OWORD *)(a1 + 176) = v25;
    *(_OWORD *)(a1 + 192) = v52;
    *(_QWORD *)(a1 + 208) = v53;
    v26 = v47;
    *(_OWORD *)(a1 + 96) = v46;
    *(_OWORD *)(a1 + 112) = v26;
    v27 = v49;
    *(_OWORD *)(a1 + 128) = v48;
    *(_OWORD *)(a1 + 144) = v27;
    v28 = v43;
    *(_OWORD *)(a1 + 32) = v42;
    *(_OWORD *)(a1 + 48) = v28;
    v29 = v45;
    *(_OWORD *)(a1 + 64) = v44;
    *(_OWORD *)(a1 + 80) = v29;
    v30 = v41;
    *(_OWORD *)a1 = v40;
    *(_OWORD *)(a1 + 16) = v30;
  }
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance StaticTableHeaderButton()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>(0);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE35E0]);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t TableSectionHeaderView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t result;
  _QWORD v20[14];
  _BYTE v21[41];
  _OWORD v22[2];
  uint64_t v23;
  char v24;
  __int128 v25;
  _BYTE v26[25];

  v3 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v4, v5);
  specialized Environment.wrappedValue.getter(v4, v5);
  outlined consume of Environment<Bool>.Content(v4, v5);
  v6 = *(_QWORD *)v1;
  v7 = *(_BYTE *)(v1 + 8);
  outlined copy of Environment<Bool>.Content(v6, v7);
  specialized Environment.wrappedValue.getter(v6, v7);
  outlined consume of Environment<Bool>.Content(v6, v7);
  EdgeInsets.init(_all:)();
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  v24 = 4;
  memset(v21, 0, 40);
  v21[40] = -1;
  outlined init with take of AccessibilityTableContext((uint64_t)v22, (uint64_t)&v25);
  outlined destroy of AccessibilityTableContext?((uint64_t)v21, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  outlined init with take of AccessibilityTableContext((uint64_t)&v25, (uint64_t)v21);
  v25 = *(_OWORD *)v21;
  *(_OWORD *)v26 = *(_OWORD *)&v21[16];
  *(_OWORD *)&v26[9] = *(_OWORD *)&v21[25];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  v16 = swift_allocObject();
  *(_BYTE *)(v16 + 16) = 0;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  *(_QWORD *)v21 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  v17 = v22[0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = v17;
  swift_retain();
  swift_release();
  AccessibilityTraitSet.init(traits:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v18 + 16, 0, v20[13]);
  swift_endAccess();
  swift_release();
  swift_release();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v18 + 16, 0x4000000040);
  swift_endAccess();
  swift_release();
  swift_release();
  if (v26[24] == 255)
    goto LABEL_4;
  result = outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v25, (uint64_t)v21, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  if (v21[40] != 255)
  {
    outlined init with take of AccessibilityTableContext((uint64_t)v21, (uint64_t)v22);
    swift_beginAccess();
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v22, (uint64_t)v20, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    swift_retain();
    swift_retain();
    specialized AccessibilityProperties.subscript.setter((uint64_t)v20);
    swift_endAccess();
    swift_release();
    swift_release();
    outlined destroy of AccessibilityTableContext?((uint64_t)v22, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
LABEL_4:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v25, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityTableCellModifier<ModifiedContent<AnyView, _PaddingLayout>>);
    result = swift_release();
    *(_QWORD *)a1 = v3;
    *(_BYTE *)(a1 + 8) = 2;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v15;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = v18;
    *(_QWORD *)(a1 + 64) = v16;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TableSectionHeaderView()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ModifiedContent<AnyView, _PaddingLayout>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE2BD0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  lazy protocol witness table accessor for type ModifiedContent<AnyView, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

double EnvironmentValues.tableHeaderLeadingMargin.getter()
{
  uint64_t v0;
  double v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>, (uint64_t)&type metadata for TableHeaderLeadingMarginKey, (uint64_t)&protocol witness table for TableHeaderLeadingMarginKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableHeaderLeadingMarginKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>, (uint64_t)&type metadata for TableHeaderLeadingMarginKey, (uint64_t)&protocol witness table for TableHeaderLeadingMarginKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableHeaderLeadingMarginKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.tableHeaderLeadingMargin.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>, (uint64_t)&type metadata for TableHeaderLeadingMarginKey, (uint64_t)&protocol witness table for TableHeaderLeadingMarginKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TableHeaderLeadingMarginKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance TableHeaderLeadingMarginKey(double *a1, double *a2)
{
  return *a1 == *a2;
}

__n128 closure #1 in TableHeaderLabelStyle.makeBody(configuration:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v5;
  char v6;
  __n128 result;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;

  v5 = a2 & 1;
  outlined copy of Environment<Bool>.Content(a1, a2 & 1);
  v6 = specialized Environment.wrappedValue.getter(a1, v5);
  outlined consume of Environment<Bool>.Content(a1, v5);
  if ((v6 & 1) == 0)
    LODWORD(v8) = 1;
  AnyShapeStyle.init<A>(_:)();
  static Font.Weight.regular.getter();
  type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>();
  lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>();
  View.fontWeight(_:)();
  swift_release();
  result = v9;
  *(_QWORD *)a3 = v8;
  *(__n128 *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 24) = v10;
  return result;
}

__n128 protocol witness for LabelStyle.makeBody(configuration:) in conformance TableHeaderLabelStyle@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t TextLine;
  uint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  __n128 result;
  unint64_t v15;
  __n128 v16;
  unint64_t v17;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(unsigned __int8 *)(v1 + 24);
  v7 = *(unsigned __int8 *)(v1 + 25);
  TextLine = static VerticalAlignment._firstTextLineCenter.getter();
  outlined copy of Environment<CGFloat?>.Content(v5, v6, v7);
  v9 = specialized Environment.wrappedValue.getter(v5, v6 | (v7 << 8));
  v11 = v10;
  outlined consume of Environment<CGFloat?>.Content(v5, v6, v7);
  if ((v11 & 1) != 0)
    v9 = 0x4024000000000000;
  LOBYTE(v15) = v4;
  closure #1 in TableHeaderLabelStyle.makeBody(configuration:)(v3, v4, (uint64_t)&v15);
  v12 = v15;
  v13 = v17;
  result = v16;
  a1->n128_u64[0] = TextLine;
  a1->n128_u64[1] = v9;
  a1[1].n128_u8[0] = 0;
  a1[1].n128_u64[1] = v12;
  a1[2] = result;
  a1[3].n128_u64[0] = v13;
  return result;
}

void key path getter for EnvironmentValues.tableHeaderLeadingMargin : EnvironmentValues(double *a1@<X8>)
{
  *a1 = EnvironmentValues.tableHeaderLeadingMargin.getter();
}

void sub_186F73AE0(double *a1@<X8>)
{
  *a1 = EnvironmentValues.tableHeaderLeadingMargin.getter();
}

uint64_t key path setter for EnvironmentValues.tableHeaderLeadingMargin : EnvironmentValues()
{
  return EnvironmentValues.tableHeaderLeadingMargin.setter();
}

uint64_t sub_186F73B3C()
{
  return EnvironmentValues.tableHeaderLeadingMargin.setter();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TableHeaderLeadingMarginKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableHeaderLeadingMarginKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableHeaderLeadingMarginKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>, (uint64_t)&type metadata for TableHeaderLeadingMarginKey, (uint64_t)&protocol witness table for TableHeaderLeadingMarginKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableHeaderLeadingMarginKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined init with copy of SwiftUIAnySortComparator(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SwiftUIAnySortComparator(a2, a1);
  return a2;
}

void type metadata accessor for (SwiftUIAnySortComparator?, SwiftUIAnySortComparator?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (SwiftUIAnySortComparator?, SwiftUIAnySortComparator?))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (SwiftUIAnySortComparator?, SwiftUIAnySortComparator?));
  }
}

uint64_t outlined destroy of SwiftUIAnySortComparator(uint64_t a1)
{
  destroy for SwiftUIAnySortComparator(a1);
  return a1;
}

ValueMetadata *type metadata accessor for TableHeaderLeadingMarginKey()
{
  return &type metadata for TableHeaderLeadingMarginKey;
}

uint64_t destroy for TableHeaderViewCore(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  if (*(_QWORD *)(a1 + 40))
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(a1 + 96) & 1) != 0)
    return swift_bridgeObjectRelease();
  else
    return __swift_destroy_boxed_opaque_existential_1(a1 + 56);
}

uint64_t initializeWithCopy for TableHeaderViewCore(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  __int128 v12;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  }
  v9 = (_QWORD *)(a1 + 56);
  v10 = (_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 96);
  if ((v11 & 1) != 0)
  {
    *v9 = *v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 80) = v12;
    (**(void (***)(_QWORD *, _QWORD *))(v12 - 8))(v9, v10);
  }
  *(_BYTE *)(a1 + 96) = v11;
  *(_WORD *)(a1 + 97) = *(_WORD *)(a2 + 97);
  return a1;
}

uint64_t assignWithCopy for TableHeaderViewCore(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  v12 = (_OWORD *)(a1 + 32);
  v13 = (_OWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v14)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (a1 == a2)
        goto LABEL_14;
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + 32, (uint64_t (*)(_QWORD))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
      v15 = *(_QWORD *)(a2 + 48);
      *v12 = *v13;
      *(_QWORD *)(a1 + 48) = v15;
      if (a1 == a2)
        goto LABEL_14;
    }
  }
  else if (v14)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (a1 == a2)
      goto LABEL_14;
  }
  else
  {
    v16 = *v13;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *v12 = v16;
    if (a1 == a2)
      goto LABEL_14;
  }
  outlined destroy of TableColumnCollection.Backing(a1 + 56);
  if ((*(_BYTE *)(a2 + 96) & 1) != 0)
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 96) = 1;
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v17;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 56, a2 + 56);
    *(_BYTE *)(a1 + 96) = 0;
  }
LABEL_14:
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  return a1;
}

__n128 __swift_memcpy99_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_DWORD *)(a1 + 95) = *(_DWORD *)((char *)a2 + 95);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for TableHeaderViewCore(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  if (*(_QWORD *)(a1 + 40))
  {
    v11 = a2[5];
    if (v11)
    {
      *(_QWORD *)(a1 + 32) = a2[4];
      swift_release();
      *(_QWORD *)(a1 + 40) = v11;
      swift_release();
      *(_QWORD *)(a1 + 48) = a2[6];
      swift_bridgeObjectRelease();
      if ((uint64_t *)a1 == a2)
        goto LABEL_8;
      goto LABEL_7;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + 32, (uint64_t (*)(_QWORD))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_QWORD *)(a1 + 48) = a2[6];
  if ((uint64_t *)a1 != a2)
  {
LABEL_7:
    outlined destroy of TableColumnCollection.Backing(a1 + 56);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)((char *)a2 + 81);
  }
LABEL_8:
  *(_BYTE *)(a1 + 97) = *((_BYTE *)a2 + 97);
  *(_BYTE *)(a1 + 98) = *((_BYTE *)a2 + 98);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableHeaderViewCore(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 99))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TableHeaderViewCore(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 98) = 0;
    *(_WORD *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 99) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 99) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

void *type metadata accessor for TableHeaderViewCore()
{
  return &unk_1E1AD0750;
}

uint64_t destroy for TableHeaderLabelStyle(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  return outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_BYTE *)(a1 + 25));
}

uint64_t initializeWithCopy for TableHeaderLabelStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 25);
  v8 = *(unsigned __int8 *)(a2 + 24);
  outlined copy of Environment<CGFloat?>.Content(v6, v8, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 25) = v7;
  return a1;
}

uint64_t assignWithCopy for TableHeaderLabelStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 25);
  v10 = *(unsigned __int8 *)(a2 + 24);
  outlined copy of Environment<CGFloat?>.Content(v8, v10, v9);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_BYTE *)(a1 + 25);
  *(_QWORD *)(a1 + 16) = v8;
  v13 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v10;
  *(_BYTE *)(a1 + 25) = v9;
  outlined consume of Environment<CGFloat?>.Content(v11, v13, v12);
  return a1;
}

__n128 __swift_memcpy26_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TableHeaderLabelStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *((_BYTE *)a2 + 25);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 25);
  *(_QWORD *)(a1 + 16) = a2[2];
  v12 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 25) = v9;
  outlined consume of Environment<CGFloat?>.Content(v10, v12, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableHeaderLabelStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 26))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TableHeaderLabelStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 26) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TableHeaderLabelStyle()
{
  return &type metadata for TableHeaderLabelStyle;
}

uint64_t destroy for TableSectionHeaderView(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  return swift_release();
}

uint64_t initializeWithCopy for TableSectionHeaderView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 40);
  outlined copy of Environment<Bool>.Content(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TableSectionHeaderView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_BYTE *)(a2 + 40);
  outlined copy of Environment<Bool>.Content(v12, v13);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 40) = v13;
  outlined consume of Environment<Bool>.Content(v14, v15);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for TableSectionHeaderView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  v11 = *((_BYTE *)a2 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  *(_QWORD *)(a1 + 48) = a2[6];
  swift_release();
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableSectionHeaderView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TableSectionHeaderView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TableSectionHeaderView()
{
  return &type metadata for TableSectionHeaderView;
}

uint64_t storeEnumTagSinglePayload for TableHeaderView.ColumnDisplayMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_186F7478C + 4 * byte_187BF9FD5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_186F747C0 + 4 * byte_187BF9FD0[v4]))();
}

uint64_t sub_186F747C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F747C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186F747D0);
  return result;
}

uint64_t sub_186F747DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186F747E4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_186F747E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F747F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TableHeaderView.ColumnDisplayMode()
{
  return &type metadata for TableHeaderView.ColumnDisplayMode;
}

unint64_t lazy protocol witness table accessor for type VStack<TableHeaderViewCore> and conformance VStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type VStack<TableHeaderViewCore> and conformance VStack<A>;
  if (!lazy protocol witness table cache variable for type VStack<TableHeaderViewCore> and conformance VStack<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for VStack<TableHeaderViewCore>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableHeaderViewCore and conformance TableHeaderViewCore, (uint64_t)&unk_1E1AD0750, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE74A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStack<TableHeaderViewCore> and conformance VStack<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableHeaderViewCore and conformance TableHeaderViewCore()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableHeaderViewCore and conformance TableHeaderViewCore;
  if (!lazy protocol witness table cache variable for type TableHeaderViewCore and conformance TableHeaderViewCore)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableHeaderViewCore, &unk_1E1AD0750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableHeaderViewCore and conformance TableHeaderViewCore);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableHeaderView.ColumnDisplayMode and conformance TableHeaderView.ColumnDisplayMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableHeaderView.ColumnDisplayMode and conformance TableHeaderView.ColumnDisplayMode;
  if (!lazy protocol witness table cache variable for type TableHeaderView.ColumnDisplayMode and conformance TableHeaderView.ColumnDisplayMode)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableHeaderView.ColumnDisplayMode, &type metadata for TableHeaderView.ColumnDisplayMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableHeaderView.ColumnDisplayMode and conformance TableHeaderView.ColumnDisplayMode);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in TableHeaderViewCore()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in TableHeaderLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in TableSectionHeaderView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with take of AccessibilityTableContext(uint64_t a1, uint64_t a2)
{
  __swift_memcpy41_8(a2, a1);
  return a2;
}

void type metadata accessor for AccessibilityTableCellModifier<ModifiedContent<AnyView, _PaddingLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityTableCellModifier<ModifiedContent<AnyView, _PaddingLayout>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _PaddingLayout>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE2BD0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for AccessibilityTableCellModifier(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTableCellModifier<ModifiedContent<AnyView, _PaddingLayout>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _PaddingLayout>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE2BD0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = MEMORY[0x1E0CE7508];
    v2[1] = MEMORY[0x1E0CE2BC0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _DefaultForegroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E0CE1D58], MEMORY[0x1E0CE1D48], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _DefaultForegroundStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>();
    v2[0] = &protocol witness table for LabelStyleConfiguration.Icon;
    v2[1] = &protocol witness table for _DefaultForegroundStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>> and conformance <> _ConditionalContent<A, B>();
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>);
  }
}

void type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(a1, &lazy cache variable for type metadata for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
}

void type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4(255);
    v11 = a5(a1, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>));
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<Color, _FlexFrameLayout>, MEMORY[0x1E0CE7170], MEMORY[0x1E0CE35F0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>);
  }
}

void type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>(uint64_t a1)
{
  type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>(a1, &lazy cache variable for type metadata for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>, (void (*)(uint64_t))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>);
}

unint64_t lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection;
  if (!lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCollection, &type metadata for TableColumnCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection;
  if (!lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCollection, &type metadata for TableColumnCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection;
  if (!lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCollection, &type metadata for TableColumnCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection;
  if (!lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCollection, &type metadata for TableColumnCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection);
  }
  return result;
}

void type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>, type metadata accessor for SortableTableHeaderButton, type metadata accessor for StaticTableHeaderButton, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    lazy protocol witness table accessor for type _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton> and conformance <> _ConditionalContent<A, B>();
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>);
  }
}

uint64_t type metadata accessor for SortableTableHeaderButton(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SortableTableHeaderButton);
}

uint64_t type metadata accessor for StaticTableHeaderButton(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for StaticTableHeaderButton);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>, type metadata accessor for SortableTableHeaderButton, type metadata accessor for StaticTableHeaderButton, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SortableTableHeaderButton and conformance SortableTableHeaderButton, type metadata accessor for SortableTableHeaderButton, (uint64_t)&protocol conformance descriptor for SortableTableHeaderButton);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StaticTableHeaderButton and conformance StaticTableHeaderButton, type metadata accessor for StaticTableHeaderButton, (uint64_t)&protocol conformance descriptor for StaticTableHeaderButton);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<TableColumnCollection> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Slice<TableColumnCollection> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<TableColumnCollection> and conformance <> Slice<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for Slice<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE40], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<TableColumnCollection> and conformance <> Slice<A>);
  }
  return result;
}

void type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)(uint64_t a1)
{
  type metadata accessor for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)(a1, &lazy cache variable for type metadata for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>), type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>);
}

void type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, (uint64_t (*)(uint64_t))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>(uint64_t a1)
{
  type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>(a1, &lazy cache variable for type metadata for ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>);
}

void type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t (*v5)(uint64_t);
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for Slice<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
    type metadata accessor for UUID();
    v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    a3(255);
    lazy protocol witness table accessor for type Slice<TableColumnCollection> and conformance <> Slice<A>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v5, MEMORY[0x1E0CB09C8]);
    v6 = type metadata accessor for ForEach();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)(uint64_t a1)
{
  type metadata accessor for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)(a1, &lazy cache variable for type metadata for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>), type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>> and conformance <> _ConditionalContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, MEMORY[0x1E0CE7EB8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>(255);
    v2 = v1;
    v3 = MEMORY[0x1E0CE7EB8];
    v4[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, MEMORY[0x1E0CE7EB8]);
    v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>, v3);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>);
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<TableStyleContext>, MEMORY[0x1E0CE3FB0], MEMORY[0x1E0CE3FA0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>);
  }
}

void type metadata accessor for _VariadicView.Tree<_HStackLayout, _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>);
  }
}

uint64_t outlined init with copy of TableHeaderViewCore(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TableHeaderViewCore(a2, a1);
  return a2;
}

uint64_t outlined destroy of TableHeaderViewCore(uint64_t a1)
{
  destroy for TableHeaderViewCore(a1);
  return a1;
}

void type metadata accessor for TableColumnCollection.Entry?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TableColumnCollection.Entry?, type metadata accessor for TableColumnCollection.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t outlined init with copy of Slice<TableColumnCollection>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for Slice<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #3 in closure #1 in TableHeaderViewCore.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in TableHeaderViewCore.body.getter(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t outlined destroy of Slice<TableColumnCollection>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for Slice<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>, type metadata accessor for SortableTableHeaderButton, type metadata accessor for StaticTableHeaderButton, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Color, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Color, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Color, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<Color, _FlexFrameLayout>, MEMORY[0x1E0CE7170], MEMORY[0x1E0CE35F0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = MEMORY[0x1E0CE7140];
    v2[1] = MEMORY[0x1E0CE35E0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Color, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

double _s7SwiftUI15ModifiedContentVyACyAA5ColorVAA16_FlexFrameLayoutVGAA01_gH0VGSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t outlined init with copy of TableColumnCollection.Backing(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TableColumnCollection.Backing(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, MEMORY[0x1E0CE73D0]);
    v3[1] = MEMORY[0x1E0CE2BC0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<TableStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<TableStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<TableStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<TableStyleContext>, MEMORY[0x1E0CE3FB0], MEMORY[0x1E0CE3FA0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<TableStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for StaticTableHeaderButton(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = *(_QWORD *)v11;
    v13 = *((_QWORD *)v11 + 1);
    v14 = *((_QWORD *)v11 + 2);
    v15 = *((_QWORD *)v11 + 3);
    v16 = v11[32];
    outlined copy of TableColumnCustomizationID.Base(*(_QWORD *)v11, v13, v14, v15, v16);
    *(_QWORD *)v10 = v12;
    *((_QWORD *)v10 + 1) = v13;
    *((_QWORD *)v10 + 2) = v14;
    *((_QWORD *)v10 + 3) = v15;
    v10[32] = v16;
    *(_QWORD *)((char *)a1 + v8[6]) = *(_QWORD *)((char *)a2 + v8[6]);
    v17 = v8[7];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = *((_OWORD *)v19 + 1);
    *(_OWORD *)v18 = *(_OWORD *)v19;
    *((_OWORD *)v18 + 1) = v20;
    v18[32] = v19[32];
    *((_BYTE *)a1 + v8[8]) = *((_BYTE *)a2 + v8[8]);
    *((_BYTE *)a1 + v8[9]) = *((_BYTE *)a2 + v8[9]);
    *((_BYTE *)a1 + v8[10]) = *((_BYTE *)a2 + v8[10]);
    v21 = v8[11];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    v24 = *(_QWORD *)((char *)a2 + v21 + 24);
    if (v24)
    {
      *((_QWORD *)v22 + 3) = v24;
      (**(void (***)(char *, char *))(v24 - 8))(v22, v23);
      v25 = *(_OWORD *)(v23 + 56);
      *(_OWORD *)(v22 + 56) = v25;
      (**(void (***)(uint64_t, uint64_t))(v25 - 8))((uint64_t)(v22 + 32), (uint64_t)(v23 + 32));
      *((_QWORD *)v22 + 9) = *((_QWORD *)v23 + 9);
      v26 = *((_QWORD *)v23 + 14);
      v27 = *((_OWORD *)v23 + 6);
      *((_OWORD *)v22 + 5) = *((_OWORD *)v23 + 5);
      *((_OWORD *)v22 + 6) = v27;
      *((_QWORD *)v22 + 14) = v26;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      v29 = *((_OWORD *)v23 + 5);
      *((_OWORD *)v22 + 4) = *((_OWORD *)v23 + 4);
      *((_OWORD *)v22 + 5) = v29;
      *((_OWORD *)v22 + 6) = *((_OWORD *)v23 + 6);
      *((_QWORD *)v22 + 14) = *((_QWORD *)v23 + 14);
      v30 = *((_OWORD *)v23 + 1);
      *(_OWORD *)v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v30;
      v31 = *((_OWORD *)v23 + 3);
      *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
      *((_OWORD *)v22 + 3) = v31;
    }
    *(_QWORD *)((char *)a1 + v8[12]) = *(_QWORD *)((char *)a2 + v8[12]);
    v32 = *(int *)(a3 + 24);
    *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
    *(_QWORD *)((char *)a1 + v32) = *(_QWORD *)((char *)a2 + v32);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for StaticTableHeaderButton(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = type metadata accessor for TableColumnCollection.Entry(0);
  v4 = a1 + *(int *)(v3 + 20);
  outlined consume of TableColumnCustomizationID.Base(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_BYTE *)(v4 + 32));
  v5 = a1 + *(int *)(v3 + 44);
  if (*(_QWORD *)(v5 + 24))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + *(int *)(v3 + 44));
    __swift_destroy_boxed_opaque_existential_1(v5 + 32);
    swift_release();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t outlined consume of TableColumnCustomizationID.Base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if ((a5 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for StaticTableHeaderButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_QWORD *)v10;
  v12 = *(_QWORD *)(v10 + 8);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = *(_QWORD *)(v10 + 24);
  v15 = *(_BYTE *)(v10 + 32);
  outlined copy of TableColumnCustomizationID.Base(*(_QWORD *)v10, v12, v13, v14, v15);
  *(_QWORD *)v9 = v11;
  *(_QWORD *)(v9 + 8) = v12;
  *(_QWORD *)(v9 + 16) = v13;
  *(_QWORD *)(v9 + 24) = v14;
  *(_BYTE *)(v9 + 32) = v15;
  *(_QWORD *)(a1 + v7[6]) = *(_QWORD *)(a2 + v7[6]);
  v16 = v7[7];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  *(_BYTE *)(v17 + 32) = *(_BYTE *)(v18 + 32);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  v20 = v7[11];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a2 + v20 + 24);
  if (v23)
  {
    *(_QWORD *)(v21 + 24) = v23;
    (**(void (***)(uint64_t, uint64_t))(v23 - 8))(v21, v22);
    v24 = *(_OWORD *)(v22 + 56);
    *(_OWORD *)(v21 + 56) = v24;
    (**(void (***)(uint64_t, uint64_t))(v24 - 8))(v21 + 32, v22 + 32);
    *(_QWORD *)(v21 + 72) = *(_QWORD *)(v22 + 72);
    v25 = *(_QWORD *)(v22 + 112);
    v26 = *(_OWORD *)(v22 + 96);
    *(_OWORD *)(v21 + 80) = *(_OWORD *)(v22 + 80);
    *(_OWORD *)(v21 + 96) = v26;
    *(_QWORD *)(v21 + 112) = v25;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v27 = *(_OWORD *)(v22 + 80);
    *(_OWORD *)(v21 + 64) = *(_OWORD *)(v22 + 64);
    *(_OWORD *)(v21 + 80) = v27;
    *(_OWORD *)(v21 + 96) = *(_OWORD *)(v22 + 96);
    *(_QWORD *)(v21 + 112) = *(_QWORD *)(v22 + 112);
    v28 = *(_OWORD *)(v22 + 16);
    *(_OWORD *)v21 = *(_OWORD *)v22;
    *(_OWORD *)(v21 + 16) = v28;
    v29 = *(_OWORD *)(v22 + 48);
    *(_OWORD *)(v21 + 32) = *(_OWORD *)(v22 + 32);
    *(_OWORD *)(v21 + 48) = v29;
  }
  *(_QWORD *)(a1 + v7[12]) = *(_QWORD *)(a2 + v7[12]);
  v30 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v30) = *(_QWORD *)(a2 + v30);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for StaticTableHeaderButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_QWORD *)v10;
  v12 = *(_QWORD *)(v10 + 8);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = *(_QWORD *)(v10 + 24);
  v15 = *(_BYTE *)(v10 + 32);
  outlined copy of TableColumnCustomizationID.Base(*(_QWORD *)v10, v12, v13, v14, v15);
  v16 = *(_QWORD *)v9;
  v17 = *(_QWORD *)(v9 + 8);
  v18 = *(_QWORD *)(v9 + 16);
  v19 = *(_QWORD *)(v9 + 24);
  v20 = *(_BYTE *)(v9 + 32);
  *(_QWORD *)v9 = v11;
  *(_QWORD *)(v9 + 8) = v12;
  *(_QWORD *)(v9 + 16) = v13;
  *(_QWORD *)(v9 + 24) = v14;
  *(_BYTE *)(v9 + 32) = v15;
  outlined consume of TableColumnCustomizationID.Base(v16, v17, v18, v19, v20);
  *(_QWORD *)(a1 + v7[6]) = *(_QWORD *)(a2 + v7[6]);
  v21 = v7[7];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = *(_BYTE *)(v23 + 32);
  v25 = *(_OWORD *)(v23 + 16);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_OWORD *)(v22 + 16) = v25;
  *(_BYTE *)(v22 + 32) = v24;
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  v26 = v7[11];
  v27 = a1 + v26;
  v28 = (uint64_t *)(a2 + v26);
  v29 = *(_QWORD *)(a2 + v26 + 24);
  if (*(_QWORD *)(a1 + v26 + 24))
  {
    if (v29)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v27, v28);
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(v27 + 32), v28 + 4);
      v30 = v28[10];
      *(_QWORD *)(v27 + 72) = v28[9];
      *(_QWORD *)(v27 + 80) = v30;
      swift_retain();
      swift_release();
      v31 = v28[12];
      *(_QWORD *)(v27 + 88) = v28[11];
      *(_QWORD *)(v27 + 96) = v31;
      swift_retain();
      swift_release();
      v32 = v28[14];
      *(_QWORD *)(v27 + 104) = v28[13];
      *(_QWORD *)(v27 + 112) = v32;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of SwiftUIAnySortComparator(v27);
      v38 = *((_OWORD *)v28 + 3);
      v40 = *(_OWORD *)v28;
      v39 = *((_OWORD *)v28 + 1);
      *(_OWORD *)(v27 + 32) = *((_OWORD *)v28 + 2);
      *(_OWORD *)(v27 + 48) = v38;
      *(_OWORD *)v27 = v40;
      *(_OWORD *)(v27 + 16) = v39;
      v42 = *((_OWORD *)v28 + 5);
      v41 = *((_OWORD *)v28 + 6);
      v43 = *((_OWORD *)v28 + 4);
      *(_QWORD *)(v27 + 112) = v28[14];
      *(_OWORD *)(v27 + 80) = v42;
      *(_OWORD *)(v27 + 96) = v41;
      *(_OWORD *)(v27 + 64) = v43;
    }
  }
  else if (v29)
  {
    *(_QWORD *)(v27 + 24) = v29;
    (**(void (***)(uint64_t, __int128 *))(v29 - 8))(v27, (__int128 *)v28);
    v33 = v28[7];
    *(_QWORD *)(v27 + 56) = v33;
    *(_QWORD *)(v27 + 64) = v28[8];
    (**(void (***)(uint64_t, uint64_t))(v33 - 8))(v27 + 32, (uint64_t)(v28 + 4));
    v34 = v28[10];
    *(_QWORD *)(v27 + 72) = v28[9];
    *(_QWORD *)(v27 + 80) = v34;
    v35 = v28[12];
    *(_QWORD *)(v27 + 88) = v28[11];
    *(_QWORD *)(v27 + 96) = v35;
    v36 = v28[13];
    v37 = v28[14];
    *(_QWORD *)(v27 + 104) = v36;
    *(_QWORD *)(v27 + 112) = v37;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v44 = *(_OWORD *)v28;
    v45 = *((_OWORD *)v28 + 1);
    v46 = *((_OWORD *)v28 + 3);
    *(_OWORD *)(v27 + 32) = *((_OWORD *)v28 + 2);
    *(_OWORD *)(v27 + 48) = v46;
    *(_OWORD *)v27 = v44;
    *(_OWORD *)(v27 + 16) = v45;
    v47 = *((_OWORD *)v28 + 4);
    v48 = *((_OWORD *)v28 + 5);
    v49 = *((_OWORD *)v28 + 6);
    *(_QWORD *)(v27 + 112) = v28[14];
    *(_OWORD *)(v27 + 80) = v48;
    *(_OWORD *)(v27 + 96) = v49;
    *(_OWORD *)(v27 + 64) = v47;
  }
  *(_QWORD *)(a1 + v7[12]) = *(_QWORD *)(a2 + v7[12]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithTake for StaticTableHeaderButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
  *(_QWORD *)(a1 + v7[6]) = *(_QWORD *)(a2 + v7[6]);
  v12 = v7[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v15;
  *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  v16 = v7[11];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  v20 = *(_OWORD *)(v18 + 48);
  *(_OWORD *)(v17 + 32) = *(_OWORD *)(v18 + 32);
  *(_OWORD *)(v17 + 48) = v20;
  *(_QWORD *)(v17 + 112) = *(_QWORD *)(v18 + 112);
  v21 = *(_OWORD *)(v18 + 96);
  v22 = *(_OWORD *)(v18 + 64);
  *(_OWORD *)(v17 + 80) = *(_OWORD *)(v18 + 80);
  *(_OWORD *)(v17 + 96) = v21;
  *(_OWORD *)(v17 + 64) = v22;
  *(_QWORD *)(a1 + v7[12]) = *(_QWORD *)(a2 + v7[12]);
  v23 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v23) = *(_QWORD *)(a2 + v23);
  return a1;
}

uint64_t assignWithTake for StaticTableHeaderButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_BYTE *)(v10 + 32);
  v12 = *(_QWORD *)v9;
  v13 = *(_QWORD *)(v9 + 8);
  v14 = *(_QWORD *)(v9 + 16);
  v15 = *(_QWORD *)(v9 + 24);
  v16 = *(_BYTE *)(v9 + 32);
  v17 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v17;
  *(_BYTE *)(v9 + 32) = v11;
  outlined consume of TableColumnCustomizationID.Base(v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + v7[6]) = *(_QWORD *)(a2 + v7[6]);
  v18 = v7[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16) = v21;
  *(_BYTE *)(v19 + 32) = *(_BYTE *)(v20 + 32);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  v22 = v7[11];
  v23 = a1 + v22;
  v24 = a2 + v22;
  if (!*(_QWORD *)(a1 + v22 + 24))
    goto LABEL_5;
  if (!*(_QWORD *)(v24 + 24))
  {
    outlined destroy of SwiftUIAnySortComparator(v23);
LABEL_5:
    v27 = *(_OWORD *)(v24 + 80);
    *(_OWORD *)(v23 + 64) = *(_OWORD *)(v24 + 64);
    *(_OWORD *)(v23 + 80) = v27;
    *(_OWORD *)(v23 + 96) = *(_OWORD *)(v24 + 96);
    *(_QWORD *)(v23 + 112) = *(_QWORD *)(v24 + 112);
    v28 = *(_OWORD *)(v24 + 16);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v28;
    v29 = *(_OWORD *)(v24 + 48);
    *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
    *(_OWORD *)(v23 + 48) = v29;
    goto LABEL_6;
  }
  __swift_destroy_boxed_opaque_existential_1(v23);
  v25 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v25;
  __swift_destroy_boxed_opaque_existential_1(v23 + 32);
  v26 = *(_OWORD *)(v24 + 48);
  *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
  *(_OWORD *)(v23 + 48) = v26;
  *(_QWORD *)(v23 + 64) = *(_QWORD *)(v24 + 64);
  *(_OWORD *)(v23 + 72) = *(_OWORD *)(v24 + 72);
  swift_release();
  *(_OWORD *)(v23 + 88) = *(_OWORD *)(v24 + 88);
  swift_release();
  *(_OWORD *)(v23 + 104) = *(_OWORD *)(v24 + 104);
  swift_release();
LABEL_6:
  *(_QWORD *)(a1 + v7[12]) = *(_QWORD *)(a2 + v7[12]);
  swift_release();
  v30 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v30) = *(_QWORD *)(a2 + v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for StaticTableHeaderButton()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_186F76688(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TableColumnCollection.Entry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for StaticTableHeaderButton()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_186F766D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TableColumnCollection.Entry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for StaticTableHeaderButton()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TableColumnCollection.Entry(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SortableTableHeaderButton(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = *(_QWORD *)v11;
    v13 = *((_QWORD *)v11 + 1);
    v14 = *((_QWORD *)v11 + 2);
    v15 = *((_QWORD *)v11 + 3);
    v16 = v11[32];
    outlined copy of TableColumnCustomizationID.Base(*(_QWORD *)v11, v13, v14, v15, v16);
    *(_QWORD *)v10 = v12;
    *((_QWORD *)v10 + 1) = v13;
    *((_QWORD *)v10 + 2) = v14;
    *((_QWORD *)v10 + 3) = v15;
    v10[32] = v16;
    *(_QWORD *)((char *)a1 + v8[6]) = *(_QWORD *)((char *)a2 + v8[6]);
    v17 = v8[7];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = *((_OWORD *)v19 + 1);
    *(_OWORD *)v18 = *(_OWORD *)v19;
    *((_OWORD *)v18 + 1) = v20;
    v18[32] = v19[32];
    *((_BYTE *)a1 + v8[8]) = *((_BYTE *)a2 + v8[8]);
    *((_BYTE *)a1 + v8[9]) = *((_BYTE *)a2 + v8[9]);
    *((_BYTE *)a1 + v8[10]) = *((_BYTE *)a2 + v8[10]);
    v21 = v8[11];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    v24 = *(_QWORD *)((char *)a2 + v21 + 24);
    if (v24)
    {
      *((_QWORD *)v22 + 3) = v24;
      (**(void (***)(char *, char *))(v24 - 8))(v22, v23);
      v25 = *(_OWORD *)(v23 + 56);
      *(_OWORD *)(v22 + 56) = v25;
      (**(void (***)(uint64_t, uint64_t))(v25 - 8))((uint64_t)(v22 + 32), (uint64_t)(v23 + 32));
      *((_QWORD *)v22 + 9) = *((_QWORD *)v23 + 9);
      v26 = *((_QWORD *)v23 + 14);
      v27 = *((_OWORD *)v23 + 6);
      *((_OWORD *)v22 + 5) = *((_OWORD *)v23 + 5);
      *((_OWORD *)v22 + 6) = v27;
      *((_QWORD *)v22 + 14) = v26;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      v29 = *((_OWORD *)v23 + 5);
      *((_OWORD *)v22 + 4) = *((_OWORD *)v23 + 4);
      *((_OWORD *)v22 + 5) = v29;
      *((_OWORD *)v22 + 6) = *((_OWORD *)v23 + 6);
      *((_QWORD *)v22 + 14) = *((_QWORD *)v23 + 14);
      v30 = *((_OWORD *)v23 + 1);
      *(_OWORD *)v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v30;
      v31 = *((_OWORD *)v23 + 3);
      *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
      *((_OWORD *)v22 + 3) = v31;
    }
    *(_QWORD *)((char *)a1 + v8[12]) = *(_QWORD *)((char *)a2 + v8[12]);
    v32 = a3[6];
    *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
    v33 = (_QWORD *)((char *)a1 + v32);
    v34 = (_QWORD *)((char *)a2 + v32);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    v33[2] = v34[2];
    *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SortableTableHeaderButton(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = type metadata accessor for TableColumnCollection.Entry(0);
  v4 = a1 + *(int *)(v3 + 20);
  outlined consume of TableColumnCustomizationID.Base(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_BYTE *)(v4 + 32));
  v5 = a1 + *(int *)(v3 + 44);
  if (*(_QWORD *)(v5 + 24))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + *(int *)(v3 + 44));
    __swift_destroy_boxed_opaque_existential_1(v5 + 32);
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SortableTableHeaderButton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_QWORD *)v10;
  v12 = *(_QWORD *)(v10 + 8);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = *(_QWORD *)(v10 + 24);
  v15 = *(_BYTE *)(v10 + 32);
  outlined copy of TableColumnCustomizationID.Base(*(_QWORD *)v10, v12, v13, v14, v15);
  *(_QWORD *)v9 = v11;
  *(_QWORD *)(v9 + 8) = v12;
  *(_QWORD *)(v9 + 16) = v13;
  *(_QWORD *)(v9 + 24) = v14;
  *(_BYTE *)(v9 + 32) = v15;
  *(_QWORD *)(a1 + v7[6]) = *(_QWORD *)(a2 + v7[6]);
  v16 = v7[7];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  *(_BYTE *)(v17 + 32) = *(_BYTE *)(v18 + 32);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  v20 = v7[11];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a2 + v20 + 24);
  if (v23)
  {
    *(_QWORD *)(v21 + 24) = v23;
    (**(void (***)(uint64_t, uint64_t))(v23 - 8))(v21, v22);
    v24 = *(_OWORD *)(v22 + 56);
    *(_OWORD *)(v21 + 56) = v24;
    (**(void (***)(uint64_t, uint64_t))(v24 - 8))(v21 + 32, v22 + 32);
    *(_QWORD *)(v21 + 72) = *(_QWORD *)(v22 + 72);
    v25 = *(_QWORD *)(v22 + 112);
    v26 = *(_OWORD *)(v22 + 96);
    *(_OWORD *)(v21 + 80) = *(_OWORD *)(v22 + 80);
    *(_OWORD *)(v21 + 96) = v26;
    *(_QWORD *)(v21 + 112) = v25;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v27 = *(_OWORD *)(v22 + 80);
    *(_OWORD *)(v21 + 64) = *(_OWORD *)(v22 + 64);
    *(_OWORD *)(v21 + 80) = v27;
    *(_OWORD *)(v21 + 96) = *(_OWORD *)(v22 + 96);
    *(_QWORD *)(v21 + 112) = *(_QWORD *)(v22 + 112);
    v28 = *(_OWORD *)(v22 + 16);
    *(_OWORD *)v21 = *(_OWORD *)v22;
    *(_OWORD *)(v21 + 16) = v28;
    v29 = *(_OWORD *)(v22 + 48);
    *(_OWORD *)(v21 + 32) = *(_OWORD *)(v22 + 32);
    *(_OWORD *)(v21 + 48) = v29;
  }
  *(_QWORD *)(a1 + v7[12]) = *(_QWORD *)(a2 + v7[12]);
  v30 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v31 = (_QWORD *)(a1 + v30);
  v32 = (_QWORD *)(a2 + v30);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  v31[2] = v32[2];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SortableTableHeaderButton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_QWORD *)v10;
  v12 = *(_QWORD *)(v10 + 8);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = *(_QWORD *)(v10 + 24);
  v15 = *(_BYTE *)(v10 + 32);
  outlined copy of TableColumnCustomizationID.Base(*(_QWORD *)v10, v12, v13, v14, v15);
  v16 = *(_QWORD *)v9;
  v17 = *(_QWORD *)(v9 + 8);
  v18 = *(_QWORD *)(v9 + 16);
  v19 = *(_QWORD *)(v9 + 24);
  v20 = *(_BYTE *)(v9 + 32);
  *(_QWORD *)v9 = v11;
  *(_QWORD *)(v9 + 8) = v12;
  *(_QWORD *)(v9 + 16) = v13;
  *(_QWORD *)(v9 + 24) = v14;
  *(_BYTE *)(v9 + 32) = v15;
  outlined consume of TableColumnCustomizationID.Base(v16, v17, v18, v19, v20);
  *(_QWORD *)(a1 + v7[6]) = *(_QWORD *)(a2 + v7[6]);
  v21 = v7[7];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = *(_BYTE *)(v23 + 32);
  v25 = *(_OWORD *)(v23 + 16);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_OWORD *)(v22 + 16) = v25;
  *(_BYTE *)(v22 + 32) = v24;
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  v26 = v7[11];
  v27 = a1 + v26;
  v28 = (uint64_t *)(a2 + v26);
  v29 = *(_QWORD *)(a2 + v26 + 24);
  if (*(_QWORD *)(a1 + v26 + 24))
  {
    if (v29)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v27, v28);
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(v27 + 32), v28 + 4);
      v30 = v28[10];
      *(_QWORD *)(v27 + 72) = v28[9];
      *(_QWORD *)(v27 + 80) = v30;
      swift_retain();
      swift_release();
      v31 = v28[12];
      *(_QWORD *)(v27 + 88) = v28[11];
      *(_QWORD *)(v27 + 96) = v31;
      swift_retain();
      swift_release();
      v32 = v28[14];
      *(_QWORD *)(v27 + 104) = v28[13];
      *(_QWORD *)(v27 + 112) = v32;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of SwiftUIAnySortComparator(v27);
      v38 = *((_OWORD *)v28 + 3);
      v40 = *(_OWORD *)v28;
      v39 = *((_OWORD *)v28 + 1);
      *(_OWORD *)(v27 + 32) = *((_OWORD *)v28 + 2);
      *(_OWORD *)(v27 + 48) = v38;
      *(_OWORD *)v27 = v40;
      *(_OWORD *)(v27 + 16) = v39;
      v42 = *((_OWORD *)v28 + 5);
      v41 = *((_OWORD *)v28 + 6);
      v43 = *((_OWORD *)v28 + 4);
      *(_QWORD *)(v27 + 112) = v28[14];
      *(_OWORD *)(v27 + 80) = v42;
      *(_OWORD *)(v27 + 96) = v41;
      *(_OWORD *)(v27 + 64) = v43;
    }
  }
  else if (v29)
  {
    *(_QWORD *)(v27 + 24) = v29;
    (**(void (***)(uint64_t, __int128 *))(v29 - 8))(v27, (__int128 *)v28);
    v33 = v28[7];
    *(_QWORD *)(v27 + 56) = v33;
    *(_QWORD *)(v27 + 64) = v28[8];
    (**(void (***)(uint64_t, uint64_t))(v33 - 8))(v27 + 32, (uint64_t)(v28 + 4));
    v34 = v28[10];
    *(_QWORD *)(v27 + 72) = v28[9];
    *(_QWORD *)(v27 + 80) = v34;
    v35 = v28[12];
    *(_QWORD *)(v27 + 88) = v28[11];
    *(_QWORD *)(v27 + 96) = v35;
    v36 = v28[13];
    v37 = v28[14];
    *(_QWORD *)(v27 + 104) = v36;
    *(_QWORD *)(v27 + 112) = v37;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v44 = *(_OWORD *)v28;
    v45 = *((_OWORD *)v28 + 1);
    v46 = *((_OWORD *)v28 + 3);
    *(_OWORD *)(v27 + 32) = *((_OWORD *)v28 + 2);
    *(_OWORD *)(v27 + 48) = v46;
    *(_OWORD *)v27 = v44;
    *(_OWORD *)(v27 + 16) = v45;
    v47 = *((_OWORD *)v28 + 4);
    v48 = *((_OWORD *)v28 + 5);
    v49 = *((_OWORD *)v28 + 6);
    *(_QWORD *)(v27 + 112) = v28[14];
    *(_OWORD *)(v27 + 80) = v48;
    *(_OWORD *)(v27 + 96) = v49;
    *(_OWORD *)(v27 + 64) = v47;
  }
  *(_QWORD *)(a1 + v7[12]) = *(_QWORD *)(a2 + v7[12]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v50 = a3[6];
  v51 = a1 + v50;
  v52 = a2 + v50;
  *(_QWORD *)(a1 + v50) = *(_QWORD *)(a2 + v50);
  swift_retain();
  swift_release();
  *(_QWORD *)(v51 + 8) = *(_QWORD *)(v52 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(v51 + 16) = *(_QWORD *)(v52 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for SortableTableHeaderButton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
  *(_QWORD *)(a1 + v7[6]) = *(_QWORD *)(a2 + v7[6]);
  v12 = v7[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v15;
  *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  v16 = v7[11];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  v20 = *(_OWORD *)(v18 + 48);
  *(_OWORD *)(v17 + 32) = *(_OWORD *)(v18 + 32);
  *(_OWORD *)(v17 + 48) = v20;
  *(_QWORD *)(v17 + 112) = *(_QWORD *)(v18 + 112);
  v21 = *(_OWORD *)(v18 + 96);
  v22 = *(_OWORD *)(v18 + 64);
  *(_OWORD *)(v17 + 80) = *(_OWORD *)(v18 + 80);
  *(_OWORD *)(v17 + 96) = v21;
  *(_OWORD *)(v17 + 64) = v22;
  *(_QWORD *)(a1 + v7[12]) = *(_QWORD *)(a2 + v7[12]);
  v23 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_QWORD *)(v24 + 16) = *(_QWORD *)(v25 + 16);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for SortableTableHeaderButton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_BYTE *)(v10 + 32);
  v12 = *(_QWORD *)v9;
  v13 = *(_QWORD *)(v9 + 8);
  v14 = *(_QWORD *)(v9 + 16);
  v15 = *(_QWORD *)(v9 + 24);
  v16 = *(_BYTE *)(v9 + 32);
  v17 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v17;
  *(_BYTE *)(v9 + 32) = v11;
  outlined consume of TableColumnCustomizationID.Base(v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + v7[6]) = *(_QWORD *)(a2 + v7[6]);
  v18 = v7[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16) = v21;
  *(_BYTE *)(v19 + 32) = *(_BYTE *)(v20 + 32);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  v22 = v7[11];
  v23 = a1 + v22;
  v24 = a2 + v22;
  if (!*(_QWORD *)(a1 + v22 + 24))
    goto LABEL_5;
  if (!*(_QWORD *)(v24 + 24))
  {
    outlined destroy of SwiftUIAnySortComparator(v23);
LABEL_5:
    v27 = *(_OWORD *)(v24 + 80);
    *(_OWORD *)(v23 + 64) = *(_OWORD *)(v24 + 64);
    *(_OWORD *)(v23 + 80) = v27;
    *(_OWORD *)(v23 + 96) = *(_OWORD *)(v24 + 96);
    *(_QWORD *)(v23 + 112) = *(_QWORD *)(v24 + 112);
    v28 = *(_OWORD *)(v24 + 16);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v28;
    v29 = *(_OWORD *)(v24 + 48);
    *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
    *(_OWORD *)(v23 + 48) = v29;
    goto LABEL_6;
  }
  __swift_destroy_boxed_opaque_existential_1(v23);
  v25 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v25;
  __swift_destroy_boxed_opaque_existential_1(v23 + 32);
  v26 = *(_OWORD *)(v24 + 48);
  *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
  *(_OWORD *)(v23 + 48) = v26;
  *(_QWORD *)(v23 + 64) = *(_QWORD *)(v24 + 64);
  *(_OWORD *)(v23 + 72) = *(_OWORD *)(v24 + 72);
  swift_release();
  *(_OWORD *)(v23 + 88) = *(_OWORD *)(v24 + 88);
  swift_release();
  *(_OWORD *)(v23 + 104) = *(_OWORD *)(v24 + 104);
  swift_release();
LABEL_6:
  *(_QWORD *)(a1 + v7[12]) = *(_QWORD *)(a2 + v7[12]);
  swift_release();
  v30 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v31 = a1 + v30;
  v32 = a2 + v30;
  *(_QWORD *)(a1 + v30) = *(_QWORD *)(a2 + v30);
  swift_release();
  *(_QWORD *)(v31 + 8) = *(_QWORD *)(v32 + 8);
  swift_release();
  *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for SortableTableHeaderButton()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_186F77294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for TableColumnCollection.Entry(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for SortableTableHeaderButton()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_186F77320(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for TableColumnCollection.Entry(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for SortableTableHeaderButton()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TableColumnCollection.Entry(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_186F7741C()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, _PaddingLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, _PaddingLayout>, AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<AnyView, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for AccessibilityAttachmentModifier);
}

void type metadata accessor for ModifiedContent<ModifiedContent<AnyView, _PaddingLayout>, AccessibilityAttachmentModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, _PaddingLayout>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _PaddingLayout>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE2BD0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, _PaddingLayout>, AccessibilityAttachmentModifier>);
  }
}

uint64_t sub_186F774CC()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, LabelStyleConfiguration.Title)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, LabelStyleConfiguration.Title)>>, MEMORY[0x1E0CE73D0]);
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, LabelStyleConfiguration.Title)>>(uint64_t a1)
{
  type metadata accessor for HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>(a1, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, LabelStyleConfiguration.Title)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, LabelStyleConfiguration.Title)>, &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, LabelStyleConfiguration.Title)> and conformance TupleView<A>);
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, MEMORY[0x1E0CE7EB8]);
    v7 = type metadata accessor for HStack();
    if (!v8)
      atomic_store(v7, a2);
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, LabelStyleConfiguration.Title)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, LabelStyleConfiguration.Title)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, LabelStyleConfiguration.Title), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, LabelStyleConfiguration.Title)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, LabelStyleConfiguration.Title))
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, LabelStyleConfiguration.Title));
  }
}

void type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<[AnyFontModifier]>, (uint64_t (*)(uint64_t))type metadata accessor for [AnyFontModifier], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE66C0]);
}

void type metadata accessor for [AnyFontModifier](uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for [AnyFontModifier], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2C20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StyleContextWriter<TableStyleContext> and conformance StyleContextWriter<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in StaticTableHeaderButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in SortableTableHeaderButton()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for Button(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E0CE7228], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
  }
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>(uint64_t a1)
{
  type metadata accessor for HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>(a1, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>, &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)> and conformance TupleView<A>);
}

void type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)(uint64_t a1)
{
  type metadata accessor for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)(a1, &lazy cache variable for type metadata for (ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?), (void (*)(uint64_t))type metadata accessor for ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, (void (*)(uint64_t))type metadata accessor for _ConditionalContent<Image, Image>?);
}

void type metadata accessor for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void type metadata accessor for ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<LayoutPriorityTraitKey>, MEMORY[0x1E0CE5460], MEMORY[0x1E0CE5450], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>);
  }
}

void type metadata accessor for _ConditionalContent<Image, Image>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<Image, Image>?)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ConditionalContent<Image, Image>, MEMORY[0x1E0CE7298], MEMORY[0x1E0CE7298], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<Image, Image>?);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE2BC0]);
    v3[1] = MEMORY[0x1E0CE35E0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, MEMORY[0x1E0CE73D0]);
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E0CE7228], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>)
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t)&type metadata for PlainButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>);
  }
}

uint64_t type metadata accessor for StaticIf<IsVisionEnabledPredicate, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<IsVisionEnabledPredicate, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>>;
  if (!lazy cache variable for type metadata for StaticIf<IsVisionEnabledPredicate, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>();
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>(255);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t partial apply for closure #1 in SortableTableHeaderButton.sortableButton.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SortableTableHeaderButton(0) - 8) + 80);
  return closure #1 in SortableTableHeaderButton.sortableButton.getter(v0 + ((v1 + 16) & ~v1));
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTableContext?> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityTableContext?> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityTableContext?> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTableContext?>, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6310], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityTableContext?> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

uint64_t sub_186F77CF8()
{
  uint64_t v0;

  if (!*(_BYTE *)(v0 + 56))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t outlined consume of _ConditionalContent<Image, Image>?(uint64_t a1, char a2)
{
  uint64_t result;

  if (a2 != -1)
    return swift_release();
  return result;
}

uint64_t outlined copy of _ConditionalContent<Image, Image>?(uint64_t a1, char a2)
{
  uint64_t result;

  if (a2 != -1)
    return swift_retain();
  return result;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier>(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>);
}

void type metadata accessor for ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _DefaultForegroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E0CE1D58], MEMORY[0x1E0CE1D48], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _DefaultForegroundStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, lazy protocol witness table accessor for type ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE2BC0]);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type HStack<AnyView> and conformance HStack<A>, (uint64_t)&protocol witness table for _DefaultForegroundStyleModifier<A>);
}

unint64_t lazy protocol witness table accessor for type HStack<AnyView> and conformance HStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HStack<AnyView> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<AnyView> and conformance HStack<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<AnyView> and conformance HStack<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t IsVisionEnabled;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<IsVisionEnabledPredicate, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<IsVisionEnabledPredicate, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>)
  {
    IsVisionEnabled = type metadata accessor for StaticIf<IsVisionEnabledPredicate, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>>();
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, IsVisionEnabled, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<IsVisionEnabledPredicate, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlainButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>, (uint64_t (*)(uint64_t))type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, (uint64_t)&protocol conformance descriptor for Button<A>);
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlainButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlainButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlainButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t)&type metadata for PlainButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlainButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE35E0]);
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

SwiftUI::CarouselTabViewStyle __swiftcall CarouselTabViewStyle.init()()
{
  SwiftUI::CarouselTabViewStyle v0;

  v0 = (SwiftUI::CarouselTabViewStyle)_diagnoseUnavailableCodeReached()();
  __break(1u);
  return v0;
}

SwiftUI::CarouselTabViewStyle __swiftcall CarouselTabViewStyle.init(crownIndicatorMode:)(SwiftUI::CarouselTabViewStyle::CrownIndicatorMode crownIndicatorMode)
{
  SwiftUI::CarouselTabViewStyle v1;

  v1 = (SwiftUI::CarouselTabViewStyle)_diagnoseUnavailableCodeReached()();
  __break(1u);
  return v1;
}

void static TabViewStyle<>.carousel(pagingStyle:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

SwiftUI::CarouselTabViewStyle __swiftcall CarouselTabViewStyle.init(pagingStyle:)(SwiftUI::CarouselTabViewStyle::PagingStyle pagingStyle)
{
  SwiftUI::CarouselTabViewStyle v1;

  v1 = (SwiftUI::CarouselTabViewStyle)_diagnoseUnavailableCodeReached()();
  __break(1u);
  return v1;
}

void static CarouselTabViewStyle.PagingStyle.blur.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static CarouselTabViewStyle._makeView<A>(value:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static CarouselTabViewStyle._makeViewList<A>(value:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t getEnumTagSinglePayload for CarouselTabViewStyle(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 65282 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65282 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65282;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65282;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65282;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CarouselTabViewStyle(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_186F78394 + 4 * byte_187BFA2E5[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_186F783C8 + 4 * byte_187BFA2E0[v4]))();
}

uint64_t sub_186F783C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_186F783D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x186F783D8);
  return result;
}

uint64_t sub_186F783E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x186F783ECLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_186F783F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_186F783F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CarouselTabViewStyle()
{
  return &type metadata for CarouselTabViewStyle;
}

ValueMetadata *type metadata accessor for CarouselTabViewStyle.CrownIndicatorMode()
{
  return &type metadata for CarouselTabViewStyle.CrownIndicatorMode;
}

ValueMetadata *type metadata accessor for CarouselTabViewStyle.PagingStyle()
{
  return &type metadata for CarouselTabViewStyle.PagingStyle;
}

ValueMetadata *type metadata accessor for CarouselTabViewStyle.PagingStyle.Backing()
{
  return &type metadata for CarouselTabViewStyle.PagingStyle.Backing;
}

uint64_t storeEnumTagSinglePayload for CarouselTabViewStyle.CrownIndicatorMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_186F78494 + 4 * byte_187BFA2EF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_186F784C8 + 4 * byte_187BFA2EA[v4]))();
}

uint64_t sub_186F784C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F784D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186F784D8);
  return result;
}

uint64_t sub_186F784E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186F784ECLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_186F784F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F784F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode()
{
  return &type metadata for CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode;
}

unint64_t lazy protocol witness table accessor for type CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode and conformance CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode and conformance CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode;
  if (!lazy protocol witness table cache variable for type CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode and conformance CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode, &type metadata for CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode and conformance CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CarouselTabViewStyle.PagingStyle.Backing and conformance CarouselTabViewStyle.PagingStyle.Backing()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CarouselTabViewStyle.PagingStyle.Backing and conformance CarouselTabViewStyle.PagingStyle.Backing;
  if (!lazy protocol witness table cache variable for type CarouselTabViewStyle.PagingStyle.Backing and conformance CarouselTabViewStyle.PagingStyle.Backing)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CarouselTabViewStyle.PagingStyle.Backing, &type metadata for CarouselTabViewStyle.PagingStyle.Backing);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CarouselTabViewStyle.PagingStyle.Backing and conformance CarouselTabViewStyle.PagingStyle.Backing);
  }
  return result;
}

void static CarouselTabViewStyle.CrownIndicatorMode.pageDots.getter()
{
  static CarouselTabViewStyle.PagingStyle.blur.getter();
}

void static CarouselTabViewStyle.CrownIndicatorMode.default.getter()
{
  static CarouselTabViewStyle.PagingStyle.blur.getter();
}

void static CarouselTabViewStyle.CrownIndicatorMode.system.getter()
{
  static CarouselTabViewStyle.PagingStyle.blur.getter();
}

void static CarouselTabViewStyle.PagingStyle.default.getter()
{
  static CarouselTabViewStyle.PagingStyle.blur.getter();
}

void static CarouselTabViewStyle.PagingStyle.rotate.getter()
{
  static CarouselTabViewStyle.PagingStyle.blur.getter();
}

void static CarouselTabViewStyle.PagingStyle.plain.getter()
{
  static CarouselTabViewStyle.PagingStyle.blur.getter();
}

void static TabViewStyle<>.carousel(crownIndicatorMode:)()
{
  static TabViewStyle<>.carousel(pagingStyle:)();
}

uint64_t PlatformDocument.documentBox.getter()
{
  return swift_unknownObjectRetain();
}

char *PlatformDocument.__allocating_init(fileURL:documentBoxType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return PlatformDocument.init(fileURL:documentBoxType:)(a1, a2, a3);
}

char *PlatformDocument.init(fileURL:documentBoxType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  NSURL *v15;
  void *v16;
  void *v17;
  objc_class *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  id v34;
  _QWORD aBlock[6];
  objc_super v37;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)aBlock - v9;
  *(_QWORD *)&v3[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_notificationObserver] = 0;
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 16);
  v12 = v3;
  v13 = v11(a2, a3);
  v14 = (uint64_t *)&v12[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox];
  *v14 = v13;
  v14[1] = a3;

  URL._bridgeToObjectiveC()(v15);
  v17 = v16;
  v18 = (objc_class *)type metadata accessor for PlatformDocument();
  v37.receiver = v12;
  v37.super_class = v18;
  v19 = (char *)objc_msgSendSuper2(&v37, sel_initWithFileURL_, v17);

  v20 = &v19[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox];
  v21 = *(_QWORD *)&v19[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox + 8];
  ObjectType = swift_getObjectType();
  v23 = type metadata accessor for URL();
  v24 = *(_QWORD *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v10, a1, v23);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v10, 0, 1, v23);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 64);
  v26 = v19;
  v25(v10, ObjectType, v21);
  swift_unknownObjectRetain();
  (*(void (**)(BOOL, uint64_t, uint64_t))(v21 + 88))(objc_msgSend(v26, sel_documentState) == 0, ObjectType, v21);
  swift_unknownObjectRelease();
  v27 = *((_QWORD *)v20 + 1);
  v28 = swift_getObjectType();
  swift_unknownObjectRetain();
  (*(void (**)(id, uint64_t, uint64_t))(v27 + 112))(objc_msgSend(v26, sel_undoManager), v28, v27);
  swift_unknownObjectRelease();
  v29 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v30 = *MEMORY[0x1E0DC4998];
  v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in PlatformDocument.init(fileURL:documentBoxType:);
  aBlock[5] = v31;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  aBlock[3] = &block_descriptor;
  v32 = _Block_copy(aBlock);
  v33 = v26;
  swift_release();
  v34 = objc_msgSend(v29, sel_addObserverForName_object_queue_usingBlock_, v30, v33, 0, v32);

  _Block_release(v32);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a1, v23);
  *(_QWORD *)&v33[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_notificationObserver] = v34;
  swift_unknownObjectRelease();
  return v33;
}

uint64_t type metadata accessor for PlatformDocument()
{
  return objc_opt_self();
}

uint64_t closure #1 in PlatformDocument.init(fileURL:documentBoxType:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  uint64_t v5;
  uint64_t ObjectType;

  v2 = a2 + 16;
  swift_beginAccess();
  result = MEMORY[0x18D760234](v2);
  if (result)
  {
    v4 = (void *)result;
    v5 = *(_QWORD *)(result + OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox + 8);
    ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    (*(void (**)(BOOL, uint64_t, uint64_t))(v5 + 88))(objc_msgSend(v4, sel_documentState) == 0, ObjectType, v5);

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (*v7)(char *);
  uint64_t v9;

  v2 = type metadata accessor for Notification();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v7(v6);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

id PlatformDocument.__deallocating_deinit()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  objc_super v5;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_notificationObserver];
  if (v1)
  {
    v2 = (void *)objc_opt_self();
    swift_unknownObjectRetain();
    v3 = objc_msgSend(v2, sel_defaultCenter);
    objc_msgSend(v3, sel_removeObserver_, v1);
    swift_unknownObjectRelease();

  }
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for PlatformDocument();
  return objc_msgSendSuper2(&v5, sel_dealloc);
}

id PlatformDocument.__allocating_init(fileURL:)(uint64_t a1)
{
  objc_class *v1;
  id v3;
  NSURL *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;

  v3 = objc_allocWithZone(v1);
  URL._bridgeToObjectiveC()(v4);
  v6 = v5;
  v7 = objc_msgSend(v3, sel_initWithFileURL_, v5);

  v8 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  return v7;
}

void PlatformDocument.init(fileURL:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t FileWrapperPlatformDocument.contents(forType:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t result;
  uint64_t ObjectType;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(id);
  id v31;
  id v32;
  id v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v4 = v3;
  v8 = type metadata accessor for URL();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v36 - v14;
  v16 = type metadata accessor for UTType();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  UTType.init(_:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    outlined destroy of UTType?((uint64_t)v15);
    v38 = 0;
    v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(122);
    v21._countAndFlagsBits = 0x20746E65746E6F43;
    v21._object = (void *)0xED00002065707974;
    String.append(_:)(v21);
    v22._countAndFlagsBits = a1;
    v22._object = a2;
    String.append(_:)(v22);
    v23._countAndFlagsBits = 0xD00000000000006BLL;
    v23._object = (void *)0x8000000187BD37F0;
    String.append(_:)(v23);
    MEMORY[0x18D75AC90](v38, v39);
    swift_bridgeObjectRelease();
    specialized static DocumentUtils.contentTypeNotRegisteredError()();
    return swift_willThrow();
  }
  else
  {
    v36 = a3;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v20, v15, v16);
    v37 = v4;
    ObjectType = swift_getObjectType();
    result = swift_conformsToProtocol2();
    if (result)
    {
      v26 = result;
      v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(result + 24);
      swift_unknownObjectRetain();
      v28 = v40;
      v29 = v27(v20, ObjectType, v26);
      if (v28)
      {
        (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
        return swift_unknownObjectRelease();
      }
      else
      {
        v30 = (uint64_t (*)(id))v29;
        swift_unknownObjectRelease();
        if (v30)
        {
          v31 = objc_msgSend(v37, sel_fileURL);
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          v32 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
          v33 = @nonobjc NSFileWrapper.init(url:options:)((uint64_t)v11, 0);
          v34 = v36;
          v35 = v30(v33);
          v34[3] = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSFileWrapper);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v30);

          *v34 = v35;
        }
        else
        {
          MEMORY[0x18D75AC90](0xD000000000000036, 0x8000000187BD3860);
          specialized static DocumentUtils.serializationFailed.getter();
          swift_willThrow();
        }
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
      }
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t FileWrapperPlatformDocument.read(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  Swift::String v48;
  Swift::String v49;
  char *v50;
  char *v51;
  void *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t aBlock;
  unint64_t v59;
  uint64_t (*v60)(uint64_t);
  void *v61;
  uint64_t (*v62)();
  uint64_t v63;
  id v64;

  v2 = type metadata accessor for CocoaError.Code();
  MEMORY[0x1E0C80A78](v2, v3);
  v53 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CocoaError();
  v54 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55, v10);
  v50 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v50 - v14;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v50 - v18;
  v20 = type metadata accessor for UTType();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_QWORD *)(v21 + 64);
  MEMORY[0x1E0C80A78](v20, v23);
  v51 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v57 = (char *)&v50 - v26;
  if ((URL.isFileURL.getter() & 1) != 0)
  {
    URL.swiftUI_contentType.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
    {
      v27 = outlined destroy of UTType?((uint64_t)v19);
      MEMORY[0x18D754048](v27);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError, (uint64_t (*)(uint64_t))MEMORY[0x1E0CADE48], MEMORY[0x1E0CADE40]);
      _BridgedStoredNSError.init(_:userInfo:)();
      CocoaError._nsError.getter();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v8, v5);
      return swift_willThrow();
    }
    else
    {
      v29 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
      v30 = v57;
      v29(v57, v19, v20);
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v15, a1, v55);
      v31 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
      v32 = v56;
      v33 = @nonobjc NSFileWrapper.init(url:options:)((uint64_t)v15, 1);
      v34 = v21;
      if (v32)
      {
        return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v30, v20);
      }
      else
      {
        v64 = 0;
        v35 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
        v36 = v51;
        v37 = v33;
        v35(v51, v30, v20);
        v55 = v34;
        v38 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
        v39 = (v22 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
        v40 = swift_allocObject();
        v41 = v52;
        *(_QWORD *)(v40 + 16) = v52;
        *(_QWORD *)(v40 + 24) = v37;
        v56 = v20;
        v29((char *)(v40 + v38), v36, v20);
        *(_QWORD *)(v40 + v39) = &v64;
        v42 = swift_allocObject();
        *(_QWORD *)(v42 + 16) = partial apply for closure #1 in FileWrapperPlatformDocument.read(from:);
        *(_QWORD *)(v42 + 24) = v40;
        v62 = partial apply for thunk for @callee_guaranteed () -> ();
        v63 = v42;
        aBlock = MEMORY[0x1E0C809B0];
        v59 = 1107296256;
        v60 = thunk for @escaping @callee_guaranteed () -> ();
        v61 = &block_descriptor_9;
        v43 = _Block_copy(&aBlock);
        v44 = v41;
        v45 = v37;
        swift_release();
        v46 = objc_msgSend(v44, sel__fileOpeningQueue);
        if (!v46)
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
          v46 = (id)static OS_dispatch_queue.main.getter();
        }
        objc_msgSend(v44, sel__performBlock_synchronouslyOnQueue_, v43, v46);
        _Block_release(v43);

        if (v64)
        {
          v47 = v64;
          swift_willThrow();

          (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v56);
          return swift_release();
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v56);

          return swift_release();
        }
      }
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v50, a1, v55);
    aBlock = 0;
    v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(59);
    v48._object = (void *)0x8000000187BD37B0;
    v48._countAndFlagsBits = 0xD000000000000039;
    String.append(_:)(v48);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
    v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in FileWrapperPlatformDocument.read(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  ObjectType = swift_getObjectType();
  result = swift_conformsToProtocol2();
  if (result)
  {
    v7 = result;
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(result + 16);
    swift_unknownObjectRetain();
    v8(a2, a3, ObjectType, v7);
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *FileWrapperPlatformDocument.__allocating_init(fileURL:documentBoxType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  char *v13;
  uint64_t v15;

  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_allocWithZone(v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v13 = PlatformDocument.init(fileURL:documentBoxType:)((uint64_t)v11, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v13;
}

id @nonobjc NSFileWrapper.init(url:options:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  id v12;
  id v13;
  uint64_t v14;
  id v16;
  NSURL *v17;

  v3 = v2;
  v17 = (NSURL *)*MEMORY[0x1E0C80C00];
  URL._bridgeToObjectiveC()(v17);
  v7 = v6;
  v16 = 0;
  v8 = objc_msgSend(v3, sel_initWithURL_options_error_, v6, a2, &v16);

  v9 = v16;
  if (v8)
  {
    v10 = type metadata accessor for URL();
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
    v12 = v9;
    v11(a1, v10);
  }
  else
  {
    v13 = v16;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a1, v14);
  }
  return v8;
}

uint64_t sub_186F79A50()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PlatformDocument.init(fileURL:documentBoxType:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PlatformDocument.init(fileURL:documentBoxType:)(a1, v1);
}

uint64_t method lookup function for PlatformDocument()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PlatformDocument.__allocating_init(fileURL:documentBoxType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t type metadata accessor for FileWrapperPlatformDocument()
{
  return objc_opt_self();
}

uint64_t outlined destroy of UTType?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (void (*)(uint64_t))MEMORY[0x1E0DF0340]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, Any>();
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v6, (uint64_t)&v15);
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<_UIImageNamedColorStyle, UIColor>();
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = *(v4 - 1);
    v7 = v5;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v2[6] + v10) = v6;
    *(_QWORD *)(v2[7] + v10) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  __int16 v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _BYTE v21[48];
  __int128 v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  __int16 v28;
  uint64_t v29;
  char v30;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, ToolbarAppearanceConfiguration>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v4, (uint64_t)v21, &lazy cache variable for type metadata for (ToolbarPlacement.Role, ToolbarAppearanceConfiguration));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v21);
    if ((v6 & 1) != 0)
      break;
    v7 = result;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    result = outlined init with take of ToolbarPlacement.Role((uint64_t)v21, v2[6] + 40 * result);
    v8 = v2[7] + 80 * v7;
    v9 = v23;
    v10 = v24;
    v11 = v25;
    v12 = v26;
    v13 = v27;
    v14 = v28;
    v15 = v29;
    v16 = v30;
    v17 = v22;
    *(_BYTE *)v8 = v21[40];
    *(_OWORD *)(v8 + 8) = v17;
    *(_BYTE *)(v8 + 24) = v9;
    *(_QWORD *)(v8 + 32) = v10;
    *(_BYTE *)(v8 + 40) = v11;
    *(_QWORD *)(v8 + 48) = v12;
    *(_BYTE *)(v8 + 56) = v13;
    *(_WORD *)(v8 + 57) = v14;
    *(_QWORD *)(v8 + 64) = v15;
    *(_BYTE *)(v8 + 72) = v16;
    v18 = v2[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v2[2] = v20;
    v4 += 120;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, Any>();
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v6, (uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for (String, Any));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<AnyHashable, DisplayList.Version>();
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v4, (uint64_t)v13, &lazy cache variable for type metadata for (AnyHashable, DisplayList.Version));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
    if ((v6 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v7 = v2[6] + 40 * result;
    v8 = v13[0];
    v9 = v13[1];
    *(_QWORD *)(v7 + 32) = v14;
    *(_OWORD *)v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    *(_QWORD *)(v2[7] + 8 * result) = v15;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 48;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];

  type metadata accessor for (UUID, UIMenuIdentifier)(0, &lazy cache variable for type metadata for (UUID, ()), (void (*)(uint64_t))type metadata accessor for ());
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)v24 - v6;
  if (!*(_QWORD *)(a1 + 16))
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<UUID, UIMenuIdentifier>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UUID, (_:)>, (void (*)(uint64_t))type metadata accessor for (_:));
  v8 = static _DictionaryStorage.allocate(capacity:)();
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v9;
  }
  v11 = *(int *)(v3 + 48);
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v24[1] = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (UUID, UIMenuIdentifier)(v14, (uint64_t)v7, &lazy cache variable for type metadata for (UUID, ()), (void (*)(uint64_t))type metadata accessor for ());
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = v9[6];
    v20 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v7, v20);
    *(_OWORD *)(v9[7] + 16 * v18) = *(_OWORD *)&v7[v11];
    v21 = v9[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v9[2] = v23;
    v14 += v15;
    if (!--v10)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, Character>();
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _BYTE v11[24];

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<HashableWeakBox<UIViewController>, ScenePhase>();
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (NSAttributedStringKey, Any)(v4, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for (HashableWeakBox<UIViewController>, ScenePhase), (void (*)(uint64_t))type metadata accessor for HashableWeakBox<UIViewController>);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11);
    if ((v6 & 1) != 0)
      break;
    v7 = result;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    result = outlined init with take of TableCellFormula((uint64_t)v11, v2[6] + 16 * result, (uint64_t (*)(_QWORD))type metadata accessor for HashableWeakBox<UIViewController>);
    *(_BYTE *)(v2[7] + v7) = v11[16];
    v8 = v2[2];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
      goto LABEL_11;
    v2[2] = v10;
    v4 += 24;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, Decodable & Encodable.Type>();
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_QWORD *)(a1 + 64);
  while (1)
  {
    v5 = *(v4 - 4);
    v6 = *(v4 - 3);
    v15 = *((_OWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v2[7] + 24 * result;
    *(_OWORD *)v11 = v15;
    *(_QWORD *)(v11 + 16) = v7;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 5;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationLinkSelectionIdentifier, Int>, (void (*)(void))lazy protocol witness table accessor for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 64);
  while (1)
  {
    v5 = *(v4 - 4);
    v6 = *(v4 - 3);
    v7 = *(v4 - 2);
    v8 = *(v4 - 1);
    v9 = *v4;
    swift_retain();
    outlined copy of _ViewList_ID.Canonical?(v6, v7);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 32 * result);
    *v12 = v5;
    v12[1] = v6;
    v12[2] = v7;
    v12[3] = v8;
    *(_QWORD *)(v2[7] + 8 * result) = v9;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 5;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];

  type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (CodingUserInfoKey, Any), (void (*)(uint64_t))MEMORY[0x1E0DEC990]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)v24 - v6;
  if (!*(_QWORD *)(a1 + 16))
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<CodingUserInfoKey, Any>();
  v8 = static _DictionaryStorage.allocate(capacity:)();
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v9;
  }
  v11 = &v7[*(int *)(v3 + 48)];
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v24[1] = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (NSAttributedStringKey, Any)(v14, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for (CodingUserInfoKey, Any), (void (*)(uint64_t))MEMORY[0x1E0DEC990]);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = v9[6];
    v20 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v7, v20);
    result = (unint64_t)outlined init with take of Any(v11, (_OWORD *)(v9[7] + 32 * v18));
    v21 = v9[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v9[2] = v23;
    v14 += v15;
    if (!--v10)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, UIAccessibilityCustomRotor>();
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, TabItemGroup.HostCache>();
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 64);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 4);
    v6 = *((_QWORD *)v4 - 3);
    v8 = *((_QWORD *)v4 - 2);
    v7 = *((_QWORD *)v4 - 1);
    v16 = *v4;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = v2[7] + 32 * result;
    *(_QWORD *)v12 = v8;
    *(_QWORD *)(v12 + 8) = v7;
    *(_OWORD *)(v12 + 16) = v16;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v2[2] = v15;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];

  type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (UUID, PlatformItemList), (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)v24 - v6;
  if (!*(_QWORD *)(a1 + 16))
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<UUID, PlatformItemList>();
  v8 = static _DictionaryStorage.allocate(capacity:)();
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v9;
  }
  v11 = *(int *)(v3 + 48);
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v24[1] = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (NSAttributedStringKey, Any)(v14, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for (UUID, PlatformItemList), (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = v9[6];
    v20 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v7, v20);
    *(_QWORD *)(v9[7] + 8 * v18) = *(_QWORD *)&v7[v11];
    v21 = v9[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v9[2] = v23;
    v14 += v15;
    if (!--v10)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (NSAttributedStringKey, Any)(v6, (uint64_t)&v13, (unint64_t *)&lazy cache variable for type metadata for (NSAttributedStringKey, Any), type metadata accessor for NSAttributedStringKey);
    v7 = v13;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<AnyHashable, Any>();
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v6, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for (AnyHashable, Any));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>(0, &lazy cache variable for type metadata for _DictionaryStorage<UIApplicationOpenExternalURLOptionsKey, Any>, (uint64_t (*)(uint64_t))type metadata accessor for UIApplicationOpenExternalURLOptionsKey, &lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, (uint64_t)&protocol conformance descriptor for UIApplicationOpenExternalURLOptionsKey);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (NSAttributedStringKey, Any)(v6, (uint64_t)&v13, &lazy cache variable for type metadata for (UIApplicationOpenExternalURLOptionsKey, Any), type metadata accessor for UIApplicationOpenExternalURLOptionsKey);
    v7 = v13;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<AccessibilityAttachmentToken, DisplayList.Version>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentToken and conformance AccessibilityAttachmentToken);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_QWORD *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *((_BYTE *)v4 - 8);
    v7 = *v4;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = v2[6] + 12 * result;
    *(_QWORD *)v10 = v5;
    *(_BYTE *)(v10 + 8) = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (void (*)(_QWORD))type metadata accessor for _DictionaryStorage<String, MainMenuItemCoordinator>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];

  type metadata accessor for (NSAttributedStringKey, Any)(0, &lazy cache variable for type metadata for (CommandGroupPlacementBox, CommandAccumulator), (void (*)(uint64_t))type metadata accessor for CommandGroupPlacementBox);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)v24 - v6;
  if (!*(_QWORD *)(a1 + 16))
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<CommandGroupPlacementBox, CommandAccumulator>();
  v8 = static _DictionaryStorage.allocate(capacity:)();
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v9;
  }
  v11 = *(int *)(v3 + 48);
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v24[1] = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (NSAttributedStringKey, Any)(v14, (uint64_t)v7, &lazy cache variable for type metadata for (CommandGroupPlacementBox, CommandAccumulator), (void (*)(uint64_t))type metadata accessor for CommandGroupPlacementBox);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = v9[6];
    v20 = type metadata accessor for CommandGroupPlacementBox(0);
    result = outlined init with take of TableCellFormula((uint64_t)v7, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, type metadata accessor for CommandGroupPlacementBox);
    *(_OWORD *)(v9[7] + 16 * v18) = *(_OWORD *)&v7[v11];
    v21 = v9[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v9[2] = v23;
    v14 += v15;
    if (!--v10)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &lazy cache variable for type metadata for _DictionaryStorage<String, [TaskActionsContainer<(), ()>.ContainerEntry]>, &lazy cache variable for type metadata for [TaskActionsContainer<(), ()>.ContainerEntry], &lazy cache variable for type metadata for TaskActionsContainer<(), ()>.ContainerEntry, MEMORY[0x1E0DEE9C0] + 8);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &lazy cache variable for type metadata for _DictionaryStorage<String, [TaskActionsContainer<String, ()>.ContainerEntry]>, &lazy cache variable for type metadata for [TaskActionsContainer<String, ()>.ContainerEntry], &lazy cache variable for type metadata for TaskActionsContainer<String, ()>.ContainerEntry, MEMORY[0x1E0DEA968]);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (void (*)(_QWORD))type metadata accessor for _DictionaryStorage<String, SceneStorageValues.AnyEntry>);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<AnyHashable, [AnyHashable : PassthroughSubject<Any, Never>]>();
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>)))(v4, (uint64_t)v13, &lazy cache variable for type metadata for (AnyHashable, [AnyHashable : PassthroughSubject<Any, Never>]), (void (*)(uint64_t))type metadata accessor for [AnyHashable : PassthroughSubject<Any, Never>]);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
    if ((v6 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v7 = v2[6] + 40 * result;
    v8 = v13[0];
    v9 = v13[1];
    *(_QWORD *)(v7 + 32) = v14;
    *(_OWORD *)v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    *(_QWORD *)(v2[7] + 8 * result) = v15;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 48;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, [Any]>();
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _OWORD v19[6];
  _OWORD v20[2];
  uint64_t v21;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>>();
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v6, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for (IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = (_OWORD *)(v3[6] + (result << 7));
    v10 = v19[3];
    v11 = v19[2];
    v12 = v19[1];
    *v9 = v19[0];
    v9[1] = v12;
    v9[2] = v11;
    v9[3] = v10;
    v13 = v19[4];
    v14 = v19[5];
    v15 = v20[0];
    *(_OWORD *)((char *)v9 + 105) = *(_OWORD *)((char *)v20 + 9);
    v9[5] = v14;
    v9[6] = v15;
    v9[4] = v13;
    result = outlined init with take of WeakBox<PlatformDocument>((uint64_t)&v21, v3[7] + 8 * result);
    v16 = v3[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v3[2] = v18;
    v6 += 136;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<AnyHashable, PassthroughSubject<Any, Never>>();
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>)))(v4, (uint64_t)v13, &lazy cache variable for type metadata for (AnyHashable, PassthroughSubject<Any, Never>), (void (*)(uint64_t))type metadata accessor for PassthroughSubject<Any, Never>);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
    if ((v6 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v7 = v2[6] + 40 * result;
    v8 = v13[0];
    v9 = v13[1];
    *(_QWORD *)(v7 + 32) = v14;
    *(_OWORD *)v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    *(_QWORD *)(v2[7] + 8 * result) = v15;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 48;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  char v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char v20;
  _BYTE v21[40];

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TableColumnCustomizationID, TableColumnCustomizationEntry>, (void (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID and conformance TableColumnCustomizationID);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (char *)(a1 + 81);
  while (1)
  {
    v5 = *(_OWORD *)(v4 - 33);
    v18 = *(_OWORD *)(v4 - 49);
    v19 = v5;
    v20 = *(v4 - 17);
    v6 = *(_QWORD *)(v4 - 9);
    v7 = *(v4 - 1);
    v8 = *v4;
    outlined init with take of TableColumnCustomizationID.Base((uint64_t)&v18, (uint64_t)v21);
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v21);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v18);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = v2[6] + 40 * result;
    v12 = v18;
    v13 = v19;
    *(_BYTE *)(v11 + 32) = v20;
    *(_OWORD *)v11 = v12;
    *(_OWORD *)(v11 + 16) = v13;
    v14 = v2[7] + 16 * result;
    *(_QWORD *)v14 = v6;
    *(_BYTE *)(v14 + 8) = v7;
    *(_BYTE *)(v14 + 9) = v8;
    v15 = v2[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v4 += 56;
    v2[2] = v17;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  id v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<UIDragItem, CGPoint>();
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 40);
  while (1)
  {
    v11 = *v4;
    v5 = *((id *)v4 - 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v7 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v2[6] + 8 * result) = v5;
    *(_OWORD *)(v2[7] + 16 * result) = v11;
    v8 = v2[2];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
      goto LABEL_11;
    v2[2] = v10;
    v4 = (_OWORD *)((char *)v4 + 24);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  id v5;
  unint64_t result;
  char v7;
  _OWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<UIDragItem, CGAffineTransform>();
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 40);
  while (1)
  {
    v13 = v4[1];
    v14 = *v4;
    v12 = v4[2];
    v5 = *((id *)v4 - 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v7 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v2[6] + 8 * result) = v5;
    v8 = (_OWORD *)(v2[7] + 48 * result);
    *v8 = v14;
    v8[1] = v13;
    v8[2] = v12;
    v9 = v2[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      goto LABEL_11;
    v2[2] = v11;
    v4 = (_OWORD *)((char *)v4 + 56);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TabCustomizationID, TabCustomizationEntry>, (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (char *)(a1 + 49);
  while (1)
  {
    v5 = *(_QWORD *)(v4 - 17);
    v6 = *(_QWORD *)(v4 - 9);
    v7 = *(v4 - 1);
    v8 = *v4;
    outlined copy of TabCustomizationID.Base();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = v2[6] + 24 * result;
    *(_QWORD *)v11 = v5;
    *(_QWORD *)(v11 + 8) = v6;
    *(_BYTE *)(v11 + 16) = v7;
    *(_BYTE *)(v2[7] + result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4 += 24;
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TabCustomizationID, TabSectionCustomizationEntry>, (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_QWORD *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v7 = *((_BYTE *)v4 - 8);
    v8 = *v4;
    outlined copy of TabCustomizationID.Base();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = v2[6] + 24 * result;
    *(_QWORD *)v11 = v5;
    *(_QWORD *)(v11 + 8) = v6;
    *(_BYTE *)(v11 + 16) = v7;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 4;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, TabEntry>();
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v6, (uint64_t)&v15, &lazy cache variable for type metadata for (String, TabEntry));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)outlined init with take of TabEntry(&v17, (void *)(v3[7] + 272 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 288;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, Int>();
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _BYTE v11[40];
  __int16 v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, PlatformBarUpdates>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v4, (uint64_t)v11, &lazy cache variable for type metadata for (ToolbarPlacement.Role, PlatformBarUpdates));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11);
    if ((v6 & 1) != 0)
      break;
    v7 = result;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    result = outlined init with take of ToolbarPlacement.Role((uint64_t)v11, v2[6] + 40 * result);
    *(_WORD *)(v2[7] + 2 * v7) = v12;
    v8 = v2[2];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
      goto LABEL_11;
    v2[2] = v10;
    v4 += 48;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  type metadata accessor for (Int, (CountingIndex<Int>, CountingIndex<Int>))(0, (unint64_t *)&lazy cache variable for type metadata for (String, ToolbarStorage.Entry), (void (*)(uint64_t))type metadata accessor for ToolbarStorage.Entry);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (uint64_t *)((char *)&v26 - v6);
  if (!*(_QWORD *)(a1 + 16))
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, ToolbarStorage.Entry>();
  v8 = static _DictionaryStorage.allocate(capacity:)();
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v9;
  }
  v11 = (uint64_t)v7 + *(int *)(v3 + 48);
  v26 = a1;
  v27 = v11;
  v12 = v8 + 64;
  v13 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v14 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>)))(v13, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for (String, ToolbarStorage.Entry), (void (*)(uint64_t))type metadata accessor for ToolbarStorage.Entry);
    v16 = *v7;
    v15 = v7[1];
    result = specialized __RawDictionaryStorage.find<A>(_:)(*v7, v15);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v9[6] + 16 * result);
    *v20 = v16;
    v20[1] = v15;
    v21 = v9[7];
    v22 = type metadata accessor for ToolbarStorage.Entry(0);
    result = outlined init with take of TableCellFormula(v27, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, type metadata accessor for ToolbarStorage.Entry);
    v23 = v9[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v9[2] = v25;
    v13 += v14;
    if (!--v10)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, Toolbar.VendedItem>();
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_BYTE *)(a1 + 56);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 3);
    v6 = *((_QWORD *)v4 - 2);
    v7 = (void *)*((_QWORD *)v4 - 1);
    v8 = *v4;
    v9 = v7;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    *v12 = v5;
    v12[1] = v6;
    v13 = v2[7] + 16 * result;
    *(_QWORD *)v13 = v7;
    *(_BYTE *)(v13 + 8) = v8;
    v14 = v2[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4 += 32;
    v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<UINavigationController, Set<NavigationStackHostingController<AnyView>>>();
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _BYTE v13[40];
  __int128 v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<Toolbar.BarLocation, Toolbar.LocationStorage>, (void (*)(void))lazy protocol witness table accessor for type Toolbar.BarLocation and conformance Toolbar.BarLocation);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v4, (uint64_t)v13, &lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.LocationStorage));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
    if ((v6 & 1) != 0)
      break;
    v7 = result;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    result = outlined init with take of Toolbar.BarLocation((uint64_t)v13, v2[6] + 40 * result);
    v8 = v2[7] + 24 * v7;
    v9 = v15;
    *(_OWORD *)v8 = v14;
    *(_QWORD *)(v8 + 16) = v9;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 64;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;
  Swift::UInt v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<SceneID, KeyboardShortcut>, (void (*)(void))lazy protocol witness table accessor for type SceneID and conformance SceneID);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v20 = v2 + 64;
  swift_retain();
  v5 = (_BYTE *)(a1 + 80);
  while (1)
  {
    v6 = *((_QWORD *)v5 - 6);
    v7 = *((_QWORD *)v5 - 5);
    v8 = *(v5 - 32);
    v10 = *((_QWORD *)v5 - 3);
    v9 = *((_QWORD *)v5 - 2);
    v11 = *((_QWORD *)v5 - 1);
    v12 = *v5;
    outlined copy of SceneID(v6, v7, v8);
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7, v8);
    if ((v14 & 1) != 0)
      break;
    *(_QWORD *)(v20 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v15 = v3[6] + 24 * result;
    *(_QWORD *)v15 = v6;
    *(_QWORD *)(v15 + 8) = v7;
    *(_BYTE *)(v15 + 16) = v8;
    v16 = v3[7] + 32 * result;
    *(_QWORD *)v16 = v10;
    *(_QWORD *)(v16 + 8) = v9;
    *(_QWORD *)(v16 + 16) = v11;
    *(_BYTE *)(v16 + 24) = v12;
    v17 = v3[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_11;
    v5 += 56;
    v3[2] = v19;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  type metadata accessor for (NSFileWrapper, UTType)();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (_QWORD *)((char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<NSFileWrapper, UTType>();
  v8 = static _DictionaryStorage.allocate(capacity:)();
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v9;
  }
  v11 = (char *)v7 + *(int *)(v3 + 48);
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v25[1] = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v14, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (NSFileWrapper, UTType));
    v16 = *v7;
    result = specialized __RawDictionaryStorage.find<A>(_:)(*v7);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v9[6] + 8 * result) = v16;
    v20 = v9[7];
    v21 = type metadata accessor for UTType();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v19, v11, v21);
    v22 = v9[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v9[2] = v24;
    v14 += v15;
    if (!--v10)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];

  type metadata accessor for (UUID, UIMenuIdentifier)(0, (unint64_t *)&lazy cache variable for type metadata for (UUID, UIMenuIdentifier), type metadata accessor for UIMenuIdentifier);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)v24 - v6;
  if (!*(_QWORD *)(a1 + 16))
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<UUID, UIMenuIdentifier>(0, &lazy cache variable for type metadata for _DictionaryStorage<UUID, UIMenuIdentifier>, type metadata accessor for UIMenuIdentifier);
  v8 = static _DictionaryStorage.allocate(capacity:)();
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v9;
  }
  v11 = *(int *)(v3 + 48);
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v24[1] = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (UUID, UIMenuIdentifier)(v14, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for (UUID, UIMenuIdentifier), type metadata accessor for UIMenuIdentifier);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = v9[6];
    v20 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v7, v20);
    *(_QWORD *)(v9[7] + 8 * v18) = *(_QWORD *)&v7[v11];
    v21 = v9[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v9[2] = v23;
    v14 += v15;
    if (!--v10)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _BYTE v16[48];
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  char v21;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>, type metadata accessor for (Int, (CountingIndex<Int>, CountingIndex<Int>)), (void (*)(void))lazy protocol witness table accessor for type TableRowID and conformance TableRowID);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>)))(v4, (uint64_t)v16, &lazy cache variable for type metadata for (TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))), type metadata accessor for (Int, (CountingIndex<Int>, CountingIndex<Int>)));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
    if ((v6 & 1) != 0)
      break;
    v7 = result;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    result = outlined init with take of TableRowID((uint64_t)v16, v2[6] + 48 * result);
    v8 = v2[7] + 56 * v7;
    v9 = v18;
    v10 = v19;
    v11 = v21;
    v12 = v20;
    *(_OWORD *)v8 = v17;
    *(_QWORD *)(v8 + 16) = v9;
    *(_BYTE *)(v8 + 24) = v10;
    *(_OWORD *)(v8 + 32) = v12;
    *(_BYTE *)(v8 + 48) = v11;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v2[2] = v15;
    v4 += 104;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, String>();
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _BYTE v11[40];
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, AnyShapeStyle>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v4, (uint64_t)v11, &lazy cache variable for type metadata for (ToolbarPlacement.Role, AnyShapeStyle));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11);
    if ((v6 & 1) != 0)
      break;
    v7 = result;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    result = outlined init with take of ToolbarPlacement.Role((uint64_t)v11, v2[6] + 40 * result);
    *(_QWORD *)(v2[7] + 8 * v7) = v12;
    v8 = v2[2];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
      goto LABEL_11;
    v2[2] = v10;
    v4 += 48;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>(0, &lazy cache variable for type metadata for _DictionaryStorage<RBDisplayListRenderKey, Any>, (uint64_t (*)(uint64_t))type metadata accessor for RBDisplayListRenderKey, &lazy protocol witness table cache variable for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey, (uint64_t)&protocol conformance descriptor for RBDisplayListRenderKey);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (NSAttributedStringKey, Any)(v6, (uint64_t)&v13, (unint64_t *)&lazy cache variable for type metadata for (RBDisplayListRenderKey, Any), type metadata accessor for RBDisplayListRenderKey);
    v7 = v13;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<AccessibilityTechnology, [AccessibilityFocus.Match : Set<UniqueID>]>();
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_BYTE *)v8 - 8);
    v13 = *v8;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  unsigned __int8 v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int8 v11[8];
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityTechnology, AccessibilityFocus.Target>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityTechnology and conformance AccessibilityTechnology);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 32; ; i += 16)
    {
      outlined init with copy of (String, Any)(i, (uint64_t)v11, &lazy cache variable for type metadata for (AccessibilityTechnology, AccessibilityFocus.Target));
      v5 = v11[0];
      result = specialized __RawDictionaryStorage.find<A>(_:)(v11[0]);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      result = outlined init with take of AccessibilityFocus.Target((uint64_t)&v12, v3[7] + 8 * result);
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  char *v4;
  int v5;
  char v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AdaptableTabBarPlacement, Visibility>, (void (*)(void))lazy protocol witness table accessor for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = (char *)(a1 + 33);
  do
  {
    v5 = *(v4 - 1);
    if (v5 == 3)
      break;
    v6 = *v4;
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(v4 - 1));
    if ((v8 & 1) != 0)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v5;
    *(_BYTE *)(v3[7] + result) = v6;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      goto LABEL_11;
    v4 += 2;
    v3[2] = v11;
    --v1;
  }
  while (v1);
  return (unint64_t)v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  double *i;
  double v5;
  double v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<CGFloat, Int>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (double *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(double *)(v3[6] + v9) = v5;
      *(double *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  unint64_t result;
  char v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  __int128 v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<ContainerBackgroundKeys.AnyCustomKey, AnyView>, (void (*)(void))lazy protocol witness table accessor for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v13 = *(_OWORD *)(a1 + 32);
  result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(a1 + 32));
  if ((v5 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v6 = (__int128 *)(a1 + 48);
  v7 = v1 - 1;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v13;
    *(_QWORD *)(v3[7] + 8 * result) = *((_QWORD *)&v13 + 1);
    v8 = v3[2];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
      break;
    v3[2] = v10;
    if (!v7)
      goto LABEL_8;
    v11 = *v6++;
    v13 = v11;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    --v7;
    if ((v12 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  __int128 *i;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t result;
  char v11;
  _OWORD *v12;
  __int128 v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  __int128 v24;
  _BYTE v25[32];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  __int128 v34;
  _BYTE v35[25];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest>, (void (*)(void))lazy protocol witness table accessor for type NavigationStackViewPosition and conformance NavigationStackViewPosition);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (__int128 *)(a1 + 32); ; i += 12)
    {
      v5 = i[9];
      v31 = i[8];
      v32 = v5;
      v33[0] = i[10];
      *(_OWORD *)((char *)v33 + 12) = *(__int128 *)((char *)i + 172);
      v6 = i[5];
      v27 = i[4];
      v28 = v6;
      v7 = i[7];
      v29 = i[6];
      v30 = v7;
      v8 = i[1];
      v24 = *i;
      *(_OWORD *)v25 = v8;
      v9 = i[3];
      *(_OWORD *)&v25[16] = i[2];
      v26 = v9;
      v34 = v24;
      v35[0] = v25[0];
      *(_OWORD *)&v35[8] = *(_OWORD *)&v25[8];
      v35[24] = v25[24];
      result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v34);
      if ((v11 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v12 = (_OWORD *)(v3[6] + 48 * result);
      v13 = *(_OWORD *)v35;
      *v12 = v34;
      v12[1] = v13;
      *(_OWORD *)((char *)v12 + 25) = *(_OWORD *)&v35[9];
      v14 = (_OWORD *)(v3[7] + 144 * result);
      v15 = v31;
      v16 = v32;
      v17 = v33[0];
      *(_OWORD *)((char *)v14 + 124) = *(_OWORD *)((char *)v33 + 12);
      v14[6] = v16;
      v14[7] = v17;
      v14[5] = v15;
      v18 = v27;
      v19 = v28;
      v20 = v30;
      v14[3] = v29;
      v14[4] = v20;
      v14[1] = v18;
      v14[2] = v19;
      *v14 = v26;
      v21 = v3[2];
      v22 = __OFADD__(v21, 1);
      v23 = v21 + 1;
      if (v22)
        goto LABEL_10;
      v3[2] = v23;
      outlined retain of (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)((uint64_t)&v24);
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  unint64_t result;
  char v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  __int128 v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, [AnyConnectionOptionActionBox]>();
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v13 = *(_OWORD *)(a1 + 32);
  result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(a1 + 32));
  if ((v5 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v6 = (__int128 *)(a1 + 48);
  v7 = v1 - 1;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v13;
    *(_QWORD *)(v3[7] + 8 * result) = *((_QWORD *)&v13 + 1);
    v8 = v3[2];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
      break;
    v3[2] = v10;
    if (!v7)
      goto LABEL_8;
    v11 = *v6++;
    v13 = v11;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    --v7;
    if ((v12 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<AccessibilityRelationshipScope.Relationship, [AccessibilityNode]>();
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_BYTE *)v8 - 8);
    v13 = *v8;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  Swift::UInt v5;
  Swift::UInt v6;
  unint64_t result;
  char v8;
  Swift::UInt *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  Swift::UInt v13;
  Swift::UInt v14;
  __int128 v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<EventID, EventType>();
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 32; ; i += 56)
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(i, (uint64_t)&v13, (uint64_t (*)(_QWORD))type metadata accessor for (EventID, EventType));
      v5 = v13;
      v6 = v14;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = (Swift::UInt *)(v3[6] + 16 * result);
      *v9 = v5;
      v9[1] = v6;
      result = outlined init with take of OptionalBinaryInteger(&v15, v3[7] + 40 * result);
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t result;
  char v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, NavigationListState.Selection>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_QWORD *)(a1 + 112); ; i += 11)
    {
      v5 = *((_BYTE *)i - 48);
      v6 = *(i - 5);
      v7 = *(i - 4);
      v8 = *(i - 3);
      v9 = *i;
      v10 = *((_OWORD *)i - 4);
      v19 = *((_OWORD *)i - 1);
      v20 = *((_OWORD *)i - 5);
      v21 = v10;
      LOBYTE(v22) = v5;
      *((_QWORD *)&v22 + 1) = v6;
      result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v20);
      if ((v12 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v13 = (_OWORD *)(v3[6] + 48 * result);
      v14 = v21;
      *v13 = v20;
      v13[1] = v14;
      v13[2] = v22;
      v15 = v3[7] + 40 * result;
      *(_QWORD *)v15 = v7;
      *(_QWORD *)(v15 + 8) = v8;
      *(_OWORD *)(v15 + 16) = v19;
      *(_QWORD *)(v15 + 32) = v9;
      v16 = v3[2];
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
        goto LABEL_10;
      v3[2] = v18;
      swift_retain();
      swift_retain();
      swift_retain();
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t result;
  char v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>, (void (*)(uint64_t))type metadata accessor for [Binding<Bool>], (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_QWORD *)(a1 + 80); ; i += 7)
    {
      v5 = *((_BYTE *)i - 16);
      v6 = *(i - 1);
      v7 = *i;
      v8 = *((_OWORD *)i - 2);
      v16 = *((_OWORD *)i - 3);
      v17 = v8;
      LOBYTE(v18) = v5;
      *((_QWORD *)&v18 + 1) = v6;
      result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v16);
      if ((v10 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v11 = (_OWORD *)(v3[6] + 48 * result);
      v12 = v17;
      *v11 = v16;
      v11[1] = v12;
      v11[2] = v18;
      *(_QWORD *)(v3[7] + 8 * result) = v7;
      v13 = v3[2];
      v14 = __OFADD__(v13, 1);
      v15 = v13 + 1;
      if (v14)
        goto LABEL_10;
      v3[2] = v15;
      swift_bridgeObjectRetain();
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t result;
  char v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, AnyListSelection>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_QWORD *)(a1 + 80); ; i += 7)
    {
      v5 = *((_BYTE *)i - 16);
      v6 = *(i - 1);
      v7 = *i;
      v8 = *((_OWORD *)i - 2);
      v16 = *((_OWORD *)i - 3);
      v17 = v8;
      LOBYTE(v18) = v5;
      *((_QWORD *)&v18 + 1) = v6;
      result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v16);
      if ((v10 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v11 = (_OWORD *)(v3[6] + 48 * result);
      v12 = v17;
      *v11 = v16;
      v11[1] = v12;
      v11[2] = v18;
      *(_QWORD *)(v3[7] + 8 * result) = v7;
      v13 = v3[2];
      v14 = __OFADD__(v13, 1);
      v15 = v13 + 1;
      if (v14)
        goto LABEL_10;
      v3[2] = v15;
      swift_retain();
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _BYTE *i;
  __int128 v5;
  char v6;
  unint64_t result;
  char v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, Bool>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_BYTE *)(a1 + 80); ; i += 56)
    {
      v5 = *((_OWORD *)i - 2);
      v14 = *((_OWORD *)i - 3);
      v15 = v5;
      v16 = *((_OWORD *)i - 1);
      v6 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v14);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = (_OWORD *)(v3[6] + 48 * result);
      v10 = v15;
      *v9 = v14;
      v9[1] = v10;
      v9[2] = v16;
      *(_BYTE *)(v3[7] + result) = v6;
      v11 = v3[2];
      v12 = __OFADD__(v11, 1);
      v13 = v11 + 1;
      if (v12)
        goto LABEL_10;
      v3[2] = v13;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  unint64_t result;
  char v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  __int128 v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, NavigationDestinationResolverBase>();
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v13 = *(_OWORD *)(a1 + 32);
  result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(a1 + 32));
  if ((v5 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v6 = (__int128 *)(a1 + 48);
  v7 = v1 - 1;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v13;
    *(_QWORD *)(v3[7] + 8 * result) = *((_QWORD *)&v13 + 1);
    v8 = v3[2];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
      break;
    v3[2] = v10;
    if (!v7)
      goto LABEL_8;
    v11 = *v6++;
    v13 = v11;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    --v7;
    if ((v12 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  char v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _BYTE v15[8];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationSplitColumn, NavigationState.StackContent.PositionedView>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitColumn and conformance NavigationSplitColumn);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 32; ; i += 80)
    {
      outlined init with copy of (String, Any)(i, (uint64_t)v15, &lazy cache variable for type metadata for (NavigationSplitColumn, NavigationState.StackContent.PositionedView));
      v5 = v15[0];
      result = specialized __RawDictionaryStorage.find<A>(_:)(v15[0]);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      v8 = v3[7] + 72 * result;
      *(_OWORD *)v8 = v16;
      v9 = v17;
      v10 = v18;
      v11 = v19;
      *(_BYTE *)(v8 + 64) = v20;
      *(_OWORD *)(v8 + 32) = v10;
      *(_OWORD *)(v8 + 48) = v11;
      *(_OWORD *)(v8 + 16) = v9;
      v12 = v3[2];
      v13 = __OFADD__(v12, 1);
      v14 = v12 + 1;
      if (v13)
        goto LABEL_10;
      v3[2] = v14;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _DWORD *i;
  Swift::UInt v5;
  unsigned __int8 v6;
  Swift::UInt v7;
  int v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.StackContent.Key, NavigationState.SelectionSeed>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_DWORD *)(a1 + 56); ; i += 8)
    {
      v5 = *((_QWORD *)i - 3);
      v6 = *((_BYTE *)i - 16);
      v7 = *((_QWORD *)i - 1);
      v8 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, v7);
      if ((v10 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v11 = v3[6] + 24 * result;
      *(_QWORD *)v11 = v5;
      *(_BYTE *)(v11 + 8) = v6;
      *(_QWORD *)(v11 + 16) = v7;
      *(_DWORD *)(v3[7] + 4 * result) = v8;
      v12 = v3[2];
      v13 = __OFADD__(v12, 1);
      v14 = v12 + 1;
      if (v13)
        goto LABEL_10;
      v3[2] = v14;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  Swift::UInt v5;
  void *v6;
  unint64_t result;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  char v17;
  id v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<NavigationContentAbstractPosition, NavigationStackHostingController<AnyView>>();
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(a1 + 48);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    v18 = v6;
    return (unint64_t)v3;
  }
  v9 = (_QWORD *)(a1 + 72);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = v3[6] + 16 * result;
    *(_BYTE *)v10 = v4;
    *(_QWORD *)(v10 + 8) = v5;
    *(_QWORD *)(v3[7] + 8 * result) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *((_BYTE *)v9 - 16);
    v5 = *(v9 - 1);
    v15 = (void *)*v9;
    v16 = v6;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
    v9 = v14;
    v6 = v15;
    if ((v17 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (void (*)(_QWORD))type metadata accessor for _DictionaryStorage<ObjectIdentifier, Int>, (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  unint64_t result;
  char v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  _BYTE v38[248];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, AlertStorage>, (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_OWORD *)(a1 + 240);
  *(_OWORD *)&v38[192] = *(_OWORD *)(a1 + 224);
  *(_OWORD *)&v38[208] = v4;
  *(_OWORD *)&v38[224] = *(_OWORD *)(a1 + 256);
  *(_QWORD *)&v38[240] = *(_QWORD *)(a1 + 272);
  v5 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)&v38[128] = *(_OWORD *)(a1 + 160);
  *(_OWORD *)&v38[144] = v5;
  v6 = *(_OWORD *)(a1 + 208);
  *(_OWORD *)&v38[160] = *(_OWORD *)(a1 + 192);
  *(_OWORD *)&v38[176] = v6;
  v7 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)&v38[64] = *(_OWORD *)(a1 + 96);
  *(_OWORD *)&v38[80] = v7;
  v8 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)&v38[96] = *(_OWORD *)(a1 + 128);
  *(_OWORD *)&v38[112] = v8;
  v9 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)v38 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v38[16] = v9;
  v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v38[32] = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v38[48] = v10;
  v11 = *(_DWORD *)v38;
  result = specialized __RawDictionaryStorage.find<A>(_:)(*(Swift::UInt32 *)v38);
  if ((v13 & 1) != 0)
  {
LABEL_7:
    __break(1u);
    return MEMORY[0x1E0DEE9E0];
  }
  v14 = a1 + 280;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v11;
    v15 = (_OWORD *)(v3[7] + 240 * result);
    v16 = *(_OWORD *)&v38[8];
    v17 = *(_OWORD *)&v38[40];
    v15[1] = *(_OWORD *)&v38[24];
    v15[2] = v17;
    *v15 = v16;
    v18 = *(_OWORD *)&v38[56];
    v19 = *(_OWORD *)&v38[72];
    v20 = *(_OWORD *)&v38[104];
    v15[5] = *(_OWORD *)&v38[88];
    v15[6] = v20;
    v15[3] = v18;
    v15[4] = v19;
    v21 = *(_OWORD *)&v38[120];
    v22 = *(_OWORD *)&v38[136];
    v23 = *(_OWORD *)&v38[168];
    v15[9] = *(_OWORD *)&v38[152];
    v15[10] = v23;
    v15[7] = v21;
    v15[8] = v22;
    v24 = *(_OWORD *)&v38[184];
    v25 = *(_OWORD *)&v38[200];
    v26 = *(_OWORD *)&v38[232];
    v15[13] = *(_OWORD *)&v38[216];
    v15[14] = v26;
    v15[11] = v24;
    v15[12] = v25;
    v27 = v3[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      break;
    v3[2] = v29;
    outlined retain of (ViewIdentity, AlertStorage)(v38);
    if (!--v1)
      return (unint64_t)v3;
    v30 = *(_OWORD *)(v14 + 208);
    *(_OWORD *)&v38[192] = *(_OWORD *)(v14 + 192);
    *(_OWORD *)&v38[208] = v30;
    *(_OWORD *)&v38[224] = *(_OWORD *)(v14 + 224);
    *(_QWORD *)&v38[240] = *(_QWORD *)(v14 + 240);
    v31 = *(_OWORD *)(v14 + 144);
    *(_OWORD *)&v38[128] = *(_OWORD *)(v14 + 128);
    *(_OWORD *)&v38[144] = v31;
    v32 = *(_OWORD *)(v14 + 176);
    *(_OWORD *)&v38[160] = *(_OWORD *)(v14 + 160);
    *(_OWORD *)&v38[176] = v32;
    v33 = *(_OWORD *)(v14 + 80);
    *(_OWORD *)&v38[64] = *(_OWORD *)(v14 + 64);
    *(_OWORD *)&v38[80] = v33;
    v34 = *(_OWORD *)(v14 + 112);
    *(_OWORD *)&v38[96] = *(_OWORD *)(v14 + 96);
    *(_OWORD *)&v38[112] = v34;
    v35 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)v38 = *(_OWORD *)v14;
    *(_OWORD *)&v38[16] = v35;
    v36 = *(_OWORD *)(v14 + 48);
    *(_OWORD *)&v38[32] = *(_OWORD *)(v14 + 32);
    *(_OWORD *)&v38[48] = v36;
    v11 = *(_DWORD *)v38;
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(Swift::UInt32 *)v38);
    v14 += 248;
    if ((v37 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  Swift::UInt32 v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  Swift::UInt32 v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, ConfirmationDialog>, (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 32; ; i += 184)
    {
      outlined init with copy of (String, Any)(i, (uint64_t)&v11, &lazy cache variable for type metadata for (ViewIdentity, ConfirmationDialog));
      v5 = v11;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_DWORD *)(v3[6] + 4 * result) = v5;
      result = outlined init with take of ConfirmationDialog((uint64_t)&v12, v3[7] + 176 * result);
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  Swift::UInt32 v4;
  unint64_t result;
  char v6;
  _OWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _OWORD *v11;
  char v12;
  __int128 v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, (_:)>, (void (*)(uint64_t))type metadata accessor for (_:), (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_DWORD *)(a1 + 32);
  v13 = *(_OWORD *)(a1 + 40);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v6 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v7 = (_OWORD *)(a1 + 64);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    *(_OWORD *)(v3[7] + 16 * result) = v13;
    v8 = v3[2];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
      break;
    v3[2] = v10;
    if (!--v1)
      goto LABEL_8;
    v11 = (_OWORD *)((char *)v7 + 24);
    v4 = *((_DWORD *)v7 - 2);
    v13 = *v7;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    v7 = v11;
    if ((v12 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  int *i;
  __int128 v5;
  int v6;
  unint64_t result;
  char v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  __int128 v14;
  _OWORD v15[2];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationStackViewPosition, VersionSeed>, (void (*)(void))lazy protocol witness table accessor for type NavigationStackViewPosition and conformance NavigationStackViewPosition);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (int *)(a1 + 76); ; i += 12)
    {
      v5 = *(_OWORD *)(i - 7);
      v14 = *(_OWORD *)(i - 11);
      v15[0] = v5;
      *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)((char *)i - 19);
      v6 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v14);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = (_OWORD *)(v3[6] + 48 * result);
      v10 = v15[0];
      *v9 = v14;
      v9[1] = v10;
      *(_OWORD *)((char *)v9 + 25) = *(_OWORD *)((char *)v15 + 9);
      *(_DWORD *)(v3[7] + 4 * result) = v6;
      v11 = v3[2];
      v12 = __OFADD__(v11, 1);
      v13 = v11 + 1;
      if (v12)
        goto LABEL_10;
      v3[2] = v13;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  __int128 *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  _DWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  id v15;
  __int128 v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<DisplayList.Index.ID, DisplayList.AccessibilityUpdater.CacheValue>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.Index.ID and conformance DisplayList.Index.ID);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (__int128 *)(a1 + 48); ; i += 2)
    {
      v5 = *((unsigned int *)i - 4);
      v6 = *((unsigned int *)i - 3);
      v7 = *((unsigned int *)i - 2);
      v8 = *((unsigned int *)i - 1);
      v16 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5 | (v6 << 32), v7 | (v8 << 32));
      if ((v10 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v11 = (_DWORD *)(v3[6] + 16 * result);
      *v11 = v5;
      v11[1] = v6;
      v11[2] = v7;
      v11[3] = v8;
      *(_OWORD *)(v3[7] + 16 * result) = v16;
      v12 = v3[2];
      v13 = __OFADD__(v12, 1);
      v14 = v12 + 1;
      if (v13)
        goto LABEL_10;
      v3[2] = v14;
      v15 = (id)v16;
      swift_bridgeObjectRetain();
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  Swift::UInt v4;
  unint64_t result;
  char v6;
  _OWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _OWORD *v11;
  char v12;
  __int128 v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<KeyCommandID, ()>, (void (*)(uint64_t))type metadata accessor for (), (void (*)(void))lazy protocol witness table accessor for type KeyCommandID and conformance KeyCommandID);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 32);
  v13 = *(_OWORD *)(a1 + 40);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v6 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v7 = (_OWORD *)(a1 + 64);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v4;
    *(_OWORD *)(v3[7] + 16 * result) = v13;
    v8 = v3[2];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
      break;
    v3[2] = v10;
    if (!--v1)
      goto LABEL_8;
    v11 = (_OWORD *)((char *)v7 + 24);
    v4 = *((_QWORD *)v7 - 1);
    v13 = *v7;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    v7 = v11;
    if ((v12 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, NavigationDestinationPresentation>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 32; ; i += 104)
    {
      outlined init with copy of (String, Any)(i, (uint64_t)&v11, &lazy cache variable for type metadata for (Namespace.ID, NavigationDestinationPresentation));
      v5 = v11;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      result = outlined init with take of NavigationDestinationPresentation((uint64_t)&v12, v3[7] + 96 * result);
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  __int128 *v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[64];
  _BYTE v33[25];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, TouchEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)&v32[32] = *(_OWORD *)(a1 + 96);
  *(_OWORD *)&v32[48] = v4;
  *(_OWORD *)v33 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)&v33[9] = *(_OWORD *)(a1 + 137);
  v5 = *(_OWORD *)(a1 + 48);
  v30 = *(_OWORD *)(a1 + 32);
  v31 = v5;
  v6 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)v32 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v32[16] = v6;
  v8 = *((_QWORD *)&v30 + 1);
  v7 = v30;
  result = specialized __RawDictionaryStorage.find<A>(_:)(v30, *((Swift::UInt *)&v30 + 1));
  if ((v10 & 1) != 0)
  {
LABEL_7:
    __break(1u);
    return MEMORY[0x1E0DEE9E0];
  }
  v11 = (__int128 *)(a1 + 160);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (_QWORD *)(v3[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v3[7] + 112 * result;
    v14 = BYTE8(v31);
    v15 = *(_QWORD *)v32;
    v16 = *(_QWORD *)&v32[56];
    v17 = *(_QWORD *)v33;
    v18 = v33[24];
    v19 = *(_OWORD *)&v32[8];
    v20 = *(_OWORD *)&v32[24];
    v21 = *(_OWORD *)&v32[40];
    v22 = *(_OWORD *)&v33[8];
    *(_QWORD *)v13 = v31;
    *(_BYTE *)(v13 + 8) = v14;
    *(_QWORD *)(v13 + 16) = v15;
    *(_OWORD *)(v13 + 24) = v19;
    *(_OWORD *)(v13 + 40) = v20;
    *(_OWORD *)(v13 + 56) = v21;
    *(_QWORD *)(v13 + 72) = v16;
    *(_QWORD *)(v13 + 80) = v17;
    *(_OWORD *)(v13 + 88) = v22;
    *(_BYTE *)(v13 + 104) = v18;
    v23 = v3[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      break;
    v3[2] = v25;
    outlined retain of CoreGlue2.LinkURLParameters((uint64_t)&v30);
    if (!--v1)
      return (unint64_t)v3;
    v26 = v11[5];
    *(_OWORD *)&v32[32] = v11[4];
    *(_OWORD *)&v32[48] = v26;
    *(_OWORD *)v33 = v11[6];
    *(_OWORD *)&v33[9] = *(__int128 *)((char *)v11 + 105);
    v27 = v11[1];
    v30 = *v11;
    v31 = v27;
    v28 = v11[3];
    *(_OWORD *)v32 = v11[2];
    *(_OWORD *)&v32[16] = v28;
    v8 = *((_QWORD *)&v30 + 1);
    v7 = v30;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v30, *((Swift::UInt *)&v30 + 1));
    v11 += 8;
    if ((v29 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  Swift::UInt v4;
  Swift::UInt v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  _BYTE *v12;
  Swift::UInt *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  char v20;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, PhysicalButtonEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_BYTE *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_BYTE *)(a1 + 72);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
  if ((v11 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v12 = (_BYTE *)(a1 + 120);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (Swift::UInt *)(v3[6] + 16 * result);
    *v13 = v4;
    v13[1] = v5;
    v14 = v3[7] + 32 * result;
    *(_QWORD *)v14 = v6;
    *(_BYTE *)(v14 + 8) = v7;
    *(_QWORD *)(v14 + 16) = v8;
    *(_BYTE *)(v14 + 24) = v9;
    v15 = v3[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      break;
    v3[2] = v17;
    if (!--v1)
      goto LABEL_8;
    v18 = v12 + 48;
    v4 = *((_QWORD *)v12 - 5);
    v5 = *((_QWORD *)v12 - 4);
    v6 = *((_QWORD *)v12 - 3);
    v7 = *(v12 - 16);
    v19 = *((_QWORD *)v12 - 1);
    v9 = *v12;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
    v12 = v18;
    v8 = v19;
    if ((v20 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Int, DragReorderableLayoutCoordinator.ChildFrame>();
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (uint64_t *)(a1 + 40); ; i += 7)
    {
      v5 = *(i - 1);
      v6 = *i;
      v7 = i[1];
      v8 = i[2];
      v16 = *(_OWORD *)(i + 3);
      v9 = i[5];
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v11 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      v12 = v3[7] + 48 * result;
      *(_QWORD *)v12 = v6;
      *(_QWORD *)(v12 + 8) = v7;
      *(_QWORD *)(v12 + 16) = v8;
      *(_OWORD *)(v12 + 24) = v16;
      *(_QWORD *)(v12 + 40) = v9;
      v13 = v3[2];
      v14 = __OFADD__(v13, 1);
      v15 = v13 + 1;
      if (v14)
        goto LABEL_10;
      v3[2] = v15;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _BYTE *i;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationSplitColumn, NavigationSplitViewColumnWidth>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitColumn and conformance NavigationSplitColumn);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_BYTE *)(a1 + 72); ; i += 48)
    {
      v5 = *(i - 40);
      v6 = *((_QWORD *)i - 4);
      v7 = *((_QWORD *)i - 3);
      v9 = *((_QWORD *)i - 2);
      v8 = *((_QWORD *)i - 1);
      v10 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v12 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      v13 = v3[7] + 40 * result;
      *(_QWORD *)v13 = v6;
      *(_QWORD *)(v13 + 8) = v7;
      *(_QWORD *)(v13 + 16) = v9;
      *(_QWORD *)(v13 + 24) = v8;
      *(_BYTE *)(v13 + 32) = v10;
      v14 = v3[2];
      v15 = __OFADD__(v14, 1);
      v16 = v14 + 1;
      if (v15)
        goto LABEL_10;
      v3[2] = v16;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for [AccessibilityFocus.Match : Set<UniqueID>](0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityFocus.Match, Set<UniqueID>>, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x1E0DECD58]);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  LOBYTE(v4) = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v8 = (uint64_t *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((unsigned __int8 *)v8 - 8);
    v13 = *v8;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (void (*)(_QWORD))type metadata accessor for _DictionaryStorage<Int, Int>, (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<VerticalEdge, Double>, (void (*)(void))lazy protocol witness table accessor for type VerticalEdge and conformance VerticalEdge);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_QWORD *)(a1 + 40); ; i += 2)
    {
      v5 = *((_BYTE *)i - 8);
      v6 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      *(_QWORD *)(v3[7] + 8 * result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *i;
  unsigned __int8 v5;
  unint64_t result;
  char v7;
  _OWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>, (void (*)(void))lazy protocol witness table accessor for type Axis and conformance Axis);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_OWORD *)(a1 + 56); ; i = (_OWORD *)((char *)i + 40))
    {
      v5 = *((_BYTE *)i - 24);
      v12 = *i;
      v13 = *(i - 1);
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      v8 = (_OWORD *)(v3[7] + 32 * result);
      *v8 = v13;
      v8[1] = v12;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  Swift::UInt v5;
  Swift::UInt v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  Swift::UInt *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, RawPanGesture.StateType.EventInfo>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 40; ; i += 48)
    {
      v5 = *(_QWORD *)(i - 8);
      v6 = *(_QWORD *)i;
      v7 = *(_QWORD *)(i + 8);
      v16 = *(_OWORD *)(i + 16);
      v8 = *(_QWORD *)(i + 32);
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5, *(_QWORD *)i);
      if ((v10 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v11 = (Swift::UInt *)(v3[6] + 16 * result);
      *v11 = v5;
      v11[1] = v6;
      v12 = v3[7] + 32 * result;
      *(_QWORD *)v12 = v7;
      *(_OWORD *)(v12 + 8) = v16;
      *(_QWORD *)(v12 + 24) = v8;
      v13 = v3[2];
      v14 = __OFADD__(v13, 1);
      v15 = v13 + 1;
      if (v14)
        goto LABEL_10;
      v3[2] = v15;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _BYTE *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Int, (Int, CountingIndex<Int>)>();
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_BYTE *)(a1 + 64); ; i += 40)
    {
      v5 = *((_QWORD *)i - 4);
      v6 = *((_QWORD *)i - 3);
      v7 = *((_QWORD *)i - 2);
      v8 = *((_QWORD *)i - 1);
      v9 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v11 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      v12 = v3[7] + 32 * result;
      *(_QWORD *)v12 = v6;
      *(_QWORD *)(v12 + 8) = v7;
      *(_QWORD *)(v12 + 16) = v8;
      *(_BYTE *)(v12 + 24) = v9;
      v13 = v3[2];
      v14 = __OFADD__(v13, 1);
      v15 = v13 + 1;
      if (v14)
        goto LABEL_10;
      v3[2] = v15;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *i;
  Swift::UInt v5;
  Swift::UInt v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  Swift::UInt *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  __int128 v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, HoverEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_OWORD *)(a1 + 72); ; i = (_OWORD *)((char *)i + 56))
    {
      v5 = *((_QWORD *)i - 5);
      v6 = *((_QWORD *)i - 4);
      v7 = *((_QWORD *)i - 3);
      v8 = *((_BYTE *)i - 16);
      v9 = *((_QWORD *)i - 1);
      v17 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
      if ((v11 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v12 = (Swift::UInt *)(v3[6] + 16 * result);
      *v12 = v5;
      v12[1] = v6;
      v13 = v3[7] + 40 * result;
      *(_QWORD *)v13 = v7;
      *(_BYTE *)(v13 + 8) = v8;
      *(_QWORD *)(v13 + 16) = v9;
      *(_OWORD *)(v13 + 24) = v17;
      v14 = v3[2];
      v15 = __OFADD__(v14, 1);
      v16 = v14 + 1;
      if (v15)
        goto LABEL_10;
      v3[2] = v16;
      swift_retain();
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  Swift::UInt v5;
  Swift::UInt v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t result;
  char v19;
  Swift::UInt *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, PanEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v4 = (uint64_t *)(a1 + 72);
    while (1)
    {
      v5 = *(v4 - 5);
      v6 = *(v4 - 4);
      v7 = *(v4 - 3);
      v8 = *(v4 - 2);
      v9 = *(v4 - 1);
      v10 = *v4;
      v11 = *((_BYTE *)v4 + 8);
      v12 = v4[2];
      v13 = v4[3];
      v14 = v4[4];
      v15 = v4[5];
      v16 = v4[6];
      v25 = v4[7];
      v17 = *((_BYTE *)v4 + 64);
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
      if ((v19 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v20 = (Swift::UInt *)(v3[6] + 16 * result);
      *v20 = v5;
      v20[1] = v6;
      v21 = v3[7] + 96 * result;
      *(_QWORD *)v21 = v7;
      *(_QWORD *)(v21 + 8) = v8;
      *(_QWORD *)(v21 + 16) = v9;
      *(_QWORD *)(v21 + 24) = v10;
      *(_BYTE *)(v21 + 32) = v11;
      *(_QWORD *)(v21 + 40) = v12;
      *(_QWORD *)(v21 + 48) = v13;
      *(_QWORD *)(v21 + 56) = v14;
      *(_QWORD *)(v21 + 64) = v15;
      *(_QWORD *)(v21 + 72) = v16;
      *(_QWORD *)(v21 + 80) = v25;
      *(_BYTE *)(v21 + 88) = v17;
      v22 = v3[2];
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
        goto LABEL_10;
      v4 += 14;
      v3[2] = v24;
      swift_retain();
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  Swift::UInt v5;
  Swift::UInt8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<Spacing.Key, Spacing.Value>, (void (*)(void))lazy protocol witness table accessor for type Spacing.Key and conformance Spacing.Key);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 40; ; i += 56)
    {
      v5 = *(_QWORD *)(i - 8);
      v6 = *(_BYTE *)i;
      v7 = *(_QWORD *)(i + 8);
      v8 = *(_QWORD *)(i + 16);
      v9 = *(_QWORD *)(i + 24);
      v10 = *(_QWORD *)(i + 32);
      v11 = *(_BYTE *)(i + 40);
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5, *(_BYTE *)i);
      if ((v13 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v14 = v3[6] + 16 * result;
      *(_QWORD *)v14 = v5;
      *(_BYTE *)(v14 + 8) = v6;
      v15 = v3[7] + 40 * result;
      *(_QWORD *)v15 = v7;
      *(_QWORD *)(v15 + 8) = v8;
      *(_QWORD *)(v15 + 16) = v9;
      *(_QWORD *)(v15 + 24) = v10;
      *(_BYTE *)(v15 + 32) = v11;
      v16 = v3[2];
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
        goto LABEL_10;
      v3[2] = v18;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<UInt32, ScrollViewCommitInfo>();
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v4 = (uint64_t *)(a1 + 56);
    while (1)
    {
      v19 = v1;
      v5 = *((_DWORD *)v4 - 6);
      v6 = *(v4 - 2);
      v7 = *(v4 - 1);
      v8 = *v4;
      v9 = v4[1];
      v11 = v4[2];
      v10 = v4[3];
      v21 = v4[5];
      v22 = v4[4];
      v12 = v4[7];
      v20 = v4[6];
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v14 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_DWORD *)(v3[6] + 4 * result) = v5;
      v15 = (uint64_t *)(v3[7] + 80 * result);
      *v15 = v6;
      v15[1] = v7;
      v15[2] = v8;
      v15[3] = v9;
      v15[4] = v11;
      v15[5] = v10;
      v15[6] = v22;
      v15[7] = v21;
      v15[8] = v20;
      v15[9] = v12;
      v16 = v3[2];
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
        goto LABEL_10;
      v4 += 11;
      v3[2] = v18;
      outlined copy of ScrollViewCommitInfo(v6, v7, v8, v9, v11, v10, v22, v21, v20);
      v1 = v19 - 1;
      if (v19 == 1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  _BYTE v32[187];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for _DictionaryStorage<Int, Image.Resolved>();
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)&v32[128] = *(_OWORD *)(a1 + 160);
  *(_OWORD *)&v32[144] = v4;
  *(_OWORD *)&v32[160] = *(_OWORD *)(a1 + 192);
  *(_OWORD *)&v32[171] = *(_OWORD *)(a1 + 203);
  v5 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)&v32[64] = *(_OWORD *)(a1 + 96);
  *(_OWORD *)&v32[80] = v5;
  v6 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)&v32[96] = *(_OWORD *)(a1 + 128);
  *(_OWORD *)&v32[112] = v6;
  v7 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)v32 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v32[16] = v7;
  v8 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v32[32] = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v32[48] = v8;
  v9 = *(_QWORD *)v32;
  result = specialized __RawDictionaryStorage.find<A>(_:)(*(uint64_t *)v32);
  if ((v11 & 1) != 0)
  {
LABEL_7:
    __break(1u);
    return MEMORY[0x1E0DEE9E0];
  }
  v12 = (_OWORD *)(a1 + 224);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v9;
    v13 = v3[7] + 184 * result;
    v14 = *(_OWORD *)&v32[8];
    v15 = *(_OWORD *)&v32[24];
    v16 = *(_OWORD *)&v32[56];
    *(_OWORD *)(v13 + 32) = *(_OWORD *)&v32[40];
    *(_OWORD *)(v13 + 48) = v16;
    *(_OWORD *)v13 = v14;
    *(_OWORD *)(v13 + 16) = v15;
    v17 = *(_OWORD *)&v32[72];
    v18 = *(_OWORD *)&v32[88];
    v19 = *(_OWORD *)&v32[120];
    *(_OWORD *)(v13 + 96) = *(_OWORD *)&v32[104];
    *(_OWORD *)(v13 + 112) = v19;
    *(_OWORD *)(v13 + 64) = v17;
    *(_OWORD *)(v13 + 80) = v18;
    v20 = *(_OWORD *)&v32[136];
    v21 = *(_OWORD *)&v32[152];
    v22 = *(_OWORD *)&v32[168];
    *(_DWORD *)(v13 + 175) = *(_DWORD *)&v32[183];
    *(_OWORD *)(v13 + 144) = v21;
    *(_OWORD *)(v13 + 160) = v22;
    *(_OWORD *)(v13 + 128) = v20;
    v23 = v3[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      break;
    v3[2] = v25;
    outlined retain of (Int, Image.Resolved)((uint64_t)v32);
    if (!--v1)
      return (unint64_t)v3;
    v26 = v12[9];
    *(_OWORD *)&v32[128] = v12[8];
    *(_OWORD *)&v32[144] = v26;
    *(_OWORD *)&v32[160] = v12[10];
    *(_OWORD *)&v32[171] = *(_OWORD *)((char *)v12 + 171);
    v27 = v12[5];
    *(_OWORD *)&v32[64] = v12[4];
    *(_OWORD *)&v32[80] = v27;
    v28 = v12[7];
    *(_OWORD *)&v32[96] = v12[6];
    *(_OWORD *)&v32[112] = v28;
    v29 = v12[1];
    *(_OWORD *)v32 = *v12;
    *(_OWORD *)&v32[16] = v29;
    v30 = v12[3];
    *(_OWORD *)&v32[32] = v12[2];
    *(_OWORD *)&v32[48] = v30;
    v9 = *(_QWORD *)v32;
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(uint64_t *)v32);
    v12 += 12;
    if ((v31 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_186F79C20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UTType();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FileWrapperPlatformDocument.read(from:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UTType() - 8) + 80);
  return closure #1 in FileWrapperPlatformDocument.read(from:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_186F79CEC()
{
  return swift_deallocObject();
}

void type metadata accessor for _DictionaryStorage<String, Any>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<String, Any>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, Any>);
  }
}

uint64_t outlined init with copy of (String, Any)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (String, Any)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

double static MapKitDynamicPropertyCache.fields(of:)@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  char v4;
  int v5;

  static DynamicPropertyCache.fields(of:)();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 20) = v5;
  return result;
}

uint64_t Transformer.updateBody(of:changed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a3 + 24) + 24))(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t MapKitBodyAccessor.makeBody(container:inputs:fields:)(_DWORD *a1, _QWORD *a2, _DWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _BYTE v36[4];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;

  v40 = a1;
  v41 = a2;
  v10 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for Transformer(0, v14, v15, v13);
  v39 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = &v36[-v18];
  LODWORD(a3) = *a3;
  v20 = *a5;
  v21 = a5[1];
  v37 = *((unsigned __int8 *)a5 + 16);
  LODWORD(a5) = *((_DWORD *)a5 + 5);
  v22 = *((_DWORD *)a4 + 2);
  v23 = a4[2];
  v24 = a4[5];
  v51 = *a4;
  v52 = v22;
  v53 = v23;
  v54 = *(_OWORD *)(a4 + 3);
  v55 = v24;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, v38, a6);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v19, v12, a6);
  v46 = (int)a3;
  v42 = v20;
  v43 = v21;
  v44 = v37;
  v45 = (int)a5;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for Transformer<A>, v16);
  BodyAccessor.makeBody(container:inputs:fields:)();
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v39 + 8))(v19, v16);
  v26 = v50;
  v27 = v47;
  v28 = v48;
  v29 = v49;
  v30 = v52;
  v31 = v53;
  v32 = v55;
  *a4 = v51;
  *((_DWORD *)a4 + 2) = v30;
  a4[2] = v31;
  *(_OWORD *)(a4 + 3) = v54;
  a4[5] = v32;
  *v40 = v26;
  if (v29)
    v33 = 0;
  else
    v33 = v27;
  if (v29)
    v34 = 0;
  else
    v34 = v28;
  v35 = v41;
  *v41 = v33;
  v35[1] = v34;
  *((_BYTE *)v35 + 16) = v29;
  return result;
}

uint64_t type metadata accessor for Transformer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Transformer);
}

uint64_t MapKitBodyAccessor.setBody(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Transformer(0, v8, v9, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, v3, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v15, v7, a3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for Transformer<A>, v10);
  BodyAccessor.setBody(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, v10);
}

uint64_t MapKitDynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)()
{
  return _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
}

ValueMetadata *type metadata accessor for MapKitDynamicPropertyCache()
{
  return &type metadata for MapKitDynamicPropertyCache;
}

uint64_t destroy for MapKitDynamicPropertyCache.Fields()
{
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t initializeBufferWithCopyOfBuffer for MapKitDynamicPropertyCache.Fields(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  outlined copy of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  return a1;
}

uint64_t assignWithCopy for MapKitDynamicPropertyCache.Fields(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  outlined copy of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  return a1;
}

uint64_t assignWithTake for MapKitDynamicPropertyCache.Fields(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapKitDynamicPropertyCache.Fields(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MapKitDynamicPropertyCache.Fields(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MapKitDynamicPropertyCache.Fields()
{
  return &type metadata for MapKitDynamicPropertyCache.Fields;
}

uint64_t dispatch thunk of MapKitBodyAccessor.updateBody(of:changed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

ValueMetadata *type metadata accessor for MapKitDynamicPropertyBuffer()
{
  return &type metadata for MapKitDynamicPropertyBuffer;
}

uint64_t getEnumTagSinglePayload for Transformer(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_186F7A3F0 + 4 * byte_187BFA4B0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for Transformer(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t UIHostingController.safeAreaRegions.getter()
{
  specialized UIHostingController.host.getter();
  return _UIHostingView.safeAreaRegions.getter();
}

void (*UIHostingController.safeAreaRegions.modify(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;

  a1[1] = v1;
  specialized UIHostingController.host.getter();
  *a1 = _UIHostingView.safeAreaRegions.getter();
  return UIHostingController.safeAreaRegions.modify;
}

void UIHostingController.safeAreaRegions.modify(uint64_t *a1)
{
  UIHostingController.safeAreaRegions.setter(*a1);
}

uint64_t sub_186F7A670@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = UIHostingController.safeAreaRegions.getter();
  *a1 = result;
  return result;
}

void sub_186F7A698(uint64_t *a1)
{
  UIHostingController.safeAreaRegions.setter(*a1);
}

uint64_t sub_186F7A6BC()
{
  return 16;
}

__n128 sub_186F7A6C8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t View.navigationSplitViewColumnWidth(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t View.navigationSplitColumnWidth(min:ideal:max:)()
{
  return View.navigationSplitViewColumnWidth(min:ideal:max:)();
}

uint64_t View.navigationSplitViewColumnWidth(min:ideal:max:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t sub_186F7A808(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingModifier<NavigationSplitViewColumnWidth.TraitKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<NavigationSplitViewColumnWidth.TraitKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _TraitWritingModifier<NavigationSplitViewColumnWidth.TraitKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<NavigationSplitViewColumnWidth.TraitKey>)
  {
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<NavigationSplitViewColumnWidth.TraitKey>);
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<NavigationSplitViewColumnWidth.TraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<NavigationSplitViewColumnWidth.TraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<NavigationSplitViewColumnWidth.TraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<NavigationSplitViewColumnWidth.TraitKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<NavigationSplitViewColumnWidth.TraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NavigationSplitViewColumnWidth(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationSplitViewColumnWidth(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 2 * -a2;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_BYTE *)(result + 32) = 0;
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for NavigationSplitViewColumnWidth(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32) >> 7;
}

uint64_t destructiveProjectEnumData for NavigationSplitViewColumnWidth(uint64_t result)
{
  *(_BYTE *)(result + 32) &= ~0x80u;
  return result;
}

uint64_t destructiveInjectEnumTag for NavigationSplitViewColumnWidth(uint64_t result, char a2)
{
  char v2;

  v2 = *(_BYTE *)(result + 32) & 1 | (a2 << 7);
  *(_QWORD *)(result + 8) &= 1uLL;
  *(_BYTE *)(result + 32) = v2;
  return result;
}

ValueMetadata *type metadata accessor for NavigationSplitViewColumnWidth()
{
  return &type metadata for NavigationSplitViewColumnWidth;
}

ValueMetadata *type metadata accessor for NavigationSplitViewColumnWidth.TraitKey()
{
  return &type metadata for NavigationSplitViewColumnWidth.TraitKey;
}

double protocol witness for static _ViewTraitKey.defaultValue.getter in conformance NavigationSplitViewColumnWidth.TraitKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_187BFA590;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NavigationSplitViewColumnWidth(__int128 *a1, __int128 *a2)
{
  __int128 v4[2];
  __int128 v5[2];

  outlined init with take of NavigationSplitViewColumnWidth(a1, (uint64_t)v4);
  outlined init with take of NavigationSplitViewColumnWidth(a2, (uint64_t)v5);
  return specialized static NavigationSplitViewColumnWidth.== infix(_:_:)(v4, v5);
}

uint64_t outlined init with take of NavigationSplitViewColumnWidth(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

BOOL specialized static NavigationSplitViewColumnWidth.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  char v3;
  double v4;
  double v6;
  char v7;
  double v8;
  double v9;
  int v10;
  double v12;
  unsigned __int8 v13;
  double v14;
  double v15;
  char v16;
  double v17;
  char v18;
  double v19;
  double v20;
  char v21;

  outlined init with take of NavigationSplitViewColumnWidth(a1, (uint64_t)&v17);
  v3 = v21;
  if ((v21 & 0x80) == 0)
  {
    v4 = v17;
    outlined init with take of NavigationSplitViewColumnWidth(a2, (uint64_t)&v12);
    if ((v16 & 0x80000000) == 0)
      return v4 == v12;
    return 0;
  }
  v21 &= ~0x80u;
  v6 = v17;
  v7 = v18;
  v9 = v19;
  v8 = v20;
  outlined init with take of NavigationSplitViewColumnWidth(a2, (uint64_t)&v12);
  if ((v16 & 0x80) == 0)
    return 0;
  v10 = v13;
  if ((v7 & 1) != 0)
  {
    if (v9 != v14)
      v10 = 0;
    if (v10 != 1)
      return 0;
  }
  else
  {
    if ((v13 & 1) != 0)
      return 0;
    if (v6 != v12 || v9 != v14)
      return 0;
  }
  if ((v3 & 1) != 0)
  {
    if ((v16 & 1) == 0)
      return 0;
  }
  else if ((v16 & 1) != 0 || v8 != v15)
  {
    return 0;
  }
  return 1;
}

uint64_t IncrementalLayoutCacheItem.beginPrefetching(at:)(uint64_t result)
{
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;
  __int128 v10;
  __int128 v11;

  if (*(_BYTE *)(v1 + 208) == 1)
  {
    v2 = (__int128 *)(v1 + 264);
    v3 = *(_QWORD *)result;
    v4 = *(unsigned __int8 *)(result + 8);
    v5 = *(_QWORD *)(result + 16);
    v6 = *(unsigned __int8 *)(result + 24);
    if ((*(_BYTE *)(v1 + 280) & 1) != 0)
    {
      _Placement.init(proposedSize:at:)();
      v8 = v10;
      v7 = v11;
    }
    else
    {
      v7 = *v2;
      v8 = *(_OWORD *)(v1 + 248);
    }
    *(_QWORD *)(v1 + 216) = v3;
    *(_QWORD *)(v1 + 224) = v4;
    *(_QWORD *)(v1 + 232) = v5;
    *(_QWORD *)(v1 + 240) = v6;
    *(_OWORD *)(v1 + 248) = v8;
    *v2 = v7;
    *(_BYTE *)(v1 + 280) = 0;
    swift_beginAccess();
    result = swift_unownedRetainStrong();
    if (result)
    {
      v9 = *(_DWORD *)(result + 212);
      result = swift_release();
      *(_DWORD *)(v1 + 196) = v9;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

Swift::Void __swiftcall IncrementalLayoutCacheItem.animationWasAdded()()
{
  uint64_t v0;

  ++*(_DWORD *)(v0 + 180);
}

Swift::Void __swiftcall IncrementalLayoutCacheItem.animationWasRemoved()()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_DWORD *)(v0 + 180) - 1;
  *(_DWORD *)(v0 + 180) = v1;
  if (!v1)
  {
    swift_beginAccess();
    v2 = *(_QWORD *)(v0 + 16);
    swift_unownedRetainStrong();
    if (v2)
    {
      if (swift_weakLoadStrong())
      {
        v3 = swift_allocObject();
        *(_QWORD *)(v3 + 16) = v2;
        *(_QWORD *)(v3 + 24) = v0;
        swift_retain();
        swift_retain();
        GraphHost.continueTransaction(_:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
  }
}

void IncrementalLayoutCacheItem.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t IncrementalLayoutCacheItem.__ivar_destroyer()
{
  uint64_t v0;

  swift_unownedRelease();

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t IncrementalLayoutCacheItem.deinit()
{
  uint64_t v0;

  swift_unownedRelease();

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t IncrementalLayoutCacheItem.__deallocating_deinit()
{
  IncrementalLayoutCacheItem.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IncrementalLayoutCacheSection(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 5);
  v3 = *(unsigned __int8 *)(a1 + 6);
  if ((*(_BYTE *)(a1 + 4) & 1) != 0)
  {
    result = 0;
    if (!*(_BYTE *)(a2 + 4))
      return result;
    goto LABEL_7;
  }
  if ((*(_BYTE *)(a2 + 4) & 1) != 0)
    return 0;
  result = 0;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
LABEL_7:
    if (((v2 ^ *(unsigned __int8 *)(a2 + 5)) & 1) == 0)
      return v3 ^ *(unsigned __int8 *)(a2 + 6) ^ 1u;
  }
  return result;
}

uint64_t implicit closure #2 in IncrementalLayoutViewCache.init<A>(layout:list:inputs:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type ScrollTargetRole.SetLayout and conformance ScrollTargetRole.SetLayout();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t IncrementalLayoutViewCache.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 160);
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v12 >= v6)
      goto LABEL_21;
    v13 = *(_QWORD *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      v8 = v12 + 1;
      if (v12 + 1 >= v6)
        goto LABEL_21;
      v13 = *(_QWORD *)(v2 + 8 * v8);
      if (!v13)
      {
        v8 = v12 + 2;
        if (v12 + 2 >= v6)
          goto LABEL_21;
        v13 = *(_QWORD *)(v2 + 8 * v8);
        if (!v13)
          break;
      }
    }
LABEL_20:
    v5 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_5:
    v11 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v10);
    swift_beginAccess();
    swift_retain();
    swift_unownedRelease();
    *(_QWORD *)(v11 + 16) = 0;
    swift_endAccess();
    result = swift_release();
  }
  v14 = v12 + 3;
  if (v14 >= v6)
  {
LABEL_21:
    swift_release();
    swift_weakDestroy();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v0;
  }
  v13 = *(_QWORD *)(v2 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v6)
      goto LABEL_21;
    v13 = *(_QWORD *)(v2 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t IncrementalLayoutViewCache.__deallocating_deinit()
{
  IncrementalLayoutViewCache.deinit();
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall IncrementalLayoutViewCache.invalidate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int v14;
  void *v16;
  id v17;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 160);
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_22;
    }
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v6)
      goto LABEL_27;
    v11 = *(_QWORD *)(v2 + 8 * v10);
    ++v7;
    if (!v11)
    {
      v7 = v10 + 1;
      if (v10 + 1 >= v6)
        goto LABEL_27;
      v11 = *(_QWORD *)(v2 + 8 * v7);
      if (!v11)
      {
        v7 = v10 + 2;
        if (v10 + 2 >= v6)
          goto LABEL_27;
        v11 = *(_QWORD *)(v2 + 8 * v7);
        if (!v11)
          break;
      }
    }
LABEL_21:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_22:
    v13 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v9);
    v14 = *(unsigned __int8 *)(v13 + 370);
    if (v14 != 2 && (v14 & 1) == 0)
    {
      swift_retain();
    }
    else
    {
      v16 = *(void **)(v13 + 24);
      swift_retain();
      v17 = v16;
      AGSubgraphRef.willInvalidate(isInserted:)(0);

      AGSubgraphInvalidate();
    }
    swift_beginAccess();
    swift_unownedRelease();
    *(_QWORD *)(v13 + 16) = 0;
    swift_endAccess();
    swift_release();
  }
  v12 = v10 + 3;
  if (v12 >= v6)
  {
LABEL_27:
    swift_release();
    return;
  }
  v11 = *(_QWORD *)(v2 + 8 * v12);
  if (v11)
  {
    v7 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v6)
      goto LABEL_27;
    v11 = *(_QWORD *)(v2 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_21;
  }
LABEL_29:
  __break(1u);
}

uint64_t IncrementalLayoutViewCache.item(for:)()
{
  uint64_t v0;
  uint64_t result;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;

  result = swift_beginAccess();
  v2 = 0;
  v3 = *(_QWORD *)(v0 + 160);
  v4 = v3 + 64;
  v5 = 1 << *(_BYTE *)(v3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v2 << 6);
      goto LABEL_5;
    }
    v12 = v2 + 1;
    if (__OFADD__(v2, 1))
      break;
    if (v12 >= v8)
      return 0;
    v13 = *(_QWORD *)(v4 + 8 * v12);
    ++v2;
    if (!v13)
    {
      v2 = v12 + 1;
      if (v12 + 1 >= v8)
        return 0;
      v13 = *(_QWORD *)(v4 + 8 * v2);
      if (!v13)
      {
        v2 = v12 + 2;
        if (v12 + 2 >= v8)
          return 0;
        v13 = *(_QWORD *)(v4 + 8 * v2);
        if (!v13)
        {
          v14 = v12 + 3;
          if (v14 >= v8)
            return 0;
          v13 = *(_QWORD *)(v4 + 8 * v14);
          if (!v13)
          {
            while (1)
            {
              v2 = v14 + 1;
              if (__OFADD__(v14, 1))
                goto LABEL_25;
              if (v2 >= v8)
                return 0;
              v13 = *(_QWORD *)(v4 + 8 * v2);
              ++v14;
              if (v13)
                goto LABEL_20;
            }
          }
          v2 = v14;
        }
      }
    }
LABEL_20:
    v7 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v2 << 6);
LABEL_5:
    v11 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v10);
    result = AGSubgraphIsAncestor();
    if ((_DWORD)result)
    {
      swift_retain();
      return v11;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

double specialized implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 56) = 16;
  return result;
}

double implicit closure #4 in IncrementalLayoutViewCache.item(data:)@<D0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)a2 = v3;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_BYTE *)(a2 + 56) = 16;
  return result;
}

__n128 implicit closure #10 in IncrementalLayoutViewCache.item(data:)@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __n128 result;
  _QWORD v11[5];
  __n128 v12;

  v6 = a1[18];
  v12.n128_u64[0] = a1[17];
  v12.n128_u64[1] = v6;
  swift_retain();
  _ViewList_ID.canonicalID.getter();
  v7 = v11[0];
  v8 = v11[1];
  v9 = a1[19];
  swift_release();
  outlined init with copy of _IncrementalLayout_Child.Data(a2, (uint64_t)v11);
  swift_bridgeObjectRetain();
  _ViewList_ID.canonicalID.getter();
  outlined destroy of _IncrementalLayout_Child.Data((uint64_t)v11);
  swift_bridgeObjectRelease();
  result = v12;
  a3->n128_u64[0] = v7;
  a3->n128_u64[1] = v8;
  a3[1].n128_u64[0] = v9;
  a3[1].n128_u64[1] = 0;
  a3[2] = result;
  a3[3].n128_u64[0] = 0;
  a3[3].n128_u8[8] = 113;
  return result;
}

uint64_t IncrementalLayoutViewCache.prefetchOutputs()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  unsigned __int8 v25;

  v1 = v0;
  v25 = 0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 160);
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0;
  if (!v6)
    goto LABEL_7;
LABEL_4:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v10 | (v9 << 6); ; i = __clz(__rbit64(v14)) + (v9 << 6))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * i);
    if (*(_DWORD *)(v12 + 196) != *(_DWORD *)(v1 + 212))
    {
      if (v6)
        goto LABEL_4;
      goto LABEL_7;
    }
    ++v8;
    swift_retain();
    v16 = _ViewOutputs.layoutComputer.getter();
    if ((v16 & 0x100000000) == 0)
    {
      v17 = specialized prefetchOutput #1 (_:label:) in IncrementalLayoutViewCache.prefetchOutputs()(v16, 0x6F4374756F79616CLL, 0xEE0072657475706DLL, v12, (char *)&v25);
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0)
        break;
    }
    v18 = _ViewOutputs.subscript.getter();
    if ((v18 & 0x100000000) == 0)
    {
      v19 = specialized prefetchOutput #1 (_:label:) in IncrementalLayoutViewCache.prefetchOutputs()(v18, 0x4C79616C70736964, 0xEB00000000747369, v12, (char *)&v25);
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
        break;
    }
    swift_release();
    if (v6)
      goto LABEL_4;
LABEL_7:
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v13 >= v7)
      goto LABEL_28;
    v14 = *(_QWORD *)(v3 + 8 * v13);
    ++v9;
    if (!v14)
    {
      v9 = v13 + 1;
      if (v13 + 1 >= v7)
        goto LABEL_28;
      v14 = *(_QWORD *)(v3 + 8 * v9);
      if (!v14)
      {
        v9 = v13 + 2;
        if (v13 + 2 >= v7)
          goto LABEL_28;
        v14 = *(_QWORD *)(v3 + 8 * v9);
        if (!v14)
        {
          v15 = v13 + 3;
          if (v15 >= v7)
            goto LABEL_28;
          v14 = *(_QWORD *)(v3 + 8 * v15);
          if (!v14)
          {
            while (1)
            {
              v9 = v15 + 1;
              if (__OFADD__(v15, 1))
                break;
              if (v9 >= v7)
                goto LABEL_28;
              v14 = *(_QWORD *)(v3 + 8 * v9);
              ++v15;
              if (v14)
                goto LABEL_20;
            }
LABEL_35:
            __break(1u);
LABEL_36:
            swift_once();
            goto LABEL_30;
          }
          v9 = v15;
        }
      }
    }
LABEL_20:
    v6 = (v14 - 1) & v14;
  }
  swift_release();
LABEL_28:
  swift_release();
  lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
    goto LABEL_33;
  if (one-time initialization token for log != -1)
    goto LABEL_36;
LABEL_30:
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Log.LazyLayoutPrefetch.log);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v23 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_186E48000, v21, v22, "Finish prefetchOutputs for %ld items", v23, 0xCu);
    MEMORY[0x18D760108](v23, -1, -1);
  }

LABEL_33:
  swift_beginAccess();
  return v25;
}

uint64_t specialized prefetchOutput #1 (_:label:) in IncrementalLayoutViewCache.prefetchOutputs()(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char ValueState;
  char v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  int v41;
  char v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  if ((AGGraphHasDeadlinePassed() & 1) != 0)
  {
    lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
    if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
    {
      if (one-time initialization token for log != -1)
        swift_once();
      v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Log.LazyLayoutPrefetch.log);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = swift_slowAlloc();
        v13 = swift_slowAlloc();
        *(_DWORD *)v12 = 136446466;
        v57[0] = v13;
        v14 = *(_QWORD *)(a4 + 144);
        v60 = *(_QWORD *)(a4 + 136);
        v61 = v14;
        _ViewList_ID.canonicalID.getter();
        v15 = _ViewList_ID.Canonical.description.getter();
        v17 = v16;
        swift_release();
        v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v12 + 12) = 2082;
        swift_bridgeObjectRetain();
        v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_186E48000, v10, v11, "%{public}s Skip prefetch %{public}s, past deadline", (uint8_t *)v12, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x18D760108](v13, -1, -1);
        MEMORY[0x18D760108](v12, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_release_n();
      }

    }
    swift_beginAccess();
    v40 = 0;
    *a5 = 1;
  }
  else
  {
    ValueState = AGGraphGetValueState();
    lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
    v19 = static UserDefaultKeyedFeature.isEnabled.getter();
    if ((ValueState & 1) != 0)
    {
      v30 = &unk_1EDE15000;
      if ((v19 & 1) != 0)
      {
        if (one-time initialization token for log != -1)
          swift_once();
        v31 = type metadata accessor for Logger();
        __swift_project_value_buffer(v31, (uint64_t)static Log.LazyLayoutPrefetch.log);
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        v32 = Logger.logObject.getter();
        v33 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v32, v33))
        {
          v55 = a2;
          v34 = swift_slowAlloc();
          v53 = swift_slowAlloc();
          v57[0] = v53;
          *(_DWORD *)v34 = 136446466;
          v35 = *(_QWORD *)(a4 + 144);
          v60 = *(_QWORD *)(a4 + 136);
          v61 = v35;
          _ViewList_ID.canonicalID.getter();
          v36 = _ViewList_ID.Canonical.description.getter();
          v38 = v37;
          swift_release();
          v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, v57);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v34 + 12) = 2082;
          swift_bridgeObjectRetain();
          v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, a3, v57);
          v30 = (_QWORD *)&unk_1EDE15000;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_186E48000, v32, v33, "%{public}s: start prefetch %{public}s", (uint8_t *)v34, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x18D760108](v53, -1, -1);
          v39 = v34;
          a2 = v55;
          MEMORY[0x18D760108](v39, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
          swift_release_n();
        }

      }
      AGGraphPrefetchValue();
      v41 = AGGraphGetValueState() & 1;
      v40 = v41 == 0;
      if (v41)
        v42 = 1;
      else
        v42 = 2;
      swift_beginAccess();
      *a5 = v42;
      if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
      {
        if (v30[273] != -1)
          swift_once();
        v43 = type metadata accessor for Logger();
        __swift_project_value_buffer(v43, (uint64_t)static Log.LazyLayoutPrefetch.log);
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        v44 = Logger.logObject.getter();
        v45 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v44, v45))
        {
          v46 = swift_slowAlloc();
          v56 = a2;
          v47 = swift_slowAlloc();
          *(_DWORD *)v46 = 136446722;
          v48 = *(_QWORD *)(a4 + 144);
          v57[0] = *(_QWORD *)(a4 + 136);
          v57[1] = v48;
          v58 = v47;
          _ViewList_ID.canonicalID.getter();
          v49 = _ViewList_ID.Canonical.description.getter();
          v54 = v41;
          v51 = v50;
          swift_release();
          v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, &v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v46 + 12) = 2082;
          swift_bridgeObjectRetain();
          v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, a3, &v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v46 + 22) = 1024;
          LODWORD(v60) = v54 ^ 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_186E48000, v44, v45, "%{public}s: end prefetch %{public}s, done = %{BOOL}d", (uint8_t *)v46, 0x1Cu);
          swift_arrayDestroy();
          MEMORY[0x18D760108](v47, -1, -1);
          MEMORY[0x18D760108](v46, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
          swift_release_n();
        }

      }
    }
    else
    {
      if ((v19 & 1) != 0)
      {
        if (one-time initialization token for log != -1)
          swift_once();
        v20 = type metadata accessor for Logger();
        __swift_project_value_buffer(v20, (uint64_t)static Log.LazyLayoutPrefetch.log);
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        v21 = Logger.logObject.getter();
        v22 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v21, v22))
        {
          v23 = swift_slowAlloc();
          v24 = swift_slowAlloc();
          v57[0] = v24;
          *(_DWORD *)v23 = 136446466;
          v25 = *(_QWORD *)(a4 + 144);
          v60 = *(_QWORD *)(a4 + 136);
          v61 = v25;
          _ViewList_ID.canonicalID.getter();
          v26 = _ViewList_ID.Canonical.description.getter();
          v27 = a2;
          v29 = v28;
          swift_release();
          v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v29, v57);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v23 + 12) = 2082;
          swift_bridgeObjectRetain();
          v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, a3, v57);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_186E48000, v21, v22, "%{public}s Skip prefetch %{public}s, already done", (uint8_t *)v23, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x18D760108](v24, -1, -1);
          MEMORY[0x18D760108](v23, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
          swift_release_n();
        }

      }
      return 1;
    }
  }
  return v40;
}

void IncrementalLayoutViewCache.commitPlacedChildren(from:to:wasCancelled:context:)(char *a1, char **a2, char a3, unsigned int a4)
{
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Value;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  int64_t v46;
  unint64_t v47;
  unint64_t v48;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  char v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t *__return_ptr, uint64_t, char *, _QWORD, uint64_t, _QWORD);
  uint64_t v71;
  uint64_t v72;
  _BOOL4 v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  __int128 *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v90;
  int v91;
  uint64_t v95;
  unint64_t v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  void (*v100)(uint64_t *__return_ptr, unint64_t, char *, char *, uint64_t, _QWORD);
  __int128 v101;
  char v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  _DWORD *v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  int64_t v118;
  uint64_t v119;
  __int128 v120;
  char v121;
  uint64_t v122;
  char v123;
  _QWORD v124[3];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  _BYTE v130[48];
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;

  v5 = (uint64_t)v4;
  v111 = *v4;
  ++*((_DWORD *)v4 + 52);
  v6 = *a2;
  v7 = *((_QWORD *)*a2 + 2);
  if (v7)
  {
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v8 = 0;
    v91 = 0;
    do
    {
      while (1)
      {
        v9 = *((_QWORD *)v6 + 2);
        if (v8 >= v9)
        {
          __break(1u);
          goto LABEL_88;
        }
        v10 = &v6[72 * v8];
        v11 = *((_QWORD *)v10 + 4);
        if (*(_DWORD *)(v11 + 192) == *(_DWORD *)(v5 + 208))
          break;
        v12 = v6;
        v13 = *((_QWORD *)v10 + 5);
        v14 = v10[48];
        v114 = *((_QWORD *)v10 + 7);
        v15 = v10[64];
        v117 = *(_OWORD *)(v10 + 88);
        v120 = *(_OWORD *)(v10 + 72);
        Value = AGGraphGetValue();
        if (*(_BYTE *)(Value + 4) == 1)
        {
          swift_retain();
        }
        else
        {
          if (*(_BYTE *)(v11 + 208) == 1)
          {
            v106 = v13;
            if ((*(_BYTE *)(v5 + 227) & 1) != 0)
            {
              swift_retain();
            }
            else
            {
              v25 = *(unsigned __int8 *)(Value + 5);
              v100 = *(void (**)(uint64_t *__return_ptr, unint64_t, char *, char *, uint64_t, _QWORD))(*(_QWORD *)v5 + 296);
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v100(&v127, v8, v12, a1, v25, a4);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v26 = v127;
              v27 = v128;
              v5 = v129;
              LODWORD(v96) = v130[0];
              v97 = *(_OWORD *)&v130[24];
              v101 = *(_OWORD *)&v130[8];
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v12 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
              if (v8 >= *((_QWORD *)v12 + 2))
                goto LABEL_96;
              v28 = &v12[72 * v8];
              *((_QWORD *)v28 + 5) = v26;
              v28[48] = v27;
              *((_QWORD *)v28 + 7) = v5;
              v28[64] = v96;
              *(_OWORD *)(v28 + 72) = v101;
              *(_OWORD *)(v28 + 88) = v97;
              *a2 = v12;
              v9 = *((_QWORD *)v12 + 2);
              v5 = v95;
            }
            if (v8 >= v9)
              goto LABEL_95;
            v29 = &v12[72 * v8];
            v104 = *((_QWORD *)v29 + 5);
            v102 = v29[48];
            v98 = *((_QWORD *)v29 + 7);
            LODWORD(v96) = v29[64];
            v30 = *((_QWORD *)v29 + 9);
            v31 = *((_QWORD *)v29 + 10);
            v32 = *((_QWORD *)v29 + 11);
            v33 = *((_QWORD *)v29 + 12);
            swift_retain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              v34 = a1;
            else
              v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)a1 + 2) + 1, 1, a1);
            v36 = *((_QWORD *)v34 + 2);
            v35 = *((_QWORD *)v34 + 3);
            if (v36 >= v35 >> 1)
              v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v34);
            *((_QWORD *)v34 + 2) = v36 + 1;
            a1 = v34;
            v37 = &v34[72 * v36];
            v13 = v106;
            *((_QWORD *)v37 + 4) = v11;
            *((_QWORD *)v37 + 5) = v104;
            v37[48] = v102;
            *((_QWORD *)v37 + 7) = v98;
            v37[64] = v96;
            *((_QWORD *)v37 + 9) = v30;
            *((_QWORD *)v37 + 10) = v31;
            *((_QWORD *)v37 + 11) = v32;
            *((_QWORD *)v37 + 12) = v33;
          }
          else
          {
            swift_retain();
          }
          v91 = 1;
        }
        *(_QWORD *)(v11 + 200) = v8;
        *(_BYTE *)(v11 + 208) = 0;
        *(_DWORD *)(v11 + 184) = *(_DWORD *)(v5 + 168);
        *(_DWORD *)(v11 + 192) = *(_DWORD *)(v5 + 208);
        *(_QWORD *)(v11 + 216) = v13;
        *(_QWORD *)(v11 + 224) = v14;
        *(_QWORD *)(v11 + 232) = v114;
        *(_QWORD *)(v11 + 240) = v15;
        *(_OWORD *)(v11 + 248) = v120;
        *(_OWORD *)(v11 + 264) = v117;
        *(_BYTE *)(v11 + 280) = 0;
        swift_release();
        ++v8;
        v6 = v12;
        if ((uint64_t)v8 >= v7)
          goto LABEL_34;
      }
      if ((*(_BYTE *)(v11 + 371) & 1) != 0)
      {
        swift_retain();
      }
      else
      {
        *(_BYTE *)(v11 + 371) = 1;
        v127 = 0;
        v128 = 0xE000000000000000;
        swift_retain();
        _StringGuts.grow(_:)(80);
        (*(void (**)(void))(v111 + 272))();
        v17._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v17);
        swift_bridgeObjectRelease();
        v18._countAndFlagsBits = 0x444920656874203ALL;
        v18._object = (void *)0xE900000000000020;
        String.append(_:)(v18);
        v19 = *(_QWORD *)(v11 + 144);
        v133 = *(_QWORD *)(v11 + 136);
        v134 = v19;
        _ViewList_ID.canonicalID.getter();
        v133 = v124[0];
        v134 = v124[1];
        v20._countAndFlagsBits = _ViewList_ID.Canonical.description.getter();
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        swift_release();
        v21._countAndFlagsBits = 0xD000000000000043;
        v21._object = (void *)0x8000000187BD3C20;
        String.append(_:)(v21);
        MEMORY[0x18D75AC90](v127, v128);
        swift_bridgeObjectRelease();
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
      v22 = *((_QWORD *)v6 + 2);
      if (v8 >= v22)
        goto LABEL_93;
      v23 = v22 - 1;
      v24 = v22 - 1 - v8;
      if (v24 < 0)
      {
LABEL_110:
        _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      memmove(&v6[72 * v8 + 32], &v6[72 * v8 + 104], 72 * v24);
      *((_QWORD *)v6 + 2) = v23;
      swift_release();
      swift_release();
      *a2 = v6;
      --v7;
    }
    while ((uint64_t)v8 < v7);
  }
  else
  {
    swift_bridgeObjectRetain();
    v91 = 0;
  }
LABEL_34:
  *(_QWORD *)&v120 = v6;
  v135 = MEMORY[0x1E0DEE9D8];
  swift_beginAccess();
  v38 = *(_QWORD *)(v5 + 160);
  v41 = *(_QWORD *)(v38 + 64);
  v40 = v38 + 64;
  v39 = v41;
  v42 = 1 << *(_BYTE *)(*(_QWORD *)(v5 + 160) + 32);
  v43 = -1;
  if (v42 < 64)
    v43 = ~(-1 << v42);
  v44 = v43 & v39;
  v112 = *(_QWORD *)(v5 + 160);
  swift_bridgeObjectRetain();
  v109 = (_DWORD *)(v5 + 168);
  swift_beginAccess();
  v90 = 0;
  v45 = 0;
  v46 = (unint64_t)(v42 + 63) >> 6;
  v115 = v40;
  v118 = v46;
  while (1)
  {
    if (v44)
    {
      v47 = __clz(__rbit64(v44));
      v44 &= v44 - 1;
      v48 = v47 | (v45 << 6);
      goto LABEL_53;
    }
    v49 = v45 + 1;
    if (__OFADD__(v45, 1))
      goto LABEL_92;
    if (v49 >= v46)
      goto LABEL_71;
    v50 = *(_QWORD *)(v40 + 8 * v49);
    ++v45;
    if (!v50)
    {
      v45 = v49 + 1;
      if (v49 + 1 >= v46)
        goto LABEL_71;
      v50 = *(_QWORD *)(v40 + 8 * v45);
      if (!v50)
      {
        v45 = v49 + 2;
        if (v49 + 2 >= v46)
          goto LABEL_71;
        v50 = *(_QWORD *)(v40 + 8 * v45);
        if (!v50)
          break;
      }
    }
LABEL_52:
    v44 = (v50 - 1) & v50;
    v48 = __clz(__rbit64(v50)) + (v45 << 6);
LABEL_53:
    v52 = *(_QWORD *)(*(_QWORD *)(v112 + 56) + 8 * v48);
    if (*(_DWORD *)(v52 + 192) != *(_DWORD *)(v5 + 208)
      && (*(_BYTE *)(v52 + 280) & 1) == 0
      && (*(_BYTE *)(v52 + 208) & 1) == 0)
    {
      v53 = *(_QWORD *)(v52 + 216);
      v54 = *(_QWORD *)(v52 + 232);
      v55 = *(_QWORD *)(v52 + 200);
      v56 = *(_QWORD *)(v52 + 248);
      v57 = *(_QWORD *)(v52 + 256);
      v58 = *(_QWORD *)(v52 + 264);
      v59 = *(_QWORD *)(v52 + 272);
      if (*(_BYTE *)(AGGraphGetValue() + 4) == 2)
      {
        v121 = *(_BYTE *)(v52 + 224) & 1;
        v107 = *(_BYTE *)(v52 + 240) & 1;
        if (*(_BYTE *)(v52 + 369) == 1)
        {
          *(_BYTE *)(v52 + 369) = 0;
          swift_retain();
          v64 = 1;
        }
        else
        {
          v73 = *(_DWORD *)(v52 + 180) == 0;
          swift_retain();
          v64 = v73 | v91;
        }
        v91 = v64;
        v40 = v115;
        goto LABEL_66;
      }
      swift_retain();
      AGGraphClearUpdate();
      v60 = *(_DWORD *)(v5 + 40);
      v61 = *(_QWORD *)(v5 + 48);
      v62 = *(_DWORD *)(v5 + 112);
      v127 = *(_QWORD *)(v5 + 32);
      LODWORD(v128) = v60;
      v129 = v61;
      *(_OWORD *)v130 = *(_OWORD *)(v5 + 56);
      *(_OWORD *)&v130[16] = *(_OWORD *)(v5 + 72);
      *(_OWORD *)&v130[32] = *(_OWORD *)(v5 + 88);
      v131 = *(_QWORD *)(v5 + 104);
      v132 = v62;
      _ViewInputs.transaction.getter();
      AGGraphGetValue();
      v63 = Transaction.fromScrollView.getter();
      AGGraphSetUpdate();
      if ((v63 & 1) != 0)
      {
        *(_QWORD *)(v52 + 200) = 0;
        *(_BYTE *)(v52 + 208) = 1;
        *(_OWORD *)(v52 + 216) = 0u;
        *(_OWORD *)(v52 + 232) = 0u;
        *(_OWORD *)(v52 + 248) = 0u;
        *(_OWORD *)(v52 + 264) = 0u;
        *(_BYTE *)(v52 + 280) = 1;
        swift_release();
        v40 = v115;
        v46 = v118;
      }
      else
      {
        AGGraphClearUpdate();
        type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
        v65 = AGGraphGetValue();
        outlined init with copy of TableColumnList(v65, (uint64_t)v124);
        AGGraphSetUpdate();
        v67 = v125;
        v66 = v126;
        __swift_project_boxed_opaque_existential_1(v124, v125);
        v68 = *(_QWORD *)(v52 + 144);
        v127 = *(_QWORD *)(v52 + 136);
        v128 = v68;
        v122 = *(_QWORD *)(v5 + 184);
        (*(void (**)(char *__return_ptr, uint64_t *, uint64_t *, uint64_t, uint64_t))(v66 + 56))(&v123, &v127, &v122, v67, v66);
        v69 = v123 & 1;
        v70 = *(void (**)(uint64_t *__return_ptr, uint64_t, char *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v5 + 304);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v70(&v127, v55, a1, v120, v69, a4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v71 = v127;
        v121 = v128;
        v54 = v129;
        v107 = v130[0];
        v56 = *(_QWORD *)&v130[8];
        v57 = *(_QWORD *)&v130[16];
        v58 = *(_QWORD *)&v130[24];
        v59 = *(_QWORD *)&v130[32];
        *(_BYTE *)(v52 + 368) = v69 & ~*(_BYTE *)(v52 + 124);
        *(_BYTE *)(v52 + 369) = 1;
        *(_DWORD *)(v52 + 212) = *(_DWORD *)(v5 + 208);
        v72 = swift_retain();
        MEMORY[0x18D75CF58](v72);
        if (*(_QWORD *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v124);
        v91 = 1;
        v5 = v95;
        v40 = v115;
        v53 = v71;
LABEL_66:
        v74 = *a2;
        *(_QWORD *)(v52 + 200) = *((_QWORD *)*a2 + 2);
        *(_BYTE *)(v52 + 208) = 0;
        *(_DWORD *)(v52 + 184) = *v109;
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v74 + 2) + 1, 1, v74);
        v76 = *((_QWORD *)v74 + 2);
        v75 = *((_QWORD *)v74 + 3);
        if (v76 >= v75 >> 1)
          v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v76 + 1, 1, v74);
        *((_QWORD *)v74 + 2) = v76 + 1;
        v77 = &v74[72 * v76];
        *((_QWORD *)v77 + 4) = v52;
        *((_QWORD *)v77 + 5) = v53;
        v77[48] = v121;
        *((_QWORD *)v77 + 7) = v54;
        v77[64] = v107;
        *((_QWORD *)v77 + 9) = v56;
        *((_QWORD *)v77 + 10) = v57;
        *((_QWORD *)v77 + 11) = v58;
        *((_QWORD *)v77 + 12) = v59;
        swift_release();
        *(_QWORD *)&v120 = v74;
        *a2 = v74;
        v90 = 1;
        v46 = v118;
      }
    }
  }
  v51 = v49 + 3;
  if (v51 >= v46)
    goto LABEL_71;
  v50 = *(_QWORD *)(v40 + 8 * v51);
  if (v50)
  {
    v45 = v51;
    goto LABEL_52;
  }
  while (1)
  {
    v45 = v51 + 1;
    if (__OFADD__(v51, 1))
      goto LABEL_94;
    if (v45 >= v46)
      break;
    v50 = *(_QWORD *)(v40 + 8 * v45);
    ++v51;
    if (v50)
      goto LABEL_52;
  }
LABEL_71:
  swift_release();
  v96 = v135;
  if (v135 >> 62)
    goto LABEL_97;
  v78 = *(_QWORD *)((v135 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v78; v78 = _CocoaArrayWrapper.endIndex.getter())
  {
    v79 = 4;
    while (1)
    {
      if ((v96 & 0xC000000000000001) != 0)
      {
        v80 = MEMORY[0x18D75E3BC](v79 - 4, v96);
      }
      else
      {
        v80 = *(_QWORD *)(v96 + 8 * v79);
        swift_retain();
      }
      v81 = v79 - 3;
      if (__OFADD__(v79 - 4, 1))
        break;
      if ((*(_BYTE *)(v80 + 208) & 1) != 0)
      {
        __break(1u);
LABEL_109:
        __break(1u);
        goto LABEL_110;
      }
      v82 = *(_QWORD *)(v80 + 200);
      if ((v82 & 0x8000000000000000) != 0)
        goto LABEL_89;
      if (v82 >= *(_QWORD *)(v120 + 16))
        goto LABEL_90;
      v83 = (__int128 *)(v80 + 264);
      if ((*(_BYTE *)(v80 + 280) & 1) != 0)
        goto LABEL_109;
      v84 = v120 + 72 * v82;
      v119 = *(unsigned __int8 *)(v84 + 48);
      v105 = *(_QWORD *)(v84 + 56);
      v108 = *(_QWORD *)(v84 + 40);
      v116 = *(unsigned __int8 *)(v84 + 64);
      v110 = *(_OWORD *)(v84 + 88);
      v113 = *(_OWORD *)(v84 + 72);
      v99 = *(_OWORD *)(v80 + 248);
      v103 = *v83;
      v85 = *(_QWORD *)(v80 + 232);
      v5 = *(_QWORD *)(v80 + 240);
      v87 = *(_QWORD *)(v80 + 216);
      v86 = *(_QWORD *)(v80 + 224);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        *(_QWORD *)&v120 = specialized _ArrayBuffer._consumeAndCreateNew()(v120);
      if (v82 >= *(_QWORD *)(v120 + 16))
        goto LABEL_91;
      v88 = v120 + 72 * v82;
      *(_QWORD *)(v88 + 40) = v87;
      *(_BYTE *)(v88 + 48) = v86 & 1;
      *(_QWORD *)(v88 + 56) = v85;
      *(_BYTE *)(v88 + 64) = v5 & 1;
      *(_OWORD *)(v88 + 72) = v99;
      *(_OWORD *)(v88 + 88) = v103;
      *(_QWORD *)(v80 + 216) = v108;
      *(_QWORD *)(v80 + 224) = v119;
      *(_QWORD *)(v80 + 232) = v105;
      *(_QWORD *)(v80 + 240) = v116;
      *(_OWORD *)(v80 + 248) = v113;
      *v83 = v110;
      *(_BYTE *)(v80 + 280) = 0;
      swift_release();
      ++v79;
      v5 = v95;
      if (v81 == v78)
      {
        swift_bridgeObjectRelease();
        *a2 = (char *)v120;
        goto LABEL_99;
      }
    }
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
LABEL_99:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v5 + 226) & 1) != 0 || ((*(unsigned __int8 *)(v5 + 225) | v90) & 1) != 0)
    Array<A>.sortForDisplay()();
  if ((v91 & 1) != 0)
  {
    if (swift_weakLoadStrong())
    {
      swift_retain();
      GraphHost.continueTransaction(_:)();
      swift_release();
      swift_release();
    }
  }
  else if ((a3 & 1) == 0)
  {
    *(_BYTE *)(v5 + 227) = 0;
  }
}

double implicit closure #5 in IncrementalLayoutViewCache.item(data:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  double result;
  uint64_t v8;
  uint64_t v9;

  swift_retain();
  _ViewList_ID.canonicalID.getter();
  v6 = *(_QWORD *)(a1 + 152);
  swift_release();
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v6;
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_BYTE *)(a3 + 56) = a2;
  return result;
}

Swift::Bool __swiftcall IncrementalLayoutViewCache.mayInvalidate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  int v3;
  char v4;

  v1 = v0;
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    AGGraphClearUpdate();
    swift_beginAccess();
    v3 = GraphHost.Data.updateSeed.getter();
    AGGraphSetUpdate();
    swift_release();
    if (*(_DWORD *)(v1 + 220) == v3)
    {
      v4 = *(_BYTE *)(v1 + 224);
      if (!v4)
      {
        LOBYTE(Strong) = 0;
        return Strong;
      }
    }
    else
    {
      *(_DWORD *)(v1 + 220) = v3;
      v4 = 2;
    }
    *(_BYTE *)(v1 + 224) = v4 - 1;
    LOBYTE(Strong) = 1;
  }
  return Strong;
}

void static IncrementalLayoutViewCache.viewType.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void IncrementalLayoutViewCache.copyState<A>(type:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void IncrementalLayoutViewCache.withMutableState<A, B>(type:_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void IncrementalLayoutViewCache.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void IncrementalLayoutViewCache.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void IncrementalLayoutViewCache.logReuse(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _IncrementalLayoutViewCache.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 344);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
}

uint64_t _IncrementalLayoutViewCache.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  IncrementalLayoutViewCache.deinit();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 344);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return v0;
}

uint64_t _IncrementalLayoutViewCache.__deallocating_deinit()
{
  _IncrementalLayoutViewCache.deinit();
  return swift_deallocClassInstance();
}

uint64_t static _IncrementalLayoutViewCache.viewType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 320);
}

uint64_t _IncrementalLayoutViewCache.logReuse(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];

  v5 = *v2;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2258], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = &v17[-v8];
  lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
  {
    if (one-time initialization token for log != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    v11 = __swift_project_value_buffer(v10, (uint64_t)static Log.LazyLayoutReuse.log);
    v12 = *(_QWORD *)(v10 - 8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v9, v11, v10);
    v13 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v10);
  }
  else
  {
    v15 = type metadata accessor for Logger();
    v13 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v9, 1, 1, v15);
  }
  MEMORY[0x1E0C80A78](v13, v14);
  *(_OWORD *)&v17[-32] = *(_OWORD *)(v5 + 320);
  *(_QWORD *)&v17[-16] = a1;
  *(_QWORD *)&v17[-8] = a2;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF2os6LoggerV_s5NeverOytTg5((void (*)(uint64_t *__return_ptr, char *))partial apply for closure #1 in _IncrementalLayoutViewCache.logReuse(_:));
  return outlined destroy of TableRowID?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for Logger?, (uint64_t)MEMORY[0x1E0DF2258], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
}

uint64_t closure #1 in _IncrementalLayoutViewCache.logReuse(_:)(uint64_t a1, void (*a2)(_QWORD *__return_ptr))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  _QWORD v11[7];
  unsigned __int8 v12;

  a2(v11);
  v2 = v11[0];
  v3 = v11[1];
  v4 = v11[2];
  v5 = v11[3];
  v6 = v11[4];
  v7 = v11[5];
  v8 = v11[6];
  v9 = v12;
  ReuseMessage.log<A>(layout:log:)();
  return outlined consume of ReuseMessage(v2, v3, v4, v5, v6, v7, v8, v9);
}

void ReuseMessage.log<A>(layout:log:)()
{
  __asm { BR              X10 }
}

void sub_186F7D5E4()
{
  uint64_t v0;
  Swift::String v1;
  __int128 v2;
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  uint64_t Counter;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  strcpy((char *)v18, "total items ");
  BYTE13(v18[0]) = 0;
  HIWORD(v18[0]) = -5120;
  v19 = v0;
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2 = v18[0];
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E0CFED28])
  {
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  else
  {
    v5 = (id)AGGraphGetAttributeGraph();
    v4 = 0xE000000000000000;
    if (v5)
    {
      v6 = v5;
      AGGraphGetCounter();
      Counter = AGGraphGetCounter();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v18[0] = 0x7475626972747461;
      *((_QWORD *)&v18[0] + 1) = 0xEB000000003D7365;
      v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._countAndFlagsBits = 0x617267627573202CLL;
      v9._object = (void *)0xEC0000003D736870;
      String.append(_:)(v9);
      v19 = Counter;
      v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v10);

      swift_bridgeObjectRelease();
      v3 = 0x7475626972747461;
      v4 = 0xEB000000003D7365;
    }
    else
    {
      v3 = 0;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v17 = v3;
    v13 = swift_slowAlloc();
    v14 = swift_slowAlloc();
    *(_QWORD *)&v18[0] = v14;
    *(_DWORD *)v13 = 136315650;
    v15 = _typeName(_:qualified:)();
    v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, (uint64_t *)v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, *((unint64_t *)&v2 + 1), (uint64_t *)v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 22) = 2080;
    swift_bridgeObjectRetain();
    v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v4, (uint64_t *)v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_186E48000, v11, v12, "%s: %s %s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v14, -1, -1);
    MEMORY[0x18D760108](v13, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

}

void sub_186F7DC4C()
{
  swift_retain();
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  JUMPOUT(0x186F7D8F8);
}

void protocol witness for ObservedAttribute.destroy() in conformance UpdateViewCache()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
    IncrementalLayoutViewCache.invalidate()();
  else
    __break(1u);
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance UpdateViewCache(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    IncrementalLayoutViewCache.invalidate()();
  else
    __break(1u);
}

uint64_t protocol witness for Rule.value.getter in conformance IncrementalCollectedPlacements@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for IncrementalLayoutViewCache();
  v2 = *(_QWORD *)AGGraphGetValue();
  swift_beginAccess();
  swift_retain();
  v3 = swift_bridgeObjectRetain();
  v4 = specialized _NativeDictionary.filter(_:)(v3, v2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 160) = v4;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v2 + 200) = 0;
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  *a1 = *(_QWORD *)AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

double protocol witness for static Rule.initialValue.getter in conformance IncrementalViewGeometry@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance IncrementalViewGeometry()
{
  uint64_t *v0;

  return IncrementalViewGeometry.value.getter(*v0, v0[1], v0[2], v0[3]);
}

void protocol witness for static Rule.initialValue.getter in conformance IncrementalViewPhase(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 1;
}

uint64_t protocol witness for Rule.value.getter in conformance IncrementalViewPhase@<X0>(unsigned int *a1@<X8>)
{
  return IncrementalViewPhase.value.getter(a1);
}

uint64_t static IncrementalPreference.initialValue.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  (*(void (**)(void))(a1 + 16))();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a2, 0, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance IncrementalPreference<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static IncrementalPreference.initialValue.getter(*(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance IncrementalPreference<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v20 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v20 - v13;
  static IncrementalPreference.initialValue.getter(v3, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v14, v9, AssociatedTypeWitness);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20[-2] = a2;
  v20[-1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalPreference<A>, a2, v18);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v14, (uint64_t)partial apply for closure #1 in static Rule._updateDefault(_:), (uint64_t)&v20[-4], AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v19);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, AssociatedTypeWitness);
}

void protocol witness for static StatefulRule.initialValue.getter in conformance IncrementalTransaction(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance IncrementalTransition<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

Swift::Int Array<A>.sortForDisplayLarge()()
{
  char **v0;

  return specialized MutableCollection<>.sort(by:)(v0);
}

void specialized EnumeratedSequence.Iterator.next()(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v2 = v1[1];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return;
  }
  if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    v4 = *v1 + 72 * v2;
    v5 = *(_QWORD *)(v4 + 32);
    v6 = *(_QWORD *)(v4 + 40);
    v7 = *(_BYTE *)(v4 + 48);
    v8 = *(_QWORD *)(v4 + 56);
    v9 = *(_BYTE *)(v4 + 64);
    v10 = *(_OWORD *)(v4 + 72);
    v11 = *(_OWORD *)(v4 + 88);
    v1[1] = v2 + 1;
    v12 = v1[2];
    if (!__OFADD__(v12, 1))
    {
      v1[2] = v12 + 1;
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v6;
      *(_BYTE *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = v8;
      *(_BYTE *)(a1 + 40) = v9;
      *(_OWORD *)(a1 + 48) = v10;
      *(_OWORD *)(a1 + 64) = v11;
      swift_retain();
      return;
    }
  }
  __break(1u);
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *a1 = v2;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v2 < 0 || (v2 & 0x4000000000000000) != 0)
    specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v6[0] = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized Array._endMutation()();
}

Swift::Int specialized MutableCollection<>.sort(by:)(char **a1)
{
  char *v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  char *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  char *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  char *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  char *v2;
  __int128 *v3;
  Swift::Int result;
  __int128 *v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  v3 = (__int128 *)*((_QWORD *)v2 + 2);
  v5[0] = (__int128 *)(v2 + 32);
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t CacheItemDescription.description.getter()
{
  uint64_t v0;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;

  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
    return _ViewList_ID.Canonical.description.getter();
  v5 = _ViewList_ID.Canonical.description.getter();
  v2._countAndFlagsBits = 40;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v5;
}

void protocol witness for static GraphInput.makeReusable(indirectMap:value:) in conformance IncrementalLayoutReuseIdleInput()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for static PropertyKey.defaultValue.getter in conformance IncrementalLayoutReuseIdleInput(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance IncrementalLayoutReuseIdleInput(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *(_BYTE *)(a1 + 8);
  result = *(unsigned __int8 *)(a2 + 8);
  if ((v3 & 1) == 0)
    return (*(_QWORD *)a1 == *(_QWORD *)a2) & ~(_DWORD)result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IncrementalLayoutReuseIdleModifier<A>()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance IncrementalLayoutReuseIdleModifier<A>()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance IncrementalLayoutReuseIdleModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IncrementalLayoutReuseIdleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static IncrementalLayoutReuseIdleModifier._makeInputs(modifier:inputs:)(a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void View.lazyLayoutReuseIdle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for IncrementalLayoutReuseIdleModifier(0, a3, a5, a4);
  JUMPOUT(0x18D75B4ACLL);
}

uint64_t type metadata accessor for IncrementalLayoutReuseIdleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IncrementalLayoutReuseIdleModifier);
}

uint64_t type metadata completion function for IncrementalLayoutCacheItem()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for IncrementalLayoutCacheItem()
{
  return type metadata accessor for IncrementalLayoutCacheItem();
}

uint64_t dispatch thunk of static LazyLayoutReuseIdleValue.timeToLive.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_186F7E584(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for IncrementalLayoutReuseIdleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for IncrementalLayoutReuseIdleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t destroy for IncrementalLayoutViewCache.LeastRecentlyUsedItems()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IncrementalLayoutViewCache.LeastRecentlyUsedItems(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IncrementalLayoutViewCache.LeastRecentlyUsedItems(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for IncrementalLayoutViewCache.LeastRecentlyUsedItems(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IncrementalLayoutViewCache.LeastRecentlyUsedItems(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IncrementalLayoutViewCache.LeastRecentlyUsedItems(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for IncrementalLayoutViewCache.LeastRecentlyUsedItems()
{
  return &type metadata for IncrementalLayoutViewCache.LeastRecentlyUsedItems;
}

uint64_t storeEnumTagSinglePayload for IncrementalLayoutCacheItem.ParentingPhase(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_186F7E7E4 + 4 * byte_187BFA625[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_186F7E818 + 4 * byte_187BFA620[v4]))();
}

uint64_t sub_186F7E818(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F7E820(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186F7E828);
  return result;
}

uint64_t sub_186F7E834(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186F7E83CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_186F7E840(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F7E848(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IncrementalLayoutCacheItem.ParentingPhase()
{
  return &type metadata for IncrementalLayoutCacheItem.ParentingPhase;
}

ValueMetadata *type metadata accessor for IncrementalLayoutCacheSection()
{
  return &type metadata for IncrementalLayoutCacheSection;
}

uint64_t getEnumTagSinglePayload for IncrementalLayoutCacheSection(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 7))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 5);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IncrementalLayoutCacheSection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 6) = 0;
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 7) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 7) = 0;
    if (a2)
      *(_BYTE *)(result + 5) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for IncrementalLayoutCacheItem.State()
{
  return &type metadata for IncrementalLayoutCacheItem.State;
}

_UNKNOWN **base witness table accessor for ViewModifier in IncrementalLayoutReuseIdleModifier<A>()
{
  return &protocol witness table for IncrementalLayoutReuseIdleModifier<A>;
}

unint64_t lazy protocol witness table accessor for type IncrementalLayoutCacheItem.ParentingPhase and conformance IncrementalLayoutCacheItem.ParentingPhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncrementalLayoutCacheItem.ParentingPhase and conformance IncrementalLayoutCacheItem.ParentingPhase;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutCacheItem.ParentingPhase and conformance IncrementalLayoutCacheItem.ParentingPhase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutCacheItem.ParentingPhase, &type metadata for IncrementalLayoutCacheItem.ParentingPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalLayoutCacheItem.ParentingPhase and conformance IncrementalLayoutCacheItem.ParentingPhase);
  }
  return result;
}

unint64_t specialized Collection.count.getter(uint64_t a1, char a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;

  v3 = a2 & 1;
  if ((a2 & 1) != 0 || AGGraphGetWeakValue())
    v4 = swift_bridgeObjectRetain();
  else
    v4 = MEMORY[0x1E0DEE9D8];
  v5 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRelease();
  return specialized RandomAccessCollection<>.distance(from:to:)(0, v5, a1, v3);
}

uint64_t specialized Collection.count.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  __int128 v8[2];
  char v9;

  outlined init with copy of TableColumnCollection.Backing(v0, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v1 = *(_QWORD *)(*(_QWORD *)&v8[0] + 16);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v8, (uint64_t)v5);
    v2 = v6;
    v3 = v7;
    __swift_project_boxed_opaque_existential_1(v5, v6);
    v1 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return specialized RandomAccessCollection<>.distance(from:to:)(0, v1);
}

uint64_t specialized Collection.count.getter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result + 48 * v1;
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  v5 = __OFADD__(v3, v4);
  v6 = v3 + v4;
  if (v5)
    goto LABEL_8;
  v7 = *(_QWORD *)(result + 72);
  if (v6 < v7)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  result = v6 - v7;
  if (__OFSUB__(v6, v7))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t specialized Collection.count.getter(unint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  if (!(a1 >> 62))
    return *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v1 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if ((v1 & 0x8000000000000000) == 0)
    return v1;
  __break(1u);
  return result;
}

unint64_t specialized RandomAccessCollection<>.distance(from:to:)(unint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *WeakValue;
  unint64_t v10;

  v4 = a3;
  v6 = result;
  if ((a4 & 1) != 0)
  {
    if (*(_QWORD *)(a3 + 16) >= result)
    {
LABEL_10:
      swift_bridgeObjectRetain();
      goto LABEL_11;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (AGGraphGetWeakValue())
    v7 = swift_bridgeObjectRetain();
  else
    v7 = MEMORY[0x1E0DEE9D8];
  v8 = *(_QWORD *)(v7 + 16);
  result = swift_bridgeObjectRelease();
  if (v8 < v6)
    goto LABEL_14;
  WeakValue = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    v4 = *WeakValue;
    goto LABEL_10;
  }
  v4 = MEMORY[0x1E0DEE9D8];
LABEL_11:
  v10 = *(_QWORD *)(v4 + 16);
  result = swift_bridgeObjectRelease();
  if (v10 >= a2)
    return a2 - v6;
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  __int128 v16[2];
  char v17;

  v3 = v2;
  outlined init with copy of TableColumnCollection.Backing(v2, (uint64_t)v16);
  if ((v17 & 1) != 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)&v16[0] + 16);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v16, (uint64_t)v13);
    v8 = v14;
    v9 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  if (a1 < 0 || v6 < a1)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of TableColumnCollection.Backing(v3, (uint64_t)v16);
    if ((v17 & 1) != 0)
    {
      v10 = *(_QWORD *)(*(_QWORD *)&v16[0] + 16);
      result = swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with take of OptionalBinaryInteger(v16, (uint64_t)v13);
      v11 = v14;
      v12 = v15;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    }
    if ((a2 & 0x8000000000000000) == 0 && v10 >= a2)
      return a2 - a1;
  }
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a3 + 16);
  if (v3)
  {
    v4 = a3 + 48 * v3;
    v6 = *(_QWORD *)(v4 + 16);
    v5 = *(_QWORD *)(v4 + 24);
    v7 = __OFADD__(v5, v6);
    v8 = v5 + v6;
    if (v7)
    {
LABEL_18:
      __break(1u);
      return result;
    }
    v9 = *(_QWORD *)(a3 + 72);
    if (v8 < result || v9 > result)
      goto LABEL_15;
    if (v8 < a2)
      goto LABEL_16;
  }
  else
  {
    if (result)
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    v9 = 0;
    if (a2 > 0)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
  }
  if (v9 > a2)
    goto LABEL_16;
  v7 = __OFSUB__(a2, result);
  result = a2 - result;
  if (v7)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return result;
}

uint64_t specialized Collection.distance(from:to:)(uint64_t result, uint64_t a2, char a3, uint64_t a4, unsigned int a5, char a6, uint64_t a7)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;

  if ((a6 & 1) != 0 || (a3 & 1) != 0)
    goto LABEL_39;
  v8 = result;
  if (a4 < result)
    goto LABEL_37;
  if (a5 != (_DWORD)a2)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    return result;
  }
  if (result != a4)
  {
    v12 = a7 + 64;
    v22 = a7 + 96;
    v10 = 1;
    while (1)
    {
      if ((v8 & 0x8000000000000000) != 0 || (v13 = 1 << *(_BYTE *)(a7 + 32), (uint64_t)v8 >= v13))
      {
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      v14 = v8 >> 6;
      v15 = *(_QWORD *)(v12 + 8 * (v8 >> 6));
      if (((v15 >> v8) & 1) == 0)
        goto LABEL_35;
      if (*(_DWORD *)(a7 + 36) != a5)
        goto LABEL_36;
      v16 = v15 & (-2 << (v8 & 0x3F));
      if (v16)
      {
        result = outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v8, a2, 0);
        v8 = __clz(__rbit64(v16)) | v8 & 0xFFFFFFFFFFFFFFC0;
        if (v8 == a4)
          return v10;
      }
      else
      {
        v17 = v14 + 1;
        v18 = (unint64_t)(v13 + 63) >> 6;
        if (v14 + 1 < v18)
        {
          v19 = *(_QWORD *)(v12 + 8 * v17);
          if (v19)
            goto LABEL_18;
          v17 = v14 + 2;
          if (v14 + 2 >= v18)
          {
LABEL_29:
            result = outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v8, a2, 0);
            v8 = v13;
          }
          else
          {
            v19 = *(_QWORD *)(v12 + 8 * v17);
            if (!v19)
            {
              v17 = v14 + 3;
              if (v14 + 3 >= v18)
                goto LABEL_29;
              v19 = *(_QWORD *)(v12 + 8 * v17);
              if (!v19)
              {
                v20 = v18 - 4;
                while (v20 != v14)
                {
                  v19 = *(_QWORD *)(v22 + 8 * v14++);
                  if (v19)
                  {
                    v17 = v14 + 3;
                    goto LABEL_18;
                  }
                }
                goto LABEL_29;
              }
            }
LABEL_18:
            result = outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v8, a2, 0);
            v8 = __clz(__rbit64(v19)) | (v17 << 6);
          }
          if (v8 == a4)
            return v10;
          goto LABEL_31;
        }
        result = outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v8, a2, 0);
        v8 = v13;
        if (v13 == a4)
          return v10;
      }
LABEL_31:
      a2 = a5;
      if (__OFADD__(v10++, 1))
      {
        __break(1u);
        goto LABEL_34;
      }
    }
  }
  outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(a4, a2, 0);
  return 0;
}

unint64_t *specialized CoalescingAdjacentDuplicates.formIndex(after:)(unint64_t *result, uint64_t a2, uint64_t (*a3)(uint64_t *, _QWORD *))
{
  unint64_t v3;
  unint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(a2 + 16);
  if (v3 < v5)
  {
    v6 = result;
    v7 = (_QWORD *)(a2 + 40 * v3);
    v9 = v7[4];
    v8 = v7[5];
    v10 = v7[6];
    v11 = v7[7];
    v12 = v7[8];
    result = (unint64_t *)outlined copy of Text?(v9, v8, v10, v11);
    v13 = v3 + 1;
    v28 = v9;
    v29 = v8;
    v30 = v10;
    v31 = v11;
    v32 = v12;
    if (v3 + 1 == v5)
    {
LABEL_10:
      result = (unint64_t *)outlined consume of Text?(v9, v8, v10, v11);
      *v6 = v5;
      return result;
    }
    v21 = v6;
    v22 = v5;
    v14 = (uint64_t *)(a2 + 40 * v3 + 104);
    v25 = v11;
    v26 = v10;
    while (v5 != v13)
    {
      v15 = *(v14 - 3);
      v16 = *(v14 - 2);
      v17 = *(v14 - 1);
      v18 = *v14;
      v27[0] = *(v14 - 4);
      v10 = v27[0];
      v27[1] = v15;
      v27[2] = v16;
      v27[3] = v17;
      v27[4] = v18;
      outlined copy of Text?(v9, v8, v26, v25);
      swift_bridgeObjectRetain();
      swift_retain();
      outlined copy of Text?(v10, v15, v16, v17);
      v24 = a3(&v28, v27);
      v19 = v10;
      v20 = v15;
      v11 = v25;
      LOBYTE(v10) = v26;
      outlined consume of Text?(v19, v20, v16, v17);
      outlined consume of Text?(v9, v8, v26, v25);
      swift_release();
      result = (unint64_t *)swift_bridgeObjectRelease();
      if ((v24 & 1) == 0)
      {
        v5 = v13;
        v6 = v21;
        goto LABEL_10;
      }
      ++v13;
      v28 = v9;
      v29 = v8;
      v30 = v26;
      v31 = v25;
      v14 += 5;
      v32 = v12;
      v5 = v22;
      if (v22 == v13)
      {
        v6 = v21;
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_OWORD *)(*(_QWORD *)(a4 + 48) + 16 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[9];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  outlined init with copy of SubviewsCollectionSlice((uint64_t)v3, (uint64_t)&v27);
  v7 = *v3;
  result = outlined destroy of SubviewsCollectionSlice((uint64_t)v3);
  *((_QWORD *)&v31 + 1) = v7;
  v35 = v29;
  v36 = v30;
  v33 = v27;
  v34 = v28;
  v37 = v31;
  if (!a2)
  {
    a3 = 0;
    goto LABEL_18;
  }
  if (!a3)
  {
LABEL_18:
    v18 = v36;
    a1[2] = v35;
    a1[3] = v18;
    a1[4] = v37;
    v19 = v34;
    *a1 = v33;
    a1[1] = v19;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = *((_QWORD *)&v37 + 1);
    v10 = *((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v37 + 1) == *((_QWORD *)&v33 + 1))
    {
      v11 = 0;
LABEL_17:
      a3 = v11;
      goto LABEL_18;
    }
    v11 = 0;
    while (v9 < v10 && v9 >= (uint64_t)v33)
    {
      _VariadicView_Children.subscript.getter();
      result = outlined init with copy of SubviewsCollectionSlice((uint64_t)&v33, (uint64_t)v20);
      if (v9 < v20[0] || v9 >= v20[1])
        goto LABEL_20;
      *((_QWORD *)&v37 + 1) = v9 + 1;
      result = outlined destroy of SubviewsCollectionSlice((uint64_t)v20);
      v14 = v21;
      v13 = v22;
      v27 = v21;
      v28 = v22;
      v16 = v25;
      v15 = v26;
      v31 = v25;
      v32 = v26;
      v17 = v24;
      v29 = v23;
      v30 = v24;
      a2[2] = v23;
      a2[3] = v17;
      a2[4] = v16;
      a2[5] = v15;
      *a2 = v14;
      a2[1] = v13;
      if (a3 - 1 == v11)
        goto LABEL_18;
      a2 += 6;
      v9 = *((_QWORD *)&v37 + 1);
      v10 = *((_QWORD *)&v33 + 1);
      ++v11;
      if (*((_QWORD *)&v37 + 1) == *((_QWORD *)&v33 + 1))
        goto LABEL_17;
    }
    __break(1u);
LABEL_20:
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *(*v9)(__int128 *__return_ptr, uint64_t);
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v4 = result;
  if (!a2)
  {
    v5 = 0;
    v18 = *(_OWORD *)(v3 + 112);
    *((_OWORD *)result + 6) = *(_OWORD *)(v3 + 96);
    *((_OWORD *)result + 7) = v18;
    v19 = *(_OWORD *)(v3 + 144);
    *((_OWORD *)result + 8) = *(_OWORD *)(v3 + 128);
    *((_OWORD *)result + 9) = v19;
    v20 = *(_OWORD *)(v3 + 48);
    *((_OWORD *)result + 2) = *(_OWORD *)(v3 + 32);
    *((_OWORD *)result + 3) = v20;
    v21 = *(_OWORD *)(v3 + 80);
    *((_OWORD *)result + 4) = *(_OWORD *)(v3 + 64);
    *((_OWORD *)result + 5) = v21;
    v22 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)result = *(_OWORD *)v3;
    *((_OWORD *)result + 1) = v22;
    result[20] = 0;
    return (_QWORD *)v5;
  }
  v5 = a3;
  if (!a3)
  {
LABEL_11:
    v23 = *(_OWORD *)(v3 + 112);
    *((_OWORD *)v4 + 6) = *(_OWORD *)(v3 + 96);
    *((_OWORD *)v4 + 7) = v23;
    v24 = *(_OWORD *)(v3 + 144);
    *((_OWORD *)v4 + 8) = *(_OWORD *)(v3 + 128);
    *((_OWORD *)v4 + 9) = v24;
    v25 = *(_OWORD *)(v3 + 48);
    *((_OWORD *)v4 + 2) = *(_OWORD *)(v3 + 32);
    *((_OWORD *)v4 + 3) = v25;
    v26 = *(_OWORD *)(v3 + 80);
    *((_OWORD *)v4 + 4) = *(_OWORD *)(v3 + 64);
    *((_OWORD *)v4 + 5) = v26;
    v27 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)v4 = *(_OWORD *)v3;
    *((_OWORD *)v4 + 1) = v27;
    v4[20] = v5;
    return (_QWORD *)v5;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v6 = *(_QWORD *)(v3 + 64);
    if (v6)
    {
      v7 = a2;
      v8 = 0;
      v9 = *(_QWORD *(**)(__int128 *__return_ptr, uint64_t))(v3 + 72);
      v10 = a3 - 1;
      while (1)
      {
        result = v9(&v28, v8);
        if ((v6 & ~(v6 >> 63)) == v8)
          break;
        v11 = v29;
        v31 = v28;
        v32 = v29;
        v12 = v30;
        v33 = v30;
        *(_OWORD *)v7 = v28;
        *(_OWORD *)(v7 + 16) = v11;
        *(_QWORD *)(v7 + 32) = v12;
        if (v10 == v8)
          goto LABEL_11;
        v7 += 40;
        if (v6 == ++v8)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_14;
    }
LABEL_9:
    v13 = *(_OWORD *)(v3 + 112);
    *((_OWORD *)v4 + 6) = *(_OWORD *)(v3 + 96);
    *((_OWORD *)v4 + 7) = v13;
    v14 = *(_OWORD *)(v3 + 144);
    *((_OWORD *)v4 + 8) = *(_OWORD *)(v3 + 128);
    *((_OWORD *)v4 + 9) = v14;
    v15 = *(_OWORD *)(v3 + 48);
    *((_OWORD *)v4 + 2) = *(_OWORD *)(v3 + 32);
    *((_OWORD *)v4 + 3) = v15;
    v16 = *(_OWORD *)(v3 + 80);
    *((_OWORD *)v4 + 4) = *(_OWORD *)(v3 + 64);
    *((_OWORD *)v4 + 5) = v16;
    v17 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)v4 = *(_OWORD *)v3;
    *((_OWORD *)v4 + 1) = v17;
    v5 = v6;
    v4[20] = v6;
    return (_QWORD *)v5;
  }
LABEL_14:
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *(*v13)(_OWORD *__return_ptr, _QWORD *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  BOOL v41;
  _QWORD *(*v42)(_OWORD *__return_ptr, _QWORD *);
  _OWORD v43[5];
  uint64_t v44;
  __int16 v45;
  _QWORD v46[2];
  char v47;

  v4 = result;
  v5 = *v3;
  LOBYTE(v6) = *((_BYTE *)v3 + 8);
  v7 = v3[2];
  v8 = v3[3];
  v10 = v3[4];
  v9 = v3[5];
  v11 = *((unsigned __int8 *)v3 + 48);
  v12 = v3[7];
  v38 = v3[8];
  v39 = *((_BYTE *)v3 + 72);
  v13 = (_QWORD *(*)(_OWORD *__return_ptr, _QWORD *))v3[10];
  v14 = v3[11];
  v42 = v13;
  if (!a2)
  {
LABEL_24:
    a3 = 0;
LABEL_25:
    v30 = v10;
    v20 = v9;
    LOBYTE(v29) = v11;
LABEL_29:
    *v4 = v5;
    *((_BYTE *)v4 + 8) = v6;
    v4[2] = v7;
    v4[3] = v8;
    v4[4] = v10;
    v4[5] = v9;
    *((_BYTE *)v4 + 48) = v11;
    v4[7] = v12;
    v4[8] = v38;
    *((_BYTE *)v4 + 72) = v39;
    v4[10] = v30;
    v4[11] = v20;
    *((_BYTE *)v4 + 96) = v29;
    v4[13] = v42;
    v4[14] = v14;
    return (_QWORD *)a3;
  }
  if (!a3)
    goto LABEL_25;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v15 = a2;
    v36 = v6;
    v37 = v5;
    v16 = 0;
    v17 = __OFADD__(v7, v8);
    v41 = v17;
    v34 = v8;
    v35 = v7;
    v40 = v10 - (v7 + v8) + 1;
    v31 = v12;
    v18 = v10 - v12;
    v32 = v11;
    v5 = v11;
    v33 = v9;
    v6 = v9;
    v19 = a3;
    while (1)
    {
      if (!(v18 + v16))
      {
        if ((v5 & 1) != 0)
        {
          if ((v39 & 1) != 0)
          {
            v12 = v31;
            v30 = v31;
            v20 = v6;
LABEL_28:
            LOBYTE(v29) = v5;
            a3 = v16;
            v5 = v37;
            LOBYTE(v6) = v36;
            v8 = v34;
            v7 = v35;
            v9 = v33;
            LOBYTE(v11) = v32;
            goto LABEL_29;
          }
        }
        else
        {
          v28 = v39;
          if (v6 != v38)
            v28 = 1;
          if ((v28 & 1) == 0)
          {
            v12 = v31;
            v30 = v31;
            v20 = v38;
            goto LABEL_28;
          }
        }
      }
      if (!(v10 - 0x7FFFFFFFFFFFFFFFLL + v16))
        break;
      if (v41)
        goto LABEL_31;
      v29 = v40 + v16 == 0;
      if (v40 + v16)
      {
        if ((v5 & 1) != 0)
          goto LABEL_33;
        v20 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
          __break(1u);
          goto LABEL_24;
        }
      }
      else
      {
        v20 = 0;
      }
      v21 = v10 + v16++;
      v46[0] = v21;
      v46[1] = v6;
      v47 = v5 & 1;
      result = v42(v43, v46);
      v22 = v44;
      v23 = v45;
      v24 = v43[1];
      v25 = v43[2];
      v26 = v43[3];
      v27 = v43[4];
      *(_OWORD *)v15 = v43[0];
      *(_OWORD *)(v15 + 16) = v24;
      *(_OWORD *)(v15 + 32) = v25;
      *(_OWORD *)(v15 + 48) = v26;
      *(_OWORD *)(v15 + 64) = v27;
      *(_QWORD *)(v15 + 80) = v22;
      *(_WORD *)(v15 + 88) = v23;
      v15 += 96;
      v5 = v29;
      v6 = v20;
      if (v19 == v16)
      {
        a3 = v19;
        v30 = v10 + v16;
        v5 = v37;
        LOBYTE(v6) = v36;
        v8 = v34;
        v7 = v35;
        v9 = v33;
        LOBYTE(v11) = v32;
        v12 = v31;
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[2];
  uint64_t v23;
  __int128 v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  v4 = result;
  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  v7 = ~v6;
  v8 = -v6;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(a4 + 64);
  v29 = a4;
  v30 = a4 + 64;
  v31 = (unint64_t)v7;
  v32 = v10;
  v11 = (unint64_t)v7;
  if (!a2)
  {
    v12 = 0;
    goto LABEL_16;
  }
  v12 = a3;
  if (!a3)
  {
LABEL_16:
    *(_QWORD *)v4 = a4;
    *(_QWORD *)(v4 + 8) = v5;
    *(_OWORD *)(v4 + 16) = v11;
    *(_QWORD *)(v4 + 32) = v10;
    return v12;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v13 = a2;
    SpatialEventCollection.Iterator.next()((uint64_t)v22);
    v14 = v25;
    if (v25 == 3)
    {
      v15 = 0;
LABEL_13:
      a4 = v29;
      v5 = v30;
      v11 = v31;
      v12 = v15;
    }
    else
    {
      v15 = 0;
      while (1)
      {
        v16 = v28;
        v17 = v27;
        v18 = v23;
        v19 = v22[1];
        v20 = v24;
        v21 = v26;
        *(_QWORD *)v13 = v22[0];
        *(_QWORD *)(v13 + 8) = v19;
        *(_BYTE *)(v13 + 16) = v18;
        *(_OWORD *)(v13 + 24) = v20;
        *(_BYTE *)(v13 + 40) = v14;
        *(_OWORD *)(v13 + 48) = v21;
        *(_QWORD *)(v13 + 64) = v17;
        *(_BYTE *)(v13 + 72) = v16 & 1;
        if (v12 - 1 == v15)
          break;
        v13 += 80;
        SpatialEventCollection.Iterator.next()((uint64_t)v22);
        v14 = v25;
        ++v15;
        if (v25 == 3)
          goto LABEL_13;
      }
      a4 = v29;
      v5 = v30;
      v11 = v31;
    }
    v10 = v32;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (_QWORD *)result;
  if (!a2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  v6 = a3;
  if (!a3)
  {
LABEL_11:
    *v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v7 = *(_QWORD *)(a4 + 16);
    if (v7)
    {
      v8 = a2;
      v9 = 0;
      v10 = a4 + 32;
      v11 = a3 - 1;
      while (v9 < *(_QWORD *)(a4 + 16))
      {
        result = outlined init with copy of SectionConfiguration(v10, v8);
        if (v11 == v9)
          goto LABEL_11;
        v8 += 184;
        ++v9;
        v10 += 184;
        if (v7 == v9)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    v6 = v7;
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = (_QWORD *)result;
  v6 = *(_QWORD *)(a4 + 16);
  if (!a2)
  {
    v13 = *(_QWORD *)(a4 + 16);
    v6 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    v13 = *(_QWORD *)(a4 + 16);
LABEL_13:
    v6 = a3;
    goto LABEL_14;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (v6)
    {
      v8 = a2;
      v9 = 0;
      while (v6 + v9 <= *(_QWORD *)(a4 + 16))
      {
        v10 = type metadata accessor for IntelligenceElement();
        v11 = *(_QWORD *)(v10 - 8);
        v12 = *(_QWORD *)(v11 + 72);
        result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v11 + 16))(v8, a4+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ v12 * (v6 + v9 - 1), v10);
        if (a3 + v9 == 1)
        {
          v13 = v6 + v9 - 1;
          goto LABEL_13;
        }
        v8 += v12;
        --v9;
        if (!(v6 + v9))
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_16;
    }
LABEL_9:
    v13 = 0;
LABEL_14:
    *v5 = a4;
    v5[1] = v13;
    return v6;
  }
LABEL_16:
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t WeakValue;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;

  v27 = a5;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v24 - v11;
  v13 = type metadata accessor for PlatformItemList.Item();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    v18 = 0;
    goto LABEL_23;
  }
  if (!a3)
  {
    v18 = 0;
    goto LABEL_23;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v24 = a3;
    v25 = a1;
    v18 = 0;
    v26 = a3 - 1;
    if ((v27 & 1) == 0)
      goto LABEL_7;
LABEL_5:
    if (v18 != *(_QWORD *)(a4 + 16))
    {
      swift_bridgeObjectRetain();
      v19 = a4;
      while (v18 < *(_QWORD *)(v19 + 16))
      {
        v23 = *(_QWORD *)(v14 + 72);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v19+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ v23 * v18, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
        outlined init with take of TableCellFormula((uint64_t)v12, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        outlined init with take of TableCellFormula((uint64_t)v17, a2, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        if (v26 == v18)
        {
          v18 = v24;
          goto LABEL_22;
        }
        a2 += v23;
        ++v18;
        if ((v27 & 1) != 0)
          goto LABEL_5;
LABEL_7:
        WeakValue = AGGraphGetWeakValue();
        if (WeakValue)
        {
          if (v18 == *(_QWORD *)(*(_QWORD *)WeakValue + 16))
            goto LABEL_20;
        }
        else
        {
          v21 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
          swift_bridgeObjectRelease();
          if (v18 == v21)
            goto LABEL_20;
        }
        v22 = (uint64_t *)AGGraphGetWeakValue();
        if (v22)
        {
          v19 = *v22;
          swift_bridgeObjectRetain();
        }
        else
        {
          v19 = MEMORY[0x1E0DEE9D8];
        }
      }
      __break(1u);
      goto LABEL_25;
    }
LABEL_20:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
    outlined destroy of TableRowID?((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t)type metadata accessor for PlatformItemList.Item, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
LABEL_22:
    a1 = v25;
LABEL_23:
    *(_QWORD *)a1 = a4;
    *(_BYTE *)(a1 + 8) = v27 & 1;
    *(_QWORD *)(a1 + 16) = v18;
    return;
  }
LABEL_25:
  __break(1u);
}

void specialized Sequence._copySequenceContents(initializing:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  _OWORD *v45;
  _QWORD v46[2];
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[3];
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61[2];
  char v62;
  __int128 v63;
  _OWORD v64[2];
  unint64_t v65;

  v48 = type metadata accessor for TableColumnCollection.Visitor(0);
  MEMORY[0x1E0C80A78](v48, v7);
  v9 = (_QWORD *)((char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TableColumnCollection.Entry?, type metadata accessor for TableColumnCollection.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v53 = (uint64_t)v46 - v16;
  v50 = type metadata accessor for TableColumnCollection.Entry(0);
  v17 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50, v18);
  v20 = (char *)v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = v3[1];
  v63 = *v3;
  v64[0] = v21;
  *(_OWORD *)((char *)v64 + 9) = *(__int128 *)((char *)v3 + 25);
  v65 = 0;
  v47 = a1;
  if (a2 && a3)
  {
    if ((a3 & 0x8000000000000000) == 0)
    {
      v22 = a3;
      v23 = 0;
      v46[1] = v22;
      v49 = v22 - 1;
      while (1)
      {
        v24 = v65;
        outlined init with copy of TableColumnCollection.Backing((uint64_t)&v63, (uint64_t)v61);
        if ((v62 & 1) != 0)
        {
          v25 = *(_QWORD *)(*(_QWORD *)&v61[0] + 16);
          swift_bridgeObjectRelease();
          if (v24 == v25)
            goto LABEL_23;
        }
        else
        {
          outlined init with take of OptionalBinaryInteger(v61, (uint64_t)&v57);
          v26 = v58;
          v27 = v59;
          __swift_project_boxed_opaque_existential_1(&v57, v58);
          v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v26, v27);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
          if (v24 == v28)
          {
LABEL_23:
            v43 = v53;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v53, 1, 1, v50);
            outlined destroy of TableRowID?(v43, (uint64_t)&lazy cache variable for type metadata for TableColumnCollection.Entry?, (uint64_t)type metadata accessor for TableColumnCollection.Entry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
            goto LABEL_24;
          }
        }
        v52 = v23;
        v51 = a2;
        v29 = (uint64_t)v13;
        outlined init with copy of TableColumnCollection.Backing((uint64_t)&v63, (uint64_t)v61);
        if ((v62 & 1) != 0)
        {
          if ((v24 & 0x8000000000000000) != 0)
            goto LABEL_26;
          if (v24 >= *(_QWORD *)(*(_QWORD *)&v61[0] + 16))
            goto LABEL_27;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)&v61[0]+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v24, v53, type metadata accessor for TableColumnCollection.Entry);
          swift_bridgeObjectRelease();
          v30 = v51;
        }
        else
        {
          v31 = v20;
          outlined init with take of OptionalBinaryInteger(v61, (uint64_t)&v57);
          v32 = v48;
          v33 = (uint64_t)v9 + *(int *)(v48 + 20);
          v34 = v50;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v33, 1, 1, v50);
          *v9 = v24;
          v35 = v58;
          v36 = v59;
          __swift_project_boxed_opaque_existential_1(&v57, v58);
          TableColumnList.visitColumns<A>(applying:from:)((uint64_t)v9, v24, v35, v32, v36, (uint64_t)&protocol witness table for TableColumnCollection.Visitor);
          v13 = (char *)v29;
          outlined init with copy of TableColumnCollection.Entry?(v33, v29);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v29, 1, v34) == 1)
            goto LABEL_29;
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for TableColumnCollection.Visitor);
          outlined init with take of TableCellFormula(v29, v53, type metadata accessor for TableColumnCollection.Entry);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
          v30 = v51;
          v20 = v31;
        }
        outlined init with copy of TableColumnCollection((uint64_t)&v63, (uint64_t)v61);
        v37 = v65;
        outlined init with copy of TableColumnCollection.Backing((uint64_t)v61, (uint64_t)&v57);
        v38 = v52;
        if ((v60 & 1) != 0)
        {
          v39 = *(_QWORD *)(v57 + 16);
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined init with take of OptionalBinaryInteger(&v57, (uint64_t)v54);
          v40 = v55;
          v41 = v56;
          __swift_project_boxed_opaque_existential_1(v54, v55);
          v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v40, v41);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
        }
        if (v37 < 0 || v37 >= v39)
          break;
        v65 = v37 + 1;
        outlined destroy of TableColumnCollection((uint64_t)v61);
        v42 = v53;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v53, 0, 1, v50);
        outlined init with take of TableCellFormula(v42, (uint64_t)v20, type metadata accessor for TableColumnCollection.Entry);
        outlined init with take of TableCellFormula((uint64_t)v20, v30, type metadata accessor for TableColumnCollection.Entry);
        if (v49 == v38)
          goto LABEL_24;
        a2 = v30 + *(_QWORD *)(v17 + 72);
        v23 = v38 + 1;
      }
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
    }
    __break(1u);
LABEL_29:
    __break(1u);
  }
  else
  {
LABEL_24:
    v44 = v64[0];
    v45 = v47;
    *v47 = v63;
    v45[1] = v44;
    v45[2] = v64[1];
    *((_QWORD *)v45 + 6) = v65;
  }
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t result;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v4 = v3;
  v36 = a1;
  v45 = type metadata accessor for _ArchivedViewStates(0);
  MEMORY[0x1E0C80A78](v45, v7);
  v39 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ArchivedView?, type metadata accessor for _ArchivedView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v35 - v11;
  v44 = type metadata accessor for _ArchivedView(0);
  v46 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44, v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v38 = (char *)&v35 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v43 = (uint64_t)&v35 - v21;
  type metadata accessor for IndexingIterator<_ArchivedViewStates>();
  v23 = v22;
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = outlined init with take of TableCellFormula(v4, (uint64_t)v26, type metadata accessor for _ArchivedViewStates);
  v28 = *(int *)(v23 + 36);
  *(_QWORD *)&v26[v28] = 0;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v30 = 0;
    goto LABEL_13;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v29 = *(_QWORD *)&v26[v28];
    v42 = &v26[*(int *)(v45 + 20)];
    if (v29 == *(_QWORD *)(*((_QWORD *)v42 + 1) + 16))
    {
LABEL_5:
      v30 = 0;
LABEL_13:
      outlined init with take of TableCellFormula((uint64_t)v26, v36, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<_ArchivedViewStates>);
      return v30;
    }
    v30 = 0;
    v31 = (uint64_t)v39;
    v41 = v39 + 8;
    v37 = &v47;
    v35 = a3;
    v40 = a3 - 1;
    v32 = (uint64_t)v38;
    while (1)
    {
      _ArchivedViewStates.state(at:)(v29, (uint64_t)v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v12, 0, 1, v44);
      outlined init with take of TableCellFormula((uint64_t)v12, (uint64_t)v15, type metadata accessor for _ArchivedView);
      outlined init with take of TableCellFormula((uint64_t)v15, v32, type metadata accessor for _ArchivedView);
      result = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v26, v31, type metadata accessor for _ArchivedViewStates);
      v33 = *(_QWORD *)&v26[v28];
      if (v33 >= *(_QWORD *)(*(_QWORD *)&v41[*(int *)(v45 + 20)] + 16))
        break;
      *(_QWORD *)&v26[v28] = v33 + 1;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v31, type metadata accessor for _ArchivedViewStates);
      v34 = v43;
      outlined init with take of TableCellFormula(v32, v43, type metadata accessor for _ArchivedView);
      outlined init with take of TableCellFormula(v34, a2, type metadata accessor for _ArchivedView);
      if (v40 == v30)
      {
        v30 = v35;
        goto LABEL_13;
      }
      a2 += *(_QWORD *)(v46 + 72);
      v29 = *(_QWORD *)&v26[v28];
      ++v30;
      if (v29 == *(_QWORD *)(*((_QWORD *)v42 + 1) + 16))
        goto LABEL_13;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD *__return_ptr, unint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[6];
  _BYTE v21[48];
  _BYTE v22[56];

  v10 = result;
  if (!a2)
  {
    a3 = 0;
    goto LABEL_17;
  }
  if (!a3)
  {
LABEL_17:
    v11 = a6;
    goto LABEL_18;
  }
  if (a3 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!__OFADD__(a6, a7))
  {
    v11 = a6;
    if (a7)
    {
      v13 = 0;
      v18 = a3;
      v19 = a6;
      v14 = a6 ^ 0x7FFFFFFFFFFFFFFFLL;
      v15 = a3 - 1;
      v16 = 4;
      while (1)
      {
        if ((a5 & 1) != 0)
        {
          if (v13 >= a4[2])
            goto LABEL_21;
          outlined init with copy of TableRowID((uint64_t)&a4[v16], (uint64_t)v20);
        }
        else
        {
          v17 = *(void (**)(_QWORD *__return_ptr, unint64_t))(*a4 + 104);
          swift_retain();
          v17(v20, v13);
          outlined consume of ResolvedTableRowIDs.Storage((uint64_t)a4, 0);
        }
        result = outlined init with take of TableRowID((uint64_t)v20, (uint64_t)v21);
        if (v14 == v13)
          break;
        outlined init with take of TableRowID((uint64_t)v21, (uint64_t)v22);
        result = outlined init with take of TableRowID((uint64_t)v22, a2 + v16 * 8 - 32);
        if (v15 == v13)
        {
          a3 = v18;
          a6 = v19;
          v11 = v19 + v13 + 1;
          goto LABEL_18;
        }
        ++v13;
        v16 += 6;
        if (a7 == v13)
        {
          a6 = v19;
          v11 = v19 + v13;
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_15:
    a3 = a7;
LABEL_18:
    *(_QWORD *)v10 = a4;
    *(_BYTE *)(v10 + 8) = a5 & 1;
    *(_QWORD *)(v10 + 16) = a6;
    *(_QWORD *)(v10 + 24) = a7;
    *(_QWORD *)(v10 + 32) = v11;
    return a3;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, (void (*)(__int128 *, _BYTE *))outlined init with copy of SubviewsCollection, (void (*)(_BYTE *))outlined destroy of SubviewsCollection);
}

{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, (void (*)(__int128 *, _BYTE *))outlined init with copy of SubviewCollection, (void (*)(_BYTE *))outlined destroy of SubviewCollection);
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[12];

  v7 = (_QWORD *)result;
  if (!a2)
  {
    v10 = 0;
    goto LABEL_11;
  }
  if (!a3)
  {
LABEL_10:
    v10 = a3;
    goto LABEL_11;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = a2;
    v10 = 0;
    if (dispatch thunk of _ViewList_ID_Views.endIndex.getter())
    {
      while (1)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        dispatch thunk of _ViewList_ID_Views.subscript.getter();
        ViewTraitCollection.init()();
        LOBYTE(v14[0]) = 1;
        _ViewList_Sublist.init(start:count:id:elements:traits:list:)();
        _ViewList_SublistTransform.apply(sublist:)();
        v11 = v14[2];
        v12 = v14[3];
        swift_bridgeObjectRetain();
        outlined destroy of _ViewList_Sublist((uint64_t)v14);
        swift_bridgeObjectRelease();
        swift_release();
        swift_retain();
        swift_bridgeObjectRetain();
        v13 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
        swift_bridgeObjectRelease();
        result = swift_release();
        if (v10 >= v13)
          break;
        *v9 = v11;
        v9[1] = v12;
        if (a3 - 1 == v10)
          goto LABEL_10;
        ++v10;
        v9 += 2;
        if (v10 == dispatch thunk of _ViewList_ID_Views.endIndex.getter())
          goto LABEL_11;
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_11:
    *v7 = a4;
    v7[1] = a5;
    v7[2] = v10;
    return v10;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _OWORD *a2, uint64_t a3, void (*a4)(__int128 *, _BYTE *), void (*a5)(_BYTE *))
{
  __int128 *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[56];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v6 = (_OWORD *)result;
  v7 = v5[1];
  v34 = *v5;
  v35 = v7;
  v36 = v5[2];
  v37 = *((unint64_t *)v5 + 6);
  if (!a2)
  {
    v8 = 0;
    goto LABEL_13;
  }
  v8 = a3;
  if (!a3)
  {
LABEL_13:
    v19 = v35;
    *v6 = v34;
    v6[1] = v19;
    v20 = v37;
    v6[2] = v36;
    v6[3] = v20;
    return v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v11 = a2;
    v12 = *((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1) == _VariadicView_Children.endIndex.getter())
    {
      v13 = 0;
LABEL_12:
      v8 = v13;
      goto LABEL_13;
    }
    v13 = 0;
    while (1)
    {
      _VariadicView_Children.subscript.getter();
      a4(&v34, v21);
      result = _VariadicView_Children.endIndex.getter();
      if (v12 < 0 || v12 >= result)
        break;
      *((_QWORD *)&v37 + 1) = v12 + 1;
      a5(v21);
      v15 = v22;
      v14 = v23;
      v28 = v22;
      v29 = v23;
      v16 = v27;
      v18 = v25;
      v17 = v26;
      v32 = v26;
      v33 = v27;
      v30 = v24;
      v31 = v25;
      v11[2] = v24;
      v11[3] = v18;
      v11[4] = v17;
      v11[5] = v16;
      *v11 = v15;
      v11[1] = v14;
      if (v8 - 1 == v13)
        goto LABEL_13;
      v11 += 6;
      v12 = *((_QWORD *)&v37 + 1);
      ++v13;
      if (v12 == _VariadicView_Children.endIndex.getter())
        goto LABEL_12;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;

  v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88);
  v8 = swift_retain();
  v9 = v7(v8);
  result = swift_release();
  if (!a2)
  {
    a3 = 0;
    goto LABEL_11;
  }
  if (!a3)
  {
LABEL_11:
    *a1 = v3;
    a1[1] = v9;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96);
    if (v9 == v11(result))
    {
      v12 = 0;
LABEL_10:
      a3 = v12;
    }
    else
    {
      v12 = 0;
      while (1)
      {
        (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v3 + 104))(v16, v9);
        v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 120);
        swift_retain();
        v9 = v13(v9);
        v14 = swift_release();
        v15 = v16[1];
        *(_OWORD *)a2 = v16[0];
        *(_OWORD *)(a2 + 16) = v15;
        *(_QWORD *)(a2 + 32) = v17;
        if (a3 - 1 == v12)
          break;
        a2 += 40;
        ++v12;
        if (v9 == v11(v14))
          goto LABEL_10;
      }
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  _QWORD v15[6];
  _BYTE v16[48];

  v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88);
  v8 = swift_retain();
  v9 = v7(v8);
  result = swift_release();
  if (!a2)
  {
    a3 = 0;
    goto LABEL_11;
  }
  if (!a3)
  {
LABEL_11:
    *a1 = v3;
    a1[1] = v9;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96);
    if (v9 == v11(result))
    {
      v12 = 0;
LABEL_10:
      a3 = v12;
    }
    else
    {
      v12 = 0;
      while (1)
      {
        (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v3 + 104))(v15, v9);
        v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 120);
        swift_retain();
        v9 = v13(v9);
        swift_release();
        outlined init with take of TableRowID((uint64_t)v15, (uint64_t)v16);
        v14 = outlined init with take of TableRowID((uint64_t)v16, a2);
        if (a3 - 1 == v12)
          break;
        a2 += 48;
        ++v12;
        if (v9 == v11(v14))
          goto LABEL_10;
      }
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  uint64_t v14;
  __int128 v15[3];
  __int128 v16[3];
  __int128 v17[4];

  if (!a2)
  {
    v8 = 0;
    goto LABEL_17;
  }
  if (!a3)
  {
LABEL_16:
    v8 = a3;
    goto LABEL_17;
  }
  if (a3 < 0)
  {
LABEL_19:
    __break(1u);
  }
  else
  {
    v4 = a2;
    if (!(a4 >> 62))
    {
      v8 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v8)
        goto LABEL_6;
LABEL_17:
      *a1 = a4;
      a1[1] = v8;
      return v8;
    }
  }
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v8)
    goto LABEL_17;
LABEL_6:
  v9 = 0;
  while (1)
  {
    if ((a4 & 0xC000000000000001) != 0)
    {
      v11 = MEMORY[0x18D75E3BC](v9, a4);
      v10 = v11;
    }
    else
    {
      if (v9 >= *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_19;
      }
      v10 = *(_QWORD *)(a4 + 8 * v9 + 32);
      v11 = swift_retain();
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v10 + 120))(&v13, v11);
    result = swift_release();
    if (!v14)
      break;
    outlined init with take of Decodable & Encodable & Hashable(&v13, (uint64_t)v15);
    outlined init with take of Decodable & Encodable & Hashable(v15, (uint64_t)v16);
    outlined init with take of Decodable & Encodable & Hashable(v16, (uint64_t)v17);
    outlined init with take of Decodable & Encodable & Hashable(v17, v4);
    if (a3 - 1 == v9)
      goto LABEL_16;
    v4 += 56;
    if (v8 == ++v9)
      goto LABEL_17;
  }
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  __int128 v13[2];
  __int128 v14[2];

  if (a2)
  {
    if (a3)
    {
      if (a3 < 0)
        goto LABEL_18;
      v4 = a2;
      if (a4 >> 62)
      {
LABEL_19:
        swift_bridgeObjectRetain();
        v8 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v8)
          goto LABEL_6;
      }
      else
      {
        v8 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v8)
        {
LABEL_6:
          for (i = 0; v8 != i; ++i)
          {
            if ((a4 & 0xC000000000000001) != 0)
            {
              v11 = MEMORY[0x18D75E3BC](i, a4);
              v10 = v11;
            }
            else
            {
              if (i >= *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
LABEL_18:
                __break(1u);
                goto LABEL_19;
              }
              v10 = *(_QWORD *)(a4 + 8 * i + 32);
              v11 = swift_retain();
            }
            (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v10 + 112))(v13, v11);
            swift_release();
            outlined init with take of OptionalBinaryInteger(v13, (uint64_t)v14);
            outlined init with take of OptionalBinaryInteger(v14, v4);
            if (a3 - 1 == i)
              goto LABEL_15;
            v4 += 40;
          }
        }
      }
    }
    else
    {
LABEL_15:
      v8 = a3;
    }
  }
  else
  {
    v8 = 0;
  }
  *a1 = a4;
  a1[1] = v8;
  return v8;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9 = result;
  if (!a2)
  {
    v10 = 0;
    goto LABEL_11;
  }
  v10 = a3;
  if (!a3)
  {
LABEL_11:
    *(_QWORD *)v9 = a4;
    *(_DWORD *)(v9 + 8) = a5;
    *(_QWORD *)(v9 + 16) = a6;
    *(_QWORD *)(v9 + 24) = v10;
    return v10;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v11 = *(_QWORD *)(a6 + 16);
    if (v11)
    {
      v12 = a2;
      v13 = 0;
      v14 = a6 + 32;
      v15 = a3 - 1;
      while (v13 < *(_QWORD *)(a6 + 16))
      {
        result = outlined init with copy of PlatformItem(v14, v12);
        if (v15 == v13)
          goto LABEL_11;
        v12 += 336;
        ++v13;
        v14 += 336;
        if (v11 == v13)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    v10 = v11;
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(_QWORD);
  uint64_t result;
  char v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = v3;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v27 - v10;
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AnimationTimelineSchedule.Entries();
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = outlined init with take of TableCellFormula(v4, (uint64_t)v20, v21);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    outlined init with take of TableCellFormula((uint64_t)v20, a1, (uint64_t (*)(_QWORD))type metadata accessor for AnimationTimelineSchedule.Entries);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v28 = a3;
    v29 = a1;
    v23 = v20[*(int *)(v17 + 20) + 8];
    if ((v23 & 1) != 0)
    {
LABEL_9:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
      v24 = 0;
    }
    else
    {
      v24 = 0;
      v25 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
      v30 = v28 - 1;
      while (1)
      {
        v25(v11, v20, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
        static Date.+= infix(_:_:)();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
          break;
        v26 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
        v26(v16, v11, v12);
        v26(a2, v16, v12);
        if (v30 == v24)
        {
          a3 = v28;
          a1 = v29;
          goto LABEL_12;
        }
        a2 += *(_QWORD *)(v13 + 72);
        ++v24;
        if ((v23 & 1) != 0)
          goto LABEL_9;
      }
    }
    a1 = v29;
    outlined destroy of TableRowID?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x1E0CB0870], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    a3 = v24;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *, _QWORD *), uint64_t a6)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v22;

  v22 = 0;
  if (!a2)
  {
LABEL_11:
    v9 = 0;
LABEL_12:
    v8 = 0;
LABEL_17:
    *result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = v9;
    return (_QWORD *)v8;
  }
  v8 = a3;
  if (!a3)
  {
    v9 = 0;
    goto LABEL_17;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a4 + 16);
    if (v9)
    {
      v10 = a2;
      v11 = 0;
      v19 = result;
      v20 = a4 + 32;
      v12 = 1;
      while (v11 < *(_QWORD *)(a4 + 16))
      {
        v13 = (uint64_t *)(v20 + 40 * v11);
        v14 = *v13;
        v15 = v13[1];
        v16 = v13[2];
        v17 = v13[3];
        v18 = v13[4];
        outlined copy of Text?(*v13, v15, v16, v17);
        swift_bridgeObjectRetain();
        swift_retain();
        specialized CoalescingAdjacentDuplicates.formIndex(after:)(&v22, a4, a5);
        swift_release();
        result = (_QWORD *)swift_bridgeObjectRelease();
        *v10 = v14;
        v10[1] = v15;
        v10[2] = v16;
        v10[3] = v17;
        v10[4] = v18;
        v11 = v22;
        if (v8 == v12)
        {
          v9 = v22;
LABEL_16:
          result = v19;
          goto LABEL_17;
        }
        if (v22 == v9)
        {
          v8 = v12;
          goto LABEL_16;
        }
        ++v12;
        v10 += 5;
        if ((v22 & 0x8000000000000000) != 0)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      __break(1u);
      goto LABEL_19;
    }
    goto LABEL_12;
  }
LABEL_19:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    v13 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    v14 = (__int128 *)(*(_QWORD *)(a4 + 56) + 48 * v12);
    v15 = *v14;
    v16 = v14[1];
    v17 = v14[2];
    *(_QWORD *)a2 = v13;
    *(_OWORD *)(a2 + 8) = v15;
    *(_OWORD *)(a2 + 24) = v16;
    *(_OWORD *)(a2 + 40) = v17;
    a2 += 56;
    if (v9 == a3)
      goto LABEL_35;
  }
  v18 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v18 >= v10)
    goto LABEL_30;
  v19 = *(_QWORD *)(v4 + 8 * v18);
  if (v19)
    goto LABEL_19;
  v8 += 2;
  if (v18 + 1 >= v10)
  {
    v7 = 0;
    v8 = v18;
    goto LABEL_34;
  }
  v19 = *(_QWORD *)(v4 + 8 * v8);
  if (v19)
  {
LABEL_15:
    v18 = v8;
LABEL_19:
    v21 = __clz(__rbit64(v19));
    v7 = (v19 - 1) & v19;
    v12 = v21 + (v18 << 6);
    v8 = v18;
    goto LABEL_8;
  }
  v20 = v18 + 2;
  if (v18 + 2 >= v10)
    goto LABEL_30;
  v19 = *(_QWORD *)(v4 + 8 * v20);
  if (v19)
  {
LABEL_18:
    v18 = v20;
    goto LABEL_19;
  }
  v8 = v18 + 3;
  if (v18 + 3 >= v10)
  {
    v7 = 0;
    v8 = v18 + 2;
    goto LABEL_34;
  }
  v19 = *(_QWORD *)(v4 + 8 * v8);
  if (v19)
    goto LABEL_15;
  v20 = v18 + 4;
  if (v18 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v19 = *(_QWORD *)(v4 + 8 * v20);
  if (v19)
    goto LABEL_18;
  while (1)
  {
    v18 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v18 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v19 = *(_QWORD *)(v4 + 8 * v18);
    ++v20;
    if (v19)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for DateComponents?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v35 - v10;
  v12 = type metadata accessor for DateComponents();
  v43 = *(_QWORD *)(v12 - 8);
  v14.n128_f64[0] = MEMORY[0x1E0C80A78](v12, v13);
  v42 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = a4;
  v17 = a4 + 56;
  v16 = *(_QWORD *)(a4 + 56);
  v18 = -1 << *(_BYTE *)(a4 + 32);
  v37 = a1;
  v38 = v18;
  v19 = -v18;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
LABEL_39:
    v33 = v37;
    v34 = ~v38;
    *v37 = v44;
    v33[1] = v17;
    v33[2] = v34;
    v33[3] = v22;
    v33[4] = v21;
    return;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v22 = 0;
  v23 = 0;
  v39 = a4 + 56;
  v40 = (unint64_t)(63 - v38) >> 6;
  v36 = v40 - 1;
  v41 = a3;
  v24 = v42;
  v25 = v43;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v26 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v27 = v26 | (v22 << 6);
  while (1)
  {
    v31 = *(_QWORD *)(v25 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v25 + 16))(v11, *(_QWORD *)(v44 + 48) + v31 * v27, v12, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v11, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v11, 1, v12) == 1)
    {
      v17 = v39;
      goto LABEL_38;
    }
    ++v23;
    v32 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
    v32(v24, v11, v12);
    v32(a2, v24, v12);
    if (v23 == v41)
    {
      v17 = v39;
      goto LABEL_39;
    }
    a2 += v31;
    v25 = v43;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v28 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    v17 = v39;
    if (v28 >= v40)
      goto LABEL_37;
    v29 = *(_QWORD *)(v39 + 8 * v28);
    if (!v29)
    {
      v30 = v22 + 2;
      ++v22;
      if (v28 + 1 >= v40)
        goto LABEL_37;
      v29 = *(_QWORD *)(v39 + 8 * v30);
      if (v29)
        goto LABEL_14;
      v22 = v28 + 1;
      if (v28 + 2 >= v40)
        goto LABEL_37;
      v29 = *(_QWORD *)(v39 + 8 * (v28 + 2));
      if (v29)
      {
        v28 += 2;
      }
      else
      {
        v22 = v28 + 2;
        if (v28 + 3 >= v40)
          goto LABEL_37;
        v29 = *(_QWORD *)(v39 + 8 * (v28 + 3));
        if (!v29)
        {
          v30 = v28 + 4;
          v22 = v28 + 3;
          if (v28 + 4 < v40)
          {
            v29 = *(_QWORD *)(v39 + 8 * v30);
            if (!v29)
            {
              while (1)
              {
                v28 = v30 + 1;
                if (__OFADD__(v30, 1))
                  goto LABEL_42;
                if (v28 >= v40)
                {
                  v22 = v36;
                  goto LABEL_37;
                }
                v29 = *(_QWORD *)(v39 + 8 * v28);
                ++v30;
                if (v29)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v28 = v30;
            goto LABEL_21;
          }
LABEL_37:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v25 + 56))(v11, 1, 1, v12, v14);
          v21 = 0;
LABEL_38:
          outlined destroy of TableRowID?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for DateComponents?, (uint64_t)MEMORY[0x1E0CAEAB0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
          goto LABEL_39;
        }
        v28 += 3;
      }
    }
LABEL_21:
    v21 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v28 << 6);
    v22 = v28;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  _QWORD v26[2];
  char v27;
  _OWORD __src[20];
  _QWORD __dst[42];

  outlined init with copy of DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>(v3, (uint64_t)__src);
  v7 = *(_QWORD *)(v3 + 240);
  v8 = *(_QWORD *)(v3 + 248);
  v9 = *(_BYTE *)(v3 + 256);
  outlined destroy of DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>(v3, (unint64_t *)&lazy cache variable for type metadata for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, (uint64_t (*)(uint64_t))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>, &lazy protocol witness table cache variable for type CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>> and conformance CountingIndexCollection<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA200]);
  *(_QWORD *)&__src[18] = v7;
  *((_QWORD *)&__src[18] + 1) = v8;
  LOBYTE(__src[19]) = v9;
  result = (uint64_t)memcpy(__dst, __src, 0x131uLL);
  *(_OWORD *)&__dst[39] = *(_OWORD *)(v3 + 288);
  if (!a2)
  {
LABEL_24:
    a3 = 0;
    goto LABEL_27;
  }
  if (!a3)
  {
LABEL_27:
    memcpy(a1, __dst, 0x148uLL);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v25 = a1;
    v11 = 0;
    while (1)
    {
      v19 = __dst[37];
      v20 = __dst[38];
      v21 = __dst[36];
      if (__dst[36] == __dst[33])
      {
        v22 = __dst[35];
        if ((__dst[38] & 1) != 0)
        {
          if ((__dst[35] & 1) != 0)
            goto LABEL_25;
        }
        else
        {
          if (__dst[37] != __dst[34])
            v22 = 1;
          if ((v22 & 1) == 0)
          {
LABEL_25:
            a3 = v11;
LABEL_26:
            a1 = v25;
            goto LABEL_27;
          }
        }
      }
      result = outlined init with copy of DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>((uint64_t)__dst, (uint64_t)__src);
      a1 = (void *)(v21 + 1);
      if (__OFADD__(v21, 1))
        break;
      v23 = *(_QWORD *)&__src[13] + *((_QWORD *)&__src[13] + 1);
      if (__OFADD__(*(_QWORD *)&__src[13], *((_QWORD *)&__src[13] + 1)))
        goto LABEL_29;
      v24 = *(_QWORD *)(*((_QWORD *)&__src[11] + 1) + 16);
      if (v24 || (v24 = *(_QWORD *)(*(_QWORD *)&__src[11] + 16)) != 0)
      {
        result = (uint64_t)specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v26, *((uint64_t *)&__src[11] + 1), *(uint64_t *)&__src[11], *(unint64_t *)&__src[14], v23, v24);
        v23 = v26[0];
      }
      if (a1 == (void *)v23)
      {
        v12 = 0;
      }
      else
      {
        if ((v20 & 1) != 0)
          goto LABEL_31;
        v12 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
          __break(1u);
          goto LABEL_24;
        }
      }
      ++v11;
      __dst[36] = v21 + 1;
      __dst[37] = v12;
      LOBYTE(__dst[38]) = a1 == (void *)v23;
      outlined destroy of DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>((uint64_t)__src, (unint64_t *)&lazy cache variable for type metadata for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, (uint64_t (*)(uint64_t))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>, &lazy protocol witness table cache variable for type CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>> and conformance CountingIndexCollection<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA200]);
      v26[0] = v21;
      v26[1] = v19;
      v27 = v20;
      ((void (*)(_OWORD *__return_ptr, _QWORD *))__dst[39])(__src, v26);
      v13 = *(_QWORD *)&__src[5];
      v14 = WORD4(__src[5]);
      v15 = __src[1];
      v16 = __src[2];
      v17 = __src[3];
      v18 = __src[4];
      *(_OWORD *)a2 = __src[0];
      *(_OWORD *)(a2 + 16) = v15;
      *(_OWORD *)(a2 + 32) = v16;
      *(_OWORD *)(a2 + 48) = v17;
      *(_OWORD *)(a2 + 64) = v18;
      *(_QWORD *)(a2 + 80) = v13;
      *(_WORD *)(a2 + 88) = v14;
      a2 += 96;
      if (a3 == v11)
        goto LABEL_26;
    }
    __break(1u);
LABEL_29:
    __break(1u);
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v7;
  BOOL v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t updated;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  void (*v25)(_QWORD *__return_ptr, unint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  _BYTE v37[32];
  uint64_t v38;
  char v39;
  _BYTE v40[48];
  _QWORD v41[33];
  _QWORD v42[34];

  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
  v7 = *(_QWORD *)(v3 + 208);
  v8 = v7 == specialized ShadowRowCollection.endIndex.getter();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v3, (uint64_t (*)(_QWORD))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
  v41[30] = v7;
  v41[31] = 0;
  LOBYTE(v41[32]) = v8;
  result = (uint64_t)memcpy(v42, v41, 0x101uLL);
  v32 = a1;
  if (!a2)
  {
    a3 = 0;
    goto LABEL_38;
  }
  if (!a3)
  {
LABEL_38:
    memcpy(v32, v42, 0x101uLL);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v31 = a3;
    v11 = v42[26] + v42[27];
    if (!__OFADD__(v42[26], v42[27]))
    {
      a3 = 0;
      v12 = v42[30];
      v13 = v42[31];
      v35 = v42[32];
      while (1)
      {
        v33 = v13;
        v14 = v42[28];
        v15 = v42[23];
        v16 = v42[22];
        v17 = *(_QWORD *)(v42[23] + 16);
        if (v17 || (v17 = *(_QWORD *)(v42[22] + 16)) != 0)
        {
          result = (uint64_t)specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v41, v42[23], v42[22], v42[28], v11, v17);
          v11 = v41[0];
        }
        if (((v12 == v11) & v35) != 0)
        {
          v38 = 0;
          memset(v37, 0, sizeof(v37));
          v39 = -1;
          outlined destroy of TableRowID?((uint64_t)v37, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
          goto LABEL_38;
        }
        v34 = a2;
        if (*(_QWORD *)(v15 + 16) || *(_QWORD *)(v16 + 16))
        {
          MEMORY[0x1E0C80A78](result, v10);
          lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
          swift_getKeyPath();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_n(v15, v16);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release_n();
          v14 = (unint64_t)specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(&v36, updated, v14, v12);
          result = swift_bridgeObjectRelease();
        }
        else
        {
          v36 = v12;
        }
        if ((v14 & 0x8000000000000000) != 0)
          goto LABEL_40;
        if (v14 >= *(_QWORD *)(v42[5] + 16))
          goto LABEL_41;
        v19 = v42[5] + 96 * v14;
        v20 = *(_QWORD *)(v19 + 112);
        v21 = v36 - v20;
        if (__OFSUB__(v36, v20))
          goto LABEL_42;
        v22 = *(_QWORD **)(v19 + 96);
        v23 = *(_BYTE *)(v19 + 104);
        if (v23)
        {
          v24 = v34;
          if ((v21 & 0x8000000000000000) != 0)
            goto LABEL_45;
          if (v21 >= v22[2])
            goto LABEL_46;
          outlined init with copy of TableRowID((uint64_t)&v22[6 * v21 + 4], (uint64_t)v41);
          swift_bridgeObjectRetain();
        }
        else
        {
          v25 = *(void (**)(_QWORD *__return_ptr, unint64_t))(*v22 + 104);
          swift_retain();
          v25(v41, v21);
          v24 = v34;
        }
        outlined init with take of TableRowID((uint64_t)v41, (uint64_t)v37);
        outlined consume of ResolvedTableRowIDs.Storage((uint64_t)v22, v23);
        result = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v42, (uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
        v26 = v12 + 1;
        if (__OFADD__(v12, 1))
          goto LABEL_43;
        v27 = v41[26] + v41[27];
        if (__OFADD__(v41[26], v41[27]))
          goto LABEL_44;
        v28 = *(_QWORD *)(v41[23] + 16);
        if (v28 || (v28 = *(_QWORD *)(v41[22] + 16)) != 0)
        {
          result = (uint64_t)specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(&v36, v41[23], v41[22], v41[28], v27, v28);
          v27 = v36;
        }
        if (v26 == v27)
        {
          v29 = 0;
        }
        else
        {
          if ((v35 & 1) != 0)
            goto LABEL_49;
          v29 = v33 + 1;
          if (__OFADD__(v33, 1))
            goto LABEL_47;
        }
        v30 = v26 == v27;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
        v42[30] = v12 + 1;
        v42[31] = v29;
        LOBYTE(v42[32]) = v30;
        outlined init with take of TableRowID((uint64_t)v37, (uint64_t)v40);
        result = outlined init with take of TableRowID((uint64_t)v40, v24);
        if (v31 - 1 == a3)
          break;
        a2 = v24 + 48;
        v12 = v42[30];
        v13 = v42[31];
        v35 = v42[32];
        ++a3;
        v11 = v42[26] + v42[27];
        if (__OFADD__(v42[26], v42[27]))
          goto LABEL_39;
      }
      a3 = v31;
      goto LABEL_38;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
  }
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, unint64_t a3, _QWORD *a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *__return_ptr, unint64_t);
  BOOL v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD v27[6];
  _BYTE v28[48];
  _OWORD v29[2];
  uint64_t v30;
  char v31;
  _BYTE v32[56];

  v7 = a6 + a7;
  if (__OFADD__(a6, a7))
    goto LABEL_27;
  v11 = result;
  v12 = v7 == a6;
  if (!a2)
  {
    v13 = 0;
    a3 = 0;
    v15 = a6;
LABEL_23:
    *(_QWORD *)v11 = a4;
    *(_BYTE *)(v11 + 8) = a5 & 1;
    *(_QWORD *)(v11 + 16) = a6;
    *(_QWORD *)(v11 + 24) = a7;
    *(_QWORD *)(v11 + 32) = v15;
    *(_QWORD *)(v11 + 40) = v13;
    *(_BYTE *)(v11 + 48) = v12;
    return a3;
  }
  if (!a3)
  {
    v13 = 0;
    v15 = a6;
    goto LABEL_23;
  }
  if ((a3 & 0x8000000000000000) != 0)
    goto LABEL_28;
  v22 = a6 + a7;
  v23 = a6;
  if (v7 == a6)
  {
    v13 = 0;
    v14 = 0;
LABEL_21:
    v30 = 0;
    memset(v29, 0, sizeof(v29));
    v31 = -1;
    outlined destroy of TableRowID?((uint64_t)v29, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    v12 = 1;
    a3 = v14;
    v15 = v22;
    a6 = v23;
    goto LABEL_23;
  }
  v14 = 0;
  v13 = 0;
  v21 = a3;
  v24 = a3 - 1;
  v25 = a6 ^ 0x7FFFFFFFFFFFFFFFLL;
  v16 = a7 - 1;
  v17 = 4;
  while (1)
  {
    if ((a5 & 1) != 0)
    {
      if (v14 >= a4[2])
        goto LABEL_25;
      outlined init with copy of TableRowID((uint64_t)&a4[v17], (uint64_t)v27);
    }
    else
    {
      v18 = *(void (**)(_QWORD *__return_ptr, unint64_t))(*a4 + 104);
      outlined copy of ResolvedTableRowIDs.Storage((uint64_t)a4, 0);
      v18(v27, v14);
      outlined consume of ResolvedTableRowIDs.Storage((uint64_t)a4, 0);
    }
    outlined init with take of TableRowID((uint64_t)v27, (uint64_t)v28);
    result = outlined init with take of TableRowID((uint64_t)v28, (uint64_t)v29);
    if (v25 == v14)
      break;
    v19 = v16 == v14;
    if (v16 == v14)
    {
      v13 = 0;
    }
    else
    {
      if (v12)
        goto LABEL_29;
      if (__OFADD__(v13++, 1))
        goto LABEL_26;
    }
    outlined init with take of TableRowID((uint64_t)v29, (uint64_t)v32);
    result = outlined init with take of TableRowID((uint64_t)v32, a2 + v17 * 8 - 32);
    if (v24 == v14)
    {
      a6 = v23;
      v15 = v23 + v14 + 1;
      v12 = v16 == v14;
      a3 = v21;
      goto LABEL_23;
    }
    ++v14;
    v17 += 6;
    v12 = v19;
    if (a7 == v14)
      goto LABEL_21;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t updated;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _OWORD v32[12];
  unint64_t v33;
  _BYTE v34[17];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[25];

  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
  v7 = *(_QWORD *)(v3 + 192) == 0;
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v3, (uint64_t (*)(_QWORD))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
  *(_QWORD *)v34 = 0;
  *(_QWORD *)&v34[8] = 0;
  v34[16] = v7;
  v45 = v32[10];
  v46 = v32[11];
  v41 = v32[6];
  v42 = v32[7];
  v43 = v32[8];
  v44 = v32[9];
  v37 = v32[2];
  v38 = v32[3];
  v39 = v32[4];
  v40 = v32[5];
  v35 = v32[0];
  v36 = v32[1];
  *(_OWORD *)v47 = v33;
  *(_OWORD *)&v47[9] = *(_OWORD *)&v34[1];
  v29 = a2;
  v27 = a1;
  if (!a2)
    goto LABEL_26;
  if (!a3)
  {
    a2 = 0;
    goto LABEL_26;
  }
  if (a3 < 0)
    goto LABEL_30;
  v9 = v47[24];
  v28 = *(_QWORD *)&v47[8];
  if (*(_QWORD *)&v47[8] == *(_QWORD *)v47 && (v47[24] & 1) != 0)
  {
    a2 = 0;
LABEL_26:
    v21 = v46;
    v27[10] = v45;
    v27[11] = v21;
    v27[12] = *(_OWORD *)v47;
    *(_OWORD *)((char *)v27 + 201) = *(_OWORD *)&v47[9];
    v22 = v42;
    v27[6] = v41;
    v27[7] = v22;
    v23 = v44;
    v27[8] = v43;
    v27[9] = v23;
    v24 = v38;
    v27[2] = v37;
    v27[3] = v24;
    v25 = v40;
    v27[4] = v39;
    v27[5] = v25;
    v26 = v36;
    *v27 = v35;
    v27[1] = v26;
    return a2;
  }
  a2 = 0;
  v10 = *(_QWORD *)&v47[16];
  while (1)
  {
    v30 = v10;
    v11 = v28 + a2;
    v12 = v46;
    v13 = *((_QWORD *)&v37 + 1);
    v31 = v9;
    if (*(_QWORD *)(*((_QWORD *)&v46 + 1) + 16))
    {
      result = swift_bridgeObjectRetain();
LABEL_12:
      MEMORY[0x1E0C80A78](result, v14);
      lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
      swift_getKeyPath();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_n(*((uint64_t *)&v12 + 1), v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release_n();
      v17 = specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(updated, v11);
      result = swift_bridgeObjectRelease();
      if ((v17 & 0x8000000000000000) != 0)
        goto LABEL_24;
      goto LABEL_13;
    }
    v15 = *(_QWORD *)(v46 + 16);
    result = swift_bridgeObjectRetain();
    if (v15)
      goto LABEL_12;
    v17 = v28 + a2;
    if (v11 < 0)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      a2 = a3;
      goto LABEL_26;
    }
LABEL_13:
    if (v17 >= *(_QWORD *)(v13 + 16))
      break;
    outlined init with copy of TableSections.Item(v13 + 96 * v17 + 32, (uint64_t)v32);
    v18 = *(_QWORD *)&v32[0];
    outlined destroy of TableSections.Item((uint64_t)v32);
    swift_bridgeObjectRelease();
    result = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v35, (uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_28;
    v20 = v33;
    if (v19 == v33)
    {
      v10 = 0;
    }
    else
    {
      if ((v31 & 1) != 0)
        goto LABEL_31;
      v10 = v30 + 1;
      if (__OFADD__(v30, 1))
        goto LABEL_29;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
    *(_QWORD *)&v47[8] = v11 + 1;
    *(_QWORD *)&v47[16] = v10;
    v47[24] = v19 == v20;
    *(_QWORD *)(v29 + 8 * a2) = v18;
    if (a3 - 1 == a2)
      goto LABEL_25;
    ++a2;
    v9 = v19 == v20;
    if (v19 == *(_QWORD *)v47)
    {
      v9 = v19 == v20;
      if (v19 == v20)
        goto LABEL_26;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, _BYTE *), uint64_t a6)
{
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  _BYTE v22[96];
  uint64_t v23;

  v9 = result;
  v10 = *(_QWORD *)(a4 + 16);
  v11 = v10 == 0;
  if (!a2)
  {
    a3 = 0;
    *result = a4;
    result[1] = a5;
    result[3] = 0;
    result[4] = 0;
    result[2] = a6;
LABEL_20:
    *((_BYTE *)v9 + 40) = v11;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v13 = 0;
LABEL_19:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a3;
    v9[4] = v13;
    goto LABEL_20;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v12 = *(_QWORD *)(a4 + 16);
    if (!(v12 | v10))
    {
      v13 = 0;
      v14 = 0;
LABEL_17:
      *v9 = a4;
      v9[1] = a5;
      v9[2] = a6;
      v9[3] = v14;
      v9[4] = v13;
      a3 = v14;
      *((_BYTE *)v9 + 40) = 1;
      return (_QWORD *)a3;
    }
    v14 = 0;
    v13 = 0;
    v16 = a4 + 32;
    v20 = a3;
    v21 = a3 - 1;
    while (v14 < v12)
    {
      v17 = v14 + 1;
      outlined init with copy of TableSections.Item(v16, (uint64_t)v22);
      a5(&v23, v22);
      result = (_QWORD *)outlined destroy of TableSections.Item((uint64_t)v22);
      v18 = *(_QWORD *)(a4 + 16);
      if (v14 + 1 == v18)
      {
        v13 = 0;
      }
      else
      {
        if (v11)
          goto LABEL_25;
        if (__OFADD__(v13++, 1))
          goto LABEL_23;
      }
      *(_QWORD *)(a2 + 8 * v14) = v23;
      if (v21 == v14)
      {
        v11 = v17 == v18;
        a3 = v20;
        goto LABEL_19;
      }
      v12 = *(_QWORD *)(a4 + 16);
      ++v14;
      v16 += 96;
      v11 = v17 == v18;
      if (v17 == v12)
      {
        v11 = v17 == v18;
        if (v17 == v18)
          goto LABEL_17;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, MEMORY[0x1E0DEC3C0]);
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PresentationDetent>, (uint64_t)&type metadata for PresentationDetent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * (v5 >> 4);
  v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, (_OWORD *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  void (*v5)(_OWORD *__return_ptr);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t result;
  _OWORD v12[2];
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 64);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  if (v1 > 0)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v3 = (_QWORD *)swift_allocObject();
    v4 = _swift_stdlib_malloc_size(v3);
    v3[2] = v1;
    v3[3] = 2 * ((uint64_t)(v4 - 32) / 40);
    v5 = *(void (**)(_OWORD *__return_ptr))(a1 + 72);
    outlined retain of _ScrollableLayoutProxy(a1);
    v6 = 0;
    v7 = 4;
    do
    {
      v8 = v6 + 1;
      v9 = &v3[v7];
      v5(v12);
      v10 = v12[1];
      *(_OWORD *)v9 = v12[0];
      *((_OWORD *)v9 + 1) = v10;
      v9[4] = v13;
      v7 += 5;
      v6 = v8;
    }
    while (v1 != v8);
    outlined release of _ScrollableLayoutProxy(a1);
    return (uint64_t)v3;
  }
  result = outlined retain of _ScrollableLayoutProxy(a1);
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v2 = specialized Dictionary.startIndex.getter(a1);
  v4 = v3;
  v6 = v5 & 1;
  v7 = specialized Collection.distance(from:to:)(v2, v3, v5 & 1, 1 << *(_BYTE *)(a1 + 32), *(_DWORD *)(a1 + 36), 0, a1);
  outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v2, v4, v6);
  if (!v7)
    return MEMORY[0x1E0DEE9D8];
  if (v7 <= 0)
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SpatialEventCollection.Event>, (uint64_t)&type metadata for SpatialEventCollection.Event, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v8 = (_QWORD *)swift_allocObject();
    v9 = _swift_stdlib_malloc_size(v8);
    v8[2] = v7;
    v8[3] = 2 * ((uint64_t)(v9 - 32) / 80);
  }
  v10 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v12, (uint64_t)(v8 + 4), v7, a1);
  swift_bridgeObjectRetain();
  result = outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
  if (v10 == v7)
    return (uint64_t)v8;
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  _BYTE v7[56];
  _BYTE v8[64];

  v2 = _VariadicView_Children.endIndex.getter();
  result = _VariadicView_Children.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    result = _VariadicView_Children.endIndex.getter();
    if ((v2 & 0x8000000000000000) == 0 && result >= v2)
    {
      if (v2)
      {
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Subview>, (uint64_t)&type metadata for Subview, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v4 = swift_allocObject();
        v5 = _swift_stdlib_malloc_size((const void *)v4);
        *(_QWORD *)(v4 + 16) = v2;
        *(_QWORD *)(v4 + 24) = 2 * ((uint64_t)(v5 - 32) / 96);
        outlined init with copy of SubviewsCollection(a1, (uint64_t)v7);
        v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v8, (_OWORD *)(v4 + 32), v2, (void (*)(__int128 *, _BYTE *))outlined init with copy of SubviewsCollection, (void (*)(_BYTE *))outlined destroy of SubviewsCollection);
        outlined destroy of IndexingIterator<SubviewsCollection>((uint64_t)v8, &lazy cache variable for type metadata for IndexingIterator<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection);
        if (v6 == v2)
          return v4;
        __break(1u);
      }
      return MEMORY[0x1E0DEE9D8];
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  _BYTE v7[56];
  _BYTE v8[64];

  v2 = _VariadicView_Children.endIndex.getter();
  result = _VariadicView_Children.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    result = _VariadicView_Children.endIndex.getter();
    if ((v2 & 0x8000000000000000) == 0 && result >= v2)
    {
      if (v2)
      {
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Subview>, (uint64_t)&type metadata for Subview, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v4 = swift_allocObject();
        v5 = _swift_stdlib_malloc_size((const void *)v4);
        *(_QWORD *)(v4 + 16) = v2;
        *(_QWORD *)(v4 + 24) = 2 * ((uint64_t)(v5 - 32) / 96);
        outlined init with copy of SubviewCollection(a1, (uint64_t)v7);
        v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v8, (_OWORD *)(v4 + 32), v2, (void (*)(__int128 *, _BYTE *))outlined init with copy of SubviewCollection, (void (*)(_BYTE *))outlined destroy of SubviewCollection);
        outlined destroy of IndexingIterator<SubviewsCollection>((uint64_t)v8, &lazy cache variable for type metadata for IndexingIterator<SubviewCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewCollection and conformance SubviewCollection, (uint64_t)&type metadata for SubviewCollection);
        if (v6 == v2)
          return v4;
        __break(1u);
      }
      return MEMORY[0x1E0DEE9D8];
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 88);
  v3 = ((uint64_t (*)(uint64_t))v2)(a1);
  v4 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 96);
  v5 = v4();
  v6 = v2();
  result = v4();
  if (v3 < v6 || result < v3)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v9 = ((uint64_t (*)(uint64_t))v2)(result);
  result = v4();
  if (v5 < v9 || result < v5)
    goto LABEL_18;
  v11 = __OFSUB__(v5, v3);
  v12 = v5 - v3;
  if (v11)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v12)
    return MEMORY[0x1E0DEE9D8];
  if (v12 <= 0)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableColumnID>, (uint64_t)&type metadata for TableColumnID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v12;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  swift_retain();
  v15 = specialized Sequence._copySequenceContents(initializing:)(&v16, (uint64_t)(v13 + 4), v12);
  result = swift_release();
  if (v15 == v12)
    return (uint64_t)v13;
LABEL_20:
  __break(1u);
  return result;
}

{
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 88);
  v3 = ((uint64_t (*)(uint64_t))v2)(a1);
  v4 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 96);
  v5 = v4();
  v6 = v2();
  result = v4();
  if (v3 < v6 || result < v3)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v9 = ((uint64_t (*)(uint64_t))v2)(result);
  result = v4();
  if (v5 < v9 || result < v5)
    goto LABEL_18;
  v11 = __OFSUB__(v5, v3);
  v12 = v5 - v3;
  if (v11)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v12)
    return MEMORY[0x1E0DEE9D8];
  if (v12 <= 0)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableRowID>, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v12;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 48);
  }
  swift_retain();
  v15 = specialized Sequence._copySequenceContents(initializing:)(&v16, (uint64_t)(v13 + 4), v12);
  result = swift_release();
  if (v15 == v12)
    return (uint64_t)v13;
LABEL_20:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[240];
  _BYTE v8[264];

  v1 = *(_QWORD *)(a1 + 232);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  if (v1 <= 0)
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableRowID>, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v3 = (_QWORD *)swift_allocObject();
    v4 = _swift_stdlib_malloc_size(v3);
    v3[2] = v1;
    v3[3] = 2 * ((uint64_t)(v4 - 32) / 48);
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
  v5 = specialized Sequence._copySequenceContents(initializing:)(v8, (uint64_t)(v3 + 4), v1);
  result = outlined destroy of DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>((uint64_t)v8, &lazy cache variable for type metadata for IndexingIterator<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, (uint64_t (*)(uint64_t))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>, &lazy protocol witness table cache variable for type CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>> and conformance CountingIndexCollection<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC8F8]);
  if (v5 == v1)
    return (uint64_t)v3;
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _BYTE v8[200];
  _OWORD v9[14];

  v1 = *(_QWORD *)(a1 + 192);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  if (v1 <= 0)
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v3 = (_QWORD *)swift_allocObject();
    v4 = _swift_stdlib_malloc_size(v3);
    v5 = v4 - 32;
    if (v4 < 32)
      v5 = v4 - 25;
    v3[2] = v1;
    v3[3] = 2 * (v5 >> 3);
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
  v6 = specialized Sequence._copySequenceContents(initializing:)(v9, (uint64_t)(v3 + 4), v1);
  result = outlined destroy of DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>((uint64_t)v9, &lazy cache variable for type metadata for IndexingIterator<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>, (uint64_t (*)(uint64_t))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>, (unint64_t *)&lazy protocol witness table cache variable for type CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>> and conformance CountingIndexCollection<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC8F8]);
  if (v6 == v1)
    return (uint64_t)v3;
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  _BYTE v7[72];
  _OWORD v8[5];

  v1 = result[1];
  v2 = v1 - *result;
  if (v1 < *result)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (__OFSUB__(v1, *result))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v3 = (uint64_t)result;
  if (v2 <= 0)
  {
    v4 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Subview>, (uint64_t)&type metadata for Subview, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v4 = swift_allocObject();
    v5 = _swift_stdlib_malloc_size((const void *)v4);
    *(_QWORD *)(v4 + 16) = v2;
    *(_QWORD *)(v4 + 24) = 2 * ((uint64_t)(v5 - 32) / 96);
  }
  outlined init with copy of SubviewsCollectionSlice(v3, (uint64_t)v7);
  v6 = specialized Sequence._copySequenceContents(initializing:)(v8, (_OWORD *)(v4 + 32), v2);
  result = (_QWORD *)outlined destroy of IndexingIterator<SubviewsCollection>((uint64_t)v8, &lazy cache variable for type metadata for IndexingIterator<SubviewsCollectionSlice>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice, (uint64_t)&type metadata for SubviewsCollectionSlice);
  if (v6 == v2)
    return (_QWORD *)v4;
LABEL_12:
  __break(1u);
  return result;
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, char a2)
{
  int v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  size_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v3 = a2 & 1;
  v4 = specialized Collection.count.getter(a1, a2 & 1);
  if (!v4)
    return MEMORY[0x1E0DEE9D8];
  v5 = v4;
  if (v4 <= 0)
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_11:
    v12 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlatformItemList.Item() - 8) + 80);
    v13 = (uint64_t)v9 + ((v12 + 32) & ~v12);
    outlined copy of PlatformItemCollection.Storage(a1, v3);
    specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v16, v13, v5, a1, v3);
    v15 = v14;
    result = outlined consume of PlatformItemCollection.Storage(v16, v17);
    if (v15 == v5)
      return (size_t)v9;
    __break(1u);
    goto LABEL_14;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v6 = *(_QWORD *)(type metadata accessor for PlatformItemList.Item() - 8);
  v7 = *(_QWORD *)(v6 + 72);
  v8 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v9 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v9);
  if (v7)
  {
    if (result - v8 == 0x8000000000000000 && v7 == -1)
      goto LABEL_15;
    v9[2] = v5;
    v9[3] = 2 * ((uint64_t)(result - v8) / v7);
    goto LABEL_11;
  }
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  size_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  __int128 v20[2];
  char v21;

  outlined init with copy of TableColumnCollection.Backing(a1, (uint64_t)v20);
  if ((v21 & 1) != 0)
  {
    v2 = *(_QWORD *)(*(_QWORD *)&v20[0] + 16);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v20, (uint64_t)v17);
    v3 = v18;
    v4 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  v5 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2);
  if (!v5)
    return MEMORY[0x1E0DEE9D8];
  v6 = v5;
  if (v5 <= 0)
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_14:
    v13 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TableColumnCollection.Entry(0) - 8) + 80);
    v14 = (uint64_t)v10 + ((v13 + 32) & ~v13);
    outlined init with copy of TableColumnCollection(a1, (uint64_t)v17);
    specialized Sequence._copySequenceContents(initializing:)(v20, v14, v6);
    v16 = v15;
    result = outlined destroy of IndexingIterator<SubviewsCollection>((uint64_t)v20, &lazy cache variable for type metadata for IndexingIterator<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection);
    if (v16 == v6)
      return (size_t)v10;
    __break(1u);
    goto LABEL_17;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableColumnCollection.Entry>, type metadata accessor for TableColumnCollection.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v7 = *(_QWORD *)(type metadata accessor for TableColumnCollection.Entry(0) - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v10 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v10);
  if (v8)
  {
    if (result - v9 == 0x8000000000000000 && v8 == -1)
      goto LABEL_18;
    v10[2] = v6;
    v10[3] = 2 * ((uint64_t)(result - v9) / v8);
    goto LABEL_14;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  size_t result;
  uint64_t v17;
  uint64_t v18;

  v2 = type metadata accessor for _ArchivedViewStates(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<_ArchivedViewStates>();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + *(int *)(v2 + 20) + 8) + 16);
  if (!v10)
    return MEMORY[0x1E0DEE9D8];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ArchivedView>, type metadata accessor for _ArchivedView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = *(_QWORD *)(type metadata accessor for _ArchivedView(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v14 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v14);
  if (v12)
  {
    if (result - v13 != 0x8000000000000000 || v12 != -1)
    {
      v14[2] = v10;
      v14[3] = 2 * ((uint64_t)(result - v13) / v12);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v5, type metadata accessor for _ArchivedViewStates);
      v17 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v9, (uint64_t)v14 + v13, v10);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<_ArchivedViewStates>);
      if (v17 == v10)
        return (size_t)v14;
      __break(1u);
      return MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DateComponents>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = *(_QWORD *)(type metadata accessor for DateComponents() - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      swift_bridgeObjectRetain();
      specialized Sequence._copySequenceContents(initializing:)(&v11, (char *)v6 + v5, v1, a1);
      v10 = v9;
      outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
      if (v10 == v1)
        return (size_t)v6;
      __break(1u);
      return MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  size_t v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;

  if (!a4)
    return MEMORY[0x1E0DEE9D8];
  if (a4 <= 0)
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableRowID>, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v8 = (_QWORD *)swift_allocObject();
    v9 = _swift_stdlib_malloc_size(v8);
    v8[2] = a4;
    v8[3] = 2 * ((uint64_t)(v9 - 32) / 48);
  }
  v10 = a2 & 1;
  outlined copy of ResolvedTableRowIDs.Storage((uint64_t)a1, v10);
  v11 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v13, (uint64_t)(v8 + 4), a4, a1, v10, a3, a4);
  result = outlined consume of ResolvedTableRowIDs.Storage(v13, v14);
  if (v11 == a4)
    return (uint64_t)v8;
  __break(1u);
  return result;
}

{
  _QWORD *v8;
  size_t v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;

  if (!a4)
    return MEMORY[0x1E0DEE9D8];
  if (a4 <= 0)
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableRowID>, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v8 = (_QWORD *)swift_allocObject();
    v9 = _swift_stdlib_malloc_size(v8);
    v8[2] = a4;
    v8[3] = 2 * ((uint64_t)(v9 - 32) / 48);
  }
  v10 = a2 & 1;
  outlined copy of ResolvedTableRowIDs.Storage((uint64_t)a1, v10);
  v11 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v13, (uint64_t)(v8 + 4), a4, a1, v10, a3, a4);
  result = outlined consume of ResolvedTableRowIDs.Storage(v13, v14);
  if (v11 == a4)
    return (uint64_t)v8;
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  if (!v2)
  {
    v9 = 0;
    goto LABEL_5;
  }
  v3 = result + 48 * v2;
  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  v6 = __OFADD__(v4, v5);
  v7 = v4 + v5;
  if (v6)
  {
    __break(1u);
    goto LABEL_17;
  }
  v8 = *(_QWORD *)(result + 72);
  if (v7 < v8)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v9 = v7 - v8;
  if (__OFSUB__(v7, v8))
  {
    __break(1u);
    return MEMORY[0x1E0DEE9D8];
  }
LABEL_5:
  if (!v9)
    return MEMORY[0x1E0DEE9D8];
  if (v9 <= 0)
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID.Canonical>, MEMORY[0x1E0CE1C78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v9;
    v10[3] = 2 * (v12 >> 4);
  }
  swift_bridgeObjectRetain();
  v13 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v14, v10 + 4, v9, v1);
  result = swift_bridgeObjectRelease();
  if (v13 == v9)
    return (uint64_t)v10;
LABEL_18:
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
    if ((v4 & 0x8000000000000000) == 0 && result >= v4)
    {
      if (v4)
      {
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID>, MEMORY[0x1E0CE1C98], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v6 = (_QWORD *)swift_allocObject();
        v7 = _swift_stdlib_malloc_size(v6);
        v8 = v7 - 32;
        if (v7 < 32)
          v8 = v7 - 17;
        v6[2] = v4;
        v6[3] = 2 * (v8 >> 4);
        swift_retain();
        swift_bridgeObjectRetain();
        v9 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v10, v6 + 4, v4, a1, a2);
        swift_bridgeObjectRelease();
        swift_release();
        if (v9 == v4)
          return (uint64_t)v6;
        __break(1u);
      }
      return MEMORY[0x1E0DEE9D8];
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;

  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_3;
  }
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if ((v2 & 0x8000000000000000) == 0)
  {
LABEL_3:
    if (v2)
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v3 = (_QWORD *)swift_allocObject();
      v4 = _swift_stdlib_malloc_size(v3);
      v3[2] = v2;
      v3[3] = 2 * ((uint64_t)(v4 - 32) / 56);
      swift_bridgeObjectRetain();
      v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (uint64_t)(v3 + 4), v2, a1);
      swift_bridgeObjectRelease();
      if (v5 == v2)
        return (uint64_t)v3;
      __break(1u);
    }
    return MEMORY[0x1E0DEE9D8];
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;

  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_3;
  }
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if ((v2 & 0x8000000000000000) == 0)
  {
LABEL_3:
    if (v2)
    {
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Hashable>, (unint64_t *)&lazy cache variable for type metadata for Hashable, MEMORY[0x1E0DEA1D8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v3 = (_QWORD *)swift_allocObject();
      v4 = _swift_stdlib_malloc_size(v3);
      v3[2] = v2;
      v3[3] = 2 * ((uint64_t)(v4 - 32) / 40);
      swift_bridgeObjectRetain();
      v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (uint64_t)(v3 + 4), v2, a1);
      swift_bridgeObjectRelease();
      if (v5 == v2)
        return (uint64_t)v3;
      __break(1u);
    }
    return MEMORY[0x1E0DEE9D8];
  }
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a3 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItem>, (uint64_t)&type metadata for PlatformItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v7 = (_QWORD *)swift_allocObject();
  v8 = _swift_stdlib_malloc_size(v7);
  v7[2] = v3;
  v7[3] = 2 * ((uint64_t)(v8 - 32) / 336);
  v9 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v11, (uint64_t)(v7 + 4), v3, a1, a2, a3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v9 != v3)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v7;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, void (*a2)(_QWORD *, uint64_t, unint64_t))
{
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, uint64_t, unint64_t);

  if (a1 >> 62)
    goto LABEL_10;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v4 <= 0)
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v5 = (_QWORD *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(_QWORD *, uint64_t, unint64_t))v4)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4)
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v5;
}

unint64_t specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a3 + 16);
  if (v4 >= result && v4 >= a2)
  {
    v7 = result;
    v8 = a2 - result;
    if (a2 == result)
      return MEMORY[0x1E0DEE9D8];
    if (v8 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationViewDestinationView>, (uint64_t)&type metadata for NavigationViewDestinationView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v9 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v9);
      v9[2] = v8;
      v9[3] = 2 * ((uint64_t)(v12 - 32) / 56);
    }
    v13 = specialized Slice._copyContents(initializing:)(&v14, (uint64_t)(v9 + 4), v8, v7, a2, a3, a4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v13 != (_QWORD *)v8)
      goto LABEL_13;
    return (unint64_t)v9;
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result, uint64_t (*a2)(uint64_t *, _QWORD *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  size_t v10;
  _QWORD *v11;
  unint64_t v12[2];

  v3 = *(_QWORD *)(result + 16);
  v12[0] = 0;
  if (v3)
  {
    v6 = result;
    v7 = 0;
    while (1)
    {
      v8 = v7 + 1;
      if (__OFADD__(v7, 1))
        break;
      result = (uint64_t)specialized CoalescingAdjacentDuplicates.formIndex(after:)(v12, v6, a2);
      ++v7;
      if (v12[0] == v3)
      {
        if (!v8)
          return MEMORY[0x1E0DEE9D8];
        if (v8 <= 0)
        {
          v9 = (uint64_t *)MEMORY[0x1E0DEE9D8];
        }
        else
        {
          type metadata accessor for _ContiguousArrayStorage<SliderMark<Double>>();
          v9 = (uint64_t *)swift_allocObject();
          v10 = _swift_stdlib_malloc_size(v9);
          v9[2] = v8;
          v9[3] = 2 * ((uint64_t)(v10 - 32) / 40);
        }
        swift_bridgeObjectRetain();
        swift_retain();
        v11 = specialized Sequence._copySequenceContents(initializing:)(v12, v9 + 4, v8, v6, a2, a3);
        swift_bridgeObjectRelease();
        result = swift_release();
        if (v11 == (_QWORD *)v8)
          return (uint64_t)v9;
LABEL_13:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  return MEMORY[0x1E0DEE9D8];
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  size_t v8;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_9:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      if (v4 != a3)
        goto LABEL_5;
    }
    else
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DocumentLaunchScreenAction>, (uint64_t)&type metadata for DocumentLaunchScreenAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v7 = (_QWORD *)swift_allocObject();
      v8 = _swift_stdlib_malloc_size(v7);
      v7[2] = v5;
      v7[3] = 2 * ((uint64_t)(v8 - 32) / 48);
      if (v4 != a3)
      {
LABEL_5:
        swift_arrayInitWithCopy();
        return;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
}

{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      if (v4 != a3)
      {
LABEL_7:
        type metadata accessor for UIMenuElement();
        swift_arrayInitWithCopy();
        return;
      }
    }
    else
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v7 = (_QWORD *)swift_allocObject();
      v8 = _swift_stdlib_malloc_size(v7);
      v9 = v8 - 32;
      if (v8 < 32)
        v9 = v8 - 25;
      v7[2] = v5;
      v7[3] = (2 * (v9 >> 3)) | 1;
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_11;
  }
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, void (*a2)(uint64_t *__return_ptr, _BYTE *), uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v7 = (_QWORD *)swift_allocObject();
  v8 = _swift_stdlib_malloc_size(v7);
  v9 = v8 - 32;
  if (v8 < 32)
    v9 = v8 - 25;
  v7[2] = v3;
  v7[3] = 2 * (v9 >> 3);
  swift_bridgeObjectRetain();
  swift_retain();
  v10 = specialized Sequence._copySequenceContents(initializing:)(&v12, (uint64_t)(v7 + 4), v3, a1, a2, a3);
  swift_release();
  swift_bridgeObjectRelease();
  if (v10 != (_QWORD *)v3)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v7;
}

unint64_t lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutPrefetchLogging, &type metadata for EnableLazyLayoutPrefetchLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutPrefetchLogging, &type metadata for EnableLazyLayoutPrefetchLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutPrefetchLogging, &type metadata for EnableLazyLayoutPrefetchLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutPrefetchLogging, &type metadata for EnableLazyLayoutPrefetchLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutPrefetchLogging, &type metadata for EnableLazyLayoutPrefetchLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutPrefetchLogging, &type metadata for EnableLazyLayoutPrefetchLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutPrefetchLogging, &type metadata for EnableLazyLayoutPrefetchLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutPrefetchLogging, &type metadata for EnableLazyLayoutPrefetchLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging);
  }
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  Swift::Int v16;
  uint64_t v17;
  Swift::Int v18;
  unint64_t v19;
  Swift::Int v20;
  int v21;
  int v22;
  int v23;
  uint64_t *v24;
  Swift::Int v25;
  Swift::Int v26;
  uint64_t *v27;
  uint64_t v28;
  Swift::Int v29;
  _QWORD *v30;
  uint64_t v31;
  Swift::Int v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  uint64_t *v117;
  Swift::Int v118;
  Swift::Int v119;
  uint64_t v120;
  Swift::Int v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *__dst;
  char *v126;
  char *v127;
  unint64_t v128;
  int64_t v129;
  uint64_t v130;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
    {
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      __break(1u);
LABEL_191:
      __break(1u);
LABEL_192:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_193;
    }
    if ((unint64_t)v3 >= 2)
    {
      v9 = 0;
      v10 = *a1;
      for (i = 1; i != v3; ++i)
      {
        v12 = *(_QWORD *)(v10 + 8 * i);
        v13 = v9;
        do
        {
          v14 = *(_QWORD *)(v10 + v13);
          if (*(_DWORD *)(v12 + 184) - *(_DWORD *)(v14 + 184) >= 0)
            break;
          if (!v10)
            goto LABEL_188;
          *(_QWORD *)(v10 + v13 + 8) = v14;
          *(_QWORD *)(v10 + v13) = v12;
          v13 -= 8;
        }
        while (v13 != -8);
        v9 += 8;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
    {
LABEL_193:
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v117 = a1;
    v118 = result;
    v120 = v1;
    if (v3 >= 2)
    {
      v6 = v5 >> 1;
      type metadata accessor for IncrementalLayoutCacheItem();
      v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
      v8 = (char *)((v7 & 0xFFFFFFFFFFFFFF8) + 32);
      v130 = v7;
      goto LABEL_18;
    }
    v15 = (char *)MEMORY[0x1E0DEE9D8];
    v130 = MEMORY[0x1E0DEE9D8];
    v8 = (char *)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 == 1)
    {
LABEL_18:
      v16 = 0;
      v17 = *a1;
      v122 = v17 - 8;
      v15 = (char *)MEMORY[0x1E0DEE9D8];
      v18 = v3;
      v119 = v3;
      __dst = v8;
      while (1)
      {
        v20 = v16 + 1;
        if (v16 + 1 < v18)
        {
          v21 = *(_DWORD *)(*(_QWORD *)(v17 + 8 * v20) + 184);
          v22 = v21 - *(_DWORD *)(*(_QWORD *)(v17 + 8 * v16) + 184);
          v20 = v16 + 2;
          if (v16 + 2 < v18)
          {
            while (1)
            {
              v23 = *(_DWORD *)(*(_QWORD *)(v17 + 8 * v20) + 184);
              if (((v23 - v21) ^ v22) < 0)
                break;
              ++v20;
              v21 = v23;
              if (v18 == v20)
              {
                v20 = v18;
                break;
              }
            }
          }
          if (v22 < 0)
          {
            if (v20 < v16)
              goto LABEL_185;
            if (v16 < v20)
            {
              v24 = (uint64_t *)(v122 + 8 * v20);
              v25 = v20;
              v26 = v16;
              v27 = (uint64_t *)(v17 + 8 * v16);
              do
              {
                if (v26 != --v25)
                {
                  if (!v17)
                    goto LABEL_190;
                  v28 = *v27;
                  *v27 = *v24;
                  *v24 = v28;
                }
                ++v26;
                --v24;
                ++v27;
              }
              while (v26 < v25);
            }
          }
        }
        if (v20 < v18)
        {
          if (__OFSUB__(v20, v16))
            goto LABEL_178;
          if (v20 - v16 < v118)
          {
            v29 = v16 + v118;
            if (__OFADD__(v16, v118))
              goto LABEL_183;
            if (v29 >= v18)
              v29 = v18;
            if (v29 < v16)
              goto LABEL_184;
            if (v20 != v29)
            {
              v30 = (_QWORD *)(v122 + 8 * v20);
              do
              {
                v31 = *(_QWORD *)(v17 + 8 * v20);
                v32 = v16;
                v33 = v30;
                do
                {
                  v34 = *v33;
                  if (*(_DWORD *)(v31 + 184) - *(_DWORD *)(*v33 + 184) >= 0)
                    break;
                  if (!v17)
                    goto LABEL_186;
                  *v33 = v31;
                  v33[1] = v34;
                  --v33;
                  ++v32;
                }
                while (v20 != v32);
                ++v20;
                ++v30;
              }
              while (v20 != v29);
              v20 = v29;
            }
          }
        }
        if (v20 < v16)
          goto LABEL_177;
        v121 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v15 + 2) + 1, 1, v15);
        v8 = __dst;
        v36 = *((_QWORD *)v15 + 2);
        v35 = *((_QWORD *)v15 + 3);
        v19 = v36 + 1;
        if (v36 >= v35 >> 1)
        {
          v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v15);
          v8 = __dst;
          v15 = v109;
        }
        *((_QWORD *)v15 + 2) = v19;
        v37 = v15 + 32;
        v38 = &v15[16 * v36 + 32];
        *(_QWORD *)v38 = v16;
        *((_QWORD *)v38 + 1) = v121;
        if (v36)
          break;
        v19 = 1;
LABEL_20:
        v18 = v119;
        v16 = v121;
        if (v121 >= v119)
          goto LABEL_149;
      }
      v123 = v15 + 32;
      v124 = v15;
      while (1)
      {
        v39 = v19 - 1;
        if (v19 >= 4)
        {
          v44 = &v37[16 * v19];
          v45 = *((_QWORD *)v44 - 8);
          v46 = *((_QWORD *)v44 - 7);
          v50 = __OFSUB__(v46, v45);
          v47 = v46 - v45;
          if (v50)
            goto LABEL_166;
          v49 = *((_QWORD *)v44 - 6);
          v48 = *((_QWORD *)v44 - 5);
          v50 = __OFSUB__(v48, v49);
          v42 = v48 - v49;
          v43 = v50;
          if (v50)
            goto LABEL_167;
          v51 = v19 - 2;
          v52 = &v37[16 * v19 - 32];
          v54 = *(_QWORD *)v52;
          v53 = *((_QWORD *)v52 + 1);
          v50 = __OFSUB__(v53, v54);
          v55 = v53 - v54;
          if (v50)
            goto LABEL_169;
          v50 = __OFADD__(v42, v55);
          v56 = v42 + v55;
          if (v50)
            goto LABEL_172;
          if (v56 >= v47)
          {
            v74 = &v37[16 * v39];
            v76 = *(_QWORD *)v74;
            v75 = *((_QWORD *)v74 + 1);
            v50 = __OFSUB__(v75, v76);
            v77 = v75 - v76;
            if (v50)
              goto LABEL_176;
            v67 = v42 < v77;
            goto LABEL_89;
          }
        }
        else
        {
          if (v19 != 3)
          {
            v68 = *((_QWORD *)v15 + 4);
            v69 = *((_QWORD *)v15 + 5);
            v50 = __OFSUB__(v69, v68);
            v61 = v69 - v68;
            v62 = v50;
            goto LABEL_83;
          }
          v41 = *((_QWORD *)v15 + 4);
          v40 = *((_QWORD *)v15 + 5);
          v50 = __OFSUB__(v40, v41);
          v42 = v40 - v41;
          v43 = v50;
        }
        if ((v43 & 1) != 0)
          goto LABEL_168;
        v51 = v19 - 2;
        v57 = &v37[16 * v19 - 32];
        v59 = *(_QWORD *)v57;
        v58 = *((_QWORD *)v57 + 1);
        v60 = __OFSUB__(v58, v59);
        v61 = v58 - v59;
        v62 = v60;
        if (v60)
          goto LABEL_171;
        v63 = &v37[16 * v39];
        v65 = *(_QWORD *)v63;
        v64 = *((_QWORD *)v63 + 1);
        v50 = __OFSUB__(v64, v65);
        v66 = v64 - v65;
        if (v50)
          goto LABEL_174;
        if (__OFADD__(v61, v66))
          goto LABEL_175;
        if (v61 + v66 >= v42)
        {
          v67 = v42 < v66;
LABEL_89:
          if (v67)
            v39 = v51;
          goto LABEL_91;
        }
LABEL_83:
        if ((v62 & 1) != 0)
          goto LABEL_170;
        v70 = &v37[16 * v39];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        v50 = __OFSUB__(v71, v72);
        v73 = v71 - v72;
        if (v50)
          goto LABEL_173;
        if (v73 < v61)
          goto LABEL_20;
LABEL_91:
        if (v39 - 1 >= v19)
        {
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
          goto LABEL_179;
        }
        if (!v17)
          goto LABEL_189;
        v128 = v39 - 1;
        v127 = &v37[16 * v39 - 16];
        v78 = *(_QWORD *)v127;
        v129 = v39;
        v79 = &v37[16 * v39];
        v81 = *(_QWORD *)v79;
        v80 = *((_QWORD *)v79 + 1);
        v126 = v79;
        v82 = (char *)(v17 + 8 * *(_QWORD *)v127);
        v83 = (char *)(v17 + 8 * *(_QWORD *)v79);
        v84 = v17;
        v85 = v17 + 8 * v80;
        v86 = v83 - v82;
        v87 = v83 - v82 + 7;
        if (v83 - v82 >= 0)
          v87 = v83 - v82;
        v88 = v87 >> 3;
        v89 = v85 - (_QWORD)v83;
        v90 = v85 - (_QWORD)v83 + 7;
        if ((uint64_t)(v85 - (_QWORD)v83) >= 0)
          v90 = v85 - (_QWORD)v83;
        v91 = v90 >> 3;
        if (v88 >= v90 >> 3)
        {
          if (v89 < -7)
            goto LABEL_192;
          if ((unint64_t)v8 >= v85 || v8 != v83)
          {
            v97 = v80;
            memmove(v8, v83, 8 * v91);
            v80 = v97;
            v8 = __dst;
          }
          v93 = &v8[8 * v91];
          if (v78 >= v81 || v89 < 8)
          {
            v94 = v8;
            v17 = v84;
            goto LABEL_137;
          }
          v98 = (char *)(v122 + 8 * v80);
          v99 = v83;
          v17 = v84;
          while (2)
          {
            v100 = v98 + 8;
            v102 = *((_QWORD *)v99 - 1);
            v99 -= 8;
            v101 = v102;
            if (*(_DWORD *)(*((_QWORD *)v93 - 1) + 184) - *(_DWORD *)(v102 + 184) < 0)
            {
              if (v100 != v83 || v98 >= v83)
                goto LABEL_130;
            }
            else
            {
              v101 = *((_QWORD *)v93 - 1);
              v99 = v83;
              if (v100 == v93)
              {
                v103 = v98 >= v93;
                v93 -= 8;
                if (!v103)
                  goto LABEL_131;
              }
              else
              {
                v93 -= 8;
              }
LABEL_130:
              *(_QWORD *)v98 = v101;
            }
LABEL_131:
            if (v82 >= v99 || (v98 -= 8, v83 = v99, v8 >= v93))
            {
              v94 = v8;
              v83 = v99;
              goto LABEL_137;
            }
            continue;
          }
        }
        if (v86 < -7)
          goto LABEL_192;
        v17 = v84;
        if (v8 != v82 || v8 >= v83)
        {
          v92 = v80;
          memmove(v8, v82, 8 * v88);
          v80 = v92;
          v8 = __dst;
        }
        v93 = &v8[8 * v88];
        if (v81 < v80 && v86 >= 8)
        {
          v94 = v8;
          while (1)
          {
            v95 = *(_QWORD *)v83;
            if (*(_DWORD *)(*(_QWORD *)v83 + 184) - *(_DWORD *)(*(_QWORD *)v94 + 184) >= 0)
              break;
            v96 = v82 == v83;
            v83 += 8;
            if (!v96)
              goto LABEL_107;
LABEL_108:
            v82 += 8;
            if (v94 >= v93 || (unint64_t)v83 >= v85)
              goto LABEL_135;
          }
          v95 = *(_QWORD *)v94;
          v96 = v82 == v94;
          v94 += 8;
          if (v96)
            goto LABEL_108;
LABEL_107:
          *(_QWORD *)v82 = v95;
          goto LABEL_108;
        }
        v94 = v8;
LABEL_135:
        v83 = v82;
LABEL_137:
        v104 = v93 - v94;
        v105 = v93 - v94 + 7;
        if (v104 >= 0)
          v105 = v104;
        if (v104 <= -8)
          goto LABEL_192;
        v106 = v105 >> 3;
        if (v83 != v94 || v83 >= &v94[8 * v106])
        {
          v107 = v80;
          memmove(v83, v94, 8 * v106);
          v80 = v107;
        }
        if (v80 < v78)
          goto LABEL_163;
        v15 = v124;
        if (v129 > *((_QWORD *)v124 + 2))
          goto LABEL_164;
        *(_QWORD *)v127 = v78;
        v37 = v123;
        *(_QWORD *)&v123[16 * v128 + 8] = v80;
        v108 = *((_QWORD *)v124 + 2);
        if (v129 >= (uint64_t)v108)
          goto LABEL_165;
        v19 = v108 - 1;
        memmove(v126, v126 + 16, 16 * (v108 - 1 - v129));
        *((_QWORD *)v124 + 2) = v108 - 1;
        v8 = __dst;
        if (v108 <= 2)
          goto LABEL_20;
      }
    }
    v19 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_149:
    if (v19 >= 2)
    {
      v110 = *v117;
      while (1)
      {
        v111 = v19 - 2;
        if (v19 < 2)
          break;
        if (!v110)
          goto LABEL_191;
        v112 = v8;
        v113 = *(_QWORD *)&v15[16 * v111 + 32];
        v114 = *(_QWORD *)&v15[16 * v19 + 24];
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v110 + 8 * v113), (char *)(v110 + 8 * *(_QWORD *)&v15[16 * v19 + 16]), v110 + 8 * v114, v8);
        if (v120)
          goto LABEL_160;
        if (v114 < v113)
          goto LABEL_180;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v15 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v15);
        if (v111 >= *((_QWORD *)v15 + 2))
          goto LABEL_181;
        v115 = &v15[16 * v111 + 32];
        *(_QWORD *)v115 = v113;
        *((_QWORD *)v115 + 1) = v114;
        v116 = *((_QWORD *)v15 + 2);
        if (v19 > v116)
          goto LABEL_182;
        memmove(&v15[16 * v19 + 16], &v15[16 * v19 + 32], 16 * (v116 - v19));
        *((_QWORD *)v15 + 2) = v116 - 1;
        v19 = v116 - 1;
        v8 = v112;
        if (v116 <= 2)
          goto LABEL_160;
      }
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
      goto LABEL_187;
    }
LABEL_160:
    swift_bridgeObjectRelease();
    *(_QWORD *)((v130 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
    specialized Array._endMutation()();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  __int128 *v20;
  Swift::Int v21;
  Swift::Int v22;
  __int128 *v23;
  __int128 v24;
  Swift::Int v25;
  double *v26;
  double v27;
  Swift::Int v28;
  double *v29;
  double v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t i;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  Swift::Int v104;
  uint64_t v105;
  double *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v82 = *a1;
      v83 = *a1 + 8;
      v84 = -1;
      for (i = 1; i != v3; ++i)
      {
        v86 = *(double *)(v82 + 16 * i + 8);
        v87 = v84;
        v88 = v83;
        do
        {
          if (v86 > *(double *)v88)
            break;
          if (!v82)
            goto LABEL_141;
          v89 = *(_QWORD *)(v88 + 8);
          *(_OWORD *)(v88 + 8) = *(_OWORD *)(v88 - 8);
          *(_QWORD *)(v88 - 8) = v89;
          *(double *)v88 = v86;
          v88 -= 16;
        }
        while (!__CFADD__(v87++, 1));
        v83 += 16;
        --v84;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v6 = result;
  v100 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    __dst = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v12 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_103:
      v91 = v12;
      v102 = v9;
      if (v13 >= 2)
      {
        v92 = *v100;
        do
        {
          v93 = v13 - 2;
          if (v13 < 2)
            goto LABEL_132;
          if (!v92)
            goto LABEL_145;
          v94 = v91;
          v95 = *(_QWORD *)&v91[16 * v93 + 32];
          v96 = *(_QWORD *)&v91[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v92 + 16 * v95), (double *)(v92 + 16 * *(_QWORD *)&v91[16 * v13 + 16]), v92 + 16 * v96, __dst);
          if (v1)
            break;
          if (v96 < v95)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v94 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v94);
          if (v93 >= *((_QWORD *)v94 + 2))
            goto LABEL_134;
          v97 = &v94[16 * v93 + 32];
          *(_QWORD *)v97 = v95;
          *((_QWORD *)v97 + 1) = v96;
          v98 = *((_QWORD *)v94 + 2);
          if (v13 > v98)
            goto LABEL_135;
          memmove(&v94[16 * v13 + 16], &v94[16 * v13 + 32], 16 * (v98 - v13));
          v91 = v94;
          *((_QWORD *)v94 + 2) = v98 - 1;
          v13 = v98 - 1;
        }
        while (v98 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v102 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v102 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = v5 >> 1;
    type metadata accessor for ClosedRange<CGFloat>();
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v102 = v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v101 = *a1 + 40;
  v99 = *a1 - 16;
  v12 = (char *)MEMORY[0x1E0DEE9D8];
  v103 = v6;
  v104 = v3;
  v105 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(double *)(v11 + 16 * v10 + 8);
      v16 = *(double *)(v11 + 16 * v14 + 8);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (double *)(v101 + 16 * v14);
        v18 = v15;
        while (1)
        {
          v19 = v18;
          v18 = *v17;
          if (v15 <= v16 == *v17 > v19)
            break;
          ++v10;
          v17 += 2;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 <= v16)
      {
        if (v10 < v14)
          goto LABEL_138;
        if (v14 < v10)
        {
          v20 = (__int128 *)(v99 + 16 * v10);
          v21 = v10;
          v22 = v14;
          v23 = (__int128 *)(v11 + 16 * v14);
          do
          {
            if (v22 != --v21)
            {
              if (!v11)
                goto LABEL_144;
              v24 = *v23;
              *v23 = *v20;
              *v20 = v24;
            }
            ++v22;
            --v20;
            ++v23;
          }
          while (v22 < v21);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_136;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v25 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_139;
    if (v25 >= v3)
      v25 = v3;
    if (v25 < v14)
      break;
    if (v10 != v25)
    {
      v26 = (double *)(v11 + 16 * v10);
      do
      {
        v27 = *(double *)(v11 + 16 * v10 + 8);
        v28 = v14;
        v29 = v26;
        do
        {
          if (v27 > *(v29 - 1))
            break;
          if (!v11)
            goto LABEL_142;
          v30 = *v29;
          *(_OWORD *)v29 = *((_OWORD *)v29 - 1);
          *(v29 - 1) = v27;
          *(v29 - 2) = v30;
          v29 -= 2;
          ++v28;
        }
        while (v10 != v28);
        ++v10;
        v26 += 2;
      }
      while (v10 != v25);
      v10 = v25;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v32 = *((_QWORD *)v12 + 2);
    v31 = *((_QWORD *)v12 + 3);
    v13 = v32 + 1;
    v11 = v105;
    if (v32 >= v31 >> 1)
    {
      v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v12);
      v11 = v105;
      v12 = v81;
    }
    *((_QWORD *)v12 + 2) = v13;
    v33 = v12 + 32;
    v34 = &v12[16 * v32 + 32];
    *(_QWORD *)v34 = v14;
    *((_QWORD *)v34 + 1) = v10;
    if (v32)
    {
      while (1)
      {
        v35 = v13 - 1;
        if (v13 >= 4)
        {
          v40 = &v33[16 * v13];
          v41 = *((_QWORD *)v40 - 8);
          v42 = *((_QWORD *)v40 - 7);
          v46 = __OFSUB__(v42, v41);
          v43 = v42 - v41;
          if (v46)
            goto LABEL_120;
          v45 = *((_QWORD *)v40 - 6);
          v44 = *((_QWORD *)v40 - 5);
          v46 = __OFSUB__(v44, v45);
          v38 = v44 - v45;
          v39 = v46;
          if (v46)
            goto LABEL_121;
          v47 = v13 - 2;
          v48 = &v33[16 * v13 - 32];
          v50 = *(_QWORD *)v48;
          v49 = *((_QWORD *)v48 + 1);
          v46 = __OFSUB__(v49, v50);
          v51 = v49 - v50;
          if (v46)
            goto LABEL_123;
          v46 = __OFADD__(v38, v51);
          v52 = v38 + v51;
          if (v46)
            goto LABEL_126;
          if (v52 >= v43)
          {
            v70 = &v33[16 * v35];
            v72 = *(_QWORD *)v70;
            v71 = *((_QWORD *)v70 + 1);
            v46 = __OFSUB__(v71, v72);
            v73 = v71 - v72;
            if (v46)
              goto LABEL_130;
            v63 = v38 < v73;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v64 = *((_QWORD *)v12 + 4);
            v65 = *((_QWORD *)v12 + 5);
            v46 = __OFSUB__(v65, v64);
            v57 = v65 - v64;
            v58 = v46;
            goto LABEL_77;
          }
          v37 = *((_QWORD *)v12 + 4);
          v36 = *((_QWORD *)v12 + 5);
          v46 = __OFSUB__(v36, v37);
          v38 = v36 - v37;
          v39 = v46;
        }
        if ((v39 & 1) != 0)
          goto LABEL_122;
        v47 = v13 - 2;
        v53 = &v33[16 * v13 - 32];
        v55 = *(_QWORD *)v53;
        v54 = *((_QWORD *)v53 + 1);
        v56 = __OFSUB__(v54, v55);
        v57 = v54 - v55;
        v58 = v56;
        if (v56)
          goto LABEL_125;
        v59 = &v33[16 * v35];
        v61 = *(_QWORD *)v59;
        v60 = *((_QWORD *)v59 + 1);
        v46 = __OFSUB__(v60, v61);
        v62 = v60 - v61;
        if (v46)
          goto LABEL_128;
        if (__OFADD__(v57, v62))
          goto LABEL_129;
        if (v57 + v62 >= v38)
        {
          v63 = v38 < v62;
LABEL_83:
          if (v63)
            v35 = v47;
          goto LABEL_85;
        }
LABEL_77:
        if ((v58 & 1) != 0)
          goto LABEL_124;
        v66 = &v33[16 * v35];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v46 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v46)
          goto LABEL_127;
        if (v69 < v57)
          goto LABEL_15;
LABEL_85:
        v74 = v35 - 1;
        if (v35 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11)
          goto LABEL_143;
        v75 = v12;
        v76 = &v33[16 * v74];
        v77 = *(_QWORD *)v76;
        v78 = &v33[16 * v35];
        v79 = *((_QWORD *)v78 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + 16 * *(_QWORD *)v76), (double *)(v11 + 16 * *(_QWORD *)v78), v11 + 16 * v79, __dst);
        if (v1)
          goto LABEL_93;
        if (v79 < v77)
          goto LABEL_117;
        if (v35 > *((_QWORD *)v75 + 2))
          goto LABEL_118;
        *(_QWORD *)v76 = v77;
        *(_QWORD *)&v33[16 * v74 + 8] = v79;
        v80 = *((_QWORD *)v75 + 2);
        if (v35 >= v80)
          goto LABEL_119;
        v12 = v75;
        v13 = v80 - 1;
        memmove(&v33[16 * v35], v78 + 16, 16 * (v80 - 1 - v35));
        *((_QWORD *)v75 + 2) = v80 - 1;
        v11 = v105;
        if (v80 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v103;
    v3 = v104;
    if (v10 >= v104)
    {
      v9 = v102;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  __int128 *v20;
  Swift::Int v21;
  Swift::Int v22;
  __int128 *v23;
  __int128 v24;
  Swift::Int v25;
  uint64_t v26;
  double v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  Swift::Int v104;
  uint64_t v105;
  double *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v82 = *a1;
      v83 = -1;
      v84 = 1;
      v85 = *a1;
      do
      {
        v86 = *(double *)(v82 + 16 * v84);
        v87 = v83;
        v88 = v85;
        do
        {
          if (v86 > *(double *)v88)
            break;
          if (!v82)
            goto LABEL_141;
          v89 = *(_QWORD *)(v88 + 24);
          *(_OWORD *)(v88 + 16) = *(_OWORD *)v88;
          *(double *)v88 = v86;
          *(_QWORD *)(v88 + 8) = v89;
          v88 -= 16;
        }
        while (!__CFADD__(v87++, 1));
        ++v84;
        v85 += 16;
        --v83;
      }
      while (v84 != v3);
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v6 = result;
  v99 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    __dst = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v12 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_103:
      v91 = v12;
      v102 = v9;
      if (v13 >= 2)
      {
        v92 = *v99;
        do
        {
          v93 = v13 - 2;
          if (v13 < 2)
            goto LABEL_132;
          if (!v92)
            goto LABEL_145;
          v94 = v91;
          v95 = *(_QWORD *)&v91[16 * v93 + 32];
          v96 = *(_QWORD *)&v91[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v92 + 16 * v95), (double *)(v92 + 16 * *(_QWORD *)&v91[16 * v13 + 16]), v92 + 16 * v96, __dst);
          if (v1)
            break;
          if (v96 < v95)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v94 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v94);
          if (v93 >= *((_QWORD *)v94 + 2))
            goto LABEL_134;
          v97 = &v94[16 * v93 + 32];
          *(_QWORD *)v97 = v95;
          *((_QWORD *)v97 + 1) = v96;
          v98 = *((_QWORD *)v94 + 2);
          if (v13 > v98)
            goto LABEL_135;
          memmove(&v94[16 * v13 + 16], &v94[16 * v13 + 32], 16 * (v98 - v13));
          v91 = v94;
          *((_QWORD *)v94 + 2) = v98 - 1;
          v13 = v98 - 1;
        }
        while (v98 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v102 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v102 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = v5 >> 1;
    type metadata accessor for ClosedRange<CGFloat>();
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v102 = v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v100 = *a1 - 16;
  v101 = *a1 + 32;
  v12 = (char *)MEMORY[0x1E0DEE9D8];
  v103 = v6;
  v104 = v3;
  v105 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(double *)(v11 + 16 * v10);
      v16 = *(double *)(v11 + 16 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (double *)(v101 + 16 * v14);
        v18 = v15;
        while (1)
        {
          v19 = v18;
          v18 = *v17;
          if (v15 <= v16 == *v17 > v19)
            break;
          ++v10;
          v17 += 2;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 <= v16)
      {
        if (v10 < v14)
          goto LABEL_138;
        if (v14 < v10)
        {
          v20 = (__int128 *)(v100 + 16 * v10);
          v21 = v10;
          v22 = v14;
          v23 = (__int128 *)(v11 + 16 * v14);
          do
          {
            if (v22 != --v21)
            {
              if (!v11)
                goto LABEL_144;
              v24 = *v23;
              *v23 = *v20;
              *v20 = v24;
            }
            ++v22;
            --v20;
            ++v23;
          }
          while (v22 < v21);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_136;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v25 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_139;
    if (v25 >= v3)
      v25 = v3;
    if (v25 < v14)
      break;
    if (v10 != v25)
    {
      v26 = v100 + 16 * v10;
      do
      {
        v27 = *(double *)(v11 + 16 * v10);
        v28 = v14;
        v29 = v26;
        do
        {
          if (v27 > *(double *)v29)
            break;
          if (!v11)
            goto LABEL_142;
          v30 = *(_QWORD *)(v29 + 24);
          *(_OWORD *)(v29 + 16) = *(_OWORD *)v29;
          *(double *)v29 = v27;
          *(_QWORD *)(v29 + 8) = v30;
          v29 -= 16;
          ++v28;
        }
        while (v10 != v28);
        ++v10;
        v26 += 16;
      }
      while (v10 != v25);
      v10 = v25;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v32 = *((_QWORD *)v12 + 2);
    v31 = *((_QWORD *)v12 + 3);
    v13 = v32 + 1;
    v11 = v105;
    if (v32 >= v31 >> 1)
    {
      v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v12);
      v11 = v105;
      v12 = v81;
    }
    *((_QWORD *)v12 + 2) = v13;
    v33 = v12 + 32;
    v34 = &v12[16 * v32 + 32];
    *(_QWORD *)v34 = v14;
    *((_QWORD *)v34 + 1) = v10;
    if (v32)
    {
      while (1)
      {
        v35 = v13 - 1;
        if (v13 >= 4)
        {
          v40 = &v33[16 * v13];
          v41 = *((_QWORD *)v40 - 8);
          v42 = *((_QWORD *)v40 - 7);
          v46 = __OFSUB__(v42, v41);
          v43 = v42 - v41;
          if (v46)
            goto LABEL_120;
          v45 = *((_QWORD *)v40 - 6);
          v44 = *((_QWORD *)v40 - 5);
          v46 = __OFSUB__(v44, v45);
          v38 = v44 - v45;
          v39 = v46;
          if (v46)
            goto LABEL_121;
          v47 = v13 - 2;
          v48 = &v33[16 * v13 - 32];
          v50 = *(_QWORD *)v48;
          v49 = *((_QWORD *)v48 + 1);
          v46 = __OFSUB__(v49, v50);
          v51 = v49 - v50;
          if (v46)
            goto LABEL_123;
          v46 = __OFADD__(v38, v51);
          v52 = v38 + v51;
          if (v46)
            goto LABEL_126;
          if (v52 >= v43)
          {
            v70 = &v33[16 * v35];
            v72 = *(_QWORD *)v70;
            v71 = *((_QWORD *)v70 + 1);
            v46 = __OFSUB__(v71, v72);
            v73 = v71 - v72;
            if (v46)
              goto LABEL_130;
            v63 = v38 < v73;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v64 = *((_QWORD *)v12 + 4);
            v65 = *((_QWORD *)v12 + 5);
            v46 = __OFSUB__(v65, v64);
            v57 = v65 - v64;
            v58 = v46;
            goto LABEL_77;
          }
          v37 = *((_QWORD *)v12 + 4);
          v36 = *((_QWORD *)v12 + 5);
          v46 = __OFSUB__(v36, v37);
          v38 = v36 - v37;
          v39 = v46;
        }
        if ((v39 & 1) != 0)
          goto LABEL_122;
        v47 = v13 - 2;
        v53 = &v33[16 * v13 - 32];
        v55 = *(_QWORD *)v53;
        v54 = *((_QWORD *)v53 + 1);
        v56 = __OFSUB__(v54, v55);
        v57 = v54 - v55;
        v58 = v56;
        if (v56)
          goto LABEL_125;
        v59 = &v33[16 * v35];
        v61 = *(_QWORD *)v59;
        v60 = *((_QWORD *)v59 + 1);
        v46 = __OFSUB__(v60, v61);
        v62 = v60 - v61;
        if (v46)
          goto LABEL_128;
        if (__OFADD__(v57, v62))
          goto LABEL_129;
        if (v57 + v62 >= v38)
        {
          v63 = v38 < v62;
LABEL_83:
          if (v63)
            v35 = v47;
          goto LABEL_85;
        }
LABEL_77:
        if ((v58 & 1) != 0)
          goto LABEL_124;
        v66 = &v33[16 * v35];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v46 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v46)
          goto LABEL_127;
        if (v69 < v57)
          goto LABEL_15;
LABEL_85:
        v74 = v35 - 1;
        if (v35 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11)
          goto LABEL_143;
        v75 = v12;
        v76 = &v33[16 * v74];
        v77 = *(_QWORD *)v76;
        v78 = &v33[16 * v35];
        v79 = *((_QWORD *)v78 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + 16 * *(_QWORD *)v76), (double *)(v11 + 16 * *(_QWORD *)v78), v11 + 16 * v79, __dst);
        if (v1)
          goto LABEL_93;
        if (v79 < v77)
          goto LABEL_117;
        if (v35 > *((_QWORD *)v75 + 2))
          goto LABEL_118;
        *(_QWORD *)v76 = v77;
        *(_QWORD *)&v33[16 * v74 + 8] = v79;
        v80 = *((_QWORD *)v75 + 2);
        if (v35 >= v80)
          goto LABEL_119;
        v12 = v75;
        v13 = v80 - 1;
        memmove(&v33[16 * v35], v78 + 16, 16 * (v80 - 1 - v35));
        *((_QWORD *)v75 + 2) = v80 - 1;
        v11 = v105;
        if (v80 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v103;
    v3 = v104;
    if (v10 >= v104)
    {
      v9 = v102;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  char v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t i;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  Swift::Int v119;
  Swift::Int v120;
  uint64_t v121;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v96 = 0;
      v97 = *a1;
      for (i = 1; i != v3; ++i)
      {
        v99 = *(_QWORD *)(v97 + 56 * i);
        v100 = v96;
        do
        {
          v101 = v97 + v100;
          if (v99 >= *(_QWORD *)(v97 + v100))
            break;
          if (!v97)
            goto LABEL_140;
          v102 = v97 + v100;
          v103 = *(_OWORD *)(v97 + v100 + 64);
          v104 = *(_OWORD *)(v97 + v100 + 80);
          v105 = *(_OWORD *)(v97 + v100 + 96);
          v106 = *(_OWORD *)(v101 + 16);
          *(_OWORD *)(v97 + v100 + 56) = *(_OWORD *)v101;
          *(_OWORD *)(v97 + v100 + 72) = v106;
          *(_OWORD *)(v97 + v100 + 88) = *(_OWORD *)(v101 + 32);
          *(_QWORD *)(v97 + v100 + 104) = *(_QWORD *)(v101 + 48);
          *(_QWORD *)v102 = v99;
          *(_OWORD *)(v102 + 8) = v103;
          *(_OWORD *)(v102 + 24) = v104;
          v100 -= 56;
          *(_OWORD *)(v102 + 40) = v105;
        }
        while (v100 != -56);
        v96 += 56;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v6 = result;
  v116 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v12 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_102:
      v107 = v12;
      v118 = v9;
      if (v13 >= 2)
      {
        v108 = *v116;
        do
        {
          v109 = v13 - 2;
          if (v13 < 2)
            goto LABEL_131;
          if (!v108)
            goto LABEL_144;
          v110 = v107;
          v111 = *(_QWORD *)&v107[16 * v109 + 32];
          v112 = *(_QWORD *)&v107[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v108 + 56 * v111), (char *)(v108 + 56 * *(_QWORD *)&v107[16 * v13 + 16]), v108 + 56 * v112, __dst);
          if (v1)
            break;
          if (v112 < v111)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v110 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v110);
          if (v109 >= *((_QWORD *)v110 + 2))
            goto LABEL_133;
          v113 = &v110[16 * v109 + 32];
          *(_QWORD *)v113 = v111;
          *((_QWORD *)v113 + 1) = v112;
          v114 = *((_QWORD *)v110 + 2);
          if (v13 > v114)
            goto LABEL_134;
          memmove(&v110[16 * v13 + 16], &v110[16 * v13 + 32], 16 * (v114 - v13));
          v107 = v110;
          *((_QWORD *)v110 + 2) = v114 - 1;
          v13 = v114 - 1;
        }
        while (v114 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v118 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v118 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = v5 >> 1;
    type metadata accessor for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)();
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v118 = v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v117 = *a1 + 112;
  v115 = *a1 - 56;
  v12 = (char *)MEMORY[0x1E0DEE9D8];
  v119 = v6;
  v120 = v3;
  v121 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(_QWORD *)(v11 + 56 * v10);
      v16 = *(_QWORD *)(v11 + 56 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (uint64_t *)(v117 + 56 * v14);
        v18 = v15;
        while (1)
        {
          v20 = *v17;
          v17 += 7;
          v19 = v20;
          if (v15 < v16 == v20 >= v18)
            break;
          ++v10;
          v18 = v19;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14)
          goto LABEL_137;
        if (v14 < v10)
        {
          v21 = 56 * v10;
          v22 = v10;
          v23 = v14;
          v24 = 56 * v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11)
                goto LABEL_143;
              v25 = v11 + v24;
              v26 = *(_QWORD *)(v11 + v24);
              v27 = v11 + v21;
              v28 = *(_OWORD *)(v11 + v24 + 8);
              v29 = *(_OWORD *)(v11 + v24 + 24);
              v30 = *(_OWORD *)(v11 + v24 + 40);
              v31 = *(_OWORD *)(v11 + v21 - 40);
              v32 = *(_OWORD *)(v11 + v21 - 24);
              v33 = *(_OWORD *)(v11 + v21 - 56);
              *(_QWORD *)(v25 + 48) = *(_QWORD *)(v11 + v21 - 8);
              *(_OWORD *)(v25 + 16) = v31;
              *(_OWORD *)(v25 + 32) = v32;
              *(_OWORD *)v25 = v33;
              *(_QWORD *)(v27 - 56) = v26;
              *(_OWORD *)(v27 - 48) = v28;
              *(_OWORD *)(v27 - 32) = v29;
              *(_OWORD *)(v27 - 16) = v30;
            }
            ++v23;
            v21 -= 56;
            v24 += 56;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_135;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v34 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_138;
    if (v34 >= v3)
      v34 = v3;
    if (v34 < v14)
      break;
    if (v10 != v34)
    {
      v35 = v115 + 56 * v10;
      do
      {
        v36 = *(_QWORD *)(v11 + 56 * v10);
        v37 = v14;
        v38 = v35;
        do
        {
          v39 = v38 + 56;
          if (v36 >= *(_QWORD *)v38)
            break;
          if (!v11)
            goto LABEL_141;
          v40 = *(_OWORD *)(v38 + 64);
          v41 = *(_OWORD *)(v38 + 80);
          v42 = *(_OWORD *)(v38 + 96);
          v43 = *(_OWORD *)(v38 + 16);
          *(_OWORD *)v39 = *(_OWORD *)v38;
          *(_OWORD *)(v38 + 72) = v43;
          *(_OWORD *)(v38 + 88) = *(_OWORD *)(v38 + 32);
          v44 = *(_QWORD *)(v38 + 48);
          *(_QWORD *)v38 = v36;
          *(_OWORD *)(v38 + 8) = v40;
          *(_OWORD *)(v38 + 24) = v41;
          *(_OWORD *)(v38 + 40) = v42;
          v38 -= 56;
          ++v37;
          *(_QWORD *)(v39 + 48) = v44;
        }
        while (v10 != v37);
        ++v10;
        v35 += 56;
      }
      while (v10 != v34);
      v10 = v34;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v46 = *((_QWORD *)v12 + 2);
    v45 = *((_QWORD *)v12 + 3);
    v13 = v46 + 1;
    v11 = v121;
    if (v46 >= v45 >> 1)
    {
      v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v45 > 1), v46 + 1, 1, v12);
      v11 = v121;
      v12 = v95;
    }
    *((_QWORD *)v12 + 2) = v13;
    v47 = v12 + 32;
    v48 = &v12[16 * v46 + 32];
    *(_QWORD *)v48 = v14;
    *((_QWORD *)v48 + 1) = v10;
    if (v46)
    {
      while (1)
      {
        v49 = v13 - 1;
        if (v13 >= 4)
        {
          v54 = &v47[16 * v13];
          v55 = *((_QWORD *)v54 - 8);
          v56 = *((_QWORD *)v54 - 7);
          v60 = __OFSUB__(v56, v55);
          v57 = v56 - v55;
          if (v60)
            goto LABEL_119;
          v59 = *((_QWORD *)v54 - 6);
          v58 = *((_QWORD *)v54 - 5);
          v60 = __OFSUB__(v58, v59);
          v52 = v58 - v59;
          v53 = v60;
          if (v60)
            goto LABEL_120;
          v61 = v13 - 2;
          v62 = &v47[16 * v13 - 32];
          v64 = *(_QWORD *)v62;
          v63 = *((_QWORD *)v62 + 1);
          v60 = __OFSUB__(v63, v64);
          v65 = v63 - v64;
          if (v60)
            goto LABEL_122;
          v60 = __OFADD__(v52, v65);
          v66 = v52 + v65;
          if (v60)
            goto LABEL_125;
          if (v66 >= v57)
          {
            v84 = &v47[16 * v49];
            v86 = *(_QWORD *)v84;
            v85 = *((_QWORD *)v84 + 1);
            v60 = __OFSUB__(v85, v86);
            v87 = v85 - v86;
            if (v60)
              goto LABEL_129;
            v77 = v52 < v87;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v78 = *((_QWORD *)v12 + 4);
            v79 = *((_QWORD *)v12 + 5);
            v60 = __OFSUB__(v79, v78);
            v71 = v79 - v78;
            v72 = v60;
            goto LABEL_77;
          }
          v51 = *((_QWORD *)v12 + 4);
          v50 = *((_QWORD *)v12 + 5);
          v60 = __OFSUB__(v50, v51);
          v52 = v50 - v51;
          v53 = v60;
        }
        if ((v53 & 1) != 0)
          goto LABEL_121;
        v61 = v13 - 2;
        v67 = &v47[16 * v13 - 32];
        v69 = *(_QWORD *)v67;
        v68 = *((_QWORD *)v67 + 1);
        v70 = __OFSUB__(v68, v69);
        v71 = v68 - v69;
        v72 = v70;
        if (v70)
          goto LABEL_124;
        v73 = &v47[16 * v49];
        v75 = *(_QWORD *)v73;
        v74 = *((_QWORD *)v73 + 1);
        v60 = __OFSUB__(v74, v75);
        v76 = v74 - v75;
        if (v60)
          goto LABEL_127;
        if (__OFADD__(v71, v76))
          goto LABEL_128;
        if (v71 + v76 >= v52)
        {
          v77 = v52 < v76;
LABEL_83:
          if (v77)
            v49 = v61;
          goto LABEL_85;
        }
LABEL_77:
        if ((v72 & 1) != 0)
          goto LABEL_123;
        v80 = &v47[16 * v49];
        v82 = *(_QWORD *)v80;
        v81 = *((_QWORD *)v80 + 1);
        v60 = __OFSUB__(v81, v82);
        v83 = v81 - v82;
        if (v60)
          goto LABEL_126;
        if (v83 < v71)
          goto LABEL_15;
LABEL_85:
        v88 = v49 - 1;
        if (v49 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11)
          goto LABEL_142;
        v89 = v12;
        v90 = &v47[16 * v88];
        v91 = *(_QWORD *)v90;
        v92 = &v47[16 * v49];
        v93 = *((_QWORD *)v92 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v11 + 56 * *(_QWORD *)v90), (char *)(v11 + 56 * *(_QWORD *)v92), v11 + 56 * v93, __dst);
        if (v1)
          goto LABEL_93;
        if (v93 < v91)
          goto LABEL_116;
        if (v49 > *((_QWORD *)v89 + 2))
          goto LABEL_117;
        *(_QWORD *)v90 = v91;
        *(_QWORD *)&v47[16 * v88 + 8] = v93;
        v94 = *((_QWORD *)v89 + 2);
        if (v49 >= v94)
          goto LABEL_118;
        v12 = v89;
        v13 = v94 - 1;
        memmove(&v47[16 * v49], v92 + 16, 16 * (v94 - 1 - v49));
        *((_QWORD *)v89 + 2) = v94 - 1;
        v11 = v121;
        if (v94 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v119;
    v3 = v120;
    if (v10 >= v120)
    {
      v9 = v118;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  __int128 *v20;
  Swift::Int v21;
  Swift::Int v22;
  __int128 *v23;
  __int128 v24;
  Swift::Int v25;
  uint64_t v26;
  double v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  Swift::Int v104;
  uint64_t v105;
  double *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v82 = *a1;
      v83 = -1;
      v84 = 1;
      v85 = *a1;
      do
      {
        v86 = *(double *)(v82 + 16 * v84);
        v87 = v83;
        v88 = v85;
        do
        {
          if (v86 >= *(double *)v88)
            break;
          if (!v82)
            goto LABEL_141;
          v89 = *(_QWORD *)(v88 + 24);
          *(_OWORD *)(v88 + 16) = *(_OWORD *)v88;
          *(double *)v88 = v86;
          *(_QWORD *)(v88 + 8) = v89;
          v88 -= 16;
        }
        while (!__CFADD__(v87++, 1));
        ++v84;
        v85 += 16;
        --v83;
      }
      while (v84 != v3);
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v6 = result;
  v99 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    __dst = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v12 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_103:
      v91 = v12;
      v102 = v9;
      if (v13 >= 2)
      {
        v92 = *v99;
        do
        {
          v93 = v13 - 2;
          if (v13 < 2)
            goto LABEL_132;
          if (!v92)
            goto LABEL_145;
          v94 = v91;
          v95 = *(_QWORD *)&v91[16 * v93 + 32];
          v96 = *(_QWORD *)&v91[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v92 + 16 * v95), (double *)(v92 + 16 * *(_QWORD *)&v91[16 * v13 + 16]), v92 + 16 * v96, __dst);
          if (v1)
            break;
          if (v96 < v95)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v94 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v94);
          if (v93 >= *((_QWORD *)v94 + 2))
            goto LABEL_134;
          v97 = &v94[16 * v93 + 32];
          *(_QWORD *)v97 = v95;
          *((_QWORD *)v97 + 1) = v96;
          v98 = *((_QWORD *)v94 + 2);
          if (v13 > v98)
            goto LABEL_135;
          memmove(&v94[16 * v13 + 16], &v94[16 * v13 + 32], 16 * (v98 - v13));
          v91 = v94;
          *((_QWORD *)v94 + 2) = v98 - 1;
          v13 = v98 - 1;
        }
        while (v98 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v102 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v102 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = v5 >> 1;
    type metadata accessor for ClosedRange<CGFloat>();
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v102 = v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v100 = *a1 - 16;
  v101 = *a1 + 32;
  v12 = (char *)MEMORY[0x1E0DEE9D8];
  v103 = v6;
  v104 = v3;
  v105 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(double *)(v11 + 16 * v10);
      v16 = *(double *)(v11 + 16 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (double *)(v101 + 16 * v14);
        v18 = v15;
        while (1)
        {
          v19 = v18;
          v18 = *v17;
          if (v15 < v16 == *v17 >= v19)
            break;
          ++v10;
          v17 += 2;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14)
          goto LABEL_138;
        if (v14 < v10)
        {
          v20 = (__int128 *)(v100 + 16 * v10);
          v21 = v10;
          v22 = v14;
          v23 = (__int128 *)(v11 + 16 * v14);
          do
          {
            if (v22 != --v21)
            {
              if (!v11)
                goto LABEL_144;
              v24 = *v23;
              *v23 = *v20;
              *v20 = v24;
            }
            ++v22;
            --v20;
            ++v23;
          }
          while (v22 < v21);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_136;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v25 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_139;
    if (v25 >= v3)
      v25 = v3;
    if (v25 < v14)
      break;
    if (v10 != v25)
    {
      v26 = v100 + 16 * v10;
      do
      {
        v27 = *(double *)(v11 + 16 * v10);
        v28 = v14;
        v29 = v26;
        do
        {
          if (v27 >= *(double *)v29)
            break;
          if (!v11)
            goto LABEL_142;
          v30 = *(_QWORD *)(v29 + 24);
          *(_OWORD *)(v29 + 16) = *(_OWORD *)v29;
          *(double *)v29 = v27;
          *(_QWORD *)(v29 + 8) = v30;
          v29 -= 16;
          ++v28;
        }
        while (v10 != v28);
        ++v10;
        v26 += 16;
      }
      while (v10 != v25);
      v10 = v25;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v32 = *((_QWORD *)v12 + 2);
    v31 = *((_QWORD *)v12 + 3);
    v13 = v32 + 1;
    v11 = v105;
    if (v32 >= v31 >> 1)
    {
      v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v12);
      v11 = v105;
      v12 = v81;
    }
    *((_QWORD *)v12 + 2) = v13;
    v33 = v12 + 32;
    v34 = &v12[16 * v32 + 32];
    *(_QWORD *)v34 = v14;
    *((_QWORD *)v34 + 1) = v10;
    if (v32)
    {
      while (1)
      {
        v35 = v13 - 1;
        if (v13 >= 4)
        {
          v40 = &v33[16 * v13];
          v41 = *((_QWORD *)v40 - 8);
          v42 = *((_QWORD *)v40 - 7);
          v46 = __OFSUB__(v42, v41);
          v43 = v42 - v41;
          if (v46)
            goto LABEL_120;
          v45 = *((_QWORD *)v40 - 6);
          v44 = *((_QWORD *)v40 - 5);
          v46 = __OFSUB__(v44, v45);
          v38 = v44 - v45;
          v39 = v46;
          if (v46)
            goto LABEL_121;
          v47 = v13 - 2;
          v48 = &v33[16 * v13 - 32];
          v50 = *(_QWORD *)v48;
          v49 = *((_QWORD *)v48 + 1);
          v46 = __OFSUB__(v49, v50);
          v51 = v49 - v50;
          if (v46)
            goto LABEL_123;
          v46 = __OFADD__(v38, v51);
          v52 = v38 + v51;
          if (v46)
            goto LABEL_126;
          if (v52 >= v43)
          {
            v70 = &v33[16 * v35];
            v72 = *(_QWORD *)v70;
            v71 = *((_QWORD *)v70 + 1);
            v46 = __OFSUB__(v71, v72);
            v73 = v71 - v72;
            if (v46)
              goto LABEL_130;
            v63 = v38 < v73;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v64 = *((_QWORD *)v12 + 4);
            v65 = *((_QWORD *)v12 + 5);
            v46 = __OFSUB__(v65, v64);
            v57 = v65 - v64;
            v58 = v46;
            goto LABEL_77;
          }
          v37 = *((_QWORD *)v12 + 4);
          v36 = *((_QWORD *)v12 + 5);
          v46 = __OFSUB__(v36, v37);
          v38 = v36 - v37;
          v39 = v46;
        }
        if ((v39 & 1) != 0)
          goto LABEL_122;
        v47 = v13 - 2;
        v53 = &v33[16 * v13 - 32];
        v55 = *(_QWORD *)v53;
        v54 = *((_QWORD *)v53 + 1);
        v56 = __OFSUB__(v54, v55);
        v57 = v54 - v55;
        v58 = v56;
        if (v56)
          goto LABEL_125;
        v59 = &v33[16 * v35];
        v61 = *(_QWORD *)v59;
        v60 = *((_QWORD *)v59 + 1);
        v46 = __OFSUB__(v60, v61);
        v62 = v60 - v61;
        if (v46)
          goto LABEL_128;
        if (__OFADD__(v57, v62))
          goto LABEL_129;
        if (v57 + v62 >= v38)
        {
          v63 = v38 < v62;
LABEL_83:
          if (v63)
            v35 = v47;
          goto LABEL_85;
        }
LABEL_77:
        if ((v58 & 1) != 0)
          goto LABEL_124;
        v66 = &v33[16 * v35];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v46 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v46)
          goto LABEL_127;
        if (v69 < v57)
          goto LABEL_15;
LABEL_85:
        v74 = v35 - 1;
        if (v35 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11)
          goto LABEL_143;
        v75 = v12;
        v76 = &v33[16 * v74];
        v77 = *(_QWORD *)v76;
        v78 = &v33[16 * v35];
        v79 = *((_QWORD *)v78 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + 16 * *(_QWORD *)v76), (double *)(v11 + 16 * *(_QWORD *)v78), v11 + 16 * v79, __dst);
        if (v1)
          goto LABEL_93;
        if (v79 < v77)
          goto LABEL_117;
        if (v35 > *((_QWORD *)v75 + 2))
          goto LABEL_118;
        *(_QWORD *)v76 = v77;
        *(_QWORD *)&v33[16 * v74 + 8] = v79;
        v80 = *((_QWORD *)v75 + 2);
        if (v35 >= v80)
          goto LABEL_119;
        v12 = v75;
        v13 = v80 - 1;
        memmove(&v33[16 * v35], v78 + 16, 16 * (v80 - 1 - v35));
        *((_QWORD *)v75 + 2) = v80 - 1;
        v11 = v105;
        if (v80 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v103;
    v3 = v104;
    if (v10 >= v104)
    {
      v9 = v102;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  BOOL v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  int v27;
  _BOOL4 v28;
  Swift::Int v29;
  Swift::Int v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  BOOL v36;
  double v37;
  double v38;
  double v39;
  double v40;
  int v41;
  int v42;
  uint64_t v43;
  Swift::Int v44;
  Swift::Int v45;
  Swift::Int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char v57;
  Swift::Int v58;
  uint64_t v59;
  Swift::Int v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  double v65;
  double v66;
  int v67;
  double v68;
  double v69;
  BOOL v70;
  double v71;
  double v72;
  int v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  char v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  Swift::Int v137;
  Swift::Int v138;
  uint64_t v139;
  double *__dst;
  uint64_t v141;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_178;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_186:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v6 = result;
  v141 = v1;
  v134 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    __dst = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v12 = (char *)MEMORY[0x1E0DEE9D8];
      goto LABEL_144;
    }
    v136 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = v5 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v136 = v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v135 = *a1 + 32;
  v12 = (char *)MEMORY[0x1E0DEE9D8];
  v137 = v6;
  v138 = v3;
  v139 = v11;
  do
  {
    v14 = v10++;
    if (v10 >= v3)
      goto LABEL_65;
    v15 = v11 + (v10 << 6);
    v16 = *(double *)(v15 + 8);
    v17 = v11 + (v14 << 6);
    v18 = *(double *)(v17 + 8);
    if (v16 != v18)
    {
      if (v18 < v16)
        goto LABEL_26;
      goto LABEL_29;
    }
    v19 = *(double *)(v15 + 32);
    v20 = *(double *)(v17 + 32);
    v21 = v19 < v20;
    if (v19 != v20
      || (v22 = *(double *)(v15 + 40), v23 = *(double *)(v17 + 40), v21 = v22 < v23, v22 != v23)
      || (v24 = *(double *)(v15 + 48), v25 = *(double *)(v17 + 48), v21 = v24 < v25, v24 != v25))
    {
      if (v21)
        goto LABEL_26;
LABEL_29:
      v29 = v14 + 2;
      if (v14 + 2 >= v3)
      {
LABEL_64:
        v10 = v29;
        goto LABEL_65;
      }
      v28 = 0;
LABEL_31:
      if (v3 <= v29 + 1)
        v30 = v29 + 1;
      else
        v30 = v3;
      v31 = v135 + (v29 << 6);
      while (1)
      {
        v32 = *(double *)(v31 - 24);
        v33 = v11 + (v10 << 6);
        v34 = *(double *)(v33 + 8);
        if (v32 == v34)
        {
          v35 = *(double *)(v33 + 32);
          v36 = *(double *)v31 < v35;
          if (*(double *)v31 == v35
            && (v37 = *(double *)(v31 + 8), v38 = *(double *)(v33 + 40), v36 = v37 < v38, v37 == v38)
            && (v39 = *(double *)(v31 + 16), v40 = *(double *)(v33 + 48), v36 = v39 < v40, v39 == v40))
          {
            v41 = *(char *)(v31 + 24);
            v42 = *(char *)(v33 + 56);
            if (v41 == v42)
            {
              if (v28 == *(_QWORD *)(v31 - 32) >= *(_QWORD *)v33)
                goto LABEL_52;
              goto LABEL_36;
            }
            if (v41 < v42)
            {
LABEL_47:
              if (!v28)
                goto LABEL_64;
              goto LABEL_36;
            }
          }
          else if (v36)
          {
            goto LABEL_47;
          }
        }
        else if (v34 < v32)
        {
          goto LABEL_47;
        }
        if (v28)
          goto LABEL_53;
LABEL_36:
        v10 = v29;
        v31 += 64;
        if (++v29 >= v3)
        {
          v29 = v30;
          goto LABEL_52;
        }
      }
    }
    v26 = *(char *)(v15 + 56);
    v27 = *(char *)(v17 + 56);
    if (v26 != v27)
    {
      if (v26 >= v27)
        goto LABEL_29;
LABEL_26:
      v29 = v14 + 2;
      if (v14 + 2 >= v3)
        goto LABEL_54;
      v28 = 1;
      goto LABEL_31;
    }
    v28 = *(_QWORD *)v15 < *(_QWORD *)v17;
    v29 = v14 + 2;
    if (v14 + 2 < v3)
      goto LABEL_31;
LABEL_52:
    v10 = v29;
    if (v28)
    {
LABEL_53:
      if (v29 < v14)
        goto LABEL_179;
LABEL_54:
      if (v14 < v29)
      {
        v43 = (v29 << 6) - 64;
        v44 = v14 << 6;
        v45 = v29;
        v46 = v14;
        while (1)
        {
          if (v46 != --v45)
          {
            if (!v11)
              goto LABEL_184;
            v51 = (__int128 *)(v11 + v44);
            v52 = (__int128 *)(v11 + v43);
            v53 = *(_QWORD *)(v11 + v44);
            v54 = *(_OWORD *)(v11 + v44 + 8);
            v55 = *(_OWORD *)(v11 + v44 + 24);
            v56 = *(_OWORD *)(v11 + v44 + 40);
            v57 = *(_BYTE *)(v11 + v44 + 56);
            if (v44 != v43 || v51 >= v52 + 4)
            {
              v47 = *v52;
              v48 = v52[1];
              v49 = v52[3];
              v51[2] = v52[2];
              v51[3] = v49;
              *v51 = v47;
              v51[1] = v48;
            }
            v50 = v11 + v43;
            *(_QWORD *)v50 = v53;
            *(_OWORD *)(v50 + 8) = v54;
            *(_OWORD *)(v50 + 24) = v55;
            *(_OWORD *)(v50 + 40) = v56;
            *(_BYTE *)(v50 + 56) = v57;
          }
          ++v46;
          v43 -= 64;
          v44 += 64;
          if (v46 >= v45)
            goto LABEL_64;
        }
      }
      goto LABEL_64;
    }
LABEL_65:
    if (v10 >= v3)
      goto LABEL_92;
    if (__OFSUB__(v10, v14))
      goto LABEL_177;
    if (v10 - v14 >= v6)
      goto LABEL_92;
    v58 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_180;
    if (v58 >= v3)
      v58 = v3;
    if (v58 < v14)
    {
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
      goto LABEL_186;
    }
    if (v10 != v58)
    {
      v59 = v11 + (v10 << 6);
      do
      {
        v60 = v14;
        v61 = v59;
        do
        {
          v62 = *(_QWORD *)v61;
          v63 = *(double *)(v61 + 8);
          v64 = *(double *)(v61 + 32);
          v65 = *(double *)(v61 + 40);
          v66 = *(double *)(v61 + 48);
          v67 = *(char *)(v61 + 56);
          v68 = *(double *)(v61 - 56);
          if (v63 == v68)
          {
            v69 = *(double *)(v61 - 32);
            v70 = v64 < v69;
            if (v64 == v69
              && (v71 = *(double *)(v61 - 24), v70 = v65 < v71, v65 == v71)
              && (v72 = *(double *)(v61 - 16), v70 = v66 < v72, v66 == v72))
            {
              v73 = *(char *)(v61 - 8);
              if (v67 == v73)
              {
                if (v62 >= *(_QWORD *)(v61 - 64))
                  break;
              }
              else if (v67 >= v73)
              {
                break;
              }
            }
            else if (!v70)
            {
              break;
            }
          }
          else if (v68 >= v63)
          {
            break;
          }
          if (!v11)
            goto LABEL_182;
          v74 = *(_OWORD *)(v61 + 16);
          v75 = *(_OWORD *)(v61 - 48);
          *(_OWORD *)v61 = *(_OWORD *)(v61 - 64);
          *(_OWORD *)(v61 + 16) = v75;
          v76 = *(_OWORD *)(v61 - 16);
          *(_OWORD *)(v61 + 32) = *(_OWORD *)(v61 - 32);
          *(_OWORD *)(v61 + 48) = v76;
          *(double *)(v61 - 56) = v63;
          *(_OWORD *)(v61 - 48) = v74;
          *(double *)(v61 - 32) = v64;
          *(double *)(v61 - 24) = v65;
          *(double *)(v61 - 16) = v66;
          *(_BYTE *)(v61 - 8) = v67;
          ++v60;
          *(_QWORD *)(v61 - 64) = v62;
          v61 -= 64;
        }
        while (v10 != v60);
        ++v10;
        v59 += 64;
      }
      while (v10 != v58);
      v10 = v58;
    }
LABEL_92:
    if (v10 < v14)
      goto LABEL_172;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v78 = *((_QWORD *)v12 + 2);
    v77 = *((_QWORD *)v12 + 3);
    v13 = v78 + 1;
    v11 = v139;
    if (v78 >= v77 >> 1)
    {
      v11 = v139;
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v77 > 1), v78 + 1, 1, v12);
    }
    *((_QWORD *)v12 + 2) = v13;
    v79 = v12 + 32;
    v80 = &v12[16 * v78 + 32];
    *(_QWORD *)v80 = v14;
    *((_QWORD *)v80 + 1) = v10;
    if (v78)
    {
      while (1)
      {
        v81 = v13 - 1;
        if (v13 >= 4)
        {
          v86 = &v79[16 * v13];
          v87 = *((_QWORD *)v86 - 8);
          v88 = *((_QWORD *)v86 - 7);
          v92 = __OFSUB__(v88, v87);
          v89 = v88 - v87;
          if (v92)
            goto LABEL_161;
          v91 = *((_QWORD *)v86 - 6);
          v90 = *((_QWORD *)v86 - 5);
          v92 = __OFSUB__(v90, v91);
          v84 = v90 - v91;
          v85 = v92;
          if (v92)
            goto LABEL_162;
          v93 = v13 - 2;
          v94 = &v79[16 * v13 - 32];
          v96 = *(_QWORD *)v94;
          v95 = *((_QWORD *)v94 + 1);
          v92 = __OFSUB__(v95, v96);
          v97 = v95 - v96;
          if (v92)
            goto LABEL_164;
          v92 = __OFADD__(v84, v97);
          v98 = v84 + v97;
          if (v92)
            goto LABEL_167;
          if (v98 >= v89)
          {
            v116 = &v79[16 * v81];
            v118 = *(_QWORD *)v116;
            v117 = *((_QWORD *)v116 + 1);
            v92 = __OFSUB__(v117, v118);
            v119 = v117 - v118;
            if (v92)
              goto LABEL_171;
            v109 = v84 < v119;
            goto LABEL_129;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v110 = *((_QWORD *)v12 + 4);
            v111 = *((_QWORD *)v12 + 5);
            v92 = __OFSUB__(v111, v110);
            v103 = v111 - v110;
            v104 = v92;
            goto LABEL_123;
          }
          v83 = *((_QWORD *)v12 + 4);
          v82 = *((_QWORD *)v12 + 5);
          v92 = __OFSUB__(v82, v83);
          v84 = v82 - v83;
          v85 = v92;
        }
        if ((v85 & 1) != 0)
          goto LABEL_163;
        v93 = v13 - 2;
        v99 = &v79[16 * v13 - 32];
        v101 = *(_QWORD *)v99;
        v100 = *((_QWORD *)v99 + 1);
        v102 = __OFSUB__(v100, v101);
        v103 = v100 - v101;
        v104 = v102;
        if (v102)
          goto LABEL_166;
        v105 = &v79[16 * v81];
        v107 = *(_QWORD *)v105;
        v106 = *((_QWORD *)v105 + 1);
        v92 = __OFSUB__(v106, v107);
        v108 = v106 - v107;
        if (v92)
          goto LABEL_169;
        if (__OFADD__(v103, v108))
          goto LABEL_170;
        if (v103 + v108 >= v84)
        {
          v109 = v84 < v108;
LABEL_129:
          if (v109)
            v81 = v93;
          goto LABEL_131;
        }
LABEL_123:
        if ((v104 & 1) != 0)
          goto LABEL_165;
        v112 = &v79[16 * v81];
        v114 = *(_QWORD *)v112;
        v113 = *((_QWORD *)v112 + 1);
        v92 = __OFSUB__(v113, v114);
        v115 = v113 - v114;
        if (v92)
          goto LABEL_168;
        if (v115 < v103)
          goto LABEL_15;
LABEL_131:
        v120 = v81 - 1;
        if (v81 - 1 >= v13)
        {
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
          goto LABEL_181;
        }
        if (!v11)
          goto LABEL_183;
        v121 = &v79[16 * v120];
        v122 = *(_QWORD *)v121;
        v123 = &v79[16 * v81];
        v124 = *((_QWORD *)v123 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + (*(_QWORD *)v121 << 6)), (double *)(v11 + (*(_QWORD *)v123 << 6)), v11 + (v124 << 6), __dst);
        if (v141)
          goto LABEL_141;
        if (v124 < v122)
          goto LABEL_158;
        if (v81 > *((_QWORD *)v12 + 2))
          goto LABEL_159;
        *(_QWORD *)v121 = v122;
        *(_QWORD *)&v79[16 * v120 + 8] = v124;
        v125 = *((_QWORD *)v12 + 2);
        if (v81 >= v125)
          goto LABEL_160;
        v13 = v125 - 1;
        memmove(&v79[16 * v81], v123 + 16, 16 * (v125 - 1 - v81));
        *((_QWORD *)v12 + 2) = v125 - 1;
        v11 = v139;
        if (v125 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v137;
    v3 = v138;
  }
  while (v10 < v138);
  v9 = v136;
LABEL_144:
  v126 = v12;
  v136 = v9;
  if (v13 >= 2)
  {
    v127 = *v134;
    do
    {
      v128 = v13 - 2;
      if (v13 < 2)
        goto LABEL_173;
      if (!v127)
        goto LABEL_185;
      v129 = v126;
      v130 = *(_QWORD *)&v126[16 * v128 + 32];
      v131 = *(_QWORD *)&v126[16 * v13 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v127 + (v130 << 6)), (double *)(v127 + (*(_QWORD *)&v126[16 * v13 + 16] << 6)), v127 + (v131 << 6), __dst);
      if (v141)
        break;
      if (v131 < v130)
        goto LABEL_174;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v129 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v129);
      if (v128 >= *((_QWORD *)v129 + 2))
        goto LABEL_175;
      v132 = &v129[16 * v128 + 32];
      *(_QWORD *)v132 = v130;
      *((_QWORD *)v132 + 1) = v131;
      v133 = *((_QWORD *)v129 + 2);
      if (v13 > v133)
        goto LABEL_176;
      memmove(&v129[16 * v13 + 16], &v129[16 * v13 + 32], 16 * (v133 - v13));
      v126 = v129;
      *((_QWORD *)v129 + 2) = v133 - 1;
      v13 = v133 - 1;
    }
    while (v133 > 2);
  }
LABEL_141:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v136 + 16) = 0;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void **v20;
  void *v21;
  void *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  __int128 *v27;
  Swift::Int v28;
  Swift::Int v29;
  __int128 *v30;
  __int128 v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  void *v86;
  Swift::Int v87;
  uint64_t v88;
  void *v89;
  double v90;
  double v91;
  double v92;
  double v93;
  __int128 v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  Swift::Int v108;
  Swift::Int v109;
  Swift::Int v110;
  Swift::Int v111;
  void **v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v2 = v1;
  v4 = a1[1];
  result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_134;
    if (v4)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1);
    return result;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_142;
  v111 = v4;
  v108 = result;
  v104 = a1;
  if (v4 < 2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    v112 = (void **)(MEMORY[0x1E0DEE9D8] + 32);
    if (v4 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_100:
      v95 = v11;
      v107 = v9;
      if (v12 >= 2)
      {
        v96 = *v104;
        do
        {
          v97 = v12 - 2;
          if (v12 < 2)
            goto LABEL_129;
          if (!v96)
            goto LABEL_141;
          v98 = v95;
          v99 = *(_QWORD *)&v95[16 * v97 + 32];
          v100 = *(_QWORD *)&v95[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v96 + 16 * v99), (void **)(v96 + 16 * *(_QWORD *)&v95[16 * v12 + 16]), v96 + 16 * v100, v112);
          if (v2)
            break;
          if (v100 < v99)
            goto LABEL_130;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v98 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v98);
          if (v97 >= *((_QWORD *)v98 + 2))
            goto LABEL_131;
          v101 = &v98[16 * v97 + 32];
          *(_QWORD *)v101 = v99;
          *((_QWORD *)v101 + 1) = v100;
          v102 = *((_QWORD *)v98 + 2);
          if (v12 > v102)
            goto LABEL_132;
          memmove(&v98[16 * v12 + 16], &v98[16 * v12 + 32], 16 * (v102 - v12));
          v95 = v98;
          *((_QWORD *)v98 + 2) = v102 - 1;
          v12 = v102 - 1;
        }
        while (v102 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v107 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v107 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = v6 >> 1;
    type metadata accessor for PlatformListCell & UIFocusItem();
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v107 = v8;
    v112 = (void **)(v8 + 32);
  }
  v10 = 0;
  v113 = *a1;
  v105 = *a1 - 16;
  v106 = *a1 + 32;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v13 = v10++;
    if (v10 >= v4)
      goto LABEL_32;
    v14 = *(void **)(v113 + 16 * v10);
    v15 = *(void **)(v113 + 16 * v13);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    objc_msgSend(v14, sel_frame);
    v17 = v16;
    objc_msgSend(v15, sel_frame);
    v19 = v18;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v10 = v13 + 2;
    if (v13 + 2 >= v4)
    {
LABEL_22:
      if (v17 >= v19)
        goto LABEL_32;
LABEL_25:
      if (v10 < v13)
        goto LABEL_135;
      if (v13 < v10)
      {
        v27 = (__int128 *)(v105 + 16 * v10);
        v28 = v10;
        v29 = v13;
        v30 = (__int128 *)(v113 + 16 * v13);
        while (1)
        {
          if (v29 != --v28)
          {
            if (!v113)
              goto LABEL_140;
            v31 = *v30;
            *v30 = *v27;
            *v27 = v31;
          }
          ++v29;
          --v27;
          ++v30;
          if (v29 >= v28)
            goto LABEL_32;
        }
      }
      goto LABEL_32;
    }
    v20 = (void **)(v106 + 16 * v13);
    while (1)
    {
      v21 = *v20;
      v22 = *(v20 - 2);
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      objc_msgSend(v21, sel_frame);
      v24 = v23;
      objc_msgSend(v22, sel_frame);
      v26 = v25;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (v17 < v19 == v24 >= v26)
        break;
      ++v10;
      v20 += 2;
      v4 = v111;
      if (v111 == v10)
      {
        v10 = v111;
        goto LABEL_22;
      }
    }
    v4 = v111;
    if (v17 < v19)
      goto LABEL_25;
LABEL_32:
    if (v10 >= v4)
      goto LABEL_41;
    if (__OFSUB__(v10, v13))
      goto LABEL_133;
    if (v10 - v13 >= v108)
      goto LABEL_41;
    if (__OFADD__(v13, v108))
      goto LABEL_136;
    v32 = v13 + v108 >= v4 ? v4 : v13 + v108;
    if (v32 < v13)
      break;
    if (v10 != v32)
    {
      v103 = v11;
      v115 = v2;
      v85 = v105 + 16 * v10;
      v33 = v113;
      v109 = v32;
      v110 = v13;
      do
      {
        v86 = *(void **)(v113 + 16 * v10);
        v87 = v13;
        v88 = v85;
        do
        {
          v89 = *(void **)v88;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          objc_msgSend(v86, sel_frame);
          v91 = v90;
          objc_msgSend(v89, sel_frame);
          v93 = v92;
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          if (v91 >= v93)
            break;
          if (!v113)
            goto LABEL_138;
          v94 = *(_OWORD *)(v88 + 16);
          *(_OWORD *)(v88 + 16) = *(_OWORD *)v88;
          *(_OWORD *)v88 = v94;
          v88 -= 16;
          v86 = (void *)v94;
          ++v87;
        }
        while (v10 != v87);
        ++v10;
        v85 += 16;
        v13 = v110;
      }
      while (v10 != v109);
      v10 = v109;
      v2 = v115;
      v11 = v103;
      if (v109 < v110)
        goto LABEL_128;
      goto LABEL_42;
    }
LABEL_41:
    v33 = v113;
    if (v10 < v13)
      goto LABEL_128;
LABEL_42:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v35 = *((_QWORD *)v11 + 2);
    v34 = *((_QWORD *)v11 + 3);
    v12 = v35 + 1;
    v114 = v2;
    if (v35 >= v34 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v36 = v11 + 32;
    v37 = &v11[16 * v35 + 32];
    *(_QWORD *)v37 = v13;
    *((_QWORD *)v37 + 1) = v10;
    if (v35)
    {
      while (1)
      {
        v38 = v12 - 1;
        if (v12 >= 4)
        {
          v43 = &v36[16 * v12];
          v44 = *((_QWORD *)v43 - 8);
          v45 = *((_QWORD *)v43 - 7);
          v49 = __OFSUB__(v45, v44);
          v46 = v45 - v44;
          if (v49)
            goto LABEL_117;
          v48 = *((_QWORD *)v43 - 6);
          v47 = *((_QWORD *)v43 - 5);
          v49 = __OFSUB__(v47, v48);
          v41 = v47 - v48;
          v42 = v49;
          if (v49)
            goto LABEL_118;
          v50 = v12 - 2;
          v51 = &v36[16 * v12 - 32];
          v53 = *(_QWORD *)v51;
          v52 = *((_QWORD *)v51 + 1);
          v49 = __OFSUB__(v52, v53);
          v54 = v52 - v53;
          if (v49)
            goto LABEL_120;
          v49 = __OFADD__(v41, v54);
          v55 = v41 + v54;
          if (v49)
            goto LABEL_123;
          if (v55 >= v46)
          {
            v73 = &v36[16 * v38];
            v75 = *(_QWORD *)v73;
            v74 = *((_QWORD *)v73 + 1);
            v49 = __OFSUB__(v74, v75);
            v76 = v74 - v75;
            if (v49)
              goto LABEL_127;
            v66 = v41 < v76;
            goto LABEL_78;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v67 = *((_QWORD *)v11 + 4);
            v68 = *((_QWORD *)v11 + 5);
            v49 = __OFSUB__(v68, v67);
            v60 = v68 - v67;
            v61 = v49;
            goto LABEL_72;
          }
          v40 = *((_QWORD *)v11 + 4);
          v39 = *((_QWORD *)v11 + 5);
          v49 = __OFSUB__(v39, v40);
          v41 = v39 - v40;
          v42 = v49;
        }
        if ((v42 & 1) != 0)
          goto LABEL_119;
        v50 = v12 - 2;
        v56 = &v36[16 * v12 - 32];
        v58 = *(_QWORD *)v56;
        v57 = *((_QWORD *)v56 + 1);
        v59 = __OFSUB__(v57, v58);
        v60 = v57 - v58;
        v61 = v59;
        if (v59)
          goto LABEL_122;
        v62 = &v36[16 * v38];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v49 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v49)
          goto LABEL_125;
        if (__OFADD__(v60, v65))
          goto LABEL_126;
        if (v60 + v65 >= v41)
        {
          v66 = v41 < v65;
LABEL_78:
          if (v66)
            v38 = v50;
          goto LABEL_80;
        }
LABEL_72:
        if ((v61 & 1) != 0)
          goto LABEL_121;
        v69 = &v36[16 * v38];
        v71 = *(_QWORD *)v69;
        v70 = *((_QWORD *)v69 + 1);
        v49 = __OFSUB__(v70, v71);
        v72 = v70 - v71;
        if (v49)
          goto LABEL_124;
        if (v72 < v60)
          goto LABEL_15;
LABEL_80:
        v77 = v38 - 1;
        if (v38 - 1 >= v12)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        v78 = v33;
        if (!v33)
          goto LABEL_139;
        v79 = v11;
        v80 = &v36[16 * v77];
        v81 = *(_QWORD *)v80;
        v82 = &v36[16 * v38];
        v83 = *((_QWORD *)v82 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v78 + 16 * *(_QWORD *)v80), (void **)(v78 + 16 * *(_QWORD *)v82), v78 + 16 * v83, v112);
        if (v114)
          goto LABEL_97;
        if (v83 < v81)
          goto LABEL_114;
        if (v38 > *((_QWORD *)v79 + 2))
          goto LABEL_115;
        *(_QWORD *)v80 = v81;
        *(_QWORD *)&v36[16 * v77 + 8] = v83;
        v84 = *((_QWORD *)v79 + 2);
        if (v38 >= v84)
          goto LABEL_116;
        v11 = v79;
        v12 = v84 - 1;
        memmove(&v36[16 * v38], v82 + 16, 16 * (v84 - 1 - v38));
        *((_QWORD *)v79 + 2) = v84 - 1;
        v33 = v113;
        if (v84 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v4 = v111;
    v2 = v114;
    if (v10 >= v111)
    {
      v9 = v107;
      goto LABEL_100;
    }
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  Swift::Int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  double v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  char v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  double v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  char v120;
  uint64_t v121;
  char v122;
  __int128 v123;
  __int128 v124;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  Swift::Int v134;
  _QWORD *v135;
  uint64_t v136;
  Swift::Int v137;
  Swift::Int v138;
  __int128 v139;
  __int128 v140;
  char v141;
  uint64_t v142;
  char v143;
  char *v144;
  char *v145;
  uint64_t v146;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result < v3)
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_226;
    v137 = result;
    v146 = v1;
    if (v3 < 2)
    {
      v8 = MEMORY[0x1E0DEE9D8];
      v144 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if (v3 != 1)
      {
        v11 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
        v126 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_175:
        v136 = v8;
        if (v11 >= 2)
        {
          v127 = *v2;
          do
          {
            v128 = v11 - 2;
            if (v11 < 2)
              goto LABEL_204;
            if (!v127)
              goto LABEL_221;
            v129 = v126;
            v130 = *(_QWORD *)&v126[16 * v128 + 32];
            v131 = *(_QWORD *)&v126[16 * v11 + 24];
            specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v127 + 72 * v130), (char *)(v127 + 72 * *(_QWORD *)&v126[16 * v11 + 16]), (char *)(v127 + 72 * v131), v144);
            if (v146)
              break;
            if (v131 < v130)
              goto LABEL_205;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v129 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v129);
            if (v128 >= *((_QWORD *)v129 + 2))
              goto LABEL_206;
            v132 = &v129[16 * v128 + 32];
            *(_QWORD *)v132 = v130;
            *((_QWORD *)v132 + 1) = v131;
            v133 = *((_QWORD *)v129 + 2);
            if (v11 > v133)
              goto LABEL_207;
            memmove(&v129[16 * v11 + 16], &v129[16 * v11 + 32], 16 * (v133 - v11));
            v126 = v129;
            *((_QWORD *)v129 + 2) = v133 - 1;
            v11 = v133 - 1;
          }
          while (v133 > 2);
        }
LABEL_147:
        swift_bridgeObjectRelease();
        *(_QWORD *)(v136 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      v136 = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v6 = v5 >> 1;
      v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v7 + 16) = v6;
      v136 = v7;
      v144 = (char *)(v7 + 32);
    }
    v9 = 0;
    v135 = v2;
    v10 = *v2;
    v145 = (char *)MEMORY[0x1E0DEE9D8];
    v138 = v3;
LABEL_16:
    v12 = v9++;
    if (v9 >= v3)
      goto LABEL_65;
    v13 = *(_QWORD *)(v10 + 72 * v9);
    v14 = *(_QWORD *)(v10 + 72 * v12);
    v15 = *(double *)(v13 + 168);
    v16 = *(double *)(v14 + 168);
    if (v15 == v16)
    {
      if ((*(_BYTE *)(v13 + 165) & 1) != 0)
      {
        if ((*(_BYTE *)(v14 + 165) & 1) == 0 && (*(_BYTE *)(v14 + 166) & 1) == 0)
        {
          v17 = 1;
LABEL_27:
          v18 = v17 ^ 1;
          goto LABEL_33;
        }
LABEL_28:
        v19 = *(_DWORD *)(v13 + 212);
        v20 = *(_DWORD *)(v14 + 212);
        if (v19 == v20)
        {
          if ((*(_BYTE *)(v13 + 208) & 1) != 0)
            goto LABEL_224;
          if ((*(_BYTE *)(v14 + 208) & 1) != 0)
            goto LABEL_225;
          v18 = *(_QWORD *)(v13 + 200) < *(_QWORD *)(v14 + 200);
        }
        else
        {
          v18 = v19 < v20;
        }
        goto LABEL_33;
      }
      v17 = *(unsigned __int8 *)(v13 + 166);
      if ((*(_BYTE *)(v14 + 165) & 1) == 0)
      {
        if (v17 != *(unsigned __int8 *)(v14 + 166))
          goto LABEL_27;
        goto LABEL_28;
      }
      if ((v17 & 1) != 0)
        goto LABEL_28;
      v18 = 1;
    }
    else
    {
      v18 = v15 < v16;
    }
LABEL_33:
    v9 = v12 + 2;
    if (v12 + 2 >= v3)
    {
LABEL_55:
      if (v18)
        goto LABEL_56;
      goto LABEL_65;
    }
    v21 = v10 + 144 + 72 * v12;
    while (1)
    {
      v22 = v15;
      v23 = *(_QWORD *)v21;
      v15 = *(double *)(*(_QWORD *)v21 + 168);
      if (v15 == v22)
      {
        if ((*(_BYTE *)(v23 + 165) & 1) != 0)
        {
          if ((*(_BYTE *)(v13 + 165) & 1) != 0 || (*(_BYTE *)(v13 + 166) & 1) != 0)
          {
LABEL_49:
            v25 = *(_DWORD *)(v23 + 212);
            v26 = *(_DWORD *)(v13 + 212);
            if (v25 == v26)
            {
              if ((*(_BYTE *)(v23 + 208) & 1) != 0)
                goto LABEL_222;
              if ((*(_BYTE *)(v13 + 208) & 1) != 0)
                goto LABEL_223;
              if (v18 != *(_QWORD *)(v23 + 200) < *(_QWORD *)(v13 + 200))
                goto LABEL_55;
            }
            else if (v18 != v25 < v26)
            {
              goto LABEL_55;
            }
            goto LABEL_36;
          }
          v24 = 1;
          goto LABEL_47;
        }
        v24 = *(unsigned __int8 *)(v23 + 166);
        if ((*(_BYTE *)(v13 + 165) & 1) == 0)
        {
          if (v24 == *(unsigned __int8 *)(v13 + 166))
            goto LABEL_49;
LABEL_47:
          if (v18 != (v24 ^ 1))
            goto LABEL_55;
          goto LABEL_36;
        }
        if ((v24 & 1) != 0)
          goto LABEL_49;
        if (v18 != 1)
          goto LABEL_55;
      }
      else if (v18 != v15 < v22)
      {
        goto LABEL_55;
      }
LABEL_36:
      ++v9;
      v21 += 72;
      v13 = v23;
      if (v3 == v9)
      {
        v9 = v3;
        if (!v18)
          goto LABEL_65;
LABEL_56:
        if (v9 < v12)
          goto LABEL_210;
        if (v12 < v9)
        {
          v27 = 72 * v9;
          v28 = 72 * v12;
          v29 = v9;
          v134 = v12;
          do
          {
            if (v12 != --v29)
            {
              if (!v10)
                goto LABEL_220;
              v30 = v10 + v27;
              v31 = *(_QWORD *)(v10 + v28);
              v32 = *(_QWORD *)(v10 + v28 + 8);
              v143 = *(_BYTE *)(v10 + v28 + 16);
              v142 = *(_QWORD *)(v10 + v28 + 24);
              v141 = *(_BYTE *)(v10 + v28 + 32);
              v139 = *(_OWORD *)(v10 + v28 + 56);
              v140 = *(_OWORD *)(v10 + v28 + 40);
              memmove((void *)(v10 + v28), (const void *)(v10 + v27 - 72), 0x48uLL);
              *(_QWORD *)(v30 - 72) = v31;
              *(_QWORD *)(v30 - 64) = v32;
              *(_BYTE *)(v30 - 56) = v143;
              *(_QWORD *)(v30 - 48) = v142;
              *(_BYTE *)(v30 - 40) = v141;
              *(_OWORD *)(v30 - 32) = v140;
              *(_OWORD *)(v30 - 16) = v139;
            }
            ++v12;
            v27 -= 72;
            v28 += 72;
          }
          while (v12 < v29);
          v3 = v138;
          v12 = v134;
        }
LABEL_65:
        if (v9 >= v3)
          goto LABEL_73;
        if (__OFSUB__(v9, v12))
          goto LABEL_208;
        if (v9 - v12 >= v137)
        {
LABEL_73:
          v34 = v145;
          if (v9 < v12)
            goto LABEL_203;
          goto LABEL_74;
        }
        v33 = v12 + v137;
        if (__OFADD__(v12, v137))
          goto LABEL_211;
        if (v33 >= v3)
          v33 = v3;
        if (v33 >= v12)
        {
          if (v9 == v33)
            goto LABEL_73;
          v84 = v10 + 56 + 72 * v9;
          v34 = v145;
          while (2)
          {
            v85 = *(_QWORD *)(v10 + 72 * v9);
            v86 = v12;
            v87 = v84;
            while (2)
            {
              v88 = v87 - 128;
              v89 = *(_QWORD *)(v87 - 128);
              v90 = *(double *)(v85 + 168);
              v91 = *(double *)(v89 + 168);
              if (v90 == v91)
              {
                if ((*(_BYTE *)(v85 + 165) & 1) != 0)
                {
                  if ((*(_BYTE *)(v89 + 165) & 1) == 0 && (*(_BYTE *)(v89 + 166) & 1) == 0)
                    break;
                  goto LABEL_136;
                }
                v92 = *(unsigned __int8 *)(v85 + 166);
                if ((*(_BYTE *)(v89 + 165) & 1) != 0)
                {
                  if ((v92 & 1) != 0)
                    goto LABEL_136;
                }
                else if (v92 == *(unsigned __int8 *)(v89 + 166))
                {
LABEL_136:
                  v93 = *(_DWORD *)(v85 + 212);
                  v94 = *(_DWORD *)(v89 + 212);
                  if (v93 == v94)
                  {
                    if ((*(_BYTE *)(v85 + 208) & 1) != 0)
                      goto LABEL_218;
                    if ((*(_BYTE *)(v89 + 208) & 1) != 0)
                      goto LABEL_217;
                    if (*(_QWORD *)(v85 + 200) >= *(_QWORD *)(v89 + 200))
                      break;
                  }
                  else if (v93 >= v94)
                  {
                    break;
                  }
                }
                else if ((v92 & 1) != 0)
                {
                  break;
                }
              }
              else if (v90 >= v91)
              {
                break;
              }
              if (!v10)
                goto LABEL_214;
              v95 = *(_QWORD *)(v87 - 64);
              v97 = *(_OWORD *)(v87 - 96);
              v96 = *(_OWORD *)(v87 - 80);
              *(_OWORD *)(v87 - 72) = *(_OWORD *)v87;
              v87 -= 72;
              v98 = *(_QWORD *)(v87 + 24);
              v99 = *(_BYTE *)(v87 + 32);
              v100 = *(_QWORD *)(v87 + 40);
              v101 = *(_BYTE *)(v87 + 48);
              v102 = *(_OWORD *)(v87 + 56);
              *(_OWORD *)(v88 + 104) = v97;
              *(_OWORD *)(v88 + 120) = v96;
              *(_QWORD *)(v88 + 136) = v95;
              v103 = *(_OWORD *)(v88 + 16);
              *(_OWORD *)(v88 + 72) = *(_OWORD *)v88;
              *(_OWORD *)(v88 + 88) = v103;
              *(_QWORD *)(v87 - 56) = v85;
              *(_QWORD *)(v87 - 48) = v98;
              *(_BYTE *)(v87 - 40) = v99;
              *(_QWORD *)(v87 - 32) = v100;
              *(_BYTE *)(v87 - 24) = v101;
              ++v86;
              *(_OWORD *)(v87 - 16) = v102;
              if (v9 != v86)
                continue;
              break;
            }
            ++v9;
            v84 += 72;
            if (v9 != v33)
              continue;
            break;
          }
          v9 = v33;
          if (v33 < v12)
            goto LABEL_203;
LABEL_74:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v34 + 2) + 1, 1, v34);
          v36 = *((_QWORD *)v34 + 2);
          v35 = *((_QWORD *)v34 + 3);
          v11 = v36 + 1;
          if (v36 >= v35 >> 1)
            v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v34);
          *((_QWORD *)v34 + 2) = v11;
          v37 = v34 + 32;
          v38 = &v34[16 * v36 + 32];
          *(_QWORD *)v38 = v12;
          *((_QWORD *)v38 + 1) = v9;
          v145 = v34;
          if (v36)
          {
            while (2)
            {
              v39 = v11 - 1;
              if (v11 >= 4)
              {
                v44 = &v37[16 * v11];
                v45 = *((_QWORD *)v44 - 8);
                v46 = *((_QWORD *)v44 - 7);
                v50 = __OFSUB__(v46, v45);
                v47 = v46 - v45;
                if (v50)
                  goto LABEL_192;
                v49 = *((_QWORD *)v44 - 6);
                v48 = *((_QWORD *)v44 - 5);
                v50 = __OFSUB__(v48, v49);
                v42 = v48 - v49;
                v43 = v50;
                if (v50)
                  goto LABEL_193;
                v51 = v11 - 2;
                v52 = &v37[16 * v11 - 32];
                v54 = *(_QWORD *)v52;
                v53 = *((_QWORD *)v52 + 1);
                v50 = __OFSUB__(v53, v54);
                v55 = v53 - v54;
                if (v50)
                  goto LABEL_195;
                v50 = __OFADD__(v42, v55);
                v56 = v42 + v55;
                if (v50)
                  goto LABEL_198;
                if (v56 >= v47)
                {
                  v74 = &v37[16 * v39];
                  v76 = *(_QWORD *)v74;
                  v75 = *((_QWORD *)v74 + 1);
                  v50 = __OFSUB__(v75, v76);
                  v77 = v75 - v76;
                  if (v50)
                    goto LABEL_202;
                  v67 = v42 < v77;
                }
                else
                {
LABEL_92:
                  if ((v43 & 1) != 0)
                    goto LABEL_194;
                  v51 = v11 - 2;
                  v57 = &v37[16 * v11 - 32];
                  v59 = *(_QWORD *)v57;
                  v58 = *((_QWORD *)v57 + 1);
                  v60 = __OFSUB__(v58, v59);
                  v61 = v58 - v59;
                  v62 = v60;
                  if (v60)
                    goto LABEL_197;
                  v63 = &v37[16 * v39];
                  v65 = *(_QWORD *)v63;
                  v64 = *((_QWORD *)v63 + 1);
                  v50 = __OFSUB__(v64, v65);
                  v66 = v64 - v65;
                  if (v50)
                    goto LABEL_200;
                  if (__OFADD__(v61, v66))
                    goto LABEL_201;
                  if (v61 + v66 < v42)
                    goto LABEL_104;
                  v67 = v42 < v66;
                }
                if (v67)
                  v39 = v51;
              }
              else
              {
                if (v11 == 3)
                {
                  v41 = *((_QWORD *)v34 + 4);
                  v40 = *((_QWORD *)v34 + 5);
                  v50 = __OFSUB__(v40, v41);
                  v42 = v40 - v41;
                  v43 = v50;
                  goto LABEL_92;
                }
                v68 = *((_QWORD *)v34 + 4);
                v69 = *((_QWORD *)v34 + 5);
                v50 = __OFSUB__(v69, v68);
                v61 = v69 - v68;
                v62 = v50;
LABEL_104:
                if ((v62 & 1) != 0)
                  goto LABEL_196;
                v70 = &v37[16 * v39];
                v72 = *(_QWORD *)v70;
                v71 = *((_QWORD *)v70 + 1);
                v50 = __OFSUB__(v71, v72);
                v73 = v71 - v72;
                if (v50)
                  goto LABEL_199;
                if (v73 < v61)
                  goto LABEL_15;
              }
              v78 = v39 - 1;
              if (v39 - 1 >= v11)
              {
                __break(1u);
LABEL_189:
                __break(1u);
LABEL_190:
                __break(1u);
LABEL_191:
                __break(1u);
LABEL_192:
                __break(1u);
LABEL_193:
                __break(1u);
LABEL_194:
                __break(1u);
LABEL_195:
                __break(1u);
LABEL_196:
                __break(1u);
LABEL_197:
                __break(1u);
LABEL_198:
                __break(1u);
LABEL_199:
                __break(1u);
LABEL_200:
                __break(1u);
LABEL_201:
                __break(1u);
LABEL_202:
                __break(1u);
LABEL_203:
                __break(1u);
LABEL_204:
                __break(1u);
LABEL_205:
                __break(1u);
LABEL_206:
                __break(1u);
LABEL_207:
                __break(1u);
LABEL_208:
                __break(1u);
LABEL_209:
                __break(1u);
LABEL_210:
                __break(1u);
LABEL_211:
                __break(1u);
                goto LABEL_212;
              }
              if (!v10)
                goto LABEL_219;
              v79 = &v37[16 * v78];
              v80 = *(_QWORD *)v79;
              v81 = &v37[16 * v39];
              v82 = *((_QWORD *)v81 + 1);
              specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 72 * *(_QWORD *)v79), (char *)(v10 + 72 * *(_QWORD *)v81), (char *)(v10 + 72 * v82), v144);
              if (v146)
                goto LABEL_147;
              if (v82 < v80)
                goto LABEL_189;
              if (v39 > *((_QWORD *)v145 + 2))
                goto LABEL_190;
              *(_QWORD *)v79 = v80;
              *(_QWORD *)&v37[16 * v78 + 8] = v82;
              v83 = *((_QWORD *)v145 + 2);
              if (v39 >= v83)
                goto LABEL_191;
              v34 = v145;
              v11 = v83 - 1;
              memmove(&v37[16 * v39], v81 + 16, 16 * (v83 - 1 - v39));
              *((_QWORD *)v145 + 2) = v83 - 1;
              if (v83 <= 2)
                goto LABEL_15;
              continue;
            }
          }
          v11 = 1;
LABEL_15:
          v3 = v138;
          if (v9 >= v138)
          {
            v8 = v136;
            v126 = v145;
            v2 = v135;
            goto LABEL_175;
          }
          goto LABEL_16;
        }
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
        goto LABEL_216;
      }
    }
  }
  if (v3 < 0)
    goto LABEL_209;
  if ((unint64_t)v3 < 2)
    return result;
  v104 = *v2;
  v105 = *v2 + 128;
  v106 = -1;
  v107 = 1;
LABEL_150:
  v108 = *(_QWORD *)(v104 + 72 * v107);
  v109 = v106;
  v110 = v105;
  while (1)
  {
    v111 = v110 - 128;
    v112 = *(_QWORD *)(v110 - 128);
    v113 = *(double *)(v108 + 168);
    v114 = *(double *)(v112 + 168);
    if (v113 != v114)
    {
      if (v113 >= v114)
        goto LABEL_149;
      goto LABEL_170;
    }
    if ((*(_BYTE *)(v108 + 165) & 1) != 0)
      break;
    v115 = *(unsigned __int8 *)(v108 + 166);
    if ((*(_BYTE *)(v112 + 165) & 1) != 0)
    {
      if ((v115 & 1) != 0)
        goto LABEL_164;
    }
    else
    {
      result = *(unsigned __int8 *)(v112 + 166);
      if (v115 == (_DWORD)result)
        goto LABEL_164;
      if ((v115 & 1) != 0)
        goto LABEL_149;
    }
LABEL_170:
    if (!v104)
      goto LABEL_213;
    v117 = *(_QWORD *)(v110 - 64);
    v119 = *(_OWORD *)(v110 - 96);
    v118 = *(_OWORD *)(v110 - 80);
    *(_OWORD *)(v110 - 72) = *(_OWORD *)v110;
    v110 -= 72;
    result = *(_QWORD *)(v110 + 24);
    v120 = *(_BYTE *)(v110 + 32);
    v121 = *(_QWORD *)(v110 + 40);
    v122 = *(_BYTE *)(v110 + 48);
    v123 = *(_OWORD *)(v110 + 56);
    *(_OWORD *)(v111 + 104) = v119;
    *(_OWORD *)(v111 + 120) = v118;
    *(_QWORD *)(v111 + 136) = v117;
    v124 = *(_OWORD *)(v111 + 16);
    *(_OWORD *)(v111 + 72) = *(_OWORD *)v111;
    *(_OWORD *)(v111 + 88) = v124;
    *(_QWORD *)(v110 - 56) = v108;
    *(_QWORD *)(v110 - 48) = result;
    *(_BYTE *)(v110 - 40) = v120;
    *(_QWORD *)(v110 - 32) = v121;
    *(_BYTE *)(v110 - 24) = v122;
    *(_OWORD *)(v110 - 16) = v123;
    if (__CFADD__(v109++, 1))
    {
LABEL_149:
      ++v107;
      v105 += 72;
      --v106;
      if (v107 == v3)
        return result;
      goto LABEL_150;
    }
  }
  if ((*(_BYTE *)(v112 + 165) & 1) == 0 && (*(_BYTE *)(v112 + 166) & 1) == 0)
    goto LABEL_149;
LABEL_164:
  v116 = *(_DWORD *)(v108 + 212);
  result = *(unsigned int *)(v112 + 212);
  if (v116 != (_DWORD)result)
  {
    if (v116 >= result)
      goto LABEL_149;
    goto LABEL_170;
  }
  if ((*(_BYTE *)(v108 + 208) & 1) != 0)
    goto LABEL_215;
  if ((*(_BYTE *)(v112 + 208) & 1) == 0)
  {
    if (*(_QWORD *)(v108 + 200) >= *(_QWORD *)(v112 + 200))
      goto LABEL_149;
    goto LABEL_170;
  }
LABEL_216:
  __break(1u);
LABEL_217:
  __break(1u);
LABEL_218:
  __break(1u);
LABEL_219:
  __break(1u);
LABEL_220:
  __break(1u);
LABEL_221:
  __break(1u);
LABEL_222:
  __break(1u);
LABEL_223:
  __break(1u);
LABEL_224:
  __break(1u);
LABEL_225:
  __break(1u);
LABEL_226:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  Swift::Int v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  char v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  double v82;
  Swift::Int v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  double v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t i;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  double v101;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  Swift::Int v113;
  Swift::Int v114;
  double *__dst;
  char *v116;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v90 = *v2;
      v91 = *v2 + 32;
      v92 = -1;
      for (i = 1; i != v3; ++i)
      {
        v94 = *(double *)(v90 + 40 * i + 32);
        v95 = v92;
        v96 = v91;
        do
        {
          if (v94 >= *(double *)v96)
            break;
          if (!v90)
            goto LABEL_142;
          v97 = v96 + 8;
          v98 = *(_OWORD *)(v96 + 8);
          v99 = *(_OWORD *)(v96 + 24);
          v100 = *(_OWORD *)(v96 - 16);
          *(_OWORD *)(v96 + 8) = *(_OWORD *)(v96 - 32);
          *(_OWORD *)(v96 + 24) = v100;
          v101 = *(double *)v96;
          *(_OWORD *)(v96 - 32) = v98;
          *(_OWORD *)(v96 - 16) = v99;
          *(double *)v96 = v94;
          v96 -= 40;
          *(double *)(v97 + 32) = v101;
        }
        while (!__CFADD__(v95++, 1));
        v91 += 40;
        --v92;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_147;
  v6 = result;
  if (v3 < 2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    __dst = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v103 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_104:
      v112 = v9;
      if (v12 >= 2)
      {
        v104 = *v2;
        do
        {
          v105 = v12 - 2;
          if (v12 < 2)
            goto LABEL_133;
          if (!v104)
            goto LABEL_146;
          v106 = v103;
          v107 = *(_QWORD *)&v103[16 * v105 + 32];
          v108 = *(_QWORD *)&v103[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v104 + 40 * v107), (double *)(v104 + 40 * *(_QWORD *)&v103[16 * v12 + 16]), v104 + 40 * v108, __dst);
          if (v1)
            break;
          if (v108 < v107)
            goto LABEL_134;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v106 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v106);
          if (v105 >= *((_QWORD *)v106 + 2))
            goto LABEL_135;
          v109 = &v106[16 * v105 + 32];
          *(_QWORD *)v109 = v107;
          *((_QWORD *)v109 + 1) = v108;
          v110 = *((_QWORD *)v106 + 2);
          if (v12 > v110)
            goto LABEL_136;
          memmove(&v106[16 * v12 + 16], &v106[16 * v12 + 32], 16 * (v110 - v12));
          v103 = v106;
          *((_QWORD *)v106 + 2) = v110 - 1;
          v12 = v110 - 1;
        }
        while (v110 > 2);
      }
LABEL_94:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v112 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v112 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = v5 >> 1;
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for SliderMark<Double>, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E0DEB070], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SliderMark);
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v112 = v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v111 = v2;
  v11 = *v2;
  v116 = (char *)MEMORY[0x1E0DEE9D8];
  v113 = v6;
  v114 = v3;
  while (1)
  {
    v13 = v10++;
    if (v10 < v3)
    {
      v14 = *(double *)(v11 + 40 * v10 + 32);
      v15 = *(double *)(v11 + 40 * v13 + 32);
      v10 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = (double *)(v11 + 112 + 40 * v13);
        v17 = v14;
        while (1)
        {
          v18 = v17;
          v17 = *v16;
          if (v14 < v15 == *v16 >= v18)
            break;
          ++v10;
          v16 += 5;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v10 < v13)
          goto LABEL_139;
        if (v13 < v10)
        {
          v19 = 40 * v10;
          v20 = 40 * v13;
          v21 = v10;
          v22 = v13;
          do
          {
            if (v22 != --v21)
            {
              if (!v11)
                goto LABEL_145;
              v23 = v11 + v20;
              v24 = *(_QWORD *)(v11 + v20 + 32);
              v25 = v11 + v19;
              v26 = *(_OWORD *)(v11 + v20);
              v27 = *(_OWORD *)(v11 + v20 + 16);
              v28 = *(_QWORD *)(v11 + v19 - 8);
              v29 = *(_OWORD *)(v11 + v19 - 24);
              *(_OWORD *)v23 = *(_OWORD *)(v11 + v19 - 40);
              *(_OWORD *)(v23 + 16) = v29;
              *(_QWORD *)(v23 + 32) = v28;
              *(_OWORD *)(v25 - 40) = v26;
              *(_OWORD *)(v25 - 24) = v27;
              *(_QWORD *)(v25 - 8) = v24;
            }
            ++v22;
            v19 -= 40;
            v20 += 40;
          }
          while (v22 < v21);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_38;
    if (__OFSUB__(v10, v13))
      goto LABEL_137;
    if (v10 - v13 >= v6)
      goto LABEL_38;
    v30 = v13 + v6;
    if (__OFADD__(v13, v6))
      goto LABEL_140;
    if (v30 >= v3)
      v30 = v3;
    if (v30 < v13)
      break;
    if (v10 != v30)
    {
      v81 = v11 - 8 + 40 * v10;
      v31 = v116;
      do
      {
        v82 = *(double *)(v11 + 40 * v10 + 32);
        v83 = v13;
        v84 = v81;
        do
        {
          if (v82 >= *(double *)v84)
            break;
          if (!v11)
            goto LABEL_143;
          v85 = v84 + 8;
          v86 = *(_OWORD *)(v84 + 8);
          v87 = *(_OWORD *)(v84 + 24);
          v88 = *(_OWORD *)(v84 - 16);
          *(_OWORD *)(v84 + 8) = *(_OWORD *)(v84 - 32);
          *(_OWORD *)(v84 + 24) = v88;
          v89 = *(double *)v84;
          *(_OWORD *)(v84 - 32) = v86;
          *(_OWORD *)(v84 - 16) = v87;
          *(double *)v84 = v82;
          v84 -= 40;
          ++v83;
          *(double *)(v85 + 32) = v89;
        }
        while (v10 != v83);
        ++v10;
        v81 += 40;
      }
      while (v10 != v30);
      v10 = v30;
      if (v30 < v13)
        goto LABEL_132;
      goto LABEL_39;
    }
LABEL_38:
    v31 = v116;
    if (v10 < v13)
      goto LABEL_132;
LABEL_39:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v31 + 2) + 1, 1, v31);
    v33 = *((_QWORD *)v31 + 2);
    v32 = *((_QWORD *)v31 + 3);
    v12 = v33 + 1;
    if (v33 >= v32 >> 1)
      v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, v31);
    *((_QWORD *)v31 + 2) = v12;
    v34 = v31 + 32;
    v35 = &v31[16 * v33 + 32];
    *(_QWORD *)v35 = v13;
    *((_QWORD *)v35 + 1) = v10;
    v116 = v31;
    if (v33)
    {
      while (1)
      {
        v36 = v12 - 1;
        if (v12 >= 4)
        {
          v41 = &v34[16 * v12];
          v42 = *((_QWORD *)v41 - 8);
          v43 = *((_QWORD *)v41 - 7);
          v47 = __OFSUB__(v43, v42);
          v44 = v43 - v42;
          if (v47)
            goto LABEL_121;
          v46 = *((_QWORD *)v41 - 6);
          v45 = *((_QWORD *)v41 - 5);
          v47 = __OFSUB__(v45, v46);
          v39 = v45 - v46;
          v40 = v47;
          if (v47)
            goto LABEL_122;
          v48 = v12 - 2;
          v49 = &v34[16 * v12 - 32];
          v51 = *(_QWORD *)v49;
          v50 = *((_QWORD *)v49 + 1);
          v47 = __OFSUB__(v50, v51);
          v52 = v50 - v51;
          if (v47)
            goto LABEL_124;
          v47 = __OFADD__(v39, v52);
          v53 = v39 + v52;
          if (v47)
            goto LABEL_127;
          if (v53 >= v44)
          {
            v71 = &v34[16 * v36];
            v73 = *(_QWORD *)v71;
            v72 = *((_QWORD *)v71 + 1);
            v47 = __OFSUB__(v72, v73);
            v74 = v72 - v73;
            if (v47)
              goto LABEL_131;
            v64 = v39 < v74;
            goto LABEL_75;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v65 = *((_QWORD *)v31 + 4);
            v66 = *((_QWORD *)v31 + 5);
            v47 = __OFSUB__(v66, v65);
            v58 = v66 - v65;
            v59 = v47;
            goto LABEL_69;
          }
          v38 = *((_QWORD *)v31 + 4);
          v37 = *((_QWORD *)v31 + 5);
          v47 = __OFSUB__(v37, v38);
          v39 = v37 - v38;
          v40 = v47;
        }
        if ((v40 & 1) != 0)
          goto LABEL_123;
        v48 = v12 - 2;
        v54 = &v34[16 * v12 - 32];
        v56 = *(_QWORD *)v54;
        v55 = *((_QWORD *)v54 + 1);
        v57 = __OFSUB__(v55, v56);
        v58 = v55 - v56;
        v59 = v57;
        if (v57)
          goto LABEL_126;
        v60 = &v34[16 * v36];
        v62 = *(_QWORD *)v60;
        v61 = *((_QWORD *)v60 + 1);
        v47 = __OFSUB__(v61, v62);
        v63 = v61 - v62;
        if (v47)
          goto LABEL_129;
        if (__OFADD__(v58, v63))
          goto LABEL_130;
        if (v58 + v63 >= v39)
        {
          v64 = v39 < v63;
LABEL_75:
          if (v64)
            v36 = v48;
          goto LABEL_77;
        }
LABEL_69:
        if ((v59 & 1) != 0)
          goto LABEL_125;
        v67 = &v34[16 * v36];
        v69 = *(_QWORD *)v67;
        v68 = *((_QWORD *)v67 + 1);
        v47 = __OFSUB__(v68, v69);
        v70 = v68 - v69;
        if (v47)
          goto LABEL_128;
        if (v70 < v58)
          goto LABEL_15;
LABEL_77:
        v75 = v36 - 1;
        if (v36 - 1 >= v12)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        if (!v11)
          goto LABEL_144;
        v76 = &v34[16 * v75];
        v77 = *(_QWORD *)v76;
        v78 = &v34[16 * v36];
        v79 = *((_QWORD *)v78 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + 40 * *(_QWORD *)v76), (double *)(v11 + 40 * *(_QWORD *)v78), v11 + 40 * v79, __dst);
        if (v1)
          goto LABEL_94;
        if (v79 < v77)
          goto LABEL_118;
        if (v36 > *((_QWORD *)v116 + 2))
          goto LABEL_119;
        *(_QWORD *)v76 = v77;
        *(_QWORD *)&v34[16 * v75 + 8] = v79;
        v80 = *((_QWORD *)v116 + 2);
        if (v36 >= v80)
          goto LABEL_120;
        v31 = v116;
        v12 = v80 - 1;
        memmove(&v34[16 * v36], v78 + 16, 16 * (v80 - 1 - v36));
        *((_QWORD *)v116 + 2) = v80 - 1;
        if (v80 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v6 = v113;
    v3 = v114;
    if (v10 >= v114)
    {
      v9 = v112;
      v103 = v116;
      v2 = v111;
      goto LABEL_104;
    }
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[8 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (char *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 8;
          v19 = v6 - 8;
          v20 = *((_QWORD *)v6 - 1);
          if (*(_DWORD *)(*((_QWORD *)v16 - 1) + 184) - *(_DWORD *)(v20 + 184) < 0)
          {
            if (v18 != v6 || v17 >= v6)
              *(_QWORD *)v17 = v20;
            v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7)
              goto LABEL_43;
          }
          else
          {
            v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *(_QWORD *)v17 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_43;
          }
          v17 -= 8;
          if (v16 <= v4)
            goto LABEL_43;
        }
      }
      goto LABEL_43;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_DWORD *)(*(_QWORD *)v6 + 184) - *(_DWORD *)(*(_QWORD *)v4 + 184) < 0)
        {
          v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        else
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v23 = v4;
          v15 = v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_43:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v24, &v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t result;
  char *v32;
  char *v33;
  char *v34;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 56;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 56;
  v34 = __src;
  v33 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -55)
    {
      if (__dst != a2 || &a2[56 * v11] <= __dst)
        memmove(__dst, a2, 56 * v11);
      v20 = &v4[56 * v11];
      v32 = v20;
      v34 = v6;
      if (v7 < v6 && v10 >= 56)
      {
        v21 = a3 - 56;
        v22 = v6;
        while (1)
        {
          v23 = (char *)(v21 + 56);
          v24 = *((_QWORD *)v22 - 7);
          v22 -= 56;
          if (*((_QWORD *)v20 - 7) >= v24)
          {
            v32 = v20 - 56;
            if (v23 < v20 || v21 >= (unint64_t)v20 || v23 != v20)
            {
              v28 = *(_OWORD *)(v20 - 56);
              v29 = *(_OWORD *)(v20 - 40);
              v30 = *(_OWORD *)(v20 - 24);
              *(_QWORD *)(v21 + 48) = *((_QWORD *)v20 - 1);
              *(_OWORD *)(v21 + 16) = v29;
              *(_OWORD *)(v21 + 32) = v30;
              *(_OWORD *)v21 = v28;
            }
            v22 = v6;
            v20 -= 56;
            if (v6 <= v7)
              goto LABEL_38;
          }
          else
          {
            if (v23 != v6 || v21 >= (unint64_t)v6)
            {
              v25 = *(_OWORD *)v22;
              v26 = *((_OWORD *)v22 + 1);
              v27 = *((_OWORD *)v22 + 2);
              *(_QWORD *)(v21 + 48) = *((_QWORD *)v22 + 6);
              *(_OWORD *)(v21 + 16) = v26;
              *(_OWORD *)(v21 + 32) = v27;
              *(_OWORD *)v21 = v25;
            }
            v34 = v22;
            if (v22 <= v7)
              goto LABEL_38;
          }
          v21 -= 56;
          v6 = v22;
          if (v20 <= v4)
            goto LABEL_38;
        }
      }
      goto LABEL_38;
    }
  }
  else if (v8 >= -55)
  {
    if (__dst != __src || &__src[56 * v9] <= __dst)
      memmove(__dst, __src, 56 * v9);
    v12 = &v4[56 * v9];
    v32 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 56)
    {
      do
      {
        if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        {
          if (v7 != v4)
          {
            v17 = *(_OWORD *)v4;
            v18 = *((_OWORD *)v4 + 1);
            v19 = *((_OWORD *)v4 + 2);
            *((_QWORD *)v7 + 6) = *((_QWORD *)v4 + 6);
            *((_OWORD *)v7 + 1) = v18;
            *((_OWORD *)v7 + 2) = v19;
            *(_OWORD *)v7 = v17;
          }
          v4 += 56;
          v33 = v4;
          v13 = v6;
        }
        else
        {
          v13 = v6 + 56;
          if (v7 < v6 || v7 >= v13 || v7 != v6)
          {
            v14 = *(_OWORD *)v6;
            v15 = *((_OWORD *)v6 + 1);
            v16 = *((_OWORD *)v6 + 2);
            *((_QWORD *)v7 + 6) = *((_QWORD *)v6 + 6);
            *((_OWORD *)v7 + 1) = v15;
            *((_OWORD *)v7 + 2) = v16;
            *(_OWORD *)v7 = v14;
          }
        }
        v7 += 56;
        if (v4 >= v12)
          break;
        v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      v34 = v7;
    }
LABEL_38:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v34, (const void **)&v33, &v32);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__dst, char *__src, char *a3, char *a4)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  char *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t result;
  char *v33;
  const void *v34;
  char *v35;

  v4 = a4;
  v5 = a3;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = (__src - __dst) / 72;
  v10 = a3 - __src;
  v11 = (a3 - __src) / 72;
  v35 = __dst;
  v34 = a4;
  if (v9 < v11)
  {
    if (v8 < -71)
      goto LABEL_78;
    if (a4 != __dst || &__dst[72 * v9] <= a4)
      memmove(a4, __dst, 72 * v9);
    v12 = &v4[72 * v9];
    v33 = v12;
    if (v6 < v5 && v8 >= 72)
    {
      while (1)
      {
        v13 = *(_QWORD *)v6;
        v14 = *(_QWORD *)v4;
        v15 = *(double *)(*(_QWORD *)v6 + 168);
        v16 = *(double *)(*(_QWORD *)v4 + 168);
        if (v15 != v16)
        {
          if (v15 < v16)
            goto LABEL_29;
          goto LABEL_25;
        }
        if ((*(_BYTE *)(v13 + 165) & 1) != 0)
        {
          if ((*(_BYTE *)(v14 + 165) & 1) == 0 && (*(_BYTE *)(v14 + 166) & 1) == 0)
            goto LABEL_25;
        }
        else
        {
          v17 = *(unsigned __int8 *)(v13 + 166);
          if ((*(_BYTE *)(v14 + 165) & 1) != 0)
          {
            if ((v17 & 1) == 0)
              goto LABEL_29;
          }
          else if (v17 != *(unsigned __int8 *)(v14 + 166))
          {
            if ((v17 & 1) == 0)
              goto LABEL_29;
            goto LABEL_25;
          }
        }
        v18 = *(_DWORD *)(v13 + 212);
        v19 = *(_DWORD *)(v14 + 212);
        if (v18 == v19)
        {
          if ((*(_BYTE *)(v13 + 208) & 1) != 0)
            goto LABEL_76;
          if ((*(_BYTE *)(v14 + 208) & 1) != 0)
            goto LABEL_77;
          if (*(_QWORD *)(v13 + 200) < *(_QWORD *)(v14 + 200))
          {
LABEL_29:
            v20 = v6 + 72;
            if (v7 < v6 || v7 >= v20 || v7 != v6)
              memmove(v7, v6, 0x48uLL);
            goto LABEL_33;
          }
        }
        else if (v18 < v19)
        {
          goto LABEL_29;
        }
LABEL_25:
        if (v7 != v4)
          memmove(v7, v4, 0x48uLL);
        v4 += 72;
        v34 = v4;
        v20 = v6;
LABEL_33:
        v7 += 72;
        if (v4 < v12)
        {
          v6 = v20;
          if (v20 < v5)
            continue;
        }
        v35 = v7;
        break;
      }
    }
LABEL_73:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v35, &v34, &v33);
    return 1;
  }
  if (v10 < -71)
    goto LABEL_78;
  if (a4 != __src || &__src[72 * v11] <= a4)
    memmove(a4, __src, 72 * v11);
  v21 = &v4[72 * v11];
  v33 = v21;
  v35 = v6;
  if (v7 >= v6 || v10 < 72)
    goto LABEL_73;
  v22 = v6;
  while (1)
  {
    v23 = *((_QWORD *)v21 - 9);
    v25 = *((_QWORD *)v22 - 9);
    v22 -= 72;
    v24 = v25;
    v26 = *(double *)(v23 + 168);
    v27 = *(double *)(v25 + 168);
    if (v26 != v27)
    {
      v28 = v5 - 72;
      if (v26 < v27)
        goto LABEL_49;
      goto LABEL_67;
    }
    if ((*(_BYTE *)(v23 + 165) & 1) != 0)
    {
      if ((*(_BYTE *)(v24 + 165) & 1) == 0 && (*(_BYTE *)(v24 + 166) & 1) == 0)
      {
        v28 = v5 - 72;
        goto LABEL_67;
      }
    }
    else
    {
      v29 = *(unsigned __int8 *)(v23 + 166);
      if ((*(_BYTE *)(v24 + 165) & 1) != 0)
      {
        if ((v29 & 1) == 0)
        {
          v28 = v5 - 72;
          if (v5 != v6)
            goto LABEL_51;
LABEL_50:
          if (v28 >= v6)
            goto LABEL_51;
LABEL_52:
          v35 = v22;
          if (v22 <= v7)
            goto LABEL_73;
          goto LABEL_72;
        }
      }
      else if (v29 != *(unsigned __int8 *)(v24 + 166))
      {
        v28 = v5 - 72;
        if ((v29 & 1) == 0)
          goto LABEL_49;
        goto LABEL_67;
      }
    }
    v30 = *(_DWORD *)(v23 + 212);
    v31 = *(_DWORD *)(v24 + 212);
    if (v30 != v31)
    {
      v28 = v5 - 72;
      if (v30 < v31)
        goto LABEL_49;
      goto LABEL_67;
    }
    if ((*(_BYTE *)(v23 + 208) & 1) != 0)
      break;
    if ((*(_BYTE *)(v24 + 208) & 1) != 0)
      goto LABEL_75;
    v28 = v5 - 72;
    if (*(_QWORD *)(v23 + 200) < *(_QWORD *)(v24 + 200))
    {
LABEL_49:
      if (v5 == v6)
        goto LABEL_50;
LABEL_51:
      memmove(v28, v22, 0x48uLL);
      goto LABEL_52;
    }
LABEL_67:
    v33 = v21 - 72;
    if (v5 < v21 || v28 >= v21 || v5 != v21)
      memmove(v28, v21 - 72, 0x48uLL);
    v22 = v6;
    v21 -= 72;
    if (v6 <= v7)
      goto LABEL_73;
LABEL_72:
    v6 = v22;
    v5 = v28;
    if (v21 <= v4)
      goto LABEL_73;
  }
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double partial apply for implicit closure #4 in IncrementalLayoutViewCache.item(data:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return implicit closure #4 in IncrementalLayoutViewCache.item(data:)(*(_QWORD *)(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutReuseLogging, &type metadata for EnableLazyLayoutReuseLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutReuseLogging, &type metadata for EnableLazyLayoutReuseLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutReuseLogging, &type metadata for EnableLazyLayoutReuseLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutReuseLogging, &type metadata for EnableLazyLayoutReuseLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutReuseLogging, &type metadata for EnableLazyLayoutReuseLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutReuseLogging, &type metadata for EnableLazyLayoutReuseLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutReuseLogging, &type metadata for EnableLazyLayoutReuseLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutReuseLogging, &type metadata for EnableLazyLayoutReuseLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutReuseLoggingAlways, &type metadata for EnableLazyLayoutReuseLoggingAlways);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutReuseLoggingAlways, &type metadata for EnableLazyLayoutReuseLoggingAlways);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutReuseLoggingAlways, &type metadata for EnableLazyLayoutReuseLoggingAlways);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutReuseLoggingAlways, &type metadata for EnableLazyLayoutReuseLoggingAlways);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutReuseLoggingAlways, &type metadata for EnableLazyLayoutReuseLoggingAlways);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutReuseLoggingAlways, &type metadata for EnableLazyLayoutReuseLoggingAlways);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutReuseLoggingAlways, &type metadata for EnableLazyLayoutReuseLoggingAlways);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableLazyLayoutReuseLoggingAlways, &type metadata for EnableLazyLayoutReuseLoggingAlways);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways);
  }
  return result;
}

_QWORD *specialized Slice._copyContents(initializing:)(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  if (!a2)
    goto LABEL_5;
  v10 = a3;
  if (!a3)
  {
LABEL_6:
    v11 = a4;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = a7;
    result[4] = v11;
    return (_QWORD *)v10;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (a5 == a4)
    {
LABEL_5:
      v10 = 0;
      goto LABEL_6;
    }
    v21 = result;
    v22 = a7;
    if (a5 <= a4)
    {
LABEL_16:
      __break(1u);
LABEL_17:
      v11 = a5;
      v10 = a5 - a4;
LABEL_18:
      swift_retain();
      swift_retain();
      outlined copy of _ViewList_ID.Canonical?(v7, v25);
      swift_retain();
      result = v21;
      a7 = v22;
      goto LABEL_7;
    }
    v13 = 0;
    v11 = a4 + 1;
    v23 = a6 + 56 * a4;
    v14 = 1;
    while ((a4 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)(v11 - 1) >= *(_QWORD *)(a6 + 16))
        goto LABEL_20;
      v15 = a2 + v13;
      v16 = *(_QWORD *)(v23 + v13 + 40);
      v7 = *(_QWORD *)(v23 + v13 + 48);
      v17 = *(_QWORD *)(v23 + v13 + 72);
      v18 = *(_QWORD *)(v23 + v13 + 80);
      v19 = *(_OWORD *)(v23 + v13 + 56);
      *(_QWORD *)v15 = *(_QWORD *)(v23 + v13 + 32);
      *(_QWORD *)(v15 + 8) = v16;
      *(_QWORD *)(v15 + 16) = v7;
      *(_OWORD *)(v15 + 24) = v19;
      *(_QWORD *)(v15 + 40) = v17;
      *(_QWORD *)(v15 + 48) = v18;
      v25 = v19;
      if (v10 == v14)
        goto LABEL_18;
      if (a5 == v11)
        goto LABEL_17;
      swift_retain();
      swift_retain();
      outlined copy of _ViewList_ID.Canonical?(v7, v25);
      result = (_QWORD *)swift_retain();
      if (v11 >= a4)
      {
        ++v14;
        v13 += 56;
        if (v11++ < a5)
          continue;
      }
      goto LABEL_16;
    }
    __break(1u);
LABEL_20:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized IncrementalLayoutCacheItem.init(cache:subgraph:outputs:state:list:elements:id:elementIndex:section:indirectMap:transition:transitionType:)(uint64_t a1, void *a2, uint64_t *a3, int a4, uint64_t a5, _QWORD *a6, int *a7, uint64_t a8, int a9, char a10, char a11, char a12, uint64_t a13, int a14, char a15, uint64_t a16, uint64_t a17)
{
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int v31;

  v28 = *a3;
  v20 = *a7;
  v31 = a7[1];
  v21 = *((_QWORD *)a7 + 1);
  *(_QWORD *)(a17 + 16) = 0;
  v22 = *MEMORY[0x1E0CFED28];
  *(_DWORD *)(a17 + 52) = *MEMORY[0x1E0CFED28];
  *(_OWORD *)(a17 + 168) = 0u;
  *(_OWORD *)(a17 + 184) = 0u;
  *(_QWORD *)(a17 + 200) = 0;
  *(_BYTE *)(a17 + 208) = 1;
  *(_DWORD *)(a17 + 212) = -1;
  *(_OWORD *)(a17 + 232) = 0u;
  *(_OWORD *)(a17 + 248) = 0u;
  *(_OWORD *)(a17 + 216) = 0u;
  *(_OWORD *)(a17 + 264) = 0u;
  *(_BYTE *)(a17 + 280) = 1;
  *(_OWORD *)(a17 + 320) = 0u;
  *(_OWORD *)(a17 + 336) = 0u;
  *(_OWORD *)(a17 + 288) = 0u;
  *(_OWORD *)(a17 + 304) = 0u;
  *(_BYTE *)(a17 + 352) = 1;
  *(_QWORD *)(a17 + 360) = 0;
  *(_DWORD *)(a17 + 368) = 0x20000;
  swift_beginAccess();
  swift_retain();
  swift_unownedRelease();
  *(_QWORD *)(a17 + 16) = a1;
  swift_endAccess();
  *(_QWORD *)(a17 + 24) = a2;
  *(_QWORD *)(a17 + 32) = v28;
  *(_QWORD *)(a17 + 40) = a3[1];
  if ((a5 & 0x100000000) != 0)
    v23 = v22;
  else
    v23 = a5;
  *(_DWORD *)(a17 + 48) = a4;
  *(_DWORD *)(a17 + 52) = v23;
  outlined init with copy of TableColumnList((uint64_t)a6, a17 + 56);
  *(_QWORD *)(a17 + 96) = a8;
  *(_DWORD *)(a17 + 136) = v20;
  *(_DWORD *)(a17 + 140) = v31;
  *(_QWORD *)(a17 + 144) = v21;
  swift_unownedRetain();
  v24 = a2;
  *(_QWORD *)(a17 + 152) = _ViewList_ID.reuseIdentifier.getter();
  *(_DWORD *)(a17 + 160) = a9;
  *(_BYTE *)(a17 + 164) = a10 & 1;
  *(_BYTE *)(a17 + 165) = a11 & 1;
  *(_BYTE *)(a17 + 166) = a12 & 1;
  v25 = a6[3];
  v26 = a6[4];
  __swift_project_boxed_opaque_existential_1(a6, v25);
  *(_QWORD *)(a17 + 104) = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 32))(v25, v26);
  *(_QWORD *)(a17 + 112) = a13;
  *(_DWORD *)(a17 + 120) = a14;
  *(_BYTE *)(a17 + 124) = a15 & 1;
  *(_QWORD *)(a17 + 128) = a16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a6);
  return a17;
}

double partial apply for implicit closure #16 in IncrementalLayoutViewCache.item(data:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return implicit closure #5 in IncrementalLayoutViewCache.item(data:)(v1, 96, a1);
}

uint64_t partial apply for closure #6 in IncrementalLayoutViewCache.item(data:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  swift_retain();
  result = swift_release();
  *(_QWORD *)(a1 + 24) = v1;
  return result;
}

uint64_t partial apply for closure #7 in IncrementalLayoutViewCache.item(data:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  swift_retain();
  result = swift_release();
  *(_QWORD *)(a1 + 8) = v1;
  return result;
}

uint64_t outlined consume of ReuseMessage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  if ((unint64_t)a4 >> 1 != 0xFFFFFFFF || a8 >= 2u)
    return outlined consume of ReuseMessage(a1, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t outlined consume of ReuseMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  unsigned int v8;
  uint64_t result;

  v8 = a8 >> 4;
  if (v8 <= 9)
  {
    if (((1 << v8) & 0x37C) != 0)
      return swift_release();
    if (v8 == 7)
    {
      swift_release();
      return swift_release();
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UpdateChildTransition and conformance UpdateChildTransition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UpdateChildTransition and conformance UpdateChildTransition;
  if (!lazy protocol witness table cache variable for type UpdateChildTransition and conformance UpdateChildTransition)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdateChildTransition, &unk_1E1AD9E68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateChildTransition and conformance UpdateChildTransition);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in closure #2 in IncrementalLayoutViewCache.item(data:)@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __int128 *v2;

  v2 = *(__int128 **)(v1 + 16);
  outlined init with take of ReuseMessage(v2, a1);
  return outlined retain of ReuseMessage((uint64_t)v2);
}

uint64_t outlined copy of ReuseMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  unsigned int v8;
  uint64_t result;

  v8 = a8 >> 4;
  if (v8 <= 9)
  {
    if (((1 << v8) & 0x37C) != 0)
      return swift_retain();
    if (v8 == 7)
    {
      swift_retain();
      return swift_retain();
    }
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

double partial apply for implicit closure #5 in IncrementalLayoutViewCache.item(data:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return implicit closure #5 in IncrementalLayoutViewCache.item(data:)(v1, 32, a1);
}

unint64_t lazy protocol witness table accessor for type CompareTransitionType and conformance CompareTransitionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompareTransitionType and conformance CompareTransitionType;
  if (!lazy protocol witness table cache variable for type CompareTransitionType and conformance CompareTransitionType)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CompareTransitionType, &unk_1E1AD6BD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompareTransitionType and conformance CompareTransitionType);
  }
  return result;
}

double partial apply for implicit closure #7 in IncrementalLayoutViewCache.item(data:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return implicit closure #5 in IncrementalLayoutViewCache.item(data:)(v1, 64, a1);
}

double partial apply for implicit closure #11 in IncrementalLayoutViewCache.item(data:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return implicit closure #5 in IncrementalLayoutViewCache.item(data:)(v1, 80, a1);
}

double partial apply for implicit closure #10 in IncrementalLayoutViewCache.item(data:)@<D0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = implicit closure #10 in IncrementalLayoutViewCache.item(data:)((_QWORD *)*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1).n128_u64[0];
  return result;
}

double partial apply for implicit closure #6 in IncrementalLayoutViewCache.item(data:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return implicit closure #5 in IncrementalLayoutViewCache.item(data:)(v1, 48, a1);
}

_OWORD *outlined init with take of ReuseMessage(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  *(_OWORD *)((char *)a2 + 41) = *(__int128 *)((char *)a1 + 41);
  a2[1] = v3;
  a2[2] = v4;
  *a2 = v2;
  return a2;
}

uint64_t outlined retain of ReuseMessage(uint64_t a1)
{
  outlined copy of ReuseMessage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  return a1;
}

double partial apply for implicit closure #3 in add #1 (item:reset:) in IncrementalLayoutViewCache.item(data:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  swift_beginAccess();
  *(_QWORD *)a1 = *(_QWORD *)(*(_QWORD *)(v1 + 160) + 16);
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 56) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type IncrementalLayoutReuseIdleInput and conformance IncrementalLayoutReuseIdleInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncrementalLayoutReuseIdleInput and conformance IncrementalLayoutReuseIdleInput;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutReuseIdleInput and conformance IncrementalLayoutReuseIdleInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutReuseIdleInput, &type metadata for IncrementalLayoutReuseIdleInput);
    atomic_store(result, &lazy protocol witness table cache variable for type IncrementalLayoutReuseIdleInput and conformance IncrementalLayoutReuseIdleInput);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeChildTransition and conformance MakeChildTransition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MakeChildTransition and conformance MakeChildTransition;
  if (!lazy protocol witness table cache variable for type MakeChildTransition and conformance MakeChildTransition)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeChildTransition, &unk_1E1B19120);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeChildTransition and conformance MakeChildTransition);
  }
  return result;
}

uint64_t outlined release of MakeChildTransition(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

double partial apply for implicit closure #4 in closure #1 in IncrementalLayoutViewCache.collect()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return implicit closure #5 in IncrementalLayoutViewCache.item(data:)(v1, 144, a1);
}

double partial apply for implicit closure #2 in IncrementalLayoutViewCache.ensureRemoved(item:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return implicit closure #5 in IncrementalLayoutViewCache.item(data:)(v1, 128, a1);
}

void type metadata accessor for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame));
  }
}

uint64_t outlined init with copy of DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>(0, (unint64_t *)&lazy cache variable for type metadata for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, (uint64_t (*)(uint64_t))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>, &lazy protocol witness table cache variable for type CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>> and conformance CountingIndexCollection<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA200]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ShadowRowCollection<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowRowCollection);
    lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>((unint64_t *)&lazy protocol witness table cache variable for type ShadowRowCollection<TableDataSourceAdaptor> and conformance ShadowRowCollection<A>, (unint64_t *)&lazy cache variable for type metadata for ShadowRowCollection<TableDataSourceAdaptor>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowRowCollection, (uint64_t)&protocol conformance descriptor for ShadowRowCollection<A>);
    v0 = type metadata accessor for CountingIndexCollection();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
  }
}

uint64_t lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of TableRowID(uint64_t a1, uint64_t a2)
{
  __swift_memcpy41_8(a2, a1);
  return a2;
}

uint64_t outlined init with copy of TableRowID(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TableRowID(a2, a1);
  return a2;
}

uint64_t outlined destroy of DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_186F87084()
{
  return 16;
}

__n128 sub_186F87090(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ShadowSectionCollection<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowSectionCollection);
    lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>((unint64_t *)&lazy protocol witness table cache variable for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>, &lazy cache variable for type metadata for ShadowSectionCollection<TableDataSourceAdaptor>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowSectionCollection, (uint64_t)&protocol conformance descriptor for ShadowSectionCollection<A>);
    v0 = type metadata accessor for CountingIndexCollection();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
  }
}

void type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (!*a2)
  {
    v10 = a3(255);
    v11 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, MEMORY[0x1E0CE5A00]);
    v12 = a5(a1, v10, v11);
    if (!v13)
      atomic_store(v12, a2);
  }
}

uint64_t outlined destroy of IndexingIterator<SubviewsCollection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for VStack<TableHeaderViewCore>(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC8F8]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t outlined init with copy of TableColumnCollection.Entry?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TableColumnCollection.Entry?, type metadata accessor for TableColumnCollection.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of PlatformItem(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MapKitPlatformItem(a2, a1);
  return a2;
}

uint64_t outlined copy of PlatformItemCollection.Storage(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of PlatformItemCollection.Storage(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t specialized static IncrementalLayoutReuseIdleModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  lazy protocol witness table accessor for type IncrementalLayoutReuseIdleInput and conformance IncrementalLayoutReuseIdleInput();
  return PropertyList.subscript.setter();
}

unint64_t type metadata accessor for UIMenuElement()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIMenuElement;
  if (!lazy cache variable for type metadata for UIMenuElement)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  }
  return result;
}

uint64_t partial apply for closure #1 in _IncrementalLayoutViewCache.logReuse(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in _IncrementalLayoutViewCache.logReuse(_:)(a1, *(void (**)(_QWORD *__return_ptr))(v1 + 32));
}

uint64_t sub_186F87378()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in IncrementalLayoutViewCache.enqueueItemPhaseUpdate(_:)()
{
  uint64_t v0;

  return IncrementalLayoutViewCache.updateItemPhase(_:)(*(_QWORD *)(v0 + 24));
}

uint64_t outlined retain of _ScrollableLayoutProxy(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of _ScrollableLayoutProxy(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined init with copy of SectionConfiguration(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SectionAccumulator.Item(a2, a1);
  return a2;
}

uint64_t outlined init with copy of SubviewCollection(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DataSource(a2, a1);
  return a2;
}

uint64_t outlined destroy of SubviewCollection(uint64_t a1)
{
  destroy for DataSource(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type SubviewCollection and conformance SubviewCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection;
  if (!lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewCollection, &type metadata for SubviewCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection;
  if (!lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewCollection, &type metadata for SubviewCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection;
  if (!lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewCollection, &type metadata for SubviewCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection;
  if (!lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewCollection, &type metadata for SubviewCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection;
  if (!lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewCollection, &type metadata for SubviewCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection);
  }
  return result;
}

void type metadata accessor for IndexingIterator<_ArchivedViewStates>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for IndexingIterator<_ArchivedViewStates>)
  {
    type metadata accessor for _ArchivedViewStates(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ArchivedViewStates and conformance _ArchivedViewStates, type metadata accessor for _ArchivedViewStates, (uint64_t)&protocol conformance descriptor for _ArchivedViewStates);
    v0 = type metadata accessor for IndexingIterator();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<_ArchivedViewStates>);
  }
}

uint64_t outlined init with take of Decodable & Encodable & Hashable(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  *(_QWORD *)(a2 + 48) = *((_QWORD *)a1 + 6);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

unint64_t type metadata accessor for Decodable & Encodable & Hashable()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Decodable & Encodable & Hashable;
  if (!lazy cache variable for type metadata for Decodable & Encodable & Hashable)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Decodable & Encodable & Hashable);
  }
  return result;
}

uint64_t outlined init with copy of SubviewsCollectionSlice(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SubviewsCollectionSlice(a2, a1);
  return a2;
}

uint64_t outlined destroy of SubviewsCollectionSlice(uint64_t a1)
{
  destroy for SubviewsCollectionSlice(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice;
  if (!lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewsCollectionSlice, &type metadata for SubviewsCollectionSlice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice;
  if (!lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewsCollectionSlice, &type metadata for SubviewsCollectionSlice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice;
  if (!lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewsCollectionSlice, &type metadata for SubviewsCollectionSlice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice;
  if (!lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewsCollectionSlice, &type metadata for SubviewsCollectionSlice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice);
  }
  return result;
}

uint64_t outlined init with copy of SubviewsCollection(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DataSource(a2, a1);
  return a2;
}

uint64_t outlined destroy of SubviewsCollection(uint64_t a1)
{
  destroy for DataSource(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection;
  if (!lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewsCollection, &type metadata for SubviewsCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection;
  if (!lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewsCollection, &type metadata for SubviewsCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection;
  if (!lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewsCollection, &type metadata for SubviewsCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection;
  if (!lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewsCollection, &type metadata for SubviewsCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<SliderMark<Double>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<SliderMark<Double>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for SliderMark<Double>, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E0DEB070], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SliderMark);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SliderMark<Double>>);
  }
}

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEB078], MEMORY[0x1E0DEB070]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

uint64_t destroy for MakeChildTransition()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MakeChildTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v4 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v4;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MakeChildTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v4;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  v5 = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v5;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  return a1;
}

uint64_t assignWithTake for MakeChildTransition(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_release();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for MakeChildTransition(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MakeChildTransition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for MakeChildTransition()
{
  return &unk_1E1B19120;
}

uint64_t getEnumTagSinglePayload for IncrementalViewPhase(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for IncrementalViewPhase(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

void *type metadata accessor for IncrementalViewPhase()
{
  return &unk_1E1AD32A0;
}

uint64_t destroy for ReuseMessage(uint64_t a1)
{
  return outlined consume of ReuseMessage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t initializeWithCopy for ReuseMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_BYTE *)(a2 + 56);
  outlined copy of ReuseMessage(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = v10;
  return a1;
}

uint64_t assignWithCopy for ReuseMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_BYTE *)(a2 + 56);
  outlined copy of ReuseMessage(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v18 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v10;
  outlined consume of ReuseMessage(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for ReuseMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unsigned __int8 v13;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_BYTE *)(a2 + 56);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v3;
  v13 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v4;
  outlined consume of ReuseMessage(v5, v7, v6, v8, v9, v10, v11, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReuseMessage(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ReuseMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 2 * -a2;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_BYTE *)(result + 56) = 0;
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for ReuseMessage(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56) >> 4;
}

uint64_t destructiveProjectEnumData for ReuseMessage(uint64_t result)
{
  *(_BYTE *)(result + 56) &= 0xFu;
  return result;
}

uint64_t destructiveInjectEnumTag for ReuseMessage(uint64_t result, char a2)
{
  char v2;

  v2 = *(_BYTE *)(result + 56) & 1 | (16 * a2);
  *(_QWORD *)(result + 24) &= 1uLL;
  *(_BYTE *)(result + 56) = v2;
  return result;
}

void *type metadata accessor for ReuseMessage()
{
  return &unk_1E1B18FE0;
}

void *type metadata accessor for CompareTransitionType()
{
  return &unk_1E1AD6BD0;
}

uint64_t assignWithCopy for UpdateChildTransition(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for UpdateChildTransition(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  return a1;
}

void *type metadata accessor for UpdateChildTransition()
{
  return &unk_1E1AD9E68;
}

uint64_t assignWithCopy for IncrementalTransaction(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for IncrementalTransaction(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for IncrementalTransaction(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IncrementalTransaction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void *type metadata accessor for IncrementalTransaction()
{
  return &unk_1E1ADC140;
}

uint64_t destroy for IncrementalViewGeometry()
{
  swift_release();
  return swift_release();
}

uint64_t assignWithCopy for IncrementalViewGeometry(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for IncrementalViewGeometry(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IncrementalViewGeometry(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IncrementalViewGeometry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for IncrementalViewGeometry()
{
  return &unk_1E1AE1718;
}

ValueMetadata *type metadata accessor for IncrementalLayoutReuseIdleInput()
{
  return &type metadata for IncrementalLayoutReuseIdleInput;
}

uint64_t destroy for UpdateChildOutputs()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for UpdateChildOutputs(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UpdateChildOutputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t assignWithTake for UpdateChildOutputs(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for UpdateChildOutputs()
{
  return &type metadata for UpdateChildOutputs;
}

uint64_t initializeBufferWithCopyOfBuffer for MakeChildOutputs(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MakeChildOutputs(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t assignWithTake for MakeChildOutputs(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for MakeChildOutputs(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MakeChildOutputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MakeChildOutputs()
{
  return &type metadata for MakeChildOutputs;
}

ValueMetadata *type metadata accessor for IncrementalCollectedPlacements()
{
  return &type metadata for IncrementalCollectedPlacements;
}

uint64_t assignWithCopy for UpdateViewCache(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for UpdateViewCache(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateViewCache(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateViewCache(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 20) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateViewCache()
{
  return &type metadata for UpdateViewCache;
}

uint64_t sub_186F88894()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t *initializeBufferWithCopyOfBuffer for IncrementalTransition(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, unint64_t, uint64_t);

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v11 = *(_DWORD *)a2;
    v10 = (unint64_t)a2 + 11;
    *(_DWORD *)a1 = v11;
    v12 = (_QWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
    v13 = ((unint64_t)v12 + v6 + 8) & ~v6;
    v14 = ((v10 & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6;
    v15 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v15(v13, v14, v4);
  }
  return v3;
}

_DWORD *assignWithCopy for IncrementalTransition(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

_DWORD *initializeWithTake for IncrementalTransition(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_DWORD *assignWithTake for IncrementalTransition(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  swift_release();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for IncrementalTransition(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = (unint64_t *)((a1 + 11) & 0xFFFFFFFFFFFFFFF8);
      if (v5 > 0x7FFFFFFE)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v7 + 8) & ~v7);
      v16 = *v15;
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      if ((v16 + 1) >= 2)
        return v16;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_186F88BC4 + 4 * byte_187BFA62A[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for IncrementalTransition(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t assignWithCopy for IncrementalPreference(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for IncrementalPreference(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IncrementalPreference(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IncrementalPreference(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t initializeWithCopy for CacheItemDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CacheItemDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithTake for CacheItemDescription(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CacheItemDescription(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CacheItemDescription(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void *type metadata accessor for CacheItemDescription()
{
  return &unk_1E1B191B8;
}

uint64_t partial apply for closure #1 in static Rule._updateDefault(_:)()
{
  return closure #1 in static Rule._updateDefault(_:)();
}

void Table.init(columns:rows:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD v8[2];
  _OWORD v9[4];

  memset(v9, 0, 57);
  memset(v8, 0, sizeof(v8));
  Table.init(of:selection:columnCustomization:columns:rows:)(a5, (uint64_t)v9, (uint64_t)v8, a1, a2, a3, a4, a5, a6, a7, a8);
}

void Table.init(selection:columns:rows:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  _OWORD v20[2];
  _BYTE v21[72];

  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v15 = type metadata accessor for OptionalToAnySelectionManager(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OptionalToAnySelectionManager<A>, v15);
  Binding.projecting<A>(_:)();
  memset(v20, 0, sizeof(v20));
  Table.init(of:selection:columnCustomization:columns:rows:)(a6, (uint64_t)v21, (uint64_t)v20, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_186F89304()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void Table.init(selection:columns:rows:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  _OWORD v20[2];
  _BYTE v21[72];

  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  v15 = type metadata accessor for SetToAnySelectionManager(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SetToAnySelectionManager<A>, v15);
  Binding.projecting<A>(_:)();
  memset(v20, 0, sizeof(v20));
  Table.init(of:selection:columnCustomization:columns:rows:)(a8, (uint64_t)v21, (uint64_t)v20, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_186F89494()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

BOOL static AccessibilityLabeledPairRole.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void AccessibilityLabeledPairRole.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int AccessibilityLabeledPairRole.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t View.accessibilityLinkedGroup<A>(id:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.accessibilityRelationship<A>(_:id:in:)(2, a1, a2, a3, a4, a5);
}

uint64_t View.accessibilityRelationship<A>(_:id:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a6;
  v24 = a4;
  v9 = a1;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for RelationshipModifier(0, v14, v15, v13);
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = (char *)&v23 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a2, a5, v19);
  *v21 = v9;
  (*(void (**)(_BYTE *, char *, uint64_t))(v10 + 32))(&v21[*(int *)(v16 + 36)], v12, a5);
  *(_QWORD *)&v21[*(int *)(v16 + 40)] = a3;
  MEMORY[0x18D75B4AC](v21, v24, v16, v25);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v17 + 8))(v21, v16);
}

uint64_t View.accessibilityLabeledPair<A>(role:id:in:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibilityRelationship<A>(_:id:in:)(a1 & 1, a2, a3, a4, a5, a6);
}

unint64_t lazy protocol witness table accessor for type AccessibilityLabeledPairRole and conformance AccessibilityLabeledPairRole()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityLabeledPairRole and conformance AccessibilityLabeledPairRole;
  if (!lazy protocol witness table cache variable for type AccessibilityLabeledPairRole and conformance AccessibilityLabeledPairRole)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLabeledPairRole, &type metadata for AccessibilityLabeledPairRole);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLabeledPairRole and conformance AccessibilityLabeledPairRole);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessibilityLabeledPairRole(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_186F89724 + 4 * byte_187BFB2F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_186F89758 + 4 * byte_187BFB2F0[v4]))();
}

uint64_t sub_186F89758(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F89760(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186F89768);
  return result;
}

uint64_t sub_186F89774(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186F8977CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_186F89780(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F89788(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityLabeledPairRole()
{
  return &type metadata for AccessibilityLabeledPairRole;
}

double static RelationshipModifier._makeView(modifier:inputs:body:)@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, double)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double *v49;
  double result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;

  v69 = a7;
  v88 = *MEMORY[0x1E0C80C00];
  v65 = type metadata accessor for Transform.State(255, a5, a6, a4);
  v12 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v12, v13);
  v64 = (char *)&v51 - v14;
  v16 = type metadata accessor for Transform(0, a5, a6, v15);
  v67 = *(_QWORD *)(v16 - 8);
  v68 = v16;
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v66 = (uint64_t)&v51 - v19;
  LODWORD(v53) = *a1;
  v20 = *(_QWORD *)a2;
  LODWORD(v19) = *(_DWORD *)(a2 + 8);
  v21 = *(_QWORD *)(a2 + 16);
  v22 = *(_DWORD *)(a2 + 24);
  v23 = *(_DWORD *)(a2 + 28);
  v24 = *(_DWORD *)(a2 + 32);
  v25 = *(_DWORD *)(a2 + 36);
  v26 = *(_QWORD *)(a2 + 40);
  v27 = *(_QWORD *)(a2 + 48);
  v29 = *(_DWORD *)(a2 + 56);
  v28 = *(_DWORD *)(a2 + 60);
  v30 = *(_DWORD *)(a2 + 64);
  v31 = *(_DWORD *)(a2 + 68);
  v32 = *(_DWORD *)(a2 + 72);
  v33 = *(_DWORD *)(a2 + 76);
  v34 = *(_DWORD *)(a2 + 80);
  v72 = v20;
  v63 = v19;
  LODWORD(v73) = v19;
  v74 = v21;
  v62 = v22;
  v75 = v22;
  v76 = v23;
  v61 = v23;
  v60 = v24;
  v77 = v24;
  v78 = v25;
  v59 = v25;
  v79 = v26;
  v80 = v27;
  v81 = v29;
  v82 = v28;
  v58 = v28;
  v57 = v30;
  v83 = v30;
  v84 = v31;
  v56 = v31;
  v55 = v32;
  v85 = v32;
  v86 = v33;
  v54 = v33;
  v87 = v34;
  a3(&v70, v18);
  v72 = v27;
  LODWORD(v73) = v29;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0)
  {
LABEL_5:
    v35 = v70;
    goto LABEL_6;
  }
  type metadata accessor for AccessibilityRelationshipScope();
  lazy protocol witness table accessor for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope(&lazy protocol witness table cache variable for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope, (uint64_t)&protocol conformance descriptor for AccessibilityRelationshipScope);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v35 = v70;
  if (v72)
  {
    v52 = v72;
    v72 = v70;
    v73 = v71;
    v36 = _ViewOutputs.subscript.getter();
    if ((v36 & 0x100000000) != 0)
    {
      swift_release();
      goto LABEL_6;
    }
    LODWORD(v72) = v53;
    v53 = v36;
    type metadata accessor for RelationshipModifier(255, a5, a6, v37);
    type metadata accessor for _GraphValue();
    v38 = _GraphValue.value.getter();
    v72 = v20;
    LODWORD(v73) = v63;
    v74 = v21;
    v75 = v62;
    v76 = v61;
    v77 = v60;
    v78 = v59;
    v79 = v26;
    v80 = v27;
    v81 = v29;
    v82 = v58;
    v83 = v57;
    v84 = v56;
    v85 = v55;
    v86 = v54;
    v87 = v34;
    swift_getKeyPath();
    v39 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    v40 = (uint64_t)v64;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v64, 1, 1);
    v41 = v66;
    v42 = Transform.init(selfAttribute:modifier:nodeList:accessibilityEnabled:scope:state:)(*MEMORY[0x1E0CFED28], v38, v53, v39, v52, v40, a5, a6, v66);
    v44 = MEMORY[0x1E0C80A78](v42, v43);
    v45 = v68;
    *(&v51 - 2) = v68;
    *(&v51 - 1) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Transform<A>, v45, v44);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<AccessibilityNodeList>, (uint64_t)&type metadata for AccessibilityNodeList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
    v47 = v46;
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v41, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_3, (uint64_t)(&v51 - 4), v45, MEMORY[0x1E0DEDCE8], v47, MEMORY[0x1E0DEDD18], v48);
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v41, v45);
    static AGAttributeFlags.removable.getter();
    AGGraphSetFlags();
    LOBYTE(v72) = 0;
    _ViewOutputs.subscript.setter();
    swift_release();
    goto LABEL_5;
  }
LABEL_6:
  v49 = (double *)v69;
  *v69 = v35;
  result = v71;
  v49[1] = v71;
  return result;
}

uint64_t Transform.init(selfAttribute:modifier:nodeList:accessibilityEnabled:scope:state:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(_DWORD *)(a9 + 12) = a4;
  *(_QWORD *)(a9 + 16) = a5;
  v12 = a9 + *(int *)(type metadata accessor for Transform(0, a7, a8, a4) + 52);
  type metadata accessor for Transform.State(255, a7, a8, v13);
  v14 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, a6, v14);
}

uint64_t RelationshipModifier.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(70);
  v0._object = (void *)0x8000000187BD3E90;
  v0._countAndFlagsBits = 0xD000000000000030;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 543451424;
  v1._object = (void *)0xE400000000000000;
  String.append(_:)(v1);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v2._countAndFlagsBits = 0x617073656D616E20;
  v2._object = (void *)0xEC000000203A6563;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

BOOL static RelationshipModifier.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  int v7;
  uint64_t v8;

  v6 = *a1;
  v7 = *a2;
  switch(v6)
  {
    case 2:
      if (v7 != 2)
        return 0;
      break;
    case 3:
      if (v7 != 3)
        return 0;
      break;
    case 4:
      if (v7 != 4)
        return 0;
      break;
    default:
      if ((v7 - 2) < 3 || ((v7 ^ v6) & 1) != 0)
        return 0;
      break;
  }
  v8 = type metadata accessor for RelationshipModifier(0, a3, a4, a4);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    return *(_QWORD *)&a1[*(int *)(v8 + 40)] == *(_QWORD *)&a2[*(int *)(v8 + 40)];
  return 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RelationshipModifier<A>(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  return static RelationshipModifier.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance RelationshipModifier<A>@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, double)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  return static RelationshipModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance RelationshipModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for RelationshipModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t Transform.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  v4 = type metadata accessor for RelationshipModifier(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

Swift::Int static Transform.State.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  if (!static RelationshipModifier.== infix(_:_:)(a1, a2, a3, a4))
    return 0;
  v9 = *(int *)(type metadata accessor for Transform.State(0, a3, a4, v8) + 36);
  return specialized static Set.== infix(_:_:)(*(_QWORD *)&a1[v9], *(_QWORD *)&a2[v9]);
}

uint64_t Transform.State.init(modifier:nodeIDs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v10 = type metadata accessor for RelationshipModifier(0, a3, a4, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  result = type metadata accessor for Transform.State(0, a3, a4, v11);
  *(_QWORD *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

Swift::Int protocol witness for static Equatable.== infix(_:_:) in conformance Transform<A>.State(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  return static Transform.State.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t Transform.updateValue()(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int CurrentAttribute;
  unint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *);
  char *v58;
  char *v59;
  unsigned int (*v60)(char *, uint64_t, uint64_t);
  char *v61;
  void (*v62)(char *, uint64_t);
  unint64_t *Value;
  unint64_t v64;
  unint64_t v65;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  void (*v73)(unsigned __int8 *, uint64_t);
  unsigned __int8 *v74;
  char *v75;
  unsigned int *v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(unsigned __int8 *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  void *v93;
  unsigned __int8 *v94;
  char *v95;
  void (*v96)(char *, uint64_t, uint64_t);
  void (*v97)(char *, _QWORD, uint64_t, uint64_t);
  char *v98;
  uint64_t v99;
  unsigned int *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unsigned __int8 *v113;
  uint64_t v114;
  uint64_t TupleTypeMetadata2;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = v7;
  v8 = *(_QWORD *)(v7 + 24);
  v10 = type metadata accessor for Transform.State(255, v3, v8, v9);
  v11 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v110 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v12);
  v111 = (char *)&v94 - v13;
  v116 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v109 = (unsigned __int8 *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v94 - v19;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v94 - v23;
  v117 = v8;
  v26 = type metadata accessor for RelationshipModifier(0, v3, v8, v25);
  v107 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v108 = (uint64_t)&v94 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v106 = (uint64_t)&v94 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v112 = v10;
  v113 = (unsigned __int8 *)&v94 - v34;
  v119 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (unint64_t)&v94 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39, v40);
  v118 = (uint64_t)&v94 - v41;
  if (*(_BYTE *)AGGraphGetValue() != 1)
  {
    Value = (unint64_t *)AGGraphGetValue();
    v64 = *Value;
    v65 = Value[1];
    swift_bridgeObjectRetain();
    v120 = v64;
    v121 = v65;
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  v42 = *v2;
  if (*v2 == *MEMORY[0x1E0CFED28])
  {
    CurrentAttribute = AGGraphGetCurrentAttribute();
    if (CurrentAttribute == v42)
    {
      __break(1u);
      goto LABEL_24;
    }
    *v2 = CurrentAttribute;
  }
  v94 = (unsigned __int8 *)v38;
  v103 = v26;
  v98 = v6;
  v99 = v4;
  v44 = (unint64_t *)AGGraphGetValue();
  v102 = v45;
  v46 = *v44;
  v101 = v44[1];
  v48 = (uint64_t)v113;
  v47 = v114;
  Transform.modifier.getter(v114, v49, (uint64_t)v113);
  swift_bridgeObjectRetain_n();
  v50 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF8UniqueIDVs5NeverOTg503_s7d69UI9Transform33_725F422359ECCADDAF5CC82A425651EELLV11updateValueyyFAA8h7IDVAA17fG53Ccfu_33_2f504ee4f610784b00e9281caac81f7cAiGTf3nnnpk_nTf1cn_n(v46);
  v105 = v46;
  swift_bridgeObjectRelease();
  v51 = specialized Set.init<A>(_:)((uint64_t)v50);
  swift_bridgeObjectRelease();
  v52 = v118;
  v104 = v3;
  Transform.State.init(modifier:nodeIDs:)(v48, v51, v3, v117, v118);
  v53 = v119;
  v54 = v112;
  v96 = *(void (**)(char *, uint64_t, uint64_t))(v119 + 16);
  v96(v24, v52, v112);
  v97 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56);
  v97(v24, 0, 1, v54);
  v55 = *(int *)(v47 + 52);
  v100 = v2;
  v56 = v116;
  v57 = *(void (**)(char *))(v116 + 16);
  v95 = (char *)v2 + v55;
  v57(v20);
  v58 = v111;
  v59 = &v111[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v57)(v111, v24, v11);
  ((void (*)(char *, char *, uint64_t))v57)(v59, v20, v11);
  v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
  v61 = v58;
  if (v60(v58, 1, v54) == 1)
  {
    v62 = *(void (**)(char *, uint64_t))(v56 + 8);
    v62(v20, v11);
    v62(v24, v11);
    if (v60(v59, 1, v54) == 1)
    {
      v62(v58, v11);
LABEL_22:
      v120 = v105;
      v121 = v101;
      AGGraphSetOutputValue();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v119 + 8))(v118, v54);
    }
    goto LABEL_11;
  }
  v67 = v109;
  ((void (*)(unsigned __int8 *, char *, uint64_t))v57)(v109, v61, v11);
  if (v60(v59, 1, v54) == 1)
  {
    v62 = *(void (**)(char *, uint64_t))(v116 + 8);
    v62(v20, v11);
    v62(v24, v11);
    (*(void (**)(unsigned __int8 *, uint64_t))(v119 + 8))(v67, v54);
LABEL_11:
    v68 = v104;
    v69 = v103;
    (*(void (**)(char *, uint64_t))(v110 + 8))(v61, TupleTypeMetadata2);
    goto LABEL_13;
  }
  v70 = v119;
  v71 = v94;
  (*(void (**)(unsigned __int8 *, char *, uint64_t))(v119 + 32))(v94, v59, v54);
  v72 = v104;
  LODWORD(TupleTypeMetadata2) = static Transform.State.== infix(_:_:)(v67, v71, v104, v117);
  v73 = *(void (**)(unsigned __int8 *, uint64_t))(v70 + 8);
  v74 = v71;
  v68 = v72;
  v73(v74, v54);
  v62 = *(void (**)(char *, uint64_t))(v116 + 8);
  v62(v20, v11);
  v62(v24, v11);
  v73(v67, v54);
  v62(v61, v11);
  v69 = v103;
  if ((TupleTypeMetadata2 & 1) != 0)
    goto LABEL_22;
LABEL_13:
  if ((v102 & 1) == 0)
    goto LABEL_22;
  v75 = v95;
  v62(v95, v11);
  v96(v75, v118, v54);
  v97(v75, 0, 1, v54);
  v76 = v100;
  AccessibilityRelationshipScope.clear(from:)(*v100);
  v77 = v113;
  v78 = v114;
  Transform.modifier.getter(v114, v79, (uint64_t)v113);
  v80 = *(void (**)(unsigned __int8 *, uint64_t))(v107 + 8);
  LODWORD(v116) = *v77;
  v80(v77, v69);
  v81 = v106;
  Transform.modifier.getter(v78, v82, v106);
  v83 = v81 + *(int *)(v69 + 36);
  v84 = v99;
  v85 = (uint64_t)v98;
  (*(void (**)(char *, uint64_t, uint64_t))(v99 + 32))(v98, v83, v68);
  v86 = v108;
  Transform.modifier.getter(v78, v87, v108);
  v88 = *(_QWORD *)(v86 + *(int *)(v69 + 40));
  v38 = v105;
  swift_bridgeObjectRetain();
  v80((unsigned __int8 *)v86, v69);
  AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)(v116, v38, v85, v88, *v76, v68);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v85, v68);
  if (v38 >> 62)
  {
LABEL_24:
    swift_bridgeObjectRetain();
    v89 = _CocoaArrayWrapper.endIndex.getter();
    if (v89)
      goto LABEL_16;
    goto LABEL_25;
  }
  v89 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v89)
  {
LABEL_16:
    if (v89 < 1)
      __break(1u);
    v90 = 0;
    v91 = *((_QWORD *)v100 + 2);
    do
    {
      if ((v38 & 0xC000000000000001) != 0)
        v92 = (char *)MEMORY[0x18D75E3BC](v90, v38);
      else
        v92 = (char *)*(id *)(v38 + 8 * v90 + 32);
      v93 = v92;
      ++v90;
      *(_QWORD *)&v92[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope] = v91;
      swift_retain();

      swift_release();
    }
    while (v89 != v90);
  }
LABEL_25:
  swift_bridgeObjectRelease();
  DisplayList.Version.init(forUpdate:)();
  v120 = v38;
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v119 + 8))(v118, v112);
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF8UniqueIDVs5NeverOTg503_s7d69UI9Transform33_725F422359ECCADDAF5CC82A425651EELLV11updateValueyyFAA8h7IDVAA17fG53Ccfu_33_2f504ee4f610784b00e9281caac81f7cAiGTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x1E0DEE9D8];
    if (!v2)
      return (char *)v3;
    v10 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v10;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (char *)MEMORY[0x18D75E3BC](v5, a1);
      else
        v6 = (char *)*(id *)(a1 + 8 * v5 + 32);
      v7 = *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];

      v9 = *(_QWORD *)(v10 + 16);
      v8 = *(_QWORD *)(v10 + 24);
      if (v9 >= v8 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1);
      ++v5;
      *(_QWORD *)(v10 + 16) = v9 + 1;
      *(_QWORD *)(v10 + 8 * v9 + 32) = v7;
      if (v2 == v5)
        return (char *)v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityRelationshipScope.clear(from:)(unsigned int a1)
{
  uint64_t *v1;
  char v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  unsigned __int8 v22;
  Swift::UInt v23;
  char v24;
  _QWORD *v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  Swift::Int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[48];
  char *v61;
  _OWORD v62[2];
  __int128 v63;
  _OWORD v64[3];
  char v65;
  unint64_t v66;

  v3 = v1;
  swift_beginAccess();
  specialized Dictionary.removeValue(forKey:)(a1, &v53);
  swift_endAccess();
  if (!*((_QWORD *)&v54 + 1))
    return outlined destroy of TableRowID?((uint64_t)&v53, (uint64_t)&lazy cache variable for type metadata for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?, (uint64_t)type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]), (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v64[0] = v53;
  v64[1] = v54;
  v64[2] = v55;
  v65 = v56;
  v66 = (unint64_t)v57;
  outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)v64, (uint64_t)&v53);
  v62[0] = v53;
  v62[1] = v54;
  v63 = v55;
  v61 = (char *)MEMORY[0x1E0DEE9D8];
  swift_beginAccess();
  outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)v62, (uint64_t)&v53);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)&v53, (uint64_t)v60);
  v6 = v1[2];
  v59 = (_QWORD *)v3[2];
  v3[2] = 0x8000000000000000;
  v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v60);
  v9 = *(_QWORD *)(v6 + 16);
  v10 = (v7 & 1) == 0;
  v11 = v9 + v10;
  if (__OFADD__(v9, v10))
  {
    __break(1u);
LABEL_12:
    specialized _NativeDictionary.copy()();
    if ((v2 & 1) != 0)
      goto LABEL_10;
    goto LABEL_13;
  }
  v2 = v7;
  if (*(_QWORD *)(v6 + 24) < v11)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v11, isUniquelyReferenced_nonNull_native);
    v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v60);
    if ((v2 & 1) != (v13 & 1))
      goto LABEL_55;
    v8 = v12;
    if ((v2 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v15 = *(_QWORD *)(v59[7] + 8 * v8);
    goto LABEL_14;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_12;
  if ((v7 & 1) != 0)
    goto LABEL_10;
LABEL_13:
  v15 = 0;
LABEL_14:
  v58 = v15;
  specialized updateRelatedNodesByKey #1 (_:) in AccessibilityRelationshipScope.clear(from:)(&v58, (uint64_t)v64, &v61);
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(&v58, v2 & 1, (uint64_t *)&v59, v8, (uint64_t)v60);
  swift_bridgeObjectRelease();
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v60);
  v3[2] = (uint64_t)v59;
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)&v53);
  swift_endAccess();
  v16 = v66;
  if (v66 >> 62)
    goto LABEL_52;
  v17 = *(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v47 = v17;
  if (!v17)
  {
LABEL_53:
    swift_bridgeObjectRelease();
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v62);
    swift_bridgeObjectRelease();
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v64, (uint64_t (*)(_QWORD))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
  }
LABEL_16:
  v3 += 4;
  v46 = v16 & 0xC000000000000001;
  swift_beginAccess();
  v18 = 0;
  v44 = (_QWORD *)(v16 + 32);
  v45 = (_QWORD *)v16;
  while (1)
  {
    if (v46)
      v19 = (char *)MEMORY[0x18D75E3BC](v18, v16);
    else
      v19 = (char *)(id)v44[v18];
    v52 = v19;
    if (__OFADD__(v18++, 1))
    {
LABEL_51:
      __break(1u);
LABEL_52:
      swift_bridgeObjectRetain_n();
      v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v47 = v43;
      if (!v43)
        goto LABEL_53;
      goto LABEL_16;
    }
    v51 = *((_QWORD *)v61 + 2);
    if (v51)
      break;

LABEL_18:
    if (v18 == v47)
      goto LABEL_53;
  }
  v48 = v18;
  v49 = v61 + 32;
  v50 = OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id;
  swift_bridgeObjectRetain();
  v21 = 0;
  while (1)
  {
    v22 = v49[v21];
    v23 = *(_QWORD *)&v52[v50];
    swift_beginAccess();
    v24 = swift_isUniquelyReferenced_nonNull_native();
    v59 = (_QWORD *)*v3;
    v25 = v59;
    *v3 = 0x8000000000000000;
    v16 = (unint64_t)v25;
    v27 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v22);
    v28 = v25[2];
    v29 = (v26 & 1) == 0;
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
    {
      __break(1u);
      goto LABEL_51;
    }
    v31 = v26;
    if (v25[3] < v30)
      break;
    if ((v24 & 1) != 0)
    {
      if ((v26 & 1) == 0)
        goto LABEL_27;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v25 = v59;
      if ((v31 & 1) == 0)
        goto LABEL_27;
    }
LABEL_35:
    v34 = *(_QWORD *)(v25[7] + 8 * v27);
    if (v34)
    {
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      AnyHashable.hash(into:)();
      Hasher._combine(_:)(*((Swift::UInt *)&v63 + 1));
      v35 = Hasher._finalize()();
      v36 = -1 << *(_BYTE *)(v34 + 32);
      v37 = v35 & ~v36;
      if (((*(_QWORD *)(v34 + 56 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) != 0)
      {
        v38 = ~v36;
        while (1)
        {
          outlined init with copy of AccessibilityRelationshipScope.Key(*(_QWORD *)(v34 + 48) + 48 * v37, (uint64_t)&v53);
          if ((MEMORY[0x18D75E284](&v53, v62) & 1) != 0 && *((_QWORD *)&v55 + 1) == *((_QWORD *)&v63 + 1))
            break;
          outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)&v53);
          v37 = (v37 + 1) & v38;
          if (((*(_QWORD *)(v34 + 56 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
            goto LABEL_44;
        }
        outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)&v53);
        swift_bridgeObjectRelease();
        v39 = swift_isUniquelyReferenced_nonNull_native();
        v58 = v34;
        if (!v39)
        {
          specialized _NativeSet.copy()();
          v34 = v58;
        }
        v40 = (__int128 *)(*(_QWORD *)(v34 + 48) + 48 * v37);
        v42 = v40[1];
        v41 = v40[2];
        v53 = *v40;
        v54 = v42;
        v55 = v41;
        specialized _NativeSet._delete(at:)(v37);
        v34 = v58;
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_44:
        swift_bridgeObjectRelease();
        v54 = 0u;
        v55 = 0u;
        v53 = 0u;
      }
      outlined destroy of TableRowID?((uint64_t)&v53, (uint64_t)&lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      if (*(_QWORD *)(v34 + 16))
      {
        *(_QWORD *)(v25[7] + 8 * v27) = v34;
        goto LABEL_27;
      }
      swift_bridgeObjectRelease();
    }
    specialized _NativeDictionary._delete(at:)(v27, (uint64_t)v25);
LABEL_27:
    ++v21;
    *v3 = (uint64_t)v25;
    swift_endAccess();
    if (v21 == v51)
    {

      swift_bridgeObjectRelease();
      v16 = (unint64_t)v45;
      v18 = v48;
      goto LABEL_18;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, v24);
  v25 = v59;
  v32 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v22);
  if ((v31 & 1) == (v33 & 1))
  {
    v27 = v32;
    if ((v31 & 1) == 0)
      goto LABEL_27;
    goto LABEL_35;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_55:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  _QWORD *v33;
  char v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  unint64_t (*v44)@<X0>(unint64_t *@<X8>);
  void (*v45)(_QWORD *@<X8>);
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  void (*v58)(_QWORD *@<X8>);
  Swift::UInt v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t result;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  _OWORD v80[3];
  uint64_t v81[3];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[56];
  unint64_t v87;
  _BYTE v88[16];

  v7 = v6;
  v11 = a2;
  v12 = a1;
  v13 = MEMORY[0x1E0C80A78](a1, a2);
  v15 = (uint64_t)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v16 + 16))(v15, v17, v18, v13);
  AccessibilityRelationshipScope.Key.init<A>(identifier:in:)(v15, a4, a6, (uint64_t)v88);
  outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)v88, (uint64_t)v86);
  v79 = v12;
  v86[48] = v12;
  v87 = v11;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v81[0] = v7[3];
  v20 = v81[0];
  v7[3] = 0x8000000000000000;
  v22 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
  v23 = *(_QWORD *)(v20 + 16);
  v24 = (v21 & 1) == 0;
  v25 = v23 + v24;
  if (__OFADD__(v23, v24))
  {
    __break(1u);
LABEL_10:
    specialized _NativeDictionary.copy()();
    if ((v15 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
  LOBYTE(v15) = v21;
  if (*(_QWORD *)(v20 + 24) < v25)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, isUniquelyReferenced_nonNull_native);
    v26 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
    if ((v15 & 1) != (v27 & 1))
      goto LABEL_53;
    v22 = v26;
    if ((v15 & 1) == 0)
      goto LABEL_11;
LABEL_8:
    v28 = (__int128 *)(*(_QWORD *)(v81[0] + 56) + (v22 << 6));
    v29 = v28[3];
    v31 = *v28;
    v30 = v28[1];
    v84 = v28[2];
    v85 = v29;
    v82 = v31;
    v83 = v30;
    goto LABEL_12;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_10;
  if ((v21 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v84 = 0u;
  v85 = 0u;
  v83 = 0u;
  v82 = 0u;
LABEL_12:
  v32 = updateRecordsByAttribute #1 <A>(_:) in AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)((uint64_t)&v82, (uint64_t)v86);
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify((uint64_t)&v82, v15 & 1, v81, v22, a5);
  outlined destroy of TableRowID?((uint64_t)&v82, (uint64_t)&lazy cache variable for type metadata for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?, (uint64_t)type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]), (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v7[3] = v81[0];
  swift_endAccess();
  if ((v32 & 1) == 0)
  {
    v44 = 0;
    v45 = 0;
LABEL_51:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v86, (uint64_t (*)(_QWORD))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v88);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v44);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v45);
  }
  outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)v88, (uint64_t)&v82);
  v33 = v7 + 2;
  swift_beginAccess();
  v34 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v80[0] = v7[2];
  v35 = *(_QWORD *)&v80[0];
  v7[2] = 0x8000000000000000;
  v37 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v82);
  v38 = *(_QWORD *)(v35 + 16);
  v39 = (v36 & 1) == 0;
  v40 = v38 + v39;
  if (__OFADD__(v38, v39))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v41 = v36;
  if (*(_QWORD *)(v35 + 24) >= v40)
  {
    if ((v34 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v35 = *(_QWORD *)&v80[0];
    }
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v40, v34);
    v35 = *(_QWORD *)&v80[0];
    v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v82);
    if ((v41 & 1) != (v43 & 1))
      goto LABEL_54;
    v37 = v42;
  }
  *v33 = v35;
  swift_bridgeObjectRelease();
  v46 = (_QWORD *)*v33;
  swift_bridgeObjectRetain();
  if ((v41 & 1) == 0)
  {
    v47 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)&v82, (uint64_t)v80);
    specialized _NativeDictionary._insert(at:key:value:)(v37, v80, v47, v46);
  }
  v48 = v46[7];
  swift_bridgeObjectRelease();
  updateRelatedNodesByKey #1 <A>(_:) in AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)((_QWORD **)(v48 + 8 * v37), v11, v79);
  swift_endAccess();
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)&v82);
  if (v11 >> 62)
  {
LABEL_48:
    swift_bridgeObjectRetain();
    v49 = _CocoaArrayWrapper.endIndex.getter();
    if (v49)
      goto LABEL_24;
    goto LABEL_49;
  }
  v49 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v49)
  {
LABEL_49:
    v45 = 0;
LABEL_50:
    swift_bridgeObjectRelease();
    v44 = specialized thunk for @callee_guaranteed () -> (@owned [AccessibilityRelationshipScope.Relationship : [AccessibilityNode]]);
    goto LABEL_51;
  }
LABEL_24:
  v50 = 0;
  v51 = v7 + 4;
  v77 = v11 & 0xC000000000000001;
  v52 = 4;
  v45 = specialized thunk for @callee_guaranteed () -> (@owned Set<AccessibilityRelationshipScope.Key>);
  v76 = v11;
  while (1)
  {
    v55 = v52 - 4;
    if (v77)
    {
      v56 = (_QWORD *)MEMORY[0x18D75E3BC](v52 - 4, v11);
      v57 = v52 - 3;
      if (__OFADD__(v55, 1))
        goto LABEL_44;
    }
    else
    {
      v56 = *(id *)(v11 + 8 * v52);
      v57 = v52 - 3;
      if (__OFADD__(v55, 1))
      {
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
    }
    v78 = v57;
    v58 = v45;
    v7 = v56;
    v59 = *(_QWORD *)((char *)v56 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id);
    swift_beginAccess();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v50);
    v60 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v80[0] = *v51;
    v61 = *(_QWORD *)&v80[0];
    *v51 = 0x8000000000000000;
    v63 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v79);
    v64 = *(_QWORD *)(v61 + 16);
    v65 = (v62 & 1) == 0;
    v66 = v64 + v65;
    if (__OFADD__(v64, v65))
      goto LABEL_45;
    v11 = v62;
    if (*(_QWORD *)(v61 + 24) < v66)
      break;
    if ((v60 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v61 = *(_QWORD *)&v80[0];
    }
LABEL_38:
    *v51 = v61;
    swift_bridgeObjectRelease();
    v69 = (_QWORD *)*v51;
    if ((v11 & 1) != 0)
    {
      v53 = swift_bridgeObjectRetain();
    }
    else
    {
      v69[(v63 >> 6) + 8] |= 1 << v63;
      v70 = v69[6] + 16 * v63;
      *(_QWORD *)v70 = v59;
      *(_BYTE *)(v70 + 8) = v79;
      *(_QWORD *)(v69[7] + 8 * v63) = MEMORY[0x1E0DEE9E8];
      v71 = v69[2];
      v72 = v71 + 1;
      v73 = __OFADD__(v71, 1);
      v53 = swift_bridgeObjectRetain();
      if (v73)
        goto LABEL_46;
      *(_QWORD *)(v53 + 16) = v72;
    }
    v54 = *(_QWORD *)(v53 + 56);
    swift_bridgeObjectRelease();
    updateKeysByNodeRelation #1 <A>(_:) in AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)((uint64_t *)(v54 + 8 * v63), (uint64_t)v88);
    swift_endAccess();

    ++v52;
    v45 = v58;
    v50 = (uint64_t)v58;
    v11 = v76;
    if (v78 == v49)
      goto LABEL_50;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v66, v60);
  v61 = *(_QWORD *)&v80[0];
  v67 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v79);
  if ((v11 & 1) == (v68 & 1))
  {
    v63 = v67;
    goto LABEL_38;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_53:
  type metadata accessor for AGAttribute(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_54:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Transform.destroy()()
{
  unsigned int *v0;

  return AccessibilityRelationshipScope.clear(from:)(*v0);
}

uint64_t static Transform.willRemove(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;

  AGGraphGetAttributeInfo();
  v6 = v5;
  type metadata accessor for Transform(0, a2, a3, v7);
  return AccessibilityRelationshipScope.clear(from:)(*v6);
}

uint64_t protocol witness for static RemovableAttribute.willRemove(attribute:) in conformance Transform<A>(uint64_t a1, uint64_t a2)
{
  return static Transform.willRemove(attribute:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance Transform<A>()
{
  return 0xD000000000000022;
}

uint64_t protocol witness for static _AttributeBody._destroySelf(_:) in conformance Transform<A>()
{
  return Transform.destroy()();
}

Swift::Void __swiftcall _ViewInputs.makeRootAccessibilityRelationshipScope()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for AccessibilityRelationshipScope();
  lazy protocol witness table accessor for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope(&lazy protocol witness table cache variable for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope, (uint64_t)&protocol conformance descriptor for AccessibilityRelationshipScope);
  PropertyList.subscript.getter();
  swift_release();
  if (!v2)
  {
    v0 = (_QWORD *)swift_allocObject();
    v1 = MEMORY[0x1E0DEE9E0];
    v0[2] = MEMORY[0x1E0DEE9E0];
    v0[3] = v1;
    v0[4] = v1;
    PropertyList.subscript.setter();
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityRelationshipScope.Relationship()
{
  char *v0;
  char v1;
  Swift::UInt v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 - 2) >= 3u)
  {
    v2 = v1 & 1;
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = (v1 - 2) + 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityRelationshipScope.Relationship()
{
  _BYTE *v0;
  Swift::UInt v1;

  if ((*v0 - 2) >= 3u)
  {
    v1 = *v0 & 1;
    Hasher._combine(_:)(0);
  }
  else
  {
    v1 = (*v0 - 2) + 1;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityRelationshipScope.Relationship()
{
  char *v0;
  char v1;
  Swift::UInt v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 - 2) >= 3u)
  {
    v2 = v1 & 1;
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = (v1 - 2) + 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityRelationshipScope.Relationship(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;

  v2 = *a1;
  v3 = *a2;
  v4 = v3 - 2;
  v5 = v3 == 2;
  v6 = v3 == 3;
  v7 = v3 == 4;
  v8 = ((v3 ^ v2) & 1) == 0;
  if (v4 < 3)
    v8 = 0;
  if (v2 == 4)
    v8 = v7;
  if (v2 == 3)
    v8 = v6;
  if (v2 == 2)
    return v5;
  else
    return v8;
}

double AccessibilityRelationshipScope.Key.init<A>(identifier:in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  double result;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v8 = *(_QWORD *)(a3 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, double))(v8 + 16))((char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  AnyHashable.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, a3);
  result = *(double *)&v14;
  v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  *(_QWORD *)(a4 + 32) = v16;
  *(_QWORD *)(a4 + 40) = a2;
  return result;
}

Swift::Int AccessibilityRelationshipScope.NodeRelation.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  char v2;
  Swift::UInt v3;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if ((v2 - 2) >= 3u)
  {
    v3 = v2 & 1;
    Hasher._combine(_:)(0);
  }
  else
  {
    v3 = (v2 - 2) + 1;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityRelationshipScope.Key()
{
  uint64_t v0;

  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  Hasher._combine(_:)(*(_QWORD *)(v0 + 40));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityRelationshipScope.Key()
{
  uint64_t v0;

  AnyHashable.hash(into:)();
  Hasher._combine(_:)(*(_QWORD *)(v0 + 40));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityRelationshipScope.Key()
{
  uint64_t v0;

  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  Hasher._combine(_:)(*(_QWORD *)(v0 + 40));
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityRelationshipScope.Key(uint64_t a1, uint64_t a2)
{
  return (MEMORY[0x18D75E284]() & 1) != 0 && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityRelationshipScope.NodeRelation()
{
  uint64_t v0;
  char v1;
  Swift::UInt v2;

  v1 = *(_BYTE *)(v0 + 8);
  Hasher._combine(_:)(*(_QWORD *)v0);
  if ((v1 - 2) >= 3u)
  {
    v2 = v1 & 1;
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = (v1 - 2) + 1;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityRelationshipScope.NodeRelation()
{
  uint64_t v0;
  Swift::UInt v1;
  char v2;
  Swift::UInt v3;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if ((v2 - 2) >= 3u)
  {
    v3 = v2 & 1;
    Hasher._combine(_:)(0);
  }
  else
  {
    v3 = (v2 - 2) + 1;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityRelationshipScope.NodeRelation(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a2 + 8);
  if (v2 == 2)
    return v3 == 2;
  if (v2 == 3)
    return v3 == 3;
  if (v2 != 4)
    return (v3 - 2) >= 3 && ((v3 ^ v2) & 1) == 0;
  return v3 == 4;
}

uint64_t updateRecordsByAttribute #1 <A>(_:) in AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  _OWORD v17[2];
  __int128 v18;
  _BYTE v19[40];
  uint64_t v20;
  _OWORD v21[3];
  char v22;
  uint64_t v23;
  _BYTE v24[24];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[3];
  _OWORD v30[3];
  char v31;
  uint64_t v32;

  outlined init with copy of AccessibilityRelationshipScope.Key(a2, (uint64_t)v30);
  v31 = *(_BYTE *)(a2 + 48);
  v32 = *(_QWORD *)(a2 + 56);
  v21[0] = v30[0];
  v21[1] = v30[1];
  v21[2] = v30[2];
  if (*(_QWORD *)(a1 + 24))
    outlined init with copy of AccessibilityRelationshipScope.Key(a1, (uint64_t)v29);
  else
    memset(v29, 0, sizeof(v29));
  outlined init with copy of AccessibilityRelationshipScope.Key?((uint64_t)v21, (uint64_t)v24);
  outlined init with copy of AccessibilityRelationshipScope.Key?((uint64_t)v29, (uint64_t)&v26);
  if (v25)
  {
    outlined init with copy of AccessibilityRelationshipScope.Key?((uint64_t)v24, (uint64_t)v19);
    if (*((_QWORD *)&v27 + 1))
    {
      v17[0] = v26;
      v17[1] = v27;
      v18 = v28;
      v4 = MEMORY[0x18D75E284](v19, v17);
      v5 = v4 & (v20 == *((_QWORD *)&v18 + 1));
      outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v17);
      outlined destroy of TableRowID?((uint64_t)v29, (uint64_t)&lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      outlined destroy of TableRowID?((uint64_t)v21, (uint64_t)&lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v19);
      outlined destroy of TableRowID?((uint64_t)v24, (uint64_t)&lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      goto LABEL_11;
    }
    outlined destroy of TableRowID?((uint64_t)v29, (uint64_t)&lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    outlined destroy of TableRowID?((uint64_t)v21, (uint64_t)&lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v19);
  }
  else
  {
    outlined destroy of TableRowID?((uint64_t)v29, (uint64_t)&lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    outlined destroy of TableRowID?((uint64_t)v21, (uint64_t)&lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    if (!*((_QWORD *)&v27 + 1))
    {
      outlined destroy of TableRowID?((uint64_t)v24, (uint64_t)&lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      v5 = 1;
      goto LABEL_11;
    }
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?));
  v5 = 0;
LABEL_11:
  outlined init with copy of AccessibilityRelationshipScope.Key(a2, (uint64_t)v24);
  v6 = *(unsigned __int8 *)(a2 + 48);
  LOBYTE(v26) = *(_BYTE *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  *((_QWORD *)&v26 + 1) = v7;
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
    v11 = 1;
    goto LABEL_27;
  }
  outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)v24, (uint64_t)v30);
  swift_bridgeObjectRetain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
  v31 = v6;
  v32 = v7;
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
  {
    v9 = *(unsigned __int8 *)(a1 + 48);
    switch(v6)
    {
      case 2:
        v10 = v9 == 2;
        break;
      case 3:
        v10 = v9 == 3;
        break;
      case 4:
        v10 = v9 == 4;
        break;
      default:
        if ((v9 - 2) < 3)
        {
          LODWORD(v8) = 0;
          goto LABEL_26;
        }
        v10 = ((v9 ^ v6) & 1) == 0;
        break;
    }
    LODWORD(v8) = v10;
  }
LABEL_26:
  v11 = v8 ^ 1;
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v30);
LABEL_27:
  outlined init with copy of AccessibilityRelationshipScope.Key(a2, (uint64_t)v30);
  v12 = *(_BYTE *)(a2 + 48);
  v31 = v12;
  v13 = *(_QWORD *)(a2 + 56);
  v32 = v13;
  if (v11)
  {
    swift_bridgeObjectRetain();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
  }
  else
  {
    outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)v30, (uint64_t)v21);
    v22 = v12;
    v23 = v13;
    if (*(_QWORD *)(a1 + 24))
    {
      v14 = *(_QWORD *)(a1 + 56);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v15 = specialized static Array<A>.== infix(_:_:)(v13, v14);
      swift_bridgeObjectRelease();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
      swift_bridgeObjectRelease();
      outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v21);
      if ((v15 & 1) != 0)
        return 0;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
      outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v21);
    }
  }
  outlined destroy of TableRowID?(a1, (uint64_t)&lazy cache variable for type metadata for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?, (uint64_t)type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]), (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])(a2, a1);
  return 1;
}

uint64_t updateRelatedNodesByKey #1 <A>(_:) in AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)(_QWORD **a1, unint64_t a2, char a3)
{
  char v3;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t result;
  _QWORD *v18;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *a1;
  v18 = *a1;
  *a1 = (_QWORD *)0x8000000000000000;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_10;
  }
  v3 = v9;
  if (v8[3] >= v13)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_6;
LABEL_10:
    specialized _NativeDictionary.copy()();
    v8 = v18;
    goto LABEL_6;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, isUniquelyReferenced_nonNull_native);
  v8 = v18;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v3 & 1) != (v15 & 1))
  {
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = v14;
LABEL_6:
  *a1 = v8;
  swift_bridgeObjectRelease();
  v16 = *a1;
  if ((v3 & 1) == 0)
    specialized _NativeDictionary._insert(at:key:value:)(v10, a3, MEMORY[0x1E0DEE9D8], *a1);
  return updateRelatedNodes #1 <A>(_:) in updateRelatedNodesByKey #1 <A>(_:) in AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)((uint64_t *)(v16[7] + 8 * v10), a2);
}

uint64_t updateRelatedNodes #1 <A>(_:) in updateRelatedNodesByKey #1 <A>(_:) in AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  char v14;
  id v15;
  char v16;
  uint64_t v17;
  char v18;
  BOOL v19;
  id v20;
  char v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v2 = a2;
  if (a2 >> 62)
    goto LABEL_46;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    v5 = 0;
    v29 = v4;
    v30 = v2 & 0xC000000000000001;
    v26 = v2 + 32;
    v27 = v2 & 0xFFFFFFFFFFFFFF8;
    v28 = v2;
    while (1)
    {
      if (v30)
      {
        v7 = (id)MEMORY[0x18D75E3BC](v5, v2);
      }
      else
      {
        if (v5 >= *(_QWORD *)(v27 + 16))
          goto LABEL_44;
        v7 = *(id *)(v26 + 8 * v5);
      }
      v8 = v7;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      v10 = *a1;
      if ((unint64_t)*a1 >> 62)
      {
        swift_bridgeObjectRetain_n();
        v11 = _CocoaArrayWrapper.endIndex.getter();
        if (!v11)
          goto LABEL_18;
      }
      else
      {
        v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (!v11)
          goto LABEL_18;
      }
      if ((v10 & 0xC000000000000001) != 0)
        v12 = (id)MEMORY[0x18D75E3BC](0, v10);
      else
        v12 = *(id *)(v10 + 32);
      v13 = v12;
      type metadata accessor for AccessibilityNode();
      v14 = static NSObject.== infix(_:_:)();

      if ((v14 & 1) != 0)
      {
LABEL_4:
        swift_bridgeObjectRelease_n();
LABEL_5:
        v6 = v29;
        goto LABEL_6;
      }
      if (v11 != 1)
      {
        if ((v10 & 0xC000000000000001) != 0)
        {
          MEMORY[0x18D75E3BC](1, v10);
          v16 = static NSObject.== infix(_:_:)();
          swift_unknownObjectRelease();
          if ((v16 & 1) != 0)
            goto LABEL_4;
          if (v11 != 2)
          {
            v17 = 2;
            while (1)
            {
              MEMORY[0x18D75E3BC](v17, v10);
              v2 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_43;
              v18 = static NSObject.== infix(_:_:)();
              swift_unknownObjectRelease();
              if ((v18 & 1) != 0)
                goto LABEL_38;
              ++v17;
              v19 = v2 == v11;
              v2 = v28;
              if (v19)
                goto LABEL_18;
            }
          }
          goto LABEL_18;
        }
        v20 = *(id *)(v10 + 40);
        v21 = static NSObject.== infix(_:_:)();

        if ((v21 & 1) != 0)
          goto LABEL_4;
        if (v11 != 2)
          break;
      }
LABEL_18:
      swift_bridgeObjectRelease_n();
      v15 = v8;
      MEMORY[0x18D75CF58]();
      v6 = v29;
      if (*(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
LABEL_6:

      if (v5 == v6)
        return swift_bridgeObjectRelease();
    }
    v22 = 6;
    while (1)
    {
      v2 = v22 - 3;
      if (__OFADD__(v22 - 4, 1))
        break;
      v23 = *(id *)(v10 + 8 * v22);
      v24 = static NSObject.== infix(_:_:)();

      if ((v24 & 1) != 0)
      {
LABEL_38:
        swift_bridgeObjectRelease_n();
        v2 = v28;
        goto LABEL_5;
      }
      ++v22;
      v19 = v2 == v11;
      v2 = v28;
      if (v19)
        goto LABEL_18;
    }
LABEL_45:
    __break(1u);
LABEL_46:
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRelease();
}

uint64_t updateKeysByNodeRelation #1 <A>(_:) in AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  _BYTE v11[40];
  uint64_t v12;
  _BYTE v13[40];
  Swift::UInt v14;

  outlined init with copy of AccessibilityRelationshipScope.Key(a2, (uint64_t)v13);
  v3 = *a1;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  AnyHashable.hash(into:)();
  Hasher._combine(_:)(v14);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v7 = ~v5;
    while (1)
    {
      outlined init with copy of AccessibilityRelationshipScope.Key(*(_QWORD *)(v3 + 48) + 48 * v6, (uint64_t)v11);
      if ((MEMORY[0x18D75E284](v11, v13) & 1) != 0 && v12 == v14)
        break;
      outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v11);
      v6 = (v6 + 1) & v7;
      if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        goto LABEL_7;
    }
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v11);
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)v13, (uint64_t)v11);
    v10 = *a1;
    *a1 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((Swift::Int)v11, v6, isUniquelyReferenced_nonNull_native);
    *a1 = v10;
  }
  swift_bridgeObjectRelease();
  return outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v13);
}

void specialized thunk for @callee_guaranteed () -> (@owned Set<AccessibilityRelationshipScope.Key>)(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9E8];
}

_QWORD *specialized updateRelatedNodesByKey #1 (_:) in AccessibilityRelationshipScope.clear(from:)(_QWORD *result, uint64_t a2, char **a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unsigned __int8 v16;
  char isUniquelyReferenced_nonNull_native;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  char *v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  _QWORD *v41;

  v3 = *result;
  if (!*result)
    return result;
  v37 = result;
  v38 = v3 + 64;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v3 + 64);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v9 = 0;
  v39 = (unint64_t)(v6 + 63) >> 6;
  v10 = (_QWORD *)v3;
  while (1)
  {
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v9 << 6);
      goto LABEL_25;
    }
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
      goto LABEL_54;
    if (v13 >= v39)
    {
LABEL_51:
      result = (_QWORD *)swift_release();
      *v37 = v10;
      return result;
    }
    v14 = *(_QWORD *)(v38 + 8 * v13);
    ++v9;
    if (!v14)
    {
      v9 = v13 + 1;
      if (v13 + 1 >= v39)
        goto LABEL_51;
      v14 = *(_QWORD *)(v38 + 8 * v9);
      if (!v14)
      {
        v9 = v13 + 2;
        if (v13 + 2 >= v39)
          goto LABEL_51;
        v14 = *(_QWORD *)(v38 + 8 * v9);
        if (!v14)
        {
          v9 = v13 + 3;
          if (v13 + 3 >= v39)
            goto LABEL_51;
          v14 = *(_QWORD *)(v38 + 8 * v9);
          if (!v14)
          {
            v9 = v13 + 4;
            if (v13 + 4 >= v39)
              goto LABEL_51;
            v14 = *(_QWORD *)(v38 + 8 * v9);
            if (!v14)
              break;
          }
        }
      }
    }
LABEL_24:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_25:
    v16 = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v12);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v41 = v10;
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
    v20 = v10[2];
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v23 = v18;
    if (v10[3] >= v22)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v18 & 1) == 0)
          goto LABEL_34;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v23 & 1) == 0)
          goto LABEL_34;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
      v24 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_57;
      v19 = v24;
      if ((v23 & 1) == 0)
      {
LABEL_34:
        v26 = 0;
        goto LABEL_35;
      }
    }
    v26 = *(_QWORD *)(v41[7] + 8 * v19);
LABEL_35:
    v40 = v26;
    v27 = updateRelatedNodes #1 (removing:from:) in updateRelatedNodesByKey #1 (_:) in AccessibilityRelationshipScope.clear(from:)(v16, &v40, a2);
    v28 = v27;
    v29 = v40;
    if (v40)
    {
      v10 = v41;
      if ((v23 & 1) != 0)
      {
        *(_QWORD *)(v41[7] + 8 * v19) = v40;
        if ((v27 & 1) != 0)
          goto LABEL_46;
      }
      else
      {
        v41[(v19 >> 6) + 8] |= 1 << v19;
        *(_BYTE *)(v10[6] + v19) = v16;
        *(_QWORD *)(v10[7] + 8 * v19) = v29;
        v30 = v10[2];
        v31 = __OFADD__(v30, 1);
        v32 = v30 + 1;
        if (v31)
          goto LABEL_55;
        v10[2] = v32;
        if ((v27 & 1) != 0)
        {
LABEL_46:
          v33 = *a3;
          v34 = swift_isUniquelyReferenced_nonNull_native();
          *a3 = v33;
          if ((v34 & 1) == 0)
          {
            v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v33 + 2) + 1, 1, v33);
            *a3 = v33;
          }
          v36 = *((_QWORD *)v33 + 2);
          v35 = *((_QWORD *)v33 + 3);
          if (v36 >= v35 >> 1)
          {
            v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v33);
            *a3 = v33;
          }
          *((_QWORD *)v33 + 2) = v36 + 1;
          v33[v36 + 32] = v16;
        }
      }
    }
    else
    {
      v10 = v41;
      if ((v23 & 1) != 0)
      {
        specialized _NativeDictionary._delete(at:)(v19, (uint64_t)v41);
        if ((v28 & 1) != 0)
          goto LABEL_46;
      }
      else if ((v27 & 1) != 0)
      {
        goto LABEL_46;
      }
    }
  }
  v15 = v13 + 5;
  if (v15 >= v39)
    goto LABEL_51;
  v14 = *(_QWORD *)(v38 + 8 * v15);
  if (v14)
  {
    v9 = v15;
    goto LABEL_24;
  }
  while (1)
  {
    v9 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v9 >= v39)
      goto LABEL_51;
    v14 = *(_QWORD *)(v38 + 8 * v9);
    ++v15;
    if (v14)
      goto LABEL_24;
  }
LABEL_56:
  __break(1u);
LABEL_57:
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t updateRelatedNodes #1 (removing:from:) in updateRelatedNodesByKey #1 (_:) in AccessibilityRelationshipScope.clear(from:)(unsigned __int8 a1, uint64_t *a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  int v7;
  _BOOL4 v8;
  _BOOL4 v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  char v26;
  id v27;
  uint64_t v29;
  uint64_t v30;
  id v31;
  char v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD v37[5];
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _BYTE v48[48];
  char v49;
  unint64_t v50;
  _BYTE v51[56];
  unint64_t v52;
  unint64_t v53;

  v4 = *a2;
  if (!*a2)
    return 0;
  v53 = *a2;
  v7 = *(unsigned __int8 *)(a3 + 48);
  v8 = (v7 - 2) >= 3 && ((v7 ^ a1) & 1) == 0;
  if (a1 == 4)
    v8 = v7 == 4;
  if (a1 == 3)
    v8 = v7 == 3;
  if (a1 == 2)
    v9 = v7 == 2;
  else
    v9 = v8;
  outlined init with copy of AccessibilityRelationshipScope.Key(a3, (uint64_t)v51);
  v51[48] = v7;
  v10 = *(_QWORD *)(a3 + 56);
  v52 = v10;
  if (v9)
  {
    outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)v51, (uint64_t)v48);
    v49 = v7;
    v50 = v10;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v11 = specialized static Array<A>.== infix(_:_:)(v4, v10);
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
    swift_bridgeObjectRelease();
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v48);
    if ((v11 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *a2 = 0;
      return 1;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
  }
  v42 = a2;
  outlined init with copy of AccessibilityRelationshipScope.Key(a3, (uint64_t)v48);
  v49 = *(_BYTE *)(a3 + 48);
  v50 = *(_QWORD *)(a3 + 56);
  v12 = v50;
  swift_bridgeObjectRetain();
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v48);
  v43 = a3;
  if (!(v12 >> 62))
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v13)
      goto LABEL_18;
LABEL_61:
    swift_bridgeObjectRelease();
    outlined init with copy of AccessibilityRelationshipScope.Key(v43, (uint64_t)v48);
    v49 = *(_BYTE *)(v43 + 48);
    v50 = *(_QWORD *)(v43 + 56);
    MEMORY[0x1E0C80A78](v50, v34);
    v37[2] = v48;
    swift_bridgeObjectRetain();
    result = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(id *))partial apply for closure #1 in updateRelatedNodes #1 (removing:from:) in updateRelatedNodesByKey #1 (_:) in AccessibilityRelationshipScope.clear(from:), (uint64_t)v37);
    v4 = result;
    if (v53 >> 62)
      goto LABEL_70;
    v35 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v35 >= result)
      goto LABEL_63;
LABEL_71:
    __break(1u);
    return result;
  }
LABEL_60:
  swift_bridgeObjectRetain();
  v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v13)
    goto LABEL_61;
LABEL_18:
  v46 = v12 & 0xC000000000000001;
  if ((v12 & 0xC000000000000001) != 0)
  {
    v14 = (id)MEMORY[0x18D75E3BC](0, v12);
  }
  else
  {
    if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_67:
      swift_bridgeObjectRetain_n();
      v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v15)
        goto LABEL_23;
      goto LABEL_55;
    }
    v14 = *(id *)(v12 + 32);
  }
  v3 = v14;
  v45 = (unint64_t)v4 >> 62;
  if ((unint64_t)v4 >> 62)
    goto LABEL_67;
  v15 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v15)
  {
LABEL_55:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();

    return 0;
  }
LABEL_23:
  type metadata accessor for AccessibilityNode();
  v47 = v4 & 0xC000000000000001;
  v39 = v12 & 0xFFFFFFFFFFFFFF8;
  v38 = v12 + 32;
  v16 = v4 & 0xFFFFFFFFFFFFFF8;
  v41 = v4 & 0xFFFFFFFFFFFFFF8;
  if (v4 < 0)
    v16 = v4;
  v40 = v16;
  v17 = 1;
  v44 = v13;
  while (1)
  {
    if (v47)
      v18 = (id)MEMORY[0x18D75E3BC](0, v4);
    else
      v18 = *(id *)(v4 + 32);
    v19 = v18;
    v20 = static NSObject.== infix(_:_:)();

    if ((v20 & 1) == 0)
    {
      if (v15 == 1)
        goto LABEL_55;
      if (v47)
      {
        MEMORY[0x18D75E3BC](1, v4);
        v21 = static NSObject.== infix(_:_:)();
        swift_unknownObjectRelease();
        if ((v21 & 1) == 0)
        {
          if (v15 == 2)
            goto LABEL_55;
          v22 = 2;
          while (1)
          {
            MEMORY[0x18D75E3BC](v22, v4);
            v23 = v22 + 1;
            if (__OFADD__(v22, 1))
              break;
            v24 = static NSObject.== infix(_:_:)();
            swift_unknownObjectRelease();
            if ((v24 & 1) != 0)
              goto LABEL_41;
            ++v22;
            if (v23 == v15)
              goto LABEL_55;
          }
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
      }
      else
      {
        v25 = *(id *)(v4 + 40);
        v26 = static NSObject.== infix(_:_:)();

        if ((v26 & 1) == 0)
        {
          if (v15 == 2)
            goto LABEL_55;
          v29 = 6;
          while (1)
          {
            v30 = v29 - 3;
            if (__OFADD__(v29 - 4, 1))
              goto LABEL_58;
            v31 = *(id *)(v4 + 8 * v29);
            v32 = static NSObject.== infix(_:_:)();

            if ((v32 & 1) != 0)
              break;
            ++v29;
            if (v30 == v15)
              goto LABEL_55;
          }
        }
      }
    }
LABEL_41:
    swift_bridgeObjectRelease_n();

    if (v17 == v44)
      goto LABEL_61;
    if (v46)
    {
      v27 = (id)MEMORY[0x18D75E3BC](v17, v12);
      goto LABEL_46;
    }
    if (v17 >= *(_QWORD *)(v39 + 16))
      break;
    v27 = *(id *)(v38 + 8 * v17);
LABEL_46:
    v3 = v27;
    if (__OFADD__(v17++, 1))
      goto LABEL_59;
    if (v45)
    {
      swift_bridgeObjectRetain_n();
      v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v15)
        goto LABEL_55;
    }
    else
    {
      v15 = *(_QWORD *)(v41 + 16);
      swift_bridgeObjectRetain_n();
      if (!v15)
        goto LABEL_55;
    }
  }
  __break(1u);
LABEL_70:
  swift_bridgeObjectRetain();
  v35 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (v35 < v4)
    goto LABEL_71;
LABEL_63:
  specialized Array.replaceSubrange<A>(_:with:)(v4, v35);
  v36 = v42;
  swift_bridgeObjectRelease();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v48, (uint64_t (*)(_QWORD))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
  *v36 = v53;
  return 1;
}

uint64_t sub_186F8D0BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for RelationshipModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for RelationshipModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t type metadata accessor for RelationshipModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RelationshipModifier);
}

uint64_t getEnumTagSinglePayload for AccessibilityRelationshipScope.NodeRelation(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 252);
  if (*(unsigned __int8 *)(a1 + 8) <= 4u)
    v3 = 4;
  else
    v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 - 5;
  if (*(unsigned __int8 *)(a1 + 8) < 2u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityRelationshipScope.NodeRelation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityRelationshipScope.NodeRelation()
{
  return &type metadata for AccessibilityRelationshipScope.NodeRelation;
}

uint64_t getEnumTagSinglePayload for AccessibilityRelationshipScope.Relationship(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
  {
    v6 = *a1;
    if (v6 >= 2)
      v7 = v6 - 1;
    else
      v7 = 0;
    if (v7 >= 4)
      return v7 - 3;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 4;
    if (a2 + 4 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_186F8D220 + 4 * byte_187BFB2FA[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for AccessibilityRelationshipScope.Relationship(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFC)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_186F8D2CC + 4 * byte_187BFB304[v5]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_186F8D300 + 4 * byte_187BFB2FF[v5]))();
}

uint64_t sub_186F8D300(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F8D308(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186F8D310);
  return result;
}

uint64_t sub_186F8D31C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186F8D324);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_186F8D328(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F8D330(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for AccessibilityRelationshipScope.Relationship(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 2)
    return v1 - 1;
  else
    return 0;
}

_BYTE *destructiveInjectEnumTag for AccessibilityRelationshipScope.Relationship(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityRelationshipScope.Relationship()
{
  return &type metadata for AccessibilityRelationshipScope.Relationship;
}

uint64_t initializeWithCopy for AccessibilityRelationshipScope.Key(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for AccessibilityRelationshipScope.Key(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for AccessibilityRelationshipScope.Key(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityRelationshipScope.Key(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityRelationshipScope.Key(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityRelationshipScope.Key()
{
  return &type metadata for AccessibilityRelationshipScope.Key;
}

uint64_t type metadata completion function for RelationshipModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for RelationshipModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 1) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v10 = ((unint64_t)a1 + v5 + 1) & ~v5;
    v11 = ((unint64_t)a2 + v5 + 1) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    *(_QWORD *)((v6 + v10) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v6 + v11) & 0xFFFFFFFFFFFFF8);
  }
  return v3;
}

_BYTE *initializeWithCopy for RelationshipModifier(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v6, v7);
  *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v6) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_BYTE *assignWithCopy for RelationshipModifier(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v6, v7);
  *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v6) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_BYTE *initializeWithTake for RelationshipModifier(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v6) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_BYTE *assignWithTake for RelationshipModifier(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v6, v7);
  *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v6) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RelationshipModifier(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFB)
    v6 = 251;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if (v5 > 0xFB)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v7 + 1] & ~v7);
    }
    else
    {
      v12 = *a1;
      if (v12 >= 2)
        v13 = v12 - 1;
      else
        v13 = 0;
      if (v13 >= 4)
        return v13 - 3;
      else
        return 0;
    }
  }
  else
  {
    if (((((*(_QWORD *)(v4 + 64) + ((v7 + 1) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_186F8D8A8 + 4 * byte_187BFB309[v10]))();
  }
}

void storeEnumTagSinglePayload for RelationshipModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFBu)
    v6 = 251;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 1) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 1) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + ((v7 + 1) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_186F8DA3C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_186F8DA44(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x186F8DA4CLL);
}

void sub_186F8DA88()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_186F8DA90()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_186F8DA98@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;

  *(_WORD *)&v6[v7] = 0;
  if (!a1)
LABEL_2:
    JUMPOUT(0x186F8DAA0);
  if (a2 <= 0xFB)
  {
    *v6 = a1 + 4;
    goto LABEL_2;
  }
  return (*(uint64_t (**)(unint64_t))(v4 + 56))((unint64_t)&v6[v5 + 1] & a3);
}

_UNKNOWN **base witness table accessor for ViewModifier in RelationshipModifier<A>()
{
  return &protocol witness table for RelationshipModifier<A>;
}

unint64_t lazy protocol witness table accessor for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key;
  if (!lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityRelationshipScope.Key, &type metadata for AccessibilityRelationshipScope.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key;
  if (!lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityRelationshipScope.Key, &type metadata for AccessibilityRelationshipScope.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityRelationshipScope.Relationship and conformance AccessibilityRelationshipScope.Relationship()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Relationship and conformance AccessibilityRelationshipScope.Relationship;
  if (!lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Relationship and conformance AccessibilityRelationshipScope.Relationship)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityRelationshipScope.Relationship, &type metadata for AccessibilityRelationshipScope.Relationship);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Relationship and conformance AccessibilityRelationshipScope.Relationship);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Relationship and conformance AccessibilityRelationshipScope.Relationship;
  if (!lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Relationship and conformance AccessibilityRelationshipScope.Relationship)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityRelationshipScope.Relationship, &type metadata for AccessibilityRelationshipScope.Relationship);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Relationship and conformance AccessibilityRelationshipScope.Relationship);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityRelationshipScope.NodeRelation and conformance AccessibilityRelationshipScope.NodeRelation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityRelationshipScope.NodeRelation and conformance AccessibilityRelationshipScope.NodeRelation;
  if (!lazy protocol witness table cache variable for type AccessibilityRelationshipScope.NodeRelation and conformance AccessibilityRelationshipScope.NodeRelation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityRelationshipScope.NodeRelation, &type metadata for AccessibilityRelationshipScope.NodeRelation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRelationshipScope.NodeRelation and conformance AccessibilityRelationshipScope.NodeRelation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityRelationshipScope.NodeRelation and conformance AccessibilityRelationshipScope.NodeRelation;
  if (!lazy protocol witness table cache variable for type AccessibilityRelationshipScope.NodeRelation and conformance AccessibilityRelationshipScope.NodeRelation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityRelationshipScope.NodeRelation, &type metadata for AccessibilityRelationshipScope.NodeRelation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRelationshipScope.NodeRelation and conformance AccessibilityRelationshipScope.NodeRelation);
  }
  return result;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance AccessibilityRelationshipScope()
{
  return static PropertyKey.valuesEqual(_:_:)();
}

uint64_t base witness table accessor for PropertyKey in AccessibilityRelationshipScope()
{
  return lazy protocol witness table accessor for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope(&lazy protocol witness table cache variable for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope, (uint64_t)&protocol conformance descriptor for AccessibilityRelationshipScope);
}

uint64_t base witness table accessor for GraphInput in AccessibilityRelationshipScope()
{
  return lazy protocol witness table accessor for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope(&lazy protocol witness table cache variable for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope, (uint64_t)&protocol conformance descriptor for AccessibilityRelationshipScope);
}

uint64_t lazy protocol witness table accessor for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for AccessibilityRelationshipScope();
    result = MEMORY[0x18D75FFDC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for Transform.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Transform.State);
}

uint64_t type metadata accessor for Transform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Transform);
}

uint64_t type metadata completion function for Transform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  type metadata accessor for Transform.State(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  result = type metadata accessor for Optional();
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Transform(_DWORD *a1, int *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  int v12;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _BYTE *v30;
  unsigned int v31;
  unsigned int v32;
  _BYTE *v33;
  unint64_t v34;
  int v35;
  uint64_t v37;
  uint64_t v38;
  _BYTE *__dst;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = v5;
  v7 = v5 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v8 = v5 + 1;
  v9 = *(_QWORD *)(v4 + 64) + 7;
  v10 = (v9 + ((v6 + 1) & ~v6)) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v12 = v5 & 0x100000;
  if (v6 <= 7 && v12 == 0 && v11 + (v7 & (v6 + 24)) <= 0x18)
  {
    v16 = *(unsigned int *)(v4 + 84);
    v37 = ~v6;
    v38 = *(_QWORD *)(a3 + 16);
    v17 = v10 + 8;
    if (v16 <= 0x7FFFFFFF)
      v18 = 0x7FFFFFFF;
    else
      v18 = *(_DWORD *)(v4 + 84);
    v21 = *a2;
    v19 = (unint64_t)a2 + 7;
    v20 = v21;
    if (v16 <= 0xFB)
      v22 = 251;
    else
      v22 = *(_DWORD *)(v4 + 84);
    *a1 = v20;
    v23 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v23 = *(_DWORD *)(v19 & 0xFFFFFFFFFFFFFCLL);
    v24 = (_DWORD *)(((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFCLL);
    v25 = (_DWORD *)(((v19 & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL);
    *v24 = *v25;
    v26 = (_DWORD *)(((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v27 = (_DWORD *)(((unint64_t)v25 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v26 = *v27;
    v28 = (_QWORD *)(((unint64_t)v26 + 11) & 0xFFFFFFFFFFFFF8);
    v29 = (_QWORD *)(((unint64_t)v27 + 11) & 0xFFFFFFFFFFFFF8);
    *v28 = *v29;
    __dst = (_BYTE *)(v7 & ((unint64_t)v28 + 15));
    v30 = (_BYTE *)(v7 & ((unint64_t)v29 + 15));
    swift_retain();
    if (v22 == v18)
    {
      if (v16 <= 0xFB)
      {
        v31 = *v30;
        v32 = v31 - 1;
        if (v31 < 2)
          v32 = 0;
        v33 = __dst;
        if (v32 >= 4)
          goto LABEL_29;
LABEL_23:
        *v33 = v31;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 16))((unint64_t)&v33[v8] & v37, (unint64_t)&v30[v8] & v37, v38);
        *(_QWORD *)((v9 + ((unint64_t)&v33[v8] & v37)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v9
                                                                                                 + ((unint64_t)&v30[v8] & v37)) & 0xFFFFFFFFFFFFF8);
        *(_QWORD *)&v33[v17] = *(_QWORD *)&v30[v17];
        swift_bridgeObjectRetain();
        return v3;
      }
      v35 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))((unint64_t)&v30[v8] & v37, v16, v38);
    }
    else
    {
      v34 = *(_QWORD *)&v30[v17];
      if (v34 >= 0xFFFFFFFF)
        LODWORD(v34) = -1;
      v35 = v34 + 1;
    }
    v33 = __dst;
    if (v35)
    {
LABEL_29:
      memcpy(v33, v30, v11);
      return v3;
    }
    LOBYTE(v31) = *v30;
    goto LABEL_23;
  }
  v15 = *(_QWORD *)a2;
  *v3 = *(_QWORD *)a2;
  v3 = (_QWORD *)(v15 + (v7 & (v6 + 16)));
  swift_retain();
  return v3;
}

uint64_t destroy for Transform(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  unint64_t v16;

  v3 = (((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unsigned __int8 *)((v3 + (v6 | 7) + 8) & ~(v6 | 7));
  v8 = *(_DWORD *)(v5 + 84);
  if (v8 <= 0xFB)
    v9 = 251;
  else
    v9 = *(_DWORD *)(v5 + 84);
  if (v8 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v5 + 84);
  v11 = ~v6;
  v12 = v6 + 1;
  if (v9 == v10)
  {
    if (v8 <= 0xFB)
    {
      v13 = *v7;
      if (v13 >= 2)
        v14 = v13 - 1;
      else
        v14 = 0;
      if (v14 >= 4)
        return v14 - 3;
      goto LABEL_19;
    }
    result = (*(uint64_t (**)(unint64_t))(v5 + 48))((unint64_t)&v7[v12] & v11);
    if (!(_DWORD)result)
    {
LABEL_19:
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))((unint64_t)&v7[v12] & v11, v4);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v16 = *(_QWORD *)&v7[((*(_QWORD *)(v5 + 64) + ((v6 + 1) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) + 8];
    if (v16 >= 0xFFFFFFFF)
      LODWORD(v16) = -1;
    result = (v16 + 1);
    if ((_DWORD)v16 == -1)
      goto LABEL_19;
  }
  return result;
}

_DWORD *initializeWithCopy for Transform(_DWORD *a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  int v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  _DWORD *v26;
  unint64_t v27;
  int v28;
  uint64_t v30;
  uint64_t v31;

  v4 = *a2;
  v3 = (unint64_t)a2 + 7;
  *a1 = v4;
  v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v5 = *(_DWORD *)(v3 & 0xFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((v3 & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v8 = *v9;
  v10 = (_QWORD *)(((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v31 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v31 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = *(_DWORD *)(v12 + 80);
  v15 = *(_DWORD *)(v12 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v16 = (_BYTE *)(((unint64_t)v10 + v14 + 8) & v15);
  v17 = (_BYTE *)(((unint64_t)v11 + v14 + 8) & v15);
  if (v13 <= 0xFB)
    v18 = 251;
  else
    v18 = *(_DWORD *)(v12 + 84);
  if (v13 <= 0x7FFFFFFF)
    v19 = 0x7FFFFFFF;
  else
    v19 = *(_DWORD *)(v12 + 84);
  v30 = ~v14;
  v20 = v14 + 1;
  v21 = *(_QWORD *)(v12 + 64) + 7;
  v22 = (v21 + ((v14 + 1) & ~v14)) & 0xFFFFFFFFFFFFFFF8;
  v23 = v22 + 8;
  swift_retain();
  if (v18 == v19)
  {
    if (v13 <= 0xFB)
    {
      v24 = *v17;
      v25 = v24 - 1;
      if (v24 < 2)
        v25 = 0;
      v26 = a1;
      if (v25 >= 4)
        goto LABEL_20;
      goto LABEL_14;
    }
    v28 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))((unint64_t)&v17[v20] & v30, v13, v31);
  }
  else
  {
    v27 = *(_QWORD *)&v17[v23];
    if (v27 >= 0xFFFFFFFF)
      LODWORD(v27) = -1;
    v28 = v27 + 1;
  }
  v26 = a1;
  if (v28)
  {
LABEL_20:
    memcpy(v16, v17, ((v22 + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    return v26;
  }
  LOBYTE(v24) = *v17;
LABEL_14:
  *v16 = v24;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 16))((unint64_t)&v16[v20] & v30, (unint64_t)&v17[v20] & v30, v31);
  *(_QWORD *)((v21 + ((unint64_t)&v16[v20] & v30)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v21
                                                                                             + ((unint64_t)&v17[v20] & v30)) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)&v16[v23] = *(_QWORD *)&v17[v23];
  swift_bridgeObjectRetain();
  return v26;
}

_DWORD *assignWithCopy for Transform(_DWORD *a1, int *a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v33;
  uint64_t (*v34)(unint64_t, uint64_t, uint64_t);
  int v36;
  unint64_t v37;

  v5 = *a2;
  v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_QWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  swift_retain();
  swift_release();
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int *)(v14 + 84);
  v16 = *(_DWORD *)(v14 + 80);
  v17 = *(_DWORD *)(v14 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v18 = (_BYTE *)(((unint64_t)v11 + v16 + 8) & v17);
  v19 = (_BYTE *)(((unint64_t)v12 + v16 + 8) & v17);
  if (v15 <= 0xFB)
    v20 = 251;
  else
    v20 = *(_DWORD *)(v14 + 84);
  if (v15 <= 0x7FFFFFFF)
    v21 = 0x7FFFFFFF;
  else
    v21 = *(_DWORD *)(v14 + 84);
  v22 = ~v16;
  v23 = v16 + 1;
  v24 = *(_QWORD *)(v14 + 64) + 7;
  v25 = (v24 + ((v16 + 1) & ~v16)) & 0xFFFFFFFFFFFFFFF8;
  v26 = v25 + 8;
  v27 = ((v25 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v20 != v21)
  {
    v33 = *(_QWORD *)&v19[v26];
    if (v33 >= 0xFFFFFFFF)
      LODWORD(v33) = -1;
    v31 = v33 + 1;
    if (*(_QWORD *)&v18[v26] > 0xFFFFFFFEuLL)
      goto LABEL_22;
    goto LABEL_27;
  }
  if (v15 > 0xFB)
  {
    v37 = ((v25 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    v34 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v14 + 48);
    v36 = v34((unint64_t)&v18[v23] & v22, v15, v13);
    v31 = v34((unint64_t)&v19[v23] & v22, v15, v13);
    v27 = v37;
    if (!v36)
      goto LABEL_22;
LABEL_27:
    if (v31)
      goto LABEL_28;
    LOBYTE(v29) = *v19;
LABEL_30:
    *v18 = v29;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 16))((unint64_t)&v18[v23] & v22, (unint64_t)&v19[v23] & v22, v13);
    *(_QWORD *)((v24 + ((unint64_t)&v18[v23] & v22)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v24
                                                                                               + ((unint64_t)&v19[v23] & v22)) & 0xFFFFFFFFFFFFF8);
    *(_QWORD *)&v18[v26] = *(_QWORD *)&v19[v26];
    swift_bridgeObjectRetain();
    return a1;
  }
  v28 = *v18;
  v29 = *v19;
  v30 = v29 - 1;
  if (v29 < 2)
    v30 = 0;
  v31 = v30 - 3;
  if (v28 >= 2 && v28 - 1 >= 4)
  {
    if (v30 < 4)
      goto LABEL_30;
    goto LABEL_27;
  }
  if (v30 < 4)
    goto LABEL_25;
LABEL_22:
  if (v31)
  {
    (*(void (**)(unint64_t, uint64_t))(v14 + 8))((unint64_t)&v18[v23] & v22, v13);
    swift_bridgeObjectRelease();
LABEL_28:
    memcpy(v18, v19, v27);
    return a1;
  }
  LOBYTE(v29) = *v19;
LABEL_25:
  *v18 = v29;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 24))((unint64_t)&v18[v23] & v22, (unint64_t)&v19[v23] & v22, v13);
  *(_QWORD *)((v24 + ((unint64_t)&v18[v23] & v22)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v24
                                                                                             + ((unint64_t)&v19[v23] & v22)) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)&v18[v26] = *(_QWORD *)&v19[v26];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_DWORD *initializeWithTake for Transform(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v8 = *v9;
  v10 = (_QWORD *)(((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_DWORD *)(v13 + 84);
  v15 = *(_DWORD *)(v13 + 80);
  v16 = *(_DWORD *)(v13 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v17 = (_BYTE *)(((unint64_t)v10 + v15 + 8) & v16);
  v18 = (_BYTE *)(((unint64_t)v11 + v15 + 8) & v16);
  if (v14 <= 0xFB)
    v19 = 251;
  else
    v19 = *(_DWORD *)(v13 + 84);
  if (v14 <= 0x7FFFFFFF)
    v20 = 0x7FFFFFFF;
  else
    v20 = *(_DWORD *)(v13 + 84);
  v21 = ~v15;
  v22 = v15 + 1;
  v23 = *(_QWORD *)(v13 + 64) + 7;
  v24 = (v23 + ((v15 + 1) & ~v15)) & 0xFFFFFFFFFFFFFFF8;
  v25 = v24 + 8;
  if (v19 != v20)
  {
    v28 = *(_QWORD *)&v18[v25];
    if (v28 >= 0xFFFFFFFF)
      LODWORD(v28) = -1;
    if ((_DWORD)v28 != -1)
      goto LABEL_16;
    goto LABEL_18;
  }
  if (v14 <= 0xFB)
  {
    v26 = *v18;
    v27 = v26 - 1;
    if (v26 < 2)
      v27 = 0;
    if (v27 >= 4)
      goto LABEL_16;
LABEL_19:
    *v17 = v26;
    v29 = (unint64_t)&v17[v22] & v21;
    v30 = (unint64_t)&v18[v22] & v21;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 32))(v29, v30, v12);
    *(_QWORD *)((v23 + v29) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v23 + v30) & 0xFFFFFFFFFFFFF8);
    *(_QWORD *)&v17[v25] = *(_QWORD *)&v18[v25];
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v13 + 48))((unint64_t)&v18[v22] & v21))
  {
LABEL_18:
    LOBYTE(v26) = *v18;
    goto LABEL_19;
  }
LABEL_16:
  memcpy(v17, v18, ((v24 + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

_DWORD *assignWithTake for Transform(_DWORD *a1, int *a2, uint64_t a3)
{
  _DWORD *v4;
  unint64_t v5;
  int v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v34;
  uint64_t (*v35)(unint64_t, uint64_t, uint64_t);
  unint64_t v36;
  size_t v37;
  void *v38;
  const void *v39;
  int v41;
  unint64_t v42;
  _DWORD *v43;

  v4 = a1;
  v6 = *a2;
  v5 = (unint64_t)a2 + 7;
  *a1 = v6;
  v7 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v7 = *(_DWORD *)(v5 & 0xFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)(((v5 & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v8 = *v9;
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFCLL);
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v10 = *v11;
  v12 = (_QWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  swift_release();
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int *)(v15 + 84);
  v17 = *(_DWORD *)(v15 + 80);
  v18 = *(_DWORD *)(v15 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v19 = (_BYTE *)(((unint64_t)v12 + v17 + 8) & v18);
  v20 = (_BYTE *)(((unint64_t)v13 + v17 + 8) & v18);
  if (v16 <= 0xFB)
    v21 = 251;
  else
    v21 = *(_DWORD *)(v15 + 84);
  if (v16 <= 0x7FFFFFFF)
    v22 = 0x7FFFFFFF;
  else
    v22 = *(_DWORD *)(v15 + 84);
  v23 = ~v17;
  v24 = v17 + 1;
  v25 = *(_QWORD *)(v15 + 64) + 7;
  v26 = (v25 + ((v17 + 1) & ~v17)) & 0xFFFFFFFFFFFFFFF8;
  v27 = v26 + 8;
  v28 = ((v26 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v21 != v22)
  {
    v34 = *(_QWORD *)&v20[v27];
    if (v34 >= 0xFFFFFFFF)
      LODWORD(v34) = -1;
    v32 = v34 + 1;
    if (*(_QWORD *)&v19[v27] > 0xFFFFFFFEuLL)
      goto LABEL_22;
    goto LABEL_27;
  }
  if (v16 > 0xFB)
  {
    v42 = ((v26 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    v43 = v4;
    v35 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v15 + 48);
    v41 = v35((unint64_t)&v19[v24] & v23, v16, v14);
    v32 = v35((unint64_t)&v20[v24] & v23, v16, v14);
    v28 = v42;
    v4 = v43;
    if (!v41)
      goto LABEL_22;
LABEL_27:
    if (v32)
    {
      v38 = v19;
      v39 = v20;
      goto LABEL_29;
    }
    LOBYTE(v30) = *v20;
LABEL_31:
    *v19 = v30;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 32))((unint64_t)&v19[v24] & v23, (unint64_t)&v20[v24] & v23, v14);
    *(_QWORD *)((v25 + ((unint64_t)&v19[v24] & v23)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v25
                                                                                               + ((unint64_t)&v20[v24] & v23)) & 0xFFFFFFFFFFFFF8);
    *(_QWORD *)&v19[v27] = *(_QWORD *)&v20[v27];
    return v4;
  }
  v29 = *v19;
  v30 = *v20;
  v31 = v30 - 1;
  if (v30 < 2)
    v31 = 0;
  v32 = v31 - 3;
  if (v29 >= 2 && v29 - 1 >= 4)
  {
    if (v31 < 4)
      goto LABEL_31;
    goto LABEL_27;
  }
  if (v31 < 4)
    goto LABEL_25;
LABEL_22:
  if (v32)
  {
    v36 = (unint64_t)&v19[v24] & v23;
    v37 = v28;
    (*(void (**)(unint64_t, uint64_t))(v15 + 8))(v36, v14);
    swift_bridgeObjectRelease();
    v38 = v19;
    v39 = v20;
    v28 = v37;
LABEL_29:
    memcpy(v38, v39, v28);
    return v4;
  }
  LOBYTE(v30) = *v20;
LABEL_25:
  *v19 = v30;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 40))((unint64_t)&v19[v24] & v23, (unint64_t)&v20[v24] & v23, v14);
  *(_QWORD *)((v25 + ((unint64_t)&v19[v24] & v23)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v25
                                                                                             + ((unint64_t)&v20[v24] & v23)) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)&v19[v27] = *(_QWORD *)&v20[v27];
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t getEnumTagSinglePayload for Transform(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFB)
    v6 = 251;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v4 + 84);
  if ((v7 - 1) <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = v7 - 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v9 | 7;
  v11 = (*(_QWORD *)(v4 + 64) + ((v9 + 1) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v8 < a2)
  {
    if (((((v9 + 24) & ~v10) + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v12 = 2;
    else
      v12 = a2 - v8 + 1;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    __asm { BR              X6 }
  }
  v16 = (unint64_t *)((((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                            + 11) & 0xFFFFFFFFFFFFFFF8);
  if (v7 - 1 < 0)
  {
    v18 = (unsigned __int8 *)(((unint64_t)v16 + v10 + 8) & ~v10);
    if (v6 == v7)
    {
      if (v5 > 0xFB)
      {
        v21 = (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&v18[v9 + 1] & ~v9);
      }
      else
      {
        v19 = *v18;
        if (v19 >= 2)
          v20 = v19 - 1;
        else
          v20 = 0;
        if (v20 >= 4)
          v21 = v20 - 3;
        else
          v21 = 0;
      }
    }
    else
    {
      v22 = *(_QWORD *)&v18[v11 + 8];
      if (v22 >= 0xFFFFFFFF)
        LODWORD(v22) = -1;
      v21 = v22 + 1;
    }
    if (v21 >= 2)
      return v21 - 1;
    else
      return 0;
  }
  else
  {
    v17 = *v16;
    if (v17 >= 0xFFFFFFFF)
      LODWORD(v17) = -1;
    return (v17 + 1);
  }
}

void storeEnumTagSinglePayload for Transform(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if ((v6 - 1) <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6 - 1;
  v8 = ((((*(_QWORD *)(v5 + 64)
         + ((*(unsigned __int8 *)(v5 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8
     + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(*(unsigned __int8 *)(v5 + 80) | 7));
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_20;
  }
  else
  {
    if ((_DWORD)v8)
      v9 = 2;
    else
      v9 = a3 - v7 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_20:
      __asm { BR              X5 }
  }
  if ((_DWORD)v8)
  {
    v12 = ~v7 + a2;
    bzero(a1, v8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_186F8EC60()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x186F8ED00);
}

void sub_186F8EC68(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x186F8EC70);
  JUMPOUT(0x186F8ED00);
}

void sub_186F8ECA0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F8ED00);
}

void sub_186F8ECA8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F8ED00);
}

void sub_186F8ECB0(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((v2 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x186F8ECFCLL);
      JUMPOUT(0x186F8ECF8);
    }
    JUMPOUT(0x186F8ECBCLL);
  }
  JUMPOUT(0x186F8ED00);
}

uint64_t type metadata completion function for Transform.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for RelationshipModifier(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Transform.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  v8 = ((v7 + ((v6 + 1) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15;
  if (v6 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || (v8 & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v11 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v12 = ((unint64_t)a1 + v6 + 1) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 1) & ~v6;
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v12, v13);
    *(_QWORD *)((v7 + v12) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v7 + v13) & 0xFFFFFFFFFFFFF8);
    *(_QWORD *)(((unint64_t)v4 + v8) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v8) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Transform.State(uint64_t a1, uint64_t a2)
{
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 1
                                                                                            + a1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  return swift_bridgeObjectRelease();
}

_BYTE *initializeWithCopy for Transform.State(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64) + 7;
  *(_QWORD *)((v9 + v7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v9 + v8) & 0xFFFFFFFFFFFFF8);
  v10 = ((v9 + ((v6 + 1) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)((unint64_t)&a1[v10] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&a2[v10] & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

_BYTE *assignWithCopy for Transform.State(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64) + 7;
  *(_QWORD *)((v9 + v7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v9 + v8) & 0xFFFFFFFFFFFFF8);
  v10 = ((v9 + ((v6 + 1) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)((unint64_t)&a1[v10] & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&a2[v10] & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_BYTE *initializeWithTake for Transform.State(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64) + 7;
  *(_QWORD *)((v9 + v7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v9 + v8) & 0xFFFFFFFFFFFFF8);
  v10 = ((v9 + ((v6 + 1) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)((unint64_t)&a1[v10] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&a2[v10] & 0xFFFFFFFFFFFFF8);
  return a1;
}

_BYTE *assignWithTake for Transform.State(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64) + 7;
  *(_QWORD *)((v9 + v7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v9 + v8) & 0xFFFFFFFFFFFFF8);
  v10 = ((v9 + ((v6 + 1) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)((unint64_t)&a1[v10] & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&a2[v10] & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Transform.State(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFB)
    v6 = 251;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (*(_QWORD *)(v4 + 64) + ((v8 + 1) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v7 >= a2)
  {
    if (v6 == v7)
    {
      if (v5 > 0xFB)
      {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v8 + 1] & ~v8);
      }
      else
      {
        v14 = *a1;
        if (v14 >= 2)
          v15 = v14 - 1;
        else
          v15 = 0;
        if (v15 >= 4)
          return v15 - 3;
        else
          return 0;
      }
    }
    else
    {
      v16 = *(_QWORD *)((unint64_t)&a1[v9 + 15] & 0xFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  else
  {
    if (((((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v10 = 2;
    else
      v10 = a2 - v7 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_186F8F310 + 4 * byte_187BFB327[v12]))();
  }
}

void storeEnumTagSinglePayload for Transform.State(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 1) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X16 }
  }
  if (((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 1) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + ((v7 + 1) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_186F8F4E4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x186F8F574);
}

void sub_186F8F4EC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x186F8F4F4);
  JUMPOUT(0x186F8F574);
}

void sub_186F8F52C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F8F574);
}

void sub_186F8F534()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F8F574);
}

void sub_186F8F53C(uint64_t a1, int a2, unsigned int a3)
{
  int v3;
  int v4;
  _BYTE *v5;
  uint64_t v6;

  *(_WORD *)&v5[v6] = 0;
  if (a2)
  {
    if (v4 != v3)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x186F8F570);
      JUMPOUT(0x186F8F56CLL);
    }
    if (a3 > 0xFB)
      JUMPOUT(0x186F8F548);
    *v5 = a2 + 4;
  }
  JUMPOUT(0x186F8F574);
}

void base witness table accessor for _AttributeBody in Transform<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined init with copy of AccessibilityRelationshipScope.Key(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  return a2;
}

void type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityNode], (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
  }
}

uint64_t outlined init with copy of AccessibilityRelationshipScope.Key?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?));
  }
}

uint64_t outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in updateRelatedNodes #1 (removing:from:) in updateRelatedNodesByKey #1 (_:) in AccessibilityRelationshipScope.clear(from:)(uint64_t *a1)
{
  uint64_t v1;

  return specialized Sequence<>.contains(_:)(*a1, *(_QWORD *)(*(_QWORD *)(v1 + 16) + 56)) & 1;
}

uint64_t associated type witness table accessor for TupleProtocol.Tail : TupleProtocol in Tuple<A, B>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

_UNKNOWN **associated type witness table accessor for TupleProtocol.Tail : TupleProtocol in EmptyTuple()
{
  return &protocol witness table for EmptyTuple;
}

uint64_t base witness table accessor for Equatable in <> Tuple<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *(_QWORD *)(*(_QWORD *)(a3 - 16) + 8);
  v5[0] = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  v5[1] = v3;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Tuple<A, B>, a1, v5);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EmptyTuple()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

uint64_t static Tuple<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    return 0;
  type metadata accessor for Tuple(0, a3, a4, a7);
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t Tuple<>.hash(into:)()
{
  dispatch thunk of Hashable.hash(into:)();
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int Tuple<>.hashValue.getter()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Tuple<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static Tuple<>.== infix(_:_:)(a1, a2, a3[2], a3[3], *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16), a3[4]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> Tuple<A, B>()
{
  return Tuple<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> Tuple<A, B>()
{
  return Tuple<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> Tuple<A, B>()
{
  Hasher.init(_seed:)();
  Tuple<>.hash(into:)();
  return Hasher._finalize()();
}

uint64_t type metadata accessor for Tuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Tuple);
}

ValueMetadata *type metadata accessor for EmptyTuple.Head()
{
  return &type metadata for EmptyTuple.Head;
}

ValueMetadata *type metadata accessor for EmptyTuple()
{
  return &type metadata for EmptyTuple;
}

uint64_t type metadata completion function for Tuple()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Tuple(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80));
  if (v10 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (v9 & (unint64_t)~v8) + *(_QWORD *)(v7 + 64) > 0x18)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  else
  {
    v14 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v14, ((unint64_t)a2 + v9) & v14, v5);
  }
  return v4;
}

uint64_t initializeWithCopy for Tuple(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithCopy for Tuple(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithTake for Tuple(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithTake for Tuple(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Tuple(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_186F8FE18 + 4 * byte_187BFB8A0[v17 - 1]))();
}

void storeEnumTagSinglePayload for Tuple(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

unint64_t lazy protocol witness table accessor for type EmptyTuple and conformance EmptyTuple()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyTuple and conformance EmptyTuple;
  if (!lazy protocol witness table cache variable for type EmptyTuple and conformance EmptyTuple)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EmptyTuple, &type metadata for EmptyTuple);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyTuple and conformance EmptyTuple);
  }
  return result;
}

void MenuButton.init(label:content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void MenuButton.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void MenuButton<>.init(_:content:)()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for View.Body : View in MenuButton<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for MenuButton(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_186F90234 + 4 * byte_187BFBA20[v17 - 1]))();
}

void storeEnumTagSinglePayload for MenuButton(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void type metadata accessor for MenuButton()
{
  JUMPOUT(0x18D75FF28);
}

void sub_186F904BC()
{
  lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label();
  type metadata accessor for StaticSourceWriter();
}

void sub_186F904F8()
{
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_186F90530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[12];

  v1 = type metadata accessor for ModifiedContent();
  v5[0] = &protocol witness table for ResolvedMenuButton;
  v5[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v2 = MEMORY[0x1E0CE2E70];
  v4[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v5);
  v4[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](v2, v1, v4);
}

unint64_t lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _MenuButtonStyleConfiguration.Label, &type metadata for _MenuButtonStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _MenuButtonStyleConfiguration.Label, &type metadata for _MenuButtonStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _MenuButtonStyleConfiguration.Content, &type metadata for _MenuButtonStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _MenuButtonStyleConfiguration.Content, &type metadata for _MenuButtonStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content);
  }
  return result;
}

void MenuButton<>.init<A>(_:content:)()
{
  MenuButton.init(label:content:)();
}

void LimitedAvailabilityTableColumnContent.init<A>(erasing:)()
{
  type metadata accessor for LimitedAvailabilityTableColumnContentStorage();
}

uint64_t sub_186F90654()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 144) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 160), v0);
  return v1;
}

void type metadata accessor for LimitedAvailabilityTableColumnContentStorage()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t LimitedAvailabilityTableColumnContentStorage.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 144) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 160), a1);
  return v2;
}

void static LimitedAvailabilityTableColumnContent._makeContent(content:inputs:)()
{
  PreferencesInputs.makeIndirectOutputs()();
  type metadata accessor for LimitedAvailabilityTableColumnContent();
}

void sub_186F907C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  type metadata accessor for _GraphValue();
  v8 = _GraphValue.value.getter();
  v9 = (id)AGSubgraphGetCurrent();
  if (v9)
  {
    *(_QWORD *)v0 = &v15;
    *(_DWORD *)(v0 + 128) = v8;
    v11 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 136) = v9;
    *(_QWORD *)(v0 + 144) = v11;
    *(_DWORD *)(v0 + 152) = *(_DWORD *)(v0 + 44);
    *(_QWORD *)(v0 + 160) = v3;
    *(_QWORD *)(v0 + 168) = v4;
    *(_QWORD *)(v0 + 176) = v5;
    v12 = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v0 + 184) = v2;
    *(_QWORD *)(v0 + 192) = v12;
    *(_QWORD *)(v0 + 200) = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v0 + 208) = v6;
    *(_QWORD *)(v0 + 216) = v7;
    *(_DWORD *)(v0 + 224) = *(_DWORD *)(v0 + 12);
    *(_QWORD *)(v0 + 232) = v1;
    *(_DWORD *)(v0 + 240) = *(_DWORD *)(v0 + 108);
    *(_QWORD *)(v0 + 248) = 0;
    MEMORY[0x1E0C80A78](v9, v10);
    v13 = *(_QWORD *)(v0 + 72);
    *(_QWORD *)(v0 + 256) = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 264) = v13;
    v14 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 272) = *(_QWORD *)(v0 + 80);
    *(_QWORD *)(v0 + 280) = v14;
    type metadata accessor for LimitedAvailabilityTableColumnContent.IndirectOutputs();
  }
  __break(1u);
  JUMPOUT(0x186F909C0);
}

void type metadata accessor for LimitedAvailabilityTableColumnContent()
{
  JUMPOUT(0x18D75FF28);
}

void LimitedAvailabilityTableColumnContent.IndirectOutputs.updateValue()()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;

  if (!*(_QWORD *)(v0 + 120))
  {
    v1 = (id)AGSubgraphGetGraph();
    v2 = (void *)AGSubgraphCreate();

    *(_QWORD *)(v0 + 120) = v2;
    v2;
    AGSubgraphAddChild();
    AGGraphClearUpdate();
    v3 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in LimitedAvailabilityTableColumnContent.IndirectOutputs.updateValue()(v0);
  }
}

void sub_186F90A78()
{
  void *v0;
  void *v1;

  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
}

void closure #1 in LimitedAvailabilityTableColumnContent.IndirectOutputs.updateValue()(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v1 = *(_QWORD *)(a1 + 32);
  swift_beginAccess();
  v2 = *(_DWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v11 = *(_OWORD *)(v1 + 32);
  v10 = *(_OWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  v6 = *(_BYTE *)(v1 + 80);
  v7 = *(_BYTE *)(v1 + 81);
  v8 = *(_QWORD *)(v1 + 88);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E0CE37B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = v2;
  *(_QWORD *)(v9 + 24) = v3;
  *(_OWORD *)(v9 + 32) = v11;
  *(_OWORD *)(v9 + 48) = v10;
  *(_QWORD *)(v9 + 64) = v4;
  *(_QWORD *)(v9 + 72) = v5;
  *(_BYTE *)(v9 + 80) = v6;
  *(_BYTE *)(v9 + 81) = v7;
  *(_QWORD *)(v9 + 88) = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  type metadata accessor for LimitedAvailabilityTableColumnContent.IndirectOutputs();
}

void sub_186F90C4C()
{
  specialized LimitedAvailabilityTableColumnContent.IndirectOutputs.content.getter();
}

void sub_186F90C54()
{
  swift_retain();
  swift_bridgeObjectRetain();
  type metadata accessor for LimitedAvailabilityTableColumnContent();
}

uint64_t sub_186F90C78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  uint64_t v10;
  int v11;
  __int128 v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;

  _GraphValue.init(_:)();
  v19 = v2;
  v20 = v13;
  v21 = v3;
  v22 = v6;
  v23 = v7;
  v24 = v0;
  v25 = v10;
  v26 = v12;
  v27 = v5;
  v28 = v14;
  v8 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *))(*(_QWORD *)v1 + 112);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(&v17, &v15, &v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v19 = v4;
  v20 = v11;
  v15 = v17;
  v16 = v18;
  PreferencesOutputs.attachIndirectOutputs(to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void protocol witness for static StatefulRule.initialValue.getter in conformance LimitedAvailabilityTableColumnContent<A, B>.IndirectOutputs(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void LimitedAvailabilityTableColumnContent.tableColumnBody.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for TableColumnContent.tableColumnBody.getter in conformance LimitedAvailabilityTableColumnContent<A, B>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance LimitedAvailabilityTableColumnContent<A, B>()
{
  static LimitedAvailabilityTableColumnContent._makeContent(content:inputs:)();
}

uint64_t protocol witness for static TableColumnContent._tableColumnCount(inputs:) in conformance LimitedAvailabilityTableColumnContent<A, B>()
{
  return protocol witness for static View._viewListCount(inputs:) in conformance RichTextEditor();
}

void LimitedAvailabilityTableColumnContentStorageBase.makeContent(content:inputs:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t LimitedAvailabilityTableColumnContentStorageBase.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t LimitedAvailabilityTableColumnContentStorageBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void LimitedAvailabilityTableColumnContentStorage.makeContent(content:inputs:)()
{
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for LimitedAvailabilityTableColumnContent();
}

void sub_186F90F8C()
{
  uint64_t v0;

  type metadata accessor for _GraphValue();
  *(_DWORD *)(v0 - 124) = _GraphValue.value.getter();
  type metadata accessor for LimitedAvailabilityTableColumnContentStorage.Child();
}

uint64_t sub_186F90FCC(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LimitedAvailabilityTableColumnContentStorage<A, B, C>.Child, a1);
  _GraphValue.init<A>(_:)();
  v14 = v5;
  v15 = v1;
  v16 = v4;
  v17 = v7;
  v18 = v8;
  v19 = v12;
  v20 = v11;
  v21 = v9;
  v22 = v13;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v2 + 64))(v6 - 128, &v14, v3, v2);
}

void LimitedAvailabilityTableColumnContentStorage.Child.value.getter()
{
  specialized LimitedAvailabilityTableColumnContentStorage.Child.content.getter();
}

void sub_186F91098()
{
  type metadata accessor for LimitedAvailabilityTableColumnContentStorage();
}

uint64_t sub_186F910B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = swift_dynamicCastClassUnconditional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2 + *(_QWORD *)(*(_QWORD *)v2 + 160), v0);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance LimitedAvailabilityTableColumnContentStorage<A, B, C>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) - 8) + 56))(a2, 1, 1);
}

void protocol witness for Rule.value.getter in conformance LimitedAvailabilityTableColumnContentStorage<A, B, C>.Child()
{
  LimitedAvailabilityTableColumnContentStorage.Child.value.getter();
}

uint64_t LimitedAvailabilityTableColumnContentStorage.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 144) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 160));
}

uint64_t LimitedAvailabilityTableColumnContentStorage.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 144) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 160));
  return swift_deallocClassInstance();
}

uint64_t _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t, char *);
  uint64_t result;
  uint64_t v17;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v15(v12, v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

void type metadata accessor for LimitedAvailabilityTableColumnContent.IndirectOutputs()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t outlined release of LimitedAvailabilityTableColumnContent<A, B>.IndirectOutputs(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 120);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return a1;
}

_UNKNOWN **associated type witness table accessor for TableColumnContent.TableColumnBody : TableColumnContent in LimitedAvailabilityTableColumnContent<A, B>()
{
  return &protocol witness table for Never;
}

uint64_t associated type witness table accessor for TableColumnContent.TableColumnSortComparator : SortComparator in LimitedAvailabilityTableColumnContent<A, B>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 40);
}

uint64_t instantiation function for generic protocol witness table for LimitedAvailabilityTableColumnContent<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LimitedAvailabilityTableColumnContent<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for LimitedAvailabilityTableColumnContentStorageBase()
{
  return swift_initClassMetadata2();
}

void type metadata accessor for LimitedAvailabilityTableColumnContentStorageBase()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t method lookup function for LimitedAvailabilityTableColumnContentStorageBase()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata completion function for LimitedAvailabilityTableColumnContentStorage()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void destroy for LimitedAvailabilityTableColumnContent.IndirectOutputs(uint64_t a1)
{

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for LimitedAvailabilityTableColumnContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(void **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v6 = *(void **)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v6;
  v7 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = v6;
  return a1;
}

uint64_t assignWithCopy for LimitedAvailabilityTableColumnContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v7 = *(void **)(a1 + 120);
  v8 = *(void **)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v8;
  v9 = v8;

  return a1;
}

uint64_t assignWithTake for LimitedAvailabilityTableColumnContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v4 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);

  return a1;
}

uint64_t getEnumTagSinglePayload for LimitedAvailabilityTableColumnContent.IndirectOutputs(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LimitedAvailabilityTableColumnContent.IndirectOutputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void base witness table accessor for _AttributeBody in LimitedAvailabilityTableColumnContent<A, B>.IndirectOutputs()
{
  JUMPOUT(0x18D75FFDCLL);
}

void specialized LimitedAvailabilityTableColumnContent.IndirectOutputs.content.getter()
{
  type metadata accessor for LimitedAvailabilityTableColumnContent();
}

uint64_t sub_186F91784()
{
  return *(_QWORD *)AGGraphGetValue();
}

void type metadata accessor for LimitedAvailabilityTableColumnContentStorage.Child()
{
  JUMPOUT(0x18D75FF28);
}

void specialized LimitedAvailabilityTableColumnContentStorage.Child.content.getter()
{
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for LimitedAvailabilityTableColumnContent();
}

uint64_t sub_186F9183C()
{
  return *(_QWORD *)AGGraphGetValue();
}

uint64_t sub_186F9186C()
{
  return swift_deallocObject();
}

void base witness table accessor for _AttributeBody in LimitedAvailabilityTableColumnContentStorage<A, B, C>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

void static _DigitalCrownDecelerationRate.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _DigitalCrownDecelerationRate.hash(into:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _DigitalCrownDecelerationRate.hashValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _DigitalCrownConfiguration.crownHapticsConfiguration.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _DigitalCrownConfiguration.crownHapticsConfiguration.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _DigitalCrownConfiguration.crownHapticsConfiguration.modify()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _DigitalCrownConfiguration._isScrollIndicatorAlwaysOnScreen.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _DigitalCrownConfiguration._onlyUseMinorDetents.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _DigitalCrownConfiguration._decelerationRate.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _DigitalCrownConfiguration._hapticsStrength.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _DigitalCrownConfiguration.isContinuous.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _DigitalCrownConfiguration.isContinuous.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _DigitalCrownConfiguration.shouldShowScrollIndicator.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _DigitalCrownConfiguration.isHapticFeedbackEnabled.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _DigitalCrownConfiguration.rotationalSensitivity.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _DigitalCrownConfiguration.init(minValue:maxValue:stride:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _DigitalCrownConfiguration.init(minValue:maxValue:stride:isRubberBandingEnabled:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type _DigitalCrownDecelerationRate and conformance _DigitalCrownDecelerationRate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DigitalCrownDecelerationRate and conformance _DigitalCrownDecelerationRate;
  if (!lazy protocol witness table cache variable for type _DigitalCrownDecelerationRate and conformance _DigitalCrownDecelerationRate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _DigitalCrownDecelerationRate, &type metadata for _DigitalCrownDecelerationRate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DigitalCrownDecelerationRate and conformance _DigitalCrownDecelerationRate);
  }
  return result;
}

void sub_186F919E4(uint64_t a1)
{
  outlined copy of _CrownHapticsConfiguration?(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_186F91A04(uint64_t a1)
{
  outlined copy of _CrownHapticsConfiguration(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_186F91A24(uint64_t a1)
{
  keypath_get_1Tm(a1);
}

void sub_186F91A30()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_186F91A40(uint64_t a1)
{
  keypath_get_1Tm(a1);
}

void sub_186F91A4C(uint64_t a1)
{
  keypath_get_1Tm(a1);
}

void keypath_get_1Tm(uint64_t a1)
{
  outlined copy of _CrownHapticsConfiguration?(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t storeEnumTagSinglePayload for _DigitalCrownDecelerationRate(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_186F91AC4 + 4 * byte_187BFBD05[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_186F91AF8 + 4 * byte_187BFBD00[v4]))();
}

uint64_t sub_186F91AF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F91B00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186F91B08);
  return result;
}

uint64_t sub_186F91B14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186F91B1CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_186F91B20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F91B28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _DigitalCrownDecelerationRate()
{
  return &type metadata for _DigitalCrownDecelerationRate;
}

uint64_t outlined copy of _CrownHapticsConfiguration(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 3)
    return swift_retain();
  if (a3 == 2 || a3 == 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for _DigitalCrownConfiguration(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 80);
  if (v1 != 255)
    return outlined consume of _CrownHapticsConfiguration(*(_QWORD *)(result + 64), *(_QWORD *)(result + 72), v1);
  return result;
}

uint64_t outlined consume of _CrownHapticsConfiguration(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 3)
    return swift_release();
  if (a3 == 2 || a3 == 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for _DigitalCrownConfiguration(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 41) = *(_DWORD *)(a2 + 41);
  *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 45);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v4 = *(unsigned __int8 *)(a2 + 80);
  if (v4 == 255)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 64);
    v6 = *(_QWORD *)(a2 + 72);
    outlined copy of _CrownHapticsConfiguration(v5, v6, v4);
    *(_QWORD *)(a1 + 64) = v5;
    *(_QWORD *)(a1 + 72) = v6;
    *(_BYTE *)(a1 + 80) = v4;
  }
  *(_DWORD *)(a1 + 81) = *(_DWORD *)(a2 + 81);
  *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
  return a1;
}

uint64_t assignWithCopy for _DigitalCrownConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  v5 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 45);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v6 = a1 + 64;
  v7 = (__int128 *)(a2 + 64);
  v8 = *(unsigned __int8 *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 80) == 255)
  {
    if (v8 == 255)
    {
      v17 = *v7;
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *(_OWORD *)v6 = v17;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 64);
      v15 = *(_QWORD *)(a2 + 72);
      outlined copy of _CrownHapticsConfiguration(v14, v15, v8);
      *(_QWORD *)(a1 + 64) = v14;
      *(_QWORD *)(a1 + 72) = v15;
      *(_BYTE *)(a1 + 80) = v8;
    }
  }
  else if (v8 == 255)
  {
    outlined destroy of _CrownHapticsConfiguration(a1 + 64);
    v16 = *((_BYTE *)v7 + 16);
    *(_OWORD *)v6 = *v7;
    *(_BYTE *)(v6 + 16) = v16;
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_QWORD *)(a2 + 72);
    outlined copy of _CrownHapticsConfiguration(v9, v10, v8);
    v11 = *(_QWORD *)(a1 + 64);
    v12 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v10;
    v13 = *(_BYTE *)(a1 + 80);
    *(_BYTE *)(a1 + 80) = v8;
    outlined consume of _CrownHapticsConfiguration(v11, v12, v13);
  }
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
  return a1;
}

uint64_t outlined destroy of _CrownHapticsConfiguration(uint64_t a1)
{
  destroy for _CrownHapticsConfiguration(a1);
  return a1;
}

__n128 __swift_memcpy86_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 78) = *(_QWORD *)(a2 + 78);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for _DigitalCrownConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 45);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v4 = a1 + 64;
  v5 = a2 + 64;
  v6 = *(unsigned __int8 *)(a1 + 80);
  if (v6 == 255)
    goto LABEL_5;
  v7 = *(unsigned __int8 *)(a2 + 80);
  if (v7 == 255)
  {
    outlined destroy of _CrownHapticsConfiguration(a1 + 64);
LABEL_5:
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_BYTE *)(v4 + 16) = *(_BYTE *)(v5 + 16);
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v5;
  *(_BYTE *)(a1 + 80) = v7;
  outlined consume of _CrownHapticsConfiguration(v8, v9, v6);
LABEL_6:
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_WORD *)(a1 + 82) = *(_WORD *)(a2 + 82);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
  return a1;
}

uint64_t getEnumTagSinglePayload for _DigitalCrownConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 86))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 25);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _DigitalCrownConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 84) = 0;
    *(_DWORD *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 86) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 86) = 0;
    if (a2)
      *(_BYTE *)(result + 25) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for _DigitalCrownConfiguration()
{
  return &type metadata for _DigitalCrownConfiguration;
}

uint64_t outlined copy of _CrownHapticsConfiguration?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    return outlined copy of _CrownHapticsConfiguration(a1, a2, a3);
  return a1;
}

void _DigitalCrownConfiguration._isScrollIndicatorAlwaysOnScreen.setter()
{
  _DigitalCrownConfiguration.isContinuous.setter();
}

void _DigitalCrownConfiguration._onlyUseMinorDetents.setter()
{
  _DigitalCrownConfiguration.isContinuous.setter();
}

void _DigitalCrownConfiguration.shouldShowScrollIndicator.setter()
{
  _DigitalCrownConfiguration.isContinuous.setter();
}

void _DigitalCrownConfiguration.isHapticFeedbackEnabled.setter()
{
  _DigitalCrownConfiguration.isContinuous.setter();
}

void sub_186F92070()
{
  sub_186F91A30();
}

void sub_186F9207C()
{
  sub_186F91A30();
}

void _DigitalCrownConfiguration._decelerationRate.setter()
{
  _DigitalCrownConfiguration.crownHapticsConfiguration.setter();
}

void _DigitalCrownConfiguration._hapticsStrength.setter()
{
  _DigitalCrownConfiguration.crownHapticsConfiguration.setter();
}

void _DigitalCrownConfiguration.rotationalSensitivity.setter()
{
  _DigitalCrownConfiguration.crownHapticsConfiguration.setter();
}

void _diagnoseUnavailableCodeReached()()
{
  if (__isPlatformVersionAtLeast(2, 17, 0, 0))
  {
    _diagnoseUnavailableCodeReached()();
    __break(1u);
  }
  back deployment fallback for _diagnoseUnavailableCodeReached()();
}

void View.navigationSplitViewOpaqueBackground()()
{
  _diagnoseUnavailableCodeReached()();
}

void static NavigationSplitViewOpaqueBackgroundTraitKey.defaultValue.getter()
{
  _diagnoseUnavailableCodeReached()();
}

ValueMetadata *type metadata accessor for NavigationSplitViewOpaqueBackgroundTraitKey()
{
  return &type metadata for NavigationSplitViewOpaqueBackgroundTraitKey;
}

uint64_t sub_186F9212C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingModifier<NavigationSplitViewOpaqueBackgroundTraitKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<NavigationSplitViewOpaqueBackgroundTraitKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _TraitWritingModifier<NavigationSplitViewOpaqueBackgroundTraitKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<NavigationSplitViewOpaqueBackgroundTraitKey>)
  {
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<NavigationSplitViewOpaqueBackgroundTraitKey>);
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<NavigationSplitViewOpaqueBackgroundTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<NavigationSplitViewOpaqueBackgroundTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<NavigationSplitViewOpaqueBackgroundTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<NavigationSplitViewOpaqueBackgroundTraitKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<NavigationSplitViewOpaqueBackgroundTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

void back deployment fallback for _diagnoseUnavailableCodeReached()()
{
  _diagnoseUnavailableCodeReached_aeic()();
}

void _diagnoseUnavailableCodeReached_aeic()()
{
  _assertionFailure(_:_:flags:)();
  __break(1u);
}

uint64_t View.handGestureShortcut(_:isEnabled:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t IsHandGestureShortcut;
  _QWORD v17[2];
  _QWORD v18[2];

  v7 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for _ConditionalContent();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v17 - v11;
  View.handGestureShortcutBuilder(_:isEnabled:)(a2, a3, a4, (uint64_t)v17 - v11);
  v13 = lazy protocol witness table accessor for type ExternalGestureActionModifier and conformance ExternalGestureActionModifier();
  v18[0] = a4;
  v18[1] = v13;
  v17[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v18);
  v17[1] = a4;
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v8, v17);
  IsHandGestureShortcut = lazy protocol witness table accessor for type IsHandGestureShortcut and conformance IsHandGestureShortcut();
  View.input<A>(_:)((uint64_t)&unk_1E1AD7908, v8, (uint64_t)&unk_1E1AD7908, v14, IsHandGestureShortcut);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t View.handGestureShortcutBuilder(_:isEnabled:)@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[2];
  char v30;

  v27 = a4;
  v7 = type metadata accessor for ModifiedContent();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v25 - v14;
  v16 = type metadata accessor for _ConditionalContent();
  v26 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v25 - v19;
  v30 = a1;
  MEMORY[0x18D75B4AC](&v30, a2, &type metadata for ExternalGestureActionModifier, a3, v18);
  v21 = lazy protocol witness table accessor for type ExternalGestureActionModifier and conformance ExternalGestureActionModifier();
  v29[0] = a3;
  v29[1] = v21;
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v29);
  static ViewBuilder.buildExpression<A>(_:)(v11, v7, v22);
  v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  v23(v11, v7);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, v7, (uint64_t)v11);
  static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v11, v7);
  v23(v11, v7);
  v23(v15, v7);
  v28[0] = v22;
  v28[1] = a3;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v16, v28);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v20, v16, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v20, v16);
}

unint64_t lazy protocol witness table accessor for type ExternalGestureActionModifier and conformance ExternalGestureActionModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExternalGestureActionModifier and conformance ExternalGestureActionModifier;
  if (!lazy protocol witness table cache variable for type ExternalGestureActionModifier and conformance ExternalGestureActionModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ExternalGestureActionModifier, &type metadata for ExternalGestureActionModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExternalGestureActionModifier and conformance ExternalGestureActionModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IsHandGestureShortcut and conformance IsHandGestureShortcut()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut;
  if (!lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsHandGestureShortcut, &unk_1E1AD7908);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut;
  if (!lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsHandGestureShortcut, &unk_1E1AD7908);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut;
  if (!lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsHandGestureShortcut, &unk_1E1AD7908);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut;
  if (!lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsHandGestureShortcut, &unk_1E1AD7908);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut;
  if (!lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsHandGestureShortcut, &unk_1E1AD7908);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance HandGestureShortcut.Storage()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance HandGestureShortcut.Storage()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HandGestureShortcut.Storage()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t static HandGestureShortcut.== infix(_:_:)()
{
  return 1;
}

uint64_t EnvironmentValues.isHandGestureShortcutEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<IsHandGestureShortcutEnabled>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<IsHandGestureShortcutEnabled> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<IsHandGestureShortcutEnabled>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<IsHandGestureShortcutEnabled>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<IsHandGestureShortcutEnabled> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<IsHandGestureShortcutEnabled>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.isHandGestureShortcutEnabled.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<IsHandGestureShortcutEnabled>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<IsHandGestureShortcutEnabled> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<IsHandGestureShortcutEnabled>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ExternalGestureActionModifier.ContentView()
{
  lazy protocol witness table accessor for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView();
  return static ConditionallyArchivableView._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ExternalGestureActionModifier.ContentView()
{
  lazy protocol witness table accessor for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView();
  return static ConditionallyArchivableView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ExternalGestureActionModifier.ContentView()
{
  lazy protocol witness table accessor for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView();
  return static ConditionallyArchivableView._viewListCount(inputs:)();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ExternalGestureActionModifier@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t result;

  v3 = *v1;
  result = swift_getKeyPath();
  *(_BYTE *)a1 = v3;
  *(_QWORD *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = v3;
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsHandGestureShortcut()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type IsHandGestureShortcut and conformance IsHandGestureShortcut();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsHandGestureShortcut()
{
  lazy protocol witness table accessor for type IsHandGestureShortcut and conformance IsHandGestureShortcut();
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsArchivingHandGesture()
{
  char v1;

  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1 & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys()
{
  lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys()
{
  lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys, (uint64_t)&unk_1E1B070C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t result;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  outlined copy of Environment<Bool>.Content(v3, v4);
  v5 = specialized Environment.wrappedValue.getter(v3, v4);
  result = outlined consume of Environment<Bool>.Content(v3, v4);
  *a1 = (v5 & 1) == 0;
  return result;
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ExternalGestureActionModifier()
{
  return static ViewModifier.viewListCount(inputs:body:)();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance HandGestureShortcutInteractiveControl@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t View.addingHandGestureShortcutPlatformLayer()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

ValueMetadata *type metadata accessor for HandGestureShortcut()
{
  return &type metadata for HandGestureShortcut;
}

uint64_t sub_186F92D44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for _ConditionalContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<IsHandGestureShortcut>, (uint64_t (*)(void))lazy protocol witness table accessor for type IsHandGestureShortcut and conformance IsHandGestureShortcut, (uint64_t)&unk_1E1AD7908, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v4 = type metadata accessor for ModifiedContent();
  v9[0] = v1;
  v9[1] = lazy protocol witness table accessor for type ExternalGestureActionModifier and conformance ExternalGestureActionModifier();
  v5 = MEMORY[0x1E0CE2E70];
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v9);
  v8[1] = v1;
  v7[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v3, v8);
  v7[1] = &protocol witness table for ViewInputFlagModifier<A>;
  return MEMORY[0x18D75FFDC](v5, v4, v7);
}

uint64_t sub_186F92E34(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t getEnumTagSinglePayload for HandGestureShortcut.Storage(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for HandGestureShortcut.Storage(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_186F92ED0 + 4 * asc_187BFBE20[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_186F92EF0 + 4 * byte_187BFBE25[v4]))();
}

_BYTE *sub_186F92ED0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_186F92EF0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_186F92EF8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_186F92F00(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_186F92F08(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_186F92F10(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for HandGestureShortcut.Storage()
{
  return &type metadata for HandGestureShortcut.Storage;
}

ValueMetadata *type metadata accessor for HandGestureShortcutInteractiveControl()
{
  return &type metadata for HandGestureShortcutInteractiveControl;
}

void *type metadata accessor for IsHandGestureShortcut()
{
  return &unk_1E1AD7908;
}

ValueMetadata *type metadata accessor for ExternalGestureActionModifier()
{
  return &type metadata for ExternalGestureActionModifier;
}

unint64_t lazy protocol witness table accessor for type HandGestureShortcut.Storage and conformance HandGestureShortcut.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandGestureShortcut.Storage and conformance HandGestureShortcut.Storage;
  if (!lazy protocol witness table cache variable for type HandGestureShortcut.Storage and conformance HandGestureShortcut.Storage)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HandGestureShortcut.Storage, &type metadata for HandGestureShortcut.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcut.Storage and conformance HandGestureShortcut.Storage);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in HandGestureShortcutInteractiveControl()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsHandGestureShortcut()
{
  return &protocol witness table for IsHandGestureShortcut;
}

uint64_t associated type witness table accessor for ViewInputFlag.Input.PropertyKey.Value : Equatable in IsHandGestureShortcut()
{
  return MEMORY[0x1E0DEAFB8];
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ExternalGestureActionModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_186F93108@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isHandGestureShortcutEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_186F93144()
{
  return EnvironmentValues.isHandGestureShortcutEnabled.setter();
}

void type metadata accessor for EnvironmentPropertyKey<IsHandGestureShortcutEnabled>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<IsHandGestureShortcutEnabled>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<IsHandGestureShortcutEnabled>);
  }
}

ValueMetadata *type metadata accessor for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter()
{
  return &type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter;
}

void *type metadata accessor for IsHandGestureShortcutEnabled()
{
  return &unk_1E1AF6EE8;
}

uint64_t getEnumTagSinglePayload for ExternalGestureActionModifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ExternalGestureActionModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_186F932D0 + 4 * byte_187BFBE2F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_186F93304 + 4 * byte_187BFBE2A[v4]))();
}

uint64_t sub_186F93304(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F9330C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186F93314);
  return result;
}

uint64_t sub_186F93320(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186F93328);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_186F9332C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F93334(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExternalGestureActionModifier.ContentView()
{
  return &type metadata for ExternalGestureActionModifier.ContentView;
}

uint64_t getEnumTagSinglePayload for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader()
{
  return &type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader;
}

void *type metadata accessor for IsArchivingHandGesture()
{
  return &unk_1E1ADC2B0;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>, ViewInputFlagModifier<IsHandGestureShortcut>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>, ViewInputFlagModifier<IsHandGestureShortcut>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>, ViewInputFlagModifier<IsHandGestureShortcut>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>, ViewInputFlagModifier<IsHandGestureShortcut>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for ViewInputFlagModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>, ViewInputFlagModifier<IsHandGestureShortcut>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>, ViewInputFlagModifier<IsHandGestureShortcut>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>, ViewInputFlagModifier<IsHandGestureShortcut>>)
  {
    type metadata accessor for ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<IsHandGestureShortcut>, (uint64_t (*)(void))lazy protocol witness table accessor for type IsHandGestureShortcut and conformance IsHandGestureShortcut, (uint64_t)&unk_1E1AD7908, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>, ViewInputFlagModifier<IsHandGestureShortcut>>);
  }
}

void type metadata accessor for ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>);
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Bool>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0CE65C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView;
  if (!lazy protocol witness table cache variable for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ExternalGestureActionModifier.ContentView, &type metadata for ExternalGestureActionModifier.ContentView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView;
  if (!lazy protocol witness table cache variable for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ExternalGestureActionModifier.ContentView, &type metadata for ExternalGestureActionModifier.ContentView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl>, StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl>, StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl>, StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl>, StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<HandGestureShortcutInteractiveControl> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<HandGestureShortcutInteractiveControl>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl, (uint64_t)&type metadata for HandGestureShortcutInteractiveControl);
    v3[1] = lazy protocol witness table accessor for type StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl>, StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl>, StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl>, StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HandGestureShortcutInteractiveControl>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl, (uint64_t)&type metadata for HandGestureShortcutInteractiveControl, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl>, StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HandGestureShortcutInteractiveControl, &type metadata for HandGestureShortcutInteractiveControl);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>)
  {
    type metadata accessor for AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture> and conformance AndOperationViewInputPredicate<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, MEMORY[0x1E0CE6530]);
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>)
  {
    lazy protocol witness table accessor for type IsHandGestureShortcut and conformance IsHandGestureShortcut();
    lazy protocol witness table accessor for type IsArchivingHandGesture and conformance IsArchivingHandGesture();
    v0 = type metadata accessor for AndOperationViewInputPredicate();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>);
  }
}

unint64_t lazy protocol witness table accessor for type IsArchivingHandGesture and conformance IsArchivingHandGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsArchivingHandGesture and conformance IsArchivingHandGesture;
  if (!lazy protocol witness table cache variable for type IsArchivingHandGesture and conformance IsArchivingHandGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsArchivingHandGesture, &unk_1E1ADC2B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsArchivingHandGesture and conformance IsArchivingHandGesture);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t IsArchivingHand;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    IsArchivingHand = type metadata accessor for StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, IsArchivingHand, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, &type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ExternalGestureActionModifier.ContentView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ConditionallyArchivableView.ArchivedBody : View in ExternalGestureActionModifier.ContentView()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for ExternalGestureActionModifier.ContentView(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
  a1[2] = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
  result = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter, &type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter, &type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter, &type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys, &unk_1E1B070C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys, &unk_1E1B070C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys, &unk_1E1B070C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys);
  }
  return result;
}

void *type metadata accessor for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys()
{
  return &unk_1E1B070C8;
}

uint64_t sub_186F93BF4()
{
  return lazy protocol witness table accessor for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter, (uint64_t)&type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter);
}

uint64_t sub_186F93C28()
{
  return lazy protocol witness table accessor for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<ExternalGestureActionModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<ExternalGestureActionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ExternalGestureActionModifier and conformance ExternalGestureActionModifier, (uint64_t)&type metadata for ExternalGestureActionModifier);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, (uint64_t)&type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, (uint64_t)&type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, (uint64_t)&type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, (uint64_t)&type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader);
    v3[1] = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

double one-time initialization function for defaultCornerRadius()
{
  double result;

  if (one-time initialization token for componentCornerRadius != -1)
    swift_once();
  result = *(double *)&static ClarityUIMetrics.componentCornerRadius;
  defaultCornerRadius = static ClarityUIMetrics.componentCornerRadius;
  return result;
}

double PlatterButtonStyleView.ClippingShape.effectiveDisplayCornerRadius.getter()
{
  uint64_t v0;
  double v1;

  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
    goto LABEL_5;
  v1 = *(double *)(v0 + 16);
  if (one-time initialization token for minimumDisplayCornerRadius != -1)
    swift_once();
  if (*(double *)&static ClarityUIMetrics.minimumDisplayCornerRadius > v1)
  {
LABEL_5:
    if (one-time initialization token for fallbackDisplayCornerRadius != -1)
      swift_once();
    return *(double *)&static ClarityUIMetrics.fallbackDisplayCornerRadius;
  }
  return v1;
}

void PlatterButtonStyleView.ClippingShape.actualShape.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  double v4;
  double v5;

  v3 = *v1;
  if (*((_BYTE *)v1 + 8) == 1)
  {
    if (v3)
    {
      v4 = PlatterButtonStyleView.ClippingShape.effectiveDisplayCornerRadius.getter();
      if (one-time initialization token for componentHorizontalPadding != -1)
        swift_once();
      v5 = v4 - *(double *)&static ClarityUIMetrics.componentHorizontalPadding;
      *(_BYTE *)(a1 + 16) = 1;
    }
    else
    {
      if (one-time initialization token for defaultCornerRadius != -1)
        swift_once();
      v5 = *(double *)&defaultCornerRadius;
      *(_BYTE *)(a1 + 16) = 1;
    }
    *(double *)a1 = v5;
    *(double *)(a1 + 8) = v5;
  }
  else
  {
    *(_BYTE *)(a1 + 16) = 1;
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v3;
  }
}

double PlatterButtonStyleView.ClippingShape.path(in:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  char v5;
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;

  v3 = *(_BYTE *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)&v9 = *(_QWORD *)v1;
  BYTE8(v9) = v3;
  *(_QWORD *)&v10 = v4;
  BYTE8(v10) = v5;
  PlatterButtonStyleView.ClippingShape.actualShape.getter((uint64_t)&v8);
  RoundedRectangle.path(in:)();
  result = *(double *)&v9;
  v7 = v10;
  *(_OWORD *)a1 = v9;
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 32) = v11;
  return result;
}

double PlatterButtonStyleView.ClippingShape.inset(by:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  char v4;
  double result;
  __int128 v6;
  char v7;

  PlatterButtonStyleView.ClippingShape.actualShape.getter((uint64_t)&v6);
  v4 = v7;
  result = *(double *)&v6;
  *(_OWORD *)a1 = v6;
  *(_BYTE *)(a1 + 16) = v4;
  *(double *)(a1 + 24) = a2;
  return result;
}

double protocol witness for Shape.path(in:) in conformance PlatterButtonStyleView<A>.ClippingShape@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  char v5;

  PlatterButtonStyleView.ClippingShape.path(in:)((uint64_t)v4);
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance PlatterButtonStyleView<A>.ClippingShape(uint64_t a1, uint64_t a2)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2);
}

void (*protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PlatterButtonStyleView<A>.ClippingShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatterButtonStyleView<A>.ClippingShape, a3);
  return static Shape._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PlatterButtonStyleView<A>.ClippingShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatterButtonStyleView<A>.ClippingShape, a3);
  return static Shape._makeViewList(view:inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance PlatterButtonStyleView<A>.ClippingShape(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatterButtonStyleView<A>.ClippingShape, a1);
  return Shape.body.getter();
}

uint64_t PlatterButtonStyleView.displayCornerRadius.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = v1 + *(int *)(a1 + 52);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned __int8 *)(v2 + 8);
  v5 = *(unsigned __int8 *)(v2 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v2, v4, *(_BYTE *)(v2 + 9));
  v6 = specialized Environment.wrappedValue.getter(v3, v4 | (v5 << 8));
  outlined consume of Environment<CGFloat?>.Content(v3, v4, v5);
  return v6;
}

uint64_t PlatterButtonStyleView.padding.getter(uint64_t a1)
{
  uint64_t v1;

  if ((*(_BYTE *)(v1 + *(int *)(a1 + 48)) & 1) == 0)
    return static EdgeInsets.zero.getter();
  if (one-time initialization token for buttonVerticalPadding != -1)
    swift_once();
  static Edge.Set.vertical.getter();
  EdgeInsets.init(_:edges:)();
  if (one-time initialization token for buttonHorizontalPadding != -1)
    swift_once();
  static Edge.Set.horizontal.getter();
  return EdgeInsets.init(_:edges:)();
}

void PlatterButtonStyleView.body.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[3];

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout>(255);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = type metadata accessor for _BackgroundStyleModifier();
  v5 = type metadata accessor for ModifiedContent();
  type metadata accessor for _OverlayModifier<Color>();
  v6 = type metadata accessor for ModifiedContent();
  v7 = MEMORY[0x1E0CE7170];
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
  v8 = type metadata accessor for ModifiedContent();
  v10 = type metadata accessor for PlatterButtonStyleView.ClippingShape(255, v2, v3, v9);
  v14[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE35E0]);
  v14[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5D28], v4);
  v11 = MEMORY[0x1E0CE2E70];
  v13[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v14);
  v13[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _OverlayModifier<Color> and conformance _OverlayModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _OverlayModifier<Color>, MEMORY[0x1E0CE3620]);
  v12[0] = MEMORY[0x18D75FFDC](v11, v6, v13);
  v12[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, v7);
  MEMORY[0x18D75FFDC](v11, v8, v12);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatterButtonStyleView<A>.ClippingShape, v10);
  type metadata accessor for PlatterShadowedContent();
}

void sub_186F946EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v3 - 296) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v4 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v4, v5);
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = *(_QWORD *)(v3 - 272);
  v9 = (uint64_t *)(v2 + *(int *)(v8 + 44));
  v10 = *v9;
  v11 = *((_BYTE *)v9 + 8);
  v12 = PlatterButtonStyleView.displayCornerRadius.getter(v8);
  *(_QWORD *)(v3 - 200) = v10;
  *(_BYTE *)(v3 - 192) = v11;
  *(_QWORD *)(v3 - 184) = v12;
  *(_BYTE *)(v3 - 176) = v13 & 1;
  v14 = *(unsigned __int8 *)(v2 + 2);
  v15 = *(_QWORD *)(v3 - 288);
  *(_QWORD *)(v3 - 240) = *(_QWORD *)(v3 - 280);
  *(_QWORD *)(v3 - 232) = v15;
  *(_QWORD *)(v3 - 224) = v2;
  PlatterShadowedContent.init(shape:isPressed:content:)(v3 - 200, v14);
}

uint64_t sub_186F94800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);

  static UnitPoint.center.getter();
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatterShadowedContent<A, B>, v5);
  View.scaleEffect(_:anchor:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 296) + 8))(v1, v5);
  v8 = MEMORY[0x1E0CE1BD0];
  *(_QWORD *)(v6 - 216) = v7;
  *(_QWORD *)(v6 - 208) = v8;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v6 - 216);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v9(v0, v2, v4);
  v10 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v10(v2, v4);
  v9(*(_QWORD *)(v6 - 264), v0, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)(v0, v4);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>);
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

void type metadata accessor for HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>)
  {
    type metadata accessor for TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>, MEMORY[0x1E0CE7EB8]);
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>);
  }
}

void type metadata accessor for TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>)
  {
    type metadata accessor for (Spacer?, ButtonStyleConfiguration.Label, Spacer?)();
    v0 = type metadata accessor for TupleView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>);
  }
}

void type metadata accessor for (Spacer?, ButtonStyleConfiguration.Label, Spacer?)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Spacer?, ButtonStyleConfiguration.Label, Spacer?))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Spacer?, MEMORY[0x1E0CE7430], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (Spacer?, ButtonStyleConfiguration.Label, Spacer?));
  }
}

void type metadata accessor for _OverlayModifier<Color>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _OverlayModifier<Color>)
  {
    v0 = type metadata accessor for _OverlayModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _OverlayModifier<Color>);
  }
}

uint64_t type metadata accessor for PlatterButtonStyleView.ClippingShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatterButtonStyleView.ClippingShape);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE2BC0]);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, MEMORY[0x1E0CE73D0]);
    v3[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, a2, a3, a4);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v6);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for PlatterShadowedContent()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t closure #1 in PlatterButtonStyleView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  void (*v49)(_BYTE *, _BYTE *, uint64_t);
  void (*v50)(_BYTE *, uint64_t);
  _BYTE v52[20];
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  _QWORD v69[2];
  _QWORD v70[2];
  _QWORD v71[4];
  char v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  char v121;
  __int128 v122;

  v67 = a4;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout>(255);
  v56 = v7;
  v57 = type metadata accessor for _BackgroundStyleModifier();
  v8 = type metadata accessor for ModifiedContent();
  v59 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v52[-v10];
  type metadata accessor for _OverlayModifier<Color>();
  v60 = v8;
  v12 = type metadata accessor for ModifiedContent();
  v63 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v58 = &v52[-v14];
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
  v66 = v12;
  v61 = type metadata accessor for ModifiedContent();
  v65 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61, v15);
  v62 = &v52[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v17, v18);
  v64 = &v52[-v19];
  v54 = static VerticalAlignment.center.getter();
  v55 = a2;
  v21 = type metadata accessor for PlatterButtonStyleView(0, a2, a3, v20);
  v22 = *(_BYTE *)(a1 + *(int *)(v21 + 48));
  if (one-time initialization token for clarityUIButtonTitle != -1)
    swift_once();
  v23 = static Font.clarityUIButtonTitle;
  KeyPath = swift_getKeyPath();
  swift_retain();
  v68 = v21;
  PlatterButtonStyleView.padding.getter(v21);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v53 = static Edge.Set.all.getter();
  if (one-time initialization token for minimumComponentHeight != -1)
    swift_once();
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v109 = 1;
  v108 = v22 ^ 1;
  v107 = v22 ^ 1;
  v106 = 0;
  v105 = v111;
  v104 = v113;
  v103 = v115;
  v102 = v117;
  v101 = v119;
  v100 = v121;
  v71[2] = v54;
  v71[3] = 0;
  v72 = 1;
  v73 = 0;
  v74 = 0;
  v76 = 0;
  v77 = 0;
  v78 = v22 ^ 1;
  v79 = KeyPath;
  v80 = v23;
  v81 = v53;
  v82 = v26;
  v83 = v28;
  v84 = v30;
  v85 = v32;
  v86 = 0;
  v87 = v110;
  v88 = v111;
  v89 = v112;
  v90 = v113;
  v91 = v114;
  v92 = v115;
  v93 = v116;
  v94 = v117;
  v95 = v118;
  v96 = v119;
  v97 = v120;
  v98 = v121;
  v99 = v122;
  v75 = v22 ^ 1;
  static Edge.Set.all.getter();
  v33 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE35E0]);
  View.background<A>(_:ignoresSafeAreaEdges:)();
  swift_release();
  v34 = swift_release();
  MEMORY[0x1E0C80A78](v34, v35);
  static Alignment.center.getter();
  v36 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5D28], v57);
  v71[0] = v33;
  v71[1] = v36;
  v37 = v60;
  v38 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v60, v71);
  v39 = v58;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(_BYTE *, uint64_t))(v59 + 8))(v11, v37);
  v40 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _OverlayModifier<Color> and conformance _OverlayModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _OverlayModifier<Color>, MEMORY[0x1E0CE3620]);
  v70[0] = v38;
  v70[1] = v40;
  v41 = MEMORY[0x1E0CE2E70];
  v42 = v66;
  v43 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v66, v70);
  v44 = v62;
  View.foregroundColor(_:)();
  (*(void (**)(_BYTE *, uint64_t))(v63 + 8))(v39, v42);
  v45 = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
  v69[0] = v43;
  v69[1] = v45;
  v46 = v61;
  MEMORY[0x18D75FFDC](v41, v61, v69);
  v48 = v64;
  v47 = v65;
  v49 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v65 + 16);
  v49(v64, v44, v46);
  v50 = *(void (**)(_BYTE *, uint64_t))(v47 + 8);
  v50(v44, v46);
  v49(v67, v48, v46);
  return ((uint64_t (*)(_BYTE *, uint64_t))v50)(v48, v46);
}

uint64_t partial apply for closure #1 in PlatterButtonStyleView.body.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in PlatterButtonStyleView.body.getter(v1[4], v1[2], v1[3], a1);
}

uint64_t closure #2 in closure #1 in PlatterButtonStyleView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 2) == 1)
  {
    if (one-time initialization token for clarityUIPressedButtonOverlay != -1)
      swift_once();
    result = swift_retain();
  }
  else
  {
    result = static Color.clear.getter();
  }
  *a2 = result;
  return result;
}

void PlatterShadowedContent.init(shape:isPressed:content:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for PlatterShadowedContent();
}

uint64_t sub_186F9538C(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = a1[15];
  *(_QWORD *)(v3 + v8) = static Color.black.getter();
  *(_DWORD *)(v3 + a1[16]) = 1045220557;
  *(_QWORD *)(v3 + a1[17]) = 0x4000000000000000;
  *(_QWORD *)(v3 + a1[18]) = 0xBFF0000000000000;
  v9 = a1[19];
  *(_QWORD *)(v3 + v9) = static Color.white.getter();
  *(_DWORD *)(v3 + a1[20]) = 1045220557;
  *(_QWORD *)(v3 + a1[21]) = 0x3FF0000000000000;
  *(_QWORD *)(v3 + a1[22]) = 0x3FF0000000000000;
  v10 = a1[23];
  static Color.white.getter();
  v11 = Color.opacity(_:)();
  swift_release();
  *(_QWORD *)(v3 + v10) = v11;
  v12 = a1[24];
  static Color.black.getter();
  v13 = Color.opacity(_:)();
  swift_release();
  *(_QWORD *)(v3 + v12) = v13;
  *(_QWORD *)(v3 + a1[25]) = 0x3FF0000000000000;
  v14 = *(_QWORD *)(v2 - 8);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v3, v4, v2);
  *(_BYTE *)(v3 + a1[13]) = *(_DWORD *)(v6 - 140);
  (*(void (**)(uint64_t))(v6 - 128))(v15);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v4, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 120) + 32))(v3 + a1[14], v5, v1);
}

uint64_t PlatterButtonStyleView.init(configuration:background:foregroundColor:type:includesPadding:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _BYTE *a8@<X8>)
{
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  int *v16;
  _BYTE *v17;
  uint64_t result;
  _BYTE *v19;

  v11 = *a1;
  v12 = a1[1];
  v13 = a1[2];
  v14 = *(_QWORD *)a4;
  v15 = *(_BYTE *)(a4 + 8);
  v16 = (int *)type metadata accessor for PlatterButtonStyleView(0, a6, a7, a4);
  v17 = &a8[v16[13]];
  *(_QWORD *)v17 = swift_getKeyPath();
  *((_WORD *)v17 + 4) = 0;
  *a8 = v11;
  a8[1] = v12;
  a8[2] = v13;
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(&a8[v16[9]], a2, a6);
  *(_QWORD *)&a8[v16[10]] = a3;
  v19 = &a8[v16[11]];
  *(_QWORD *)v19 = v14;
  v19[8] = v15;
  a8[v16[12]] = a5;
  return result;
}

uint64_t type metadata accessor for PlatterButtonStyleView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatterButtonStyleView);
}

uint64_t PlatterShadowedContent.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  char *v72;
  void (*v73)(char *, uint64_t);
  char v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD v118[2];
  _QWORD v119[2];
  _QWORD v120[2];
  _QWORD v121[8];

  v107 = a2;
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v102 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v95 = (char *)&v76 - v7;
  v8 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v103 = AssociatedTypeWitness;
  v101 = v8;
  v10 = type metadata accessor for _ShadowView(0, AssociatedTypeWitness, v8, v9);
  v105 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v104 = (uint64_t)&v76 - v12;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = *(_QWORD *)(v3 + 8);
  type metadata accessor for _ShadowView(255, v4, v87, v19);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v99 = type metadata accessor for TupleView();
  v82 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v99);
  v88 = type metadata accessor for _OverlayModifier();
  v20 = type metadata accessor for ModifiedContent();
  v21 = *(_QWORD *)(v20 - 8);
  v81 = v20;
  v90 = v21;
  MEMORY[0x1E0C80A78](v20, v22);
  v80 = (char *)&v76 - v23;
  v121[2] = v4;
  v121[3] = MEMORY[0x1E0CE2800];
  v121[4] = MEMORY[0x1E0CE7C38];
  v121[5] = v3;
  v121[6] = MEMORY[0x1E0CE27E8];
  v121[7] = MEMORY[0x1E0CE7C28];
  v84 = type metadata accessor for StrokeBorderShapeView();
  v83 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE51F8], v84);
  v85 = type metadata accessor for _OverlayModifier();
  v24 = type metadata accessor for ModifiedContent();
  v89 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v79 = (char *)&v76 - v26;
  v77 = type metadata accessor for _ClipEffect();
  v27 = type metadata accessor for ModifiedContent();
  v93 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v28);
  v78 = (char *)&v76 - v29;
  v106 = v10;
  v30 = type metadata accessor for _BackgroundModifier();
  v97 = v27;
  v91 = v30;
  v98 = type metadata accessor for ModifiedContent();
  v96 = *(_QWORD *)(v98 - 8);
  MEMORY[0x1E0C80A78](v98, v31);
  v92 = (char *)&v76 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x1E0C80A78](v33, v34);
  v94 = (char *)&v76 - v36;
  v37 = v86;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v18, v86 + *(int *)(a1 + 56), v13, v35);
  v113 = v13;
  v114 = v4;
  v100 = a1;
  v115 = *(_QWORD *)(a1 + 32);
  v38 = v115;
  v116 = v3;
  v117 = v37;
  static Alignment.center.getter();
  v39 = v80;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
  v108 = v13;
  v109 = v4;
  v110 = v38;
  v99 = v3;
  v111 = v3;
  v112 = v37;
  static Alignment.center.getter();
  v40 = MEMORY[0x1E0CE3620];
  v41 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3620], v88);
  v121[0] = v38;
  v121[1] = v41;
  v42 = v81;
  v43 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v81, v121);
  v44 = v79;
  v45 = v37;
  v46 = v4;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v90 + 8))(v39, v42);
  v47 = MEMORY[0x18D75FFDC](v40, v85);
  v120[0] = v43;
  v120[1] = v47;
  v48 = v78;
  v49 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v24, v120);
  View.clipShape<A>(_:style:)();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v44, v24);
  if (one-time initialization token for buttonShadowSpread != -1)
    swift_once();
  v50 = v95;
  (*(void (**)(uint64_t, double))(v99 + 32))(v46, -*(double *)&static ClarityUIMetrics.buttonShadowSpread);
  v51 = v50;
  if (one-time initialization token for clarityUIButtonShadowColor != -1)
    swift_once();
  v52 = static Color.clarityUIButtonShadowColor;
  v53 = v100;
  v54 = 0.0;
  if ((*(_BYTE *)(v45 + *(int *)(v100 + 52)) & 1) != 0)
  {
    v55 = 0.0;
    v56 = 0.0;
LABEL_7:
    v57 = v77;
    goto LABEL_13;
  }
  if (one-time initialization token for buttonShadowRadius == -1)
  {
    v56 = *(double *)&static ClarityUIMetrics.buttonShadowRadius;
  }
  else
  {
    swift_once();
    v56 = *(double *)&static ClarityUIMetrics.buttonShadowRadius;
    if ((*(_BYTE *)(v45 + *(int *)(v53 + 52)) & 1) != 0)
    {
      v55 = 0.0;
      goto LABEL_7;
    }
  }
  if (one-time initialization token for buttonShadowOffset == -1)
  {
    v55 = *(double *)&static ClarityUIMetrics.buttonShadowOffset;
    v57 = v77;
  }
  else
  {
    swift_once();
    v75 = *(_BYTE *)(v45 + *(int *)(v53 + 52));
    v55 = *(double *)&static ClarityUIMetrics.buttonShadowOffset;
    v57 = v77;
    if ((v75 & 1) != 0)
      goto LABEL_13;
  }
  v54 = *((double *)&static ClarityUIMetrics.buttonShadowOffset + 1);
LABEL_13:
  v58 = v104;
  v59 = v52;
  v60 = v103;
  Shape.fillShadow(color:radius:x:y:)(v59, v103, v101, v104, v56, v55, v54);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v51, v60);
  static Alignment.center.getter();
  v61 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1450], v57);
  v119[0] = v49;
  v119[1] = v61;
  v62 = MEMORY[0x1E0CE2E70];
  v63 = v97;
  v64 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v97, v119);
  v65 = v92;
  v66 = v106;
  View.background<A>(_:alignment:)();
  (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v58, v66);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v48, v63);
  v67 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v91);
  v118[0] = v64;
  v118[1] = v67;
  v68 = v62;
  v69 = v98;
  MEMORY[0x18D75FFDC](v68, v98, v118);
  v70 = v96;
  v71 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
  v72 = v94;
  v71(v94, v65, v69);
  v73 = *(void (**)(char *, uint64_t))(v70 + 8);
  v73(v65, v69);
  v71(v107, v72, v69);
  return ((uint64_t (*)(char *, uint64_t))v73)(v72, v69);
}

void closure #1 in PlatterShadowedContent.body.getter(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v21 = a3;
  v26 = a5;
  v28 = *(_QWORD *)(a4 + 8);
  v8 = type metadata accessor for _ShadowView(0, a2, v28, a3);
  v24 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v10 = type metadata accessor for ModifiedContent();
  v23 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v25 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  MEMORY[0x1E0C80A78](v15, v16);
  MEMORY[0x1E0C80A78](v17, v18);
  v27 = (char *)&v20 - v19;
  v29 = a1;
  v30 = a2;
  v22 = a2;
  v31 = v21;
  v32 = a4;
  type metadata accessor for PlatterShadowedContent();
}

uint64_t sub_186F95FD4(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  void (*v16)(uint64_t, uint64_t);
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  Shape.fillShadow(color:radius:x:y:)(*(_QWORD *)(v8 + a1[15]), v1, *(_QWORD *)(v9 - 320), v7, *(double *)(v8 + a1[17]), 0.0, *(double *)(v8 + a1[18]));
  v11 = *(float *)(v8 + a1[16]);
  *(_QWORD *)(v5 + 12) = 0;
  *(_QWORD *)(v5 + 4) = 0;
  *(_QWORD *)(v5 + 20) = 0x3F80000000000000;
  *(_QWORD *)(v5 + 36) = 0;
  *(_QWORD *)(v5 + 28) = 0;
  *(_QWORD *)(v5 + 44) = 0x3F80000000000000;
  *(_QWORD *)(v5 + 52) = 0;
  *(_QWORD *)(v5 + 60) = 0;
  *(_DWORD *)(v9 - 168) = 1065353216;
  *(_DWORD *)(v9 - 100) = 0;
  *(float *)(v9 - 96) = -v11;
  *(float *)(v9 - 92) = v11;
  View._colorMatrix(_:)();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 352) + 8);
  *(_QWORD *)(v9 - 376) = v12;
  v12(v7, v6);
  v13 = MEMORY[0x1E0CE4600];
  *(_QWORD *)(v9 - 264) = &protocol witness table for _ShadowView<A>;
  *(_QWORD *)(v9 - 256) = v13;
  *(_QWORD *)(v9 - 352) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v9 - 264);
  v14 = *(_QWORD *)(v9 - 360);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v15(*(_QWORD *)(v9 - 328), v4, v2);
  v16 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v16(v4, v2);
  Shape.fillShadow(color:radius:x:y:)(*(_QWORD *)(v8 + a1[19]), *(_QWORD *)(v9 - 368), *(_QWORD *)(v9 - 320), v7, *(double *)(v8 + a1[21]), 0.0, *(double *)(v8 + a1[22]));
  v17 = *(float *)(v8 + a1[20]);
  *(_DWORD *)(v9 - 248) = 1065353216;
  *(_QWORD *)(v9 - 236) = 0;
  *(_QWORD *)(v9 - 244) = 0;
  *(_QWORD *)(v9 - 228) = 0x3F80000000000000;
  *(_QWORD *)(v9 - 212) = 0;
  *(_QWORD *)(v9 - 220) = 0;
  *(_QWORD *)(v9 - 204) = 0x3F80000000000000;
  *(_QWORD *)(v9 - 188) = 0;
  *(_QWORD *)(v9 - 196) = 0;
  *(_DWORD *)(v9 - 180) = 0;
  *(float *)(v9 - 176) = -v17;
  *(float *)(v9 - 172) = v17;
  View._colorMatrix(_:)();
  (*(void (**)(uint64_t, uint64_t))(v9 - 376))(v7, v6);
  v15(v4, v3, v2);
  v16(v3, v2);
  v18 = *(_QWORD *)(v9 - 328);
  v15(v3, v18, v2);
  *(_QWORD *)(v9 - 280) = v3;
  v19 = *(_QWORD *)(v9 - 344);
  v15(v19, v4, v2);
  *(_QWORD *)(v9 - 272) = v19;
  *(_QWORD *)(v9 - 296) = v2;
  *(_QWORD *)(v9 - 288) = v2;
  v20 = *(_QWORD *)(v9 - 352);
  *(_QWORD *)(v9 - 312) = v20;
  *(_QWORD *)(v9 - 304) = v20;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t *)(v9 - 280), 2uLL, v9 - 296);
  v16(v4, v2);
  v16(v18, v2);
  v16(v19, v2);
  return ((uint64_t (*)(uint64_t, uint64_t))v16)(v3, v2);
}

void closure #2 in PlatterShadowedContent.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = type metadata accessor for StrokeBorderShapeView();
  MEMORY[0x1E0C80A78](v0, v1);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Color>, MEMORY[0x1E0CE7170], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_187BF9820;
  type metadata accessor for PlatterShadowedContent();
}

uint64_t sub_186F96398(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  void (*v19)(uint64_t, uint64_t);

  *(_QWORD *)(v6 + 32) = *(_QWORD *)(v2 + *(int *)(a1 + 92));
  *(_QWORD *)(v6 + 40) = *(_QWORD *)(v2 + *(int *)(a1 + 96));
  *(_QWORD *)(v7 - 160) = v6;
  specialized Array._endMutation()();
  v8 = *(_QWORD *)(v7 - 160);
  swift_retain();
  swift_retain();
  static UnitPoint.top.getter();
  v10 = v9;
  v12 = v11;
  static UnitPoint.bottom.getter();
  v14 = v13;
  v16 = v15;
  *(_QWORD *)(v7 - 160) = MEMORY[0x18D75BC98](v8);
  *(_QWORD *)(v7 - 152) = v10;
  *(_QWORD *)(v7 - 144) = v12;
  *(_QWORD *)(v7 - 136) = v14;
  *(_QWORD *)(v7 - 128) = v16;
  InsettableShape.strokeBorder<A>(_:lineWidth:antialiased:)(v7 - 160, 1, v3, MEMORY[0x1E0CE2800], *(_QWORD *)(v7 - 184), MEMORY[0x1E0CE27E8], v5);
  swift_bridgeObjectRelease();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE51F8], v1);
  v17 = *(_QWORD *)(v7 - 176);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  v18(v4, v5, v1);
  v19 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v19(v5, v1);
  v18(*(_QWORD *)(v7 - 168), v4, v1);
  return ((uint64_t (*)(uint64_t, uint64_t))v19)(v4, v1);
}

uint64_t InsettableShape.strokeBorder<A>(_:lineWidth:antialiased:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  double v15[5];

  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  InsettableShape.strokeBorder<A>(_:style:antialiased:)(a1, v15, a2, a3, a4, a5, a6, a7);
  return outlined release of StrokeStyle((uint64_t)v15);
}

uint64_t key path getter for EnvironmentValues.displayCornerRadius : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.displayCornerRadius.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_186F965A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.displayCornerRadius.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.displayCornerRadius : EnvironmentValues()
{
  return EnvironmentValues.displayCornerRadius.setter();
}

uint64_t sub_186F9660C()
{
  return EnvironmentValues.displayCornerRadius.setter();
}

uint64_t partial apply for closure #1 in PlatterShadowedContent.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in PlatterShadowedContent.body.getter);
}

uint64_t partial apply for closure #2 in PlatterShadowedContent.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in PlatterShadowedContent.body.getter);
}

uint64_t associated type witness table accessor for View.Body : View in PlatterButtonStyleView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in PlatterShadowedContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PlatterButtonType()
{
  return &type metadata for PlatterButtonType;
}

uint64_t type metadata completion function for PlatterButtonStyleView()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PlatterButtonStyleView(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((((((v6 + ((v5 + 3) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)
     + 10 > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
    v10 = (a1 + v5 + 3) & ~v5;
    v11 = ((unint64_t)a2 + v5 + 3) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    v12 = (_QWORD *)((v6 + v11) & 0xFFFFFFFFFFFFF8);
    v13 = (_QWORD *)((v6 + v10) & 0xFFFFFFFFFFFFF8);
    *v13 = *v12;
    v14 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    v15 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    v16 = *(_QWORD *)v15;
    *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
    *(_QWORD *)v14 = v16;
    *(_BYTE *)(v14 + 9) = *(_BYTE *)(v15 + 9);
    v17 = (v14 + 17) & 0xFFFFFFFFFFFFFFF8;
    v18 = (v15 + 17) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(_QWORD *)v18;
    LOBYTE(v11) = *(_BYTE *)(v18 + 9);
    v20 = *(unsigned __int8 *)(v18 + 8);
    swift_retain();
    outlined copy of Environment<CGFloat?>.Content(v19, v20, v11);
    *(_QWORD *)v17 = v19;
    *(_BYTE *)(v17 + 8) = v20;
    *(_BYTE *)(v17 + 9) = v11;
  }
  return v3;
}

uint64_t destroy for PlatterButtonStyleView(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = (a1 + *(unsigned __int8 *)(v2 + 80) + 3) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v3);
  v4 = ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release();
  return outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(((v4 & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8), *(unsigned __int8 *)((((v4 & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)((((v4 & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 9));
}

uint64_t initializeWithCopy for PlatterButtonStyleView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 3 + a1) & ~v5;
  v7 = (v5 + 3 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = v8 + v6;
  v10 = (_QWORD *)((v8 + v7) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *v10;
  v11 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = v13;
  *(_BYTE *)(v11 + 9) = *(_BYTE *)(v12 + 9);
  v14 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  LOBYTE(v7) = *(_BYTE *)(v15 + 9);
  v17 = *(unsigned __int8 *)(v15 + 8);
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v16, v17, v7);
  *(_QWORD *)v14 = v16;
  *(_BYTE *)(v14 + 8) = v17;
  *(_BYTE *)(v14 + 9) = v7;
  return a1;
}

uint64_t assignWithCopy for PlatterButtonStyleView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 3 + a1) & ~v5;
  v7 = (v5 + 3 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (_QWORD *)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = v8 + v7;
  v11 = (v10 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v9 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v12 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v12 + 8) = *(_BYTE *)((v11 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)v12 = v13;
  *(_BYTE *)(v12 + 9) = *(_BYTE *)((v11 & 0xFFFFFFFFFFFFFFF8) + 9);
  v14 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((v11 & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  LOBYTE(v11) = *(_BYTE *)(v15 + 9);
  LOBYTE(v9) = *(_BYTE *)(v15 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v15, v9, v11);
  v17 = *(_QWORD *)v14;
  v18 = *(_BYTE *)(v14 + 9);
  *(_QWORD *)v14 = v16;
  v19 = *(unsigned __int8 *)(v14 + 8);
  *(_BYTE *)(v14 + 8) = (_BYTE)v9;
  *(_BYTE *)(v14 + 9) = v11;
  outlined consume of Environment<CGFloat?>.Content(v17, v19, v18);
  return a1;
}

uint64_t initializeWithTake for PlatterButtonStyleView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  __int16 v16;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 3 + a1) & ~v5;
  v7 = (v5 + 3 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (_QWORD *)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((v8 + v7) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = v13;
  *(_BYTE *)(v11 + 9) = *(_BYTE *)(v12 + 9);
  v14 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_WORD *)(v15 + 8);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_WORD *)(v14 + 8) = v16;
  return a1;
}

uint64_t assignWithTake for PlatterButtonStyleView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 3 + a1) & ~v5;
  v7 = (v5 + 3 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (_QWORD *)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  v10 += 15;
  *v9 = v11;
  swift_release();
  v12 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v12 + 8) = *(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)v12 = v13;
  *(_BYTE *)(v12 + 9) = *(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFF8) + 9);
  v14 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((v10 & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  v17 = *(_BYTE *)(v15 + 8);
  LOBYTE(v15) = *(_BYTE *)(v15 + 9);
  v18 = *(_QWORD *)v14;
  v19 = *(_BYTE *)(v14 + 9);
  *(_QWORD *)v14 = v16;
  v20 = *(unsigned __int8 *)(v14 + 8);
  *(_BYTE *)(v14 + 8) = v17;
  *(_BYTE *)(v14 + 9) = v15;
  outlined consume of Environment<CGFloat?>.Content(v18, v20, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatterButtonStyleView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v15 = (a1 + v7 + 3) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v16 = *(_QWORD *)((v8 + v15) & 0xFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v15);
    }
  }
  else
  {
    v9 = ((((((v8 + ((v7 + 3) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 17) & 0xFFFFFFF8) + 10;
    v10 = (a2 - v6 + 0xFFFF) >> (8 * v9);
    if (v9 <= 3)
      v11 = v10 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    return ((uint64_t (*)(void))((char *)&loc_186F96D7C + 4 * byte_187BFC3A0[v13]))();
  }
}

void storeEnumTagSinglePayload for PlatterButtonStyleView(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = ((((((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 3) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)
     + 10;
  if (v6 >= a3)
  {
    v11 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v6 + 0xFFFF) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X14 }
  }
  v12 = ~v6 + a2;
  bzero(a1, ((((((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 3) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)+ 10);
  if (v8 > 3)
    *a1 = v12;
  else
    *(_WORD *)a1 = v12;
  __asm { BR              X11 }
}

void sub_186F96F50(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x186F96FC8);
}

void sub_186F96F58(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x186F96F60);
  JUMPOUT(0x186F96FC8);
}

void sub_186F96FA4(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x186F96FC8);
}

void sub_186F96FAC(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x186F96FC8);
}

uint64_t sub_186F96FB4@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a1)
    JUMPOUT(0x186F96FC8);
  if (a2 < 0x7FFFFFFF)
  {
    if ((a1 & 0x80000000) == 0)
      JUMPOUT(0x186F96FC4);
    JUMPOUT(0x186F96FC0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))((v6 + v5 + 3) & a3);
}

uint64_t type metadata completion function for PlatterShadowedContent()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PlatterShadowedContent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  v10 = v9 <= 7 && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) == 0;
  if (v10
    && (v11 = *(_QWORD *)(v6 + 64),
        v12 = *(_QWORD *)(v7 + 64) + 7,
        ((((((((((((((((((((((v12 + ((v8 + v11 + 1) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 11) & 0xFFFFFFFFFFFFFFF8)
                + 11) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8 <= 0x18))
  {
    (*(void (**)(_QWORD *, _QWORD *))(v6 + 16))(a1, a2);
    *((_BYTE *)v4 + v11) = *((_BYTE *)a2 + v11);
    v13 = (char *)a2 + v11 + v8;
    v14 = ((unint64_t)v4 + v11 + v8 + 1) & ~v8;
    v15 = (unint64_t)(v13 + 1) & ~v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v14, v15, v5);
    v16 = (_QWORD *)((v12 + v14) & 0xFFFFFFFFFFFFF8);
    v17 = (_QWORD *)((v12 + v15) & 0xFFFFFFFFFFFFF8);
    *v16 = *v17;
    v18 = (_DWORD *)(((unint64_t)v16 + 11) & 0xFFFFFFFFFFFFFFF8);
    v19 = (_DWORD *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFF8);
    *v18 = *v19;
    v20 = (_QWORD *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFF8);
    v21 = (_QWORD *)(((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFF8);
    *v20 = *v21;
    v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
    v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFF8);
    *v22 = *v23;
    v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFF8);
    v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFF8);
    *v24 = *v25;
    v26 = (_DWORD *)(((unint64_t)v24 + 11) & 0xFFFFFFFFFFFFF8);
    v27 = (_DWORD *)(((unint64_t)v25 + 11) & 0xFFFFFFFFFFFFF8);
    *v26 = *v27;
    v28 = (_QWORD *)(((unint64_t)v26 + 11) & 0xFFFFFFFFFFFFF8);
    v29 = (_QWORD *)(((unint64_t)v27 + 11) & 0xFFFFFFFFFFFFF8);
    *v28 = *v29;
    v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFF8);
    v31 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFF8);
    *v30 = *v31;
    v32 = (_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFF8);
    v33 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFF8);
    *v32 = *v33;
    v34 = (_QWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFF8);
    v35 = (_QWORD *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFF8);
    *v34 = *v35;
    *(_QWORD *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v36 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v36 + (((v9 | 7) + 16) & ~(unint64_t)(v9 | 7)));
  }
  swift_retain();
  return v4;
}

uint64_t destroy for PlatterShadowedContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  (*(void (**)(void))(v4 + 8))();
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1
                                                                                            + *(_QWORD *)(v4 + 64)
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for PlatterShadowedContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = (_BYTE *)(v7 + a1);
  v9 = (_BYTE *)(v7 + a2);
  *v8 = *v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (unint64_t)&v8[v11 + 1] & ~v11;
  v13 = (unint64_t)&v9[v11 + 1] & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (_QWORD *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = (_DWORD *)(((unint64_t)v15 + 11) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_DWORD *)(((unint64_t)v16 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = (_QWORD *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v20;
  v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8);
  v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
  *v21 = *v22;
  v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFF8);
  *v23 = *v24;
  v25 = (_DWORD *)(((unint64_t)v23 + 11) & 0xFFFFFFFFFFFFF8);
  v26 = (_DWORD *)(((unint64_t)v24 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *v26;
  v27 = (_QWORD *)(((unint64_t)v25 + 11) & 0xFFFFFFFFFFFFF8);
  v28 = (_QWORD *)(((unint64_t)v26 + 11) & 0xFFFFFFFFFFFFF8);
  *v27 = *v28;
  v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8);
  v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFF8);
  *v29 = *v30;
  v31 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFF8);
  v32 = (_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFF8);
  *v31 = *v32;
  v33 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFF8);
  v34 = (_QWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFF8);
  *v33 = *v34;
  *(_QWORD *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PlatterShadowedContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = (_BYTE *)(v7 + a1);
  v9 = (_BYTE *)(v7 + a2);
  *v8 = *v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (unint64_t)&v8[v11 + 1] & ~v11;
  v13 = (unint64_t)&v9[v11 + 1] & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  v16 = v14 + v13;
  v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 11;
  *(_QWORD *)v15 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
  v15 += 11;
  swift_retain();
  swift_release();
  *(_DWORD *)(v15 & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(v17 & 0xFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((v15 & 0xFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((v17 & 0xFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)v21;
  v21 += 15;
  *(_QWORD *)v20 = v22;
  v20 += 15;
  v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 11;
  *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
  v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 11;
  swift_retain();
  swift_release();
  *(_DWORD *)(v24 & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(v23 & 0xFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(((v24 & 0xFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFF8);
  v26 = (_QWORD *)(((v23 & 0xFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFF8);
  *v25 = *v26;
  v27 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8;
  v28 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8;
  v29 = *(_QWORD *)v28;
  v28 += 15;
  *(_QWORD *)v27 = v29;
  v27 += 15;
  v30 = (v28 & 0xFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v28 & 0xFFFFFFFFFFFFF8);
  v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_retain();
  swift_release();
  v31 &= 0xFFFFFFFFFFFFFFF8;
  v30 &= 0xFFFFFFFFFFFFF8uLL;
  *(_QWORD *)v31 = *(_QWORD *)v30;
  swift_retain();
  swift_release();
  *(_QWORD *)((v31 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v30 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for PlatterShadowedContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = (_BYTE *)(v7 + a1);
  v9 = (_BYTE *)(v7 + a2);
  *v8 = *v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (unint64_t)&v8[v11 + 1] & ~v11;
  v13 = (unint64_t)&v9[v11 + 1] & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (_QWORD *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = (_DWORD *)(((unint64_t)v15 + 11) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_DWORD *)(((unint64_t)v16 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = (_QWORD *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v20;
  v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8);
  v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
  *v21 = *v22;
  v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFF8);
  *v23 = *v24;
  v25 = (_DWORD *)(((unint64_t)v23 + 11) & 0xFFFFFFFFFFFFF8);
  v26 = (_DWORD *)(((unint64_t)v24 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *v26;
  v27 = (_QWORD *)(((unint64_t)v25 + 11) & 0xFFFFFFFFFFFFF8);
  v28 = (_QWORD *)(((unint64_t)v26 + 11) & 0xFFFFFFFFFFFFF8);
  *v27 = *v28;
  v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8);
  v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFF8);
  *v29 = *v30;
  v31 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFF8);
  v32 = (_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFF8);
  *v31 = *v32;
  v33 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFF8);
  v34 = (_QWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFF8);
  *v33 = *v34;
  *(_QWORD *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for PlatterShadowedContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = (_BYTE *)(v7 + a1);
  v9 = (_BYTE *)(v7 + a2);
  *v8 = *v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (unint64_t)&v8[v11 + 1] & ~v11;
  v13 = (unint64_t)&v9[v11 + 1] & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)v16;
  v16 += 11;
  *(_QWORD *)v15 = v17;
  v15 += 11;
  swift_release();
  *(_DWORD *)(v15 & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(v16 & 0xFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((v15 & 0xFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((v16 & 0xFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
  v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)v21;
  v21 += 15;
  *v20 = v22;
  v23 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 11;
  *(_QWORD *)v23 = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
  v23 += 11;
  swift_release();
  *(_DWORD *)(v23 & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(v24 & 0xFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(((v23 & 0xFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFF8);
  v26 = (_QWORD *)(((v24 & 0xFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFF8);
  *v25 = *v26;
  v27 = (_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8);
  v28 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8;
  v29 = *(_QWORD *)v28;
  v28 += 15;
  *v27 = v29;
  v30 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  v31 = (v28 & 0xFFFFFFFFFFFFF8) + 15;
  *v30 = *(_QWORD *)(v28 & 0xFFFFFFFFFFFFF8);
  swift_release();
  v32 = (_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  v31 &= 0xFFFFFFFFFFFFF8uLL;
  *v32 = *(_QWORD *)v31;
  swift_release();
  *(_QWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v31 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatterShadowedContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v6 <= v8)
    v9 = *(_DWORD *)(v7 + 84);
  else
    v9 = *(_DWORD *)(v5 + 84);
  if (v9 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  if (!a2)
    return 0;
  v10 = *(_QWORD *)(v5 + 64);
  v11 = *(unsigned __int8 *)(v7 + 80);
  v12 = *(_QWORD *)(v7 + 64) + 7;
  if (v9 >= a2)
  {
    if (v6 == v9)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
    }
    else
    {
      v17 = (a1 + v10 + v11 + 1) & ~v11;
      if (v8 == v9)
      {
        return (*(uint64_t (**)(uint64_t))(v7 + 48))(v17);
      }
      else
      {
        v18 = *(_QWORD *)((v12 + v17) & 0xFFFFFFFFFFFFF8);
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        return (v18 + 1);
      }
    }
  }
  else
  {
    if (((((((((((((((((((((((((v12 + ((v10 + v11 + 1) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)
                           + 11) & 0xFFFFFFFFFFFFFFF8)
                         + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 11) & 0xFFFFFFFFFFFFFFF8)
                   + 11) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v13 = 2;
    else
      v13 = a2 - v9 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    return ((uint64_t (*)(void))((char *)&loc_186F97A2C + 4 * byte_187BFC3AF[v15]))();
  }
}

void storeEnumTagSinglePayload for PlatterShadowedContent(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_19;
  }
  else
  {
    if (((((((((((((((((((((((*(_DWORD *)(v6 + 64) + 7 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8 + 1) & ~(_DWORD)v8)) & 0xFFFFFFF8)
                           + 11) & 0xFFFFFFF8)
                         + 11) & 0xFFFFFFF8)
                       + 15) & 0xFFFFFFF8)
                     + 15) & 0xFFFFFFF8)
                   + 11) & 0xFFFFFFF8)
                 + 11) & 0xFFFFFFF8)
               + 15) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = a3 - v7 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_19:
      __asm { BR              X4 }
  }
  if (((((((((((((((((((((((*(_DWORD *)(v6 + 64) + 7 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8 + 1) & ~(_DWORD)v8)) & 0xFFFFFFF8)
                         + 11) & 0xFFFFFFF8)
                       + 11) & 0xFFFFFFF8)
                     + 15) & 0xFFFFFFF8)
                   + 15) & 0xFFFFFFF8)
                 + 11) & 0xFFFFFFF8)
               + 11) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((((((((((((((((((((((*(_QWORD *)(v6 + 64) + 7 + ((*(_QWORD *)(v5 + 64) + v8 + 1) & ~v8)) & 0xFFFFFFFFFFFFFFF8)+ 11) & 0xFFFFFFFFFFFFFFF8)+ 11) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 11) & 0xFFFFFFFFFFFFFFF8)+ 11) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_186F97C4C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x186F97CE0);
}

void sub_186F97C54(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x186F97C5CLL);
  JUMPOUT(0x186F97CE0);
}

void sub_186F97CA8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F97CE0);
}

void sub_186F97CB0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F97CE0);
}

uint64_t sub_186F97CB8(uint64_t a1, int a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_WORD *)(v13 + v14) = 0;
  if (!a2)
    JUMPOUT(0x186F97CE0);
  if (v6 == v9)
  {
    v3 = *(uint64_t (**)(uint64_t))(v10 + 56);
    v4 = v13;
  }
  else
  {
    v4 = (v13 + v12 + v11 + 1) & v7;
    if (a3 != v9)
      JUMPOUT(0x186F97CC4);
    v3 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }
  return v3(v4);
}

void sub_186F97CF8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout>(255);
  v3 = type metadata accessor for _BackgroundStyleModifier();
  v4 = type metadata accessor for ModifiedContent();
  type metadata accessor for _OverlayModifier<Color>();
  v5 = type metadata accessor for ModifiedContent();
  v6 = MEMORY[0x1E0CE7170];
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
  v7 = type metadata accessor for ModifiedContent();
  v9 = type metadata accessor for PlatterButtonStyleView.ClippingShape(255, v1, v2, v8);
  v13[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE35E0]);
  v13[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5D28], v3);
  v10 = MEMORY[0x1E0CE2E70];
  v12[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v13);
  v12[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _OverlayModifier<Color> and conformance _OverlayModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _OverlayModifier<Color>, MEMORY[0x1E0CE3620]);
  v11[0] = MEMORY[0x18D75FFDC](v10, v5, v12);
  v11[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, v6);
  MEMORY[0x18D75FFDC](v10, v7, v11);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatterButtonStyleView<A>.ClippingShape, v9);
  type metadata accessor for PlatterShadowedContent();
}

uint64_t sub_186F97EA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[24];

  v3 = type metadata accessor for ModifiedContent();
  v5[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatterShadowedContent<A, B>, a1);
  v5[1] = MEMORY[0x1E0CE1BD0];
  return MEMORY[0x18D75FFDC](v1, v3, v5);
}

uint64_t sub_186F97F0C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[8];

  v4 = a1[1];
  v5 = a1[3];
  v22 = a1[2];
  type metadata accessor for _ShadowView(255, v4, *(_QWORD *)(v5 + 8), a4);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v6 = type metadata accessor for TupleView();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v6);
  v7 = type metadata accessor for _OverlayModifier();
  v8 = type metadata accessor for ModifiedContent();
  v26[2] = v4;
  v26[3] = MEMORY[0x1E0CE2800];
  v26[4] = MEMORY[0x1E0CE7C38];
  v26[5] = v5;
  v26[6] = MEMORY[0x1E0CE27E8];
  v26[7] = MEMORY[0x1E0CE7C28];
  v9 = type metadata accessor for StrokeBorderShapeView();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE51F8], v9);
  v10 = type metadata accessor for _OverlayModifier();
  v11 = type metadata accessor for ModifiedContent();
  v12 = type metadata accessor for _ClipEffect();
  v13 = type metadata accessor for ModifiedContent();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for _ShadowView(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8), v16);
  v17 = type metadata accessor for _BackgroundModifier();
  v18 = type metadata accessor for ModifiedContent();
  v19 = MEMORY[0x1E0CE3620];
  v26[0] = v22;
  v26[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3620], v7);
  v20 = MEMORY[0x1E0CE2E70];
  v25[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v26);
  v25[1] = MEMORY[0x18D75FFDC](v19, v10);
  v24[0] = MEMORY[0x18D75FFDC](v20, v11, v25);
  v24[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1450], v12);
  v23[0] = MEMORY[0x18D75FFDC](v20, v13, v24);
  v23[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v17);
  return MEMORY[0x18D75FFDC](v20, v18, v23);
}

uint64_t getEnumTagSinglePayload for PlatterButtonStyleView.ClippingShape(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PlatterButtonStyleView.ClippingShape(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 25) = v3;
  return result;
}

void associated type witness table accessor for View.Body : View in PlatterButtonStyleView<A>.ClippingShape()
{
  JUMPOUT(0x18D75FFDCLL);
}

unint64_t lazy protocol witness table accessor for type EmptyAnimatableData and conformance EmptyAnimatableData()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData;
  if (!lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4760], MEMORY[0x1E0CE4770]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PlatterButtonStyleView<A>.ClippingShape(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatterButtonStyleView<A>.ClippingShape);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatterButtonStyleView<A>.ClippingShape, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in PlatterButtonStyleView<A>.ClippingShape()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for PlatterButtonStyleView<A>.ClippingShape(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatterButtonStyleView<A>.ClippingShape);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t InsettableShape.strokeBorder<A>(_:style:antialiased:)@<X0>(uint64_t a1@<X0>, double *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int v28;

  v27 = a7;
  v28 = a3;
  v15 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v22, v8, v24, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, a5);
  swift_bridgeObjectRetain();
  return StrokeBorderShapeView.init(shape:style:strokeStyle:isAntialiased:background:)((uint64_t)v22, (uint64_t)v17, a2, v28, v25, a4, a5, MEMORY[0x1E0CE7C38], a8, a6, v27, MEMORY[0x1E0CE7C28]);
}

uint64_t StrokeBorderShapeView.init(shape:style:strokeStyle:isAntialiased:background:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, double);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v51 = a4;
  v47 = a3;
  v48 = a2;
  v58 = a1;
  v59 = a9;
  v54 = a5;
  v55 = a12;
  v52 = *(_QWORD *)(a8 - 8);
  v49 = a8;
  MEMORY[0x1E0C80A78](a1, a8);
  v50 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for _BackgroundModifier();
  MEMORY[0x1E0C80A78](v56, v15);
  v53 = (char *)&v39 - v16;
  v45 = *(_QWORD *)(a7 - 8);
  v39 = a7;
  MEMORY[0x1E0C80A78](v17, v18);
  v44 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = a10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v21);
  v42 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v22 = type metadata accessor for _StrokedShape();
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v25 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2418], v22, v24);
  v60 = v22;
  v61 = a7;
  v62 = v25;
  v63 = a11;
  v46 = type metadata accessor for _ShapeView();
  v27 = MEMORY[0x1E0C80A78](v46, v26);
  v41 = (char *)&v39 - v28;
  v43 = *(_QWORD *)(a6 - 8);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t, double))(v43 + 16);
  v40 = a6;
  v29(v59, v58, a6, v27);
  (*(void (**)(uint64_t, double))(v57 + 32))(a6, *v47 * 0.5);
  _StrokedShape.init(shape:style:)();
  v30 = v45;
  v31 = v48;
  v32 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v48, v39);
  _ShapeView.init(shape:style:fillStyle:)();
  v33 = v52;
  v34 = v49;
  v35 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v50, v54, v49);
  static Alignment.center.getter();
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v34);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v32);
  v36 = v40;
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v58, v40);
  v37 = v55;
  _BackgroundModifier.init(background:alignment:)();
  v60 = v36;
  v61 = v32;
  v62 = v34;
  v63 = v57;
  v64 = a11;
  v65 = v37;
  type metadata accessor for StrokeBorderShapeView();
  return ModifiedContent.init(content:modifier:)();
}

uint64_t partial apply for closure #2 in closure #1 in PlatterButtonStyleView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #2 in closure #1 in PlatterButtonStyleView.body.getter(*(_QWORD *)(v1 + 32), a1);
}

void Settings.init(content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Settings.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for Scene.Body : Scene in Settings<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for Settings()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Settings(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)v11;
    v13 = *(_BYTE *)(v11 + 8);
    outlined copy of ResolvedTableRowIDs.Storage(*(_QWORD *)v11, v13);
    *(_QWORD *)v10 = v12;
    *(_BYTE *)(v10 + 8) = v13;
  }
  return v4;
}

uint64_t destroy for Settings(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  return outlined consume of ResolvedTableRowIDs.Storage(*(_QWORD *)v4, *(_BYTE *)(v4 + 8));
}

uint64_t initializeWithCopy for Settings(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  LOBYTE(v5) = *(_BYTE *)(v8 + 8);
  outlined copy of ResolvedTableRowIDs.Storage(*(_QWORD *)v8, v5);
  *(_QWORD *)v7 = v9;
  *(_BYTE *)(v7 + 8) = v5;
  return a1;
}

uint64_t assignWithCopy for Settings(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  LOBYTE(v5) = *(_BYTE *)(v8 + 8);
  outlined copy of ResolvedTableRowIDs.Storage(*(_QWORD *)v8, v5);
  v10 = *(_QWORD *)v7;
  v11 = *(_BYTE *)(v7 + 8);
  *(_QWORD *)v7 = v9;
  *(_BYTE *)(v7 + 8) = v5;
  outlined consume of ResolvedTableRowIDs.Storage(v10, v11);
  return a1;
}

uint64_t initializeWithTake for Settings(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  return a1;
}

uint64_t assignWithTake for Settings(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  LOBYTE(v8) = *(_BYTE *)(v8 + 8);
  v10 = *(_QWORD *)v7;
  v11 = *(_BYTE *)(v7 + 8);
  *(_QWORD *)v7 = v9;
  *(_BYTE *)(v7 + 8) = v8;
  outlined consume of ResolvedTableRowIDs.Storage(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Settings(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0xFE)
    {
      v14 = *(unsigned __int8 *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v14 > 1)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((v7 + 7) & 0xFFFFFFF8) + 9;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_186F98C10 + 4 * byte_187BFC5D8[v12]))();
  }
}

void storeEnumTagSinglePayload for Settings(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_186F98DB8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x186F98E34);
}

void sub_186F98DC0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x186F98DC8);
  JUMPOUT(0x186F98E34);
}

void sub_186F98E0C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F98E34);
}

void sub_186F98E14()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F98E34);
}

uint64_t sub_186F98E1C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0xFE)
  {
    if (a2 > 0xFE)
      JUMPOUT(0x186F98E28);
    *(_BYTE *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = -(char)a2;
LABEL_6:
    JUMPOUT(0x186F98E34);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for Settings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Settings);
}

_UNKNOWN **sub_186F98E58()
{
  return &protocol witness table for _EmptyScene;
}

ValueMetadata *type metadata accessor for SearchFieldConfigurationTextFieldStyle()
{
  return &type metadata for SearchFieldConfigurationTextFieldStyle;
}

uint64_t associated type witness table accessor for TextFieldStyle._Body : View in SearchFieldConfigurationTextFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SearchFieldConfigurationTextFieldStyle.value(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  int v70;
  __int16 v71;
  char v72;
  uint64_t v73;
  uint64_t KeyPath;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = type metadata accessor for AttributeContainer();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v8, v9);
  MEMORY[0x1E0C80A78](v10, v11);
  v55 = (char *)&v45 - v12;
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 88);
  v16 = *(_QWORD *)(a1 + 96);
  v18 = *(_QWORD *)(a1 + 104);
  v17 = *(_QWORD *)(a1 + 112);
  v20 = *(_QWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 128);
  v21 = *(_QWORD *)(a1 + 136);
  v22 = *(_QWORD *)(a1 + 144);
  v23 = *(_QWORD *)(a1 + 160);
  v54 = *(_QWORD *)(a1 + 152);
  v24 = *(_BYTE *)(a1 + 179);
  v45 = a2;
  v58 = v25;
  v57 = v7;
  v56 = v26;
  if ((v24 & 1) != 0)
  {
    KeyPath = v13;
    v75 = v14;
    v52 = v15;
    v76 = v15;
    v77 = v16;
    v78 = v18;
    v79 = v17;
    v80 = v20;
    v81 = v19;
    v53 = v13;
    v27 = v21;
    v28 = v17;
    v29 = v14;
    swift_retain();
    v46 = v29;
    swift_retain();
    swift_bridgeObjectRetain();
    v51 = v18;
    v49 = v28;
    v47 = v20;
    outlined copy of TextFieldState.FormatActions?(v18);
    v50 = v27;
    v48 = v22;
    outlined copy of TextFieldState.FormatActions?(v27);
  }
  else
  {
    v30 = *(_QWORD *)(a1 + 168);
    v59 = v13;
    v60 = v14;
    v61 = v15;
    v62 = v16;
    v63 = v18;
    v64 = v17;
    v65 = v20;
    v66 = v19;
    v67 = v21;
    v68 = v22;
    v69 = v54 & 1;
    v70 = HIDWORD(v54);
    v71 = v23 & 0xFF01;
    v72 = BYTE2(v23) & 1;
    v73 = v30;
    type metadata accessor for State<TextFieldState>();
    State.projectedValue.getter();
    v53 = KeyPath;
    v46 = v75;
    v52 = v76;
    v51 = v78;
    v49 = v79;
    v47 = v80;
    v50 = v82;
    v48 = v83;
  }
  KeyPath = swift_getKeyPath();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for WritableKeyPath<TextFieldState, String>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC870]);
  lazy protocol witness table accessor for type WritableKeyPath<TextFieldState, String> and conformance WritableKeyPath<A, B>();
  swift_bridgeObjectRetain();
  dispatch thunk of AnyLocation.projecting<A>(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of TextFieldState.FormatActions?(v51);
  outlined consume of TextFieldState.FormatActions?(v50);
  v31 = (uint64_t *)v55;
  swift_bridgeObjectRetain();
  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  lazy protocol witness table accessor for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection();
  v32 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  *v31 = v53;
  v31[1] = v32;
  v33 = v58;
  result = outlined init with copy of SearchFieldConfiguration.Data?((uint64_t)v31, v58, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v35 = *(_QWORD *)(a1 + 64);
  if (v35)
  {
    v36 = *(_DWORD *)(a1 + 56);
    v39 = a1 + 40;
    v38 = *(_QWORD *)(a1 + 40);
    v37 = *(_QWORD *)(v39 + 8);
    v40 = v36 & 1;
    outlined copy of Text.Storage(v38, v37, v36 & 1);
    swift_bridgeObjectRetain();
    outlined destroy of Binding<AttributedString>((uint64_t)v31, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v41 = v45;
    outlined init with take of Binding<AttributedString>(v33, v45);
    v42 = type metadata accessor for SearchFieldConfiguration.Data(0);
    v43 = v41 + *(int *)(v42 + 20);
    *(_QWORD *)v43 = v38;
    *(_QWORD *)(v43 + 8) = v37;
    *(_BYTE *)(v43 + 16) = v40;
    *(_QWORD *)(v43 + 24) = v35;
    v44 = v41 + *(int *)(v42 + 24);
    *(_QWORD *)v44 = 0;
    *(_BYTE *)(v44 + 8) = -1;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v41, 0, 1, v42);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for TextFieldStyle._body(configuration:) in conformance SearchFieldConfigurationTextFieldStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _PreferenceWritingModifier<SearchFieldConfiguration.Key>, (uint64_t)&type metadata for SearchFieldConfiguration.Key, (uint64_t)&protocol witness table for SearchFieldConfiguration.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v14 - v6;
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v14 - v11;
  SearchFieldConfigurationTextFieldStyle.value(_:)(a1, (uint64_t)&v14 - v11);
  outlined init with copy of SearchFieldConfiguration.Data?((uint64_t)v12, (uint64_t)v7, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, v8);
  outlined init with copy of _PreferenceWritingModifier<SearchFieldConfiguration.Key>((uint64_t)v7, a2);
  outlined destroy of _PreferenceWritingModifier<SearchFieldConfiguration.Key>((uint64_t)v7);
  return outlined destroy of Binding<AttributedString>((uint64_t)v12, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, v8);
}

uint64_t outlined init with copy of _PreferenceWritingModifier<SearchFieldConfiguration.Key>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _PreferenceWritingModifier<SearchFieldConfiguration.Key>, (uint64_t)&type metadata for SearchFieldConfiguration.Key, (uint64_t)&protocol witness table for SearchFieldConfiguration.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of _PreferenceWritingModifier<SearchFieldConfiguration.Key>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _PreferenceWritingModifier<SearchFieldConfiguration.Key>, (uint64_t)&type metadata for SearchFieldConfiguration.Key, (uint64_t)&protocol witness table for SearchFieldConfiguration.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined copy of TextFieldState.FormatActions?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WritableKeyPath<TextFieldState, String> and conformance WritableKeyPath<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type WritableKeyPath<TextFieldState, String> and conformance WritableKeyPath<A, B>;
  if (!lazy protocol witness table cache variable for type WritableKeyPath<TextFieldState, String> and conformance WritableKeyPath<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for WritableKeyPath<TextFieldState, String>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC870]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WritableKeyPath<TextFieldState, String> and conformance WritableKeyPath<A, B>);
  }
  return result;
}

uint64_t outlined consume of TextFieldState.FormatActions?(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection;
  if (!lazy protocol witness table cache variable for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StringToAttributedStringProjection, &type metadata for StringToAttributedStringProjection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection;
  if (!lazy protocol witness table cache variable for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StringToAttributedStringProjection, &type metadata for StringToAttributedStringProjection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection;
  if (!lazy protocol witness table cache variable for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StringToAttributedStringProjection, &type metadata for StringToAttributedStringProjection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection);
  }
  return result;
}

void type metadata accessor for State<TextFieldState>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for State<TextFieldState>)
  {
    v0 = type metadata accessor for State();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<EmptyView>, _PreferenceWritingModifier<SearchFieldConfiguration.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<EmptyView>, _PreferenceWritingModifier<SearchFieldConfiguration.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<EmptyView>, _PreferenceWritingModifier<SearchFieldConfiguration.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<EmptyView>, _PreferenceWritingModifier<SearchFieldConfiguration.Key>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _UnaryViewAdaptor<EmptyView> and conformance _UnaryViewAdaptor<A>();
    v3[1] = lazy protocol witness table accessor for type _PreferenceWritingModifier<SearchFieldConfiguration.Key> and conformance _PreferenceWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<EmptyView>, _PreferenceWritingModifier<SearchFieldConfiguration.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_UnaryViewAdaptor<EmptyView>, _PreferenceWritingModifier<SearchFieldConfiguration.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<EmptyView>, _PreferenceWritingModifier<SearchFieldConfiguration.Key>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE7C28], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE40F0]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<SearchFieldConfiguration.Key>, (uint64_t)&type metadata for SearchFieldConfiguration.Key, (uint64_t)&protocol witness table for SearchFieldConfiguration.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<EmptyView>, _PreferenceWritingModifier<SearchFieldConfiguration.Key>>);
  }
}

unint64_t lazy protocol witness table accessor for type _UnaryViewAdaptor<EmptyView> and conformance _UnaryViewAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UnaryViewAdaptor<EmptyView> and conformance _UnaryViewAdaptor<A>;
  if (!lazy protocol witness table cache variable for type _UnaryViewAdaptor<EmptyView> and conformance _UnaryViewAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE7C28], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE40F0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4108], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UnaryViewAdaptor<EmptyView> and conformance _UnaryViewAdaptor<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<SearchFieldConfiguration.Key> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<SearchFieldConfiguration.Key> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<SearchFieldConfiguration.Key> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<SearchFieldConfiguration.Key>, (uint64_t)&type metadata for SearchFieldConfiguration.Key, (uint64_t)&protocol witness table for SearchFieldConfiguration.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE60F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<SearchFieldConfiguration.Key> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

uint64_t static __App._registerPerformanceTests(_:)(uint64_t a1)
{
  static TestingAppDelegate.performanceTests = a1;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRetain();
}

void _BenchmarkHost._started(test:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _BenchmarkHost._started(test:)(a1, a2, a3, (SEL *)&selRef_startedTest_);
}

void _BenchmarkHost._finished(test:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _BenchmarkHost._started(test:)(a1, a2, a3, (SEL *)&selRef_finishedTest_);
}

void _BenchmarkHost._started(test:)(_QWORD *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  v9 = v8;
  v10 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v11 = (id)MEMORY[0x18D75CC88](v7, v9);
  objc_msgSend(v10, *a4, v11);
  swift_bridgeObjectRelease();

}

void _BenchmarkHost._failed(test:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;

  v1 = a1[3];
  v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  v5 = v4;
  v6 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v7 = (id)MEMORY[0x18D75CC88](v3, v5);
  objc_msgSend(v6, sel_failedTest_withFailure_, v7, 0);
  swift_bridgeObjectRelease();

}

_QWORD *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ExtendedLaunchTestNameKey(_QWORD *result, _QWORD *(*a2)(_QWORD *__return_ptr))
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  v2 = result;
  v3 = result[1];
  if (v3)
  {
    v4 = *result;
  }
  else
  {
    result = a2(v5);
    v4 = v5[0];
    v3 = v5[1];
  }
  *v2 = v4;
  v2[1] = v3;
  return result;
}

uint64_t closure #1 in AppGraph.extendedLaunchTestName()()
{
  return GraphHost.preferenceValue<A>(_:)();
}

uint64_t dispatch thunk of _PerformanceTest.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of _PerformanceTest.runTest(host:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t sub_186F99AC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _PreferenceWritingModifier<ExtendedLaunchTestNameKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _PreferenceWritingModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

uint64_t type metadata accessor for ClarityUIWindowScene()
{
  return objc_opt_self();
}

uint64_t ClarityUIWindowScene.loadWindowWithRootView()()
{
  char *v0;
  char *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t ObjectType;
  void *v8;
  void *v9;
  id v10;
  id v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  id v20;
  void *v21;
  id v22;
  Class v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  uint64_t result;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v3 = objc_msgSend(v2, sel_delegate);

  if (!v3)
    goto LABEL_35;
  swift_getObjectType();
  v4 = swift_conformsToProtocol2();
  if (v4)
    v5 = v4;
  else
    v5 = 0;
  if (v4)
    v6 = v3;
  else
    v6 = 0;
  if (v6)
  {
    ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    ClarityUIApplicationDelegate.makeRootViewForSimplifiedApplication()(ObjectType, v5);
    swift_unknownObjectRelease();
    goto LABEL_10;
  }
  type metadata accessor for AppDelegate();
  if (swift_dynamicCastClass())
    return swift_unknownObjectRelease();
  if (!objc_msgSend((id)swift_unknownObjectRetain(), sel_respondsToSelector_, sel_swiftui_rootViewForSimplifiedApplicationProvider))
  {
    swift_unknownObjectRelease();
    goto LABEL_35;
  }
  v30 = objc_msgSend((id)swift_unknownObjectRetain(), sel_performSelector_, sel_swiftui_rootViewForSimplifiedApplicationProvider);
  v31 = v3;
  if (!v30
    || (swift_unknownObjectRetain(),
        type metadata accessor for RootViewForSimplifiedApplicationProvider(),
        (swift_dynamicCast() & 1) == 0))
  {
    v36 = 0;
    v34 = 0u;
    v35 = 0u;
    goto LABEL_33;
  }
  if (!*((_QWORD *)&v35 + 1))
  {
LABEL_33:
    outlined destroy of RootViewForSimplifiedApplicationProvider?((uint64_t)&v34);
    goto LABEL_35;
  }
  outlined init with take of OptionalBinaryInteger(&v34, (uint64_t)v37);
  v32 = v38;
  v33 = v39;
  __swift_project_boxed_opaque_existential_1(v37, v38);
  RootViewForSimplifiedApplicationProvider.makeRootViewForSimplifiedApplication()(v32, v33);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
LABEL_10:
  swift_retain();
  if (!objc_msgSend(v1, sel_delegate))
  {
LABEL_31:
    swift_release();
LABEL_35:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v8 = (void *)swift_dynamicCastObjCProtocolConditional();
  if (!v8)
  {
LABEL_30:
    swift_unknownObjectRelease();
    goto LABEL_31;
  }
  v9 = v8;
  if ((objc_msgSend(v8, sel_respondsToSelector_, sel_window) & 1) != 0
    && (v10 = objc_msgSend(v9, sel_window)) != 0)
  {
    v11 = v10;
    objc_msgSend(v11, sel_setWindowScene_, v1);
    objc_msgSend(objc_msgSend(v1, sel_coordinateSpace), sel_bounds);
    v13 = v12;
    v15 = v14;
    v17 = v16;
    v19 = v18;
    swift_unknownObjectRelease();
    objc_msgSend(v11, sel_setFrame_, v13, v15, v17, v19);

  }
  else
  {
    v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F98]), sel_initWithWindowScene_, v1);
    v21 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUI20ClarityUIWindowScene_defaultCreatedWindow];
    *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI20ClarityUIWindowScene_defaultCreatedWindow] = v20;
    v11 = v20;

    if (objc_msgSend(v9, sel_respondsToSelector_, sel_setWindow_))
    {
      objc_msgSend((id)swift_unknownObjectRetain(), sel_performSelector_withObject_, sel_setWindow_, v11);

      v22 = v9;
      goto LABEL_18;
    }
  }

LABEL_18:
  type metadata accessor for UIHostingController<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(0);
  v24 = objc_allocWithZone(v23);
  swift_retain();
  v25 = specialized UIHostingController.init(rootView:)();
  swift_release();
  v26 = objc_msgSend(v25, sel_view);
  if (!v26)
  {
    swift_release();
    __break(1u);
    goto LABEL_30;
  }
  v27 = v26;
  if (one-time initialization token for clarityUIContentBackground != -1)
    swift_once();
  objc_msgSend(v27, sel_setBackgroundColor_, static UIColor.clarityUIContentBackground);

  v28 = v25;
  objc_msgSend(v11, sel_setRootViewController_, v28);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return swift_release_n();
}

unint64_t type metadata accessor for UIWindow()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIWindow;
  if (!lazy cache variable for type metadata for UIWindow)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIWindow);
  }
  return result;
}

id ClarityUIWindowScene.__allocating_init(session:connectionOptions:)(void *a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithSession_connectionOptions_, a1, a2);

  return v5;
}

id ClarityUIWindowScene.init(session:connectionOptions:)(void *a1, void *a2)
{
  char *v2;
  id v5;
  objc_super v7;

  *(_QWORD *)&v2[OBJC_IVAR____TtC7SwiftUI20ClarityUIWindowScene_defaultCreatedWindow] = 0;
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for ClarityUIWindowScene();
  v5 = objc_msgSendSuper2(&v7, sel_initWithSession_connectionOptions_, a1, a2);

  return v5;
}

id ClarityUIWindowScene.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClarityUIWindowScene();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for ClarityUIWindowScene()
{
  return swift_lookUpClassMethod();
}

uint64_t outlined destroy of RootViewForSimplifiedApplicationProvider?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for RootViewForSimplifiedApplicationProvider?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for RootViewForSimplifiedApplicationProvider?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for RootViewForSimplifiedApplicationProvider?)
  {
    type metadata accessor for RootViewForSimplifiedApplicationProvider();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RootViewForSimplifiedApplicationProvider?);
  }
}

unint64_t type metadata accessor for RootViewForSimplifiedApplicationProvider()
{
  unint64_t result;

  result = lazy cache variable for type metadata for RootViewForSimplifiedApplicationProvider;
  if (!lazy cache variable for type metadata for RootViewForSimplifiedApplicationProvider)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RootViewForSimplifiedApplicationProvider);
  }
  return result;
}

void type metadata accessor for UIHostingController<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIHostingController<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for UIHostingController(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
  }
}

void type metadata accessor for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>)
  {
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>();
    v2[0] = MEMORY[0x1E0CE7508];
    v2[1] = &protocol witness table for ClarityUIInterfaceIdiomModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void static WindowResizability.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t (*static WindowResizability.automatic.modify(_BYTE *a1))()
{
  *a1 = 0;
  return static WindowResizability.automatic.modify;
}

void static WindowResizability.contentSize.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t (*static WindowResizability.contentSize.modify(_BYTE *a1))()
{
  *a1 = 1;
  return static WindowResizability.automatic.modify;
}

void static WindowResizability.contentMinSize.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static WindowResizability.automatic.setter()
{
  id v0;

  static os_log_type_t.fault.getter();
  v0 = (id)static Log.runtimeIssuesLog.getter();
  os_log(_:dso:log:_:_:)();

}

uint64_t (*static WindowResizability.contentMinSize.modify(_BYTE *a1))()
{
  *a1 = 2;
  return static WindowResizability.automatic.modify;
}

uint64_t Scene.windowResizability(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = *a1;
  return Scene.modifier<A>(_:)(&v4, a2, &unk_1E1AF0F68, a3);
}

ValueMetadata *type metadata accessor for WindowResizability()
{
  return &type metadata for WindowResizability;
}

uint64_t sub_186F9A728(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for WindowResizabilityModifier;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

ValueMetadata *type metadata accessor for WindowResizability.Role()
{
  return &type metadata for WindowResizability.Role;
}

uint64_t getEnumTagSinglePayload for WindowResizability(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for WindowResizability(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_186F9A868 + 4 * byte_187BFC775[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_186F9A89C + 4 * byte_187BFC770[v4]))();
}

uint64_t sub_186F9A89C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F9A8A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186F9A8ACLL);
  return result;
}

uint64_t sub_186F9A8B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186F9A8C0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_186F9A8C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F9A8CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for WindowResizabilityModifier()
{
  return &unk_1E1AF0F68;
}

unint64_t lazy protocol witness table accessor for type WindowResizability.Role and conformance WindowResizability.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WindowResizability.Role and conformance WindowResizability.Role;
  if (!lazy protocol witness table cache variable for type WindowResizability.Role and conformance WindowResizability.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowResizability.Role, &type metadata for WindowResizability.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowResizability.Role and conformance WindowResizability.Role);
  }
  return result;
}

uint64_t static WindowResizabilityModifier._makeScene(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t result;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_DWORD *)(a2 + 56);
  v18 = *(_QWORD *)a2;
  v19 = v6;
  v20 = v7;
  v21 = *(_OWORD *)(a2 + 24);
  v22 = v8;
  v23 = v9;
  v24 = v10;
  a3(&v16);
  v18 = v9;
  v19 = v10;
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
  {
    LODWORD(v18) = v5;
    type metadata accessor for _GraphValue<WindowResizabilityModifier>();
    v12 = _GraphValue.value.getter();
    v18 = v16;
    v19 = v17;
    v13 = PreferencesOutputs.subscript.getter();
    v14 = *MEMORY[0x1E0CFED28];
    if ((v13 & 0x100000000) == 0)
      v14 = v13;
    v18 = __PAIR64__(v14, v12);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type WindowResizabilityModifier.UpdateSceneList and conformance WindowResizabilityModifier.UpdateSceneList();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v18) = 0;
    result = PreferencesOutputs.subscript.setter();
  }
  v15 = v17;
  *(_QWORD *)a4 = v16;
  *(_DWORD *)(a4 + 8) = v15;
  return result;
}

char *WindowResizabilityModifier.UpdateSceneList.value.getter(uint64_t a1)
{
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE v8[272];
  _BYTE v9[272];

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1))
    return (char *)MEMORY[0x1E0DEE9D8];
  Value = AGGraphGetValue();
  v2 = *(_QWORD *)(*(_QWORD *)Value + 16);
  if (!v2)
    return (char *)MEMORY[0x1E0DEE9D8];
  v3 = *(_QWORD *)Value + 32;
  swift_bridgeObjectRetain();
  v4 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    outlined init with copy of SceneList.Item(v3, (uint64_t)v9);
    v9[200] = *(_BYTE *)AGGraphGetValue();
    outlined init with copy of SceneList.Item((uint64_t)v9, (uint64_t)v8);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
    v6 = *((_QWORD *)v4 + 2);
    v5 = *((_QWORD *)v4 + 3);
    if (v6 >= v5 >> 1)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1, v4);
    *((_QWORD *)v4 + 2) = v6 + 1;
    memcpy(&v4[272 * v6 + 32], v8, 0x110uLL);
    outlined destroy of SceneList.Item((uint64_t)v9);
    v3 += 272;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v4;
}

char *protocol witness for Rule.value.getter in conformance WindowResizabilityModifier.UpdateSceneList@<X0>(char **a1@<X8>)
{
  uint64_t *v1;
  char *result;

  result = WindowResizabilityModifier.UpdateSceneList.value.getter(*v1);
  *a1 = result;
  return result;
}

void type metadata accessor for _GraphValue<WindowResizabilityModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<WindowResizabilityModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<WindowResizabilityModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type WindowResizabilityModifier.UpdateSceneList and conformance WindowResizabilityModifier.UpdateSceneList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WindowResizabilityModifier.UpdateSceneList and conformance WindowResizabilityModifier.UpdateSceneList;
  if (!lazy protocol witness table cache variable for type WindowResizabilityModifier.UpdateSceneList and conformance WindowResizabilityModifier.UpdateSceneList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowResizabilityModifier.UpdateSceneList, &unk_1E1AF0ED8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowResizabilityModifier.UpdateSceneList and conformance WindowResizabilityModifier.UpdateSceneList);
  }
  return result;
}

void *type metadata accessor for WindowResizabilityModifier.UpdateSceneList()
{
  return &unk_1E1AF0ED8;
}

void static __App.run<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for __App.ShoeboxAdaptor(0, v7, v8, v9);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v15 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v6, a1, a2, v12);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v14, v6, a2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for __App.ShoeboxAdaptor<A>, v10);
  runApp<A>(_:)();
}

uint64_t type metadata accessor for __App.ShoeboxAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for __App.ShoeboxAdaptor);
}

ValueMetadata *type metadata accessor for __App()
{
  return &type metadata for __App;
}

uint64_t getEnumTagSinglePayload for __App.ShoeboxAdaptor(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_186F9AEAC + 4 * byte_187BFC8E0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for __App.ShoeboxAdaptor(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t associated type witness table accessor for App.Body : Scene in __App.ShoeboxAdaptor<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void __App.ShoeboxAdaptor.init()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t __App.ShoeboxAdaptor.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = v3;
  v29 = a3;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 24);
  v27 = *(_QWORD *)(v9 + 16);
  v12 = type metadata accessor for WindowGroup(0, v27, v10, v11);
  v28 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v26 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, v4, a1, v18);
  v21 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v22 = swift_allocObject();
  v23 = v27;
  *(_QWORD *)(v22 + 16) = v27;
  *(_QWORD *)(v22 + 24) = v10;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v22 + v21, v8, a1);
  WindowGroup.init(makeContent:)((uint64_t)partial apply for closure #1 in __App.ShoeboxAdaptor.body.getter, v22, v23, v10, v15);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowGroup<A>, v12);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, v12, (uint64_t)v20);
  v24 = *(uint64_t (**)(char *, uint64_t))(v28 + 8);
  v24(v15, v12);
  static SceneBuilder.buildBlock<A>(_:)((uint64_t)v20, v12, v29);
  return v24(v20, v12);
}

void protocol witness for App.init() in conformance __App.ShoeboxAdaptor<A>()
{
  __App.ShoeboxAdaptor.init()();
}

uint64_t sub_186F9B2F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for __App.ShoeboxAdaptor(0, v5, *(_QWORD *)(v4 + 24), a4)- 8)+ 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + ((v6 + 32) & ~v6), v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in __App.ShoeboxAdaptor.body.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for __App.ShoeboxAdaptor(0, v4, *(_QWORD *)(v2 + 24), a1)- 8)+ 80);
  return closure #1 in __App.ShoeboxAdaptor.body.getter(v2 + ((v5 + 32) & ~v5), v4, a2);
}

void sub_186F9B3B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for WindowGroup(255, *a1, a1[1], a4);
  JUMPOUT(0x18D75FFDCLL);
}

void protocol witness for View.body.getter in conformance ListStyleContent()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _ListValue.Init1.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  v4 = type metadata accessor for ResolvedList(0, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

void _ListValue.Init1.value.getter(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a3;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = type metadata accessor for SelectionManagerBox(255, v5, v6, a2);
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v7);
  v10 = type metadata accessor for _ListStyleConfiguration(0, v7, v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v28 - v13;
  v16 = type metadata accessor for ResolvedList(0, v5, v6, v15);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v28 - v18;
  v20 = *(_QWORD *)(a1 + 16);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)&v28 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v26 + 16))(v25, v3 + *(int *)(a1 + 52), v20, v23);
  _ListValue.Init1.base.getter(a1, v27, (uint64_t)v19);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v19, v10);
  _ListValue.init(style:configuration:)((uint64_t)v25, v20, v29);
}

void protocol witness for static Rule.initialValue.getter in conformance _ListValue<A, B>.Init1()
{
  type metadata accessor for _ListValue();
}

uint64_t sub_186F9B658(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

void View.listStyle<A, B>(_:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  v6 = type metadata accessor for ListStyleWriter(0, v4, v5, v4);
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = type metadata accessor for StyleContextAcceptsPredicate();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6398], v8);
  type metadata accessor for StaticIf();
}

uint64_t sub_186F9B794(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v17 - v13;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v2 + 16))(v5, *(_QWORD *)(v9 - 200), v7, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3, v5, v7);
  v15 = *(_QWORD *)(v9 - 184);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 16))(v6, *(_QWORD *)(v9 - 176), v4);
  *(_QWORD *)(v9 - 120) = v4;
  *(_QWORD *)(v9 - 112) = v6;
  *(_QWORD *)(v9 - 128) = *(_QWORD *)(v9 - 168);
  ViewModifier.requiring<A>(_:)(v9 - 112, 1, v8, (uint64_t)v14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 192) + 8))(v3, v8);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v6, v4);
  MEMORY[0x18D75B4AC](v14, *(_QWORD *)(v9 - 152), a1, *(_QWORD *)(v9 - 144));
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, a1);
}

void View.listStyle<A, B>(_:idiom:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x1E0C80A78](a1, a2);
  v4 = type metadata accessor for ListStyleWriter(0, v2, v3, v2);
  MEMORY[0x1E0C80A78](v4, v5);
  v6 = type metadata accessor for InterfaceIdiomPredicate();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5A68], v6);
  type metadata accessor for StaticIf();
}

uint64_t sub_186F9B978(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v10 = *(_QWORD *)(a1 - 8);
  v11 = MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v15 - v12;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v4 + 16))(v2, *(_QWORD *)(v8 - 160), v5, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v3, v2, v5);
  ViewModifier.requiring<A>(_:)(*(_QWORD *)(v8 - 152), v6, (uint64_t)v13);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
  MEMORY[0x18D75B4AC](v13, *(_QWORD *)(v8 - 136), a1, *(_QWORD *)(v8 - 128));
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, a1);
}

void View.listStyle<A, B>(_:if:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x1E0C80A78](a1, a2);
  v5 = type metadata accessor for ListStyleWriter(0, v3, v4, v2);
  MEMORY[0x1E0C80A78](v5, v6);
  type metadata accessor for StaticIf();
}

uint64_t sub_186F9BAFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v9 = *(_QWORD *)(a1 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v14 - v11;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v3 + 16))(v5, *(_QWORD *)(v7 - 152), v4, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v5, v4);
  StaticIf<>.init<>(_:then:)(v2, v6, (uint64_t)v12);
  MEMORY[0x18D75B4AC](v12, *(_QWORD *)(v7 - 136), a1, *(_QWORD *)(v7 - 128));
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, a1);
}

uint64_t closure #1 in static ListStyleWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for ListStyleWriter(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ListStyleWriter<A>()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ListStyleWriter<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance AnyListStyleContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static AnyListStyleContext.accepts<A>(_:at:)(a3);
}

uint64_t protocol witness for static StyleContext.acceptsAny<A>(_:) in conformance AnyListStyleContext(uint64_t a1, uint64_t a2)
{
  const void *v3;
  size_t v4;
  uint64_t v6;

  MEMORY[0x1E0C80A78](a1, a1);
  if (a2)
    memcpy((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v4);
  return static StyleContext.acceptsAny<A>(_:)() & 1;
}

uint64_t protocol witness for static StyleContext.visitStyle<A>(_:) in conformance AnyListStyleContext()
{
  return static StyleContext.visitStyle<A>(_:)();
}

uint64_t static ResolvedList._makeView(view:inputs:)(int *a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  _DWORD v5[3];

  v1 = *a1;
  lazy protocol witness table accessor for type ListStyleInput and conformance ListStyleInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (!v3)
  {
    v5[0] = v1;
    static ResolvedList.makeView<A>(view:style:inputs:)((uint64_t)v5, 0);
  }
  v5[0] = v1;
  return (*(uint64_t (**)(_DWORD *))(v4 + 8))(v5);
}

void static ResolvedList.makeView<A>(view:style:inputs:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for _ListValue.Init1();
}

void sub_186F9BF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  int v23;

  *(_QWORD *)(v16 - 296) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (_DWORD *)((char *)&a9 - v19);
  v21 = **(_DWORD **)(v16 - 224);
  *(_QWORD *)(v16 - 232) = *(_QWORD *)v10;
  *(_DWORD *)(v16 - 236) = *(_DWORD *)(v10 + 8);
  *(_QWORD *)(v16 - 248) = *(_QWORD *)(v10 + 16);
  *(_DWORD *)(v16 - 224) = *(_DWORD *)(v10 + 80);
  *(_DWORD *)(v16 - 208) = v21;
  type metadata accessor for ResolvedList(255, v13, v12, v22);
  type metadata accessor for _GraphValue();
  *(_OWORD *)(v16 - 272) = *(_OWORD *)(v10 + 40);
  *(_OWORD *)(v16 - 288) = *(_OWORD *)(v10 + 56);
  v23 = _GraphValue.value.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 16))(v15, *(_QWORD *)(v16 - 256), v11);
  *v20 = v23;
  *(_QWORD *)(v16 - 208) = v11;
  *(_QWORD *)(v16 - 200) = v13;
  *(_QWORD *)(v16 - 192) = v9;
  *(_QWORD *)(v16 - 184) = v12;
  type metadata accessor for _ListValue.Init1();
}

void sub_186F9C088(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v7 + *(int *)(a1 + 52), v9, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 296) + 16))(v8, v7, v6);
  *(_QWORD *)(v10 - 208) = v2;
  *(_QWORD *)(v10 - 200) = v4;
  *(_QWORD *)(v10 - 192) = v1;
  *(_QWORD *)(v10 - 184) = v3;
  type metadata accessor for _ListValue();
}

uint64_t sub_186F9C0D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ListValue<A, B>.Init1, v5);
  _GraphValue.init<A>(_:)();
  *(_QWORD *)(v7 - 208) = *(_QWORD *)(v7 - 232);
  *(_DWORD *)(v7 - 200) = *(_DWORD *)(v7 - 236);
  *(_QWORD *)(v7 - 192) = *(_QWORD *)(v7 - 248);
  *(_QWORD *)(v7 - 184) = v9;
  *(_QWORD *)(v7 - 176) = v10;
  *(_OWORD *)(v7 - 168) = *(_OWORD *)(v7 - 272);
  *(_OWORD *)(v7 - 152) = *(_OWORD *)(v7 - 288);
  *(_QWORD *)(v7 - 136) = v8;
  *(_DWORD *)(v7 - 128) = *(_DWORD *)(v7 - 224);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8))(v7 - 124, v7 - 208, v3, v2, v1, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
}

void static ResolvedList.makeViewList<A>(view:style:inputs:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for _ListValue.Init1();
}

void sub_186F9C224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  int v23;

  *(_QWORD *)(v16 - 296) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (_DWORD *)((char *)&a9 - v19);
  v21 = **(_DWORD **)(v16 - 224);
  *(_QWORD *)(v16 - 264) = *(_QWORD *)v10;
  *(_DWORD *)(v16 - 268) = *(_DWORD *)(v10 + 8);
  *(_QWORD *)(v16 - 280) = *(_QWORD *)(v10 + 16);
  *(_OWORD *)(v16 - 224) = *(_OWORD *)(v10 + 40);
  *(_QWORD *)(v16 - 232) = *(_QWORD *)(v10 + 56);
  *(_DWORD *)(v16 - 236) = *(_DWORD *)(v10 + 64);
  *(_QWORD *)(v16 - 248) = *(_QWORD *)(v10 + 72);
  *(_DWORD *)(v16 - 252) = *(unsigned __int8 *)(v10 + 80);
  *(_DWORD *)(v16 - 192) = v21;
  type metadata accessor for ResolvedList(255, v13, v12, v22);
  type metadata accessor for _GraphValue();
  v23 = _GraphValue.value.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 16))(v15, *(_QWORD *)(v16 - 288), v11);
  *v20 = v23;
  *(_QWORD *)(v16 - 192) = v11;
  *(_QWORD *)(v16 - 184) = v13;
  *(_QWORD *)(v16 - 176) = v9;
  *(_QWORD *)(v16 - 168) = v12;
  type metadata accessor for _ListValue.Init1();
}

void sub_186F9C32C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v7 + *(int *)(a1 + 52), v9, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 296) + 16))(v8, v7, v6);
  *(_QWORD *)(v10 - 192) = v2;
  *(_QWORD *)(v10 - 184) = v4;
  *(_QWORD *)(v10 - 176) = v1;
  *(_QWORD *)(v10 - 168) = v3;
  type metadata accessor for _ListValue();
}

uint64_t sub_186F9C374()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ListValue<A, B>.Init1, v5);
  _GraphValue.init<A>(_:)();
  *(_QWORD *)(v7 - 192) = *(_QWORD *)(v7 - 264);
  *(_DWORD *)(v7 - 184) = *(_DWORD *)(v7 - 268);
  *(_QWORD *)(v7 - 176) = *(_QWORD *)(v7 - 280);
  *(_QWORD *)(v7 - 168) = v8;
  *(_QWORD *)(v7 - 160) = v9;
  *(_OWORD *)(v7 - 152) = *(_OWORD *)(v7 - 224);
  *(_QWORD *)(v7 - 136) = *(_QWORD *)(v7 - 232);
  *(_DWORD *)(v7 - 128) = *(_DWORD *)(v7 - 236);
  *(_QWORD *)(v7 - 120) = *(_QWORD *)(v7 - 248);
  *(_BYTE *)(v7 - 112) = *(_DWORD *)(v7 - 252);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 16))(v7 - 108, v7 - 192, v3, v2, v1, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedList<A>(int *a1)
{
  return static ResolvedList._makeView(view:inputs:)(a1);
}

void protocol witness for View.body.getter in conformance ResolvedList<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedList<A>, a1);
  specialized PrimitiveView.body.getter();
}

void protocol witness for static PropertyKey.defaultValue.getter in conformance ListStyleInput(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

void static StyleType.makeView<A>(view:style:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  type metadata accessor for ResolvedList(255, a7, a9, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  type metadata accessor for _ListValue();
}

{
  type metadata accessor for ResolvedTabView(255, a7, a9, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  type metadata accessor for _TabViewValue();
}

{
  type metadata accessor for ResolvedPicker(255, a7, a9, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  type metadata accessor for _PickerValue();
}

void sub_186F9C544()
{
  type metadata accessor for _ListValue.Init2();
}

uint64_t sub_186F9C55C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  int v24;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ListValue<A, B>.Init2, a1);
  _GraphValue.init<A>(_:)();
  v15 = v7;
  v16 = v8;
  v17 = v5;
  v18 = v9;
  v19 = v10;
  v20 = v14;
  v21 = v13;
  v22 = v11;
  v23 = v6;
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 8))(&v24, &v15, v3, v4, v2, v1);
}

void protocol witness for static AnyStyleType.makeView<A>(view:style:inputs:) in conformance StyleType<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  static StyleType.makeView<A>(view:style:inputs:)(a1, a2, a3, a4, a5, *(_QWORD *)(a8 + 16), a6, *(_QWORD *)(a8 + 24), a7);
}

{
  static StyleType.makeView<A>(view:style:inputs:)(a1, a2, a3, a4, a5, *(_QWORD *)(a8 + 16), a6, *(_QWORD *)(a8 + 24), a7);
}

{
  static StyleType.makeView<A>(view:style:inputs:)(a1, a2, a3, a4, a5, *(_QWORD *)(a8 + 16), a6, *(_QWORD *)(a8 + 24), a7);
}

void View.drawsRowSeparators(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t dispatch thunk of static ListStyle._makeView<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of static ListStyle._makeViewList<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t *initializeBufferWithCopyOfBuffer for _ListValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  int v17;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unsigned int v28;
  uint64_t v29;
  char v30;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8 & 0xF8 | 7;
  v10 = *(_QWORD *)(v6 + 64) + v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (*(_DWORD *)(v7 + 84))
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = v11 + 1;
  if (v12 <= v11)
    v13 = *(_QWORD *)(v7 + 64);
  else
    v13 = v12;
  if (v13 <= 8)
    v14 = 8;
  else
    v14 = v13;
  v15 = v14 + (((v8 & 0xF8) + 23) & ~v9) + 1;
  v16 = *(_DWORD *)(v6 + 80) & 0xF8 | v9;
  v17 = (*(_DWORD *)(v6 + 80) | v8) & 0x100000;
  if ((_DWORD)v16 != 7 || v17 != 0 || v15 + (v10 & ~v9) > 0x18)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v20 + ((v16 + 16) & ~v16));
    swift_retain();
  }
  else
  {
    v21 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v22 = (_QWORD *)(((unint64_t)v4 + v10) & v21);
    v23 = (_QWORD *)(((unint64_t)a2 + v10) & v21);
    v24 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (*v24 < 0xFFFFFFFFuLL)
    {
      memcpy(v22, v23, v15);
    }
    else
    {
      *v22 = *v23;
      v25 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v25 = *v24;
      v26 = (_QWORD *)(((unint64_t)v25 + v9 + 8) & v21);
      v27 = (_QWORD *)(((unint64_t)v24 + v9 + 8) & v21);
      v28 = *((unsigned __int8 *)v27 + v14);
      swift_retain();
      swift_retain();
      if (v28 >= 3)
      {
        if (v14 <= 3)
          v29 = v14;
        else
          v29 = 4;
        __asm { BR              X11 }
      }
      if (v28 == 2)
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v26, v27, v5);
        v30 = 2;
LABEL_34:
        *((_BYTE *)v26 + v14) = v30;
        return v4;
      }
      if (v28 == 1)
      {
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v27, 1, v5))
        {
          memcpy(v26, v27, v12);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v26, v27, v5);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v26, 0, 1, v5);
        }
        v30 = 1;
        goto LABEL_34;
      }
      *v26 = *v27;
      *((_BYTE *)v26 + v14) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return v4;
}

uint64_t assignWithCopy for _ListValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  size_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  size_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v45 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v45 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_DWORD *)(v7 + 80) & 0xF8;
  v10 = v9 | 7;
  v11 = *(_QWORD *)(v6 + 64) + (v9 | 7);
  v12 = ~(v9 | 7);
  v13 = (_QWORD *)((v11 + a1) & v12);
  v14 = (_QWORD *)((v11 + a2) & v12);
  v47 = v7;
  v15 = *(_QWORD *)(v7 + 64);
  v16 = (v9 + 23) & v12;
  v17 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  v18 = (unint64_t *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  v19 = *v18;
  if (*v17 >= 0xFFFFFFFFuLL)
  {
    v46 = a1;
    if (v19 >= 0xFFFFFFFF)
    {
      *v13 = *v14;
      swift_retain();
      swift_release();
      *v17 = *v18;
      swift_retain();
      swift_release();
      v20 = (unint64_t)v17 + v10 + 8;
      v21 = (_QWORD *)(v20 & v12);
      v22 = (unint64_t)v18 + v10 + 8;
      v23 = (_QWORD *)(v22 & v12);
      if ((v20 & v12) == (v22 & v12))
        return a1;
      if (v8)
        v24 = v15;
      else
        v24 = v15 + 1;
      if (v24 <= v15)
        v25 = v15;
      else
        v25 = v24;
      if (v25 <= 8)
        v26 = 8;
      else
        v26 = v25;
      v27 = *((unsigned __int8 *)v21 + v26);
      if (v27 >= 3)
      {
        if (v26 <= 3)
          v28 = v26;
        else
          v28 = 4;
        __asm { BR              X12 }
      }
      if (v27 == 2)
        goto LABEL_75;
      if (v27 != 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_77;
      }
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v47 + 48))(v21, 1, v45))
LABEL_75:
        (*(void (**)(_QWORD *, uint64_t))(v47 + 8))(v21, v45);
LABEL_77:
      v43 = *((unsigned __int8 *)v23 + v26);
      if (v43 >= 3)
      {
        if (v26 <= 3)
          v44 = v26;
        else
          v44 = 4;
        __asm { BR              X12 }
      }
      if (v43 != 2)
      {
        if (v43 == 1)
        {
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v47 + 48))(v23, 1, v45))
          {
            memcpy(v21, v23, v24);
          }
          else
          {
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v47 + 16))(v21, v23, v45);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v21, 0, 1, v45);
          }
          a1 = v46;
          *((_BYTE *)v21 + v26) = 1;
        }
        else
        {
          a1 = v46;
          *v21 = *v23;
          *((_BYTE *)v21 + v26) = 0;
          swift_bridgeObjectRetain();
        }
        return a1;
      }
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v47 + 16))(v21, v23, v45);
      *((_BYTE *)v21 + v26) = 2;
      return v46;
    }
    swift_release();
    swift_release();
    v36 = ((unint64_t)v17 + v10 + 8) & v12;
    if (v8)
      v37 = v15;
    else
      v37 = v15 + 1;
    if (v37 <= v15)
      v37 = v15;
    if (v37 <= 8)
      v38 = 8;
    else
      v38 = v37;
    v39 = *(unsigned __int8 *)(v36 + v38);
    if (v39 >= 3)
    {
      if (v38 <= 3)
        v40 = v38;
      else
        v40 = 4;
      __asm { BR              X12 }
    }
    if (v39 == 2)
      goto LABEL_68;
    if (v39 != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_70;
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v36, 1, v45))
LABEL_68:
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v36, v45);
LABEL_70:
    memcpy(v13, v14, (v16 | 1) + v38);
    return v46;
  }
  if (v19 < 0xFFFFFFFF)
  {
    if (v8)
      v41 = *(_QWORD *)(v7 + 64);
    else
      v41 = v15 + 1;
    if (v41 <= v15)
      v41 = *(_QWORD *)(v7 + 64);
    if (v41 <= 8)
      v41 = 8;
    memcpy(v13, v14, (v16 | 1) + v41);
  }
  else
  {
    v46 = a1;
    *v13 = *v14;
    *v17 = *v18;
    v29 = (_QWORD *)(((unint64_t)v17 + v10 + 8) & v12);
    v30 = (_QWORD *)(((unint64_t)v18 + v10 + 8) & v12);
    if (v8)
      v31 = v15;
    else
      v31 = v15 + 1;
    if (v31 <= v15)
      v32 = v15;
    else
      v32 = v31;
    if (v32 <= 8)
      v33 = 8;
    else
      v33 = v32;
    v34 = *((unsigned __int8 *)v30 + v33);
    swift_retain();
    swift_retain();
    if (v34 >= 3)
    {
      if (v33 <= 3)
        v35 = v33;
      else
        v35 = 4;
      __asm { BR              X11 }
    }
    if (v34 == 2)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v47 + 16))(v29, v30, v45);
      *((_BYTE *)v29 + v33) = 2;
      return v46;
    }
    if (v34 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v47 + 48))(v30, 1, v45))
      {
        memcpy(v29, v30, v31);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v47 + 16))(v29, v30, v45);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v29, 0, 1, v45);
      }
      a1 = v46;
      *((_BYTE *)v29 + v33) = 1;
    }
    else
    {
      a1 = v46;
      *v29 = *v30;
      *((_BYTE *)v29 + v33) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t initializeWithTake for _ListValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  size_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v11 = *(_QWORD *)(v6 + 64) + v10;
  v12 = ~v10;
  v13 = (char *)((v11 + a1) & ~v10);
  v14 = (_QWORD *)((v11 + a2) & ~v10);
  v15 = *(_QWORD *)(v8 + 64);
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v16 < 0xFFFFFFFFuLL)
  {
    v25 = (v10 + 16) & v12;
    if (v9)
      v26 = *(_QWORD *)(v8 + 64);
    else
      v26 = v15 + 1;
    if (v26 > v15)
      v15 = v26;
    if (v15 <= 8)
      v15 = 8;
    memcpy(v13, v14, (v25 | 1) + v15);
  }
  else
  {
    *(_QWORD *)v13 = *v14;
    v17 = (unint64_t)(v13 + 15);
    *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8) = *v16;
    v18 = v10 + 8;
    v19 = (_QWORD *)((v18 + (v17 & 0xFFFFFFFFFFFFFFF8)) & v12);
    v20 = (_QWORD *)(((unint64_t)v16 + v18) & v12);
    if (v9)
      v21 = v15;
    else
      v21 = v15 + 1;
    if (v21 > v15)
      v15 = v21;
    if (v15 <= 8)
      v22 = 8;
    else
      v22 = v15;
    v23 = *((unsigned __int8 *)v20 + v22);
    if (v23 >= 3)
    {
      if (v22 <= 3)
        v24 = v22;
      else
        v24 = 4;
      __asm { BR              X12 }
    }
    if (v23 == 2)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 32))(v19, v20, v7);
      v27 = 2;
LABEL_31:
      *((_BYTE *)v19 + v22) = v27;
      return a1;
    }
    if (v23 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(v20, 1, v7))
      {
        memcpy(v19, v20, v21);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 32))(v19, v20, v7);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v19, 0, 1, v7);
      }
      v27 = 1;
      goto LABEL_31;
    }
    *v19 = *v20;
    *((_BYTE *)v19 + v22) = 0;
  }
  return a1;
}

uint64_t assignWithTake for _ListValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  size_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  uint64_t v45;
  uint64_t v46;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_DWORD *)(v8 + 80) & 0xF8;
  v11 = v10 | 7;
  v12 = *(_QWORD *)(v6 + 64) + (v10 | 7);
  v46 = a1;
  v13 = ~(v10 | 7);
  v14 = (_QWORD *)((v12 + a1) & v13);
  v15 = (_QWORD *)((v12 + a2) & v13);
  v16 = *(_QWORD *)(v8 + 64);
  v17 = (v10 + 23) & v13;
  v18 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (unint64_t *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  v20 = *v19;
  if (*v18 < 0xFFFFFFFFuLL)
  {
    if (v20 >= 0xFFFFFFFF)
    {
      *v14 = *v15;
      *v18 = *v19;
      v22 = (_QWORD *)(((unint64_t)v18 + v11 + 8) & v13);
      v24 = (_QWORD *)(((unint64_t)v19 + v11 + 8) & v13);
      if (v9)
        v25 = v16;
      else
        v25 = v16 + 1;
      if (v25 <= v16)
        v30 = v16;
      else
        v30 = v25;
      if (v30 <= 8)
        v27 = 8;
      else
        v27 = v30;
      v31 = *((unsigned __int8 *)v24 + v27);
      if (v31 >= 3)
      {
        if (v27 <= 3)
          v32 = v27;
        else
          v32 = 4;
        __asm { BR              X12 }
      }
      if (v31 != 2)
      {
        if (v31 == 1)
        {
          v40 = v7;
          if (!(*(unsigned int (**)(_QWORD *, uint64_t))(v8 + 48))(v24, 1))
          {
LABEL_81:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 32))(v22, v24, v40);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v22, 0, 1, v40);
            goto LABEL_82;
          }
LABEL_64:
          memcpy(v22, v24, v25);
LABEL_82:
          v43 = 1;
LABEL_86:
          *((_BYTE *)v22 + v27) = v43;
          return v46;
        }
        goto LABEL_83;
      }
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 32))(v22, v24, v7);
LABEL_85:
      v43 = 2;
      goto LABEL_86;
    }
    if (v9)
      v38 = *(_QWORD *)(v8 + 64);
    else
      v38 = v16 + 1;
    if (v38 <= v16)
      v38 = *(_QWORD *)(v8 + 64);
    if (v38 <= 8)
      v38 = 8;
    v39 = (v17 | 1) + v38;
    goto LABEL_71;
  }
  v45 = v7;
  if (v20 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    v33 = ((unint64_t)v18 + v11 + 8) & v13;
    if (v9)
      v34 = v16;
    else
      v34 = v16 + 1;
    if (v34 <= v16)
      v34 = v16;
    if (v34 <= 8)
      v35 = 8;
    else
      v35 = v34;
    v36 = *(unsigned __int8 *)(v33 + v35);
    if (v36 >= 3)
    {
      if (v35 <= 3)
        v37 = v35;
      else
        v37 = 4;
      __asm { BR              X12 }
    }
    if (v36 == 2)
      goto LABEL_68;
    if (v36 != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_70;
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v33, 1, v45))
LABEL_68:
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v33, v45);
LABEL_70:
    v39 = (v17 | 1) + v35;
LABEL_71:
    memcpy(v14, v15, v39);
    return v46;
  }
  *v14 = *v15;
  swift_release();
  *v18 = *v19;
  swift_release();
  v21 = (unint64_t)v18 + v11 + 8;
  v22 = (_QWORD *)(v21 & v13);
  v23 = (unint64_t)v19 + v11 + 8;
  v24 = (_QWORD *)(v23 & v13);
  if ((v21 & v13) != (v23 & v13))
  {
    if (v9)
      v25 = v16;
    else
      v25 = v16 + 1;
    if (v25 <= v16)
      v26 = v16;
    else
      v26 = v25;
    if (v26 <= 8)
      v27 = 8;
    else
      v27 = v26;
    v28 = *((unsigned __int8 *)v22 + v27);
    if (v28 >= 3)
    {
      if (v27 <= 3)
        v29 = v27;
      else
        v29 = 4;
      __asm { BR              X12 }
    }
    if (v28 == 2)
      goto LABEL_72;
    if (v28 == 1)
    {
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(v22, 1, v45))
LABEL_72:
        (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v22, v45);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v41 = *((unsigned __int8 *)v24 + v27);
    if (v41 >= 3)
    {
      if (v27 <= 3)
        v42 = v27;
      else
        v42 = 4;
      __asm { BR              X12 }
    }
    v40 = v45;
    if (v41 != 2)
    {
      if (v41 == 1)
      {
        if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(v24, 1, v45))
          goto LABEL_81;
        goto LABEL_64;
      }
LABEL_83:
      *v22 = *v24;
      *((_BYTE *)v22 + v27) = 0;
      return v46;
    }
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 32))(v22, v24, v45);
    goto LABEL_85;
  }
  return v46;
}

uint64_t getEnumTagSinglePayload for _ListValue(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  int v17;
  unsigned int v19;
  int v20;
  unint64_t v21;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (v5 <= 0x7FFFFFFE)
    v8 = 2147483646;
  else
    v8 = *(_DWORD *)(v4 + 84);
  if (*(_DWORD *)(v6 + 84))
    v9 = *(_QWORD *)(v6 + 64);
  else
    v9 = v7 + 1;
  if (v9 <= v7)
    v9 = *(_QWORD *)(v6 + 64);
  v10 = 8;
  if (v9 > 8)
    v10 = v9;
  if (!a2)
    return 0;
  v11 = *(_DWORD *)(v6 + 80) & 0xF8;
  v12 = v11 | 7;
  v13 = *(_QWORD *)(v4 + 64) + (v11 | 7);
  v14 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_29;
  v15 = v10 + ((v11 + 23) & ~v12) + (v13 & ~v12) + 1;
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v19 = ((v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (!v17)
        goto LABEL_29;
      goto LABEL_22;
    }
    if (v19 > 0xFF)
    {
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15))
        goto LABEL_29;
      goto LABEL_22;
    }
    if (v19 < 2)
    {
LABEL_29:
      if (v5 >= 0x7FFFFFFE)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v21 = *(_QWORD *)((((v13 + a1) & ~v12) + 15) & 0xFFFFFFFFFFFFF8);
      if (v21 >= 0xFFFFFFFF)
        LODWORD(v21) = -1;
      if ((v21 + 1) >= 2)
        return v21;
      else
        return 0;
    }
  }
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_29;
LABEL_22:
  v20 = (v17 - 1) << v16;
  if (v15 > 3)
    v20 = 0;
  if (!(_DWORD)v15)
    return v8 + v20 + 1;
  if (v15 > 3)
    LODWORD(v15) = 4;
  return ((uint64_t (*)(void))((char *)&loc_186F9D744 + 4 * byte_187BFC97C[(v15 - 1)]))();
}

void storeEnumTagSinglePayload for _ListValue(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v8 = 2147483646;
  else
    v8 = *(_DWORD *)(v5 + 84);
  v9 = *(_DWORD *)(v6 + 84);
  v10 = *(_DWORD *)(v6 + 80) & 0xF8;
  v11 = (*(_QWORD *)(v5 + 64) + (v10 | 7)) & ~(v10 | 7);
  v12 = (v10 + 23) & ~(v10 | 7);
  if (v9)
    v13 = v7;
  else
    v13 = v7 + 1;
  if (v13 > v7)
    v7 = v13;
  if (v7 <= 8)
    v7 = 8;
  v14 = v7 + v12 + 1 + v11;
  if (a3 > v8)
  {
    if (v14 <= 3)
    {
      v17 = ((a3 - v8 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v17))
      {
        v15 = 4u;
      }
      else if (v17 >= 0x100)
      {
        v15 = 2;
      }
      else
      {
        v15 = v17 > 1;
      }
    }
    else
    {
      v15 = 1u;
    }
  }
  else
  {
    v15 = 0u;
  }
  if (v8 < a2)
  {
    v16 = ~v8 + a2;
    if (v14 < 4)
    {
      if ((_DWORD)v14)
      {
        v18 = v16 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if ((_DWORD)v14 == 3)
        {
          *a1 = v18;
          *((_BYTE *)a1 + 2) = BYTE2(v18);
        }
        else if ((_DWORD)v14 == 2)
        {
          *a1 = v18;
        }
        else
        {
          *(_BYTE *)a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

void sub_186F9DA68()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x186F9DA54);
}

void sub_186F9DA78()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x186F9DA54);
}

void sub_186F9DA80()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x186F9DA54);
}

_UNKNOWN **sub_186F9DA8C()
{
  return &protocol witness table for ListStyleContent;
}

uint64_t sub_186F9DA98(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for ListStyleWriter(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for ListStyleWriter<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t sub_186F9DAF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool?> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool?>)
  {
    type metadata accessor for Bool?();
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool?>);
  }
}

void type metadata accessor for Bool?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Bool?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Bool?);
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvedList(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;

  v3 = __dst;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = ~(unint64_t)(v7 & 0xF8) & 0xFFFFFFFFFFFFFFF8;
  v9 = ((v7 & 0xF8) + 23) & v8;
  if (*(_DWORD *)(v5 + 84))
    v10 = *(_QWORD *)(v5 + 64);
  else
    v10 = v6 + 1;
  if (v10 > v6)
    v6 = v10;
  if (v6 <= 8)
    v11 = 8;
  else
    v11 = v6;
  v12 = v11 + v9 + 1;
  if ((v7 & 0x1000F8) != 0 || v12 > 0x18)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v14 + v9);
    swift_retain();
  }
  else
  {
    v15 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v16 = *v15;
    if ((unint64_t)*v15 < 0xFFFFFFFF)
    {
      memcpy(__dst, a2, v12);
    }
    else
    {
      *__dst = *a2;
      v17 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
      *v17 = v16;
      v18 = (_QWORD *)(((unint64_t)v17 + 15) & v8);
      v19 = (_QWORD *)(((unint64_t)v15 + 15) & v8);
      v20 = *((unsigned __int8 *)v19 + v11);
      swift_retain();
      swift_retain();
      if (v20 >= 3)
      {
        if (v11 <= 3)
          v21 = v11;
        else
          v21 = 4;
        __asm { BR              X11 }
      }
      if (v20 == 2)
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(v18, v19, v4);
        v22 = 2;
LABEL_30:
        *((_BYTE *)v18 + v11) = v22;
        return v3;
      }
      if (v20 == 1)
      {
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v19, 1, v4))
        {
          memcpy(v18, v19, v10);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(v18, v19, v4);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v18, 0, 1, v4);
        }
        v22 = 1;
        goto LABEL_30;
      }
      *v18 = *v19;
      *((_BYTE *)v18 + v11) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return v3;
}

_QWORD *initializeWithTake for ResolvedList(_QWORD *__dst, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 84);
  v8 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  v9 = ~v8;
  v10 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v10;
  if ((unint64_t)*v10 < 0xFFFFFFFF)
  {
    v20 = (v8 + 16) & v9;
    if (v7)
      v21 = *(_QWORD *)(v5 + 64);
    else
      v21 = v6 + 1;
    if (v21 > v6)
      v6 = v21;
    if (v6 <= 8)
      v6 = 8;
    memcpy(__dst, a2, v6 + v20 + 1);
  }
  else
  {
    *__dst = *a2;
    v12 = v7 == 0;
    v13 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v13 = v11;
    v14 = (_QWORD *)(((unint64_t)v13 + v8 + 8) & v9);
    v15 = (_QWORD *)(((unint64_t)v10 + v8 + 8) & v9);
    if (v12)
      v16 = v6 + 1;
    else
      v16 = v6;
    if (v16 > v6)
      v6 = v16;
    if (v6 <= 8)
      v17 = 8;
    else
      v17 = v6;
    v18 = *((unsigned __int8 *)v15 + v17);
    if (v18 >= 3)
    {
      if (v17 <= 3)
        v19 = v17;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    if (v18 == 2)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(v14, v15, v4);
      v22 = 2;
LABEL_31:
      *((_BYTE *)v14 + v17) = v22;
      return __dst;
    }
    if (v18 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v15, 1, v4))
      {
        memcpy(v14, v15, v16);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(v14, v15, v4);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
      }
      v22 = 1;
      goto LABEL_31;
    }
    *v14 = *v15;
    *((_BYTE *)v14 + v17) = 0;
  }
  return __dst;
}

_QWORD *assignWithTake for ResolvedList(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  uint64_t v38;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_DWORD *)(v6 + 80) & 0xF8;
  v10 = v9 | 7;
  v11 = ~(v9 | 7);
  v12 = (v9 + 23) & v11;
  v13 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (unint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  v15 = *v14;
  if (*v13 < 0xFFFFFFFFuLL)
  {
    if (v15 >= 0xFFFFFFFF)
    {
      *__dst = *__src;
      *v13 = *v14;
      v16 = (_QWORD *)(((unint64_t)v13 + v10 + 8) & v11);
      v17 = (_QWORD *)(((unint64_t)v14 + v10 + 8) & v11);
      if (v8)
        v18 = v7;
      else
        v18 = v7 + 1;
      if (v18 <= v7)
        v23 = v7;
      else
        v23 = v18;
      if (v23 <= 8)
        v20 = 8;
      else
        v20 = v23;
      v24 = *((unsigned __int8 *)v17 + v20);
      if (v24 >= 3)
      {
        if (v20 <= 3)
          v25 = v20;
        else
          v25 = 4;
        __asm { BR              X12 }
      }
      if (v24 != 2)
      {
        if (v24 == 1)
        {
          v33 = v5;
          if (!(*(unsigned int (**)(_QWORD *, uint64_t))(v6 + 48))(v17, 1))
          {
LABEL_81:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(v16, v17, v33);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v33);
            goto LABEL_82;
          }
LABEL_64:
          memcpy(v16, v17, v18);
LABEL_82:
          v36 = 1;
LABEL_86:
          *((_BYTE *)v16 + v20) = v36;
          return __dst;
        }
        goto LABEL_83;
      }
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(v16, v17, v5);
LABEL_85:
      v36 = 2;
      goto LABEL_86;
    }
    if (v8)
      v31 = *(_QWORD *)(v6 + 64);
    else
      v31 = v7 + 1;
    if (v31 <= v7)
      v31 = *(_QWORD *)(v6 + 64);
    if (v31 <= 8)
      v31 = 8;
    v32 = v31 + v12;
    goto LABEL_71;
  }
  v38 = v5;
  if (v15 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    v26 = ((unint64_t)v13 + v10 + 8) & v11;
    if (v8)
      v27 = v7;
    else
      v27 = v7 + 1;
    if (v27 <= v7)
      v27 = v7;
    if (v27 <= 8)
      v28 = 8;
    else
      v28 = v27;
    v29 = *(unsigned __int8 *)(v26 + v28);
    if (v29 >= 3)
    {
      if (v28 <= 3)
        v30 = v28;
      else
        v30 = 4;
      __asm { BR              X12 }
    }
    if (v29 == 2)
      goto LABEL_68;
    if (v29 != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_70;
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v26, 1, v38))
LABEL_68:
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v26, v38);
LABEL_70:
    v32 = v28 + v12;
LABEL_71:
    memcpy(__dst, __src, v32 + 1);
    return __dst;
  }
  *__dst = *__src;
  swift_release();
  *v13 = *v14;
  swift_release();
  v16 = (_QWORD *)(((unint64_t)v13 + v10 + 8) & v11);
  v17 = (_QWORD *)(((unint64_t)v14 + v10 + 8) & v11);
  if (v16 != v17)
  {
    if (v8)
      v18 = v7;
    else
      v18 = v7 + 1;
    if (v18 <= v7)
      v19 = v7;
    else
      v19 = v18;
    if (v19 <= 8)
      v20 = 8;
    else
      v20 = v19;
    v21 = *((unsigned __int8 *)v16 + v20);
    if (v21 >= 3)
    {
      if (v20 <= 3)
        v22 = v20;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    if (v21 == 2)
      goto LABEL_72;
    if (v21 == 1)
    {
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(v16, 1, v38))
LABEL_72:
        (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v16, v38);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v34 = *((unsigned __int8 *)v17 + v20);
    if (v34 >= 3)
    {
      if (v20 <= 3)
        v35 = v20;
      else
        v35 = 4;
      __asm { BR              X12 }
    }
    v33 = v38;
    if (v34 != 2)
    {
      if (v34 == 1)
      {
        if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(v17, 1, v38))
          goto LABEL_81;
        goto LABEL_64;
      }
LABEL_83:
      *v16 = *v17;
      *((_BYTE *)v16 + v20) = 0;
      return __dst;
    }
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(v16, v17, v38);
    goto LABEL_85;
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for ResolvedList(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int v10;
  int v11;
  unint64_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (*(_DWORD *)(v3 + 84))
    v5 = *(_QWORD *)(v3 + 64);
  else
    v5 = v4 + 1;
  if (v5 <= v4)
    v5 = *(_QWORD *)(v3 + 64);
  if (v5 <= 8)
    v5 = 8;
  if (!a2)
    return 0;
  if (a2 < 0x7FFFFFFF)
    goto LABEL_26;
  v6 = v5
     + ((unsigned __int16)((*(_WORD *)(v3 + 80) & 0xF8) + 23) & (unsigned __int16)~(*(_WORD *)(v3 + 80) & 0xF8) & 0x1F8)
     + 1;
  v7 = 8 * v6;
  if (v6 > 3)
    goto LABEL_11;
  v10 = (a2 - 2147483646 + ~(-1 << v7)) >> v7;
  if (v10 > 0xFFFE)
  {
    v8 = *(_DWORD *)(a1 + v6);
    if (v8)
      goto LABEL_19;
LABEL_26:
    v12 = *(_QWORD *)((a1 + 15) & 0xFFFFFFFFFFFFF8);
    if (v12 >= 0xFFFFFFFF)
      LODWORD(v12) = -1;
    if ((v12 + 1) >= 2)
      return v12;
    else
      return 0;
  }
  if (v10 > 0xFE)
  {
    v8 = *(unsigned __int16 *)(a1 + v6);
    if (*(_WORD *)(a1 + v6))
      goto LABEL_19;
    goto LABEL_26;
  }
  if (!v10)
    goto LABEL_26;
LABEL_11:
  v8 = *(unsigned __int8 *)(a1 + v6);
  if (!*(_BYTE *)(a1 + v6))
    goto LABEL_26;
LABEL_19:
  v11 = (v8 - 1) << v7;
  if (v6 > 3)
    v11 = 0;
  if (!(_DWORD)v6)
    return (v11 + 0x7FFFFFFF);
  if (v6 > 3)
    LODWORD(v6) = 4;
  return ((uint64_t (*)(void))((char *)&loc_186F9E65C + 4 * byte_187BFC9CA[(v6 - 1)]))();
}

void storeEnumTagSinglePayload for ResolvedList(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 84) == 0;
  v8 = (unsigned __int16)((*(_WORD *)(v5 + 80) & 0xF8) + 23) & (unsigned __int16)~(*(_WORD *)(v5 + 80) & 0xF8) & 0x1F8;
  if (v7)
    v9 = v6 + 1;
  else
    v9 = v6;
  if (v9 > v6)
    v6 = v9;
  if (v6 <= 8)
    v6 = 8;
  v10 = v6 + v8 + 1;
  if (a3 < 0x7FFFFFFF)
  {
    v11 = 0u;
  }
  else if (v10 <= 3)
  {
    v13 = (a3 - 2147483646 + ~(-1 << (8 * v10))) >> (8 * v10);
    if (v13 > 0xFFFE)
    {
      v11 = 4u;
    }
    else if (v13 >= 0xFF)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 != 0;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0x7FFFFFFE)
    __asm { BR              X10 }
  v12 = a2 - 0x7FFFFFFF;
  if (v10 < 4)
  {
    if ((_DWORD)v10)
    {
      v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *a1 = v14;
        *((_BYTE *)a1 + 2) = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *a1 = v14;
      }
      else
      {
        *(_BYTE *)a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v10);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

_QWORD *initializeBufferWithCopyOfBuffer for _ListStyleConfiguration(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(uint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  if (v7 <= 7 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0 && v8 <= 0x18)
  {
    v12 = ~v7;
    v13 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v13 + v7 + 8) & v12))
      {
LABEL_14:
        memcpy(__dst, __src, v8);
        return __dst;
      }
    }
    else
    {
      v14 = *v13;
      if ((unint64_t)*v13 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      if ((_DWORD)v14 != -1)
        goto LABEL_14;
    }
    *__dst = *__src;
    v15 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v13;
    v16 = ((unint64_t)v15 + v7 + 8) & v12;
    v17 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v17(v16, ((unint64_t)v13 + v7 + 8) & v12, v5);
    return __dst;
  }
  v11 = *__src;
  *__dst = *__src;
  __dst = (_QWORD *)(v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  swift_retain();
  return __dst;
}

uint64_t destroy for _ListStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = ~v4;
  v6 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v3 + 48))(((unint64_t)v6 + v4 + 8) & v5);
    if ((_DWORD)result)
      return result;
LABEL_7:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(((unint64_t)v6 + v4 + 8) & v5, v2);
  }
  v7 = *v6;
  if ((unint64_t)*v6 >= 0xFFFFFFFF)
    LODWORD(v7) = -1;
  result = (v7 + 1);
  if ((_DWORD)v7 == -1)
    goto LABEL_7;
  return result;
}

_QWORD *initializeWithCopy for _ListStyleConfiguration(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void (*v14)(uint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) == 0)
  {
    v11 = *v10;
    if ((unint64_t)*v10 >= 0xFFFFFFFF)
      LODWORD(v11) = -1;
    if ((_DWORD)v11 != -1)
      goto LABEL_5;
LABEL_7:
    *__dst = *__src;
    v12 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    v13 = ((unint64_t)v12 + v7 + 8) & v8;
    v14 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v14(v13, ((unint64_t)v10 + v7 + 8) & v8, v5);
    return __dst;
  }
  if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v10 + v7 + 8) & v8))
    goto LABEL_7;
LABEL_5:
  memcpy(__dst, __src, ((v7 + 16) & ~v7) + v9);
  return __dst;
}

_QWORD *assignWithCopy for _ListStyleConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t (*v15)(unint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(unint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ~v8;
  v10 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
  v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0x80000000) != 0)
  {
    v20 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
    v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    v19 = v15(((unint64_t)v11 + v8 + 8) & v9, v7, v5);
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v4 = a1;
    v14 = v15(((unint64_t)v12 + v8 + 8) & v9, v7, v5);
    v10 = v20;
    if (!v19)
    {
LABEL_5:
      if (!v14)
      {
        *v4 = *a2;
        swift_retain();
        swift_release();
        *v11 = *v12;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24))(((unint64_t)v11 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v5);
        return v4;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v11 + v8 + 8) & v9, v5);
      goto LABEL_9;
    }
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v13) = -1;
    v14 = v13 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v14)
  {
    *v4 = *a2;
    *v11 = *v12;
    v16 = ((unint64_t)v12 + v8 + 8) & v9;
    v17 = *(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v17(((unint64_t)v11 + v8 + 8) & v9, v16, v5);
    return v4;
  }
LABEL_9:
  memcpy(v4, a2, v10);
  return v4;
}

_QWORD *initializeWithTake for _ListStyleConfiguration(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) == 0)
  {
    v11 = *v10;
    if ((unint64_t)*v10 >= 0xFFFFFFFF)
      LODWORD(v11) = -1;
    if ((_DWORD)v11 != -1)
      goto LABEL_5;
LABEL_7:
    *__dst = *__src;
    v12 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v12 + v7 + 8) & v8, ((unint64_t)v10 + v7 + 8) & v8, v5);
    return __dst;
  }
  if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v10 + v7 + 8) & v8))
    goto LABEL_7;
LABEL_5:
  memcpy(__dst, __src, ((v7 + 16) & ~v7) + v9);
  return __dst;
}

_QWORD *assignWithTake for _ListStyleConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t (*v16)(unint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;

  v3 = a2;
  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ~v8;
  v10 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
  v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0x80000000) != 0)
  {
    v19 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
    v16 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    v18 = v16(((unint64_t)v11 + v8 + 8) & v9, v7, v5);
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v3 = a2;
    v4 = a1;
    v14 = v16(((unint64_t)v12 + v8 + 8) & v9, v7, v5);
    v10 = v19;
    if (!v18)
    {
LABEL_5:
      if (!v14)
      {
        *v4 = *v3;
        swift_release();
        *v11 = *v12;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(((unint64_t)v11 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v5);
        return v4;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v11 + v8 + 8) & v9, v5);
      goto LABEL_9;
    }
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v13) = -1;
    v14 = v13 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v14)
  {
    *v4 = *v3;
    *v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v11 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v5);
    return v4;
  }
LABEL_9:
  memcpy(v4, v3, v10);
  return v4;
}

uint64_t getEnumTagSinglePayload for _ListStyleConfiguration(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 - 1 >= a2)
    goto LABEL_24;
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 > 3)
    goto LABEL_7;
  v12 = (((1 << v9) + a2 - v6) >> v9) + 1;
  if (HIWORD(v12))
  {
    v10 = *(_DWORD *)(a1 + v8);
    if (v10)
      goto LABEL_15;
LABEL_24:
    v15 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      v17 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v7 + 8) & ~v7);
    }
    else
    {
      v16 = *v15;
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      v17 = v16 + 1;
    }
    if (v17 >= 2)
      return v17 - 1;
    else
      return 0;
  }
  if (v12 > 0xFF)
  {
    v10 = *(unsigned __int16 *)(a1 + v8);
    if (*(_WORD *)(a1 + v8))
      goto LABEL_15;
    goto LABEL_24;
  }
  if (v12 < 2)
    goto LABEL_24;
LABEL_7:
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_24;
LABEL_15:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 <= 3)
      v14 = ((v7 + 16) & ~(_DWORD)v7) + *(_DWORD *)(v4 + 64);
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  return (v13 + v6);
}

void storeEnumTagSinglePayload for _ListStyleConfiguration(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = v6 - 1;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64);
  if (v6 - 1 >= a3)
  {
    v10 = 0u;
  }
  else
  {
    v10 = 1u;
    if (v9 <= 3)
    {
      v11 = (((v10 << (8 * v9)) + a3 - v6) >> (8 * v9)) + 1;
      if (HIWORD(v11))
      {
        v10 = 4u;
        if (v7 >= a2)
          goto LABEL_21;
      }
      else
      {
        if (v11 >= 0x100)
          v10 = 2;
        else
          v10 = v11 > 1;
        if (v7 >= a2)
LABEL_21:
          __asm { BR              X14 }
      }
LABEL_14:
      v12 = a2 - v6;
      if (v9 < 4)
      {
        if ((_DWORD)v9)
        {
          v13 = v12 & ~(-1 << (8 * v9));
          bzero(a1, v9);
          if ((_DWORD)v9 == 3)
          {
            *a1 = v13;
            *((_BYTE *)a1 + 2) = BYTE2(v13);
          }
          else if ((_DWORD)v9 == 2)
          {
            *a1 = v13;
          }
          else
          {
            *(_BYTE *)a1 = v13;
          }
        }
      }
      else
      {
        bzero(a1, ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64));
        *(_DWORD *)a1 = v12;
      }
      __asm { BR              X10 }
    }
  }
  if (v7 >= a2)
    goto LABEL_21;
  goto LABEL_14;
}

void sub_186F9F3C8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x186F9F434);
}

void sub_186F9F3D0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F9F434);
}

void sub_186F9F3D8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x186F9F434);
}

void sub_186F9F408()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x186F9F434);
}

void sub_186F9F418()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x186F9F434);
}

void sub_186F9F420()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x186F9F434);
}

uint64_t getEnumTagSinglePayload for ListStyleWriter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_186F9F4FC + 4 * byte_187BFC9EA[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ListStyleWriter(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in ListStyleWriter<A>()
{
  return &protocol witness table for ListStyleWriter<A>;
}

unint64_t instantiation function for generic protocol witness table for AnyListStyleContext(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AnyListStyleContext and conformance AnyListStyleContext();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyListStyleContext and conformance AnyListStyleContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyListStyleContext and conformance AnyListStyleContext;
  if (!lazy protocol witness table cache variable for type AnyListStyleContext and conformance AnyListStyleContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyListStyleContext, &type metadata for AnyListStyleContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyListStyleContext and conformance AnyListStyleContext);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in ListStyleContent()
{
  return &protocol witness table for ListStyleContent;
}

_UNKNOWN **base witness table accessor for View in ResolvedList<A>()
{
  return &protocol witness table for ResolvedList<A>;
}

unint64_t instantiation function for generic protocol witness table for ListStyleContent(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ListStyleContent and conformance ListStyleContent();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ListStyleContent and conformance ListStyleContent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListStyleContent and conformance ListStyleContent;
  if (!lazy protocol witness table cache variable for type ListStyleContent and conformance ListStyleContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListStyleContent, &type metadata for ListStyleContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListStyleContent and conformance ListStyleContent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListStyleContent and conformance ListStyleContent;
  if (!lazy protocol witness table cache variable for type ListStyleContent and conformance ListStyleContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListStyleContent, &type metadata for ListStyleContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListStyleContent and conformance ListStyleContent);
  }
  return result;
}

BOOL specialized static ListStyleContext.accepts<A>(_:at:)(ValueMetadata *a1, ValueMetadata *a2)
{
  return a2 == &type metadata for AnyListStyleContext || a2 == a1;
}

unint64_t lazy protocol witness table accessor for type ListStyleInput and conformance ListStyleInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListStyleInput and conformance ListStyleInput;
  if (!lazy protocol witness table cache variable for type ListStyleInput and conformance ListStyleInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListStyleInput, &unk_1E1AB8598);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListStyleInput and conformance ListStyleInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListStyleInput and conformance ListStyleInput;
  if (!lazy protocol witness table cache variable for type ListStyleInput and conformance ListStyleInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListStyleInput, &unk_1E1AB8598);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListStyleInput and conformance ListStyleInput);
  }
  return result;
}

void type metadata accessor for _ListValue.Init1()
{
  JUMPOUT(0x18D75FF28);
}

BOOL specialized static AnyListStyleContext.accepts<A>(_:at:)(uint64_t a1)
{
  uint64_t v2;

  if (swift_conformsToProtocol2())
    v2 = a1;
  else
    v2 = 0;
  return v2 != 0;
}

uint64_t type metadata completion function for _ListValue.Init1()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ListValue.Init1(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 | 3uLL) > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 4) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~(v5 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 4) & ~v5, ((unint64_t)a2 + v5 + 4) & ~v5);
  }
  return v3;
}

uint64_t destroy for _ListValue.Init1(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_DWORD *initializeWithCopy for _ListValue.Init1(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *assignWithCopy for _ListValue.Init1(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *initializeWithTake for _ListValue.Init1(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *assignWithTake for _ListValue.Init1(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _ListValue.Init1(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 4) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 4) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_186F9FBCC + 4 * byte_187BFC9F8[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for _ListValue.Init1(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 4) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 4) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void *type metadata accessor for ListStyleInput()
{
  return &unk_1E1AB8598;
}

void base witness table accessor for _AttributeBody in _ListValue<A, B>.Init1()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t getEnumTagSinglePayload for AnyStyle(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 20))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 20) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata completion function for AppIntentExecutingLocation()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AppIntentExecutingLocation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  id v17;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 48 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)v11;
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(_BYTE *)(v11 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v11, v13, v14);
    *(_QWORD *)v10 = v12;
    *(_QWORD *)(v10 + 8) = v13;
    *(_BYTE *)(v10 + 16) = v14;
    v15 = *(void **)(v11 + 24);
    *(_QWORD *)(v10 + 24) = v15;
    v16 = *(_QWORD *)(v11 + 40);
    *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
    *(_QWORD *)(v10 + 40) = v16;
    v17 = v15;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AppIntentExecutingLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));

  return swift_release();
}

uint64_t outlined consume of Environment<AppIntentExecutor?>.Content(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(result);
  else
    return swift_release();
}

uint64_t initializeWithCopy for AppIntentExecutingLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  id v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_BYTE *)(v8 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v8, v10, v11);
  *(_QWORD *)v7 = v9;
  *(_QWORD *)(v7 + 8) = v10;
  *(_BYTE *)(v7 + 16) = v11;
  v12 = *(void **)(v8 + 24);
  *(_QWORD *)(v7 + 24) = v12;
  v13 = *(_QWORD *)(v8 + 40);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  *(_QWORD *)(v7 + 40) = v13;
  v14 = v12;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AppIntentExecutingLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_BYTE *)(v8 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v8, v10, v11);
  v12 = *(_QWORD *)v7;
  v13 = *(_QWORD *)(v7 + 8);
  v14 = *(_BYTE *)(v7 + 16);
  *(_QWORD *)v7 = v9;
  *(_QWORD *)(v7 + 8) = v10;
  *(_BYTE *)(v7 + 16) = v11;
  outlined consume of Environment<AppIntentExecutor?>.Content(v12, v13, v14);
  v15 = *(void **)(v8 + 24);
  v16 = *(void **)(v7 + 24);
  *(_QWORD *)(v7 + 24) = v15;
  v17 = v15;

  v18 = *(_QWORD *)(v8 + 40);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  *(_QWORD *)(v7 + 40) = v18;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AppIntentExecutingLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v10 = v8[1];
  v9 = v8[2];
  *v7 = *v8;
  v7[1] = v10;
  v7[2] = v9;
  return a1;
}

uint64_t assignWithTake for AppIntentExecutingLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v6) = *(_BYTE *)(v8 + 16);
  v9 = *(_QWORD *)v7;
  v10 = *(_QWORD *)(v7 + 8);
  v11 = *(_BYTE *)(v7 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_BYTE *)(v7 + 16) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v9, v10, v11);
  v12 = *(void **)(v7 + 24);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);

  *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppIntentExecutingLocation(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0x18);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 48) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_186FA0364 + 4 * byte_187BFCE70[v10]))();
  }
}

void storeEnumTagSinglePayload for AppIntentExecutingLocation(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFD0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFD0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 48);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_186FA04DC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x186FA0564);
}

void sub_186FA04E4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x186FA04ECLL);
  JUMPOUT(0x186FA0564);
}

void sub_186FA0530()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x186FA0564);
}

void sub_186FA0538()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x186FA0564);
}

uint64_t sub_186FA0540(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x186FA054CLL);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 24) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x186FA0564);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for AppIntentExecutingLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AppIntentExecutingLocation);
}

uint64_t protocol witness for Location.wasRead.setter in conformance AppIntentExecutingLocation<A>(uint64_t a1, uint64_t a2)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2);
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance AppIntentExecutingLocation<A>(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 1;
  return protocol witness for Location.wasRead.modify in conformance AppIntentExecutingLocation<A>;
}

uint64_t protocol witness for Location.wasRead.modify in conformance AppIntentExecutingLocation<A>(uint64_t a1)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(_QWORD *)(a1 + 8));
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance AppIntentExecutingLocation<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized AppIntentExecutingLocation.set(_:transaction:)(a3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AppIntentExecutingLocation<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static AppIntentExecutingLocation.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

void base witness table accessor for Equatable in AppIntentExecutingLocation<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t static AppIntentExecutingLocation.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  void (*v17)(_BYTE *, uint64_t, uint64_t);
  uint64_t v18;
  __int128 *v19;
  char v20;
  uint64_t v21;
  _BYTE *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_BYTE *, uint64_t);
  _BYTE v28[16];
  _BYTE v29[16];
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v4 = a3;
  v41 = *MEMORY[0x1E0C80C00];
  v7 = type metadata accessor for AppIntentExecutingLocation(0, a3, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = &v28[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v28[-v14];
  v30 = v4;
  v31 = a2;
  v32 = 3;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)v29, v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v16);
  LODWORD(v4) = v37;
  v17 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16);
  v17(v15, a1, v7);
  v17(v11, a2, v7);
  if ((_DWORD)v4 == 1)
  {
    v18 = *(int *)(v7 + 28);
    v19 = (__int128 *)&v15[v18];
    v20 = v15[v18 + 16];
    v21 = *(_QWORD *)&v15[v18 + 40];
    v22 = &v11[v18];
    v23 = v22[16];
    v24 = *((_QWORD *)v22 + 5);
    v37 = *v19;
    v38 = v20;
    v39 = *(__int128 *)((char *)v19 + 24);
    v40 = v21;
    v33 = *(_OWORD *)v22;
    v34 = v23;
    v35 = *(_OWORD *)(v22 + 24);
    v36 = v24;
    v25 = AGCompareValues();
  }
  else
  {
    v25 = 0;
  }
  v26 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v26(v11, v7);
  v26(v15, v7);
  return v25;
}

uint64_t specialized AppIntentExecutingLocation.set(_:transaction:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1 + *(int *)(a1 + 28) + 32))();
}

_UNKNOWN **associated type witness table accessor for ControlWidgetConfiguration.Body : ControlWidgetConfiguration in EmptyControlWidgetConfiguration()
{
  return &protocol witness table for Never;
}

ValueMetadata *type metadata accessor for EmptyControlWidgetConfiguration()
{
  return &type metadata for EmptyControlWidgetConfiguration;
}

void UIKitKeyPressResponder.pressesBegan(_:with:)(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  char v16;
  Class isa;
  objc_super v18;

  v3 = v2;
  if (a2)
  {
    v6 = one-time initialization token for monitor;
    v7 = a2;
    if (v6 != -1)
      swift_once();
    v8 = static DefaultModifierKeySource.monitor;
    v9 = specialized EventModifiers.init(_:)((int)objc_msgSend(v7, sel_modifierFlags));
    v10 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = v9;
    ModifierKeyMonitor.value.didset(v10);

  }
  if (!swift_weakLoadStrong())
    goto LABEL_10;
  v11 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v12 = v3;
  v13 = specialized Sequence.reduce<A>(into:_:)(v11, a1, 0, (uint64_t)v12);

  if (!*(_QWORD *)(v13 + 16))
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v14 = EventBindingManager.send(_:)();
  v15 = specialized Set.init<A>(_:)(v13);
  v16 = specialized static Set.== infix(_:_:)(v14, v15);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
LABEL_10:
    type metadata accessor for UIPress();
    lazy protocol witness table accessor for type UIPress and conformance NSObject();
    isa = Set._bridgeToObjectiveC()().super.isa;
    v18.receiver = v3;
    v18.super_class = (Class)type metadata accessor for UIKitKeyPressResponder();
    objc_msgSendSuper2(&v18, sel_pressesBegan_withEvent_, isa, a2);

  }
}

void UIKitKeyPressResponder.pressesChanged(_:with:)(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  char v16;
  Class isa;
  objc_super v18;

  v3 = v2;
  if (a2)
  {
    v6 = one-time initialization token for monitor;
    v7 = a2;
    if (v6 != -1)
      swift_once();
    v8 = static DefaultModifierKeySource.monitor;
    v9 = specialized EventModifiers.init(_:)((int)objc_msgSend(v7, sel_modifierFlags));
    v10 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = v9;
    ModifierKeyMonitor.value.didset(v10);

  }
  if (!swift_weakLoadStrong())
    goto LABEL_10;
  v11 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v12 = v3;
  v13 = specialized Sequence.reduce<A>(into:_:)(v11, a1, 1, (uint64_t)v12);

  if (!*(_QWORD *)(v13 + 16))
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v14 = EventBindingManager.send(_:)();
  v15 = specialized Set.init<A>(_:)(v13);
  v16 = specialized static Set.== infix(_:_:)(v14, v15);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
LABEL_10:
    type metadata accessor for UIPress();
    lazy protocol witness table accessor for type UIPress and conformance NSObject();
    isa = Set._bridgeToObjectiveC()().super.isa;
    v18.receiver = v3;
    v18.super_class = (Class)type metadata accessor for UIKitKeyPressResponder();
    objc_msgSendSuper2(&v18, sel_pressesChanged_withEvent_, isa, a2);

  }
}

void UIKitKeyPressResponder.pressesEnded(_:with:)(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  char v16;
  Class isa;
  objc_super v18;

  v3 = v2;
  if (a2)
  {
    v6 = one-time initialization token for monitor;
    v7 = a2;
    if (v6 != -1)
      swift_once();
    v8 = static DefaultModifierKeySource.monitor;
    v9 = specialized EventModifiers.init(_:)((int)objc_msgSend(v7, sel_modifierFlags));
    v10 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = v9;
    ModifierKeyMonitor.value.didset(v10);

  }
  if (!swift_weakLoadStrong())
    goto LABEL_10;
  v11 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v12 = v3;
  v13 = specialized Sequence.reduce<A>(into:_:)(v11, a1, 2, (uint64_t)v12);

  if (!*(_QWORD *)(v13 + 16))
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v14 = EventBindingManager.send(_:)();
  v15 = specialized Set.init<A>(_:)(v13);
  v16 = specialized static Set.== infix(_:_:)(v14, v15);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
LABEL_10:
    type metadata accessor for UIPress();
    lazy protocol witness table accessor for type UIPress and conformance NSObject();
    isa = Set._bridgeToObjectiveC()().super.isa;
    v18.receiver = v3;
    v18.super_class = (Class)type metadata accessor for UIKitKeyPressResponder();
    objc_msgSendSuper2(&v18, sel_pressesEnded_withEvent_, isa, a2);

  }
}

void UIKitKeyPressResponder.pressesCancelled(_:with:)(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  char v16;
  Class isa;
  objc_super v18;

  v3 = v2;
  if (a2)
  {
    v6 = one-time initialization token for monitor;
    v7 = a2;
    if (v6 != -1)
      swift_once();
    v8 = static DefaultModifierKeySource.monitor;
    v9 = specialized EventModifiers.init(_:)((int)objc_msgSend(v7, sel_modifierFlags));
    v10 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = v9;
    ModifierKeyMonitor.value.didset(v10);

  }
  if (!swift_weakLoadStrong())
    goto LABEL_10;
  v11 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v12 = v3;
  v13 = specialized Sequence.reduce<A>(into:_:)(v11, a1, 3, (uint64_t)v12);

  if (!*(_QWORD *)(v13 + 16))
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v14 = EventBindingManager.send(_:)();
  v15 = specialized Set.init<A>(_:)(v13);
  v16 = specialized static Set.== infix(_:_:)(v14, v15);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
LABEL_10:
    type metadata accessor for UIPress();
    lazy protocol witness table accessor for type UIPress and conformance NSObject();
    isa = Set._bridgeToObjectiveC()().super.isa;
    v18.receiver = v3;
    v18.super_class = (Class)type metadata accessor for UIKitKeyPressResponder();
    objc_msgSendSuper2(&v18, sel_pressesCancelled_withEvent_, isa, a2);

  }
}

uint64_t @objc UIKitKeyPressResponder.pressesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, void *))
{
  uint64_t v8;
  id v9;
  id v10;

  type metadata accessor for UIPress();
  lazy protocol witness table accessor for type UIPress and conformance NSObject();
  v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = a4;
  v10 = a1;
  a5(v8, a4);

  return swift_bridgeObjectRelease();
}

id UIKitKeyPressResponder.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIKitKeyPressResponder();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t type metadata accessor for UIPress()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIPress;
  if (!lazy cache variable for type metadata for UIPress)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIPress);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UIPress and conformance NSObject()
{
  unint64_t result;
  unint64_t v1;

  result = lazy protocol witness table cache variable for type UIPress and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UIPress and conformance NSObject)
  {
    v1 = type metadata accessor for UIPress();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIPress and conformance NSObject);
  }
  return result;
}

uint64_t specialized Sequence.reduce<A>(into:_:)(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  unint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t result;
  _QWORD v48[4];
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  __int128 v55;
  ValueMetadata *v56;
  unint64_t v57;
  _QWORD *v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _OWORD v68[6];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;

  v52 = a4;
  v53 = a3;
  v4 = a2;
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for UIPress();
    lazy protocol witness table accessor for type UIPress and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    v4 = v70;
    v50 = v71;
    v6 = v72;
    v7 = v73;
    v8 = v74;
  }
  else
  {
    v9 = -1 << *(_BYTE *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 56);
    v50 = a2 + 56;
    v11 = ~v9;
    v12 = -v9;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v8 = v13 & v10;
    swift_bridgeObjectRetain();
    v6 = v11;
    v7 = 0;
  }
  v48[0] = v6;
  v48[3] = v4 & 0x7FFFFFFFFFFFFFFFLL;
  v49 = (unint64_t)(v6 + 64) >> 6;
  v48[2] = MEMORY[0x1E0DEE9B0] + 8;
  v51 = v4;
  if ((v4 & 0x8000000000000000) == 0)
    goto LABEL_13;
LABEL_10:
  v14 = __CocoaSet.Iterator.next()();
  if (!v14)
    goto LABEL_46;
  *(_QWORD *)&v61 = v14;
  type metadata accessor for UIPress();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v15 = *(id *)&v68[0];
  swift_unknownObjectRelease();
  v16 = v7;
  v17 = v8;
  if (!v15)
    goto LABEL_46;
  while (1)
  {
    LOBYTE(v59) = v53;
    UIPress.resolve(phase:)((char *)&v59, (uint64_t)&v61);
    if (!*((_QWORD *)&v63 + 1))
    {
      outlined destroy of KeyEvent?((uint64_t)&v61);

      v7 = v16;
      v8 = v17;
      if (v4 < 0)
        goto LABEL_10;
      goto LABEL_13;
    }
    v54 = v17;
    v75 = v16;
    v68[4] = v65;
    v68[5] = v66;
    v69 = v67;
    v68[0] = v61;
    v68[1] = v62;
    v68[2] = v63;
    v68[3] = v64;
    swift_beginAccess();
    v22 = KeyEvent.Tracker.serial(for:)(v68);
    swift_endAccess();
    *((_QWORD *)&v62 + 1) = &type metadata for KeyEvent;
    v23 = lazy protocol witness table accessor for type KeyEvent and conformance KeyEvent();
    *(_QWORD *)&v63 = v23;
    *(_QWORD *)&v61 = swift_allocObject();
    outlined init with copy of KeyEvent((uint64_t)v68, v61 + 16);
    outlined init with take of OptionalBinaryInteger(&v61, (uint64_t)&v59);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v58 = a1;
    v26 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for KeyEvent, v22);
    v27 = a1[2];
    v28 = (v25 & 1) == 0;
    v29 = v27 + v28;
    if (__OFADD__(v27, v28))
    {
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    v30 = v25;
    if (a1[3] >= v29)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        a1 = v58;
        if ((v25 & 1) == 0)
          goto LABEL_42;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        a1 = v58;
        if ((v30 & 1) == 0)
          goto LABEL_42;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, isUniquelyReferenced_nonNull_native);
      v31 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for KeyEvent, v22);
      if ((v30 & 1) != (v32 & 1))
        goto LABEL_50;
      v26 = v31;
      a1 = v58;
      if ((v30 & 1) == 0)
      {
LABEL_42:
        v34 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v59, v60);
        v35 = MEMORY[0x1E0C80A78](v34, v34);
        v37 = (char *)v48 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v38 + 16))(v37, v35);
        v56 = &type metadata for KeyEvent;
        v57 = v23;
        v39 = swift_allocObject();
        *(_QWORD *)&v55 = v39;
        v40 = *((_OWORD *)v37 + 1);
        *(_OWORD *)(v39 + 16) = *(_OWORD *)v37;
        *(_OWORD *)(v39 + 32) = v40;
        *(_QWORD *)(v39 + 112) = *((_QWORD *)v37 + 12);
        v41 = *((_OWORD *)v37 + 5);
        *(_OWORD *)(v39 + 80) = *((_OWORD *)v37 + 4);
        *(_OWORD *)(v39 + 96) = v41;
        v42 = *((_OWORD *)v37 + 3);
        *(_OWORD *)(v39 + 48) = *((_OWORD *)v37 + 2);
        *(_OWORD *)(v39 + 64) = v42;
        a1[(v26 >> 6) + 8] |= 1 << v26;
        v43 = (_QWORD *)(a1[6] + 16 * v26);
        *v43 = &type metadata for KeyEvent;
        v43[1] = v22;
        outlined init with take of OptionalBinaryInteger(&v55, a1[7] + 40 * v26);
        v44 = a1[2];
        v45 = __OFADD__(v44, 1);
        v46 = v44 + 1;
        if (v45)
          goto LABEL_48;
        a1[2] = v46;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v59);
        goto LABEL_44;
      }
    }
    v33 = a1[7] + 40 * v26;
    __swift_destroy_boxed_opaque_existential_1(v33);
    outlined init with take of OptionalBinaryInteger(&v59, v33);
LABEL_44:
    swift_bridgeObjectRelease();
    outlined destroy of KeyEvent((uint64_t)v68);

    v7 = v75;
    v8 = v54;
    v4 = v51;
    if (v51 < 0)
      goto LABEL_10;
LABEL_13:
    if (!v8)
      break;
    v17 = (v8 - 1) & v8;
    v18 = __clz(__rbit64(v8)) | (v7 << 6);
    v16 = v7;
LABEL_31:
    v15 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v18);
    if (!v15)
      goto LABEL_46;
  }
  v19 = v7 + 1;
  if (__OFADD__(v7, 1))
    goto LABEL_49;
  if (v19 >= v49)
    goto LABEL_46;
  v20 = *(_QWORD *)(v50 + 8 * v19);
  v16 = v7 + 1;
  if (v20)
    goto LABEL_30;
  v16 = v7 + 2;
  if (v7 + 2 >= v49)
    goto LABEL_46;
  v20 = *(_QWORD *)(v50 + 8 * v16);
  if (v20)
    goto LABEL_30;
  v16 = v7 + 3;
  if (v7 + 3 >= v49)
    goto LABEL_46;
  v20 = *(_QWORD *)(v50 + 8 * v16);
  if (v20)
    goto LABEL_30;
  v16 = v7 + 4;
  if (v7 + 4 >= v49)
    goto LABEL_46;
  v20 = *(_QWORD *)(v50 + 8 * v16);
  if (v20)
    goto LABEL_30;
  v16 = v7 + 5;
  if (v7 + 5 >= v49)
    goto LABEL_46;
  v20 = *(_QWORD *)(v50 + 8 * v16);
  if (v20)
  {
LABEL_30:
    v17 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v16 << 6);
    goto LABEL_31;
  }
  v21 = v7 + 6;
  while (v49 != v21)
  {
    v20 = *(_QWORD *)(v50 + 8 * v21++);
    if (v20)
    {
      v16 = v21 - 1;
      goto LABEL_30;
    }
  }
LABEL_46:
  outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
  return (uint64_t)a1;
}

uint64_t outlined destroy of KeyEvent?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for KeyEvent?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for KeyEvent?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyEvent?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyEvent?);
  }
}

unint64_t lazy protocol witness table accessor for type KeyEvent and conformance KeyEvent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KeyEvent and conformance KeyEvent;
  if (!lazy protocol witness table cache variable for type KeyEvent and conformance KeyEvent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for KeyEvent, &type metadata for KeyEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyEvent and conformance KeyEvent);
  }
  return result;
}

uint64_t sub_186FA171C()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  return swift_deallocObject();
}

uint64_t outlined init with copy of KeyEvent(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for KeyEvent(a2, a1);
  return a2;
}

uint64_t outlined destroy of KeyEvent(uint64_t a1)
{
  destroy for KeyEvent(a1);
  return a1;
}

void static WindowLevel.normal.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowLevel.hash(into:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static WindowLevel.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowLevel.hashValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Scene.windowLevel(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type WindowLevel and conformance WindowLevel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WindowLevel and conformance WindowLevel;
  if (!lazy protocol witness table cache variable for type WindowLevel and conformance WindowLevel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowLevel, &type metadata for WindowLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowLevel and conformance WindowLevel);
  }
  return result;
}

ValueMetadata *type metadata accessor for WindowLevel()
{
  return &type metadata for WindowLevel;
}

uint64_t sub_186FA1874(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t storeEnumTagSinglePayload for WindowLevel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_186FA18C8 + 4 * byte_187BFCFD1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_186FA18FC + 4 * asc_187BFCFCC[v4]))();
}

uint64_t sub_186FA18FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186FA1904(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186FA190CLL);
  return result;
}

uint64_t sub_186FA1918(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186FA1920);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_186FA1924(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186FA192C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WindowLevel.Storage()
{
  return &type metadata for WindowLevel.Storage;
}

unint64_t lazy protocol witness table accessor for type WindowLevel.Storage and conformance WindowLevel.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WindowLevel.Storage and conformance WindowLevel.Storage;
  if (!lazy protocol witness table cache variable for type WindowLevel.Storage and conformance WindowLevel.Storage)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowLevel.Storage, &type metadata for WindowLevel.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowLevel.Storage and conformance WindowLevel.Storage);
  }
  return result;
}

void static WindowLevel.automatic.getter()
{
  static WindowLevel.normal.getter();
}

void static WindowLevel.floating.getter()
{
  static WindowLevel.normal.getter();
}

void static WindowLevel.desktop.getter()
{
  static WindowLevel.normal.getter();
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void _TestApp.run()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  __CFString *v31;
  Class isa;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t (**v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v43;
  char **v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55[16];
  __int128 *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;

  type metadata accessor for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0(0, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  v51 = *(_QWORD *)(v0 - 8);
  v52 = v0;
  MEMORY[0x1E0C80A78](v0, v1);
  v49 = (char *)&v45 - v2;
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  v4 = v3;
  v53 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v53 + 64);
  MEMORY[0x1E0C80A78](v3, v6);
  v54 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v45 - v9;
  type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  v48 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v48 + 64);
  MEMORY[0x1E0C80A78](v11, v13);
  v50 = (uint64_t)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v45 - v16;
  v18 = static CommandLine.arguments.getter();
  *(_QWORD *)&v59 = 0x746E616D65732D2DLL;
  *((_QWORD *)&v59 + 1) = 0xEB00000000736369;
  v56 = &v59;
  v19 = specialized BidirectionalCollection.lastIndex(where:)(partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)v55, v18);
  v21 = v20;
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
    goto LABEL_9;
  v22 = __OFADD__(v19, 1);
  v23 = v19 + 1;
  if (!v22)
  {
    v24 = *(_QWORD *)(static CommandLine.arguments.getter() + 16);
    swift_bridgeObjectRelease();
    if (v23 == v24)
    {
LABEL_9:
      v26._countAndFlagsBits = 0x74736574616CLL;
      v26._object = (void *)0xE600000000000000;
      _TestApp.setSemantics(_:)(v26);
      goto LABEL_11;
    }
    v25 = static CommandLine.arguments.getter();
    if ((v23 & 0x8000000000000000) != 0)
    {
LABEL_8:
      __break(1u);
      goto LABEL_9;
    }
    if (v23 < *(_QWORD *)(v25 + 16))
    {
      v27 = v25 + 16 * v23;
      v28 = *(_QWORD *)(v27 + 32);
      v29 = *(void **)(v27 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v30._countAndFlagsBits = v28;
      v30._object = v29;
      _TestApp.setSemantics(_:)(v30);
      swift_bridgeObjectRelease();
LABEL_11:
      v31 = (__CFString *)MEMORY[0x18D75CC88](0x6E614C656C707041, 0xEE00736567617567);
      isa = Array._bridgeToObjectiveC()().super.isa;
      CFPreferencesSetAppValue(v31, isa, (CFStringRef)*MEMORY[0x1E0C9B248]);

      _CTClearFontFallbacksCache();
      static Color.Resolved.legacyInterpolation.setter();
      _TestApp.RootView.init()();
      v57 = v59;
      v47 = v60;
      v58 = v60;
      lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView();
      View.truePreference<A>(_:)();
      swift_release();
      swift_release();
      static _TestApp.rootViewIdentifier.getter();
      _TestApp.RootView.init()();
      v47 = v59;
      v33 = *((_QWORD *)&v60 + 1);
      v46 = v60;
      v34 = v49;
      static _TestApp.comparisonViewIdentifier.getter();
      v36 = v51;
      v35 = v52;
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(&v10[*(int *)(v4 + 52)], v34, v52);
      *(_OWORD *)v10 = v47;
      *((_QWORD *)v10 + 2) = v46;
      *((_QWORD *)v10 + 3) = v33;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v34, v35);
      v37 = v50;
      outlined init with copy of TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>((uint64_t)v17, v50);
      v38 = v54;
      outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>((uint64_t)v10, v54, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
      v39 = (*(unsigned __int8 *)(v48 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
      v40 = (v12 + v39 + *(unsigned __int8 *)(v53 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
      v41 = swift_allocObject();
      outlined init with take of TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(v37, v41 + v39);
      outlined init with take of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(v38, v41 + v40);
      v42 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + ((v5 + v40 + 7) & 0xFFFFFFFFFFFFFFF8));
      *v42 = closure #1 in _TestApp.run();
      v42[1] = 0;
      v43 = static TestingSceneDelegate.connectCallback;
      static TestingSceneDelegate.connectCallback = partial apply for specialized closure #1 in runTestingApp<A, B>(rootView:comparisonView:didLaunch:);
      qword_1EDF00438 = v41;
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v43);
      type metadata accessor for TestingAppDelegate();
      v44 = (char **)MEMORY[0x18D75E2B4]();
      closure #1 in KitRendererCommon(_:)(v44);
    }
    __break(1u);
  }
  __break(1u);
  goto LABEL_8;
}

unint64_t lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _TestApp.RootView and conformance _TestApp.RootView;
  if (!lazy protocol witness table cache variable for type _TestApp.RootView and conformance _TestApp.RootView)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7A90], MEMORY[0x1E0CE7AA8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TestApp.RootView and conformance _TestApp.RootView);
  }
  return result;
}

void type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>)
  {
    type metadata accessor for <<opaque return type of View.truePreference<A>(_:)>>.0(255);
    type metadata accessor for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0(255, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v0 = type metadata accessor for TestIDView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>);
  }
}

void type metadata accessor for <<opaque return type of View.truePreference<A>(_:)>>.0(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!lazy cache variable for type metadata for <<opaque return type of View.truePreference<A>(_:)>>.0)
  {
    v2 = lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView();
    v5[0] = MEMORY[0x1E0CE7AA8];
    v5[1] = &type metadata for HostingGestureOverlayAuthorityKey;
    v5[2] = v2;
    v5[3] = &protocol witness table for HostingGestureOverlayAuthorityKey;
    v3 = MEMORY[0x18D75FF88](a1, v5, MEMORY[0x1E0CE6E48], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of View.truePreference<A>(_:)>>.0);
  }
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!lazy cache variable for type metadata for <<opaque return type of View.truePreference<A>(_:)>>.0)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE65E8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v5[0] = v2;
    v5[1] = &type metadata for ContainerBackgroundKeys.TransparentHost;
    v5[2] = lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    v5[3] = &protocol witness table for ContainerBackgroundKeys.TransparentHost;
    v3 = MEMORY[0x18D75FF88](a1, v5, MEMORY[0x1E0CE6E48], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of View.truePreference<A>(_:)>>.0);
  }
}

void type metadata accessor for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = MEMORY[0x18D75FF88](0);
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t closure #1 in _TestApp.run()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType;
  uint64_t v7;
  __int128 v9;
  __int128 v10;

  swift_unknownObjectRetain();
  static _TestApp.host.setter();
  swift_unknownObjectRetain();
  static _TestApp.comparisonHost.setter();
  static _TestApp.defaultEnvironment.getter();
  static _TestApp.environmentOverride.setter();
  ObjectType = swift_getObjectType();
  static _TestApp.defaultEnvironment.getter();
  v9 = v10;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(a2 + 64))(&v9, ObjectType, a2);
  v7 = swift_getObjectType();
  static _TestApp.defaultEnvironment.getter();
  v9 = v10;
  return (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(a4 + 64))(&v9, v7, a4);
}

uint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  _QWORD v10[2];

  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    v6 = (uint64_t *)(a3 + 16 * v4 + 24);
    do
    {
      v7 = *v6;
      v10[0] = *(v6 - 1);
      v10[1] = v7;
      swift_bridgeObjectRetain();
      v8 = a1(v10);
      swift_bridgeObjectRelease();
      if (v3)
        break;
      v6 -= 2;
      --v4;
    }
    while (!(v8 & 1 | (v4 == 0)));
  }
  return v4;
}

void specialized closure #1 in runTestingApp<A, B>(rootView:comparisonView:didLaunch:)(void *a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(id, uint64_t, id, uint64_t), uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Class v17;
  id v18;
  char *v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  Class v24;
  id v25;
  char *v26;
  id v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(id, uint64_t, id, uint64_t);

  v35 = a6;
  v36 = a5;
  v34 = a4;
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v33 - v11;
  type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CoreTesting.isRunning.setter();
  outlined init with copy of TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(a3, (uint64_t)v16);
  type metadata accessor for UIHostingController<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0, &lazy cache variable for type metadata for UIHostingController<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v18 = objc_allocWithZone(v17);
  v19 = (char *)specialized UIHostingController.init(rootView:)((uint64_t)v16);
  v20 = *(id *)&v19[direct field offset for UIHostingController.host];
  objc_msgSend(a1, sel_setRootViewController_, v19);
  objc_msgSend(a1, sel_makeKeyAndVisible);
  v21 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  v22 = (void *)static TestingAppDelegate.testHost;
  static TestingAppDelegate.testHost = (uint64_t)v20;
  qword_1EDF00408 = v21;
  v23 = v20;

  outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(v34, (uint64_t)v12, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  type metadata accessor for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v25 = objc_allocWithZone(v24);
  v26 = (char *)specialized UIHostingController.init(rootView:)((uint64_t)v12);
  v27 = *(id *)&v26[direct field offset for UIHostingController.host];
  objc_msgSend(a2, sel_setRootViewController_, v26);
  objc_msgSend(a2, sel_setHidden_, 0);
  objc_msgSend(a2, sel_setHidden_, 1);
  v28 = lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>> and conformance _UIHostingView<A>, (uint64_t)&lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))type metadata accessor for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
  v29 = (void *)static TestingAppDelegate.comparisonHost;
  static TestingAppDelegate.comparisonHost = (uint64_t)v27;
  *(_QWORD *)algn_1EDF00418 = v28;
  v30 = v27;

  v31 = v23;
  v32 = v30;
  v36(v31, v21, v32, v28);

}

void specialized closure #1 in runTestingApp<A, B>(rootView:comparisonView:didLaunch:)(void *a1, void *a2, uint64_t a3, void (*a4)(id, uint64_t, id, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Class v11;
  id v12;
  char *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  Class v18;
  id v19;
  char *v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  void (*v28)(id, uint64_t, id, uint64_t);

  v28 = a4;
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v27 - v9;
  static CoreTesting.isRunning.setter();
  outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(a3, (uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
  type metadata accessor for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v12 = objc_allocWithZone(v11);
  v13 = (char *)specialized UIHostingController.init(rootView:)((uint64_t)v10);
  v14 = *(id *)&v13[direct field offset for UIHostingController.host];
  objc_msgSend(a1, sel_setRootViewController_, v13);
  objc_msgSend(a1, sel_makeKeyAndVisible);
  v15 = lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>, (uint64_t)&lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))type metadata accessor for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
  v16 = (void *)static TestingAppDelegate.testHost;
  static TestingAppDelegate.testHost = (uint64_t)v14;
  qword_1EDF00408 = v15;
  v17 = v14;

  type metadata accessor for UIHostingController<EmptyView>(0, &lazy cache variable for type metadata for UIHostingController<EmptyView>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for UIHostingController);
  v19 = objc_allocWithZone(v18);
  v20 = (char *)specialized UIHostingController.init(rootView:)();
  v21 = *(id *)&v20[direct field offset for UIHostingController.host];
  objc_msgSend(a2, sel_setRootViewController_, v20);
  objc_msgSend(a2, sel_setHidden_, 0);
  objc_msgSend(a2, sel_setHidden_, 1);
  v22 = lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>, (uint64_t)&lazy cache variable for type metadata for _UIHostingView<EmptyView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))type metadata accessor for UIHostingController<EmptyView>);
  v23 = (void *)static TestingAppDelegate.comparisonHost;
  static TestingAppDelegate.comparisonHost = (uint64_t)v21;
  *(_QWORD *)algn_1EDF00418 = v22;
  v24 = v21;

  v25 = v17;
  v26 = v24;
  v28(v25, v15, v26, v22);

}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized Array._getCount()(unint64_t a1)
{
  uint64_t v2;

  if (!(a1 >> 62))
    return *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
}

uint64_t outlined init with copy of TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_186FA27BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  v7 = v6;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v9 = (v5 + v8) & ~v8;
  v10 = v0 + v4;
  type metadata accessor for <<opaque return type of View.truePreference<A>(_:)>>.0(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v10 + *(int *)(v2 + 52);
  type metadata accessor for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0(0, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_release();
  swift_release();
  v14 = v0 + v9 + *(int *)(v7 + 52);
  type metadata accessor for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0(0, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for specialized closure #1 in runTestingApp<A, B>(rootView:comparisonView:didLaunch:)(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v7 + *(_QWORD *)(v6 + 64);
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (v8 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = v2 + ((*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  specialized closure #1 in runTestingApp<A, B>(rootView:comparisonView:didLaunch:)(a1, a2, v2 + v7, v2 + v11, *(void (**)(id, uint64_t, id, uint64_t))v12, *(_QWORD *)(v12 + 8));
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(0, (uint64_t)a2);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  specialized closure #1 in runTestingApp<A, B>(rootView:comparisonView:didLaunch:)(a1, a2, v2 + v7, *(void (**)(id, uint64_t, id, uint64_t))(v2 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

void type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0(255, a3);
    lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView();
    swift_getOpaqueTypeConformance2();
    v4 = type metadata accessor for TestIDView();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v6;

  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v7 = v6;
    v8 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for UIHostingController<EmptyView>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE7C28]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(uint64_t a1)
{
  type metadata accessor for UIHostingController<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(a1, &lazy cache variable for type metadata for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
}

void type metadata accessor for UIHostingController<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
    v7 = v6;
    v8 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, MEMORY[0x1E0CE0D20]);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, a2, a3);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0D20], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t (*)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = a3(255, a2, type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v5);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v7 = v6;
    v8 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t specialized Sequence<>.max()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = result + 64;
  v3 = *(_BYTE *)(result + 32);
  v4 = 1 << v3;
  v5 = -1;
  if (1 << v3 < 64)
    v5 = ~(-1 << (1 << v3));
  v6 = v5 & *(_QWORD *)(result + 64);
  if (v6)
  {
    v7 = 0;
    v8 = __clz(__rbit64(v6));
    v9 = (v6 - 1) & v6;
    v10 = (unint64_t)(v4 + 63) >> 6;
  }
  else
  {
    LODWORD(v7) = v3 & 0x3F;
    if (v7 <= 6)
      goto LABEL_48;
    v10 = (unint64_t)(v4 + 63) >> 6;
    v19 = *(_QWORD *)(result + 72);
    if (v19)
    {
      v7 = 1;
    }
    else
    {
      if (v7 < 8)
        goto LABEL_48;
      v19 = *(_QWORD *)(result + 80);
      if (v19)
      {
        v7 = 2;
      }
      else
      {
        v19 = *(_QWORD *)(result + 88);
        if (v19)
        {
          v7 = 3;
        }
        else
        {
LABEL_36:
          if (v7 < 9)
            goto LABEL_48;
          v19 = *(_QWORD *)(result + 96);
          if (v19)
          {
            v7 = 4;
          }
          else
          {
            v19 = *(_QWORD *)(result + 104);
            if (!v19)
              goto LABEL_42;
            v7 = 5;
          }
        }
      }
    }
LABEL_29:
    v9 = (v19 - 1) & v19;
    v8 = __clz(__rbit64(v19)) + (v7 << 6);
  }
  v11 = *(_QWORD *)(result + 56);
  v12 = *(_BYTE *)(v11 + v8);
  while (v9)
  {
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v14 = v13 | (v7 << 6);
LABEL_7:
    v15 = *(unsigned __int8 *)(v11 + v14);
    if (v12 <= v15)
      v12 = v15;
  }
  v16 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v16 >= v10)
    goto LABEL_49;
  v17 = *(_QWORD *)(v2 + 8 * v16);
  ++v7;
  if (v17)
    goto LABEL_25;
  v7 = v16 + 1;
  if (v16 + 1 >= v10)
    goto LABEL_49;
  v17 = *(_QWORD *)(v2 + 8 * v7);
  if (v17)
    goto LABEL_25;
  v7 = v16 + 2;
  if (v16 + 2 >= v10)
    goto LABEL_49;
  v17 = *(_QWORD *)(v2 + 8 * v7);
  if (v17)
    goto LABEL_25;
  v7 = v16 + 3;
  if (v16 + 3 >= v10)
    goto LABEL_49;
  v17 = *(_QWORD *)(v2 + 8 * v7);
  if (v17)
  {
LABEL_25:
    v9 = (v17 - 1) & v17;
    v14 = __clz(__rbit64(v17)) + (v7 << 6);
    goto LABEL_7;
  }
  v18 = v16 + 4;
  if (v18 >= v10)
    goto LABEL_49;
  v17 = *(_QWORD *)(v2 + 8 * v18);
  if (v17)
  {
    v7 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v10)
      goto LABEL_49;
    v17 = *(_QWORD *)(v2 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_25;
  }
  __break(1u);
LABEL_42:
  v20 = 0;
  v21 = 6;
  if (v10 > 6)
    v21 = v10;
  v22 = v21 - 6;
  while (v22 != v20)
  {
    v19 = *(_QWORD *)(result + 112 + 8 * v20++);
    if (v19)
    {
      v7 = v20 + 5;
      goto LABEL_29;
    }
  }
LABEL_48:
  v12 = 3;
LABEL_49:
  *a2 = v12;
  return result;
}

uint64_t specialized Sequence<>.max()(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v2 < v5)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

uint64_t PlatformSceneCache.addHost(_:id:)(uint64_t a1, Swift::UInt a2, uint64_t a3, char a4)
{
  uint64_t v4;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  uint64_t inited;
  char v23;
  uint64_t v25;
  _BYTE v26[8];
  uint64_t v27;
  _BYTE v28[16];

  v8 = a4 & 1;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v27 = a1;
  outlined init with take of HashableWeakBox<UIViewController>((uint64_t)v26, (uint64_t)v28);
  v9 = (uint64_t *)(v4 + 16);
  swift_beginAccess();
  v10 = *(_QWORD *)(v4 + 16);
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_7;
  outlined copy of SceneID(a2, a3, v8);
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v8);
  if ((v12 & 1) == 0)
  {
    outlined consume of SceneID(a2, a3, v8);
LABEL_7:
    swift_endAccess();
    goto LABEL_8;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
  swift_bridgeObjectRetain();
  outlined consume of SceneID(a2, a3, v8);
  if (*(_QWORD *)(v13 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v28);
    v15 = v14;
    swift_endAccess();
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      return outlined destroy of HashableWeakBox<UIViewController>((uint64_t)v28);
  }
  else
  {
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
LABEL_8:
  swift_beginAccess();
  v16 = *v9;
  if (!*(_QWORD *)(*v9 + 16))
  {
LABEL_12:
    swift_endAccess();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(HashableWeakBox<UIViewController>, ScenePhase)>, (uint64_t (*)(uint64_t))type metadata accessor for (HashableWeakBox<UIViewController>, ScenePhase), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    outlined init with copy of HashableWeakBox<UIViewController>((uint64_t)v28, inited + 32);
    *(_BYTE *)(inited + 48) = 2;
    v21 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    goto LABEL_13;
  }
  outlined copy of SceneID(a2, a3, v8);
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v8);
  if ((v18 & 1) == 0)
  {
    outlined consume of SceneID(a2, a3, v8);
    goto LABEL_12;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
  swift_endAccess();
  swift_bridgeObjectRetain();
  outlined consume of SceneID(a2, a3, v8);
  outlined init with copy of HashableWeakBox<UIViewController>((uint64_t)v28, (uint64_t)v26);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(2, (uint64_t)v26, isUniquelyReferenced_nonNull_native);
  v21 = v19;
  swift_bridgeObjectRelease();
  outlined destroy of HashableWeakBox<UIViewController>((uint64_t)v26);
LABEL_13:
  swift_beginAccess();
  outlined copy of SceneID(a2, a3, v8);
  v23 = swift_isUniquelyReferenced_nonNull_native();
  v25 = *v9;
  *v9 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v21, a2, a3, v8, v23);
  *v9 = v25;
  swift_bridgeObjectRelease();
  outlined consume of SceneID(a2, a3, v8);
  swift_endAccess();
  return outlined destroy of HashableWeakBox<UIViewController>((uint64_t)v28);
}

uint64_t PlatformSceneCache.removeHost(_:id:)(uint64_t a1, Swift::UInt a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  _BYTE v21[16];
  char v22[8];
  uint64_t v23;
  uint64_t v24;

  v9 = (uint64_t *)(v4 + 16);
  swift_beginAccess();
  v10 = *(_QWORD *)(v4 + 16);
  if (!*(_QWORD *)(v10 + 16))
    return swift_endAccess();
  v11 = a4 & 1;
  outlined copy of SceneID(a2, a3, v11);
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v11);
  if ((v13 & 1) == 0)
  {
    outlined consume of SceneID(a2, a3, v11);
    return swift_endAccess();
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v12);
  v24 = v14;
  swift_endAccess();
  swift_bridgeObjectRetain();
  outlined consume of SceneID(a2, a3, v11);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v23 = a1;
  outlined init with take of HashableWeakBox<UIViewController>((uint64_t)v22, (uint64_t)v21);
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_9;
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v21);
  v16 = v15;
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
    goto LABEL_9;
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v21, v22);
  v17 = v24;
  if (!*(_QWORD *)(v24 + 16))
  {
    swift_bridgeObjectRelease();
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v11);
    swift_endAccess();
LABEL_9:
    swift_bridgeObjectRelease();
    return outlined destroy of HashableWeakBox<UIViewController>((uint64_t)v21);
  }
  swift_beginAccess();
  outlined copy of SceneID(a2, a3, v11);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v20 = *v9;
  *v9 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, a2, a3, v11, isUniquelyReferenced_nonNull_native);
  *v9 = v20;
  swift_bridgeObjectRelease();
  outlined consume of SceneID(a2, a3, v11);
  swift_endAccess();
  return outlined destroy of HashableWeakBox<UIViewController>((uint64_t)v21);
}

uint64_t PlatformSceneCache.setPhase(_:id:host:)(char *a1, Swift::UInt a2, uint64_t a3, char a4)
{
  uint64_t v4;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _BYTE v22[24];

  v8 = *a1;
  v9 = (uint64_t *)(v4 + 16);
  swift_beginAccess();
  v10 = *(_QWORD *)(v4 + 16);
  if (!*(_QWORD *)(v10 + 16))
    return swift_endAccess();
  v11 = a4 & 1;
  outlined copy of SceneID(a2, a3, v11);
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v11);
  if ((v13 & 1) == 0)
  {
    outlined consume of SceneID(a2, a3, v11);
    return swift_endAccess();
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v12);
  swift_endAccess();
  swift_bridgeObjectRetain();
  outlined consume of SceneID(a2, a3, v11);
  swift_unknownObjectWeakInit();
  v15 = swift_unknownObjectWeakAssign();
  outlined init with take of HashableWeakBox<UIViewController>(v15, (uint64_t)v22);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, (uint64_t)v22, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  outlined destroy of HashableWeakBox<UIViewController>((uint64_t)v22);
  swift_beginAccess();
  outlined copy of SceneID(a2, a3, v11);
  swift_bridgeObjectRetain();
  v17 = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v9;
  *v9 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, a2, a3, v11, v17);
  *v9 = v21;
  swift_bridgeObjectRelease();
  outlined consume of SceneID(a2, a3, v11);
  v18 = swift_endAccess();
  if (static AppGraph.shared)
  {
    MEMORY[0x1E0C80A78](v18, v19);
    swift_retain();
    static Update.ensure<A>(_:)();
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in PlatformSceneCache.setPhase(_:id:host:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  char v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x16_t v15;
  uint8x16_t *v16;
  unint64_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint8x8_t v20;
  uint8x8_t *v21;
  unint64_t v22;
  uint8x8_t v23;
  uint8x16_t v24;
  uint8x16_t *v25;
  unint64_t v26;
  uint8x16_t v27;
  uint8x16_t v28;
  uint8x8_t v29;
  uint8x8_t *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  char *v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char *v38;
  char v39;
  unsigned int v40;
  uint64_t result;

  if (*(_DWORD *)(a1 + 204) == *MEMORY[0x1E0CFED28])
  {
    v3 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v3 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  v4 = specialized Sequence.compactMap<A>(_:)(v3, a2);
  swift_bridgeObjectRelease();
  swift_release();
  static Semantics.v6.getter();
  v5 = isLinkedOnOrAfter(_:)();
  v6 = *((_QWORD *)v4 + 2);
  if ((v5 & 1) != 0)
  {
    if (!v6)
      goto LABEL_45;
    v7 = v4[32];
    v8 = v6 - 1;
    if (v6 == 1)
      goto LABEL_45;
    if (v6 < 9)
    {
      v9 = 1;
      goto LABEL_35;
    }
    if (v6 >= 0x21)
    {
      v13 = v8 & 0xFFFFFFFFFFFFFFE0;
      v15 = (uint8x16_t)vdupq_n_s8(v7);
      v16 = (uint8x16_t *)(v4 + 49);
      v17 = v8 & 0xFFFFFFFFFFFFFFE0;
      v18 = v15;
      do
      {
        v15 = vmaxq_u8(v15, v16[-1]);
        v18 = vmaxq_u8(v18, *v16);
        v16 += 2;
        v17 -= 32;
      }
      while (v17);
      v19 = vmaxq_u8(v15, v18);
      v19.i8[0] = vmaxvq_u8(v19);
      v7 = v19.i32[0];
      if (v8 == v13)
        goto LABEL_45;
      if ((v8 & 0x18) == 0)
      {
        v9 = v13 | 1;
LABEL_35:
        v33 = v6 - v9;
        v34 = &v4[v9 + 32];
        do
        {
          v36 = *v34++;
          v35 = v36;
          if (v7 <= v36)
            LOBYTE(v7) = v35;
          --v33;
        }
        while (v33);
        goto LABEL_45;
      }
    }
    else
    {
      v13 = 0;
    }
    v9 = v8 & 0xFFFFFFFFFFFFFFF8 | 1;
    v20 = (uint8x8_t)vdup_n_s8(v7);
    v21 = (uint8x8_t *)&v4[v13 + 33];
    v22 = v13 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v23 = *v21++;
      v20 = vmax_u8(v20, v23);
      v22 += 8;
    }
    while (v22);
    LOBYTE(v7) = vmaxv_u8(v20);
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_45;
    goto LABEL_35;
  }
  if (!v6)
    goto LABEL_45;
  v10 = v4[32];
  v11 = v6 - 1;
  if (v6 == 1)
    goto LABEL_45;
  if (v6 < 9)
  {
    v12 = 1;
    goto LABEL_41;
  }
  if (v6 < 0x21)
  {
    v14 = 0;
    goto LABEL_30;
  }
  v14 = v11 & 0xFFFFFFFFFFFFFFE0;
  v24 = (uint8x16_t)vdupq_n_s8(v10);
  v25 = (uint8x16_t *)(v4 + 49);
  v26 = v11 & 0xFFFFFFFFFFFFFFE0;
  v27 = v24;
  do
  {
    v24 = vminq_u8(v25[-1], v24);
    v27 = vminq_u8(*v25, v27);
    v25 += 2;
    v26 -= 32;
  }
  while (v26);
  v28 = vminq_u8(v24, v27);
  v28.i8[0] = vminvq_u8(v28);
  v10 = v28.i32[0];
  if (v11 == v14)
    goto LABEL_45;
  if ((v11 & 0x18) != 0)
  {
LABEL_30:
    v12 = v11 & 0xFFFFFFFFFFFFFFF8 | 1;
    v29 = (uint8x8_t)vdup_n_s8(v10);
    v30 = (uint8x8_t *)&v4[v14 + 33];
    v31 = v14 - (v11 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v32 = *v30++;
      v29 = vmin_u8(v32, v29);
      v31 += 8;
    }
    while (v31);
    LOBYTE(v10) = vminv_u8(v29);
    if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_45;
    goto LABEL_41;
  }
  v12 = v14 | 1;
LABEL_41:
  v37 = v6 - v12;
  v38 = &v4[v12 + 32];
  do
  {
    v40 = *v38++;
    v39 = v40;
    if (v40 < v10)
      LOBYTE(v10) = v39;
    --v37;
  }
  while (v37);
LABEL_45:
  swift_bridgeObjectRelease();
  result = AGGraphSetValue();
  if ((_DWORD)result)
  {
    swift_retain();
    AppGraph.graphDidChange()();
    return swift_release();
  }
  return result;
}

uint64_t PlatformSceneCache.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PlatformSceneCache()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for PlatformSceneCache.Info()
{
  return &type metadata for PlatformSceneCache.Info;
}

uint64_t partial apply for closure #1 in PlatformSceneCache.setPhase(_:id:host:)()
{
  uint64_t v0;

  return closure #1 in PlatformSceneCache.setPhase(_:id:host:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

char *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  Swift::UInt v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 v16[24];

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (char *)MEMORY[0x1E0DEE9D8];
  v3 = a2 + 16;
  v4 = (char *)(swift_bridgeObjectRetain() + 176);
  v5 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v7 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v8 = *v4;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      outlined copy of SceneID(v7, v6, v8);
      specialized __RawDictionaryStorage.find<A>(_:)(v7, v6, v8);
      if ((v9 & 1) != 0)
      {
        swift_endAccess();
        swift_bridgeObjectRetain();
        outlined consume of SceneID(v7, v6, v8);
        static Semantics.v6.getter();
        if ((isLinkedOnOrAfter(_:)() & 1) != 0)
        {
          v10 = swift_bridgeObjectRetain();
          specialized Sequence<>.max()(v10, v16);
        }
        else
        {
          v11 = swift_bridgeObjectRetain();
          specialized Sequence<>.min()(v11, v16);
        }
        swift_bridgeObjectRelease_n();
        if (v16[0] == 3)
          v12 = 0;
        else
          v12 = v16[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
        v14 = *((_QWORD *)v5 + 2);
        v13 = *((_QWORD *)v5 + 3);
        if (v14 >= v13 >> 1)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v5);
        *((_QWORD *)v5 + 2) = v14 + 1;
        v5[v14 + 32] = v12;
      }
      else
      {
        swift_endAccess();
        outlined consume of SceneID(v7, v6, v8);
      }
    }
    else
    {
      swift_endAccess();
    }
    v4 += 272;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

{
  uint64_t v2;
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  _OWORD __dst[17];
  _BYTE __src[264];
  uint64_t v24;
  _BYTE v25[288];
  uint64_t *v26;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (char *)MEMORY[0x1E0DEE9D8];
  v26 = &v24;
  v4 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v5 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v6 = *(v4 - 1);
      v7 = *v4;
      swift_bridgeObjectRetain();
      v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
      if ((v9 & 1) != 0)
      {
        outlined init with copy of TabEntry(*(_QWORD *)(a2 + 56) + 272 * v8, (uint64_t)__src);
        outlined init with take of TabEntry(__src, v25);
        outlined init with copy of TabEntry((uint64_t)v25, (uint64_t)__src);
        if ((*(_BYTE *)v26 & 1) != 0)
        {
          memcpy(__dst, __src, 0x108uLL);
          v10 = *((_QWORD *)&__dst[1] + 1);
          v11 = *(_QWORD *)&__dst[2];
          v12 = BYTE8(__dst[2]);
          outlined copy of TabCustomizationID.Base();
          outlined destroy of TabItemGroup((uint64_t)__dst);
        }
        else
        {
          __dst[4] = *(_OWORD *)&__src[64];
          __dst[5] = *(_OWORD *)&__src[80];
          *(_QWORD *)&__dst[6] = *(_QWORD *)&__src[96];
          __dst[0] = *(_OWORD *)__src;
          __dst[1] = *(_OWORD *)&__src[16];
          __dst[2] = *(_OWORD *)&__src[32];
          __dst[3] = *(_OWORD *)&__src[48];
          if ((TabItem.needsCustomizationIDForEnablement.getter() & 1) == 0)
            goto LABEL_14;
          v13 = one-time initialization token for defaultValue;
          swift_bridgeObjectRetain();
          if (v13 != -1)
            swift_once();
          ViewTraitCollection.value<A>(for:defaultValue:)();
          swift_bridgeObjectRelease();
          v10 = v19;
          v11 = v20;
          outlined copy of TabCustomizationID?(v19, v20, v21);
          outlined consume of TabCustomizationID?(v19, v20, v21);
          swift_bridgeObjectRelease();
          if (v21 == 255)
          {
LABEL_14:
            v10 = TabItem.platformIdentifier.getter();
            v11 = v14;
            v12 = 1;
          }
          else
          {
            v12 = v21 & 1;
          }
          outlined destroy of TabItem((uint64_t)__dst);
        }
        outlined destroy of TabEntry((uint64_t)v25);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
        v16 = *((_QWORD *)v5 + 2);
        v15 = *((_QWORD *)v5 + 3);
        if (v16 >= v15 >> 1)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v5);
        *((_QWORD *)v5 + 2) = v16 + 1;
        v17 = &v5[24 * v16];
        *((_QWORD *)v17 + 4) = v10;
        *((_QWORD *)v17 + 5) = v11;
        v17[48] = v12;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    v4 += 2;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26[16];
  _BYTE v27[128];
  _BYTE v28[136];
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[8];
  uint64_t v34;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (char *)MEMORY[0x1E0DEE9D8];
  v24 = (_QWORD *)(a2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  v3 = swift_bridgeObjectRetain() + 56;
  v4 = (char *)MEMORY[0x1E0DEE9D8];
  v23 = MEMORY[0x1E0DEE9B8] + 8;
  do
  {
    v25 = v4;
    v34 = v2;
    v6 = *(_QWORD *)(v3 - 24);
    v5 = *(_QWORD *)(v3 - 16);
    v7 = *(_BYTE *)(v3 - 8);
    v8 = v24[1];
    v33[4] = *v24;
    v33[5] = v8;
    outlined copy of Text.Storage(v6, v5, v7);
    swift_bridgeObjectRetain_n();
    outlined copy of Text.Storage(v6, v5, v7);
    swift_retain();
    swift_retain();
    AccessibilityNode.attachment.getter(&v29);
    v9 = v29;

    if (*(_QWORD *)(v9 + 16)
      && (v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TextLayoutPropertiesKey),
          (v11 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)&v29);
      v13 = v31;
      v12 = v32;
      __swift_project_boxed_opaque_existential_1(&v29, v31);
      v14 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v12 + 8);
      swift_bridgeObjectRetain();
      v14(v33, v13, v12);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
    }
    else
    {
      memset(v33, 0, 32);
      swift_bridgeObjectRetain();
    }
    v15 = MEMORY[0x1E0DEB940];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v23, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties, (uint64_t (*)(_QWORD, uint64_t))v15);
    if ((swift_dynamicCast() & 1) != 0)
    {
      destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v29);
      outlined init with take of Binding<SearchFieldState>((uint64_t)&v29, (uint64_t)v26, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextLayoutProperties??, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationAuthority??);
      swift_bridgeObjectRelease_n();
      outlined init with take of Binding<SearchFieldState>((uint64_t)v26, (uint64_t)v27, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextLayoutProperties??, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationAuthority??);
      outlined init with take of Image.Resolved?((uint64_t)v27, (uint64_t)v28, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
      if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v28) != 1)
        outlined release of AccessibilityTextLayoutProperties??(v26);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    v29 = 0;
    v30 = 0;
    v16 = static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)();
    v18 = v17;
    outlined consume of Text.Storage(v6, v5, v7);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v6, v5, v7);
    swift_bridgeObjectRelease();
    v4 = v25;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v25 + 2) + 1, 1, v25);
    v20 = *((_QWORD *)v4 + 2);
    v19 = *((_QWORD *)v4 + 3);
    if (v20 >= v19 >> 1)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, v4);
    *((_QWORD *)v4 + 2) = v20 + 1;
    v21 = &v4[16 * v20];
    *((_QWORD *)v21 + 4) = v16;
    *((_QWORD *)v21 + 5) = v18;
    v3 += 32;
    v2 = v34 - 1;
  }
  while (v34 != 1);
  swift_bridgeObjectRelease();
  return v4;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38;
  uint64_t v39;

  v5 = type metadata accessor for ToolbarStorage.Entry(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    return (char *)MEMORY[0x1E0DEE9D8];
  v39 = v2;
  swift_bridgeObjectRetain();
  v26[1] = a1;
  v11 = (uint64_t *)(a1 + 40);
  v12 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v13 = *(v11 - 1);
    v14 = *v11;
    v15 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain();
    if (v15 && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14), (v17 & 1) != 0))
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v6 + 72) * v16, (uint64_t)v9, type metadata accessor for ToolbarStorage.Entry);
      ToolbarStorage.Entry.id.getter();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for ToolbarStorage.Entry);
    }
    else
    {
      v38 = 0;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v33 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v34 + 1))
    {
      v29 = v35;
      v30 = v36;
      v31 = v37;
      v32 = v38;
      v27 = v33;
      v28 = v34;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
      v19 = *((_QWORD *)v12 + 2);
      v18 = *((_QWORD *)v12 + 3);
      if (v19 >= v18 >> 1)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, v12);
      *((_QWORD *)v12 + 2) = v19 + 1;
      v20 = &v12[88 * v19];
      v21 = v28;
      *((_OWORD *)v20 + 2) = v27;
      *((_OWORD *)v20 + 3) = v21;
      v22 = v29;
      v23 = v30;
      v24 = v31;
      v20[112] = v32;
      *((_OWORD *)v20 + 5) = v23;
      *((_OWORD *)v20 + 6) = v24;
      *((_OWORD *)v20 + 4) = v22;
    }
    else
    {
      outlined destroy of UIBackgroundConfiguration?((uint64_t)&v33, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityValueStorage?);
    }
    v11 += 2;
    --v10;
  }
  while (v10);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t View.avKitOnCaptureButtonPress(isEnabled:perform:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_BYTE *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a3;
  swift_retain();
  View.transformPreference<A>(_:_:)();
  return swift_release();
}

uint64_t closure #1 in View.avKitOnCaptureButtonPress(isEnabled:perform:)(uint64_t (**a1)(), char a2, uint64_t (*a3)(uint64_t a1, uint64_t a2), uint64_t a4)
{
  uint64_t (*v8)();
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t result;
  uint64_t (*v12)();
  uint64_t v13;

  v8 = *a1;
  if (*a1)
  {
    v9 = a1[1];
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = v9;
    result = (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed AVKitPressableCaptureButton, @in_guaranteed AVKitPressableCaptureButton.Phase) -> (@out ());
    if ((a2 & 1) == 0)
    {
      a3 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed AVKitPressableCaptureButton, @in_guaranteed AVKitPressableCaptureButton.Phase) -> (@out ());
      a4 = v10;
LABEL_6:
      result = swift_allocObject();
      v13 = result;
      *(_QWORD *)(result + 16) = a3;
      *(_QWORD *)(result + 24) = a4;
      v12 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
      goto LABEL_7;
    }
LABEL_5:
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(result);
    swift_retain();
    goto LABEL_6;
  }
  result = 0;
  v12 = 0;
  v13 = 0;
  if ((a2 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  *a1 = v12;
  a1[1] = (uint64_t (*)())v13;
  return result;
}

uint64_t sub_186FA3E4C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.avKitOnCaptureButtonPress(isEnabled:perform:)(uint64_t (**a1)())
{
  uint64_t v1;

  return closure #1 in View.avKitOnCaptureButtonPress(isEnabled:perform:)(a1, *(_BYTE *)(v1 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32));
}

void static AVKitPressableCaptureButton.primary.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static AVKitPressableCaptureButton.secondary.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void AVKitPressableCaptureButton.Phase.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static AVKitPressableCaptureButton.Phase.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int AVKitPressableCaptureButton.Phase.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL static AVKitPressableCaptureButton.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void AVKitPressableCaptureButton.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int AVKitPressableCaptureButton.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type AVKitPressableCaptureButton.Phase and conformance AVKitPressableCaptureButton.Phase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AVKitPressableCaptureButton.Phase and conformance AVKitPressableCaptureButton.Phase;
  if (!lazy protocol witness table cache variable for type AVKitPressableCaptureButton.Phase and conformance AVKitPressableCaptureButton.Phase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AVKitPressableCaptureButton.Phase, &type metadata for AVKitPressableCaptureButton.Phase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AVKitPressableCaptureButton.Phase and conformance AVKitPressableCaptureButton.Phase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AVKitPressableCaptureButton and conformance AVKitPressableCaptureButton()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AVKitPressableCaptureButton and conformance AVKitPressableCaptureButton;
  if (!lazy protocol witness table cache variable for type AVKitPressableCaptureButton and conformance AVKitPressableCaptureButton)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AVKitPressableCaptureButton, &type metadata for AVKitPressableCaptureButton);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AVKitPressableCaptureButton and conformance AVKitPressableCaptureButton);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AVKitPressableCaptureButton.Phase(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_186FA4078 + 4 * byte_187BFD0F5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_186FA40AC + 4 * asc_187BFD0F0[v4]))();
}

uint64_t sub_186FA40AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186FA40B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186FA40BCLL);
  return result;
}

uint64_t sub_186FA40C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186FA40D0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_186FA40D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186FA40DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186FA40E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _PreferenceTransformModifier<AVKitCaptureButtonPreference>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<AVKitCaptureButtonPreference> and conformance _PreferenceTransformModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _PreferenceTransformModifier<AVKitCaptureButtonPreference>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _PreferenceTransformModifier<AVKitCaptureButtonPreference>)
  {
    v0 = type metadata accessor for _PreferenceTransformModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AVKitCaptureButtonPreference>);
  }
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<AVKitCaptureButtonPreference> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<AVKitCaptureButtonPreference> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<AVKitCaptureButtonPreference> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for _PreferenceTransformModifier<AVKitCaptureButtonPreference>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<AVKitCaptureButtonPreference> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AVKitPressableCaptureButton(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_186FA4234 + 4 * byte_187BFD0FF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_186FA4268 + 4 * byte_187BFD0FA[v4]))();
}

uint64_t sub_186FA4268(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186FA4270(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186FA4278);
  return result;
}

uint64_t sub_186FA4284(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186FA428CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_186FA4290(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186FA4298(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AVKitPressableCaptureButton.Guts()
{
  return &type metadata for AVKitPressableCaptureButton.Guts;
}

ValueMetadata *type metadata accessor for AVKitCaptureButtonPreference()
{
  return &type metadata for AVKitCaptureButtonPreference;
}

unint64_t lazy protocol witness table accessor for type AVKitPressableCaptureButton.Guts and conformance AVKitPressableCaptureButton.Guts()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AVKitPressableCaptureButton.Guts and conformance AVKitPressableCaptureButton.Guts;
  if (!lazy protocol witness table cache variable for type AVKitPressableCaptureButton.Guts and conformance AVKitPressableCaptureButton.Guts)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AVKitPressableCaptureButton.Guts, &type metadata for AVKitPressableCaptureButton.Guts);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AVKitPressableCaptureButton.Guts and conformance AVKitPressableCaptureButton.Guts);
  }
  return result;
}

_QWORD *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance AVKitCaptureButtonPreference(_QWORD *result, _QWORD *(*a2)(_QWORD *__return_ptr))
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  v2 = result;
  v3 = *result;
  if (*result)
  {
    v4 = result[1];
  }
  else
  {
    result = a2(v5);
    v3 = v5[0];
    v4 = v5[1];
  }
  *v2 = v3;
  v2[1] = v4;
  return result;
}

uint64_t sub_186FA4354()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed AVKitPressableCaptureButton, @in_guaranteed AVKitPressableCaptureButton.Phase) -> (@out ())(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ()(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t AttributedSubstring.transformingEquivalentAttributes(from:to:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v3 = type metadata accessor for AttributedSubstring();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttributedString();
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, v1, v3, v11);
  AttributedString.init(_:)();
  AttributedString.transformingUIKitAttributedForSwiftUI()(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
}

uint64_t lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF1B0], MEMORY[0x1E0CAF1C0]);
}

void type metadata accessor for Range<AttributedString.Index>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4();
    v11 = a5(a1, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

uint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE0900], MEMORY[0x1E0CE08F8]);
}

uint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes and conformance AttributeScopes.UIKitAttributes()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes and conformance AttributeScopes.UIKitAttributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC1A00], MEMORY[0x1E0DC19F8]);
}

uint64_t lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], MEMORY[0x1E0CAF180]);
}

uint64_t sub_186FA454C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  AttributeScopes.uiKit.getter();
  result = type metadata accessor for AttributeScopes.UIKitAttributes();
  *a1 = result;
  return result;
}

void sub_186FA4578()
{
  AttributeScopes.UIKitAttributes.backgroundColor.getter();
  __break(1u);
}

void sub_186FA4590()
{
  AttributeScopes.UIKitAttributes.foregroundColor.getter();
  __break(1u);
}

void sub_186FA45A8()
{
  AttributeScopes.UIKitAttributes.font.getter();
  __break(1u);
}

void sub_186FA45C0()
{
  AttributeScopes.UIKitAttributes.kern.getter();
  __break(1u);
}

void sub_186FA45D8()
{
  AttributeScopes.UIKitAttributes.tracking.getter();
  __break(1u);
}

void sub_186FA45F0()
{
  AttributeScopes.UIKitAttributes.baselineOffset.getter();
  __break(1u);
}

void sub_186FA4608()
{
  AttributeScopes.UIKitAttributes.strikethroughStyle.getter();
  __break(1u);
}

void sub_186FA4620()
{
  AttributeScopes.UIKitAttributes.underlineStyle.getter();
  __break(1u);
}

void sub_186FA4638()
{
  AttributeScopes.UIKitAttributes.attachment.getter();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.AttachmentAttribute and conformance AttributeScopes.UIKitAttributes.AttachmentAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.AttachmentAttribute and conformance AttributeScopes.UIKitAttributes.AttachmentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.AttachmentAttribute and conformance AttributeScopes.UIKitAttributes.AttachmentAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DC1858], MEMORY[0x1E0DC1868]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.AttachmentAttribute and conformance AttributeScopes.UIKitAttributes.AttachmentAttribute);
  }
  return result;
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>)()
{
  type metadata accessor for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

void sub_186FA46E8()
{
  AttributeScopes.UIKitAttributes.adaptiveImageGlyph.getter();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DC1900], MEMORY[0x1E0DC1910]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute);
  }
  return result;
}

uint64_t outlined destroy of AttributedString.AdaptiveImageGlyph?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x1E0CA7930]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0818], MEMORY[0x1E0CE0828]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute);
  }
  return result;
}

uint64_t sub_186FA47E4()
{
  return 8;
}

uint64_t sub_186FA47F0()
{
  return swift_release();
}

uint64_t sub_186FA47F8(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return swift_retain();
}

_QWORD *sub_186FA480C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0848], MEMORY[0x1E0CE0858]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute);
  }
  return result;
}

void sub_186FA4864()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_186FA4888()
{
  return 8;
}

uint64_t sub_186FA4898()
{
  type metadata accessor for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>();
  return dispatch thunk of Hashable.hashValue.getter();
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE07D0], MEMORY[0x1E0CE07E0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute);
  }
  return result;
}

void sub_186FA4920()
{
  AttributeScopes.UIKitAttributes.underlineColor.getter();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.UnderlineColorAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineColorAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.UnderlineColorAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.UnderlineColorAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineColorAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DC18A0], MEMORY[0x1E0DC18B0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.UnderlineColorAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineColorAttribute);
  }
  return result;
}

uint64_t sub_186FA4984()
{
  return 8;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0830], MEMORY[0x1E0CE0840]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute);
  }
  return result;
}

void sub_186FA49E0()
{
  AttributeScopes.UIKitAttributes.strikethroughColor.getter();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.StrikethroughColorAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughColorAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.StrikethroughColorAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.StrikethroughColorAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughColorAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DC1918], MEMORY[0x1E0DC1928]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.StrikethroughColorAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughColorAttribute);
  }
  return result;
}

uint64_t sub_186FA4A44()
{
  return 8;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE07B8], MEMORY[0x1E0CE07C8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute);
  }
  return result;
}

uint64_t sub_186FA4AA8()
{
  return 8;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0890], MEMORY[0x1E0CE08A0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute);
  }
  return result;
}

uint64_t sub_186FA4B0C()
{
  return 8;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0878], MEMORY[0x1E0CE0888]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute);
  }
  return result;
}

uint64_t sub_186FA4B70()
{
  return 8;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0860], MEMORY[0x1E0CE0870]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute);
  }
  return result;
}

uint64_t sub_186FA4BD4()
{
  return 8;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0800], MEMORY[0x1E0CE0810]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute);
  }
  return result;
}

uint64_t sub_186FA4C38()
{
  return 8;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE07E8], MEMORY[0x1E0CE07F8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute);
  }
  return result;
}

uint64_t sub_186FA4C9C()
{
  return 8;
}

void type metadata accessor for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>)
  {
    type metadata accessor for AttributeScopes.SwiftUIAttributes();
    v0 = type metadata accessor for KeyPath();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>);
  }
}

double static AccessibilityActionCategory.default.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void static AccessibilityActionCategory.edit.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 1;
}

uint64_t AccessibilityActionCategory.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3 & 1;
  a5[3] = a4;
  return result;
}

uint64_t AccessibilityActionCategory.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;

  result = Text.init(_:tableName:bundle:comment:)();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4 & 1;
  a1[3] = v5;
  return result;
}

uint64_t AccessibilityActionCategory.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v7);
  v9 = Text.init<A>(_:)();
  v11 = v10;
  v13 = v12;
  v15 = v14 & 1;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v9;
  a3[1] = v11;
  a3[2] = v15;
  a3[3] = v13;
  return result;
}

BOOL static AccessibilityActionCategory.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = a1[3];
  v3 = a2[3];
  if (v2)
  {
    if (v2 == 1)
    {
      if (v3 != 1)
        return 0;
    }
    else
    {
      if (v3 < 2)
        return 0;
      v4 = *a1;
      v5 = a1[1];
      v6 = a1[2];
      v7 = *a2;
      v8 = a2[1];
      v9 = a2[2];
      outlined copy of AccessibilityActionCategory.Category(*a1, v5, v6, v2);
      outlined copy of AccessibilityActionCategory.Category(v7, v8, v9, v3);
      v10 = static Text.== infix(_:_:)();
      outlined consume of AccessibilityActionCategory.Category(v7, v8, v9, v3);
      outlined consume of AccessibilityActionCategory.Category(v4, v5, v6, v2);
      if ((v10 & 1) == 0)
        return 0;
    }
    return 1;
  }
  return !v3;
}

uint64_t outlined copy of AccessibilityActionCategory.Category(uint64_t result, uint64_t a2, char a3, unint64_t a4)
{
  if (a4 >= 2)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of AccessibilityActionCategory.Category(uint64_t result, uint64_t a2, char a3, unint64_t a4)
{
  if (a4 >= 2)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityActionCategory(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = a1[3];
  v3 = a2[3];
  if (v2)
  {
    if (v2 == 1)
    {
      if (v3 != 1)
        return 0;
    }
    else
    {
      if (v3 < 2)
        return 0;
      v4 = *a1;
      v5 = a1[1];
      v6 = a1[2];
      v7 = *a2;
      v8 = a2[1];
      v9 = a2[2];
      outlined copy of AccessibilityActionCategory.Category(*a1, v5, v6, v2);
      outlined copy of AccessibilityActionCategory.Category(v7, v8, v9, v3);
      v10 = static Text.== infix(_:_:)();
      outlined consume of AccessibilityActionCategory.Category(v7, v8, v9, v3);
      outlined consume of AccessibilityActionCategory.Category(v4, v5, v6, v2);
      if ((v10 & 1) == 0)
        return 0;
    }
    return 1;
  }
  return !v3;
}

uint64_t View.accessibilityActions<A>(category:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(double);
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a6;
  v21 = a3;
  v22 = a5;
  v9 = *(_QWORD *)(a4 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v13;
  v15 = v13[1];
  v16 = v13[2];
  v17 = v13[3];
  v18(v10);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = v14;
  v19[3] = v15;
  v19[4] = v16;
  v19[5] = v17;
  outlined copy of AccessibilityActionCategory.Category(v14, v15, v16, v17);
  View.accessibilityAttachment<A>(content:_:)((uint64_t)v12, (uint64_t)partial apply for closure #1 in View.accessibilityActions<A>(category:_:), (uint64_t)v19, v21, a4, v22, v23, a7);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, a4);
}

uint64_t closure #1 in View.accessibilityActions<A>(category:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;

  result = AccessibilityAttachment.init()();
  v12 = *(_QWORD *)a1;
  v11 = *(void **)(a1 + 8);
  if (!*(_BYTE *)(a1 + 16))
  {
    v15 = v11;
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  if (*(_BYTE *)(a1 + 16) == 1)
  {
    v13 = swift_bridgeObjectRetain();
    v14 = specialized Sequence.compactMap<A>(_:)(v13);
    static AccessibilityAttachment.combine(_:)(v14, &v21);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v12, v11, 1);
    v12 = v21;
    v15 = v22;
    v11 = v22;
LABEL_5:
    v21 = v12;
    v22 = v11;
    AccessibilityAttachment.mergedProperties.getter(&v20);

    swift_bridgeObjectRelease();
    v16 = swift_bridgeObjectRetain();
    v17 = specialized AccessibilityProperties.subscript.getter(v16);
    swift_bridgeObjectRelease_n();
    outlined copy of AccessibilityActionCategory.Category(a2, a3, a4, a5);
    v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI22AnyAccessibilityActionVG_AHs5NeverOTg503_s7d49UI4ViewPAAE20accessibilityActions8category_QrAA27gH77CategoryV_qd__yXEtAaBRd__lFyAA0G10AttachmentVAAE4TreeOzcfU_AA03AnygH0VAMXEfU_AF0ghQ0VTf1cn_nTf4ng_n(v17, a2, a3, a4, a5);
    outlined consume of AccessibilityActionCategory.Category(a2, a3, a4, a5);
    outlined consume of AccessibilityAttachment.Tree(*(_QWORD *)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
    result = specialized AccessibilityProperties.subscript.setter(v18);
  }
  v19 = v24;
  *(_QWORD *)a1 = v23;
  *(_QWORD *)(a1 + 8) = v19;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_186FA53B8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40) >= 2uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.accessibilityActions<A>(category:_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in View.accessibilityActions<A>(category:_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t destroy for AccessibilityActionCategory(uint64_t result)
{
  if (*(_QWORD *)(result + 24) >= 2uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_BYTE *)(result + 16));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityActionCategory(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 >= 2)
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v6, v7);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilityActionCategory(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) >= 2uLL)
  {
    if (v4 >= 2)
    {
      v10 = *(_QWORD *)a2;
      v11 = *(_QWORD *)(a2 + 8);
      v12 = *(_BYTE *)(a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v11, v12);
      v13 = *(_QWORD *)a1;
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(_BYTE *)(a1 + 16);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v11;
      *(_BYTE *)(a1 + 16) = v12;
      outlined consume of Text.Storage(v13, v14, v15);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
    }
  }
  else if (v4 >= 2)
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t outlined destroy of Text(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE6CF8] - 8) + 8))();
  return a1;
}

uint64_t assignWithTake for AccessibilityActionCategory(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (*(_QWORD *)(a1 + 24) >= 2uLL)
  {
    v4 = *(_QWORD *)(a2 + 24);
    if (v4 >= 2)
    {
      v6 = *(_BYTE *)(a2 + 16);
      v7 = *(_QWORD *)a1;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_BYTE *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = v6;
      outlined consume of Text.Storage(v7, v8, v9);
      *(_QWORD *)(a1 + 24) = v4;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of Text(a1);
  }
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityActionCategory(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityActionCategory(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 2147483646;
    *(_QWORD *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityActionCategory()
{
  return &type metadata for AccessibilityActionCategory;
}

uint64_t sub_186FA5710(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[3];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for ModifiedContent();
  type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>();
  v8 = type metadata accessor for ModifiedContent();
  v25[0] = v2;
  v25[1] = &protocol witness table for DetachedGeometryModifier;
  v9 = MEMORY[0x1E0CE2E70];
  v24[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v25);
  v24[1] = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  v23[0] = MEMORY[0x18D75FFDC](v9, v5, v24);
  v23[1] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  v22[0] = MEMORY[0x18D75FFDC](v9, v6, v23);
  v22[1] = &protocol witness table for _HiddenModifier;
  v21[0] = MEMORY[0x18D75FFDC](v9, v7, v22);
  v21[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>();
  MEMORY[0x18D75FFDC](v9, v8, v21);
  v10 = type metadata accessor for _BackgroundModifier();
  v11 = type metadata accessor for ModifiedContent();
  v12 = type metadata accessor for ModifiedContent();
  v13 = type metadata accessor for ModifiedContent();
  v14 = type metadata accessor for ModifiedContent();
  v20[0] = v1;
  v20[1] = &protocol witness table for DisableDeferredAccessibilityAttachmentModifier;
  v19[0] = MEMORY[0x18D75FFDC](v9, v3, v20);
  v19[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v10);
  v18[0] = MEMORY[0x18D75FFDC](v9, v11, v19);
  v18[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v17[0] = MEMORY[0x18D75FFDC](v9, v12, v18);
  v17[1] = &protocol witness table for DetachDeferredAccessibilityAttachmentModifier;
  v16[0] = MEMORY[0x18D75FFDC](v9, v13, v17);
  v16[1] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  return MEMORY[0x18D75FFDC](v9, v14, v16);
}

void type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>)
  {
    v0 = type metadata accessor for _PreferenceTransformModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>);
  }
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t destroy for AccessibilityActionCategory.Category(uint64_t result)
{
  if (*(_QWORD *)(result + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_BYTE *)(result + 16));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityActionCategory.Category(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;

  v3 = a2[3];
  if (v3 < 0xFFFFFFFF)
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
  }
  else
  {
    v4 = *a2;
    v5 = a2[1];
    v6 = *((_BYTE *)a2 + 16);
    outlined copy of Text.Storage(*a2, v5, v6);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilityActionCategory.Category(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;

  v4 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      v11 = *(_QWORD *)a2;
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(_BYTE *)(a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v12, v13);
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v12;
      *(_BYTE *)(a1 + 16) = v13;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  outlined consume of Text.Storage(v8, v9, v10);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityActionCategory.Category(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
LABEL_5:
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    return a1;
  }
  v5 = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Text.Storage(v6, v7, v8);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityActionCategory.Category(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AccessibilityActionCategory.Category(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for AccessibilityActionCategory.Category(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for AccessibilityActionCategory.Category(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    result[2] = 0;
    result[3] = 0;
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[3] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityActionCategory.Category()
{
  return &type metadata for AccessibilityActionCategory.Category;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityActionCategory.Category(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = a1[3];
  v3 = a2[3];
  if (!v2)
    return !v3;
  if (v2 == 1)
    return v3 == 1;
  if (v3 < 2)
    return 0;
  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  outlined copy of AccessibilityActionCategory.Category(*a1, v6, v7, v2);
  outlined copy of AccessibilityActionCategory.Category(v8, v9, v10, v3);
  v11 = static Text.== infix(_:_:)();
  outlined consume of AccessibilityActionCategory.Category(v8, v9, v10, v3);
  outlined consume of AccessibilityActionCategory.Category(v5, v6, v7, v2);
  return v11 & 1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI22AnyAccessibilityActionVG_AHs5NeverOTg503_s7d49UI4ViewPAAE20accessibilityActions8category_QrAA27gH77CategoryV_qd__yXEtAaBRd__lFyAA0G10AttachmentVAAE4TreeOzcfU_AA03AnygH0VAMXEfU_AF0ghQ0VTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v21;
  _OWORD v22[2];
  __int128 v23;
  _BYTE v24[25];
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v27 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v12 = (_QWORD *)(a1 + 32);
    do
    {
      v14 = v12[3];
      v13 = v12[4];
      __swift_project_boxed_opaque_existential_1(v12, v14);
      *(_QWORD *)&v25 = a2;
      *((_QWORD *)&v25 + 1) = a3;
      *(_QWORD *)&v26[0] = a4;
      *((_QWORD *)&v26[0] + 1) = a5;
      (*(void (**)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t))(v13 + 64))(&v23, &v25, v14, v13);
      outlined init with copy of AnyAccessibilityAction((uint64_t)v12, (uint64_t)&v21);
      if (*(_QWORD *)&v24[8])
      {
        outlined destroy of AnyAccessibilityAction((uint64_t)&v21);
        v25 = v23;
        v26[0] = *(_OWORD *)v24;
        *(_OWORD *)((char *)v26 + 9) = *(_OWORD *)&v24[9];
      }
      else
      {
        v25 = v21;
        v26[0] = v22[0];
        *(_OWORD *)((char *)v26 + 9) = *(_OWORD *)((char *)v22 + 9);
        outlined destroy of AnyAccessibilityAction?((uint64_t)&v23);
      }
      v6 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
        v6 = v27;
      }
      v16 = *(_QWORD *)(v6 + 16);
      v15 = *(_QWORD *)(v6 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1);
        v6 = v27;
      }
      *(_QWORD *)(v6 + 16) = v16 + 1;
      v17 = (_OWORD *)(v6 + 48 * v16);
      v18 = v25;
      v19 = v26[0];
      *(_OWORD *)((char *)v17 + 57) = *(_OWORD *)((char *)v26 + 9);
      v17[2] = v18;
      v17[3] = v19;
      v12 += 6;
      --v5;
    }
    while (v5);
  }
  return v6;
}

uint64_t outlined init with copy of AnyAccessibilityAction(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyAccessibilityAction(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyAccessibilityAction?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for AnyAccessibilityAction?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for AnyAccessibilityAction?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnyAccessibilityAction?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?);
  }
}

uint64_t outlined destroy of AnyAccessibilityAction(uint64_t a1)
{
  destroy for AnyAccessibilityAction(a1);
  return a1;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *);
  uint64_t v30;

  v27 = a5;
  v28 = a2;
  v30 = a4;
  v29 = a1;
  v26 = a3;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v10, v16);
  v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v20);
  v22 = (char *)&v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v23 + 16))(v22, v6);
  v24 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v22, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v22, v14);
    v29(v19, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
    if (v7)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v27, v12, v26);
    v24 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(a6, v24, 1);
}

uint64_t ActionSheet.init(title:message:buttons:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3 & 1;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a10;
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ActionSheet.Presentation.Key(uint64_t a1, void (*a2)(_OWORD *__return_ptr, uint64_t))
{
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[10];
  uint64_t v18;

  v4 = outlined init with take of Image.Resolved?(a1, (uint64_t)&v6, &lazy cache variable for type metadata for ActionSheet.Presentation?, (uint64_t)&type metadata for ActionSheet.Presentation);
  if (*((_QWORD *)&v7 + 1))
  {
    v17[8] = v14;
    v17[9] = v15;
    v18 = v16;
    v17[4] = v10;
    v17[5] = v11;
    v17[6] = v12;
    v17[7] = v13;
    v17[0] = v6;
    v17[1] = v7;
    v17[2] = v8;
    v17[3] = v9;
  }
  else
  {
    a2(v17, v4);
    outlined destroy of AccessibilityTableContext?((uint64_t)&v6, &lazy cache variable for type metadata for ActionSheet.Presentation?, (uint64_t)&type metadata for ActionSheet.Presentation);
  }
  return outlined init with take of Image.Resolved?((uint64_t)v17, a1, &lazy cache variable for type metadata for ActionSheet.Presentation?, (uint64_t)&type metadata for ActionSheet.Presentation);
}

uint64_t protocol witness for AlertControllerConvertible.title.getter in conformance ActionSheet.Presentation()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Text.Storage(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for AlertControllerConvertible.message.getter in conformance ActionSheet.Presentation()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[4];
  outlined copy of Text?(v1, v0[5], v0[6], v0[7]);
  return v1;
}

uint64_t protocol witness for AlertControllerConvertible.buttons.getter in conformance ActionSheet.Presentation()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for AlertControllerConvertible.onDismiss.getter in conformance ActionSheet.Presentation()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  outlined copy of AppIntentExecutor?(v1);
  return v1;
}

uint64_t protocol witness for AlertControllerConvertible.itemID.getter in conformance ActionSheet.Presentation@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AnyHashable?(v1 + 96, a1);
}

double protocol witness for AlertControllerConvertible.sourceRect.getter in conformance ActionSheet.Presentation()
{
  uint64_t v0;

  return *(double *)(v0 + 136);
}

uint64_t View.actionSheet<A>(item:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[6];
  _QWORD v52[9];
  _BYTE v53[40];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  _OWORD v59[4];
  uint64_t v60;

  v48 = a8;
  v44 = a6;
  v45 = a7;
  v42 = a5;
  v43 = a4;
  v46 = a2;
  v47 = a3;
  v50 = a1;
  v49 = type metadata accessor for Optional();
  v12 = type metadata accessor for Binding();
  v13 = *(_QWORD *)(v12 - 8);
  v40 = v12;
  MEMORY[0x1E0C80A78](v12, v14);
  v41 = (char *)&v38 - v15;
  v16 = *(_QWORD *)(v49 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v38 - v20;
  MEMORY[0x18D75B9C8](v19);
  v52[2] = a4;
  v52[3] = a5;
  v52[4] = a6;
  v52[5] = a7;
  v52[6] = v46;
  v52[7] = v47;
  v22 = v49;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in _IncrementalLayoutViewCache.withMutableState<A, B>(type:_:), (uint64_t)v52, MEMORY[0x1E0DEDCE8], (uint64_t)&type metadata for ActionSheet, v23, (uint64_t)v59);
  v46 = *(void (**)(char *, uint64_t))(v16 + 8);
  v47 = 0;
  v46(v21, v22);
  v54 = v59[0];
  v55 = v59[1];
  v56 = v59[2];
  v57 = v59[3];
  v58 = v60;
  v24 = v13;
  v39 = v13;
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v26 = v40;
  v27 = v41;
  v25(v41, v50, v40);
  v28 = (*(unsigned __int8 *)(v24 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v29 = (char *)swift_allocObject();
  v30 = v42;
  v31 = v43;
  *((_QWORD *)v29 + 2) = v43;
  *((_QWORD *)v29 + 3) = v30;
  v33 = v44;
  v32 = v45;
  *((_QWORD *)v29 + 4) = v44;
  *((_QWORD *)v29 + 5) = v32;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(&v29[v28], v27, v26);
  MEMORY[0x18D75B9C8](v26);
  v51[2] = v31;
  v51[3] = v30;
  v51[4] = v33;
  v51[5] = v32;
  v34 = MEMORY[0x1E0DEC198];
  v35 = v49;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #3 in View.actionSheet<A>(item:content:), (uint64_t)v51, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEC198], v36, (uint64_t)v53);
  v46(v21, v35);
  View.presentationCommon(_:onDismiss:id:)((uint64_t)&v54, (uint64_t)partial apply for closure #2 in View.actionSheet<A>(item:content:), (uint64_t)v29, (uint64_t)v53, v31, v33);
  swift_release();
  outlined destroy of AccessibilityTableContext?((uint64_t)v53, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v34);
  return outlined consume of ActionSheet?(v54, *((uint64_t *)&v54 + 1), v55, *((uint64_t *)&v55 + 1), v56, *((uint64_t *)&v56 + 1), v57, *((uint64_t *)&v57 + 1));
}

uint64_t closure #2 in View.actionSheet<A>(item:content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v11 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(a3 - 8) + 56))((char *)&v11 - v8, 1, 1, a3, v7);
  type metadata accessor for Binding();
  specialized Binding.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v4);
}

uint64_t sub_186FA6AA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for Optional();
  v2 = type metadata accessor for Binding();
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  swift_release();
  swift_release();
  v4 = v0 + ((v3 + 48) & ~v3) + *(int *)(v2 + 32);
  v5 = *(_QWORD *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in View.actionSheet<A>(item:content:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  type metadata accessor for Optional();
  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Binding() - 8) + 80);
  return closure #2 in View.actionSheet<A>(item:content:)(v0 + ((v3 + 48) & ~v3), v1, v2);
}

uint64_t closure #3 in View.actionSheet<A>(item:content:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v2);
  v4 = (char *)&v6 - v3;
  dispatch thunk of RawRepresentable.rawValue.getter();
  swift_getAssociatedConformanceWitness();
  _convertToAnyHashable<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, AssociatedTypeWitness);
}

uint64_t partial apply for closure #3 in View.actionSheet<A>(item:content:)()
{
  return closure #3 in View.actionSheet<A>(item:content:)();
}

uint64_t outlined consume of ActionSheet?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  if (a4)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text?(a5, a6, a7, a8);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t View.actionSheet(isPresented:content:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(__int128 *__return_ptr, _QWORD *, __n128, __n128, __n128), uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  *(_QWORD *)&v24 = a1;
  *((_QWORD *)&v24 + 1) = a2;
  LOBYTE(v25) = a3;
  v12 = a3 & 1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v13 = MEMORY[0x18D75B9C8](v22);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0uLL;
  v18 = 0uLL;
  v19 = 0uLL;
  if (LOBYTE(v22[0]) == 1)
  {
    a4(&v24, v13, (__n128)0, (__n128)0, (__n128)0);
    v17 = v24;
    v14 = v25;
    v15 = v26;
    v18 = v27;
    v19 = v28;
    v16 = v29;
  }
  v24 = v17;
  v25 = v14;
  v26 = v15;
  v27 = v18;
  v28 = v19;
  v29 = v16;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  *(_BYTE *)(v20 + 32) = v12;
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  swift_retain();
  swift_retain();
  View.presentationCommon(_:onDismiss:id:)((uint64_t)&v24, (uint64_t)partial apply for closure #1 in View.actionSheet(isPresented:content:), v20, (uint64_t)v22, a6, a7);
  swift_release();
  outlined destroy of AccessibilityTableContext?((uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  return outlined consume of ActionSheet?(v24, *((uint64_t *)&v24 + 1), v25, v26, v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1));
}

uint64_t closure #1 in View.actionSheet(isPresented:content:)()
{
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t sub_186FA6F28()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.actionSheet(isPresented:content:)()
{
  return closure #1 in View.actionSheet(isPresented:content:)();
}

uint64_t destroy for ActionSheet(uint64_t a1)
{
  outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 56))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ActionSheet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 40);
    v10 = *(_BYTE *)(a2 + 48);
    outlined copy of Text.Storage(v8, v9, v10);
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    *(_BYTE *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ActionSheet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = (_OWORD *)(a1 + 32);
  v11 = (_OWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 32);
      v14 = *(_QWORD *)(a2 + 40);
      v15 = *(_BYTE *)(a2 + 48);
      outlined copy of Text.Storage(v13, v14, v15);
      v16 = *(_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a1 + 40);
      v18 = *(_BYTE *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = v13;
      *(_QWORD *)(a1 + 40) = v14;
      *(_BYTE *)(a1 + 48) = v15;
      outlined consume of Text.Storage(v16, v17, v18);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 32);
      v22 = *(_OWORD *)(a2 + 48);
      *v10 = *v11;
      *(_OWORD *)(a1 + 48) = v22;
    }
  }
  else if (v12)
  {
    v19 = *(_QWORD *)(a2 + 32);
    v20 = *(_QWORD *)(a2 + 40);
    v21 = *(_BYTE *)(a2 + 48);
    outlined copy of Text.Storage(v19, v20, v21);
    *(_QWORD *)(a1 + 32) = v19;
    *(_QWORD *)(a1 + 40) = v20;
    *(_BYTE *)(a1 + 48) = v21;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
  }
  else
  {
    v23 = *(_OWORD *)(a2 + 48);
    *v10 = *v11;
    *(_OWORD *)(a1 + 48) = v23;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ActionSheet(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 56))
    goto LABEL_5;
  v8 = *(_QWORD *)(a2 + 56);
  if (!v8)
  {
    outlined destroy of Text(a1 + 32);
LABEL_5:
    v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    goto LABEL_6;
  }
  v9 = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_BYTE *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = v9;
  outlined consume of Text.Storage(v10, v11, v12);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ActionSheet()
{
  return &type metadata for ActionSheet;
}

uint64_t sub_186FA7280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 16);
  type metadata accessor for AlertTransformModifier<ActionSheet.Presentation.Key>(255, a2, a3, a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for AlertTransformModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

void type metadata accessor for AlertTransformModifier<ActionSheet.Presentation.Key>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AlertTransformModifier<ActionSheet.Presentation.Key>)
  {
    v4 = type metadata accessor for AlertTransformModifier(0, (uint64_t)&type metadata for ActionSheet.Presentation.Key, (uint64_t)&protocol witness table for ActionSheet.Presentation.Key, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AlertTransformModifier<ActionSheet.Presentation.Key>);
  }
}

uint64_t sub_186FA733C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 8);
  type metadata accessor for AlertTransformModifier<ActionSheet.Presentation.Key>(255, a2, a3, a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for AlertTransformModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t destroy for ActionSheet.Presentation(uint64_t a1)
{
  uint64_t result;

  outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 56))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
    swift_bridgeObjectRelease();
  }
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 72))
    result = swift_release();
  if (*(_QWORD *)(a1 + 120))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 96);
  return result;
}

uint64_t initializeWithCopy for ActionSheet.Presentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 40);
    v10 = *(_BYTE *)(a2 + 48);
    outlined copy of Text.Storage(v8, v9, v10);
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    *(_BYTE *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
  }
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  if (v12)
  {
    v13 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v12;
    *(_QWORD *)(a1 + 80) = v13;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  }
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v14 = (_OWORD *)(a1 + 96);
  v15 = (_OWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 120);
  if (v16)
  {
    v17 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = v16;
    *(_QWORD *)(a1 + 128) = v17;
    (**(void (***)(_OWORD *, _OWORD *))(v16 - 8))(v14, v15);
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 112);
    *v14 = *v15;
    *(_OWORD *)(a1 + 112) = v18;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  return a1;
}

uint64_t assignWithCopy for ActionSheet.Presentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = (_OWORD *)(a1 + 32);
  v11 = (_OWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 32);
      v14 = *(_QWORD *)(a2 + 40);
      v15 = *(_BYTE *)(a2 + 48);
      outlined copy of Text.Storage(v13, v14, v15);
      v16 = *(_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a1 + 40);
      v18 = *(_BYTE *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = v13;
      *(_QWORD *)(a1 + 40) = v14;
      *(_BYTE *)(a1 + 48) = v15;
      outlined consume of Text.Storage(v16, v17, v18);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 32);
      v22 = *(_OWORD *)(a2 + 48);
      *v10 = *v11;
      *(_OWORD *)(a1 + 48) = v22;
    }
  }
  else if (v12)
  {
    v19 = *(_QWORD *)(a2 + 32);
    v20 = *(_QWORD *)(a2 + 40);
    v21 = *(_BYTE *)(a2 + 48);
    outlined copy of Text.Storage(v19, v20, v21);
    *(_QWORD *)(a1 + 32) = v19;
    *(_QWORD *)(a1 + 40) = v20;
    *(_BYTE *)(a1 + 48) = v21;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
  }
  else
  {
    v23 = *(_OWORD *)(a2 + 48);
    *v10 = *v11;
    *(_OWORD *)(a1 + 48) = v23;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v24)
    {
      v25 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 72) = v24;
      *(_QWORD *)(a1 + 80) = v25;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v24)
  {
    v26 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v24;
    *(_QWORD *)(a1 + 80) = v26;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
LABEL_15:
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v27 = (_OWORD *)(a1 + 96);
  v28 = (_OWORD *)(a2 + 96);
  v29 = *(_QWORD *)(a2 + 120);
  if (*(_QWORD *)(a1 + 120))
  {
    if (v29)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 96), (uint64_t *)(a2 + 96));
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 96);
      v30 = *(_QWORD *)(a2 + 128);
      v31 = *(_OWORD *)(a2 + 112);
      *v27 = *v28;
      *(_OWORD *)(a1 + 112) = v31;
      *(_QWORD *)(a1 + 128) = v30;
    }
  }
  else if (v29)
  {
    *(_QWORD *)(a1 + 120) = v29;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    (**(void (***)(uint64_t, uint64_t))(v29 - 8))(a1 + 96, a2 + 96);
  }
  else
  {
    v32 = *v28;
    v33 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *v27 = v32;
    *(_OWORD *)(a1 + 112) = v33;
  }
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  return a1;
}

__n128 __swift_memcpy168_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for ActionSheet.Presentation(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 56))
  {
    v8 = *(_QWORD *)(a2 + 56);
    if (v8)
    {
      v9 = *(_BYTE *)(a2 + 48);
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(_QWORD *)(a1 + 40);
      v12 = *(_BYTE *)(a1 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 48) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 32);
  }
  v13 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v13;
LABEL_6:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 72) = v14;
      *(_QWORD *)(a1 + 80) = v15;
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v14)
  {
    v16 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v16;
    goto LABEL_13;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
LABEL_13:
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 120))
  {
    if (*(_QWORD *)(a2 + 120))
      __swift_destroy_boxed_opaque_existential_1(a1 + 96);
    else
      outlined destroy of AnyHashable(a1 + 96);
  }
  v17 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  return a1;
}

_UNKNOWN **associated type witness table accessor for AlertControllerConvertible.Action : AlertActionConvertible in ActionSheet.Presentation()
{
  return &protocol witness table for Alert.Button;
}

uint64_t sub_186FA792C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v0 + 72))
    {
      outlined consume of Text.Storage(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 88))
    swift_release();
  if (*(_QWORD *)(v0 + 128))
    __swift_destroy_boxed_opaque_existential_1(v0 + 104);
  return swift_deallocObject();
}

uint64_t *outlined retain of ActionSheet?(uint64_t *a1)
{
  outlined copy of ActionSheet?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  return a1;
}

uint64_t outlined copy of ActionSheet?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  if (a4)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    outlined copy of Text?(a5, a6, a7, a8);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t *outlined retain of Text?(uint64_t *a1)
{
  outlined copy of Text?(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

uint64_t _ConditionalContent<>.init(storage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for _ConditionalContent.Storage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

void static _ConditionalContent<>._makeContent(content:inputs:)()
{
  PreferencesInputs.makeIndirectOutputs()();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for _GraphValue();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  type metadata accessor for _ConditionalContent<>.TableColumnProvider();
}

uint64_t sub_186FA7C60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  id v21;

  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ConditionalContent<A, B><>.TableColumnProvider, a1);
  _ConditionalContent.Container.init(content:provider:)();
  v12[2] = type metadata accessor for _ConditionalContent.Info();
  v15 = v2;
  v16 = v1;
  v17 = a1;
  v18 = v4;
  v13 = type metadata accessor for _ConditionalContent.Container();
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BB8], v13);
  v5 = type metadata accessor for Attribute();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v21;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v19, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v12, v13, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v7);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v19 = v9;
  v20 = v10;
  LOBYTE(v15) = 0;
  PreferencesOutputs.setIndirectDependency(_:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *(_QWORD *)v11 = v9;
  *(_DWORD *)(v11 + 8) = v10;
  return result;
}

uint64_t static _ConditionalContent<>._tableColumnCount(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  char v22;
  BOOL v23;
  unsigned __int8 v24;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;

  v5 = *a1;
  v6 = *((_DWORD *)a1 + 2);
  v7 = a1[2];
  v8 = *((_DWORD *)a1 + 6);
  v9 = *((_DWORD *)a1 + 7);
  v11 = *((_DWORD *)a1 + 8);
  v10 = *((_DWORD *)a1 + 9);
  v13 = a1[5];
  v12 = a1[6];
  v14 = *((_DWORD *)a1 + 14);
  v15 = *((_DWORD *)a1 + 15);
  v16 = *((_DWORD *)a1 + 16);
  v17 = *((_DWORD *)a1 + 17);
  v18 = *((_DWORD *)a1 + 18);
  v19 = *((_DWORD *)a1 + 19);
  v20 = *((_DWORD *)a1 + 20);
  v35 = *a1;
  v36 = v6;
  v37 = v7;
  v38 = v8;
  v39 = v9;
  v40 = v11;
  v41 = v10;
  v42 = v13;
  v43 = v12;
  v33 = v12;
  v31 = v15;
  v32 = v14;
  v44 = v14;
  v45 = v15;
  v29 = v17;
  v30 = v16;
  v46 = v16;
  v47 = v17;
  v27 = v19;
  v28 = v18;
  v48 = v18;
  v49 = v19;
  v26 = v20;
  v50 = v20;
  v21 = (*(uint64_t (**)(uint64_t *))(a4 + 72))(&v35);
  if ((v22 & 1) == 0)
  {
    v35 = v5;
    v36 = v6;
    v37 = v7;
    v38 = v8;
    v39 = v9;
    v40 = v11;
    v41 = v10;
    v42 = v13;
    v43 = v33;
    v44 = v32;
    v45 = v31;
    v46 = v30;
    v47 = v29;
    v48 = v28;
    v49 = v27;
    v50 = v26;
    v23 = v21 != (*(uint64_t (**)(uint64_t *))(a5 + 72))(&v35);
    if (((v24 | v23) & 1) != 0)
      return 0;
  }
  return v21;
}

void _ConditionalContent<>.TableColumnProvider.detachOutputs()()
{
  PreferencesOutputs.detachIndirectOutputs()();
}

uint64_t _ConditionalContent<>.TableColumnProvider.attachOutputs(to:)()
{
  return PreferencesOutputs.attachIndirectOutputs(to:)();
}

uint64_t _ConditionalContent<>.TableColumnProvider.makeChildInputs()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;

  v17 = *(_DWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v18 = *(_QWORD *)(v1 + 40);
  v4 = *(_DWORD *)(v1 + 80);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v1 + 72);
  *(_DWORD *)(a1 + 80) = v4;
  swift_beginAccess();
  v5 = *(_DWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  v15 = *(_OWORD *)(v3 + 48);
  v16 = *(_OWORD *)(v3 + 32);
  v8 = *(_QWORD *)(v3 + 64);
  v7 = *(_QWORD *)(v3 + 72);
  v9 = *(_BYTE *)(v3 + 80);
  v10 = *(_BYTE *)(v3 + 81);
  v11 = *(_QWORD *)(v3 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>();
  v12 = swift_allocObject();
  *(_DWORD *)(v12 + 16) = v5;
  *(_QWORD *)(v12 + 24) = v6;
  *(_OWORD *)(v12 + 32) = v16;
  *(_OWORD *)(v12 + 48) = v15;
  *(_QWORD *)(v12 + 64) = v8;
  *(_QWORD *)(v12 + 72) = v7;
  *(_BYTE *)(v12 + 80) = v9;
  *(_BYTE *)(v12 + 81) = v10;
  *(_QWORD *)(v12 + 88) = v11;
  *(_QWORD *)a1 = swift_retain();
  *(_DWORD *)(a1 + 8) = v17;
  *(_QWORD *)(a1 + 16) = v12;
  v13 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t _ConditionalContent<>.TableColumnProvider.makeColumnOutputs<A>(child:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  _BYTE v22[4];

  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = *((_DWORD *)a2 + 20);
  _GraphValue.init(_:)();
  v14 = v8;
  v15 = v9;
  v16 = v10;
  v12 = *(_OWORD *)(a2 + 5);
  v17 = *(_OWORD *)(a2 + 3);
  v18 = v12;
  v19 = *(_OWORD *)(a2 + 7);
  v20 = a2[9];
  v21 = v11;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(a5 + 64))(v22, &v14, a4, a5);
}

uint64_t _ConditionalContent<>.TableColumnProvider.makeTrueOutputs(child:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 80);
  v7 = *(_QWORD *)a2;
  v8 = v3;
  v9 = v4;
  v10 = *(_OWORD *)(a2 + 24);
  v11 = *(_OWORD *)(a2 + 40);
  v12 = *(_OWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = v5;
  return _ConditionalContent<>.TableColumnProvider.makeColumnOutputs<A>(child:inputs:)(a1, &v7, a3, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 32));
}

uint64_t _ConditionalContent<>.TableColumnProvider.makeFalseOutputs(child:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 80);
  v7 = *(_QWORD *)a2;
  v8 = v3;
  v9 = v4;
  v10 = *(_OWORD *)(a2 + 24);
  v11 = *(_OWORD *)(a2 + 40);
  v12 = *(_OWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = v5;
  return _ConditionalContent<>.TableColumnProvider.makeColumnOutputs<A>(child:inputs:)(a1, &v7, a3, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 40));
}

uint64_t protocol witness for ConditionalContentProvider.inputs.getter in conformance _ConditionalContent<A, B><>.TableColumnProvider@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_DWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = *(_DWORD *)(v1 + 80);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v1 + 72);
  *(_DWORD *)(a1 + 80) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for ConditionalContentProvider.outputs.getter in conformance _ConditionalContent<A, B><>.TableColumnProvider@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 96);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 88);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t _ConditionalContent.init(__storage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for _ConditionalContent.Storage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

void type metadata accessor for _ConditionalContent<>.TableColumnProvider()
{
  JUMPOUT(0x18D75FF28);
}

void protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance <> _ConditionalContent<A, B>()
{
  static _ConditionalContent<>._makeContent(content:inputs:)();
}

uint64_t protocol witness for static TableColumnContent._tableColumnCount(inputs:) in conformance <> _ConditionalContent<A, B>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return static _ConditionalContent<>._tableColumnCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t Optional<A>.ChildTableColumn.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t Value;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;

  v31 = a3;
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v28 - v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v30 = type metadata accessor for EmptyTableColumnContent(255, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v13 = type metadata accessor for _ConditionalContent.Storage();
  v14 = type metadata accessor for Optional();
  v28 = *(_QWORD *)(v14 - 8);
  v29 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v28 - v16;
  v18 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v28 - v21;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, Value, v5);
  v33 = a1;
  v34 = a2;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Optional<A>.ChildTableColumn.value.getter, (uint64_t)v32, MEMORY[0x1E0DEDCE8], v13, v24, (uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v13) == 1)
  {
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v29);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v22, v17, v13);
  }
  v25 = swift_checkMetadataState();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EmptyTableColumnContent<A>, v25);
  v26 = type metadata accessor for _ConditionalContent.Storage();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v31, v22, v26);
}

uint64_t closure #1 in Optional<A>.ChildTableColumn.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for EmptyTableColumnContent(255, AssociatedTypeWitness, AssociatedConformanceWitness, v5);
  type metadata accessor for _ConditionalContent.Storage();
  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance A?<A>.ChildTableColumn@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for EmptyTableColumnContent(255, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
  v5 = type metadata accessor for _ConditionalContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 1, 1, v5);
}

uint64_t protocol witness for Rule.value.getter in conformance A?<A>.ChildTableColumn@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Optional<A>.ChildTableColumn.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance A?<A>.ChildTableColumn(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for A?<A>.ChildTableColumn, a1);
  return static AsyncAttribute.flags.getter();
}

void static Optional<A>._makeContent(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for Optional();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for EmptyTableColumnContent(255, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  type metadata accessor for _ConditionalContent();
  v11 = type metadata accessor for Optional<A>.ChildTableColumn(0, a3, a4, v10);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for A?<A>.ChildTableColumn, v11);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EmptyTableColumnContent<A>, v9);
  static _ConditionalContent<>._makeContent(content:inputs:)();
}

uint64_t static Optional<A>._tableColumnCount(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  v3 = *((_DWORD *)a1 + 2);
  v4 = a1[2];
  v5 = *((_DWORD *)a1 + 20);
  v8 = *a1;
  v9 = v3;
  v10 = v4;
  v6 = *(_OWORD *)(a1 + 5);
  v11 = *(_OWORD *)(a1 + 3);
  v12 = v6;
  v13 = *(_OWORD *)(a1 + 7);
  v14 = a1[9];
  v15 = v5;
  (*(uint64_t (**)(uint64_t *))(a3 + 72))(&v8);
  return 0;
}

void protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance <A> A?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static Optional<A>._makeContent(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for static TableColumnContent._tableColumnCount(inputs:) in conformance <A> A?(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  static Optional<A>._tableColumnCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
  return 0;
}

uint64_t protocol witness for TableColumnList.visitColumns<A>(applying:from:) in conformance EmptyTableColumnContent<A>.EmptyTableColumnList()
{
  return protocol witness for static PreferenceKey._isReadableByHost.getter in conformance AccessibilityLargeContentViewTree.Key();
}

uint64_t static EmptyTableColumnContent._makeContent(content:inputs:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  PreferencesOutputs.init()();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t implicit closure #1 in static EmptyTableColumnContent._makeContent(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[6];

  v6[5] = *MEMORY[0x1E0C80C00];
  v6[3] = type metadata accessor for EmptyTableColumnContent.EmptyTableColumnList(0, a1, a2, a4);
  v6[4] = &protocol witness table for EmptyTableColumnContent<A>.EmptyTableColumnList;
  type metadata accessor for TableColumnList();
  type metadata accessor for External<TableColumnList>();
  lazy protocol witness table accessor for type External<TableColumnList> and conformance External<A>();
  v4 = Attribute.init<A>(body:value:flags:update:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return v4;
}

uint64_t static EmptyTableColumnContent._tableColumnCount(inputs:)()
{
  return 0;
}

uint64_t protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance EmptyTableColumnContent<A>@<X0>(uint64_t a1@<X8>)
{
  return static EmptyTableColumnContent._makeContent(content:inputs:)(a1);
}

uint64_t protocol witness for static TableColumnContent._tableColumnCount(inputs:) in conformance EmptyTableColumnContent<A>()
{
  return 0;
}

uint64_t type metadata accessor for EmptyTableColumnContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EmptyTableColumnContent);
}

uint64_t type metadata accessor for Optional<A>.ChildTableColumn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Optional<A>.ChildTableColumn);
}

uint64_t partial apply for implicit closure #1 in static EmptyTableColumnContent._makeContent(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return implicit closure #1 in static EmptyTableColumnContent._makeContent(content:inputs:)(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a3, a4);
}

uint64_t associated type witness table accessor for TableColumnContent.TableColumnSortComparator : SortComparator in <> _ConditionalContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for TableColumnContent.TableRowValue : Identifiable in <> _ConditionalContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for <> _ConditionalContent<A, B>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> _ConditionalContent<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> _ConditionalContent<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> _ConditionalContent<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> _ConditionalContent<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <A> A?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <A> A?, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <A> A?, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <A> A?, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <A> A?, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for TableColumnContent.TableColumnSortComparator : SortComparator in EmptyTableColumnContent<A>()
{
  return MEMORY[0x1E0CB2698];
}

uint64_t instantiation function for generic protocol witness table for EmptyTableColumnContent<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EmptyTableColumnContent<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for _ConditionalContent<>.TableColumnProvider()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ConditionalContent<>.TableColumnProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ConditionalContent<>.TableColumnProvider(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  return a1;
}

__n128 __swift_memcpy100_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for _ConditionalContent<>.TableColumnProvider(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ConditionalContent<>.TableColumnProvider(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 100))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ConditionalContent<>.TableColumnProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 100) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 100) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void base witness table accessor for _AttributeBody in A?<A>.ChildTableColumn()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in Optional<A>.ChildTableColumn.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Optional<A>.ChildTableColumn.value.getter(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t type metadata accessor for EmptyTableColumnContent.EmptyTableColumnList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EmptyTableColumnContent.EmptyTableColumnList);
}

unint64_t type metadata accessor for TableColumnList()
{
  unint64_t result;

  result = lazy cache variable for type metadata for TableColumnList;
  if (!lazy cache variable for type metadata for TableColumnList)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TableColumnList);
  }
  return result;
}

void type metadata accessor for External<TableColumnList>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for External<TableColumnList>)
  {
    type metadata accessor for TableColumnList();
    v0 = type metadata accessor for External();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<TableColumnList>);
  }
}

unint64_t lazy protocol witness table accessor for type External<TableColumnList> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<TableColumnList> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<TableColumnList> and conformance External<A>)
  {
    type metadata accessor for External<TableColumnList>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<TableColumnList> and conformance External<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ListControlGroupStyle()
{
  return &type metadata for ListControlGroupStyle;
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in ListControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

void protocol witness for ControlGroupStyle.makeBody(configuration:) in conformance ListControlGroupStyle(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 256;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>, _TraitWritingModifier<UseCompactSectionSpacingTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>, _TraitWritingModifier<UseCompactSectionSpacingTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>, _TraitWritingModifier<UseCompactSectionSpacingTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>, _TraitWritingModifier<UseCompactSectionSpacingTraitKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>();
    v3[1] = lazy protocol witness table accessor for type _TraitWritingModifier<UseCompactSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>, _TraitWritingModifier<UseCompactSectionSpacingTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>, _TraitWritingModifier<UseCompactSectionSpacingTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>, _TraitWritingModifier<UseCompactSectionSpacingTraitKey>>)
  {
    type metadata accessor for Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>();
    type metadata accessor for _TraitWritingModifier<UseCompactSectionSpacingTraitKey>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>, _TraitWritingModifier<UseCompactSectionSpacingTraitKey>>);
  }
}

void type metadata accessor for Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>)
  {
    v0 = type metadata accessor for Section(0, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Label, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Content, MEMORY[0x1E0CE7C38]);
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>);
  }
}

void type metadata accessor for _TraitWritingModifier<UseCompactSectionSpacingTraitKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<UseCompactSectionSpacingTraitKey>)
  {
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<UseCompactSectionSpacingTraitKey>);
  }
}

unint64_t lazy protocol witness table accessor for type Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[3];

  result = lazy protocol witness table cache variable for type Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>;
  if (!lazy protocol witness table cache variable for type Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>)
  {
    type metadata accessor for Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>();
    v2[0] = &protocol witness table for ControlGroupStyleConfiguration.Label;
    v2[1] = &protocol witness table for ControlGroupStyleConfiguration.Content;
    v2[2] = MEMORY[0x1E0CE7C28];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<UseCompactSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<UseCompactSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<UseCompactSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<UseCompactSectionSpacingTraitKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<UseCompactSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationState.Seeds()
{
  return &type metadata for NavigationState.Seeds;
}

uint64_t destroy for NavigationState(_QWORD *a1)
{
  uint64_t result;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (a1[5])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  result = a1[12];
  if (result)
  {
    if (result == 1)
      return result;
    swift_release();
    swift_release();
  }
  if (a1[14])
    swift_release();
  result = a1[17];
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for NavigationState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 48);
    v8 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v7;
    v9 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v9;
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  }
  v11 = *(_QWORD *)(a2 + 96);
  if (v11 != 1)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    if (v11)
    {
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = v11;
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    }
    v14 = *(_QWORD *)(a2 + 112);
    *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v14;
      *(_QWORD *)(a1 + 120) = v15;
      swift_retain();
      v16 = *(_QWORD *)(a2 + 136);
      if (v16)
      {
LABEL_11:
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
        *(_QWORD *)(a1 + 136) = v16;
        *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
        swift_retain();
        swift_retain();
LABEL_14:
        *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
        return a1;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      v16 = *(_QWORD *)(a2 + 136);
      if (v16)
        goto LABEL_11;
    }
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    goto LABEL_14;
  }
  v12 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  v13 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v13;
  return a1;
}

uint64_t assignWithCopy for NavigationState(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t v36;
  char v37;
  __int128 v38;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 32);
  v5 = (_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v6)
    {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    }
    else
    {
      outlined destroy of NavigationListState(a1 + 32);
      v7 = *(_OWORD *)(a2 + 60);
      v8 = *(_OWORD *)(a2 + 48);
      *v4 = *v5;
      *(_OWORD *)(a1 + 48) = v8;
      *(_OWORD *)(a1 + 60) = v7;
    }
  }
  else if (v6)
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *v5;
    v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
    *v4 = v9;
    *(_OWORD *)(a1 + 48) = v10;
  }
  v11 = (_OWORD *)(a1 + 80);
  v12 = (_OWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a2 + 96);
  if (v13 != 1)
  {
    if (v14 == 1)
    {
      outlined destroy of NavigationSplitViewState((_QWORD *)(a1 + 80));
      *v11 = *v12;
      v19 = *(_OWORD *)(a2 + 112);
      v18 = *(_OWORD *)(a2 + 128);
      v20 = *(_OWORD *)(a2 + 96);
      *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
      *(_OWORD *)(a1 + 112) = v19;
      *(_OWORD *)(a1 + 128) = v18;
      *(_OWORD *)(a1 + 96) = v20;
      return a1;
    }
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
    v21 = (_OWORD *)(a1 + 88);
    v22 = (_OWORD *)(a2 + 88);
    v23 = *(_QWORD *)(a2 + 96);
    if (v13)
    {
      if (v23)
      {
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
        swift_retain();
        swift_release();
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        swift_retain();
        swift_release();
        *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      }
      else
      {
        outlined destroy of TableRowList?(a1 + 88, (uint64_t)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
        v28 = *(_BYTE *)(a2 + 104);
        *v21 = *v22;
        *(_BYTE *)(a1 + 104) = v28;
      }
    }
    else if (v23)
    {
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      swift_retain();
      swift_retain();
    }
    else
    {
      v29 = *v22;
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      *v21 = v29;
    }
    v30 = *(_QWORD *)(a1 + 112);
    *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
    v31 = *(_QWORD *)(a2 + 112);
    if (v30)
    {
      if (v31)
      {
        v32 = *(_QWORD *)(a2 + 120);
        *(_QWORD *)(a1 + 112) = v31;
        *(_QWORD *)(a1 + 120) = v32;
        swift_retain();
        swift_release();
        goto LABEL_35;
      }
      swift_release();
    }
    else if (v31)
    {
      v33 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v31;
      *(_QWORD *)(a1 + 120) = v33;
      swift_retain();
      goto LABEL_35;
    }
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_35:
    v34 = (_OWORD *)(a1 + 128);
    v35 = (_OWORD *)(a2 + 128);
    v36 = *(_QWORD *)(a2 + 136);
    if (*(_QWORD *)(a1 + 136))
    {
      if (v36)
      {
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
        swift_retain();
        swift_release();
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
        swift_retain();
        swift_release();
        *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      }
      else
      {
        outlined destroy of TableRowList?(a1 + 128, (uint64_t)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
        v37 = *(_BYTE *)(a2 + 144);
        *v34 = *v35;
        *(_BYTE *)(a1 + 144) = v37;
      }
      goto LABEL_42;
    }
    if (!v36)
    {
      v38 = *v35;
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *v34 = v38;
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  if (v14 != 1)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    if (*(_QWORD *)(a2 + 96))
    {
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      swift_retain();
      swift_retain();
    }
    else
    {
      v24 = *(_OWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = v24;
    }
    *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
    v25 = *(_QWORD *)(a2 + 112);
    if (v25)
    {
      v26 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v25;
      *(_QWORD *)(a1 + 120) = v26;
      swift_retain();
      if (!*(_QWORD *)(a2 + 136))
        goto LABEL_25;
    }
    else
    {
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      if (!*(_QWORD *)(a2 + 136))
      {
LABEL_25:
        v27 = *(_OWORD *)(a2 + 128);
        *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = v27;
LABEL_42:
        *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
        return a1;
      }
    }
LABEL_39:
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    swift_retain();
    swift_retain();
    goto LABEL_42;
  }
  *v11 = *v12;
  v15 = *(_OWORD *)(a2 + 96);
  v16 = *(_OWORD *)(a2 + 112);
  v17 = *(_OWORD *)(a2 + 128);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v16;
  *(_OWORD *)(a1 + 128) = v17;
  *(_OWORD *)(a1 + 96) = v15;
  return a1;
}

uint64_t outlined destroy of NavigationListState(uint64_t a1)
{
  destroy for MenuBuilderContext();
  return a1;
}

_QWORD *outlined destroy of NavigationSplitViewState(_QWORD *a1)
{
  destroy for NavigationSplitViewState(a1);
  return a1;
}

__n128 __swift_memcpy146_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for NavigationState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD *)(a2 + 40);
    if (v4)
    {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v4;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      goto LABEL_6;
    }
    outlined destroy of NavigationListState(a1 + 32);
  }
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
LABEL_6:
  v6 = *(_QWORD *)(a1 + 96);
  if (v6 != 1)
  {
    v7 = *(_QWORD *)(a2 + 96);
    if (v7 == 1)
    {
      outlined destroy of NavigationSplitViewState((_QWORD *)(a1 + 80));
      goto LABEL_9;
    }
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    if (v6)
    {
      if (v7)
      {
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
        swift_release();
        *(_QWORD *)(a1 + 96) = v7;
        swift_release();
        *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
        goto LABEL_15;
      }
      outlined destroy of TableRowList?(a1 + 88, (uint64_t)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    }
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
LABEL_15:
    v10 = *(_QWORD *)(a2 + 112);
    v11 = *(_QWORD *)(a1 + 112);
    *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
    if (v11)
    {
      if (v10)
      {
        v12 = *(_QWORD *)(a2 + 120);
        *(_QWORD *)(a1 + 112) = v10;
        *(_QWORD *)(a1 + 120) = v12;
        swift_release();
        goto LABEL_22;
      }
      swift_release();
    }
    else if (v10)
    {
      v13 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v10;
      *(_QWORD *)(a1 + 120) = v13;
      goto LABEL_22;
    }
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_22:
    if (*(_QWORD *)(a1 + 136))
    {
      v14 = *(_QWORD *)(a2 + 136);
      if (v14)
      {
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
        swift_release();
        *(_QWORD *)(a1 + 136) = v14;
        swift_release();
        *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
LABEL_27:
        *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
        return a1;
      }
      outlined destroy of TableRowList?(a1 + 128, (uint64_t)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    }
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    goto LABEL_27;
  }
LABEL_9:
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v8;
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 146))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 144) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 146) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 146) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t outlined copy of NavigationState.Base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unint64_t a38,uint64_t a39)
{
  uint64_t result;

  if (a38 >> 62 == 2)
  {
    swift_bridgeObjectRetain();
    return outlined copy of NavigationSplitViewState?(a2, a3, a4, a5, a6, a7, a8, a9, a10, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
  }
  else if (a38 >> 62 == 1)
  {
    outlined copy of NavigationListState?(a6, a7);
    outlined copy of Binding<AnyNavigationPath>?(a12, a13);
    outlined copy of NavigationColumnState.ColumnContent(a15, a16, a17, a18, a19, a20, a21, a22);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    return outlined copy of ResolvedNavigationDestinations?(a39);
  }
  return result;
}

uint64_t outlined copy of NavigationListState?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined copy of Binding<AnyNavigationPath>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of NavigationColumnState.ColumnContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a8 < 0)
    return outlined copy of NavigationColumnState.ReplacedRoot?(a1, a2, a3, a4);
  outlined copy of NavigationColumnState.ReplacedRoot?(a1, a2, a3, a4);
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t outlined copy of NavigationColumnState.ReplacedRoot?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((~a1 & 0xF000000000000007) != 0)
    return outlined copy of NavigationColumnState.ReplacedRoot(a1, a2, a3, a4);
  return a1;
}

uint64_t outlined copy of NavigationColumnState.ReplacedRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    swift_retain();
    swift_retain();
    outlined copy of _ViewList_ID.Canonical?(a3, a4);
  }
  return swift_retain();
}

uint64_t outlined copy of ResolvedNavigationDestinations?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of NavigationState.Base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unint64_t a38,uint64_t a39)
{
  uint64_t result;

  if (a38 >> 62 == 2)
  {
    swift_bridgeObjectRelease();
    return outlined copy of NavigationSplitViewState?(a2, a3, a4, a5, a6, a7, a8, a9, a10, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  }
  else if (a38 >> 62 == 1)
  {
    outlined consume of NavigationListState?(a6, a7);
    outlined consume of Binding<AnyNavigationPath>?(a12, a13);
    outlined consume of NavigationColumnState.ColumnContent(a15, a16, a17, a18, a19, a20, a21, a22);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    return outlined consume of ResolvedNavigationDestinations?(a39);
  }
  return result;
}

uint64_t outlined consume of NavigationListState?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of Binding<AnyNavigationPath>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of NavigationColumnState.ColumnContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a8 < 0)
    return outlined consume of NavigationColumnState.ReplacedRoot?(a1, a2, a3, a4);
  outlined consume of NavigationColumnState.ReplacedRoot?(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t outlined consume of NavigationColumnState.ReplacedRoot?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((~a1 & 0xF000000000000007) != 0)
    return outlined consume of NavigationColumnState.ReplacedRoot(a1, a2, a3, a4);
  return a1;
}

uint64_t outlined consume of NavigationColumnState.ReplacedRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(a3, a4);
  }
  return swift_release();
}

uint64_t outlined consume of ResolvedNavigationDestinations?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of NavigationSplitViewState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, void (*a10)(uint64_t, uint64_t, uint64_t), void (*a11)(uint64_t, uint64_t))
{
  uint64_t result;

  if (a3 != 1)
  {
    a10(a2, a3, a4);
    a11(a5, a6);
    return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))a10)(a7, a8, a9);
  }
  return result;
}

void *__swift_memcpy392_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x188uLL);
}

ValueMetadata *type metadata accessor for NavigationState.StackContent()
{
  return &type metadata for NavigationState.StackContent;
}

uint64_t getEnumTagSinglePayload for NavigationState.StackContent.Key(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 6;
  v5 = v3 - 6;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationState.StackContent.Key(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 5;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationState.StackContent.Key()
{
  return &type metadata for NavigationState.StackContent.Key;
}

uint64_t (*specialized Dictionary.subscript.modify(_QWORD *a1, Swift::UInt a2, unsigned __int8 a3, Swift::UInt a4))()
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = specialized Dictionary._Variant.subscript.modify(v8, a2, a3, a4);
  return Dictionary.subscript.modifyspecialized ;
}

void (*specialized Dictionary.subscript.modify(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v4;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  outlined init with copy of ToolbarPlacement.Role(a2, (uint64_t)v4);
  v4[9] = specialized Dictionary._Variant.subscript.modify(v4 + 5, (uint64_t)v4);
  return Dictionary.subscript.modifyspecialized ;
}

{
  _QWORD *v4;

  v4 = malloc(0x58uLL);
  *a1 = v4;
  v4[9] = a2;
  outlined init with take of TableColumnCustomizationID.Base(a2, (uint64_t)v4);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TableColumnCustomizationID.Base);
  v4[10] = specialized Dictionary._Variant.subscript.modify(v4 + 5, a2);
  return Dictionary.subscript.modifyspecialized ;
}

{
  _QWORD *v4;

  v4 = malloc(0xA8uLL);
  *a1 = v4;
  outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)v4);
  v4[20] = specialized Dictionary._Variant.subscript.modify(v4 + 16, (uint64_t)v4);
  return Dictionary.subscript.modifyspecialized ;
}

void Dictionary.subscript.modifyspecialized (uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(*(_QWORD *)a1 + 40, 0);
  outlined destroy of ToolbarPlacement.Role((uint64_t)v1);
  free(v1);
}

{
  void *v1;
  uint64_t v2;

  v1 = *(void **)a1;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 40, 0);
  outlined retain of TableColumnCustomizationID.Base(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TableColumnCustomizationID.Base);
  free(v1);
}

{
  void *v1;

  v1 = *(void **)a1;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 160))(*(_QWORD *)a1 + 128, 0);
  outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v1);
  free(v1);
}

void (*specialized Dictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(_QWORD *a1)
{
  _BYTE *v8;

  v8 = malloc(0x40uLL);
  *a1 = v8;
  v8[56] = a4;
  *((_QWORD *)v8 + 4) = a2;
  *((_QWORD *)v8 + 5) = a3;
  outlined copy of TabCustomizationID.Base();
  *((_QWORD *)v8 + 6) = specialized Dictionary._Variant.subscript.modify(v8, a2, a3, a4 & 1);
  return Dictionary.subscript.modifyspecialized ;
}

void Dictionary.subscript.modifyspecialized (_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  outlined consume of TabCustomizationID.Base();
  free(v1);
}

{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();
  free(v1);
}

{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t (*specialized Dictionary.subscript.modify(_QWORD *a1, unint64_t a2, unint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = specialized Dictionary._Variant.subscript.modify(v6, a2, a3);
  return Dictionary.subscript.modifyspecialized ;
}

void (*specialized Dictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, Swift::UInt a4, unsigned __int8 a5))(_QWORD *a1)
{
  _QWORD *v10;

  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[4] = a3;
  swift_bridgeObjectRetain();
  v10[5] = specialized Dictionary._Variant.subscript.modify(v10, a2, a3, a4, a5);
  return Dictionary.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary.subscript.modify(_QWORD *a1, Swift::UInt32 a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized Dictionary._Variant.subscript.modify(v4, a2);
  return Dictionary.subscript.modifyspecialized ;
}

uint64_t NavigationState.stackContent(for:)@<X0>(Swift::UInt a1@<X0>, unsigned __int8 a2@<W1>, Swift::UInt a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v13;
  char v14;
  _BYTE __dst[299];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int16 v26;

  v5 = v4;
  v7 = *((_QWORD *)v4 + 3);
  if (a2 == 4)
  {
    v16 = *v5;
    v17 = *((_QWORD *)v5 + 2);
    v18 = v7;
    v8 = v5[7];
    v23 = v5[6];
    v24 = v8;
    v25 = v5[8];
    v26 = *((_WORD *)v5 + 72);
    v9 = v5[3];
    v19 = v5[2];
    v20 = v9;
    v10 = v5[5];
    v21 = v5[4];
    v22 = v10;
    return NavigationState.mergedStackContent(for:columnCount:)(a1, a3, a4);
  }
  else
  {
    if (*(_QWORD *)(v7 + 16))
    {
      v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, a3);
      if ((v14 & 1) != 0)
      {
        memcpy(__dst, (const void *)(*(_QWORD *)(v7 + 56) + 304 * v13), sizeof(__dst));
        __asm { BR              X10 }
      }
    }
    _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)&v16);
    return outlined init with take of Image.Resolved?((uint64_t)&v16, a4, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  }
}

uint64_t NavigationState.mergedStackContent(for:columnCount:)@<X0>(Swift::UInt a1@<X0>, Swift::UInt a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v3;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unsigned __int16 v18;
  uint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unsigned __int16 v26;
  _BYTE __src[392];
  _BYTE __dst[400];
  _OWORD v29[5];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unsigned __int16 v34;

  v7 = v3[7];
  v31 = v3[6];
  v32 = v7;
  v33 = v3[8];
  v34 = *((_WORD *)v3 + 72);
  v8 = v3[3];
  v29[2] = v3[2];
  v29[3] = v8;
  v9 = v3[5];
  v29[4] = v3[4];
  v30 = v9;
  v10 = *v3;
  v11 = v3[1];
  if (a2 == 2)
    v12 = &outlined read-only object #0 of NavigationState.mergedStackContent(for:columnCount:);
  else
    v12 = &outlined read-only object #1 of NavigationState.mergedStackContent(for:columnCount:);
  v29[0] = v10;
  v29[1] = v11;
  outlined retain of NavigationState((uint64_t)v29);
  v13 = specialized Sequence.compactMap<A>(_:)((uint64_t)v12, (uint64_t)v29, a1, a2);
  outlined release of NavigationState((uint64_t)v29);
  swift_bridgeObjectRelease();
  if (*((_QWORD *)v13 + 2) == a2)
  {
    v14 = v30;
    v15 = v31;
    v16 = v32;
    v17 = v33;
    v20 = a3;
    v21 = v13;
    v18 = v34;
    v22 = v30;
    v23 = v31;
    v24 = v32;
    v25 = v33;
    v26 = v34;
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi1_(&v21);
    outlined init with take of NavigationState.Base(&v21, __src);
    memcpy(__dst, __src, 0x188uLL);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__dst);
    outlined init with take of Image.Resolved?((uint64_t)__dst, v20, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    return outlined copy of NavigationSplitViewState?(v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
  }
  else
  {
    swift_bridgeObjectRelease();
    _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)__dst);
    return outlined init with take of Image.Resolved?((uint64_t)__dst, a3, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  }
}

uint64_t NavigationState.isSelected(_:in:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v18;

  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 6)
  {
    v6 = v2 + 4;
    v7 = v2[5];
    if (!v7)
    {
LABEL_10:
      v16 = 0;
      return v16 & 1;
    }
  }
  else
  {
    v8 = v2[3];
    if (!*(_QWORD *)(v8 + 16))
      goto LABEL_10;
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(a2 + 8), v5, *(_QWORD *)(a2 + 24));
    if ((v10 & 1) == 0)
      goto LABEL_10;
    v11 = *(_QWORD *)(v8 + 56) + 304 * v9;
    v6 = (uint64_t *)(v11 + 40);
    v7 = *(_QWORD *)(v11 + 48);
    if (!v7)
      goto LABEL_10;
  }
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_10;
  v12 = *v6;
  specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v13 & 1) == 0)
    goto LABEL_10;
  outlined copy of NavigationListState?(v12, v7);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<AnyListSelection>, (uint64_t)&type metadata for AnyListSelection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v15 = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](&v18, v15);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 104))(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of NavigationListState?(v12, v7);
  return v16 & 1;
}

uint64_t NavigationState.isSelected(_:in:)(uint64_t a1, Swift::UInt a2, unsigned __int8 a3, Swift::UInt a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned __int8 v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  Swift::UInt v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[38];
  uint64_t __dst[39];

  v5 = *(_QWORD *)(v4 + 24);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_9;
  v6 = a4;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
  if ((v11 & 1) == 0)
    goto LABEL_9;
  v32 = a2;
  memcpy(__dst, (const void *)(*(_QWORD *)(v5 + 56) + 304 * v10), 0x12BuLL);
  v12 = __dst[21];
  v41 = a1;
  if (__dst[21] < 0)
  {
    outlined retain of NavigationColumnState(__dst);
LABEL_7:
    if (a3 - 2 >= 4)
    {
      if (a3)
        v21 = 2;
      else
        v21 = v6 == 3 ? 1 : 2;
      if (*(_QWORD *)(v5 + 16))
      {
        v22 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v21, v6);
        if ((v23 & 1) != 0)
        {
          memcpy(v42, (const void *)(*(_QWORD *)(v5 + 56) + 304 * v22), 0x12BuLL);
          v25 = v42[14];
          v24 = v42[15];
          v26 = v42[16];
          v27 = v42[17];
          v28 = v42[18];
          v29 = v42[19];
          v30 = v42[20];
          v31 = v42[21];
          if (v42[21] < 0)
          {
            if ((v42[14] & 0xF000000000000007) == 0xF000000000000007)
            {
              outlined retain of NavigationColumnState(v42);
              outlined consume of NavigationColumnState.ColumnContent(v25, v24, v26, v27, v28, v29, v30, v31);
LABEL_26:
              v19 = 0;
              goto LABEL_27;
            }
          }
          else if ((v42[14] & 0xF000000000000007) == 0xF000000000000007)
          {
LABEL_25:
            outlined retain of NavigationColumnState(v42);
            goto LABEL_26;
          }
          if ((v42[14] & 0x8000000000000000) == 0)
          {
            v38 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v42[14] + 176);
            v40 = v42[15];
            outlined retain of NavigationColumnState(v42);
            outlined copy of NavigationColumnState.ColumnContent(v25, v24, v26, v27, v28, v29, v30, v31);
            swift_retain();
            v19 = v38(v41);
            swift_release();
            outlined consume of NavigationColumnState.ColumnContent(v25, v40, v26, v27, v28, v29, v30, v31);
LABEL_27:
            outlined release of NavigationColumnState(__dst);
            outlined release of NavigationColumnState(v42);
            return v19 & 1;
          }
          goto LABEL_25;
        }
      }
    }
    outlined release of NavigationColumnState(__dst);
LABEL_9:
    v19 = 0;
    return v19 & 1;
  }
  v39 = v6;
  v13 = __dst[20];
  v14 = __dst[19];
  v15 = __dst[18];
  v16 = __dst[17];
  v17 = __dst[16];
  v18 = __dst[15];
  v33 = __dst[14];
  v34 = __dst[16];
  v35 = __dst[18];
  outlined copy of NavigationColumnState.ColumnContent(__dst[14], __dst[15], __dst[16], __dst[17], __dst[18], __dst[19], __dst[20], __dst[21]);
  v36 = v16;
  v37 = v14;
  outlined copy of NavigationColumnState.ColumnContent(v33, v18, v17, v16, v15, v14, v13, v12);
  outlined retain of NavigationColumnState(__dst);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NavigationColumnState.ReplacedRoot?(v33, v18, v34, v16);
  LOBYTE(v16) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 184))(v12);
  swift_release();
  v6 = v39;
  outlined consume of NavigationColumnState.ColumnContent(v33, v18, v34, v36, v35, v37, v13, v12);
  if ((v16 & 1) == 0)
    goto LABEL_7;
  outlined release of NavigationColumnState(__dst);
  v19 = 1;
  return v19 & 1;
}

uint64_t NavigationState.canDismissRoot(of:)(Swift::UInt a1, unsigned __int8 a2, Swift::UInt a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  unsigned __int8 v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD __dst[19];

  if ((a2 - 1) > 1u)
  {
LABEL_19:
    v20 = 0;
    return v20 & 1;
  }
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 136);
  v9 = *(_WORD *)(v3 + 144);
  if (*(_QWORD *)(v3 + 96) != 1)
    __asm { BR              X11 }
  v23 = *(_OWORD *)(v3 + 120);
  v24 = *(_OWORD *)(v3 + 104);
  v25 = *(_OWORD *)(v3 + 80);
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_18;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, a3);
  if ((v11 & 1) == 0
    || (memcpy(__dst, (const void *)(*(_QWORD *)(v7 + 56) + 304 * v10), 0x12BuLL),
        (NavigationColumnState.hasDismissableColumnContent.getter() & 1) == 0))
  {
    if (!*(_QWORD *)(v7 + 16))
      goto LABEL_18;
    v12 = a2 == 2 && a3 == 3;
    v13 = v12;
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1, v13, a3);
    if ((v15 & 1) == 0)
      goto LABEL_18;
    v16 = *(_QWORD *)(v7 + 56) + 304 * v14;
    v17 = *(_QWORD *)(v16 + 48);
    if (!v17
      || (v18 = *(_DWORD *)(v16 + 80),
          v19 = *(_QWORD *)(v16 + 72),
          LODWORD(__dst[0]) = *(_QWORD *)(v16 + 40),
          *((_QWORD *)&__dst[0] + 1) = v17,
          __dst[1] = *(_OWORD *)(v16 + 56),
          *(_QWORD *)&__dst[2] = v19,
          DWORD2(__dst[2]) = v18,
          (NavigationListState.hasNonEmptySelection.getter() & 1) == 0))
    {
LABEL_18:
      if ((a2 - 2) >= 4u)
      {
        __dst[0] = *(_OWORD *)v3;
        *(_QWORD *)&__dst[1] = *(_QWORD *)(v3 + 16);
        *((_QWORD *)&__dst[1] + 1) = v7;
        v22 = *(_OWORD *)(v3 + 48);
        __dst[2] = *(_OWORD *)(v3 + 32);
        __dst[3] = v22;
        __dst[4] = *(_OWORD *)(v3 + 64);
        __dst[5] = v25;
        *(_QWORD *)&__dst[6] = 1;
        *(_OWORD *)((char *)&__dst[6] + 8) = v24;
        *(_OWORD *)((char *)&__dst[7] + 8) = v23;
        *((_QWORD *)&__dst[8] + 1) = v8;
        LOWORD(__dst[9]) = v9;
        v20 = NavigationState.canDismissRoot(of:)(a1, 2, a3);
        return v20 & 1;
      }
      goto LABEL_19;
    }
  }
  v20 = 1;
  return v20 & 1;
}

uint64_t NavigationState.update(for:controllerCache:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __int16 v29;
  __int128 v30;
  __int128 v31;
  uint64_t result;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  _QWORD *v43;
  char v44;
  __int128 v45;
  Swift::UInt v46;
  unsigned __int8 v47;
  uint64_t (*v48)();
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  Swift::UInt v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  Swift::UInt v65;
  uint64_t (*v66)();
  uint64_t (*v67)();
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char v75;
  uint64_t v76;
  Swift::UInt v77;
  unint64_t v78;
  Swift::UInt v79;
  unint64_t v80;
  Swift::UInt v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  Swift::UInt v95;
  Swift::UInt v96;
  Swift::UInt v97;
  Swift::UInt v98;
  unint64_t v99;
  unint64_t v100;
  char isUniquelyReferenced_nonNull_native;
  Swift::UInt v102;
  uint64_t (*v103)();
  uint64_t (*v104)();
  unint64_t v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  unint64_t v110;
  uint64_t v111;
  _BOOL8 v112;
  uint64_t v113;
  char v114;
  unint64_t v115;
  char v116;
  Swift::UInt v117;
  uint64_t v118;
  Swift::UInt v119;
  Swift::UInt v120;
  Swift::UInt v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  uint64_t (*v141)();
  Swift::UInt v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  unint64_t v149;
  __int128 v150;
  unint64_t v151;
  __int128 v152;
  Swift::UInt v153;
  Swift::UInt v154;
  __int128 v155;
  unint64_t v156;
  __int128 v157;
  unint64_t v158;
  __int128 v159;
  char v160;
  unint64_t v161;
  char v162;
  Swift::UInt v163;
  uint64_t v164;
  char v165;
  uint64_t *v166;
  uint64_t (*v167)();
  char v168;
  Swift::UInt v169;
  Swift::UInt v170;
  uint64_t (*v171)();
  Swift::UInt v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _OWORD v176[16];
  __int128 v177[16];
  _OWORD v178[16];
  _BYTE v179[260];
  _OWORD v180[14];
  _OWORD v181[2];
  _BYTE v182[304];
  _BYTE v183[304];
  __int128 v184[16];
  _OWORD v185[4];
  __int16 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  char v191;
  char v192;
  Swift::UInt v193;
  Swift::UInt v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  char v199;
  Swift::UInt v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD __dst[37];
  __int16 v204;
  uint64_t v205;
  uint64_t __src[38];
  _BYTE v207[64];
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  _BYTE v214[89];
  _BYTE v215[260];
  _OWORD v216[16];
  _OWORD v217[2];
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  _BYTE v230[25];
  __int128 v231[14];
  _OWORD v232[2];
  _BYTE v233[304];
  _BYTE v234[64];
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  uint64_t v239;

  MEMORY[0x1E0C80A78](a1, a2);
  v5 = v3;
  v135 = v6;
  v7 = *(_OWORD *)(v4 + 112);
  v237 = *(_OWORD *)(v4 + 96);
  v238 = v7;
  v239 = *(_QWORD *)(v4 + 128);
  v8 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)&v234[32] = *(_OWORD *)(v4 + 32);
  *(_OWORD *)&v234[48] = v8;
  v9 = *(_OWORD *)(v4 + 80);
  v235 = *(_OWORD *)(v4 + 64);
  v236 = v9;
  v10 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)v234 = *(_OWORD *)v4;
  *(_OWORD *)&v234[16] = v10;
  v11 = BYTE8(v238);
  v12 = v236;
  v153 = *((_QWORD *)&v235 + 1);
  v13 = v238;
  v14 = *((_QWORD *)&v237 + 1) >> 62;
  v136 = v2;
  if (!(*((_QWORD *)&v237 + 1) >> 62))
  {
    v33 = *(_OWORD *)&v234[8];
    v34 = *(_OWORD *)&v234[24];
    v35 = *(_OWORD *)&v234[40];
    v36 = *(_QWORD *)&v234[56];
    v163 = v236;
    v37 = v235;
    goto LABEL_14;
  }
  v15 = v2;
  if ((_DWORD)v14 != 1)
  {
    v38 = *(_OWORD *)v234;
    v39 = *(_OWORD *)&v234[16];
    v40 = *(_OWORD *)&v234[32];
    v41 = *(_OWORD *)&v234[48];
    v42 = v235;
    v43 = (_QWORD *)(v2 + 80);
    if (*(_QWORD *)(v15 + 96) == 1)
    {
      *v43 = 0;
      *(_QWORD *)(v15 + 88) = 0;
      *(_QWORD *)(v15 + 96) = 0;
      *(_QWORD *)(v15 + 104) = 768;
      *(_OWORD *)(v15 + 112) = 0u;
      *(_OWORD *)(v15 + 128) = 0u;
      *(_WORD *)(v15 + 144) = 768;
    }
    v187 = v38;
    v188 = v39;
    v189 = v40;
    v190 = v41;
    v191 = v42;
    v192 = v11;
    result = (uint64_t)NavigationSplitViewState.update(for:)((uint64_t)&v187, __src);
    if (!v3)
      goto LABEL_12;
    return result;
  }
  v163 = v236;
  if (BYTE8(v236) != 6)
  {
    v37 = v235;
    v36 = *(_QWORD *)&v234[56];
    v35 = *(_OWORD *)&v234[40];
    v34 = *(_OWORD *)&v234[24];
    v12 = BYTE8(v236);
    v33 = *(_OWORD *)&v234[8];
LABEL_14:
    v44 = v36;
    v141 = (uint64_t (*)())*((_QWORD *)&v236 + 1);
    v145 = v5;
    v45 = v237;
    v160 = BYTE8(v238);
    v173 = v238;
    v157 = v34;
    v146 = v33;
    v148 = v35;
    v168 = v37;
    v138 = *(_QWORD *)v234;
    if (v37 != 13)
    {
      if (v37 != 14)
        goto LABEL_21;
      v44 = v35;
    }
    if (!(v12 & 0xFE | (unint64_t)(v44 & 1)))
    {
      v46 = *((_QWORD *)&v235 + 1);
      v47 = v163;
      v48 = (uint64_t (*)())*((_QWORD *)&v236 + 1);
      if (!(_DWORD)v14 || (v46 = v163, v47 = BYTE8(v236), v48 = (uint64_t (*)())v237, BYTE8(v236) != 6))
      {
        if (v47 - 2 >= 4)
        {
          if (v47)
          {
            v49 = 2;
          }
          else if (v48 == (uint64_t (*)())3)
          {
            v49 = 1;
          }
          else
          {
            v49 = 2;
          }
          v50 = 0;
LABEL_22:
          v167 = v48;
          v51 = *(_OWORD *)(v4 + 112);
          v222 = *(_OWORD *)(v4 + 96);
          v223 = v51;
          v52 = *(_QWORD *)(v4 + 128);
          v53 = *(_OWORD *)(v4 + 48);
          v218 = *(_OWORD *)(v4 + 32);
          v219 = v53;
          v54 = *(_OWORD *)(v4 + 80);
          v220 = *(_OWORD *)(v4 + 64);
          v221 = v54;
          v55 = *(_OWORD *)(v4 + 16);
          v217[0] = *(_OWORD *)v4;
          v217[1] = v55;
          *(_QWORD *)&v224 = v52;
          *((_QWORD *)&v224 + 1) = v46;
          *(_QWORD *)&v225 = v49;
          *((_QWORD *)&v225 + 1) = v48;
          *(_QWORD *)&v226 = 0;
          *((_QWORD *)&v226 + 1) = v50;
          v227 = 0u;
          v228 = 0u;
          v229 = 0u;
          memset(v230, 0, 24);
          v56 = -1;
          v230[24] = -1;
          v231[4] = v220;
          v231[5] = v54;
          v231[6] = v222;
          v231[7] = v223;
          v231[0] = v217[0];
          v231[1] = v55;
          v231[2] = v218;
          v231[3] = v219;
          v232[0] = 0u;
          *(_OWORD *)((char *)v232 + 9) = *(_OWORD *)&v230[9];
          v231[8] = v224;
          v231[9] = v225;
          v231[10] = v226;
          memset(&v231[11], 0, 48);
          destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v231);
          outlined init with take of NavigationState.UpdateResult(v231, v215);
          *(_DWORD *)&v215[256] = 0;
          *(_DWORD *)&v215[252] = 0;
          v57 = v239;
          outlined retain of NavigationRequest.TargetedRequest((uint64_t)v217);
          outlined retain of NavigationRequest.TargetedRequest((uint64_t)v217);
          outlined retain of NavigationRequest((uint64_t)v234);
          outlined init with take of NavigationState.UpdateResult(v231, v216);
          v144 = 0;
          v58 = 0;
          v166 = (uint64_t *)(v136 + 24);
          v59 = (unint64_t)v50;
          v60 = 0uLL;
          v61 = 0uLL;
          v62 = 0uLL;
          v63 = 0uLL;
          v64 = v163;
          v65 = v153;
          v66 = v141;
          v68 = *((_QWORD *)&v45 + 1);
          v67 = (uint64_t (*)())v45;
          v69 = v160;
          v70 = v173;
          v71 = v36;
          v72 = v157;
          v74 = v146;
          v73 = v148;
          v75 = v168;
          v76 = v138;
          while (1)
          {
            *(_OWORD *)&v207[8] = v74;
            *(_OWORD *)&v207[24] = v72;
            *(_OWORD *)&v207[40] = v73;
            *(_QWORD *)v207 = v76;
            *(_QWORD *)&v207[56] = v71;
            LOBYTE(v208) = v75;
            *((_QWORD *)&v208 + 1) = v65;
            *(_QWORD *)&v209 = v64;
            *((_QWORD *)&v209 + 1) = v66;
            *(_QWORD *)&v210 = v67;
            *((_QWORD *)&v210 + 1) = v68;
            *(_QWORD *)&v211 = v70;
            BYTE8(v211) = v69 & 1;
            *(_QWORD *)&v212 = v57;
            *((_QWORD *)&v212 + 1) = v46;
            *(_QWORD *)&v213 = v49;
            v77 = (Swift::UInt)v167;
            *((_QWORD *)&v213 + 1) = v167;
            *(_QWORD *)v214 = v58;
            *(_OWORD *)&v214[8] = v59;
            *(_OWORD *)&v214[24] = v60;
            v78 = v59;
            *(_OWORD *)&v214[40] = v61;
            v169 = v46;
            *(_OWORD *)&v214[56] = v62;
            v174 = v49;
            v214[88] = v56;
            v79 = v58;
            v161 = v59;
            *(_OWORD *)&v214[72] = v63;
            v158 = v59 & 0xFFFFFFFFFFFFFFFELL;
            if ((v59 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
            {
              v46 = v65;
              v49 = v64;
              v77 = (Swift::UInt)v66;
              v79 = (Swift::UInt)v67;
              v78 = v68;
            }
            v80 = v78 >> 62;
            v171 = (uint64_t (*)())v58;
            v164 = v64;
            if ((_DWORD)v80)
            {
              v81 = v169;
              if ((_DWORD)v80 != 1)
                goto LABEL_99;
              v46 = v49;
              LOBYTE(v49) = v77;
              if (v77 == 6)
                goto LABEL_99;
            }
            else
            {
              v79 = v77;
              v81 = v169;
            }
            outlined retain of NavigationRequest.TargetedRequest((uint64_t)v207);
            outlined release of NavigationState.UpdateResult((uint64_t)v216);
            v154 = v65;
            v151 = v68;
            if (!*(_QWORD *)(*v166 + 16)
              || (specialized __RawDictionaryStorage.find<A>(_:)(v46, v49, v79), (v82 & 1) == 0))
            {
              v142 = (Swift::UInt)v66;
              v83 = v81;
              v84 = v174;
              v85 = (uint64_t)v167;
              v86 = (uint64_t)v171;
              v87 = v161;
              if (v158 == 0x1FFFFFFFELL)
              {
                v83 = v65;
                v84 = v164;
                v85 = v142;
                v86 = (uint64_t)v67;
                v87 = v151;
              }
              v88 = v87 >> 62;
              if ((_DWORD)v88)
              {
                if ((_DWORD)v88 != 1)
                  goto LABEL_99;
                v83 = v84;
                LOBYTE(v84) = v85;
                if (v85 == 6)
                  goto LABEL_99;
              }
              else
              {
                v86 = v85;
              }
              outlined retain of NavigationRequest.TargetedRequest((uint64_t)v207);
              outlined release of NavigationState.UpdateResult((uint64_t)v216);
              v89 = *(_QWORD *)v136;
              v90 = *(_QWORD *)(v136 + 8);
              v91 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              v149 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
              v92 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v91);
              v93 = specialized Dictionary.init(dictionaryLiteral:)(v91);
              swift_retain();
              swift_retain();
              swift_retain();
              v94 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v91);
              __src[0] = 0x100000001;
              LODWORD(__src[1]) = 0;
              __src[2] = v83;
              LOBYTE(__src[3]) = v84;
              memset(&__src[5], 0, 72);
              __src[4] = v86;
              __src[14] = 0xF000000000000007;
              memset(&__src[15], 0, 48);
              __src[22] = 0;
              __src[23] = 0;
              __src[21] = 0x8000000000000000;
              __src[24] = v149;
              __src[25] = v92;
              __src[26] = v93;
              __src[27] = 1;
              __src[28] = v94;
              __src[29] = v89;
              __src[30] = v90;
              __src[31] = v135;
              __src[32] = v83;
              LOBYTE(__src[33]) = v84;
              __src[34] = v86;
              memset(&__src[35], 0, 17);
              *(_WORD *)((char *)&__src[37] + 1) = 2;
              memcpy(v233, __src, 0x12BuLL);
              v81 = v169;
              v95 = v169;
              v96 = v174;
              v97 = (Swift::UInt)v167;
              v98 = (Swift::UInt)v171;
              v99 = v161;
              v66 = (uint64_t (*)())v142;
              v68 = v151;
              if (v158 == 0x1FFFFFFFELL)
              {
                v95 = v154;
                v96 = v164;
                v97 = v142;
                v98 = (Swift::UInt)v67;
                v99 = v151;
              }
              v100 = v99 >> 62;
              if ((_DWORD)v100)
              {
                if ((_DWORD)v100 != 1)
                  goto LABEL_99;
                v95 = v96;
                LOBYTE(v96) = v97;
                if (v97 == 6)
                  goto LABEL_99;
              }
              else
              {
                v98 = v97;
              }
              outlined retain of NavigationRequest.TargetedRequest((uint64_t)v207);
              outlined release of NavigationState.UpdateResult((uint64_t)v216);
              outlined retain of NavigationColumnState(__src);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              __dst[0] = *v166;
              *v166 = 0x8000000000000000;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v233, v95, v96, v98, isUniquelyReferenced_nonNull_native);
              *v166 = __dst[0];
              swift_bridgeObjectRelease();
              outlined release of NavigationColumnState(__src);
              v65 = v154;
            }
            if (v158 == 0x1FFFFFFFELL)
            {
              v81 = v65;
              v102 = v164;
            }
            else
            {
              v102 = v174;
            }
            v103 = v167;
            if (v158 == 0x1FFFFFFFELL)
            {
              v103 = v66;
              v104 = v67;
            }
            else
            {
              v104 = v171;
            }
            v105 = v161;
            if (v158 == 0x1FFFFFFFELL)
              v105 = v68;
            v106 = v105 >> 62;
            if ((_DWORD)v106)
            {
              if ((_DWORD)v106 != 1)
                goto LABEL_99;
              v81 = v102;
              LOBYTE(v102) = (_BYTE)v103;
              if (v103 == 6)
                goto LABEL_99;
            }
            else
            {
              v104 = v103;
            }
            outlined retain of NavigationRequest.TargetedRequest((uint64_t)v207);
            outlined release of NavigationState.UpdateResult((uint64_t)v216);
            v107 = swift_isUniquelyReferenced_nonNull_native();
            v205 = *v166;
            v108 = v205;
            *v166 = 0x8000000000000000;
            v110 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v102, (Swift::UInt)v104);
            v111 = *(_QWORD *)(v108 + 16);
            v112 = (v109 & 1) == 0;
            v113 = v111 + v112;
            if (__OFADD__(v111, v112))
              break;
            v114 = v109;
            if (*(_QWORD *)(v108 + 24) >= v113)
            {
              v117 = v169;
              if ((v107 & 1) != 0)
              {
                if ((v109 & 1) == 0)
                  goto LABEL_87;
              }
              else
              {
                specialized _NativeDictionary.copy()();
                if ((v114 & 1) == 0)
                  goto LABEL_87;
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v113, v107);
              v115 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v102, (Swift::UInt)v104);
              if ((v114 & 1) != (v116 & 1))
                goto LABEL_100;
              v110 = v115;
              v117 = v169;
              if ((v114 & 1) == 0)
              {
LABEL_87:
                __break(1u);
LABEL_88:
                ((void (*)(_OWORD *, _QWORD))v104)(v176, 0);
                outlined release of NavigationRequest.TargetedRequest((uint64_t)v217);
                outlined release of NavigationState.UpdateResult((uint64_t)v216);
                memcpy(v179, v215, sizeof(v179));
                return outlined release of NavigationState.UpdateResult((uint64_t)v179);
              }
            }
            v118 = v205;
            memmove(__src, (const void *)(*(_QWORD *)(v205 + 56) + 304 * v110), 0x12BuLL);
            destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__src);
            outlined init with take of Image.Resolved?((uint64_t)__src, (uint64_t)__dst, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
            if (v204 == 2)
              v204 = 0;
            outlined init with take of Image.Resolved?((uint64_t)__dst, (uint64_t)v185, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
            outlined init with take of Image.Resolved?((uint64_t)v185, (uint64_t)&v187, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
            if (_s7SwiftUI21NavigationColumnStateVSgWOg((uint64_t)&v187) == 1)
            {
              specialized _NativeDictionary._delete(at:)(v110, v118);
            }
            else
            {
              outlined init with take of Image.Resolved?((uint64_t)v185, (uint64_t)v183, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
              memcpy((void *)(*(_QWORD *)(v118 + 56) + 304 * v110), v183, 0x12BuLL);
            }
            if (v158 == 0x1FFFFFFFELL)
              v117 = v154;
            *v166 = v118;
            if (v158 == 0x1FFFFFFFELL)
              v119 = v164;
            else
              v119 = v174;
            v120 = (Swift::UInt)v167;
            if (v158 == 0x1FFFFFFFELL)
            {
              v120 = (Swift::UInt)v66;
              v121 = (Swift::UInt)v67;
            }
            else
            {
              v121 = (Swift::UInt)v171;
            }
            v122 = v161;
            if (v158 == 0x1FFFFFFFELL)
              v122 = v151;
            v123 = v122 >> 62;
            if ((_DWORD)v123)
            {
              if ((_DWORD)v123 != 1)
                goto LABEL_99;
              v117 = v119;
              LOBYTE(v119) = v120;
              if (v120 == 6)
                goto LABEL_99;
            }
            else
            {
              v121 = v120;
            }
            outlined retain of NavigationRequest.TargetedRequest((uint64_t)v207);
            outlined release of NavigationState.UpdateResult((uint64_t)v216);
            v180[12] = *(_OWORD *)&v214[32];
            v180[13] = *(_OWORD *)&v214[48];
            v181[0] = *(_OWORD *)&v214[64];
            *(_OWORD *)((char *)v181 + 9) = *(_OWORD *)&v214[73];
            v180[8] = v212;
            v180[9] = v213;
            v180[10] = *(_OWORD *)v214;
            v180[11] = *(_OWORD *)&v214[16];
            v180[4] = v208;
            v180[5] = v209;
            v180[6] = v210;
            v180[7] = v211;
            v180[0] = *(_OWORD *)v207;
            v180[1] = *(_OWORD *)&v207[16];
            v180[2] = *(_OWORD *)&v207[32];
            v180[3] = *(_OWORD *)&v207[48];
            v104 = specialized Dictionary._Variant.subscript.modify(v176, v117, v119, v121);
            outlined init with take of Image.Resolved?(v124, (uint64_t)v182, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
            outlined init with take of Image.Resolved?((uint64_t)v182, (uint64_t)v183, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
            if (_s7SwiftUI21NavigationColumnStateVSgWOg((uint64_t)v183) == 1)
              goto LABEL_98;
            NavigationColumnState.update(for:shouldAnimate:splitViewState:)((uint64_t)v184, (uint64_t)v180);
            if (v145)
              goto LABEL_88;
            v126 = v125;
            v127 = HIDWORD(v125);
            ((void (*)(_OWORD *, _QWORD))v104)(v176, 0);
            outlined release of NavigationState.UpdateResult((uint64_t)v216);
            outlined init with take of NavigationState.UpdateResult(v184, v177);
            outlined init with take of NavigationState.UpdateResult((__int128 *)v215, v178);
            outlined release of NavigationState.UpdateResult((uint64_t)v178);
            outlined init with take of NavigationState.UpdateResult(v177, v215);
            *(_QWORD *)&v215[252] = v126;
            v128 = v144 + v126;
            v129 = HIDWORD(v144) + v127;
            outlined init with take of NavigationState.UpdateResult(v177, v179);
            if (_s7SwiftUI15NavigationStateV12UpdateResultOWOg((uint64_t)v179))
            {
              outlined release of NavigationRequest.TargetedRequest((uint64_t)v217);
              result = outlined release of NavigationState.UpdateResult((uint64_t)v177);
              v134 = *(_DWORD *)(v136 + 20) + v129;
              *(_DWORD *)(v136 + 16) += v128;
              *(_DWORD *)(v136 + 20) = v134;
              return result;
            }
            v144 = __PAIR64__(v129, v128);
            v145 = 0;
            v152 = *(_OWORD *)&v179[200];
            v155 = *(_OWORD *)&v179[184];
            v139 = *(_OWORD *)&v179[232];
            v140 = *(_OWORD *)&v179[216];
            v165 = v179[248];
            v175 = *(_QWORD *)&v179[144];
            v167 = *(uint64_t (**)())&v179[152];
            v172 = *(_QWORD *)&v179[160];
            v137 = *(_OWORD *)&v179[168];
            v170 = *(_QWORD *)&v179[136];
            v143 = *(_QWORD *)&v179[128];
            v162 = v179[120];
            v65 = *(_QWORD *)&v179[72];
            v64 = *(_QWORD *)&v179[80];
            v66 = *(uint64_t (**)())&v179[88];
            v67 = *(uint64_t (**)())&v179[96];
            v68 = *(_QWORD *)&v179[104];
            v130 = *(_QWORD *)&v179[112];
            v159 = *(_OWORD *)&v179[24];
            v147 = *(_OWORD *)&v179[8];
            v150 = *(_OWORD *)&v179[40];
            v131 = *(_QWORD *)v179;
            v132 = *(_QWORD *)&v179[56];
            v133 = v179[64];
            outlined init with take of NavigationState.UpdateResult(v177, v176);
            outlined retain of NavigationRequest.TargetedRequest((uint64_t)v176);
            outlined init with take of NavigationState.UpdateResult(v177, v216);
            v74 = v147;
            v73 = v150;
            v75 = v133;
            v76 = v131;
            v60 = v155;
            v72 = v159;
            v71 = v132;
            v70 = v130;
            v69 = v162;
            v61 = v152;
            v63 = v139;
            v62 = v140;
            v59 = v137;
            v58 = v172;
            v46 = v170;
            v56 = v165;
            v57 = v143;
            v49 = v175;
          }
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_100:
          result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
      }
    }
LABEL_21:
    v46 = 0;
    v49 = 0;
    v48 = 0;
    v50 = 0x1FFFFFFFELL;
    goto LABEL_22;
  }
  v16 = v237;
  v17 = *((_QWORD *)&v236 + 1);
  v18 = *(_OWORD *)v234;
  v19 = *(_OWORD *)&v234[16];
  v20 = *(_OWORD *)&v234[32];
  v21 = *(_OWORD *)&v234[48];
  v22 = v235;
  v23 = BYTE8(v237) & 1;
  if (!*(_QWORD *)(v2 + 40))
  {
    v24 = MEMORY[0x1E0DEE9D8];
    v156 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v25 = specialized Dictionary.init(dictionaryLiteral:)(v24);
    v26 = specialized Dictionary.init(dictionaryLiteral:)(v24);
    v27 = v24;
    v15 = v2;
    v28 = specialized Dictionary.init(dictionaryLiteral:)(v27);
    v21 = *(_OWORD *)&v234[48];
    v20 = *(_OWORD *)&v234[32];
    v19 = *(_OWORD *)&v234[16];
    v18 = *(_OWORD *)v234;
    v13 = v238;
    v11 = BYTE8(v238);
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 40) = v156;
    *(_QWORD *)(v2 + 48) = v25;
    *(_QWORD *)(v2 + 56) = v26;
    *(_QWORD *)(v2 + 64) = v28;
    *(_DWORD *)(v2 + 72) = 0;
  }
  v187 = v18;
  v188 = v19;
  v189 = v20;
  v190 = v21;
  v191 = v22;
  v193 = v153;
  v194 = v163;
  v195 = v17;
  v196 = v16;
  v197 = v23;
  v198 = v13;
  v199 = v11;
  v200 = v163;
  v201 = v17;
  v202 = v16;
  v29 = *(_WORD *)(v15 + 144);
  v30 = *(_OWORD *)(v15 + 96);
  v185[0] = *(_OWORD *)(v15 + 80);
  v185[1] = v30;
  v31 = *(_OWORD *)(v15 + 128);
  v185[2] = *(_OWORD *)(v15 + 112);
  v185[3] = v31;
  v186 = v29;
  result = (uint64_t)NavigationListState.update(for:splitViewState:)((uint64_t)&v187, (uint64_t)v185, __src);
  if (!v3)
  {
LABEL_12:
    memcpy(__dst, __src, 0x11CuLL);
    result = outlined release of NavigationState.RequestResults((uint64_t)__dst);
    *(int32x2_t *)(v15 + 16) = vadd_s32(*(int32x2_t *)(v15 + 16), *(int32x2_t *)((char *)&__dst[34] + 4));
  }
  return result;
}

Swift::Void __swiftcall NavigationState.finalizeFlush()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t i;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  int64_t v21;
  _QWORD v22[4];
  _BYTE v23[304];
  _BYTE v24[312];

  v1 = *(_QWORD *)(v0 + 24);
  v20 = v1 + 64;
  v2 = 1 << *(_BYTE *)(v1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(v1 + 64);
  v21 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  v5 = 0;
  if (v4)
    goto LABEL_6;
LABEL_7:
  v8 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v8 < v21)
    {
      v9 = *(_QWORD *)(v20 + 8 * v8);
      ++v5;
      if (v9)
        goto LABEL_24;
      v5 = v8 + 1;
      if (v8 + 1 >= v21)
        goto LABEL_37;
      v9 = *(_QWORD *)(v20 + 8 * v5);
      if (v9)
        goto LABEL_24;
      v5 = v8 + 2;
      if (v8 + 2 >= v21)
        goto LABEL_37;
      v9 = *(_QWORD *)(v20 + 8 * v5);
      if (v9)
        goto LABEL_24;
      v5 = v8 + 3;
      if (v8 + 3 >= v21)
        goto LABEL_37;
      v9 = *(_QWORD *)(v20 + 8 * v5);
      if (v9)
        goto LABEL_24;
      v5 = v8 + 4;
      if (v8 + 4 >= v21)
        goto LABEL_37;
      v9 = *(_QWORD *)(v20 + 8 * v5);
      if (v9)
      {
LABEL_24:
        v4 = (v9 - 1) & v9;
        for (i = __clz(__rbit64(v9)) + (v5 << 6); ; i = v6 | (v5 << 6))
        {
          v11 = specialized Dictionary.subscript.modify(v22, *(_QWORD *)(*(_QWORD *)(v1 + 48) + 24 * i), *(_BYTE *)(*(_QWORD *)(v1 + 48) + 24 * i + 8), *(_QWORD *)(*(_QWORD *)(v1 + 48) + 24 * i + 16));
          v13 = v12;
          outlined init with take of Image.Resolved?(v12, (uint64_t)v23, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
          outlined init with take of Image.Resolved?((uint64_t)v23, (uint64_t)v24, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
          if (_s7SwiftUI21NavigationColumnStateVSgWOg((uint64_t)v24) == 1)
          {
            ((void (*)(_QWORD *, _QWORD))v11)(v22, 0);
            if (!v4)
              goto LABEL_7;
          }
          else
          {
            v14 = *(_WORD *)(v13 + 297);
            if (v14 != 2)
            {
              if ((v14 & 1) == 0)
              {
                if (*(_QWORD *)(v13 + 96))
                {
                  v15 = Transaction.animation.getter();
                  if (v15)
                  {
                    v16 = v15;
                    if (*(_BYTE *)(v13 + 298) == 1)
                    {
                      swift_release();
                    }
                    else
                    {
                      swift_release();
                      *(_QWORD *)(v13 + 288) = v16;
                      v17 = *(_DWORD *)(v13 + 284);
                      v18 = __CFADD__(v17, 1);
                      v19 = v17 + 1;
                      if (v18)
                        goto LABEL_39;
                      *(_DWORD *)(v13 + 284) = v19;
                    }
                  }
                }
              }
              *(_WORD *)(v13 + 297) = 2;
            }
            ((void (*)(_QWORD *, _QWORD))v11)(v22, 0);
            if (!v4)
              goto LABEL_7;
          }
LABEL_6:
          v6 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }
      v10 = v8 + 5;
      if (v10 < v21)
      {
        v9 = *(_QWORD *)(v20 + 8 * v10);
        if (v9)
        {
          v5 = v10;
          goto LABEL_24;
        }
        while (1)
        {
          v5 = v10 + 1;
          if (__OFADD__(v10, 1))
            goto LABEL_40;
          if (v5 >= v21)
            break;
          v9 = *(_QWORD *)(v20 + 8 * v5);
          ++v10;
          if (v9)
            goto LABEL_24;
        }
      }
    }
LABEL_37:
    swift_release();
    return;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
}

uint64_t NavigationState.StackContent.topKey.getter()
{
  void *v0;
  int v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t __dst[50];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 v30;
  _BYTE __src[392];
  _BYTE v32[400];

  outlined init with take of NavigationState.Base(v0, __src);
  outlined init with take of NavigationState.Base(__src, v32);
  v1 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v32);
  if (!v1)
    return *(_QWORD *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v32);
  if (v1 == 1)
  {
    v2 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v32);
    v3 = v2[38];
    outlined init with take of NavigationState.Base(__src, __dst);
    v4 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)__dst);
    outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v4);
    outlined consume of ResolvedNavigationDestinations?(v3);
    outlined release of NavigationColumnState(v2);
    return v2[2];
  }
  v6 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v32);
  v7 = *(_QWORD *)v6;
  v8 = *(_QWORD *)(v6 + 16);
  v9 = *(_QWORD *)(v6 + 24);
  v11 = *(_QWORD *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 40);
  v12 = *(_QWORD *)(v6 + 48);
  v13 = *(_QWORD *)(v6 + 56);
  v14 = *(_QWORD *)(v6 + 64);
  v15 = *(_WORD *)(v6 + 72);
  v22 = *(_QWORD *)(v6 + 8);
  v23 = v8;
  v24 = v9;
  v25 = v11;
  v26 = v10;
  v27 = v12;
  v28 = v13;
  v29 = v14;
  v30 = v15;
  v19 = v8;
  v20 = *(_QWORD *)(v7 + 16);
  outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
  swift_bridgeObjectRetain();
  outlined copy of NavigationSplitViewState?(v22, v8, v9, v11, v10, v12, v13, v14, v15, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
  v16 = specialized BidirectionalCollection.lastIndex(where:)(0, v20, v7);
  LOBYTE(v20) = v17;
  v18 = v22;
  outlined copy of NavigationSplitViewState?(v22, v19, v9, v11, v10, v12, v13, v14, v15, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  result = swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
    goto LABEL_12;
  if ((v16 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v16 >= *(_QWORD *)(v7 + 16))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  memcpy(__dst, (const void *)(v7 + 304 * v16 + 32), 0x12BuLL);
  outlined retain of NavigationColumnState(__dst);
  outlined copy of NavigationSplitViewState?(v18, v19, v9, v11, v10, v12, v13, v14, v15, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  swift_bridgeObjectRelease();
  outlined release of NavigationColumnState(__dst);
  return __dst[2];
}

uint64_t NavigationState.StackContent.structuralSeed.getter@<X0>(_DWORD *a1@<X8>)
{
  void *v1;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int16 v24;
  uint64_t v25;
  _BYTE v26[392];
  _BYTE __dst[392];
  _BYTE v28[400];

  outlined init with take of NavigationState.Base(v1, __dst);
  outlined init with take of NavigationState.Base(__dst, v28);
  v3 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v28);
  if (v3)
  {
    if (v3 == 1)
    {
      v4 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v28);
      v5 = v4[38];
      outlined init with take of NavigationState.Base(__dst, v26);
      v6 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v26);
      outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v6);
      outlined consume of ResolvedNavigationDestinations?(v5);
      result = (uint64_t)outlined release of NavigationColumnState(v4);
      *a1 = *(_DWORD *)v4;
    }
    else
    {
      v8 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v28);
      v9 = *(_QWORD *)v8;
      v10 = *(_QWORD *)(v8 + 8);
      v12 = *(_QWORD *)(v8 + 16);
      v11 = *(_QWORD *)(v8 + 24);
      v13 = *(_QWORD *)(v8 + 32);
      v14 = *(_QWORD *)(v8 + 40);
      v16 = *(_QWORD *)(v8 + 48);
      v15 = *(_QWORD *)(v8 + 56);
      if (v11 == 1)
        v17 = 0;
      else
        v17 = v10;
      v18 = *(_QWORD *)(v9 + 16);
      v25 = *(_QWORD *)(v8 + 64);
      v24 = *(_WORD *)(v8 + 72);
      if (v18)
      {
        v19 = (unsigned int *)(v9 + 32);
        do
        {
          if ((_DWORD)v17 == -1 || (v20 = *v19, !(_DWORD)v20))
          {
            v20 = v17;
          }
          else if ((_DWORD)v17)
          {
            if ((_DWORD)v20 != -1)
            {
              v21 = (v20 | (v17 << 32)) + ~(v20 << 32);
              v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
              v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
              v20 = ((v23 + ~(v23 << 27)) >> 31) ^ ((_DWORD)v23 + ~((_DWORD)v23 << 27));
            }
          }
          v19 += 76;
          v17 = v20;
          --v18;
        }
        while (v18);
      }
      else
      {
        LODWORD(v20) = v17;
      }
      outlined retain of NavigationState.Base((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      outlined copy of NavigationSplitViewState?(v10, v12, v11, v13, v14, v16, v15, v25, v24, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
      result = swift_bridgeObjectRelease();
      *a1 = v20;
    }
  }
  else
  {
    result = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v28);
    *a1 = 0;
  }
  return result;
}

uint64_t NavigationState.StackContent.count.getter()
{
  void *v0;
  int v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  _BYTE __dst[299];
  _BYTE __src[392];
  _BYTE v36[400];

  outlined init with take of NavigationState.Base(v0, __src);
  outlined init with take of NavigationState.Base(__src, v36);
  v1 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v36);
  if (!v1)
    goto LABEL_8;
  if (v1 != 1)
  {
    v18 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v36);
    v20 = *(_QWORD *)v18;
    v19 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    v23 = *(_QWORD *)(v18 + 32);
    v24 = *(_QWORD *)(v18 + 40);
    v25 = *(_QWORD *)(v18 + 48);
    v26 = *(_QWORD *)(v18 + 56);
    v27 = *(_QWORD *)(v18 + 64);
    v28 = *(_WORD *)(v18 + 72);
    if (*(_QWORD *)(*(_QWORD *)v18 + 16))
    {
      outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      outlined copy of NavigationSplitViewState?(v19, v21, v22, v23, v24, v25, v26, v27, v28, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
      if (*(_QWORD *)(v20 + 16))
      {
        memcpy(__dst, (const void *)(v20 + 32), sizeof(__dst));
        __asm { BR              X10 }
      }
      __break(1u);
      JUMPOUT(0x186FAD8F4);
    }
    return 0;
  }
  v2 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v36);
  v3 = v2[21];
  if (v3 < 0)
    return 1;
  v4 = v2;
  v5 = v2[14];
  v6 = v2[15];
  v7 = v2[17];
  v8 = v2[18];
  v9 = v2[19];
  v10 = v2[20];
  v11 = v2[22];
  v32 = v2[16];
  v33 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88);
  outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
  outlined retain of NavigationColumnState(v4);
  v31 = v5;
  v30 = v10;
  outlined copy of NavigationColumnState.ColumnContent(v5, v6, v32, v7, v8, v9, v10, v3);
  swift_retain();
  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRetain();
  v13 = v33(v12);
  swift_release();
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    JUMPOUT(0x186FAD908);
  }
  v16 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NavigationColumnState.ColumnContent(v31, v6, v32, v7, v8, v9, v30, v3);
  outlined release of NavigationColumnState(v4);
  outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_8:
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v36);
    return 1;
  }
  return v17;
}

uint64_t NavigationState.Base.count.getter()
{
  void *v0;
  int v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  _BYTE __dst[299];
  _BYTE __src[392];
  _BYTE v27[400];

  outlined init with take of NavigationState.Base(v0, __src);
  outlined init with take of NavigationState.Base(__src, v27);
  v1 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v27);
  if (!v1)
    goto LABEL_8;
  if (v1 != 1)
  {
    v18 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v27);
    v19 = *(_QWORD *)v18;
    if (*(_QWORD *)(*(_QWORD *)v18 + 16))
    {
      outlined copy of NavigationSplitViewState?(*(_QWORD *)(v18 + 8), *(_QWORD *)(v18 + 16), *(_QWORD *)(v18 + 24), *(_QWORD *)(v18 + 32), *(_QWORD *)(v18 + 40), *(_QWORD *)(v18 + 48), *(_QWORD *)(v18 + 56), *(_QWORD *)(v18 + 64), *(_WORD *)(v18 + 72), (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
      if (*(_QWORD *)(v19 + 16))
      {
        memcpy(__dst, (const void *)(v19 + 32), sizeof(__dst));
        __asm { BR              X10 }
      }
      __break(1u);
      JUMPOUT(0x186FAE1ECLL);
    }
    return 0;
  }
  v2 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v27);
  v3 = v2[21];
  if (v3 < 0)
    return 1;
  v4 = v2;
  v5 = v2[14];
  v6 = v2[15];
  v7 = v2[17];
  v8 = v2[18];
  v9 = v2[19];
  v10 = v2[20];
  v11 = v2[22];
  v23 = v2[16];
  v24 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88);
  outlined retain of NavigationColumnState(v2);
  v22 = v5;
  v21 = v10;
  outlined copy of NavigationColumnState.ColumnContent(v5, v6, v23, v7, v8, v9, v10, v3);
  swift_retain();
  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRetain();
  v13 = v24(v12);
  swift_release();
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    JUMPOUT(0x186FAE1FCLL);
  }
  v16 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NavigationColumnState.ColumnContent(v22, v6, v23, v7, v8, v9, v21, v3);
  outlined release of NavigationColumnState(v4);
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_8:
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v27);
    return 1;
  }
  return v17;
}

uint64_t NavigationState.StackContent.canPop.getter()
{
  const void *v0;
  int v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  uint64_t v45;
  _QWORD v46[8];
  unsigned __int16 v47;
  _BYTE v48[392];
  _BYTE v49[400];

  memcpy(v48, v0, sizeof(v48));
  outlined init with take of NavigationState.Base(v48, v49);
  v1 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v49);
  if (!v1)
  {
LABEL_8:
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v49);
    outlined retain of NavigationState.Base((uint64_t)v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
    goto LABEL_9;
  }
  if (v1 != 1)
  {
    v20 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v49);
    v44 = (uint64_t (*)(uint64_t))&v37;
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 24);
    v41 = v22;
    v42 = v23;
    v25 = *(_QWORD *)(v20 + 32);
    v26 = *(_QWORD *)(v20 + 40);
    v27 = *(_QWORD *)(v20 + 48);
    v28 = *(_QWORD *)(v20 + 56);
    v29 = *(_QWORD *)(v20 + 64);
    v30 = *(_WORD *)(v20 + 72);
    v46[0] = v22;
    v46[1] = v23;
    v46[2] = v24;
    v46[3] = v25;
    v46[4] = v26;
    v46[5] = v27;
    v46[6] = v28;
    v46[7] = v29;
    v47 = v30;
    v45 = v21;
    v43 = *(_QWORD *)(v21 + 16);
    MEMORY[0x1E0C80A78](v20, v31);
    v35 = &v45;
    v36 = v46;
    outlined retain of NavigationState.Base((uint64_t)v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
    v32 = v22;
    v33 = v42;
    outlined copy of NavigationSplitViewState?(v32, v42, v24, v25, v26, v27, v28, v29, v30, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
    v19 = (uint64_t)specialized Sequence.reduce<A>(_:_:)(0, (_QWORD *(*)(_QWORD **__return_ptr, _QWORD **, uint64_t *))partial apply for specialized closure #1 in Collection<>.collapsedItemCount<A>(within:splitViewState:), (uint64_t)&v34, 0, v43);
    outlined copy of NavigationSplitViewState?(v41, v33, v24, v25, v26, v27, v28, v29, v30, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
    outlined retain of NavigationState.Base((uint64_t)v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
    return v19 > 1;
  }
  v2 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v49);
  v3 = v2[21];
  if (v3 < 0)
  {
LABEL_9:
    v19 = 1;
    return v19 > 1;
  }
  v4 = v2;
  v6 = v2[14];
  v5 = v2[15];
  v7 = v2[16];
  v8 = v2[18];
  v42 = v2[17];
  v43 = v7;
  v9 = v2[19];
  v10 = v2[20];
  v11 = (uint64_t *)v2[22];
  v12 = (_QWORD *)v2[23];
  v44 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88);
  outlined retain of NavigationState.Base((uint64_t)v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
  outlined retain of NavigationColumnState(v4);
  v35 = v11;
  v36 = v12;
  v40 = v5;
  v41 = v6;
  v38 = v10;
  v39 = v9;
  outlined copy of NavigationColumnState.ColumnContent(v6, v5, v43, v42, v8, v9, v10, v3);
  swift_retain();
  swift_bridgeObjectRetain();
  v13 = swift_bridgeObjectRetain();
  v14 = v44(v13);
  result = swift_release();
  v16 = __OFADD__(v14, 1);
  v17 = v14 + 1;
  if (!v16)
  {
    v18 = v11[2];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v35 = v11;
    v36 = v12;
    outlined consume of NavigationColumnState.ColumnContent(v41, v40, v43, v42, v8, v39, v38, v3);
    outlined release of NavigationColumnState(v4);
    outlined retain of NavigationState.Base((uint64_t)v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
    v19 = v17 + v18;
    if (!__OFADD__(v17, v18))
      return v19 > 1;
    __break(1u);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t NavigationState.StackContent.pathSeed.getter@<X0>(_DWORD *a1@<X8>)
{
  void *v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _BYTE v39[392];
  _BYTE __dst[392];
  _BYTE v41[400];

  outlined init with take of NavigationState.Base(v1, __dst);
  outlined init with take of NavigationState.Base(__dst, v41);
  v3 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v41);
  if (v3)
  {
    v38 = a1;
    if (v3 == 1)
    {
      v4 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v41);
      v5 = *(_QWORD *)(v4 + 304);
      outlined init with take of NavigationState.Base(__dst, v39);
      v6 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v39);
      outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v6);
      outlined consume of ResolvedNavigationDestinations?(v5);
      result = (uint64_t)outlined release of NavigationColumnState((uint64_t *)v4);
      *a1 = *(_DWORD *)(v4 + 84);
    }
    else
    {
      v8 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v41);
      v36 = *(_QWORD *)(v8 + 8);
      v37 = *(_QWORD *)v8;
      v34 = *(_QWORD *)(v8 + 24);
      v35 = *(_QWORD *)(v8 + 16);
      v32 = *(_QWORD *)(v8 + 40);
      v33 = *(_QWORD *)(v8 + 32);
      v30 = *(_QWORD *)(v8 + 56);
      v31 = *(_QWORD *)(v8 + 48);
      v29 = *(_QWORD *)(v8 + 64);
      v9 = *(_WORD *)(v8 + 72);
      outlined init with take of NavigationState.Base(__dst, v39);
      v10 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v39);
      v11 = *(_QWORD *)(v10 + 8);
      v12 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v10 + 24);
      v14 = *(_QWORD *)(v10 + 32);
      v15 = *(_QWORD *)(v10 + 40);
      v16 = *(_QWORD *)(v10 + 48);
      v17 = *(_QWORD *)(v10 + 56);
      v18 = *(_QWORD *)(v10 + 64);
      v19 = *(_WORD *)(v10 + 72);
      swift_bridgeObjectRetain();
      outlined copy of NavigationSplitViewState?(v11, v12, v13, v14, v15, v16, v17, v18, v19, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
      outlined copy of NavigationSplitViewState?(v36, v35, v34, v33, v32, v31, v30, v29, v9, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
      v20 = *(_QWORD *)(v37 + 16);
      if (v20)
      {
        v21 = 0;
        v22 = (unsigned int *)(v37 + 116);
        v23 = v38;
        do
        {
          v24 = *v22;
          if (v21 != 0xFFFFFFFFLL && v24 != 0)
          {
            if (!v21 || v24 == 0xFFFFFFFFLL)
            {
              v21 = *v22;
            }
            else
            {
              v26 = (v24 | (v21 << 32)) + ~(v24 << 32);
              v27 = (v26 ^ (v26 >> 22)) + ~((v26 ^ (v26 >> 22)) << 13);
              v28 = (9 * (v27 ^ (v27 >> 8))) ^ ((9 * (v27 ^ (v27 >> 8))) >> 15);
              v21 = ((v28 + ~(v28 << 27)) >> 31) ^ ((_DWORD)v28 + ~((_DWORD)v28 << 27));
            }
          }
          v22 += 76;
          --v20;
        }
        while (v20);
      }
      else
      {
        LODWORD(v21) = 0;
        v23 = v38;
      }
      result = swift_bridgeObjectRelease();
      *v23 = v21;
    }
  }
  else
  {
    result = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v41);
    *a1 = 0;
  }
  return result;
}

uint64_t NavigationState.StackContent.animationSeed.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v1;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  _BYTE v44[392];
  _BYTE __dst[392];
  _BYTE v46[400];

  outlined init with take of NavigationState.Base(v1, __dst);
  outlined init with take of NavigationState.Base(__dst, v46);
  v3 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v46);
  if (v3)
  {
    v43 = a1;
    if (v3 == 1)
    {
      v4 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v46);
      v5 = v4[38];
      outlined init with take of NavigationState.Base(__dst, v44);
      v6 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v44);
      outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v6);
      outlined consume of ResolvedNavigationDestinations?(v5);
      result = (uint64_t)outlined release of NavigationColumnState(v4);
      *a1 = v4[35];
      return result;
    }
    v8 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v46);
    v41 = *(_QWORD *)(v8 + 8);
    v42 = *(_QWORD *)v8;
    v39 = *(_QWORD *)(v8 + 24);
    v40 = *(_QWORD *)(v8 + 16);
    v37 = *(_QWORD *)(v8 + 40);
    v38 = *(_QWORD *)(v8 + 32);
    v35 = *(_QWORD *)(v8 + 56);
    v36 = *(_QWORD *)(v8 + 48);
    v34 = *(_QWORD *)(v8 + 64);
    v9 = *(_WORD *)(v8 + 72);
    outlined init with take of NavigationState.Base(__dst, v44);
    v10 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v44);
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(_QWORD *)(v10 + 16);
    v13 = *(_QWORD *)(v10 + 24);
    v14 = *(_QWORD *)(v10 + 32);
    v15 = *(_QWORD *)(v10 + 40);
    v16 = *(_QWORD *)(v10 + 48);
    v17 = *(_QWORD *)(v10 + 56);
    v18 = *(_QWORD *)(v10 + 64);
    v19 = *(_WORD *)(v10 + 72);
    swift_bridgeObjectRetain();
    outlined copy of NavigationSplitViewState?(v11, v12, v13, v14, v15, v16, v17, v18, v19, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
    outlined copy of NavigationSplitViewState?(v41, v40, v39, v38, v37, v36, v35, v34, v9, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
    v20 = *(_QWORD *)(v42 + 16);
    if (v20)
    {
      v21 = 0;
      v22 = 0;
      v23 = (_DWORD *)(v42 + 316);
      v24 = v43;
      while (1)
      {
        v25 = *(v23 - 1);
        if (v22 == 0xFFFFFFFFLL || v25 == 0)
          goto LABEL_18;
        if (!v22)
          break;
        if (v25 == 0xFFFFFFFFLL)
        {
          v22 = *(v23 - 1);
          if (v21 != 0xFFFFFFFFLL)
          {
LABEL_19:
            v30 = *v23;
            if (*v23)
            {
              if (!v21 || v30 == 0xFFFFFFFFLL)
              {
                v21 = *v23;
              }
              else
              {
                v31 = (v30 | (v21 << 32)) + ~(v30 << 32);
                v32 = (v31 ^ (v31 >> 22)) + ~((v31 ^ (v31 >> 22)) << 13);
                v33 = (9 * (v32 ^ (v32 >> 8))) ^ ((9 * (v32 ^ (v32 >> 8))) >> 15);
                v21 = ((v33 + ~(v33 << 27)) >> 31) ^ ((_DWORD)v33 + ~((_DWORD)v33 << 27));
              }
            }
          }
        }
        else
        {
          v27 = (v25 | (v22 << 32)) + ~(v25 << 32);
          v28 = (v27 ^ (v27 >> 22)) + ~((v27 ^ (v27 >> 22)) << 13);
          v29 = (9 * (v28 ^ (v28 >> 8))) ^ ((9 * (v28 ^ (v28 >> 8))) >> 15);
          v22 = ((v29 + ~(v29 << 27)) >> 31) ^ ((_DWORD)v29 + ~((_DWORD)v29 << 27));
          if (v21 != 0xFFFFFFFFLL)
            goto LABEL_19;
        }
LABEL_8:
        v23 += 76;
        if (!--v20)
          goto LABEL_26;
      }
      v22 = *(v23 - 1);
LABEL_18:
      if (v21 != 0xFFFFFFFFLL)
        goto LABEL_19;
      goto LABEL_8;
    }
    LODWORD(v21) = 0;
    LODWORD(v22) = 0;
    v24 = v43;
LABEL_26:
    result = swift_bridgeObjectRelease();
    *v24 = v22;
    v24[1] = v21;
  }
  else
  {
    result = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v46);
    *a1 = 0;
  }
  return result;
}

uint64_t NavigationState.StackContent.change(from:)(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  int v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[392];
  _BYTE v53[392];
  _QWORD v54[49];
  _QWORD __src[49];
  _BYTE __dst[392];
  _BYTE v57[392];
  _BYTE v58[392];
  uint64_t v59;
  _BYTE v60[392];
  _BYTE v61[392];
  _BYTE v62[392];
  _BYTE v63[392];
  _BYTE v64[400];
  uint64_t v65;

  MEMORY[0x1E0C80A78](a1, a2);
  outlined init with take of Image.Resolved?(v4, (uint64_t)v62, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  memcpy(v63, v2, sizeof(v63));
  outlined init with take of Image.Resolved?((uint64_t)v62, (uint64_t)v64, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v64) == 1)
  {
    _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)v58);
    v5 = v58;
  }
  else
  {
    outlined init with take of NavigationState.Base(v64, v58);
    if (_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v58))
    {
      memcpy(__dst, v63, sizeof(__dst));
      outlined init with take of Image.Resolved?((uint64_t)v62, (uint64_t)v57, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
      outlined retain of NavigationState.Base((uint64_t)v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      NavigationState.StackContent.pathSeed.getter(__src);
      v6 = __src[0];
      memcpy(__dst, v64, sizeof(__dst));
      NavigationState.StackContent.pathSeed.getter(v54);
      outlined release of NavigationState.StackContent?((uint64_t)v62, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
      if (v6 == -1 || LODWORD(v54[0]) == -1 || v6 != LODWORD(v54[0]))
        return 2;
    }
    else
    {
      outlined init with take of Image.Resolved?((uint64_t)v62, (uint64_t)v57, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    }
    outlined init with take of NavigationState.Base(v57, v60);
    outlined init with take of NavigationState.Base(v60, v57);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v57);
    v5 = v57;
  }
  outlined init with take of Image.Resolved?((uint64_t)v5, (uint64_t)v61, &lazy cache variable for type metadata for NavigationState.Base?, (uint64_t)&type metadata for NavigationState.Base);
  outlined init with take of NavigationState.Base(v63, v58);
  outlined init with take of Image.Resolved?((uint64_t)v61, (uint64_t)&v59, &lazy cache variable for type metadata for NavigationState.Base?, (uint64_t)&type metadata for NavigationState.Base);
  outlined init with take of NavigationState.Base(v63, v60);
  v7 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v60);
  if (v7)
  {
    if (v7 != 1)
    {
      v65 = v3;
      v16 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v60);
      v17 = *(_QWORD *)v16;
      v18 = *(_QWORD *)(v16 + 8);
      v20 = *(_QWORD *)(v16 + 16);
      v19 = *(_QWORD *)(v16 + 24);
      v22 = *(_QWORD *)(v16 + 32);
      v21 = *(_QWORD *)(v16 + 40);
      v24 = *(_QWORD *)(v16 + 48);
      v23 = *(_QWORD *)(v16 + 56);
      v51 = *(_QWORD *)(v16 + 64);
      v25 = *(_WORD *)(v16 + 72);
      outlined init with take of Image.Resolved?((uint64_t)v61, (uint64_t)v57, &lazy cache variable for type metadata for NavigationState.Base?, (uint64_t)&type metadata for NavigationState.Base);
      if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v57) == 1)
      {
        outlined release of NavigationState.StackContent?((uint64_t)v62, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
        outlined retain of NavigationState.Base((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
        outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v58);
      }
      else
      {
        outlined init with take of NavigationState.Base(v57, __dst);
        v26 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)__dst);
        if (v26)
        {
          if (v26 != 1)
          {
            v29 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)__dst);
            v43 = v17;
            v44 = *(_QWORD *)v29;
            v49 = *(_QWORD *)(v29 + 16);
            v47 = *(_QWORD *)(v29 + 24);
            v48 = *(_QWORD *)(v29 + 32);
            v45 = *(_QWORD *)(v29 + 56);
            v46 = *(_QWORD *)(v29 + 48);
            v41 = *(_QWORD *)(v29 + 64);
            v42 = *(_QWORD *)(v29 + 40);
            v30 = v19;
            v31 = *(_WORD *)(v29 + 72);
            __src[0] = *(_QWORD *)(v29 + 8);
            v50 = __src[0];
            __src[1] = v49;
            __src[2] = v47;
            __src[3] = v48;
            __src[4] = v42;
            __src[5] = v46;
            __src[6] = v45;
            __src[7] = v41;
            LOWORD(__src[8]) = v31;
            v54[0] = v18;
            v54[1] = v20;
            v54[2] = v30;
            v54[3] = v22;
            v54[4] = v21;
            v54[5] = v24;
            v54[6] = v23;
            v54[7] = v51;
            LOWORD(v54[8]) = v25;
            outlined release of NavigationState.StackContent?((uint64_t)v62, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
            outlined retain of NavigationState.Base((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
            v40 = v22;
            v32 = v22;
            v33 = v23;
            outlined copy of NavigationSplitViewState?(v18, v20, v30, v32, v21, v24, v23, v51, v25, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
            outlined copy of NavigationSplitViewState?(v50, v49, v47, v48, v42, v46, v45, v41, v31, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
            v34 = v65;
            v35 = specialized static NavigationColumnState.change(from:to:previousSplitViewState:splitViewState:)(v44, v43);
            if (v34)
            {
              outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v58);
              v11 = (uint64_t)outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?;
            }
            else
            {
              v11 = v35;
              outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v58);
            }
            outlined copy of NavigationSplitViewState?(v18, v20, v30, v40, v21, v24, v33, v51, v25, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
            outlined copy of NavigationSplitViewState?(v50, v49, v47, v48, v42, v46, v45, v41, v31, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
            return v11;
          }
          _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)__dst);
          outlined release of NavigationState.StackContent?((uint64_t)v62, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
          outlined retain of NavigationState.Base((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
          outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v58);
          return 2;
        }
        _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)__dst);
        outlined init with take of NavigationState.Base(v63, __src);
        outlined retain of NavigationState.Base((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
        outlined release of NavigationState.StackContent?((uint64_t)v62, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
        outlined retain of NavigationState.Base((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
        NavigationState.Base.count.getter();
        outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v58);
        outlined retain of NavigationState.Base((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
      }
      return 2;
    }
    v8 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v60);
    outlined init with take of Image.Resolved?((uint64_t)v61, (uint64_t)v57, &lazy cache variable for type metadata for NavigationState.Base?, (uint64_t)&type metadata for NavigationState.Base);
    if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v57) == 1)
      goto LABEL_37;
    outlined init with take of NavigationState.Base(v57, __dst);
    v9 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)__dst);
    if (v9)
    {
      if (v9 == 1)
      {
        v10 = (void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)__dst);
        memcpy(v54, (const void *)v8, 0x12BuLL);
        memcpy(__src, v10, 0x12BuLL);
        destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__src);
        outlined init with take of Image.Resolved?((uint64_t)__src, (uint64_t)v53, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
        v11 = (uint64_t)outlined copy of NavigationState.Base;
        outlined release of NavigationState.StackContent?((uint64_t)v62, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
        outlined retain of NavigationState.Base((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
        outlined retain of NavigationColumnState((uint64_t *)v8);
        outlined retain of NavigationColumnState((uint64_t *)v10);
        NavigationColumnState.change(from:)((uint64_t)v53);
        if (!v3)
          v11 = v12;
        outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v58);
        outlined release of NavigationColumnState((uint64_t *)v10);
        outlined release of NavigationColumnState((uint64_t *)v8);
        return v11;
      }
      _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)__dst);
LABEL_37:
      outlined release of NavigationState.StackContent?((uint64_t)v62, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
      outlined retain of NavigationState.Base((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
LABEL_38:
      outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v58);
      return 2;
    }
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)__dst);
    outlined init with take of NavigationState.Base(v63, __src);
    outlined release of NavigationState.StackContent?((uint64_t)v62, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
    outlined retain of NavigationState.Base((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
    outlined retain of NavigationColumnState((uint64_t *)v8);
    if (NavigationState.Base.count.getter() != 1)
    {
      outlined release of NavigationColumnState((uint64_t *)v8);
      goto LABEL_38;
    }
    v27 = ~*(_QWORD *)(v8 + 112) & 0xF000000000000007;
    v28 = *(unsigned __int8 *)(v8 + 296);
    outlined retain of NavigationColumnState((uint64_t *)v8);
    if (v27)
    {
      if (v28 == 1)
        goto LABEL_58;
      MEMORY[0x18D75AC90](0xD00000000000017BLL, 0x8000000187BD44B0);
    }
    else if (v28 == 1)
    {
      MEMORY[0x18D75AC90](0xD00000000000017BLL, 0x8000000187BD44B0);
LABEL_58:
      outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v58);
      outlined release of NavigationColumnState((uint64_t *)v8);
      outlined release of NavigationColumnState((uint64_t *)v8);
      return 3;
    }
    outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v58);
    outlined release of NavigationColumnState((uint64_t *)v8);
    outlined release of NavigationColumnState((uint64_t *)v8);
    return 2;
  }
  _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v60);
  outlined init with take of Image.Resolved?((uint64_t)v61, (uint64_t)v57, &lazy cache variable for type metadata for NavigationState.Base?, (uint64_t)&type metadata for NavigationState.Base);
  if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v57) == 1)
    goto LABEL_30;
  outlined init with take of NavigationState.Base(v57, __dst);
  if (!_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)__dst))
  {
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)__dst);
LABEL_30:
    outlined release of NavigationState.StackContent?((uint64_t)v62, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
    outlined retain of NavigationState.Base((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
    outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v58);
    return 1;
  }
  outlined init with take of Image.Resolved?((uint64_t)v62, (uint64_t)__src, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  result = _s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)__src);
  if ((_DWORD)result == 1)
    goto LABEL_68;
  memcpy(v54, __src, sizeof(v54));
  outlined release of NavigationState.StackContent?((uint64_t)v62, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
  outlined retain of NavigationState.Base((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
  if ((NavigationState.StackContent.canPop.getter() & 1) == 0)
  {
    outlined init with take of NavigationState.Base(v57, v54);
    v36 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v54);
    if (!v36)
    {
      _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v54);
      goto LABEL_38;
    }
    if (v36 != 1)
    {
      _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v54);
      outlined init with take of Image.Resolved?((uint64_t)v62, (uint64_t)v53, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
      memcpy(v52, v53, sizeof(v52));
      outlined retain of NavigationState.Base((uint64_t)v53, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      v11 = NavigationState.StackContent.count.getter();
      outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v58);
      outlined release of NavigationState.StackContent?((uint64_t)v62, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
      if (v11 == 1)
        return v11;
      return 2;
    }
    v37 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v54);
    outlined init with take of Image.Resolved?((uint64_t)v62, (uint64_t)v53, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    memcpy(v52, v53, sizeof(v52));
    outlined retain of NavigationColumnState((uint64_t *)v37);
    if (NavigationState.StackContent.count.getter() != 1)
    {
      outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v58);
LABEL_65:
      outlined release of NavigationColumnState((uint64_t *)v37);
      return 2;
    }
    v38 = ~*(_QWORD *)(v37 + 112) & 0xF000000000000007;
    v39 = *(unsigned __int8 *)(v37 + 296);
    outlined retain of NavigationColumnState((uint64_t *)v37);
    if (v38)
    {
      if (v39 == 1)
        goto LABEL_64;
      MEMORY[0x18D75AC90](0xD00000000000017BLL, 0x8000000187BD44B0);
    }
    else if (v39 == 1)
    {
      MEMORY[0x18D75AC90](0xD00000000000017BLL, 0x8000000187BD44B0);
LABEL_64:
      outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v58);
      outlined release of NavigationColumnState((uint64_t *)v37);
      goto LABEL_65;
    }
    outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v58);
    outlined release of NavigationColumnState((uint64_t *)v37);
    outlined release of NavigationColumnState((uint64_t *)v37);
    return 1;
  }
  outlined init with take of Image.Resolved?((uint64_t)v62, (uint64_t)v54, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  memcpy(v53, v54, sizeof(v53));
  outlined retain of NavigationState.Base((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
  v14 = NavigationState.StackContent.count.getter();
  outlined release of (NavigationState.Base, NavigationState.Base?)((uint64_t)v58);
  result = outlined release of NavigationState.StackContent?((uint64_t)v62, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
  v15 = __OFSUB__(v14, 1);
  v11 = v14 - 1;
  if (!v15)
    return v11;
  __break(1u);
LABEL_68:
  __break(1u);
  return result;
}

void NavigationState.StackContent.Key.debugDescription.getter(uint64_t a1, char a2)
{
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x3A6E6D756C6F6320;
  v4._object = (void *)0xE900000000000020;
  String.append(_:)(v4);
  __asm { BR              X10 }
}

uint64_t sub_186FAF75C()
{
  void *v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v6;

  v1._countAndFlagsBits = 0x746E65746E6F63;
  v1._object = v0;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x436E6D756C6F6320;
  v2._object = (void *)0xEE00203A746E756FLL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 62;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v6;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NavigationState.StackContent.Key()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NavigationState.StackContent.Key()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *(unsigned __int8 *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  Hasher._combine(_:)(*(_QWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NavigationState.StackContent.Key()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NavigationState.StackContent.Key()
{
  uint64_t v0;

  NavigationState.StackContent.Key.debugDescription.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NavigationState.StackContent.Key(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

unint64_t lazy protocol witness table accessor for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key;
  if (!lazy protocol witness table cache variable for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationState.StackContent.Key, &type metadata for NavigationState.StackContent.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key;
  if (!lazy protocol witness table cache variable for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationState.StackContent.Key, &type metadata for NavigationState.StackContent.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NavigationState.StackContent.ChangeKind(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  if (*((_BYTE *)a1 + 8) == 1)
    return ((uint64_t (*)(void))((char *)&loc_186FAFA38 + 4 * byte_187BFDDD8[v2]))();
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    return 0;
  return v2 == *(_QWORD *)a2;
}

uint64_t NavigationState.StackContent.Views.ViewsSequence.startIndex.getter()
{
  void *v0;
  int v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  _BYTE __dst[299];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int16 v37;
  _BYTE v38[299];
  _BYTE __src[392];
  _BYTE v40[440];

  outlined init with take of NavigationState.Base(v0, __src);
  outlined init with take of NavigationState.Base(__src, v40);
  v1 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v40);
  if (v1)
  {
    if (v1 == 1)
    {
      v2 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v40);
      outlined init with take of NavigationState.Base(__src, v27);
      v3 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v27);
      v4 = v2[38];
      outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v3);
      outlined consume of ResolvedNavigationDestinations?(v4);
      outlined release of NavigationColumnState(v2);
    }
    else
    {
      v6 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v40);
      v7 = *(_QWORD *)v6;
      v9 = *(_QWORD *)(v6 + 16);
      v8 = *(_QWORD *)(v6 + 24);
      v11 = *(_QWORD *)(v6 + 32);
      v10 = *(_QWORD *)(v6 + 40);
      v12 = *(_QWORD *)(v6 + 48);
      v13 = *(_QWORD *)(v6 + 56);
      v14 = *(_QWORD *)(v6 + 64);
      v15 = *(_WORD *)(v6 + 72);
      v26 = *(_QWORD *)(v6 + 8);
      v29 = v26;
      v30 = v9;
      v31 = v8;
      v32 = v11;
      v33 = v10;
      v34 = v12;
      v35 = v13;
      v36 = v14;
      v37 = v15;
      if (*(_QWORD *)(v7 + 16))
      {
        outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
        swift_bridgeObjectRetain();
        memcpy(__dst, (const void *)(v7 + 32), sizeof(__dst));
        memcpy(v38, (const void *)(v7 + 32), sizeof(v38));
        __asm { BR              X9 }
      }
      outlined init with take of NavigationState.Base(__src, v27);
      v16 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v27);
      v24 = *(_QWORD *)(v16 + 16);
      v25 = *(_QWORD *)(v16 + 8);
      v22 = *(_QWORD *)(v16 + 32);
      v23 = *(_QWORD *)(v16 + 24);
      v20 = *(_QWORD *)(v16 + 48);
      v21 = *(_QWORD *)(v16 + 40);
      v18 = *(_QWORD *)(v16 + 64);
      v19 = *(_QWORD *)(v16 + 56);
      v17 = *(_WORD *)(v16 + 72);
      swift_bridgeObjectRetain();
      outlined copy of NavigationSplitViewState?(v25, v24, v23, v22, v21, v20, v19, v18, v17, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
      outlined copy of NavigationSplitViewState?(v26, v9, v8, v11, v10, v12, v13, v14, v15, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v40);
  }
  return 0;
}

uint64_t NavigationState.StackContent.Views.ViewsSequence.index(after:)(unint64_t a1, char a2, uint64_t a3, char a4)
{
  void *v4;
  void *v5;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  _BYTE v54[299];
  _QWORD v55[39];
  _BYTE v56[392];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int16 v65;
  _BYTE __dst[304];
  _BYTE __src[392];
  _BYTE v68[456];

  v5 = v4;
  outlined init with take of NavigationState.Base(v5, __src);
  outlined init with take of NavigationState.Base(__src, v68);
  v9 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v68);
  if (v9)
  {
    v52 = a3;
    v51 = a4;
    if (v9 == 1)
    {
      v10 = (_QWORD *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v68);
      outlined init with take of NavigationState.Base(__src, v56);
      v11 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v56);
      v12 = v10[38];
      outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v11);
      outlined consume of ResolvedNavigationDestinations?(v12);
      memcpy(__dst, v10, 0x12BuLL);
      v13 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:for:)(a1, a2 & 1, a3, a4, (uint64_t)__dst);
      v15 = ~v14;
      outlined release of NavigationColumnState(v10);
      if (v15)
        return v13;
    }
    else
    {
      v16 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v68);
      v18 = *(_QWORD *)v16;
      v17 = *(_QWORD *)(v16 + 8);
      v20 = *(_QWORD *)(v16 + 16);
      v19 = *(_QWORD *)(v16 + 24);
      v21 = *(_QWORD *)(v16 + 32);
      v22 = *(_QWORD *)(v16 + 40);
      v24 = *(_QWORD *)(v16 + 48);
      v23 = *(_QWORD *)(v16 + 56);
      v25 = *(_QWORD *)(v16 + 64);
      v26 = *(_WORD *)(v16 + 72);
      v57 = v17;
      v58 = v20;
      v59 = v19;
      v48 = v21;
      v60 = v21;
      v61 = v22;
      v62 = v24;
      v63 = v23;
      v64 = v25;
      v47 = v26;
      v65 = v26;
      if ((a2 & 1) != 0)
      {
        __break(1u);
        JUMPOUT(0x186FB11FCLL);
      }
      if ((a1 & 0x8000000000000000) != 0)
        goto LABEL_22;
      if (*(_QWORD *)(v18 + 16) <= a1)
      {
LABEL_23:
        __break(1u);
        JUMPOUT(0x186FB1160);
      }
      v41 = v17;
      v42 = v20;
      v50 = v19;
      v43 = v22;
      v44 = v24;
      v45 = v23;
      v46 = v25;
      memcpy(__dst, (const void *)(v18 + 304 * a1 + 32), 0x12BuLL);
      outlined init with take of NavigationState.Base(__src, v56);
      v27 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v56);
      v28 = *(_QWORD *)(v27 + 8);
      v29 = *(_QWORD *)(v27 + 16);
      v30 = *(_QWORD *)(v27 + 24);
      v49 = v18;
      v31 = *(_QWORD *)(v27 + 32);
      v32 = *(_QWORD *)(v27 + 40);
      v33 = *(_QWORD *)(v27 + 48);
      v34 = *(_QWORD *)(v27 + 56);
      v35 = *(_QWORD *)(v27 + 64);
      v36 = *(_WORD *)(v27 + 72);
      swift_bridgeObjectRetain();
      outlined copy of NavigationSplitViewState?(v28, v29, v30, v31, v32, v33, v34, v35, v36, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
      v37 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:for:)(a1, 0, v52, v51, (uint64_t)__dst);
      if (v38 != -1)
      {
        v13 = v37;
        outlined copy of NavigationSplitViewState?(v41, v42, v50, v48, v43, v44, v45, v46, v47, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        swift_bridgeObjectRelease();
        return v13;
      }
      v39 = *(_QWORD *)(v49 + 16);
      if (v39 <= a1)
      {
        __break(1u);
        JUMPOUT(0x186FB116CLL);
      }
      if (a1 + 1 != v39)
      {
        swift_bridgeObjectRetain();
        if (a1 + 1 >= v39)
        {
          __break(1u);
          JUMPOUT(0x186FB10C4);
        }
        memcpy(v54, (const void *)(v49 + 304 * a1 + 336), sizeof(v54));
        if (a1 + 1 < *(_QWORD *)(v49 + 16))
        {
          memcpy(v55, (const void *)(v49 + 304 * a1 + 336), 0x12BuLL);
          __asm { BR              X9 }
        }
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      outlined copy of NavigationSplitViewState?(v41, v42, v50, v48, v43, v44, v45, v46, v47, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v68);
  return 0;
}

uint64_t NavigationState.StackContent.Views.ViewsSequence.index(before:)(unint64_t a1, char a2, uint64_t a3, char a4)
{
  const void *v4;
  const void *v5;
  int v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int16 v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int16 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *__src;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  _QWORD v69[52];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int16 v78;
  _QWORD v79[38];
  _BYTE __dst[416];
  _BYTE v81[400];

  v5 = v4;
  memcpy(__dst, v5, sizeof(__dst));
  outlined init with take of NavigationState.Base(__dst, v81);
  v10 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v81);
  if (!v10)
    goto LABEL_6;
  if (v10 != 1)
  {
    v17 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v81);
    v18 = *(_QWORD *)v17;
    v20 = *(_QWORD *)(v17 + 16);
    v19 = *(_QWORD *)(v17 + 24);
    v22 = *(_QWORD *)(v17 + 32);
    v21 = *(_QWORD *)(v17 + 40);
    v24 = *(_QWORD *)(v17 + 48);
    v23 = *(_QWORD *)(v17 + 56);
    v25 = *(_QWORD *)(v17 + 64);
    v26 = *(_WORD *)(v17 + 72);
    v70 = *(_QWORD *)(v17 + 8);
    v71 = v20;
    v61 = v22;
    v62 = v19;
    v72 = v19;
    v73 = v22;
    v74 = v21;
    v75 = v24;
    v76 = v23;
    v77 = v25;
    v60 = v26;
    v78 = v26;
    v63 = v18;
    v58 = v23;
    v59 = v25;
    v56 = v21;
    v57 = v24;
    v54 = v70;
    v55 = v20;
    if ((a2 & 1) != 0)
    {
      v67 = *(_QWORD *)(v18 + 16);
      outlined init with take of NavigationState.Base(__dst, v69);
      v42 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v69);
      v43 = *(_QWORD *)(v42 + 8);
      v44 = *(_QWORD *)(v42 + 16);
      v45 = *(_QWORD *)(v42 + 24);
      v46 = *(_QWORD *)(v42 + 32);
      v47 = *(_QWORD *)(v42 + 40);
      v48 = *(_QWORD *)(v42 + 48);
      v49 = *(_QWORD *)(v42 + 56);
      v50 = *(_QWORD *)(v42 + 64);
      v51 = *(_WORD *)(v42 + 72);
      swift_bridgeObjectRetain();
      v52 = v47;
      v38 = v67;
      outlined copy of NavigationSplitViewState?(v43, v44, v45, v46, v52, v48, v49, v50, v51, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
    }
    else
    {
      if ((a1 & 0x8000000000000000) != 0)
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      __src = (void *)a3;
      v68 = a4;
      if (*(_QWORD *)(v18 + 16) <= a1)
      {
LABEL_22:
        __break(1u);
        JUMPOUT(0x186FB21C8);
      }
      memcpy(v79, (const void *)(v18 + 304 * a1 + 32), 0x12BuLL);
      outlined init with take of NavigationState.Base(__dst, v69);
      v27 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v69);
      v28 = *(_QWORD *)(v27 + 8);
      v29 = *(_QWORD *)(v27 + 16);
      v30 = *(_QWORD *)(v27 + 24);
      v66 = a1;
      v31 = *(_QWORD *)(v27 + 32);
      v32 = *(_QWORD *)(v27 + 40);
      v33 = *(_QWORD *)(v27 + 48);
      v34 = *(_QWORD *)(v27 + 56);
      v35 = *(_QWORD *)(v27 + 64);
      v36 = *(_WORD *)(v27 + 72);
      swift_bridgeObjectRetain();
      v37 = v32;
      v38 = v66;
      outlined copy of NavigationSplitViewState?(v28, v29, v30, v31, v37, v33, v34, v35, v36, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
      v39 = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:for:)(v66, 0, (uint64_t)__src, v68, (uint64_t)v79);
      if (v40 != -1)
      {
        v16 = v39;
        outlined copy of NavigationSplitViewState?(v54, v55, v62, v61, v56, v57, v58, v59, v60, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        swift_bridgeObjectRelease();
        return v16;
      }
    }
    if (!v38)
    {
      swift_bridgeObjectRelease();
      memcpy(v69, __dst, sizeof(v69));
      outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__dst);
      v16 = NavigationState.StackContent.Views.ViewsSequence.startIndex.getter();
      outlined copy of NavigationSplitViewState?(v54, v55, v62, v61, v56, v57, v58, v59, v60, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__dst);
      return v16;
    }
    if ((unint64_t)(v38 - 1) < *(_QWORD *)(v63 + 16))
    {
      memcpy(v69, (const void *)(v63 + 304 * v38 - 272), 0x12BuLL);
      __asm { BR              X10 }
    }
    __break(1u);
    goto LABEL_21;
  }
  v65 = a1;
  v11 = (_QWORD *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v81);
  outlined init with take of NavigationState.Base(__dst, v69);
  v12 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v69);
  v13 = v11[38];
  outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v12);
  outlined consume of ResolvedNavigationDestinations?(v13);
  if ((a2 & 1) != 0)
  {
    memcpy(v79, v11, 0x12BuLL);
    v14 = specialized NavigationState.StackContent.Views.ViewsSequence.lastIndex(for:stateIndex:)(v79, 0);
    if (v41 == -1)
    {
      __break(1u);
      JUMPOUT(0x186FB21D8);
    }
    goto LABEL_13;
  }
  memcpy(v79, v11, 0x12BuLL);
  v14 = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:for:)(v65, 0, a3, a4, (uint64_t)v79);
  if (v15 != -1)
  {
LABEL_13:
    v16 = v14;
    outlined release of NavigationColumnState(v11);
    return v16;
  }
  __break(1u);
LABEL_6:
  _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v81);
  memcpy(v69, __dst, sizeof(v69));
  return NavigationState.StackContent.Views.ViewsSequence.startIndex.getter();
}

void NavigationState.StackContent.Views.ViewsSequence.subscript.getter(unint64_t a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  const void *v6;
  const void *v7;
  int v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t __src[50];
  _BYTE v43[304];
  _QWORD v44[8];
  unsigned __int16 v45;
  _BYTE __dst[416];
  _BYTE v47[392];
  _BYTE v48[416];

  v7 = v6;
  memcpy(__dst, v7, sizeof(__dst));
  outlined init with take of NavigationState.Base(__dst, v47);
  v13 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v47);
  if (!v13)
  {
    v18 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v47);
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 16);
    v21 = *(_BYTE *)(v18 + 8);
    memcpy(v48, __dst, sizeof(v48));
    NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:)(0, 0, v19, v21, v20, a5, a6);
    return;
  }
  v40 = a6;
  v39 = a3;
  if (v13 != 1)
  {
    v22 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v47);
    v23 = *(_QWORD *)v22;
    v24 = *(_QWORD *)(v22 + 8);
    v25 = *(_QWORD *)(v22 + 16);
    v26 = *(_QWORD *)(v22 + 24);
    v28 = *(_QWORD *)(v22 + 32);
    v27 = *(_QWORD *)(v22 + 40);
    v29 = *(_QWORD *)(v22 + 48);
    v30 = *(_QWORD *)(v22 + 56);
    v31 = *(_QWORD *)(v22 + 64);
    v32 = *(_WORD *)(v22 + 72);
    v44[0] = v24;
    v44[1] = v25;
    v44[2] = v26;
    v44[3] = v28;
    v44[4] = v27;
    v44[5] = v29;
    v44[6] = v30;
    v44[7] = v31;
    v45 = v32;
    if ((a2 & 1) != 0)
    {
LABEL_17:
      __break(1u);
LABEL_18:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(v23 + 16) >= a1)
    {
      v35 = v31;
      v36 = v30;
      v37 = v29;
      v38 = v27;
      outlined retain of NavigationState.Base((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      v33 = swift_bridgeObjectRetain();
      v34 = (uint64_t *)specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v33, (uint64_t)v44, 0, (2 * a1) | 1);
      swift_bridgeObjectRelease();
      memcpy(v48, __dst, sizeof(v48));
      if (*(_QWORD *)(v23 + 16) > a1)
      {
        memcpy(__src, (const void *)(v23 + 304 * a1 + 32), 0x12BuLL);
        outlined retain of NavigationColumnState(__src);
        swift_bridgeObjectRelease();
        memcpy(v43, __src, 0x12BuLL);
        NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(a1, 0, v39, a4, (uint64_t)v43, v34, a5, v40);
        outlined copy of NavigationSplitViewState?(v24, v25, v26, v28, v38, v37, v36, v35, v32, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        v17 = __src;
        goto LABEL_12;
      }
      goto LABEL_16;
    }
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v14 = (_QWORD *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v47);
  outlined init with take of NavigationState.Base(__dst, __src);
  v15 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)__src);
  v16 = v14[38];
  outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v15);
  outlined consume of ResolvedNavigationDestinations?(v16);
  if ((a2 & 1) != 0 || a1)
    goto LABEL_18;
  memcpy(v48, __dst, sizeof(v48));
  memcpy(v43, v14, 0x12BuLL);
  NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(0, 0, v39, a4, (uint64_t)v43, 0, a5, a6);
  v17 = v14;
LABEL_12:
  outlined release of NavigationColumnState(v17);
}

void NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(uint64_t a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _QWORD *a7@<X6>, uint64_t a8@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _QWORD *v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t (*v94)(uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[3];
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  _QWORD *v113;
  _QWORD v114[2];
  _QWORD v115[2];
  _QWORD v116[3];
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  _QWORD v125[49];
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;

  v9 = v8;
  v12 = *(_QWORD *)(a5 + 16);
  v13 = *(unsigned __int8 *)(a5 + 24);
  v14 = *(_QWORD *)(a5 + 32);
  v15 = *(_QWORD *)(a5 + 168);
  v17 = v8[49];
  v16 = v8[50];
  if (a4)
  {
    v113 = a7;
    if (a4 == 1)
    {
      if ((v15 & 0x8000000000000000) == 0)
      {
        v18 = v13;
        v20 = v12;
        v110 = v17;
        v111 = v16;
        v112 = (uint64_t *)a8;
        v21 = v14;
        v22 = *(_QWORD *)(a5 + 176);
        v23 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 88);
        v24 = swift_retain();
        v25 = v23(v24);
        v26 = v25 + 1;
        if (!__OFADD__(v25, 1))
        {
          v27 = v26 + a3;
          if (!__OFADD__(v26, a3))
          {
            if ((a3 & 0x8000000000000000) == 0)
            {
              if (*(_QWORD *)(v22 + 16) > a3)
              {
                v28 = (char *)a6 + v27;
                if (!__OFADD__(a6, v27))
                {
                  v109 = v15;
                  v29 = v18;
                  v30 = (_QWORD *)(v22 + 56 * a3);
                  v31 = v30[4];
                  v125[0] = v27;
                  v125[1] = v20;
                  LOBYTE(v125[2]) = v18;
                  v125[3] = v21;
                  v125[4] = v28;
                  LOBYTE(v125[5]) = 1;
                  v32 = v113[3];
                  v33 = v113[5];
                  v34 = v27;
                  swift_retain();
                  v113 = (_QWORD *)AnyNavigationLinkPresentedView.view<A>(at:applying:)((uint64_t)v125, v110, v111, v31, v32, v33);
                  swift_release();
                  if (v29 >= 3)
                    LOBYTE(v29) = 3;
                  v35 = v30[5];
                  v36 = v112;
                  v38 = v30[6];
                  v37 = v30[7];
                  v39 = v30[8];
                  swift_retain();
                  swift_retain();
                  outlined copy of _ViewList_ID.Canonical?(v38, v37);
                  swift_retain();
                  swift_release();
                  swift_retain();
                  outlined copy of _ViewList_ID.Canonical?(v38, v37);
                  swift_release();
                  swift_release();
                  outlined consume of Text.LineStyle?(v38, v37);
                  swift_release();
                  v112[4] = v38;
                  v36[5] = v37;
                  v36[6] = v39;
                  *((_BYTE *)v36 + 64) = 1;
                  *v36 = (uint64_t)v113;
                  *((_BYTE *)v36 + 8) = v29;
                  v36[2] = v34;
                  v36[3] = v35;
                  return;
                }
                goto LABEL_46;
              }
LABEL_45:
              __break(1u);
LABEL_46:
              __break(1u);
              goto LABEL_47;
            }
LABEL_44:
            __break(1u);
            goto LABEL_45;
          }
          goto LABEL_42;
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
LABEL_50:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    v62 = *(_QWORD *)(a5 + 112);
    v63 = *(_QWORD *)(a5 + 120);
    v64 = *(_QWORD *)(a5 + 128);
    v65 = *(_QWORD *)(a5 + 136);
    v66 = *(_QWORD *)(a5 + 144);
    v67 = *(_QWORD *)(a5 + 160);
    v68 = v9[51];
    v69 = v62 & 0xF000000000000007;
    v108 = v14;
    if (v15 < 0)
    {
      v81 = v17;
      v82 = v16;
      v107 = v12;
      if (v69 == 0xF000000000000007)
      {
        memcpy(v125, v9, sizeof(v125));
        v126 = v81;
        v127 = v82;
        v128 = v68;
        if ((a2 & 1) != 0)
        {
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        v75 = a8;
        v76 = a1;
        v77 = (uint64_t)a6;
        v78 = v107;
        v80 = v108;
        v79 = v13;
        goto LABEL_26;
      }
      v112 = a6;
      if (v62 < 0)
      {
        v84 = v62;
        v110 = v64;
        v111 = v63;
        v109 = v65;
        v105 = v66;
        v106 = v67;
        outlined copy of NavigationColumnState.ReplacedRoot?(v62, v63, v64, v65);
        goto LABEL_36;
      }
    }
    else
    {
      if (v69 == 0xF000000000000007)
      {
        v71 = v12;
        v72 = v9;
        v73 = v16;
        v74 = v17;
        memcpy(v125, v72, sizeof(v125));
        v126 = v74;
        v127 = v73;
        v128 = v68;
        if ((a2 & 1) != 0)
        {
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
        v75 = a8;
        v76 = a1;
        v77 = (uint64_t)a6;
        v78 = v71;
        v79 = v13;
        v80 = v108;
LABEL_26:
        NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:)(v76, v77, v78, v79, v80, v113, v75);
        return;
      }
      v112 = a6;
      v107 = v12;
      v81 = v17;
      v82 = v16;
      if (v62 < 0)
      {
        v84 = v62;
        v110 = v64;
        v111 = v63;
        v109 = v65;
        v105 = v66;
        v106 = v67;
        outlined copy of NavigationColumnState.ReplacedRoot(v62, v63, v64, v65);
LABEL_36:
        v104 = v84 & 0x7FFFFFFFFFFFFFFFLL;
        v129 = 0;
        v130 = v107;
        LOBYTE(v131) = v13;
        v132 = v108;
        v133 = v112;
        LOBYTE(v134) = v15 >= 0;
        memcpy(v125, v9, sizeof(v125));
        v126 = v81;
        v127 = v82;
        v128 = v68;
        v94 = NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:)(v107, v13, v108, (uint64_t)v113);
        v96 = v95;
        v97 = type metadata accessor for ModifiedContent();
        v114[0] = v113[5];
        v114[1] = &protocol witness table for ReplacedRootDismissModifier;
        v98 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E60], v97, v114);
        v99 = AnyNavigationLinkPresentedView.view<A>(at:applying:)((uint64_t)&v129, (uint64_t)v94, v96, v104, v97, v98);
        swift_release();
        if (v13 >= 3)
          v100 = 3;
        else
          v100 = v13;
        v101 = v111;
        swift_retain();
        v102 = v109;
        outlined copy of _ViewList_ID.Canonical?(v110, v109);
        swift_release();
        swift_release();
        outlined consume of Text.LineStyle?(v110, v109);
        swift_release();
        *(_QWORD *)(a8 + 32) = v110;
        *(_QWORD *)(a8 + 40) = v102;
        *(_QWORD *)(a8 + 48) = v105;
        *(_BYTE *)(a8 + 64) = 1;
        *(_QWORD *)a8 = v99;
        *(_BYTE *)(a8 + 8) = v100;
        *(_QWORD *)(a8 + 16) = 0;
        *(_QWORD *)(a8 + 24) = v101;
        return;
      }
    }
    v109 = v15;
    LODWORD(v111) = v13;
    v85 = v62;
    swift_retain();
    memcpy(v125, v9, sizeof(v125));
    v126 = v81;
    v127 = v82;
    v128 = v68;
    if ((a2 & 1) != 0)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    NavigationState.StackContent.Views.ViewsSequence.destinations(before:)(a1, (uint64_t)&v129);
    v103[2] = v131;
    v104 = v130;
    v103[1] = v133;
    v105 = v134;
    v106 = v129;
    v110 = v135;
    v116[0] = v129;
    v116[1] = v130;
    v116[2] = v131;
    v117 = v132;
    v118 = v133;
    v119 = v134;
    v120 = v135;
    v121 = v136;
    v122 = v137;
    v123 = v138;
    v124 = v139;
    memcpy(v125, v9, sizeof(v125));
    v126 = v81;
    v127 = v82;
    v128 = v68;
    v86 = NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:)(v107, v111, v108, (uint64_t)v113);
    v88 = v87;
    v125[0] = 0;
    v125[1] = v107;
    LOBYTE(v125[2]) = v111;
    v125[3] = v108;
    v125[4] = v112;
    LOBYTE(v125[5]) = v109 >= 0;
    v89 = type metadata accessor for ModifiedContent();
    v115[0] = v113[5];
    v115[1] = &protocol witness table for ReplacedRootDismissModifier;
    v90 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E60], v89, v115);
    v91 = AnyNavigationLinkPresentedValue.view<A>(basedOn:applying:apparentPosition:)((uint64_t)v116, (uint64_t)v86, v88, (uint64_t)v125, v85, v89, v90);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v92 = swift_release();
    if (v111 >= 3)
      v93 = 3;
    else
      v93 = v111;
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 96))(v92);
    swift_release();
    *(_BYTE *)(a8 + 64) = 0;
    *(_QWORD *)a8 = v91;
    *(_BYTE *)(a8 + 8) = v93;
    *(_QWORD *)(a8 + 16) = 0;
  }
  else
  {
    if (v15 < 0)
      goto LABEL_50;
    v40 = a3 + 1;
    if (__OFADD__(a3, 1))
      goto LABEL_41;
    v112 = (uint64_t *)a8;
    v41 = *(_QWORD *)(a5 + 200);
    v43 = *(_QWORD *)(a5 + 208);
    v42 = *(_QWORD *)(a5 + 216);
    v45 = *(_QWORD *)(a5 + 224);
    v44 = *(_QWORD *)(a5 + 232);
    v47 = *(_QWORD *)(a5 + 240);
    v46 = *(_QWORD *)(a5 + 248);
    v48 = *(_QWORD *)(a5 + 256);
    v49 = *(_BYTE *)(a5 + 264);
    v50 = *(_QWORD *)(a5 + 272);
    v109 = *(_QWORD *)(a5 + 192);
    v125[0] = v109;
    v125[1] = v41;
    v125[2] = v43;
    v125[3] = v42;
    v125[4] = v45;
    v125[5] = v44;
    v125[6] = v47;
    v125[7] = v46;
    v125[8] = v48;
    LOBYTE(v125[9]) = v49;
    v125[10] = v50;
    if (__OFADD__(a6, v40))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v129 = a3 + 1;
    v130 = v12;
    LOBYTE(v131) = v13;
    v132 = v14;
    v133 = (uint64_t *)((char *)a6 + v40);
    LOBYTE(v134) = 1;
    v51 = a7[3];
    v107 = a7[5];
    v108 = v51;
    v113 = (_QWORD *)(a3 + 1);
    v110 = v17;
    v111 = v16;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    v52 = AnyNavigationPath.view<A>(basedOn:applying:index:apparentPosition:)((uint64_t)v116, (uint64_t)v125, v110, v111, a3, (uint64_t)&v129, v15, v108, v107);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v13 >= 3)
      v53 = 3;
    else
      v53 = v13;
    v54 = __swift_project_boxed_opaque_existential_1(v116, v117);
    v55 = MEMORY[0x1E0C80A78](v54, v54);
    (*(void (**)(char *, double))(v57 + 16))((char *)v103 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0), v55);
    AnyHashable.init<A>(_:)();
    swift_release();
    LOBYTE(v125[5]) = 0;
    v58 = v112;
    v59 = v113;
    *v112 = v52;
    *((_BYTE *)v58 + 8) = v53;
    v58[2] = (uint64_t)v59;
    outlined init with take of NavigationStackViewSource((uint64_t)v125, (uint64_t)(v58 + 3));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
  }
}

double NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X4>, _QWORD *a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v7;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(uint64_t *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double result;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29[50];
  __int128 v30;

  v26 = a2;
  v27 = a5;
  v24 = a1;
  v25 = a3;
  v11 = a4;
  v12 = type metadata accessor for _VariadicView.Tree();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v23 - v15;
  memcpy(v29, (const void *)v7, 0x188uLL);
  v17 = *(void (**)(uint64_t *))(v7 + 392);
  v29[49] = (uint64_t)v17;
  v23 = *(_OWORD *)(v7 + 400);
  v30 = v23;
  NavigationState.StackContent.Views.ViewsSequence.formattedRoot(_:)(v24, (uint64_t)a6);
  v29[0] = 0;
  v29[1] = v25;
  LOBYTE(v29[2]) = a4;
  v29[3] = v27;
  v29[4] = v26;
  LOBYTE(v29[5]) = v11 == 3;
  v19 = a6[3];
  v18 = a6[4];
  v28[0] = MEMORY[0x1E0CE25C0];
  v28[1] = v18;
  if (v11 >= 3)
    LOBYTE(v11) = 3;
  v20 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v12, v28);
  v21 = specialized static ResolvedNavigationDestinations.prepareToPresent<A, B>(view:at:shouldUpdateDestinations:applying:)((uint64_t)v16, v29, v17, v23, v12, v19, v20, a6[5]);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  *(_QWORD *)(a7 + 56) = 0;
  result = 0.0;
  *(_OWORD *)(a7 + 40) = 0u;
  *(_OWORD *)(a7 + 24) = 0u;
  *(_BYTE *)(a7 + 64) = 2;
  *(_QWORD *)a7 = v21;
  *(_BYTE *)(a7 + 8) = v11;
  *(_QWORD *)(a7 + 16) = 0;
  return result;
}

uint64_t (*NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  const void *v4;
  uint64_t v9;
  __int128 v10;
  _BYTE __dst[424];

  memcpy(__dst, v4, 0x1A0uLL);
  v9 = swift_allocObject();
  v10 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v9 + 32) = v10;
  memcpy((void *)(v9 + 48), v4, 0x1A0uLL);
  *(_QWORD *)(v9 + 464) = a1;
  *(_BYTE *)(v9 + 472) = a2;
  *(_QWORD *)(v9 + 480) = a3;
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__dst);
  return partial apply for closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:);
}

uint64_t NavigationState.StackContent.Views.ViewsSequence.destinations(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t result;
  _BYTE __dst[392];
  _BYTE v36[392];

  v3 = v2;
  outlined init with take of NavigationState.Base(v3, __dst);
  outlined init with take of NavigationState.Base(__dst, v36);
  v6 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v36);
  if (v6 == 1)
  {
    v7 = (_QWORD *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v36);
    v8 = v7[38];
    if (v8)
      v9 = a1 == 0;
    else
      v9 = 0;
    if (!v9)
      goto LABEL_15;
    v11 = v7[43];
    v10 = v7[44];
    v13 = v7[47];
    v12 = v7[48];
    v15 = v7[45];
    v14 = v7[46];
    v16 = v7[41];
    v17 = v7[42];
    v19 = v7[39];
    v18 = v7[40];
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v19;
    *(_QWORD *)(a2 + 16) = v18;
    *(_QWORD *)(a2 + 24) = v16;
    *(_QWORD *)(a2 + 32) = v17;
    *(_QWORD *)(a2 + 40) = v11;
    *(_QWORD *)(a2 + 48) = v10;
    *(_QWORD *)(a2 + 56) = v15;
    *(_QWORD *)(a2 + 64) = v14;
    *(_BYTE *)(a2 + 72) = v13;
    *(_QWORD *)(a2 + 80) = v12;
LABEL_12:
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  if (v6 != 2)
    goto LABEL_14;
  v20 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v36);
  v21 = a1 - 1;
  if (a1 >= 1)
  {
    if (v21 < *(_QWORD *)(*(_QWORD *)v20 + 16))
    {
      v22 = *(_QWORD *)v20 + 304 * v21;
      v24 = *(_QWORD *)(v22 + 224);
      v23 = *(_QWORD *)(v22 + 232);
      v26 = *(_QWORD *)(v22 + 240);
      v25 = *(_QWORD *)(v22 + 248);
      v28 = *(_QWORD *)(v22 + 256);
      v27 = *(_QWORD *)(v22 + 264);
      v29 = *(_QWORD *)(v22 + 272);
      v30 = *(_QWORD *)(v22 + 280);
      v31 = *(_QWORD *)(v22 + 288);
      v32 = *(_BYTE *)(v22 + 296);
      v33 = *(_QWORD *)(v22 + 304);
      *(_QWORD *)a2 = v24;
      *(_QWORD *)(a2 + 8) = v23;
      *(_QWORD *)(a2 + 16) = v26;
      *(_QWORD *)(a2 + 24) = v25;
      *(_QWORD *)(a2 + 32) = v28;
      *(_QWORD *)(a2 + 40) = v27;
      *(_QWORD *)(a2 + 48) = v29;
      *(_QWORD *)(a2 + 56) = v30;
      *(_QWORD *)(a2 + 64) = v31;
      *(_BYTE *)(a2 + 72) = v32;
      *(_QWORD *)(a2 + 80) = v33;
      goto LABEL_12;
    }
    __break(1u);
LABEL_14:
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v36);
  }
LABEL_15:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t NavigationState.StackContent.Views.ViewsSequence.formattedRoot(_:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  static HorizontalAlignment.center.getter();
  Array.subscript.getter();
  return _VariadicView.Tree.init(root:content:)();
}

uint64_t closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v13 = *(_QWORD *)(a7 - 8);
  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v17 + 392))(v14);
  v20 = a3;
  v21 = a4;
  v22 = a5;
  MEMORY[0x18D756BEC](&v20, a7, &type metadata for ReplacedRootDismissModifier, a9);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, a7);
}

uint64_t static NavigationState.StackContent.Views.ViewsSequence.Index.< infix(_:_:)(uint64_t a1, int a2, uint64_t a3, char a4, uint64_t a5, int a6, uint64_t a7, char a8)
{
  _BOOL4 v10;
  _BOOL4 v12;

  if (((a6 | a2) & 1) != 0)
    return a6 & ((a2 & 1) == 0);
  if (a1 < a5)
    return 1;
  if (a5 < a1)
    return 0;
  if (a4)
  {
    v10 = a8 == 1 && a3 < a7;
    v12 = a8 != 2 || a7 != 0;
    if (a4 == 1)
      return v10;
    else
      return v12;
  }
  else if (a8)
  {
    return a8 == 1;
  }
  else
  {
    return a3 < a7;
  }
}

BOOL static NavigationState.StackContent.Views.ViewsSequence.Index.Kind.< infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _BOOL4 v5;
  _BOOL4 v7;

  if (a2)
  {
    v5 = a4 == 1 && a1 < a3;
    v7 = a4 != 2 || a3 != 0;
    if (a2 == 1)
      return v5;
    else
      return v7;
  }
  else if (a4)
  {
    return a4 == 1;
  }
  else
  {
    return a1 < a3;
  }
}

uint64_t static NavigationState.StackContent.Views.ViewsSequence.Index.Kind.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2)
  {
    if (a2 == 1)
    {
      if (a4 != 1)
        return 0;
      return a1 == a3;
    }
    if (a4 == 2 && !a3)
      return 1;
  }
  else if (!a4)
  {
    return a1 == a3;
  }
  return 0;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>.Index.Kind(uint64_t a1, uint64_t a2)
{
  return static NavigationState.StackContent.Views.ViewsSequence.Index.Kind.< infix(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

BOOL static NavigationState.StackContent.Views.ViewsSequence.Index.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  _BOOL8 result;

  if ((a2 & 1) != 0)
  {
    if ((a6 & 1) == 0)
      return 0;
LABEL_6:
    if (a4)
    {
      if (a4 != 1)
        return a8 == 2 && !a7;
      if (a8 != 1)
        return 0;
    }
    else if (a8)
    {
      return 0;
    }
    return a3 == a7;
  }
  result = 0;
  if ((a6 & 1) == 0 && a1 == a5)
    goto LABEL_6;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>.Index.Kind(uint64_t a1, uint64_t a2)
{
  return static NavigationState.StackContent.Views.ViewsSequence.Index.Kind.== infix(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.< infix(_:_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>.Index(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))static NavigationState.StackContent.Views.ViewsSequence.Index.< infix(_:_:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.< infix(_:_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>.Index(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))static NavigationState.StackContent.Views.ViewsSequence.Index.== infix(_:_:));
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8), *(_QWORD *)(a2 + 16), *(unsigned __int8 *)(a2 + 24)) & 1;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))NavigationState.StackContent.Views.ViewsSequence.index(before:), a3);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))NavigationState.StackContent.Views.ViewsSequence.index(before:));
}

uint64_t protocol witness for Collection.startIndex.getter in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  char v5;

  result = NavigationState.StackContent.Views.ViewsSequence.startIndex.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  char v5;

  result = specialized NavigationState.StackContent.Views.ViewsSequence.endIndex.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(_QWORD *a1, uint64_t a2, _QWORD *a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = NavigationState.StackContent.Views.ViewsSequence.subscript.read(v6, *(_QWORD *)a2, *(_BYTE *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_BYTE *)(a2 + 24), a3);
  return protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape;
}

void (*NavigationState.StackContent.Views.ViewsSequence.subscript.read(_QWORD *a1, unint64_t a2, char a3, unint64_t a4, char a5, _QWORD *a6))(uint64_t *a1)
{
  void *v12;

  v12 = malloc(0x41uLL);
  *a1 = v12;
  NavigationState.StackContent.Views.ViewsSequence.subscript.getter(a2, a3 & 1, a4, a5, a6, (uint64_t)v12);
  return NavigationState.StackContent.Views.ViewsSequence.subscript.read;
}

void NavigationState.StackContent.Views.ViewsSequence.subscript.read(uint64_t *a1)
{
  void *v1;

  v1 = (void *)*a1;
  outlined destroy of NavigationState.StackContent.PositionedView(*a1);
  free(v1);
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = -2;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationState.StackContent.Views.ViewsSequence<A, B>, a3);
  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationState.StackContent.Views.ViewsSequence<A, B>, a4);
  return BidirectionalCollection.index(_:offsetBy:limitedBy:)();
}

void protocol witness for Collection.distance(from:to:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationState.StackContent.Views.ViewsSequence<A, B>, a3);
  JUMPOUT(0x18D75CB20);
}

uint64_t protocol witness for Collection.index(after:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))NavigationState.StackContent.Views.ViewsSequence.index(after:), a3);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t)@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;
  uint64_t v7;
  char v8;

  result = a3(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), a2);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  *(_QWORD *)(a4 + 16) = v7;
  *(_BYTE *)(a4 + 24) = v8;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))NavigationState.StackContent.Views.ViewsSequence.index(after:));
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))
{
  uint64_t result;
  char v6;
  uint64_t v7;
  char v8;

  result = a4(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), a2);
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v6 & 1;
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = v8;
  return result;
}

void *protocol witness for Sequence.makeIterator() in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>@<X0>(uint64_t a1@<X8>)
{
  const void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  void *result;
  char v10;
  _BYTE __dst[416];

  memcpy(__dst, v1, sizeof(__dst));
  v3 = NavigationState.StackContent.Views.ViewsSequence.startIndex.getter();
  v5 = v4;
  v7 = v6;
  v10 = v8 & 1;
  result = memcpy((void *)a1, __dst, 0x1A0uLL);
  *(_QWORD *)(a1 + 416) = v3;
  *(_BYTE *)(a1 + 424) = v10;
  *(_QWORD *)(a1 + 432) = v5;
  *(_BYTE *)(a1 + 440) = v7;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationState.StackContent.Views.ViewsSequence<A, B>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationState.StackContent.Views.ViewsSequence<A, B>, a1);
  return Collection._copyToContiguousArray()();
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t NavigationState.ListKey.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE v12[24];
  uint64_t v13;
  unint64_t v14;

  v13 = 0;
  v14 = 0xE000000000000000;
  _StringGuts.grow(_:)(50);
  v1._countAndFlagsBits = 0x3A79654B7473694CLL;
  v1._object = (void *)0xEE00203A64695B20;
  String.append(_:)(v1);
  v13 = *(_QWORD *)v0;
  _print_unlocked<A, B>(_:_:)();
  v2._object = (void *)0x8000000187BD4430;
  v2._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v2);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
    v3 = 1702195828;
  else
    v3 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6B636174735B205DLL;
  v6._object = (void *)0xED0000203A79654BLL;
  String.append(_:)(v6);
  outlined init with take of Image.Resolved?(v0 + 8, (uint64_t)v12, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key);
  outlined init with take of Image.Resolved?((uint64_t)v12, (uint64_t)&v13, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key);
  if (v14 == 6)
  {
    v7 = 0xEB0000000079654BLL;
    v8 = 0x6B63617453206F4ELL;
  }
  else
  {
    NavigationState.StackContent.Key.debugDescription.getter(v13, v14);
    v7 = v9;
  }
  v10 = v7;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Int NavigationState.ListKey.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v3 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    Hasher._combine(_:)(v3);
    Hasher._combine(_:)(v4);
  }
  Hasher._combine(_:)(*(_BYTE *)(v0 + 32) & 1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NavigationState.ListKey()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt8 v4;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_BYTE *)(v0 + 32);
  Hasher._combine(_:)(*(_QWORD *)v0);
  if (v2 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NavigationState.ListKey()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;
  Swift::UInt8 v5;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_BYTE *)(v0 + 32);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v3 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    Hasher._combine(_:)(v3);
    Hasher._combine(_:)(v4);
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NavigationState.ListKey()
{
  return NavigationState.ListKey.description.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NavigationState.ListKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  if (v2 == 6)
  {
    if (v3 != 6)
      return 0;
  }
  else
  {
    if (v3 == 6)
      return 0;
    v4 = (v3 ^ v2);
    v5 = *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && v4 == 0;
    if (!v5 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  return *(unsigned __int8 *)(a1 + 32) ^ *(unsigned __int8 *)(a2 + 32) ^ 1u;
}

void specialized closure #1 in Collection<>.collapsedItemCount<A>(within:splitViewState:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t __dst[39];
  uint64_t (*v30)(uint64_t);

  specialized static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a2, a3);
  if ((v6 & 1) == 0)
  {
    if ((a2 & 0x8000000000000000) != 0)
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    if (*(_QWORD *)(a3 + 16) <= a2)
    {
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
    memcpy(__dst, (const void *)(a3 + 304 * a2 + 32), 0x12BuLL);
    v7 = __dst[21];
    if ((__dst[21] & 0x8000000000000000) == 0)
    {
      v25 = a1;
      v9 = __dst[14];
      v8 = __dst[15];
      v10 = __dst[16];
      v11 = __dst[17];
      v12 = __dst[18];
      v28 = __dst[19];
      v13 = __dst[20];
      v14 = __dst[22];
      v30 = *(uint64_t (**)(uint64_t))(*(_QWORD *)__dst[21] + 88);
      outlined retain of NavigationColumnState(__dst);
      v26 = v9;
      v15 = v9;
      v16 = v8;
      v17 = v8;
      v18 = v10;
      v19 = v10;
      v20 = v13;
      v27 = v11;
      outlined copy of NavigationColumnState.ColumnContent(v15, v17, v19, v11, v12, v28, v13, v7);
      swift_retain();
      swift_bridgeObjectRetain();
      v21 = swift_bridgeObjectRetain();
      v22 = v30(v21);
      v23 = v22 + 1;
      if (__OFADD__(v22, 1))
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      v24 = *(_QWORD *)(v14 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of NavigationColumnState.ColumnContent(v26, v16, v18, v27, v12, v28, v20, v7);
      outlined release of NavigationColumnState(__dst);
      if (__OFADD__(v23, v24))
      {
LABEL_15:
        __break(1u);
        return;
      }
      if (!__OFADD__(v25, v23 + v24))
        return;
      goto LABEL_11;
    }
    if (__OFADD__(a1, 1))
    {
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
  }
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(_QWORD *a1, Swift::UInt a2, unsigned __int8 a3, Swift::UInt a4))()
{
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;

  v8 = malloc(0x50uLL);
  *a1 = v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8[8] = specialized Dictionary._Variant.asNative.modify(v8);
  v8[9] = specialized _NativeDictionary.subscript.modify(v8 + 4, a2, a3, a4, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void (*specialized Dictionary._Variant.subscript.modify(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x78uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  outlined init with copy of ToolbarPlacement.Role(a2, (uint64_t)v4);
  v4[13] = specialized Dictionary._Variant.asNative.modify(v4 + 5);
  v4[14] = specialized _NativeDictionary.subscript.modify(v4 + 9, (uint64_t)v4, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x80uLL);
  *a1 = v4;
  v4[13] = a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  outlined init with take of TableColumnCustomizationID.Base(a2, (uint64_t)v4);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TableColumnCustomizationID.Base);
  v4[14] = specialized Dictionary._Variant.asNative.modify(v4 + 5);
  v4[15] = specialized _NativeDictionary.subscript.modify(v4 + 9, a2, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0xD0uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)v4);
  v4[24] = specialized Dictionary._Variant.asNative.modify(v4 + 16);
  v4[25] = specialized _NativeDictionary.subscript.modify(v4 + 20, (uint64_t)v4, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void Dictionary._Variant.subscript.modifyspecialized (uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD);

  v1 = *(void **)a1;
  v2 = *(_QWORD *)a1 + 40;
  v3 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 104);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 112))(*(_QWORD *)a1 + 72, 0);
  outlined destroy of ToolbarPlacement.Role((uint64_t)v1);
  v3(v2, 0);
  free(v1);
}

{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 80);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 88))(*(_QWORD *)a1 + 32, 0);
  outlined consume of TabCustomizationID.Base();
  v2(v1, 0);
  free(v1);
}

{
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD);
  uint64_t v4;

  v1 = *(void **)a1;
  v2 = *(_QWORD *)a1 + 40;
  v3 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 112);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 120))(*(_QWORD *)a1 + 72, 0);
  outlined retain of TableColumnCustomizationID.Base(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TableColumnCustomizationID.Base);
  v3(v2, 0);
  free(v1);
}

{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease();
  v2(v1, 0);
  free(v1);
}

{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(*(_QWORD *)a1 + 32, 0);
  v2(v1, 0);
  free(v1);
}

{
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD);

  v1 = *(void **)a1;
  v2 = *(_QWORD *)a1 + 128;
  v3 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 192);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 200))(*(_QWORD *)a1 + 160, 0);
  outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v1);
  v3(v2, 0);
  free(v1);
}

void (*specialized Dictionary._Variant.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t a1)
{
  _BYTE *v8;
  char isUniquelyReferenced_nonNull_native;

  v8 = malloc(0x68uLL);
  *a1 = v8;
  v8[96] = a4;
  *((_QWORD *)v8 + 8) = a2;
  *((_QWORD *)v8 + 9) = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  outlined copy of TabCustomizationID.Base();
  *((_QWORD *)v8 + 10) = specialized Dictionary._Variant.asNative.modify(v8);
  *((_QWORD *)v8 + 11) = specialized _NativeDictionary.subscript.modify((_QWORD *)v8 + 4, a2, a3, a4 & 1, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(_QWORD *a1, unint64_t a2, unint64_t a3))()
{
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;

  v6 = malloc(0x50uLL);
  *a1 = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6[8] = specialized Dictionary._Variant.asNative.modify(v6);
  v6[9] = specialized _NativeDictionary.subscript.modify(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void (*specialized Dictionary._Variant.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, Swift::UInt a4, unsigned __int8 a5))(uint64_t a1)
{
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;

  v10 = malloc(0x58uLL);
  *a1 = v10;
  v10[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v10[9] = specialized Dictionary._Variant.asNative.modify(v10);
  v10[10] = specialized _NativeDictionary.subscript.modify(v10 + 4, a2, a3, a4, a5, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(_QWORD *a1, Swift::UInt32 a2))()
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[9] = specialized _NativeDictionary.subscript.modify(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void (*specialized _NativeDictionary.subscript.modify(_QWORD *a1, Swift::UInt a2, unsigned __int8 a3, Swift::UInt a4, char a5))(_QWORD *a1, char a2)
{
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  void (*result)(_QWORD *, char);

  v6 = v5;
  v12 = malloc(0x740uLL);
  *a1 = v12;
  v12[230] = v6;
  v12[229] = a4;
  *((_BYTE *)v12 + 299) = a3;
  v12[228] = a2;
  v13 = *v6;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
  *((_BYTE *)v12 + 300) = v14 & 1;
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = *(_QWORD *)(v13 + 24);
  if (v20 < v18 || (a5 & 1) == 0)
  {
    if (v20 >= v18 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_9;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a5 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
    if ((v19 & 1) == (v22 & 1))
    {
      v15 = v21;
      goto LABEL_9;
    }
LABEL_14:
    result = (void (*)(_QWORD *, char))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_9:
  v12[231] = v15;
  if ((v19 & 1) != 0)
  {
    memmove(v12 + 114, (const void *)(*(_QWORD *)(*v6 + 56) + 304 * v15), 0x12BuLL);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v12 + 114);
  }
  else
  {
    _s7SwiftUI21NavigationColumnStateVSgWOi0_((_OWORD *)v12 + 57);
  }
  outlined init with take of Image.Resolved?((uint64_t)(v12 + 114), (uint64_t)(v12 + 76), &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
  return _NativeDictionary.subscript.modifyspecialized ;
}

void _NativeDictionary.subscript.modifyspecialized (_QWORD *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  int v8;
  char v9;
  _QWORD **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  _QWORD **v17;

  v3 = *a1;
  v4 = *a1 + 608;
  v5 = *a1 + 912;
  v6 = *a1 + 1216;
  v7 = (const void *)(*a1 + 1520);
  outlined init with take of Image.Resolved?(v4, v6, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
  outlined init with take of Image.Resolved?(v6, v5, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
  v8 = _s7SwiftUI21NavigationColumnStateVSgWOg(v5);
  v9 = *(_BYTE *)(v3 + 300);
  if ((a2 & 1) != 0)
  {
    if (v8 != 1)
    {
      v10 = *(_QWORD ***)(v3 + 1840);
      outlined init with take of Image.Resolved?(v6, (uint64_t)v7, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
      memcpy((void *)v3, v7, 0x12BuLL);
      v11 = *v10;
      v12 = *(_QWORD *)(v3 + 1848);
      if ((v9 & 1) == 0)
      {
        v13 = *(_QWORD *)(v3 + 1832);
        v14 = *(_QWORD *)(v3 + 1824);
        v15 = *(_BYTE *)(v3 + 299);
        v16 = (void *)v3;
LABEL_12:
        specialized _NativeDictionary._insert(at:key:value:)(v12, v14, v15, v13, v16, v11);
        goto LABEL_13;
      }
LABEL_10:
      memmove((void *)(v11[7] + 304 * v12), v7, 0x12BuLL);
      goto LABEL_13;
    }
  }
  else if (v8 != 1)
  {
    v17 = *(_QWORD ***)(v3 + 1840);
    outlined init with take of Image.Resolved?(v6, (uint64_t)v7, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
    memcpy((void *)(v3 + 304), v7, 0x12BuLL);
    v11 = *v17;
    v12 = *(_QWORD *)(v3 + 1848);
    if ((v9 & 1) == 0)
    {
      v13 = *(_QWORD *)(v3 + 1832);
      v14 = *(_QWORD *)(v3 + 1824);
      v15 = *(_BYTE *)(v3 + 299);
      v16 = (void *)(v3 + 304);
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  if ((*(_BYTE *)(v3 + 300) & 1) != 0)
    specialized _NativeDictionary._delete(at:)(*(_QWORD *)(v3 + 1848), **(_QWORD **)(v3 + 1840));
LABEL_13:
  outlined init with take of Image.Resolved?(v4, (uint64_t)v7, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
  outlined retain of NavigationColumnState?(v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of NavigationColumnState?);
  outlined retain of NavigationColumnState?((uint64_t)v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of NavigationColumnState?);
  free((void *)v3);
}

uint64_t specialized _NativeDictionary.subscript.modify(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t result;

  v4 = v3;
  v8 = (char *)malloc(0x68uLL);
  *a1 = v8;
  *((_QWORD *)v8 + 10) = a2;
  *((_QWORD *)v8 + 11) = v4;
  v9 = *v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v8[73] = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      *((_QWORD *)v8 + 12) = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = (unsigned __int8 *)(*(_QWORD *)(*v4 + 56) + 80 * v11);
        v18 = *v17;
        v19 = *(_OWORD *)(v17 + 8);
        v20 = v17[24];
        v21 = *((_QWORD *)v17 + 4);
        v22 = v17[40];
        v23 = *((_QWORD *)v17 + 6);
        v24 = v17[56];
        v25 = v17[57];
        v26 = v17[58];
        v27 = *((_QWORD *)v17 + 8);
        v28 = v17[72];
        v29 = v24 | (v25 << 8) | (v26 << 16);
LABEL_12:
        *(_QWORD *)v8 = v18;
        *(_OWORD *)(v8 + 8) = v19;
        *((_QWORD *)v8 + 3) = v20;
        *((_QWORD *)v8 + 4) = v21;
        result = (uint64_t)_NativeDictionary.subscript.modifyspecialized ;
        *((_QWORD *)v8 + 5) = v22;
        *((_QWORD *)v8 + 6) = v23;
        *((_QWORD *)v8 + 7) = v29;
        *((_QWORD *)v8 + 8) = v27;
        v8[72] = v28;
        return result;
      }
LABEL_11:
      v18 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v29 = 0;
      v27 = 0;
      v28 = 0;
      v19 = xmmword_187BFE310;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    v30 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v31 & 1))
    {
      v11 = v30;
      *((_QWORD *)v8 + 12) = v30;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t *a1)
{
  uint64_t *v1;

  v1 = (uint64_t *)*a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *(_BYTE *)(*a1 + 73), *(uint64_t **)(*a1 + 88), *(_QWORD *)(*a1 + 96), *(_QWORD *)(*a1 + 80));
  outlined consume of ToolbarAppearanceConfiguration?(*v1, v1[1]);
  free(v1);
}

{
  uint64_t v1;
  int v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  v1 = *a1;
  v2 = *(unsigned __int8 *)(*a1 + 32);
  v3 = *(_BYTE *)(*a1 + 34);
  if (v2 == 3)
  {
    if ((*(_BYTE *)(*a1 + 34) & 1) != 0)
    {
      v4 = *(_QWORD *)(v1 + 24);
      v5 = **(_QWORD **)(v1 + 16);
      swift_arrayDestroy();
      specialized _NativeDictionary._delete(at:)(v4, v5);
    }
  }
  else
  {
    v6 = *(_QWORD *)(v1 + 24);
    v7 = **(_QWORD ***)(v1 + 16);
    if ((v3 & 1) != 0)
    {
      *(_BYTE *)(v7[7] + v6) = v2;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(v6, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 33) & 1, v2, v7);
      outlined copy of TabCustomizationID.Base();
    }
  }
  free((void *)v1);
}

{
  void **v1;

  v1 = (void **)*a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *(_BYTE *)(*a1 + 65), *(uint64_t **)(*a1 + 48), *(_QWORD *)(*a1 + 56), *(_QWORD *)(*a1 + 24), *(_QWORD *)(*a1 + 32), *(_QWORD *)(*a1 + 40), *(_BYTE *)(*a1 + 64));
  outlined consume of KeyboardShortcutBridge.Shortcut?(*v1);
  free(v1);
}

{
  void *v1;

  v1 = (void *)*a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *(_BYTE *)(*a1 + 169), *(uint64_t **)(*a1 + 176), *(_QWORD *)(*a1 + 184), *(_DWORD *)(*a1 + 172));
  outlined destroy of TableRowList?((uint64_t)v1, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t)&type metadata for ConfirmationDialog, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, char a5))(uint64_t *a1)
{
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  void (*result)(uint64_t *);

  v6 = v5;
  v12 = malloc(0x28uLL);
  *a1 = v12;
  v12[1] = a3;
  v12[2] = v6;
  *((_BYTE *)v12 + 33) = a4;
  *v12 = a2;
  v13 = a4 & 1;
  v14 = *v6;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v13);
  *((_BYTE *)v12 + 34) = v15 & 1;
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 < v19 || (a5 & 1) == 0)
  {
    if (v21 >= v19 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_9;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a5 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v13);
    if ((v20 & 1) == (v23 & 1))
    {
      v16 = v22;
      goto LABEL_9;
    }
LABEL_14:
    result = (void (*)(uint64_t *))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_9:
  v12[3] = v16;
  if ((v20 & 1) != 0)
    v24 = *(_BYTE *)(*(_QWORD *)(*v6 + 56) + v16);
  else
    v24 = 3;
  *((_BYTE *)v12 + 32) = v24;
  return _NativeDictionary.subscript.modifyspecialized ;
}

void (*specialized _NativeDictionary.subscript.modify(_QWORD *a1, unint64_t a2, unint64_t a3, char a4))(void ***a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  __int128 v21;
  void (*result)(void ***);

  v5 = v4;
  v10 = malloc(0x38uLL);
  *a1 = v10;
  v10[3] = a3;
  v10[4] = v5;
  v10[2] = a2;
  v11 = *v5;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  *((_BYTE *)v10 + 48) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_13;
  }
  v17 = v12;
  v18 = *(_QWORD *)(v11 + 24);
  if (v18 < v16 || (a4 & 1) == 0)
  {
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_9;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v17 & 1) == (v20 & 1))
    {
      v13 = v19;
      goto LABEL_9;
    }
LABEL_13:
    result = (void (*)(void ***))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_9:
  v10[5] = v13;
  v21 = 0uLL;
  if ((v17 & 1) != 0)
    v21 = *(_OWORD *)(*(_QWORD *)(*v5 + 56) + 16 * v13);
  *(_OWORD *)v10 = v21;
  return _NativeDictionary.subscript.modifyspecialized ;
}

void _NativeDictionary.subscript.modifyspecialized (void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v1 = *a1;
  v2 = **a1;
  v3 = (uint64_t)(*a1)[1];
  v4 = *((_BYTE *)*a1 + 48);
  if (v2)
  {
    v5 = (unint64_t)v1[5];
    v6 = *(_QWORD **)v1[4];
    if ((v4 & 1) != 0)
    {
      v7 = (_QWORD *)(v6[7] + 16 * v5);
      *v7 = v2;
      v7[1] = v3;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(v5, (uint64_t)v1[2], (uint64_t)v1[3], (uint64_t)v2, v3, v6);
    }
  }
  else if (((_BYTE)(*a1)[6] & 1) != 0)
  {
    specialized _NativeDictionary._delete(at:)((unint64_t)v1[5], *(_QWORD *)v1[4]);
  }
  v8 = *v1;
  outlined copy of DisplayList.AccessibilityUpdater.CacheValue?(v2);
  outlined consume of DisplayList.AccessibilityUpdater.CacheValue?(v8);
  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(_QWORD *a1, uint64_t a2, char a3))(uint64_t *a1, char a2)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  void (*result)(uint64_t *, char);

  v4 = v3;
  v8 = malloc(0x78uLL);
  *a1 = v8;
  v8[12] = a2;
  v8[13] = v4;
  v9 = *v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *((_BYTE *)v8 + 33) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_14;
  }
  v15 = v10;
  v16 = *(_QWORD *)(v9 + 24);
  if (v16 < v14 || (a3 & 1) == 0)
  {
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_9;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v18 & 1))
    {
      v11 = v17;
      goto LABEL_9;
    }
LABEL_14:
    result = (void (*)(uint64_t *, char))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_9:
  v8[14] = v11;
  if ((v15 & 1) != 0)
  {
    v19 = *(_QWORD *)(*v4 + 56) + 16 * v11;
    v20 = *(_QWORD *)v19;
    v21 = *(unsigned __int8 *)(v19 + 8) | (*(unsigned __int8 *)(v19 + 9) << 8);
  }
  else
  {
    v20 = 0;
    v21 = 768;
  }
  v8[10] = v20;
  *((_WORD *)v8 + 44) = v21;
  return _NativeDictionary.subscript.modifyspecialized ;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  int v5;
  char v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 80);
  v4 = *(_WORD *)(*a1 + 88);
  v5 = v4 & 0xFF00;
  v6 = *(_BYTE *)(*a1 + 33);
  if ((a2 & 1) != 0)
  {
    if (v5 != 768)
    {
      v7 = *(_QWORD *)(v2 + 112);
      v8 = **(_QWORD ***)(v2 + 104);
      if ((v6 & 1) == 0)
      {
        v9 = *(_QWORD *)(v2 + 96);
        specialized _NativeDictionary._insert(at:key:value:)(v7, v9, v3, v4 & 0xFF01, v8);
        outlined init with take of TableColumnCustomizationID.Base(v9, v2);
        v10 = v2;
LABEL_11:
        outlined retain of TableColumnCustomizationID.Base(v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TableColumnCustomizationID.Base);
        goto LABEL_12;
      }
LABEL_9:
      v13 = v8[7] + 16 * v7;
      *(_QWORD *)v13 = v3;
      *(_BYTE *)(v13 + 8) = v4 & 1;
      *(_BYTE *)(v13 + 9) = HIBYTE(v4);
      goto LABEL_12;
    }
  }
  else if (v5 != 768)
  {
    v7 = *(_QWORD *)(v2 + 112);
    v8 = **(_QWORD ***)(v2 + 104);
    if ((v6 & 1) == 0)
    {
      v14 = *(_QWORD *)(v2 + 96);
      specialized _NativeDictionary._insert(at:key:value:)(v7, v14, v3, v4 & 0xFF01, v8);
      outlined init with take of TableColumnCustomizationID.Base(v14, v2 + 40);
      v10 = v2 + 40;
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if ((*(_BYTE *)(*a1 + 33) & 1) != 0)
  {
    v11 = *(_QWORD *)(v2 + 112);
    v12 = **(_QWORD **)(v2 + 104);
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(v11, v12);
  }
LABEL_12:
  free((void *)v2);
}

void (*specialized _NativeDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, Swift::UInt a4, unsigned __int8 a5, char a6))(uint64_t *a1)
{
  uint64_t *v6;
  uint64_t *v7;
  _BYTE *v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  void (*result)(uint64_t *);

  v7 = v6;
  v14 = malloc(0x48uLL);
  *a1 = v14;
  v14[64] = a5;
  *((_QWORD *)v14 + 5) = a4;
  *((_QWORD *)v14 + 6) = v7;
  *((_QWORD *)v14 + 3) = a2;
  *((_QWORD *)v14 + 4) = a3;
  v15 = *v7;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4, a5);
  v14[65] = v16 & 1;
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = *(_QWORD *)(v15 + 24);
    if (v22 >= v20 && (a6 & 1) != 0)
    {
LABEL_7:
      *((_QWORD *)v14 + 7) = v17;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v23 = *(_QWORD *)(*v7 + 56) + 24 * v17;
        v24 = *(_OWORD *)v23;
        v25 = *(_QWORD *)(v23 + 16);
LABEL_12:
        *(_OWORD *)v14 = v24;
        *((_QWORD *)v14 + 2) = v25;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      v25 = 0;
      v24 = 0uLL;
      goto LABEL_12;
    }
    if (v22 >= v20 && (a6 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, a6 & 1);
    v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4, a5);
    if ((v21 & 1) == (v27 & 1))
    {
      v17 = v26;
      *((_QWORD *)v14 + 7) = v26;
      if ((v21 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t *))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void (*specialized _NativeDictionary.subscript.modify(_QWORD *a1, Swift::UInt32 a2, char a3))(uint64_t *a1)
{
  uint64_t *v3;
  uint64_t *v4;
  char *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  void (*result)(uint64_t *);

  v4 = v3;
  v8 = (char *)malloc(0xC0uLL);
  *a1 = v8;
  *((_QWORD *)v8 + 22) = v4;
  *((_DWORD *)v8 + 43) = a2;
  v9 = *v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v8[169] = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      *((_QWORD *)v8 + 23) = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        outlined init with take of ConfirmationDialog(*(_QWORD *)(*v4 + 56) + 176 * v11, (uint64_t)v8);
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      *(_OWORD *)(v8 + 153) = 0u;
      *((_OWORD *)v8 + 8) = 0u;
      *((_OWORD *)v8 + 9) = 0u;
      *((_OWORD *)v8 + 6) = 0u;
      *((_OWORD *)v8 + 7) = 0u;
      *((_OWORD *)v8 + 4) = 0u;
      *((_OWORD *)v8 + 5) = 0u;
      *((_OWORD *)v8 + 2) = 0u;
      *((_OWORD *)v8 + 3) = 0u;
      *(_OWORD *)v8 = 0u;
      *((_OWORD *)v8 + 1) = 0u;
      return _NativeDictionary.subscript.modifyspecialized ;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v18 & 1))
    {
      v11 = v17;
      *((_QWORD *)v8 + 23) = v17;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t *))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void (*specialized _NativeDictionary.subscript.modify(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*result)(uint64_t **);

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *v8 = v17;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *((_BYTE *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (*a1)[1]);
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(_QWORD *a1))()
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t outlined release of NavigationState.RequestResults(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 32);
  v23 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v21 = *(_OWORD *)(a1 + 104);
  v22 = *(_OWORD *)(a1 + 88);
  v19 = *(_OWORD *)(a1 + 136);
  v20 = *(_OWORD *)(a1 + 120);
  v17 = *(_OWORD *)(a1 + 168);
  v18 = *(_OWORD *)(a1 + 152);
  v15 = *(_OWORD *)(a1 + 200);
  v16 = *(_OWORD *)(a1 + 184);
  v13 = *(_OWORD *)(a1 + 232);
  v14 = *(_OWORD *)(a1 + 216);
  v12 = *(_OWORD *)(a1 + 248);
  v9 = *(_QWORD *)(a1 + 264);
  v10 = *(_BYTE *)(a1 + 272);
  outlined consume of ResolvedNavigationDestinations.ChangeRequest(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  outlined consume of NavigationState.UpdateResult(v23, v2, v3, v4, v5, v6, v7, v8, v22, *((uint64_t *)&v22 + 1), v21, *((uint64_t *)&v21 + 1), v20, *((unint64_t *)&v20 + 1), v19, *((uint64_t *)&v19 + 1), v18, *((uint64_t *)&v18 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v9,
    v10);
  return a1;
}

uint64_t outlined consume of ResolvedNavigationDestinations.ChangeRequest(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (!a3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined consume of NavigationState.UpdateResult(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unsigned __int8 a32)
{
  if (a14 >> 2 != 0x7FFFFFFF)
  {
    outlined consume of NavigationRequest.Action(result, a2, a3, a4, a5, a6, a7, a8, a9);
    swift_release();
    return outlined consume of NavigationRequest.Action?(a24, a25, a26, a27, a28, a29, a30, a31, a32);
  }
  return result;
}

uint64_t outlined consume of NavigationRequest.Action(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v13;
  uint64_t v14;

  switch(a9)
  {
    case 0:
    case 11:
      goto LABEL_11;
    case 1:
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_11;
    case 2:
    case 6:
    case 17:
      swift_release();
      goto LABEL_9;
    case 3:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 4:
    case 5:
LABEL_9:
      swift_release();
      goto LABEL_11;
    case 10:
      swift_release();
      swift_release();
      goto LABEL_11;
    case 12:
    case 13:
      swift_release();
      swift_release();
      outlined consume of Text.LineStyle?(a3, a4);
      goto LABEL_11;
    case 14:
      swift_release();
      swift_release();
      v13 = a3;
      v14 = a4;
      goto LABEL_13;
    case 18:
      swift_release();
      swift_release();
      outlined consume of Text.LineStyle?(a4, a5);
LABEL_11:
      result = swift_release();
      break;
    case 19:
      swift_release();
      v13 = a2;
      v14 = a3;
LABEL_13:
      result = outlined consume of Text.LineStyle?(v13, v14);
      break;
    case 21:
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(result);
      result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined consume of NavigationRequest.Action?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255)
    return outlined consume of NavigationRequest.Action(result, a2, a3, a4, a5, a6, a7, a8, a9);
  return result;
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t Dictionary._Variant.asNative.modifyspecialized (uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _QWORD *v8;
  _OWORD v10[3];

  v7 = *a1;
  if (*a1)
  {
    v8 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(v8[7] + 8 * a4) = v7;
    }
    else
    {
      outlined init with copy of AccessibilityRelationshipScope.Key(a5, (uint64_t)v10);
      specialized _NativeDictionary._insert(at:key:value:)(a4, v10, v7, v8);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

{
  uint64_t v7;
  _QWORD *v8;
  _OWORD v10[8];

  v7 = *a1;
  if (*a1)
  {
    v8 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(v8[7] + 8 * a4) = v7;
    }
    else
    {
      outlined init with copy of IdentifiedDocumentGroupConfiguration(a5, (uint64_t)v10);
      specialized _NativeDictionary._insert(at:key:value:)(a4, v10, v7, v8);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

uint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, int a5)
{
  uint64_t result;
  _QWORD *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  result = outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(a1, (uint64_t)&v14, (uint64_t)&lazy cache variable for type metadata for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?, (uint64_t)type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]), (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  if (*((_QWORD *)&v15 + 1))
  {
    v18 = v14;
    v19 = v15;
    v20 = v16;
    v21 = v17;
    v10 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      v11 = (_OWORD *)(v10[7] + (a4 << 6));
      v12 = v19;
      *v11 = v18;
      v11[1] = v12;
      v13 = v21;
      v11[2] = v20;
      v11[3] = v13;
    }
    else
    {
      v14 = v18;
      v15 = v19;
      v16 = v20;
      v17 = v21;
      return specialized _NativeDictionary._insert(at:key:value:)(a4, a5, &v14, v10);
    }
  }
  else
  {
    result = outlined destroy of TableRowList?((uint64_t)&v14, (uint64_t)&lazy cache variable for type metadata for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?, (uint64_t)type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]), (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    if ((a2 & 1) != 0)
      return specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return result;
}

uint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v23;
  _BYTE v24[40];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[25];

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_BYTE *)(a1 + 72);
  if (v7 == 1)
  {
    if ((a2 & 1) != 0)
    {
      v23 = *(_QWORD *)a1;
      swift_arrayDestroy();
      specialized _NativeDictionary._delete(at:)(a4, *a3);
LABEL_7:
      v6 = v23;
    }
  }
  else
  {
    LOBYTE(v25) = *(_QWORD *)a1;
    *((_QWORD *)&v25 + 1) = v7;
    *(_QWORD *)&v26 = v9;
    BYTE8(v26) = v8;
    *(_QWORD *)&v27 = v11;
    BYTE8(v27) = v10 & 1;
    *(_QWORD *)v28 = v13;
    *(_WORD *)&v28[8] = v12 & 0xFF01;
    v28[10] = BYTE2(v12);
    *(_QWORD *)&v28[16] = v14;
    v28[24] = v15;
    v16 = (_QWORD *)*a3;
    if ((a2 & 1) == 0)
    {
      v23 = v6;
      outlined init with copy of ToolbarPlacement.Role(a5, (uint64_t)v24);
      specialized _NativeDictionary._insert(at:key:value:)(a4, (uint64_t)v24, &v25, v16);
      goto LABEL_7;
    }
    v17 = (_OWORD *)(v16[7] + 80 * a4);
    v18 = *(_OWORD *)v28;
    v17[2] = v27;
    v17[3] = v18;
    *(_OWORD *)((char *)v17 + 57) = *(_OWORD *)&v28[9];
    v19 = v26;
    *v17 = v25;
    v17[1] = v19;
  }
  return outlined copy of ToolbarAppearanceConfiguration?(v6, v7);
}

uint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, void *a5)
{
  uint64_t v7;
  _QWORD *v8;
  id v10;

  v7 = *a1;
  if (*a1)
  {
    v8 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(v8[7] + 8 * a4) = v7;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(a4, (uint64_t)a5, v7, v8);
      v10 = a5;
    }
  }
  else if ((a2 & 1) != 0)
  {
    type metadata accessor for UINavigationController();
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

void *specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v10 = *(void **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)a1)
  {
    if ((a2 & 1) != 0)
    {
      v13 = (_QWORD *)(*(_QWORD *)(*a3 + 56) + 24 * a4);
      *v13 = v10;
      v13[1] = v11;
      v13[2] = v12;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(a4, a5, a6, a7, a8, (uint64_t)v10, v11, v12, (_QWORD *)*a3);
      swift_bridgeObjectRetain();
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return outlined copy of KeyboardShortcutBridge.Shortcut?(v10);
}

unint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, int a5)
{
  _QWORD *v9;
  unint64_t result;
  _QWORD v11[22];
  _BYTE v12[176];

  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(a1, (uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t)&type metadata for ConfirmationDialog, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v11[2])
  {
    outlined init with take of ConfirmationDialog((uint64_t)v11, (uint64_t)v12);
    v9 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      return outlined init with take of ConfirmationDialog((uint64_t)v12, v9[7] + 176 * a4);
    }
    else
    {
      outlined init with take of ConfirmationDialog((uint64_t)v12, (uint64_t)v11);
      return specialized _NativeDictionary._insert(at:key:value:)(a4, a5, (uint64_t)v11, v9);
    }
  }
  else
  {
    result = outlined destroy of TableRowList?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t)&type metadata for ConfirmationDialog, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    if ((a2 & 1) != 0)
      return specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return result;
}

void specialized closure #1 in Collection<>.collapsedItemCount<A>(within:splitViewState:)(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;

  specialized closure #1 in Collection<>.collapsedItemCount<A>(within:splitViewState:)(*a1, *a2, *a3);
  if (!v4)
    *a4 = v6;
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.endIndex.getter()
{
  return 0;
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.index(before:for:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;

  if ((a2 & 1) == 0)
  {
    if (a4)
    {
      if (a4 != 1)
        return 0;
      v7 = a3 - 1;
      if (!__OFSUB__(a3, 1))
      {
        if ((v7 & 0x8000000000000000) == 0)
          return a1;
        v8 = *(_QWORD *)(a5 + 168);
        if (v8 < 0 || a3)
          return 0;
        v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 80);
        v11 = swift_retain();
        if ((v10(v11) & 1) != 0)
        {
          swift_release();
          return a1;
        }
        v12 = (*(uint64_t (**)(void))(*(_QWORD *)v8 + 88))();
        swift_release();
        if (!__OFSUB__(v12, 1))
          return a1;
        __break(1u);
      }
      __break(1u);
    }
    else if (!__OFSUB__(a3, 1))
    {
      if (a3 - 1 < 0 && a3)
        return 0;
      return a1;
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[80];
  _BYTE v14[56];
  uint64_t v15;

  if ((a2 & 1) == 0)
  {
    if (a4)
    {
      if (a4 != 1)
        return 0;
      v7 = a3 - 1;
      if (!__OFSUB__(a3, 1))
      {
        if ((v7 & 0x8000000000000000) == 0)
          return a1;
        outlined init with take of NavigationColumnState.ColumnContent(a5 + 112, (uint64_t)v13);
        outlined init with take of NavigationColumnState.ColumnContent((uint64_t)v13, (uint64_t)v14);
        v8 = v15;
        if (v15 < 0 || a3)
          return 0;
        v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 80);
        v11 = swift_retain();
        if ((v10(v11) & 1) != 0)
        {
          swift_release();
          return a1;
        }
        v12 = (*(uint64_t (**)(void))(*(_QWORD *)v8 + 88))();
        swift_release();
        if (!__OFSUB__(v12, 1))
          return a1;
        __break(1u);
      }
      __break(1u);
    }
    else if (!__OFSUB__(a3, 1))
    {
      if (a3 - 1 < 0 && a3)
        return 0;
      return a1;
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.lastIndex(for:stateIndex:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v2 = a1[21];
  if (v2 < 0)
    return a2;
  v12 = a2;
  v3 = a1[22];
  v4 = a1[17];
  v6 = a1[15];
  v5 = a1[16];
  v7 = a1[14];
  outlined copy of NavigationColumnState.ReplacedRoot?(v7, v6, v5, v4);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of NavigationColumnState.ReplacedRoot?(v7, v6, v5, v4);
  v8 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRelease();
  v9 = swift_bridgeObjectRelease();
  if (v8 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 80))(v9) & 1) != 0)
  {
    swift_release();
    return v12;
  }
  v10 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 88))();
  result = swift_release();
  if (!__OFSUB__(v10, 1))
    return v12;
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v2 = a1[21];
  if (v2 < 0)
    return a2;
  v12 = a2;
  v3 = a1[22];
  v4 = a1[17];
  v6 = a1[15];
  v5 = a1[16];
  v7 = a1[14];
  outlined copy of NavigationColumnState.ReplacedRoot?(v7, v6, v5, v4);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of NavigationColumnState.ReplacedRoot?(v7, v6, v5, v4);
  v8 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRelease();
  v9 = swift_bridgeObjectRelease();
  if (v8 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 80))(v9) & 1) != 0)
  {
    swift_release();
    return v12;
  }
  v10 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 88))();
  result = swift_release();
  if (!__OFSUB__(v10, 1))
    return v12;
  __break(1u);
  return result;
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.index(after:for:)(uint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a5 + 168);
  if (v5 < 0)
    return 0;
  v6 = result;
  v7 = *(_QWORD *)(a5 + 176);
  if (!a4)
  {
    v8 = a3 + 1;
    if (__OFADD__(a3, 1))
      goto LABEL_17;
    v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 88);
    swift_retain();
    swift_bridgeObjectRetain();
    v10 = swift_bridgeObjectRetain();
    v11 = v9(v10);
    swift_release();
    if (v8 >= v11)
    {
LABEL_11:
      v14 = *(_QWORD *)(v7 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v14)
        return 0;
      return v6;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v6;
  }
  if (a4 != 1)
  {
    v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 80);
    swift_retain();
    swift_bridgeObjectRetain();
    v13 = swift_bridgeObjectRetain();
    LOBYTE(v12) = v12(v13);
    swift_release();
    if ((v12 & 1) != 0)
      goto LABEL_11;
    goto LABEL_13;
  }
  if (!__OFADD__(a3, 1))
  {
    if (a3 + 1 < *(_QWORD *)(v7 + 16))
      return v6;
    return 0;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

_OWORD *outlined init with take of NavigationState.UpdateResult(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  a2[2] = a1[2];
  a2[3] = v4;
  *a2 = v2;
  a2[1] = v3;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[7];
  a2[6] = a1[6];
  a2[7] = v7;
  a2[4] = v5;
  a2[5] = v6;
  v8 = a1[8];
  v9 = a1[9];
  v10 = a1[11];
  a2[10] = a1[10];
  a2[11] = v10;
  a2[8] = v8;
  a2[9] = v9;
  v11 = a1[12];
  v12 = a1[13];
  v13 = a1[14];
  *(_OWORD *)((char *)a2 + 233) = *(__int128 *)((char *)a1 + 233);
  a2[13] = v12;
  a2[14] = v13;
  a2[12] = v11;
  return a2;
}

uint64_t outlined retain of NavigationRequest.TargetedRequest(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 192);
  v11 = *(_QWORD *)(a1 + 184);
  v3 = *(_QWORD *)(a1 + 200);
  v4 = *(_QWORD *)(a1 + 208);
  v5 = *(_QWORD *)(a1 + 216);
  v6 = *(_QWORD *)(a1 + 224);
  v7 = *(_QWORD *)(a1 + 232);
  v8 = *(_QWORD *)(a1 + 240);
  v9 = *(_BYTE *)(a1 + 248);
  outlined copy of NavigationRequest.Action(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  swift_retain();
  outlined copy of NavigationRequest.Action?(v11, v2, v3, v4, v5, v6, v7, v8, v9);
  return a1;
}

uint64_t outlined copy of NavigationRequest.Action(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v13;
  uint64_t v14;

  switch(a9)
  {
    case 0:
    case 11:
      goto LABEL_11;
    case 1:
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      goto LABEL_11;
    case 2:
      swift_retain();
      swift_retain();
      goto LABEL_11;
    case 3:
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRetain();
    case 4:
    case 5:
      goto LABEL_9;
    case 6:
    case 10:
    case 17:
      swift_retain();
LABEL_9:
      swift_retain();
      goto LABEL_11;
    case 12:
    case 13:
      swift_retain();
      swift_retain();
      outlined copy of _ViewList_ID.Canonical?(a3, a4);
      goto LABEL_11;
    case 14:
      swift_retain();
      swift_retain();
      v13 = a3;
      v14 = a4;
      goto LABEL_13;
    case 18:
      swift_retain();
      swift_retain();
      outlined copy of _ViewList_ID.Canonical?(a4, a5);
LABEL_11:
      result = swift_retain();
      break;
    case 19:
      swift_retain();
      v13 = a2;
      v14 = a3;
LABEL_13:
      result = outlined copy of _ViewList_ID.Canonical?(v13, v14);
      break;
    case 21:
      outlined copy of AppIntentExecutor?(result);
      result = outlined copy of AppIntentExecutor?(a3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined copy of NavigationRequest.Action?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255)
    return outlined copy of NavigationRequest.Action(result, a2, a3, a4, a5, a6, a7, a8, a9);
  return result;
}

uint64_t outlined retain of NavigationRequest(uint64_t a1)
{
  outlined copy of NavigationRequest.Action(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  swift_retain();
  return a1;
}

uint64_t *outlined retain of NavigationColumnState(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1[11];
  v3 = a1[12];
  v4 = a1[16];
  v11 = a1[15];
  v12 = a1[14];
  v5 = a1[17];
  v6 = a1[18];
  v9 = a1[20];
  v10 = a1[19];
  v8 = a1[21];
  outlined copy of NavigationListState?(a1[5], a1[6]);
  outlined copy of Binding<AnyNavigationPath>?(v2, v3);
  outlined copy of NavigationColumnState.ColumnContent(v12, v11, v4, v5, v6, v10, v9, v8);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *outlined release of NavigationColumnState(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1[11];
  v3 = a1[12];
  v4 = a1[16];
  v11 = a1[15];
  v12 = a1[14];
  v5 = a1[17];
  v6 = a1[18];
  v9 = a1[20];
  v10 = a1[19];
  v8 = a1[21];
  outlined consume of NavigationListState?(a1[5], a1[6]);
  outlined consume of Binding<AnyNavigationPath>?(v2, v3);
  outlined consume of NavigationColumnState.ColumnContent(v12, v11, v4, v5, v6, v10, v9, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t _s7SwiftUI21NavigationColumnStateVSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 192);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t outlined release of NavigationRequest.TargetedRequest(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 192);
  v11 = *(_QWORD *)(a1 + 184);
  v3 = *(_QWORD *)(a1 + 200);
  v4 = *(_QWORD *)(a1 + 208);
  v5 = *(_QWORD *)(a1 + 216);
  v6 = *(_QWORD *)(a1 + 224);
  v7 = *(_QWORD *)(a1 + 232);
  v8 = *(_QWORD *)(a1 + 240);
  v9 = *(_BYTE *)(a1 + 248);
  outlined consume of NavigationRequest.Action(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  swift_release();
  outlined consume of NavigationRequest.Action?(v11, v2, v3, v4, v5, v6, v7, v8, v9);
  return a1;
}

uint64_t outlined release of NavigationState.UpdateResult(uint64_t a1)
{
  __int128 v3;

  v3 = *(_OWORD *)(a1 + 208);
  outlined consume of NavigationState.UpdateResult(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_OWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_BYTE *)(a1 + 248));
  return a1;
}

uint64_t _s7SwiftUI15NavigationStateV12UpdateResultOWOg(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 104) >> 1) > 0x80000000)
    return -(*(_QWORD *)(a1 + 104) >> 1);
  else
    return 0;
}

double _s7SwiftUI21NavigationColumnStateVSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  *(_OWORD *)((char *)a1 + 283) = 0u;
  return result;
}

uint64_t outlined copy of NavigationColumnState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t result;

  if (a25)
  {
    outlined copy of NavigationListState?(a6, a7);
    outlined copy of Binding<AnyNavigationPath>?(a12, a13);
    outlined copy of NavigationColumnState.ColumnContent(a15, a16, a17, a18, a19, a20, a21, a22);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined retain of NavigationColumnState?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v6 = *(_OWORD *)(a1 + 256);
  v7 = *(_OWORD *)(a1 + 272);
  v4 = *(_OWORD *)(a1 + 224);
  v5 = *(_OWORD *)(a1 + 240);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4,
    *((_QWORD *)&v4 + 1),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    v7,
    *((_QWORD *)&v7 + 1),
    *(_QWORD *)(a1 + 288),
    *(unsigned __int16 *)(a1 + 296) | (*(unsigned __int8 *)(a1 + 298) << 16));
  return a1;
}

uint64_t outlined consume of NavigationColumnState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t result;

  if (a25)
  {
    outlined consume of NavigationListState?(a6, a7);
    outlined consume of Binding<AnyNavigationPath>?(a12, a13);
    outlined consume of NavigationColumnState.ColumnContent(a15, a16, a17, a18, a19, a20, a21, a22);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_186FB7074()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v5 = *(_OWORD *)(v0 + 336);
  v3 = *(_OWORD *)(v0 + 304);
  v4 = *(_OWORD *)(v0 + 320);
  v2 = *(_OWORD *)(v0 + 272);
  outlined consume of NavigationState.Base(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192),
    *(_QWORD *)(v0 + 200),
    *(_QWORD *)(v0 + 208),
    *(_QWORD *)(v0 + 216),
    *(_QWORD *)(v0 + 224),
    *(_QWORD *)(v0 + 232),
    *(_QWORD *)(v0 + 240),
    *(_QWORD *)(v0 + 248),
    *(_QWORD *)(v0 + 256),
    *(_QWORD *)(v0 + 264),
    v2,
    *((uint64_t *)&v2 + 1),
    *(_QWORD *)(v0 + 288),
    *(_QWORD *)(v0 + 296),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    *(_QWORD *)(v0 + 352));
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:)(a1, v1 + 48, *(_QWORD *)(v1 + 464), *(_BYTE *)(v1 + 472), *(_QWORD *)(v1 + 480), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v6 = *(_OWORD *)(a1 + 288);
  v4 = *(_OWORD *)(a1 + 256);
  v5 = *(_OWORD *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 224);
  outlined copy of NavigationState.Base(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    *(_QWORD *)(a1 + 304));
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

double _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0x7000000000000007;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 248) = xmmword_187BFE320;
  *(_QWORD *)(a1 + 264) = 4194296;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 384) = 0;
  return result;
}

_QWORD *_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi0_(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[31] & 0xFFFFFFFFFFFFFF8;
  v2 = result[33] & 7;
  v3 = result[37] & 0xFFFF03 | 0x4000000000000000;
  result[21] &= 0x8FFFFFFFFFFFFFF8;
  result[31] = v1;
  result[33] = v2;
  result[37] = v3;
  return result;
}

void *outlined init with take of NavigationState.Base(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0x188uLL);
}

char *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, Swift::UInt a3, Swift::UInt a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t __src[39];

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (char *)MEMORY[0x1E0DEE9D8];
  v8 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  v9 = 0;
  v10 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    if (*(_QWORD *)(v8 + 16))
    {
      v11 = specialized __RawDictionaryStorage.find<A>(_:)(a3, *(_BYTE *)(a1 + v9 + 32), a4);
      if ((v12 & 1) != 0)
      {
        memcpy(__src, (const void *)(*(_QWORD *)(v8 + 56) + 304 * v11), 0x12BuLL);
        outlined retain of NavigationColumnState(__src);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
        v14 = *((_QWORD *)v10 + 2);
        v13 = *((_QWORD *)v10 + 3);
        if (v14 >= v13 >> 1)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v10);
        *((_QWORD *)v10 + 2) = v14 + 1;
        memcpy(&v10[304 * v14 + 32], __src, 0x12BuLL);
      }
    }
    ++v9;
  }
  while (v4 != v9);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t outlined retain of NavigationState(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 104);
  v11 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 128);
  v4 = *(_WORD *)(a1 + 144);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of NavigationListState?(v2, v3);
  outlined copy of NavigationSplitViewState?(v13, v12, v11, v10, v9, v8, v7, v6, v4, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
  return a1;
}

uint64_t outlined release of NavigationState(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 104);
  v11 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 128);
  v4 = *(_WORD *)(a1 + 144);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of NavigationListState?(v2, v3);
  outlined copy of NavigationSplitViewState?(v13, v12, v11, v10, v9, v8, v7, v6, v4, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  return a1;
}

_QWORD *_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi1_(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = result[31] & 0xFFFFFFFFFFFFFF8;
  v2 = result[33] & 7;
  v3 = result[37] & 0xFFFF03 | 0x8000000000000000;
  result[21] &= 0x8FFFFFFFFFFFFFF8;
  result[31] = v1;
  result[33] = v2;
  result[37] = v3;
  return result;
}

void *outlined copy of DisplayList.AccessibilityUpdater.CacheValue?(void *result)
{
  id v1;

  if (result)
  {
    v1 = result;
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

void *outlined consume of DisplayList.AccessibilityUpdater.CacheValue?(void *result)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg(uint64_t a1)
{
  return *(_QWORD *)(a1 + 296) >> 62;
}

uint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE __dst[299];

  if (a2 != a1)
  {
    if (a2 <= a1)
    {
      __break(1u);
    }
    else if (a2 >= 1)
    {
      if (*(_QWORD *)(a3 + 16) >= a2)
      {
        memcpy(__dst, (const void *)(a3 + 304 * a2 - 272), sizeof(__dst));
        __asm { BR              X9 }
      }
LABEL_9:
      __break(1u);
      JUMPOUT(0x186FB7A7CLL);
    }
    __break(1u);
    goto LABEL_9;
  }
  return 0;
}

uint64_t _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_(uint64_t result)
{
  *(_QWORD *)(result + 296) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[11];
  v3 = a1[12];
  v4 = a1[14];
  v5 = a1[15];
  v6 = a1[16];
  v11 = a1[18];
  v12 = a1[17];
  v9 = a1[20];
  v10 = a1[19];
  v8 = a1[21];
  v13 = a1[38];
  outlined copy of NavigationListState?(a1[5], a1[6]);
  outlined copy of Binding<AnyNavigationPath>?(v2, v3);
  outlined copy of NavigationColumnState.ColumnContent(v4, v5, v6, v12, v11, v10, v9, v8);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of ResolvedNavigationDestinations?(v13);
  return a1;
}

uint64_t outlined retain of NavigationState.Base(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v11 = *(_OWORD *)(a1 + 352);
  v12 = *(_OWORD *)(a1 + 368);
  v9 = *(_OWORD *)(a1 + 320);
  v10 = *(_OWORD *)(a1 + 336);
  v7 = *(_OWORD *)(a1 + 288);
  v8 = *(_OWORD *)(a1 + 304);
  v5 = *(_OWORD *)(a1 + 256);
  v6 = *(_OWORD *)(a1 + 272);
  v4 = *(_OWORD *)(a1 + 224);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4,
    *((_QWORD *)&v4 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    v7,
    *((_QWORD *)&v7 + 1),
    v8,
    *((_QWORD *)&v8 + 1),
    v9,
    *((_QWORD *)&v9 + 1),
    v10,
    *((_QWORD *)&v10 + 1),
    v11,
    *((_QWORD *)&v11 + 1),
    v12,
    *((_QWORD *)&v12 + 1),
    *(_QWORD *)(a1 + 384));
  return a1;
}

uint64_t outlined init with copy of IdentifiedDocumentGroupConfiguration(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for IdentifiedDocumentGroupConfiguration(a2, a1);
  return a2;
}

uint64_t outlined destroy of IdentifiedDocumentGroupConfiguration(uint64_t a1)
{
  destroy for IdentifiedDocumentGroupConfiguration(a1);
  return a1;
}

uint64_t outlined copy of ToolbarAppearanceConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

void *outlined consume of KeyboardShortcutBridge.Shortcut?(void *result)
{
  if (result)
  {

    return (void *)swift_release();
  }
  return result;
}

void *outlined copy of KeyboardShortcutBridge.Shortcut?(void *result)
{
  id v1;

  if (result)
  {
    v1 = result;
    return (void *)swift_retain();
  }
  return result;
}

uint64_t outlined copy of TabCustomizationID.Base()
{
  return swift_bridgeObjectRetain();
}

uint64_t outlined consume of TabCustomizationID.Base()
{
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with take of TableColumnCustomizationID.Base(uint64_t a1, uint64_t a2)
{
  __swift_memcpy33_8(a2, a1);
  return a2;
}

uint64_t destroy for NavigationState.StackContent.PositionedView(uint64_t a1)
{
  uint64_t result;

  result = swift_release();
  if (*(_BYTE *)(a1 + 64) == 1)
  {
    swift_release();
    result = *(_QWORD *)(a1 + 40);
    if (result != 1)
      return swift_release();
  }
  else if (!*(_BYTE *)(a1 + 64))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  }
  return result;
}

uint64_t initializeWithCopy for NavigationState.StackContent.PositionedView(uint64_t a1, uint64_t a2)
{
  int v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(unsigned __int8 *)(a2 + 64);
  swift_retain();
  if (v4 == 1)
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v8 = (_OWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 40);
    swift_retain();
    if (v9 == 1)
    {
      *(_OWORD *)(a1 + 32) = *v8;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)v8;
      *(_QWORD *)(a1 + 40) = v9;
      swift_retain();
    }
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 64) = 1;
  }
  else
  {
    v5 = (_OWORD *)(a1 + 24);
    v6 = (_OWORD *)(a2 + 24);
    if (v4)
    {
      v10 = *(_OWORD *)(a2 + 40);
      *v5 = *v6;
      *(_OWORD *)(a1 + 40) = v10;
      *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
    }
    else
    {
      v7 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 48) = v7;
      (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
      *(_BYTE *)(a1 + 64) = 0;
    }
  }
  return a1;
}

uint64_t assignWithCopy for NavigationState.StackContent.PositionedView(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  if (a1 != a2)
  {
    outlined destroy of NavigationStackViewSource(a1 + 24);
    if (*(_BYTE *)(a2 + 64) == 1)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v6 = *(_QWORD *)(a2 + 40);
      swift_retain();
      if (v6 == 1)
      {
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      }
      else
      {
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        swift_retain();
      }
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 64) = 1;
    }
    else
    {
      v4 = (__int128 *)(a2 + 24);
      if (*(_BYTE *)(a2 + 64))
      {
        v7 = *v4;
        v8 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
        *(_OWORD *)(a1 + 24) = v7;
        *(_OWORD *)(a1 + 40) = v8;
      }
      else
      {
        v5 = *(_QWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 48) = v5;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
        (**(void (***)(uint64_t, __int128 *))(v5 - 8))(a1 + 24, v4);
        *(_BYTE *)(a1 + 64) = 0;
      }
    }
  }
  return a1;
}

uint64_t outlined destroy of NavigationStackViewSource(uint64_t a1)
{
  destroy for NavigationStackViewSource(a1);
  return a1;
}

uint64_t assignWithTake for NavigationState.StackContent.PositionedView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  if (a1 != a2)
  {
    outlined destroy of NavigationStackViewSource(a1 + 24);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationState.StackContent.PositionedView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationState.StackContent.PositionedView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationState.StackContent.PositionedView()
{
  return &type metadata for NavigationState.StackContent.PositionedView;
}

uint64_t *destroy for NavigationState.UpdateResult(uint64_t *result)
{
  uint64_t *v1;

  if (((unint64_t)result[13] >> 1) <= 0x80000000)
  {
    v1 = result;
    outlined consume of NavigationRequest.Action(*result, v1[1], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], *((_BYTE *)v1 + 64));
    result = (uint64_t *)swift_release();
    if (*((unsigned __int8 *)v1 + 248) != 255)
      return (uint64_t *)outlined consume of NavigationRequest.Action(v1[23], v1[24], v1[25], v1[26], v1[27], v1[28], v1[29], v1[30], *((_BYTE *)v1 + 248));
  }
  return result;
}

uint64_t initializeWithCopy for NavigationState.UpdateResult(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v31;

  if (((unint64_t)a2[13] >> 1) > 0x80000000)
  {
    v21 = *((_OWORD *)a2 + 13);
    *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 12);
    *(_OWORD *)(a1 + 208) = v21;
    *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
    *(_OWORD *)(a1 + 233) = *(_OWORD *)((char *)a2 + 233);
    v22 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = v22;
    v23 = *((_OWORD *)a2 + 11);
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 176) = v23;
    v24 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v24;
    v25 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v25;
    v26 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v26;
    v27 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v27;
  }
  else
  {
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[2];
    v7 = a2[3];
    v8 = a2[4];
    v9 = a2[5];
    v10 = a2[6];
    v11 = a2[7];
    v31 = *((_BYTE *)a2 + 64);
    outlined copy of NavigationRequest.Action(*a2, v5, v6, v7, v8, v9, v10, v11, v31);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v11;
    *(_BYTE *)(a1 + 64) = v31;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
    *(_QWORD *)(a1 + 128) = a2[16];
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 19);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    v12 = *((unsigned __int8 *)a2 + 248);
    swift_retain();
    if (v12 == 255)
    {
      v28 = *(_OWORD *)(a2 + 29);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
      *(_OWORD *)(a1 + 232) = v28;
      *(_BYTE *)(a1 + 248) = *((_BYTE *)a2 + 248);
      v29 = *(_OWORD *)(a2 + 25);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 23);
      *(_OWORD *)(a1 + 200) = v29;
    }
    else
    {
      v13 = a2[23];
      v14 = a2[24];
      v15 = a2[25];
      v16 = a2[26];
      v17 = a2[27];
      v18 = a2[28];
      v20 = a2[29];
      v19 = a2[30];
      outlined copy of NavigationRequest.Action(v13, v14, v15, v16, v17, v18, v20, v19, v12);
      *(_QWORD *)(a1 + 184) = v13;
      *(_QWORD *)(a1 + 192) = v14;
      *(_QWORD *)(a1 + 200) = v15;
      *(_QWORD *)(a1 + 208) = v16;
      *(_QWORD *)(a1 + 216) = v17;
      *(_QWORD *)(a1 + 224) = v18;
      *(_QWORD *)(a1 + 232) = v20;
      *(_QWORD *)(a1 + 240) = v19;
      *(_BYTE *)(a1 + 248) = v12;
    }
  }
  return a1;
}

uint64_t assignWithCopy for NavigationState.UpdateResult(uint64_t a1, __int128 *a2)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  _OWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;

  v4 = (_OWORD *)(a1 + 72);
  v5 = *((_QWORD *)a2 + 13) >> 1;
  if ((*(_QWORD *)(a1 + 104) >> 1) > 0x80000000)
  {
    if (v5 <= 0x80000000)
    {
      v46 = *((_QWORD *)a2 + 1);
      v88 = *(_QWORD *)a2;
      v47 = *((_QWORD *)a2 + 2);
      v48 = *((_QWORD *)a2 + 3);
      v49 = *((_QWORD *)a2 + 4);
      v50 = *((_QWORD *)a2 + 5);
      v51 = *((_QWORD *)a2 + 6);
      v52 = *((_QWORD *)a2 + 7);
      v90 = *((_BYTE *)a2 + 64);
      outlined copy of NavigationRequest.Action(*(_QWORD *)a2, v46, v47, v48, v49, v50, v51, v52, v90);
      *(_QWORD *)a1 = v88;
      *(_QWORD *)(a1 + 8) = v46;
      *(_QWORD *)(a1 + 16) = v47;
      *(_QWORD *)(a1 + 24) = v48;
      *(_QWORD *)(a1 + 32) = v49;
      *(_QWORD *)(a1 + 40) = v50;
      *(_QWORD *)(a1 + 48) = v51;
      *(_QWORD *)(a1 + 56) = v52;
      *(_BYTE *)(a1 + 64) = v90;
      v53 = *(__int128 *)((char *)a2 + 72);
      v54 = *(__int128 *)((char *)a2 + 104);
      v4[1] = *(__int128 *)((char *)a2 + 88);
      v4[2] = v54;
      *v4 = v53;
      *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
      *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
      v55 = *(__int128 *)((char *)a2 + 136);
      v56 = *(__int128 *)((char *)a2 + 152);
      *(_OWORD *)(a1 + 168) = *(__int128 *)((char *)a2 + 168);
      *(_OWORD *)(a1 + 152) = v56;
      *(_OWORD *)(a1 + 136) = v55;
      v28 = *((unsigned __int8 *)a2 + 248);
      swift_retain();
      if (v28 == 255)
      {
        *(_OWORD *)(a1 + 184) = *(__int128 *)((char *)a2 + 184);
        v57 = *(__int128 *)((char *)a2 + 200);
        v58 = *(__int128 *)((char *)a2 + 216);
        v59 = *(__int128 *)((char *)a2 + 232);
        *(_BYTE *)(a1 + 248) = *((_BYTE *)a2 + 248);
        *(_OWORD *)(a1 + 216) = v58;
        *(_OWORD *)(a1 + 232) = v59;
        *(_OWORD *)(a1 + 200) = v57;
        return a1;
      }
LABEL_13:
      v72 = *((_QWORD *)a2 + 23);
      v73 = *((_QWORD *)a2 + 24);
      v74 = *((_QWORD *)a2 + 25);
      v75 = *((_QWORD *)a2 + 26);
      v76 = *((_QWORD *)a2 + 27);
      v77 = *((_QWORD *)a2 + 28);
      v79 = *((_QWORD *)a2 + 29);
      v78 = *((_QWORD *)a2 + 30);
      outlined copy of NavigationRequest.Action(v72, v73, v74, v75, v76, v77, v79, v78, v28);
      *(_QWORD *)(a1 + 184) = v72;
      *(_QWORD *)(a1 + 192) = v73;
      *(_QWORD *)(a1 + 200) = v74;
      *(_QWORD *)(a1 + 208) = v75;
      *(_QWORD *)(a1 + 216) = v76;
      *(_QWORD *)(a1 + 224) = v77;
      *(_QWORD *)(a1 + 232) = v79;
      *(_QWORD *)(a1 + 240) = v78;
      *(_BYTE *)(a1 + 248) = v28;
      return a1;
    }
LABEL_11:
    v60 = *a2;
    v61 = a2[1];
    v62 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v62;
    *(_OWORD *)a1 = v60;
    *(_OWORD *)(a1 + 16) = v61;
    v63 = a2[4];
    v64 = a2[5];
    v65 = a2[7];
    *(_OWORD *)(a1 + 96) = a2[6];
    *(_OWORD *)(a1 + 112) = v65;
    *(_OWORD *)(a1 + 64) = v63;
    *(_OWORD *)(a1 + 80) = v64;
    v66 = a2[8];
    v67 = a2[9];
    v68 = a2[11];
    *(_OWORD *)(a1 + 160) = a2[10];
    *(_OWORD *)(a1 + 176) = v68;
    *(_OWORD *)(a1 + 128) = v66;
    *(_OWORD *)(a1 + 144) = v67;
    v69 = a2[12];
    v70 = a2[13];
    v71 = a2[14];
    *(_OWORD *)(a1 + 233) = *(__int128 *)((char *)a2 + 233);
    *(_OWORD *)(a1 + 208) = v70;
    *(_OWORD *)(a1 + 224) = v71;
    *(_OWORD *)(a1 + 192) = v69;
    return a1;
  }
  if (v5 > 0x80000000)
  {
    outlined consume of NavigationRequest.Action(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
    swift_release();
    if (*(unsigned __int8 *)(a1 + 248) != 255)
      outlined consume of NavigationRequest.Action(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 232), *(_QWORD *)(a1 + 240), *(_BYTE *)(a1 + 248));
    goto LABEL_11;
  }
  v6 = *((_QWORD *)a2 + 1);
  v87 = *(_QWORD *)a2;
  v7 = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  v9 = *((_QWORD *)a2 + 4);
  v10 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)a2 + 6);
  v12 = *((_QWORD *)a2 + 7);
  v89 = *((_BYTE *)a2 + 64);
  outlined copy of NavigationRequest.Action(*(_QWORD *)a2, v6, v7, v8, v9, v10, v11, v12, v89);
  v13 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)a1 = v87;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v12;
  *(_BYTE *)(a1 + 64) = v89;
  outlined consume of NavigationRequest.Action(v13, v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(__int128 *)((char *)a2 + 72);
  v23 = *(__int128 *)((char *)a2 + 104);
  v4[1] = *(__int128 *)((char *)a2 + 88);
  v4[2] = v23;
  *v4 = v22;
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  swift_retain();
  swift_release();
  v24 = *(__int128 *)((char *)a2 + 136);
  v25 = *(__int128 *)((char *)a2 + 152);
  *(_OWORD *)(a1 + 168) = *(__int128 *)((char *)a2 + 168);
  *(_OWORD *)(a1 + 152) = v25;
  *(_OWORD *)(a1 + 136) = v24;
  v26 = (_OWORD *)(a1 + 184);
  v27 = (__int128 *)((char *)a2 + 184);
  v28 = *((unsigned __int8 *)a2 + 248);
  if (*(unsigned __int8 *)(a1 + 248) == 255)
  {
    if (v28 == 255)
    {
      *v26 = *v27;
      v83 = *(__int128 *)((char *)a2 + 200);
      v84 = *(__int128 *)((char *)a2 + 216);
      v85 = *(__int128 *)((char *)a2 + 232);
      *(_BYTE *)(a1 + 248) = *((_BYTE *)a2 + 248);
      *(_OWORD *)(a1 + 216) = v84;
      *(_OWORD *)(a1 + 232) = v85;
      *(_OWORD *)(a1 + 200) = v83;
      return a1;
    }
    goto LABEL_13;
  }
  if (v28 == 255)
  {
    outlined destroy of NavigationRequest.Action(a1 + 184);
    *v26 = *v27;
    v81 = *(__int128 *)((char *)a2 + 216);
    v80 = *(__int128 *)((char *)a2 + 232);
    v82 = *(__int128 *)((char *)a2 + 200);
    *(_BYTE *)(a1 + 248) = *((_BYTE *)a2 + 248);
    *(_OWORD *)(a1 + 216) = v81;
    *(_OWORD *)(a1 + 232) = v80;
    *(_OWORD *)(a1 + 200) = v82;
  }
  else
  {
    v29 = *((_QWORD *)a2 + 23);
    v30 = *((_QWORD *)a2 + 24);
    v31 = *((_QWORD *)a2 + 25);
    v32 = *((_QWORD *)a2 + 26);
    v33 = *((_QWORD *)a2 + 27);
    v34 = *((_QWORD *)a2 + 28);
    v36 = *((_QWORD *)a2 + 29);
    v35 = *((_QWORD *)a2 + 30);
    outlined copy of NavigationRequest.Action(v29, v30, v31, v32, v33, v34, v36, v35, v28);
    v37 = *(_QWORD *)(a1 + 184);
    v38 = *(_QWORD *)(a1 + 192);
    v39 = *(_QWORD *)(a1 + 200);
    v40 = *(_QWORD *)(a1 + 208);
    v41 = *(_QWORD *)(a1 + 216);
    v42 = *(_QWORD *)(a1 + 224);
    v43 = *(_QWORD *)(a1 + 232);
    v44 = *(_QWORD *)(a1 + 240);
    v45 = *(_BYTE *)(a1 + 248);
    *(_QWORD *)(a1 + 184) = v29;
    *(_QWORD *)(a1 + 192) = v30;
    *(_QWORD *)(a1 + 200) = v31;
    *(_QWORD *)(a1 + 208) = v32;
    *(_QWORD *)(a1 + 216) = v33;
    *(_QWORD *)(a1 + 224) = v34;
    *(_QWORD *)(a1 + 232) = v36;
    *(_QWORD *)(a1 + 240) = v35;
    *(_BYTE *)(a1 + 248) = v28;
    outlined consume of NavigationRequest.Action(v37, v38, v39, v40, v41, v42, v43, v44, v45);
  }
  return a1;
}

uint64_t outlined destroy of NavigationRequest.Action(uint64_t a1)
{
  destroy for NavigationRequest.Action(a1);
  return a1;
}

__n128 __swift_memcpy249_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[14];
  *(_OWORD *)(a1 + 233) = *(__int128 *)((char *)a2 + 233);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for NavigationState.UpdateResult(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v36;
  __int128 v37;

  if ((*(_QWORD *)(a1 + 104) >> 1) > 0x80000000)
  {
LABEL_8:
    v28 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v28;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 233) = *(_OWORD *)(a2 + 233);
    v29 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v29;
    v30 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v30;
    v31 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v31;
    v32 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v32;
    v33 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v33;
    v34 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v34;
    return a1;
  }
  if ((*(_QWORD *)(a2 + 104) >> 1) > 0x80000000)
  {
    outlined consume of NavigationRequest.Action(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
    swift_release();
    if (*(unsigned __int8 *)(a1 + 248) != 255)
      outlined consume of NavigationRequest.Action(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 232), *(_QWORD *)(a1 + 240), *(_BYTE *)(a1 + 248));
    goto LABEL_8;
  }
  v4 = (_OWORD *)(a1 + 72);
  v5 = *(_BYTE *)(a2 + 64);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_BYTE *)(a1 + 64);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_BYTE *)(a1 + 64) = v5;
  outlined consume of NavigationRequest.Action(v6, v7, v8, v9, v10, v11, v12, v13, v14);
  v17 = *(_OWORD *)(a2 + 88);
  *v4 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v17;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  v18 = *(unsigned __int8 *)(a1 + 248);
  if (v18 == 255)
  {
LABEL_11:
    v36 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v36;
    *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
    v37 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v37;
    return a1;
  }
  v19 = *(unsigned __int8 *)(a2 + 248);
  if (v19 == 255)
  {
    outlined destroy of NavigationRequest.Action(a1 + 184);
    goto LABEL_11;
  }
  v20 = *(_QWORD *)(a1 + 184);
  v21 = *(_QWORD *)(a1 + 192);
  v22 = *(_QWORD *)(a1 + 200);
  v23 = *(_QWORD *)(a1 + 208);
  v24 = *(_QWORD *)(a1 + 216);
  v25 = *(_QWORD *)(a1 + 224);
  v26 = *(_QWORD *)(a1 + 232);
  v27 = *(_QWORD *)(a1 + 240);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 248) = v19;
  outlined consume of NavigationRequest.Action(v20, v21, v22, v23, v24, v25, v26, v27, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationState.UpdateResult(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 249))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 104) >> 1;
  if (v3 > 0x80000000)
    v4 = -(int)v3;
  else
    v4 = 0;
  if (v4 >= 3)
    return v4 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NavigationState.UpdateResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_OWORD *)(result + 233) = 0u;
    *(_OWORD *)(result + 208) = 0u;
    *(_OWORD *)(result + 224) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 249) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 249) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 88) = 0u;
      *(_OWORD *)(result + 72) = 0u;
      *(_QWORD *)(result + 104) = 2 * (-2 - a2);
      *(_QWORD *)(result + 112) = 0;
    }
  }
  return result;
}

double destructiveInjectEnumTag for NavigationState.UpdateResult(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 248) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_QWORD *)(a1 + 104) = 2 * -a2;
    *(_QWORD *)(a1 + 112) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationState.UpdateResult()
{
  return &type metadata for NavigationState.UpdateResult;
}

_QWORD *destructiveInjectEnumTag for NavigationState.Base(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = result[31] & 0xFFFFFFFFFFFFFF8;
  v3 = result[33] & 7;
  v4 = result[37] & 0xFFFF03;
  result[21] &= 0x8FFFFFFFFFFFFFF8;
  result[31] = v2;
  result[33] = v3;
  result[37] = v4 | (a2 << 62);
  return result;
}

ValueMetadata *type metadata accessor for NavigationState.Base()
{
  return &type metadata for NavigationState.Base;
}

uint64_t getEnumTagSinglePayload for NavigationState.ListKey(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationState.ListKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationState.ListKey()
{
  return &type metadata for NavigationState.ListKey;
}

unint64_t lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationState.ListKey and conformance NavigationState.ListKey;
  if (!lazy protocol witness table cache variable for type NavigationState.ListKey and conformance NavigationState.ListKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationState.ListKey, &type metadata for NavigationState.ListKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationState.ListKey and conformance NavigationState.ListKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationState.ListKey and conformance NavigationState.ListKey;
  if (!lazy protocol witness table cache variable for type NavigationState.ListKey and conformance NavigationState.ListKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationState.ListKey, &type metadata for NavigationState.ListKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationState.ListKey and conformance NavigationState.ListKey);
  }
  return result;
}

uint64_t outlined init with take of ConfirmationDialog(uint64_t a1, uint64_t a2)
{
  initializeWithTake for ConfirmationDialog(a2, a1);
  return a2;
}

unint64_t type metadata accessor for UINavigationController()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UINavigationController;
  if (!lazy cache variable for type metadata for UINavigationController)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
  }
  return result;
}

uint64_t _s7SwiftUI15NavigationStateV12StackContentVSgWOgTm(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(_QWORD *)(a1 + 168) >> 57) & 0x38 | *(_QWORD *)(a1 + 168) & 7 | (*(_QWORD *)(a1 + 248) >> 51) & 0x1E00 | ((*(_QWORD *)(a1 + 248) & 7) << 6) & 0x1FFF | (*(_DWORD *)(a1 + 264) >> 3 << 13);
  if (v1 > 0x80000000)
    return -v1;
  else
    return 0;
}

uint64_t outlined release of NavigationState.StackContent?(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v11 = *(_OWORD *)(a1 + 352);
  v12 = *(_OWORD *)(a1 + 368);
  v9 = *(_OWORD *)(a1 + 320);
  v10 = *(_OWORD *)(a1 + 336);
  v7 = *(_OWORD *)(a1 + 288);
  v8 = *(_OWORD *)(a1 + 304);
  v5 = *(_OWORD *)(a1 + 256);
  v6 = *(_OWORD *)(a1 + 272);
  v4 = *(_OWORD *)(a1 + 224);
  outlined copy of NavigationState.StackContent?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4,
    *((uint64_t *)&v4 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    *(_QWORD *)(a1 + 384),
    a2);
  return a1;
}

uint64_t outlined release of (NavigationState.Base, NavigationState.Base?)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v2 = *(_QWORD *)(a1 + 392);
  v3 = *(_QWORD *)(a1 + 400);
  v4 = *(_QWORD *)(a1 + 408);
  v5 = *(_QWORD *)(a1 + 416);
  v6 = *(_QWORD *)(a1 + 424);
  v7 = *(_QWORD *)(a1 + 432);
  v8 = *(_QWORD *)(a1 + 440);
  v9 = *(_QWORD *)(a1 + 448);
  v35 = *(_OWORD *)(a1 + 472);
  v36 = *(_OWORD *)(a1 + 456);
  v33 = *(_OWORD *)(a1 + 504);
  v34 = *(_OWORD *)(a1 + 488);
  v31 = *(_OWORD *)(a1 + 536);
  v32 = *(_OWORD *)(a1 + 520);
  v29 = *(_OWORD *)(a1 + 568);
  v30 = *(_OWORD *)(a1 + 552);
  v27 = *(_OWORD *)(a1 + 600);
  v28 = *(_OWORD *)(a1 + 584);
  v25 = *(_OWORD *)(a1 + 632);
  v26 = *(_OWORD *)(a1 + 616);
  v23 = *(_OWORD *)(a1 + 664);
  v24 = *(_OWORD *)(a1 + 648);
  v21 = *(_OWORD *)(a1 + 696);
  v22 = *(_OWORD *)(a1 + 680);
  v19 = *(_OWORD *)(a1 + 728);
  v20 = *(_OWORD *)(a1 + 712);
  v17 = *(_OWORD *)(a1 + 760);
  v18 = *(_OWORD *)(a1 + 744);
  v10 = *(_QWORD *)(a1 + 776);
  v16 = *(_OWORD *)(a1 + 288);
  v14 = *(_OWORD *)(a1 + 256);
  v15 = *(_OWORD *)(a1 + 272);
  v12 = *(_OWORD *)(a1 + 224);
  v13 = *(_OWORD *)(a1 + 240);
  outlined consume of NavigationState.Base(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((unint64_t *)&v16 + 1),
    *(_QWORD *)(a1 + 304));
  outlined copy of NavigationState.StackContent?(v2, v3, v4, v5, v6, v7, v8, v9, v36, *((uint64_t *)&v36 + 1), v35, *((uint64_t *)&v35 + 1), v34, *((uint64_t *)&v34 + 1), v33, *((uint64_t *)&v33 + 1), v32, *((uint64_t *)&v32 + 1), v31,
    *((uint64_t *)&v31 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v10,
    (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
  return a1;
}

uint64_t outlined copy of NavigationState.StackContent?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t (*a50)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result;

  result = a21;
  if ((~a22 & 0x7000000000000007) != 0
    || (a32 & 0xF000000000000007) != 0xF000000000000007
    || (a34 & 0xFFFFFFFFFFFFFFF8) != 0x3FFFF8
    || (a38 & 0xFFFFFFFFFF0000FCLL) != 0)
  {
    return a50(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49);
  }
  return result;
}

void partial apply for specialized closure #1 in Collection<>.collapsedItemCount<A>(within:splitViewState:)(uint64_t *a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  specialized closure #1 in Collection<>.collapsedItemCount<A>(within:splitViewState:)(*a1, *a2, **(_QWORD **)(v3 + 16));
  if (!v4)
    *a3 = v6;
}

uint64_t getEnumTagSinglePayload for NavigationState.StackContent.Views.ViewsSequence.Index.Kind(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationState.StackContent.Views.ViewsSequence.Index.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for NavigationState.StackContent.Views.ViewsSequence.Index.Kind(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for NavigationState.StackContent.Views.ViewsSequence.Index.Kind(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

void type metadata accessor for NavigationState.StackContent.Views.ViewsSequence.Index.Kind()
{
  JUMPOUT(0x18D75FF28);
}

ValueMetadata *type metadata accessor for NavigationState.StackContent.ChangeKind()
{
  return &type metadata for NavigationState.StackContent.ChangeKind;
}

uint64_t destroy for NavigationState.StackContent.Views.ViewsSequence(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v5 = *(_OWORD *)(a1 + 288);
  v3 = *(_OWORD *)(a1 + 256);
  v4 = *(_OWORD *)(a1 + 272);
  v2 = *(_OWORD *)(a1 + 224);
  outlined consume of NavigationState.Base(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v2,
    *((uint64_t *)&v2 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    *(_QWORD *)(a1 + 304));
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for NavigationState.StackContent.Views.ViewsSequence(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v53 = a2[9];
  v54 = a2[8];
  v51 = a2[11];
  v52 = a2[10];
  v49 = a2[13];
  v50 = a2[12];
  v47 = a2[15];
  v48 = a2[14];
  v45 = a2[17];
  v46 = a2[16];
  v43 = a2[19];
  v44 = a2[18];
  v41 = a2[21];
  v42 = a2[20];
  v14 = a2[22];
  v15 = a2[23];
  v16 = a2[24];
  v17 = a2[25];
  v18 = a2[26];
  v19 = a2[27];
  v20 = a2[28];
  v21 = a2[29];
  v22 = a2[30];
  v23 = a2[31];
  v24 = a2[32];
  v25 = a2[33];
  v26 = a2[34];
  v27 = a2[35];
  v28 = a2[36];
  v29 = a2[37];
  v30 = a2[38];
  v31 = a2[39];
  v32 = a2[40];
  v33 = a2[41];
  v34 = a2[42];
  v35 = a2[43];
  v36 = a2[44];
  v37 = a2[45];
  v38 = a2[46];
  v39 = a2[47];
  v40 = a2[48];
  v5 = a2[1];
  v4 = *a2;
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v11 = a2[7];
  outlined copy of NavigationState.Base(*a2, v5, v6, v7, v8, v9, v10, v11, v54, v53, v52, v51, v50, v49, v48, v47, v46, v45, v44,
    v43,
    v42,
    v41,
    v14,
    v15,
    v16,
    v17,
    v18,
    v19,
    v20,
    v21,
    v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v54;
  a1[9] = v53;
  a1[10] = v52;
  a1[11] = v51;
  a1[12] = v50;
  a1[13] = v49;
  a1[14] = v48;
  a1[15] = v47;
  a1[16] = v46;
  a1[17] = v45;
  a1[18] = v44;
  a1[19] = v43;
  a1[20] = v42;
  a1[21] = v41;
  a1[22] = v14;
  a1[23] = v15;
  a1[24] = v16;
  a1[25] = v17;
  a1[26] = v18;
  a1[27] = v19;
  a1[28] = v20;
  a1[29] = v21;
  a1[30] = v22;
  a1[31] = v23;
  a1[32] = v24;
  a1[33] = v25;
  a1[34] = v26;
  a1[35] = v27;
  a1[36] = v28;
  a1[37] = v29;
  a1[38] = v30;
  a1[39] = v31;
  a1[40] = v32;
  a1[41] = v33;
  a1[42] = v34;
  a1[43] = v35;
  a1[44] = v36;
  a1[45] = v37;
  a1[46] = v38;
  a1[47] = v39;
  a1[48] = v40;
  v12 = a2[50];
  a1[49] = a2[49];
  a1[50] = v12;
  a1[51] = a2[51];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NavigationState.StackContent.Views.ViewsSequence(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v77 = a2[1];
  v78 = *a2;
  v75 = a2[3];
  v76 = a2[2];
  v73 = a2[5];
  v74 = a2[4];
  v71 = a2[7];
  v72 = a2[6];
  v69 = a2[9];
  v70 = a2[8];
  v67 = a2[11];
  v68 = a2[10];
  v65 = a2[13];
  v66 = a2[12];
  v63 = a2[15];
  v64 = a2[14];
  v61 = a2[17];
  v62 = a2[16];
  v59 = a2[19];
  v60 = a2[18];
  v58 = a2[20];
  v4 = a2[22];
  v57 = a2[21];
  v5 = a2[23];
  v6 = a2[24];
  v7 = a2[25];
  v9 = a2[27];
  v8 = a2[28];
  v11 = a2[29];
  v10 = a2[30];
  v38 = a2[26];
  v39 = a2[31];
  v40 = a2[32];
  v41 = a2[33];
  v42 = a2[34];
  v43 = a2[35];
  v44 = a2[36];
  v45 = a2[37];
  v46 = a2[38];
  v47 = a2[39];
  v48 = a2[40];
  v49 = a2[41];
  v50 = a2[42];
  v51 = a2[43];
  v52 = a2[44];
  v53 = a2[45];
  v54 = a2[46];
  v55 = a2[47];
  v56 = a2[48];
  outlined copy of NavigationState.Base(*a2, v77, v76, v75, v74, v73, v72, v71, v70, v69, v68, v67, v66, v65, v64, v63, v62, v61, v60,
    v59,
    v58,
    v57,
    v4,
    v5,
    v6,
    v7,
    v38,
    v9,
    v8,
    v11,
    v10,
    v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    v46);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v78;
  *(_QWORD *)(a1 + 8) = v77;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v76;
  *(_QWORD *)(a1 + 24) = v75;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v74;
  *(_QWORD *)(a1 + 40) = v73;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v72;
  *(_QWORD *)(a1 + 56) = v71;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v70;
  *(_QWORD *)(a1 + 72) = v69;
  *(_QWORD *)(a1 + 80) = v68;
  *(_QWORD *)(a1 + 88) = v67;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v66;
  *(_QWORD *)(a1 + 104) = v65;
  *(_QWORD *)(a1 + 112) = v64;
  *(_QWORD *)(a1 + 120) = v63;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v62;
  *(_QWORD *)(a1 + 136) = v61;
  *(_QWORD *)(a1 + 144) = v60;
  *(_QWORD *)(a1 + 152) = v59;
  v26 = *(_OWORD *)(a1 + 160);
  v27 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 160) = v58;
  *(_QWORD *)(a1 + 168) = v57;
  *(_QWORD *)(a1 + 176) = v4;
  v28 = *(_OWORD *)(a1 + 192);
  v29 = *(_OWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 184) = v5;
  *(_QWORD *)(a1 + 192) = v6;
  *(_QWORD *)(a1 + 200) = v7;
  *(_QWORD *)(a1 + 208) = v38;
  v30 = *(_OWORD *)(a1 + 224);
  v31 = *(_OWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 216) = v9;
  *(_QWORD *)(a1 + 224) = v8;
  *(_QWORD *)(a1 + 232) = v11;
  *(_QWORD *)(a1 + 240) = v10;
  *(_QWORD *)(a1 + 248) = v39;
  v32 = *(_OWORD *)(a1 + 256);
  v33 = *(_OWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 256) = v40;
  *(_QWORD *)(a1 + 264) = v41;
  *(_QWORD *)(a1 + 272) = v42;
  *(_QWORD *)(a1 + 280) = v43;
  v34 = *(_OWORD *)(a1 + 288);
  v35 = *(_OWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 288) = v44;
  *(_QWORD *)(a1 + 296) = v45;
  *(_QWORD *)(a1 + 304) = v46;
  *(_QWORD *)(a1 + 312) = v47;
  *(_QWORD *)(a1 + 320) = v48;
  *(_QWORD *)(a1 + 328) = v49;
  *(_QWORD *)(a1 + 336) = v50;
  *(_QWORD *)(a1 + 344) = v51;
  *(_QWORD *)(a1 + 352) = v52;
  *(_QWORD *)(a1 + 360) = v53;
  *(_QWORD *)(a1 + 368) = v54;
  *(_QWORD *)(a1 + 376) = v55;
  *(_QWORD *)(a1 + 384) = v56;
  outlined consume of NavigationState.Base(v12, v13, v14, v15, v16, v17, v18, v19, v20, WORD4(v20), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v34,
    *((unint64_t *)&v34 + 1),
    v35);
  v36 = a2[50];
  *(_QWORD *)(a1 + 392) = a2[49];
  *(_QWORD *)(a1 + 400) = v36;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 408) = a2[51];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy416_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1A0uLL);
}

uint64_t assignWithTake for NavigationState.StackContent.Views.ViewsSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v4 = *(_QWORD *)(a2 + 384);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = *(_OWORD *)(a1 + 112);
  v17 = *(_OWORD *)(a1 + 128);
  v18 = *(_OWORD *)(a1 + 144);
  v19 = *(_OWORD *)(a1 + 160);
  v20 = *(_OWORD *)(a1 + 176);
  v21 = *(_OWORD *)(a1 + 192);
  v22 = *(_OWORD *)(a1 + 208);
  v23 = *(_OWORD *)(a1 + 224);
  v24 = *(_OWORD *)(a1 + 240);
  v25 = *(_OWORD *)(a1 + 256);
  v26 = *(_OWORD *)(a1 + 272);
  v27 = *(_OWORD *)(a1 + 288);
  v28 = *(_OWORD *)(a1 + 304);
  v29 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v29;
  v30 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v30;
  v31 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v31;
  v32 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v32;
  v33 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v33;
  v34 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v34;
  v35 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v35;
  v36 = *(_OWORD *)(a2 + 240);
  v37 = *(_OWORD *)(a2 + 256);
  v38 = *(_OWORD *)(a2 + 272);
  v39 = *(_OWORD *)(a2 + 288);
  v40 = *(_OWORD *)(a2 + 304);
  v41 = *(_OWORD *)(a2 + 320);
  v42 = *(_OWORD *)(a2 + 336);
  v43 = *(_OWORD *)(a2 + 352);
  v44 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v36;
  *(_OWORD *)(a1 + 256) = v37;
  *(_OWORD *)(a1 + 272) = v38;
  *(_OWORD *)(a1 + 288) = v39;
  *(_OWORD *)(a1 + 304) = v40;
  *(_OWORD *)(a1 + 320) = v41;
  *(_OWORD *)(a1 + 336) = v42;
  *(_OWORD *)(a1 + 352) = v43;
  *(_OWORD *)(a1 + 368) = v44;
  *(_QWORD *)(a1 + 384) = v4;
  outlined consume of NavigationState.Base(v5, v6, v7, v8, v9, v10, v11, v12, v13, WORD4(v13), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((unint64_t *)&v27 + 1),
    v28);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
  swift_release();
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationState.StackContent.Views.ViewsSequence(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 416))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)(a1 + 168) >> 57) & 0x38 | *(_QWORD *)(a1 + 168) & 7 | (*(_QWORD *)(a1 + 248) >> 51) & 0x1E00 | ((*(_QWORD *)(a1 + 248) & 7) << 6) & 0x1FFF | (*(_DWORD *)(a1 + 264) >> 3 << 13);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for NavigationState.StackContent.Views.ViewsSequence(uint64_t a1, int a2, int a3)
{
  double result;
  unint64_t v4;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 408) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 392) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 416) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      v4 = -a2;
      result = 0.0;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 160) = 0;
      *(_QWORD *)(a1 + 168) = (v4 | (v4 << 57)) & 0x7000000000000007;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      *(_OWORD *)(a1 + 208) = 0u;
      *(_OWORD *)(a1 + 224) = 0u;
      *(_QWORD *)(a1 + 240) = 0;
      *(_QWORD *)(a1 + 248) = ((v4 >> 6) | (v4 << 51)) & 0xF000000000000007;
      *(_QWORD *)(a1 + 256) = 0;
      *(_QWORD *)(a1 + 264) = (v4 >> 10) & 0x3FFFF8;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_OWORD *)(a1 + 304) = 0u;
      *(_OWORD *)(a1 + 320) = 0u;
      *(_OWORD *)(a1 + 336) = 0u;
      *(_OWORD *)(a1 + 352) = 0u;
      *(_OWORD *)(a1 + 368) = 0u;
      *(_QWORD *)(a1 + 384) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 416) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for NavigationState.StackContent.Views.ViewsSequence()
{
  JUMPOUT(0x18D75FF28);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Collection in NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationState.StackContent.Views.ViewsSequence<A, B>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA210], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationState.StackContent.Views.ViewsSequence<A, B>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE28], a1, &v3);
}

void base witness table accessor for Equatable in NavigationState.StackContent.Views.ViewsSequence<A, B>.Index.Kind()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Sequence in NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void associated type witness table accessor for Collection.Index : Comparable in NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void associated type witness table accessor for Collection.Indices : Collection in NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void associated type witness table accessor for Collection.SubSequence : Collection in NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Equatable in NavigationState.StackContent.Views.ViewsSequence<A, B>.Index()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined destroy of NavigationState.StackContent.PositionedView(uint64_t a1)
{
  destroy for NavigationState.StackContent.PositionedView(a1);
  return a1;
}

uint64_t outlined init with take of NavigationStackViewSource(uint64_t a1, uint64_t a2)
{
  __swift_memcpy41_8(a2, a1);
  return a2;
}

uint64_t outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v6 = *(_OWORD *)(a1 + 288);
  v4 = *(_OWORD *)(a1 + 256);
  v5 = *(_OWORD *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 224);
  outlined consume of NavigationState.Base(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    *(_QWORD *)(a1 + 304));
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t destroy for NavigationState.StackContent(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v6 = *(_OWORD *)(a1 + 288);
  v4 = *(_OWORD *)(a1 + 256);
  v5 = *(_OWORD *)(a1 + 272);
  v2 = *(_OWORD *)(a1 + 224);
  v3 = *(_OWORD *)(a1 + 240);
  return outlined consume of NavigationState.Base(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
           *(_QWORD *)(a1 + 152),
           *(_QWORD *)(a1 + 160),
           *(_QWORD *)(a1 + 168),
           *(_QWORD *)(a1 + 176),
           *(_QWORD *)(a1 + 184),
           *(_QWORD *)(a1 + 192),
           *(_QWORD *)(a1 + 200),
           *(_QWORD *)(a1 + 208),
           *(_QWORD *)(a1 + 216),
           v2,
           *((uint64_t *)&v2 + 1),
           v3,
           *((uint64_t *)&v3 + 1),
           v4,
           *((uint64_t *)&v4 + 1),
           v5,
           *((uint64_t *)&v5 + 1),
           v6,
           *((unint64_t *)&v6 + 1),
           *(_QWORD *)(a1 + 304));
}

uint64_t *initializeWithCopy for NavigationState.StackContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v51 = a2[9];
  v52 = a2[8];
  v49 = a2[11];
  v50 = a2[10];
  v47 = a2[13];
  v48 = a2[12];
  v45 = a2[15];
  v46 = a2[14];
  v43 = a2[17];
  v44 = a2[16];
  v41 = a2[19];
  v42 = a2[18];
  v40 = a2[20];
  v13 = a2[21];
  v14 = a2[22];
  v15 = a2[23];
  v16 = a2[24];
  v17 = a2[25];
  v18 = a2[26];
  v19 = a2[27];
  v20 = a2[28];
  v3 = a2[30];
  v21 = a2[29];
  v22 = a2[31];
  v23 = a2[32];
  v24 = a2[33];
  v25 = a2[34];
  v26 = a2[35];
  v27 = a2[36];
  v28 = a2[37];
  v29 = a2[38];
  v30 = a2[39];
  v31 = a2[40];
  v32 = a2[41];
  v33 = a2[42];
  v34 = a2[43];
  v35 = a2[44];
  v36 = a2[45];
  v37 = a2[46];
  v38 = a2[47];
  v39 = a2[48];
  v5 = a2[1];
  v4 = *a2;
  v7 = a2[3];
  v6 = a2[2];
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v11 = a2[7];
  outlined copy of NavigationState.Base(*a2, v5, v6, v7, v8, v9, v10, v11, v52, v51, v50, v49, v48, v47, v46, v45, v44, v43, v42,
    v41,
    v40,
    v13,
    v14,
    v15,
    v16,
    v17,
    v18,
    v19,
    v20,
    v21,
    v3,
    v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v52;
  a1[9] = v51;
  a1[10] = v50;
  a1[11] = v49;
  a1[12] = v48;
  a1[13] = v47;
  a1[14] = v46;
  a1[15] = v45;
  a1[16] = v44;
  a1[17] = v43;
  a1[18] = v42;
  a1[19] = v41;
  a1[20] = v40;
  a1[21] = v13;
  a1[22] = v14;
  a1[23] = v15;
  a1[24] = v16;
  a1[25] = v17;
  a1[26] = v18;
  a1[27] = v19;
  a1[28] = v20;
  a1[29] = v21;
  a1[30] = v3;
  a1[31] = v22;
  a1[32] = v23;
  a1[33] = v24;
  a1[34] = v25;
  a1[35] = v26;
  a1[36] = v27;
  a1[37] = v28;
  a1[38] = v29;
  a1[39] = v30;
  a1[40] = v31;
  a1[41] = v32;
  a1[42] = v33;
  a1[43] = v34;
  a1[44] = v35;
  a1[45] = v36;
  a1[46] = v37;
  a1[47] = v38;
  a1[48] = v39;
  return a1;
}

uint64_t assignWithCopy for NavigationState.StackContent(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v75 = *a2;
  v76 = a2[1];
  v73 = a2[3];
  v74 = a2[2];
  v71 = a2[5];
  v72 = a2[4];
  v69 = a2[7];
  v70 = a2[6];
  v67 = a2[9];
  v68 = a2[8];
  v65 = a2[11];
  v66 = a2[10];
  v63 = a2[13];
  v64 = a2[12];
  v61 = a2[15];
  v62 = a2[14];
  v59 = a2[17];
  v60 = a2[16];
  v57 = a2[19];
  v58 = a2[18];
  v3 = a2[21];
  v56 = a2[20];
  v4 = a2[22];
  v5 = a2[23];
  v6 = a2[24];
  v7 = a2[25];
  v8 = a2[27];
  v10 = a2[28];
  v9 = a2[29];
  v11 = a2[30];
  v37 = a2[26];
  v38 = a2[31];
  v39 = a2[32];
  v40 = a2[33];
  v41 = a2[34];
  v42 = a2[35];
  v43 = a2[36];
  v44 = a2[37];
  v45 = a2[38];
  v46 = a2[39];
  v47 = a2[40];
  v48 = a2[41];
  v49 = a2[42];
  v50 = a2[43];
  v51 = a2[44];
  v52 = a2[45];
  v53 = a2[46];
  v54 = a2[47];
  v55 = a2[48];
  outlined copy of NavigationState.Base(*a2, v76, v74, v73, v72, v71, v70, v69, v68, v67, v66, v65, v64, v63, v62, v61, v60, v59, v58,
    v57,
    v56,
    v3,
    v4,
    v5,
    v6,
    v7,
    v37,
    v8,
    v10,
    v9,
    v11,
    v38,
    v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v75;
  *(_QWORD *)(a1 + 8) = v76;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v74;
  *(_QWORD *)(a1 + 24) = v73;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v72;
  *(_QWORD *)(a1 + 40) = v71;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v70;
  *(_QWORD *)(a1 + 56) = v69;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v68;
  *(_QWORD *)(a1 + 72) = v67;
  *(_QWORD *)(a1 + 80) = v66;
  *(_QWORD *)(a1 + 88) = v65;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v64;
  *(_QWORD *)(a1 + 104) = v63;
  *(_QWORD *)(a1 + 112) = v62;
  *(_QWORD *)(a1 + 120) = v61;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v60;
  *(_QWORD *)(a1 + 136) = v59;
  *(_QWORD *)(a1 + 144) = v58;
  *(_QWORD *)(a1 + 152) = v57;
  v26 = *(_OWORD *)(a1 + 160);
  v27 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 160) = v56;
  *(_QWORD *)(a1 + 168) = v3;
  *(_QWORD *)(a1 + 176) = v4;
  *(_QWORD *)(a1 + 184) = v5;
  v28 = *(_OWORD *)(a1 + 192);
  v29 = *(_OWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 192) = v6;
  *(_QWORD *)(a1 + 200) = v7;
  *(_QWORD *)(a1 + 208) = v37;
  *(_QWORD *)(a1 + 216) = v8;
  v30 = *(_OWORD *)(a1 + 224);
  v31 = *(_OWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 224) = v10;
  *(_QWORD *)(a1 + 232) = v9;
  *(_QWORD *)(a1 + 240) = v11;
  *(_QWORD *)(a1 + 248) = v38;
  v32 = *(_OWORD *)(a1 + 256);
  v33 = *(_OWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 256) = v39;
  *(_QWORD *)(a1 + 264) = v40;
  *(_QWORD *)(a1 + 272) = v41;
  *(_QWORD *)(a1 + 280) = v42;
  v34 = *(_OWORD *)(a1 + 288);
  v35 = *(_OWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 288) = v43;
  *(_QWORD *)(a1 + 296) = v44;
  *(_QWORD *)(a1 + 304) = v45;
  *(_QWORD *)(a1 + 312) = v46;
  *(_QWORD *)(a1 + 320) = v47;
  *(_QWORD *)(a1 + 328) = v48;
  *(_QWORD *)(a1 + 336) = v49;
  *(_QWORD *)(a1 + 344) = v50;
  *(_QWORD *)(a1 + 352) = v51;
  *(_QWORD *)(a1 + 360) = v52;
  *(_QWORD *)(a1 + 368) = v53;
  *(_QWORD *)(a1 + 376) = v54;
  *(_QWORD *)(a1 + 384) = v55;
  outlined consume of NavigationState.Base(v12, v13, v14, v15, v16, v17, v18, v19, v20, WORD4(v20), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v34,
    *((unint64_t *)&v34 + 1),
    v35);
  return a1;
}

uint64_t assignWithTake for NavigationState.StackContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v4 = *(_QWORD *)(a2 + 384);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = *(_OWORD *)(a1 + 112);
  v17 = *(_OWORD *)(a1 + 128);
  v18 = *(_OWORD *)(a1 + 144);
  v19 = *(_OWORD *)(a1 + 160);
  v20 = *(_OWORD *)(a1 + 176);
  v21 = *(_OWORD *)(a1 + 192);
  v22 = *(_OWORD *)(a1 + 208);
  v23 = *(_OWORD *)(a1 + 224);
  v24 = *(_OWORD *)(a1 + 240);
  v25 = *(_OWORD *)(a1 + 256);
  v26 = *(_OWORD *)(a1 + 272);
  v27 = *(_OWORD *)(a1 + 288);
  v28 = *(_OWORD *)(a1 + 304);
  v29 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v29;
  v30 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v30;
  v31 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v31;
  v32 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v32;
  v33 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v33;
  v34 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v34;
  v35 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v35;
  v36 = *(_OWORD *)(a2 + 240);
  v37 = *(_OWORD *)(a2 + 256);
  v38 = *(_OWORD *)(a2 + 272);
  v39 = *(_OWORD *)(a2 + 288);
  v40 = *(_OWORD *)(a2 + 304);
  v41 = *(_OWORD *)(a2 + 320);
  v42 = *(_OWORD *)(a2 + 336);
  v43 = *(_OWORD *)(a2 + 352);
  v44 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v36;
  *(_OWORD *)(a1 + 256) = v37;
  *(_OWORD *)(a1 + 272) = v38;
  *(_OWORD *)(a1 + 288) = v39;
  *(_OWORD *)(a1 + 304) = v40;
  *(_OWORD *)(a1 + 320) = v41;
  *(_OWORD *)(a1 + 336) = v42;
  *(_OWORD *)(a1 + 352) = v43;
  *(_OWORD *)(a1 + 368) = v44;
  *(_QWORD *)(a1 + 384) = v4;
  outlined consume of NavigationState.Base(v5, v6, v7, v8, v9, v10, v11, v12, v13, WORD4(v13), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((unint64_t *)&v27 + 1),
    v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationState.StackContent(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 392))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)(a1 + 168) >> 57) & 0x38 | *(_QWORD *)(a1 + 168) & 7 | (*(_QWORD *)(a1 + 248) >> 51) & 0x1E00 | ((*(_QWORD *)(a1 + 248) & 7) << 6) & 0x1FFF | (*(_DWORD *)(a1 + 264) >> 3 << 13);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for NavigationState.StackContent(uint64_t a1, int a2, int a3)
{
  double result;
  unint64_t v4;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 392) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      v4 = -a2;
      result = 0.0;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 160) = 0;
      *(_QWORD *)(a1 + 168) = (v4 | (v4 << 57)) & 0x7000000000000007;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      *(_OWORD *)(a1 + 208) = 0u;
      *(_OWORD *)(a1 + 224) = 0u;
      *(_QWORD *)(a1 + 240) = 0;
      *(_QWORD *)(a1 + 248) = ((v4 >> 6) | (v4 << 51)) & 0xF000000000000007;
      *(_QWORD *)(a1 + 256) = 0;
      *(_QWORD *)(a1 + 264) = (v4 >> 10) & 0x3FFFF8;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_OWORD *)(a1 + 304) = 0u;
      *(_OWORD *)(a1 + 320) = 0u;
      *(_OWORD *)(a1 + 336) = 0u;
      *(_OWORD *)(a1 + 352) = 0u;
      *(_OWORD *)(a1 + 368) = 0u;
      *(_QWORD *)(a1 + 384) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 392) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationState.StackContent.Views()
{
  return &type metadata for NavigationState.StackContent.Views;
}

uint64_t getEnumTagSinglePayload for NavigationState.StackContent.Views.ViewsSequence.Index(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationState.StackContent.Views.ViewsSequence.Index(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

void type metadata accessor for NavigationState.StackContent.Views.ViewsSequence.Index()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t View.accessibilityLabel(_:isEnabled:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v16;
  char v17;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v14 + 32) = a1;
  *(_QWORD *)(v14 + 40) = a2;
  *(_BYTE *)(v14 + 48) = a3 & 1;
  *(_QWORD *)(v14 + 56) = a4;
  v16 = v14;
  v17 = 2;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE5888], (uint64_t)&v16, a5, a6, MEMORY[0x1E0CE5888], a7);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityLabel(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return View.accessibilityValue(_:isEnabled:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t))View.accessibilityLabel(_:isEnabled:));
}

uint64_t View.accessibilityLabel<A>(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibilityValue<A>(_:isEnabled:)(a1, a2, a3, a4, a5, a6, (void (*)(void))View.accessibilityLabel(_:isEnabled:));
}

uint64_t ModifiedContent<>.accessibilityLabel(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v16;
  char v17;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v14 + 32) = a1;
  *(_QWORD *)(v14 + 40) = a2;
  *(_BYTE *)(v14 + 48) = a3 & 1;
  *(_QWORD *)(v14 + 56) = a4;
  v16 = v14;
  v17 = 2;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E0CE5888], (uint64_t)&v16, a5, a6, a7);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityLabel(_:isEnabled:)@<X0>(char a1@<W4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = Text.init(_:tableName:bundle:comment:)();
  v8 = v7;
  v10 = v9 & 1;
  ModifiedContent<>.accessibilityLabel(_:isEnabled:)(v6, v7, v9 & 1, v11, a1, a2, a3);
  outlined consume of Text.Storage(v6, v8, v10);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityLabel<A>(_:isEnabled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v17;

  v7 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v9 + 16))((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v10 = Text.init<A>(_:)();
  v12 = v11;
  v14 = v13 & 1;
  ModifiedContent<>.accessibilityLabel(_:isEnabled:)(v10, v11, v13 & 1, v15, a2, a3, a4);
  outlined consume of Text.Storage(v10, v12, v14);
  return swift_bridgeObjectRelease();
}

void View.accessibilityLabel<A>(content:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for AccessibilityCustomPropertyModifier();
}

uint64_t sub_186FBB080(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(double);
  uint64_t v6;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v8 = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v13 - v10;
  v5(v9);
  AccessibilityCustomPropertyModifier.init(result:)(v6, v4, (uint64_t)v11);
  MEMORY[0x18D75B4AC](v11, v3, a1, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, a1);
}

uint64_t TabContent.accessibilityLabel(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  char v20;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v16 + 32) = a1;
  *(_QWORD *)(v16 + 40) = a2;
  *(_BYTE *)(v16 + 48) = a3 & 1;
  *(_QWORD *)(v16 + 56) = a4;
  v19 = v16;
  v20 = 2;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  v17 = lazy protocol witness table accessor for type AccessibilityLabelStorage? and conformance <A> A?();
  swift_bridgeObjectRetain();
  TabContent.accessibility<A>(_:_:isEnabled:)((uint64_t)&v19, a5, a6, MEMORY[0x1E0CE5888], a7, MEMORY[0x1E0CE5878], v17, a8);
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type AccessibilityLabelStorage? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type AccessibilityLabelStorage? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AccessibilityLabelStorage? and conformance <A> A?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E0CE5DB8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = MEMORY[0x1E0CE5DB0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLabelStorage? and conformance <A> A?);
  }
  return result;
}

uint64_t TabContent.accessibilityLabel(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return View.accessibilityValue(_:isEnabled:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t))TabContent.accessibilityLabel(_:isEnabled:));
}

uint64_t TabContent.accessibilityLabel<A>(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibilityValue<A>(_:isEnabled:)(a1, a2, a3, a4, a5, a6, (void (*)(void))TabContent.accessibilityLabel(_:isEnabled:));
}

uint64_t ModifiedContent<>.accessibilityLabel(_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = Text.init(_:tableName:bundle:comment:)();
  v6 = v5;
  v8 = v7 & 1;
  ModifiedContent<>.accessibilityLabel(_:)(v4, v5, v7 & 1, v9, a1, a2);
  outlined consume of Text.Storage(v4, v6, v8);
  return swift_bridgeObjectRelease();
}

void sub_186FBB380()
{
  type metadata accessor for AccessibilityCustomPropertyModifier();
}

uint64_t sub_186FBB3C0()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD v3[10];

  v0 = type metadata accessor for ModifiedContent();
  v3[0] = v2;
  v3[1] = &protocol witness table for AccessibilityCustomPropertyModifier<A, B, C>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v3);
}

uint64_t sub_186FBB408(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for AccessibilityDetachedPropertyModifier<AccessibilityProperties.LabelKey>(255);
  v5 = type metadata accessor for ModifiedTabContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for AccessibilityDetachedPropertyModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, v5, v7);
}

void type metadata accessor for AccessibilityDetachedPropertyModifier<AccessibilityProperties.LabelKey>(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!lazy cache variable for type metadata for AccessibilityDetachedPropertyModifier<AccessibilityProperties.LabelKey>)
  {
    v2 = lazy protocol witness table accessor for type AccessibilityLabelStorage? and conformance <A> A?();
    v3 = type metadata accessor for AccessibilityDetachedPropertyModifier(a1, MEMORY[0x1E0CE5888], MEMORY[0x1E0CE5878], v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDetachedPropertyModifier<AccessibilityProperties.LabelKey>);
  }
}

uint64_t sub_186FBB4C4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[2];
  type metadata accessor for AccessibilityDetachedPropertyModifier<AccessibilityProperties.LabelKey>(255);
  v5 = type metadata accessor for ModifiedTabContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for AccessibilityDetachedPropertyModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, v5, v7);
}

uint64_t closure #1 in View.accessibilityLabel<A>(_:label:)(uint64_t a1, char a2)
{
  void *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char v14;

  v5 = *(_QWORD *)a1;
  v4 = *(void **)(a1 + 8);
  if (!*(_BYTE *)(a1 + 16))
  {
    v11 = *(_QWORD *)a1;
    v12 = v4;
    AccessibilityAttachment.mergedProperties.getter(&v13);
    outlined consume of AccessibilityAttachment.Tree(v5, v4, 0);
    if (v13)
      goto LABEL_4;
LABEL_7:
    a2 = 0;
    v8 = 0;
    goto LABEL_8;
  }
  if (*(_BYTE *)(a1 + 16) != 1)
    goto LABEL_7;
  v6 = specialized Sequence.compactMap<A>(_:)(*(_QWORD *)a1);
  static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)((uint64_t)v6, 1, &v11);
  swift_bridgeObjectRelease();
  outlined consume of AccessibilityAttachment.Tree(v5, v4, 1);
  if (!v11)
    goto LABEL_7;
LABEL_4:
  v7 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v7, (uint64_t)&v13);
  swift_bridgeObjectRelease_n();
  v8 = v13;
  if (!v13)
    a2 = v14;
LABEL_8:
  AccessibilityAttachment.init()();
  result = specialized AccessibilityProperties.subscript.setter(v8, a2);
  v10 = v12;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

Swift::Int specialized static Set.== infix(_:_:)(Swift::Int result, uint64_t a2)
{
  Swift::Int v3;
  int64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  Swift::UInt v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_23;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    }
    if (v13 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (v14)
      goto LABEL_22;
    v4 = v13 + 1;
    if (v13 + 1 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_22;
    v4 = v13 + 2;
    if (v13 + 2 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_22;
    v15 = v13 + 3;
    if (v15 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v4 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_33;
        if (v4 >= v9)
          return 1;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        ++v15;
        if (v14)
          goto LABEL_22;
      }
    }
    v4 = v15;
LABEL_22:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_23:
    v16 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v12);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v16);
    result = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = result & ~v17;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    v19 = *(_QWORD *)(a2 + 48);
  }
  while (*(_QWORD *)(v19 + 8 * v18) == v16);
  v20 = ~v17;
  while (1)
  {
    v18 = (v18 + 1) & v20;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    if (*(_QWORD *)(v19 + 8 * v18) == v16)
      goto LABEL_7;
  }
}

{
  Swift::Int v3;
  int64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  Swift::UInt *v15;
  Swift::UInt v16;
  Swift::UInt v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v23;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v23 = (unint64_t)(v6 + 63) >> 6;
  v9 = a2 + 56;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_25;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v12 >= v23)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v23)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v23)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v23)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_24:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_25:
    v15 = (Swift::UInt *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v16);
    Hasher._combine(_:)(v17);
    result = Hasher._finalize()();
    v18 = -1 << *(_BYTE *)(a2 + 32);
    v19 = result & ~v18;
    if (((*(_QWORD *)(v9 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
      return 0;
    v20 = ~v18;
    while (1)
    {
      v21 = (_QWORD *)(*(_QWORD *)(a2 + 48) + 16 * v19);
      if (v21[1] == v17 && *v21 == v16)
        break;
      v19 = (v19 + 1) & v20;
      if (((*(_QWORD *)(v9 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
        return 0;
    }
  }
  v14 = v12 + 4;
  if (v14 >= v23)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v23)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_24;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v15;
  _BYTE v16[72];

  if (a1 != a2)
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
    v3 = 1 << *(_BYTE *)(a1 + 32);
    if (v3 < 64)
      v4 = ~(-1 << v3);
    else
      v4 = -1;
    v5 = v4 & *(_QWORD *)(a1 + 56);
    v15 = (unint64_t)(v3 + 63) >> 6;
    if (v5)
    {
      v6 = __clz(__rbit64(v5));
      goto LABEL_23;
    }
    if ((unint64_t)(v3 + 63) >> 6 > 1)
    {
      v7 = *(_QWORD *)(a1 + 64);
      v8 = 1;
      if (v7)
        goto LABEL_22;
      v8 = 2;
      if (v15 <= 2)
        return 1;
      v7 = *(_QWORD *)(a1 + 72);
      if (v7)
        goto LABEL_22;
      v8 = 3;
      if (v15 <= 3)
        return 1;
      v7 = *(_QWORD *)(a1 + 80);
      if (v7)
        goto LABEL_22;
      v8 = 4;
      if (v15 <= 4)
        return 1;
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
      {
LABEL_22:
        v6 = __clz(__rbit64(v7)) + (v8 << 6);
LABEL_23:
        v10 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)();
        PresentationDetent.Identifier.hash(into:)((uint64_t)v16, v11, v12);
        v13 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
        if (((*(_QWORD *)(a2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
          __asm { BR              X1 }
        return 0;
      }
      v9 = 5;
      if (v15 > 5)
      {
        v7 = *(_QWORD *)(a1 + 96);
        if (v7)
        {
          v8 = 5;
          goto LABEL_22;
        }
        while (1)
        {
          v8 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            JUMPOUT(0x186FBC00CLL);
          }
          if (v8 >= v15)
            break;
          v7 = *(_QWORD *)(a1 + 56 + 8 * v8);
          ++v9;
          if (v7)
            goto LABEL_22;
        }
      }
    }
  }
  return 1;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v30;
  int64_t v31;
  int64_t v32;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v30 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v31 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v32 = v3;
      v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v31)
      return 1;
    v11 = *(_QWORD *)(v30 + 8 * v10);
    v12 = v3 + 1;
    if (v11)
      goto LABEL_25;
    v12 = v3 + 2;
    if (v3 + 2 >= v31)
      return 1;
    v11 = *(_QWORD *)(v30 + 8 * v12);
    if (v11)
      goto LABEL_25;
    v12 = v3 + 3;
    if (v3 + 3 >= v31)
      return 1;
    v11 = *(_QWORD *)(v30 + 8 * v12);
    if (v11)
      goto LABEL_25;
    v12 = v3 + 4;
    if (v3 + 4 >= v31)
      return 1;
    v11 = *(_QWORD *)(v30 + 8 * v12);
    if (v11)
      goto LABEL_25;
    v13 = v3 + 5;
    if (v3 + 5 >= v31)
      return 1;
    v11 = *(_QWORD *)(v30 + 8 * v13);
    if (!v11)
    {
      while (1)
      {
        v12 = v13 + 1;
        if (__OFADD__(v13, 1))
          break;
        if (v12 >= v31)
          return 1;
        v11 = *(_QWORD *)(v30 + 8 * v12);
        ++v13;
        if (v11)
          goto LABEL_25;
      }
LABEL_45:
      __break(1u);
      JUMPOUT(0x186FBC2BCLL);
    }
    v12 = v3 + 5;
LABEL_25:
    v6 = (v11 - 1) & v11;
    v32 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    v14 = a1;
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v17 = *v15;
    v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v18 = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_41;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = (_QWORD *)(v21 + 16 * v20);
    v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      break;
LABEL_7:
    swift_bridgeObjectRelease();
    a1 = v14;
    v3 = v32;
  }
  v24 = ~v19;
  for (i = v20 + 1; ; i = v26 + 1)
  {
    v26 = i & v24;
    if (((*(_QWORD *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
      break;
    v27 = (_QWORD *)(v21 + 16 * v26);
    v28 = *v27 == v17 && v27[1] == v16;
    if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_7;
  }
LABEL_41:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t ResolvedNavigationDestinations.updatePossibilities(for:over:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  char v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v8 = v5;
  v9 = v4;
  v10 = a2;
  v11 = a1;
  if (!a3)
  {
    v13 = ResolvedNavigationDestinations.ejectDestinations(at:)(a2);
    if (v13)
    {
      v14 = specialized Set.init<A>(_:)(v13);
      swift_bridgeObjectRelease();
    }
    else
    {
      v14 = MEMORY[0x1E0DEE9E8];
    }
    v11 = ResolvedNavigationDestinations.setPossibilities(_:depth:)(v11, v10);
    v4 = specialized static Set.== infix(_:_:)(v14, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!__OFADD__(v10, 1))
    {
      LODWORD(v12) = (v4 & 1) == 0;
      if (v10 + 1 == *(_QWORD *)(v9 + 24))
        goto LABEL_20;
      goto LABEL_95;
    }
    __break(1u);
    goto LABEL_99;
  }
  if (a3 == 1)
  {
    LODWORD(v12) = ResolvedNavigationDestinations.popDestinationStack(_:)(a1) & 1;
    goto LABEL_20;
  }
  if (!(a1 | a2))
  {
    v24 = *(_QWORD *)(v4 + 24);
    v22 = __OFADD__(v24, 1);
    v25 = v24 + 1;
    if (v22)
    {
LABEL_100:
      __break(1u);
      goto LABEL_101;
    }
    *(_QWORD *)(v4 + 24) = v25;
    if (*(unsigned __int8 *)(v4 + 72) > 1u)
    {
      LODWORD(v12) = 0;
      v23 = 0;
      return v23 | v12;
    }
    v11 = *(_QWORD *)a4;
    v26 = *(_QWORD *)(a4 + 8);
    v18 = *(_QWORD *)(a4 + 16);
    v4 = *(_QWORD *)(a4 + 32);
    v27 = *(_QWORD *)a4 >> 62;
    LODWORD(v62) = *(unsigned __int8 *)(a4 + 24);
    v61 = v27;
    if ((v62 & 1) == 0)
    {
      if (v27)
        goto LABEL_125;
      v31 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      outlined copy of NavigationPath.Representation(v11, v26, v18, 0);
      swift_bridgeObjectRetain();
      if (v4 >> 62)
        goto LABEL_126;
      goto LABEL_62;
    }
    v60 = *(_QWORD *)(a4 + 32);
    if (v27)
      goto LABEL_113;
    v28 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    outlined copy of NavigationPath.Representation(v11, v26, v18, 1);
    swift_bridgeObjectRetain();
    outlined copy of NavigationPath.Representation(v11, v26, v18, 1);
    while (1)
    {
      v29 = *(_QWORD *)(v26 + 16);
      v4 = v28 + v29;
      if (__OFADD__(v28, v29))
      {
        __break(1u);
      }
      else if (!(v18 >> 62))
      {
        v30 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_29;
      }
      swift_bridgeObjectRetain();
      v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_29:
      outlined consume of NavigationPath.Representation(v11, v26, v18, 1);
      v22 = __OFADD__(v4, v30);
      v31 = v4 + v30;
      if (!v22)
      {
        v4 = v60;
        if (!(v60 >> 62))
          goto LABEL_62;
        goto LABEL_126;
      }
      __break(1u);
LABEL_117:
      v36 = v62;
      outlined copy of NavigationPath.Representation(v6, v62, v11, 1);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v6, v62, v11, 1);
      swift_bridgeObjectRetain();
      v35 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_42:
      v37 = *(_QWORD *)(v36 + 16);
      v38 = v35 + v37;
      if (__OFADD__(v35, v37))
      {
        __break(1u);
      }
      else if (!(v11 >> 62))
      {
        v39 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_45;
      }
      swift_bridgeObjectRetain();
      v39 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_45:
      v7 = v62;
      outlined consume of NavigationPath.Representation(v6, v62, v11, 1);
      outlined consume of NavigationPath.Representation(v6, v62, v11, 1);
      v32 = swift_bridgeObjectRelease();
      v22 = __OFADD__(v38, v39);
      v40 = v38 + v39;
      if (!v22)
      {
        v18 = v59;
        v22 = __OFADD__(v40, v59);
        v26 = v40 + v59;
        if (!v22)
          goto LABEL_81;
        goto LABEL_77;
      }
      __break(1u);
LABEL_121:
      v42 = v62;
      outlined copy of NavigationPath.Representation(v6, v62, v11, 1);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v6, v62, v11, 1);
      swift_bridgeObjectRetain();
      v41 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_53:
      v43 = *(_QWORD *)(v42 + 16);
      v18 = v41 + v43;
      if (__OFADD__(v41, v43))
      {
        __break(1u);
      }
      else if (!(v11 >> 62))
      {
        v44 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_56;
      }
      swift_bridgeObjectRetain();
      v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_56:
      v7 = v62;
      outlined consume of NavigationPath.Representation(v6, v62, v11, 1);
      outlined consume of NavigationPath.Representation(v6, v62, v11, 1);
      v32 = swift_bridgeObjectRelease();
      v22 = __OFADD__(v18, v44);
      v26 = v18 + v44;
      if (!v22)
      {
        v18 = v59;
        v45 = v26 + v59;
        if (!__OFADD__(v26, v59))
          goto LABEL_80;
        goto LABEL_136;
      }
      __break(1u);
LABEL_125:
      outlined copy of NavigationPath.Representation(v11, v26, v18, 0);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v11, v26, v18, 0);
      v31 = _CocoaArrayWrapper.endIndex.getter();
      outlined consume of NavigationPath.Representation(v11, v26, v18, 0);
      if (!(v4 >> 62))
      {
LABEL_62:
        v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_63;
      }
LABEL_126:
      swift_bridgeObjectRetain();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_63:
      outlined consume of NavigationPath.Representation(v11, v26, v18, v62);
      swift_bridgeObjectRelease();
      v46 = v31 + v6;
      if (__OFADD__(v31, v6))
      {
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
        goto LABEL_112;
      }
      v32 = v46 - 1;
      if (__OFSUB__(v46, 1))
        goto LABEL_110;
      v7 = v6;
      if ((v62 & 1) != 0)
      {
        v62 = v46 - 1;
        v59 = v6;
        if (v61)
        {
          outlined copy of NavigationPath.Representation(v11, v26, v18, 1);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v11, v26, v18, 1);
          swift_bridgeObjectRetain();
          v47 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v47 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
          outlined copy of NavigationPath.Representation(v11, v26, v18, 1);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v11, v26, v18, 1);
        }
        v48 = *(_QWORD *)(v26 + 16);
        v49 = v47 + v48;
        if (__OFADD__(v47, v48))
        {
          __break(1u);
        }
        else if (!(v18 >> 62))
        {
          v50 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_71;
        }
        swift_bridgeObjectRetain();
        v50 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
LABEL_71:
        outlined consume of NavigationPath.Representation(v11, v26, v18, 1);
        outlined consume of NavigationPath.Representation(v11, v26, v18, 1);
        swift_bridgeObjectRelease();
        v22 = __OFADD__(v49, v50);
        v6 = v49 + v50;
        if (!v22)
        {
          v7 = v59;
          goto LABEL_73;
        }
        __break(1u);
LABEL_131:
        v7 = v62;
        outlined copy of NavigationPath.Representation(v6, v62, v11, 0);
        swift_bridgeObjectRetain();
        outlined copy of NavigationPath.Representation(v6, v62, v11, 0);
        v58 = _CocoaArrayWrapper.endIndex.getter();
        outlined consume of NavigationPath.Representation(v6, v62, v11, 0);
        outlined consume of NavigationPath.Representation(v6, v62, v11, 0);
        v32 = swift_bridgeObjectRelease();
        v22 = __OFADD__(v58, v18);
        v26 = v58 + v18;
        if (!v22)
          goto LABEL_81;
LABEL_77:
        __break(1u);
LABEL_78:
        if (v6 >> 62)
        {
          v7 = v62;
          outlined copy of NavigationPath.Representation(v6, v62, v11, 0);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v6, v62, v11, 0);
          v26 = _CocoaArrayWrapper.endIndex.getter();
          outlined consume of NavigationPath.Representation(v6, v62, v11, 0);
          outlined consume of NavigationPath.Representation(v6, v62, v11, 0);
          v32 = swift_bridgeObjectRelease();
          v45 = v26 + v18;
          if (!__OFADD__(v26, v18))
          {
LABEL_80:
            v26 = v45 - 1;
            if (!__OFSUB__(v45, 1))
              goto LABEL_81;
            goto LABEL_111;
          }
        }
        else
        {
          v26 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v45 = v26 + v18;
          if (!__OFADD__(v26, v18))
            goto LABEL_80;
        }
LABEL_136:
        __break(1u);
LABEL_137:
        v62 = v32;
        outlined copy of NavigationPath.Representation(v11, v26, v18, 0);
        swift_bridgeObjectRetain();
        outlined copy of NavigationPath.Representation(v11, v26, v18, 0);
        v6 = _CocoaArrayWrapper.endIndex.getter();
        outlined consume of NavigationPath.Representation(v11, v26, v18, 0);
        outlined consume of NavigationPath.Representation(v11, v26, v18, 0);
        swift_bridgeObjectRelease();
LABEL_73:
        v32 = v62;
        goto LABEL_87;
      }
      if (v61)
        goto LABEL_137;
      v6 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_87:
      if (!__OFADD__(v6, v7))
      {
        result = NavigationPath.updatePossibilities(from:to:into:)(v32, v6 + v7, v9);
        if (!v8)
        {
          v54 = *(_QWORD *)(v9 + 24);
          result = v54 - 1;
          if (!__OFSUB__(v54, 1))
          {
            v55 = *(_QWORD *)(v9 + 16);
            LODWORD(v12) = *(_QWORD *)(v55 + 16)
                        && (v56 = specialized __RawDictionaryStorage.find<A>(_:)(result), (v57 & 1) != 0)
                        && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v55 + 56) + 8 * v56) + 16);
            goto LABEL_95;
          }
          __break(1u);
        }
        return result;
      }
LABEL_112:
      __break(1u);
LABEL_113:
      outlined copy of NavigationPath.Representation(v11, v26, v18, 1);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v11, v26, v18, 1);
      swift_bridgeObjectRetain();
      v28 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
  }
  v12 = a1 ^ 1 | a2;
  if (!v12)
    goto LABEL_20;
  v16 = *(_QWORD *)(v4 + 24);
  v17 = v16 - 1;
  if (__OFSUB__(v16, 1))
  {
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  v61 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRetain();
  ResolvedNavigationDestinations.popDestinationStack(_:)(v17);
  v6 = *(_QWORD *)a4;
  v18 = *(_QWORD *)(a4 + 8);
  v11 = *(_QWORD *)(a4 + 16);
  LOBYTE(v10) = *(_BYTE *)(a4 + 24);
  v4 = *(_QWORD *)(a4 + 32);
  if ((v10 & 1) == 0)
  {
    if (v6 >> 62)
      goto LABEL_108;
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    outlined copy of NavigationPath.Representation(*(_QWORD *)a4, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), 0);
    swift_bridgeObjectRetain();
    goto LABEL_34;
  }
  v60 = *(_QWORD *)(a4 + 32);
  if (v6 >> 62)
    goto LABEL_104;
  v19 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  outlined copy of NavigationPath.Representation(v6, v18, v11, 1);
  swift_bridgeObjectRetain();
  outlined copy of NavigationPath.Representation(v6, v18, v11, 1);
  while (1)
  {
    v20 = *(_QWORD *)(v18 + 16);
    v4 = v19 + v20;
    if (__OFADD__(v19, v20))
    {
      __break(1u);
    }
    else if (!(v11 >> 62))
    {
      v21 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_15;
    }
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_15:
    outlined consume of NavigationPath.Representation(v6, v18, v11, 1);
    v22 = __OFADD__(v4, v21);
    v7 = v4 + v21;
    if (v22)
    {
      __break(1u);
LABEL_108:
      outlined copy of NavigationPath.Representation(v6, v18, v11, 0);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v6, v18, v11, 0);
      v7 = _CocoaArrayWrapper.endIndex.getter();
      outlined consume of NavigationPath.Representation(v6, v18, v11, 0);
    }
    else
    {
      v4 = v60;
    }
LABEL_34:
    v62 = v18;
    if (v4 >> 62)
    {
LABEL_101:
      swift_bridgeObjectRetain();
      v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    outlined consume of NavigationPath.Representation(v6, v62, v11, v10);
    v32 = swift_bridgeObjectRelease();
    v33 = v7 + v18;
    if (__OFADD__(v7, v18))
    {
      __break(1u);
      goto LABEL_103;
    }
    v22 = __OFADD__(v33, 1);
    v34 = v33 + 1;
    if (!v22)
      break;
LABEL_103:
    __break(1u);
LABEL_104:
    outlined copy of NavigationPath.Representation(v6, v18, v11, 1);
    swift_bridgeObjectRetain();
    outlined copy of NavigationPath.Representation(v6, v18, v11, 1);
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v9 + 24) = v34;
  if (*(unsigned __int8 *)(v9 + 72) > 1u)
  {
    if ((v10 & 1) == 0)
      goto LABEL_78;
    v59 = v18;
    if (v6 >> 62)
      goto LABEL_121;
    v41 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v42 = v62;
    outlined copy of NavigationPath.Representation(v6, v62, v11, 1);
    swift_bridgeObjectRetain();
    outlined copy of NavigationPath.Representation(v6, v62, v11, 1);
    goto LABEL_53;
  }
  if ((v10 & 1) != 0)
  {
    v59 = v18;
    if (v6 >> 62)
      goto LABEL_117;
    v35 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v36 = v62;
    outlined copy of NavigationPath.Representation(v6, v62, v11, 1);
    swift_bridgeObjectRetain();
    outlined copy of NavigationPath.Representation(v6, v62, v11, 1);
    goto LABEL_42;
  }
  if (v6 >> 62)
    goto LABEL_131;
  v51 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v22 = __OFADD__(v51, v18);
  v26 = v51 + v18;
  if (v22)
    goto LABEL_77;
LABEL_81:
  NavigationPath.updatePossibilities(from:to:into:)(0, v26 & ~(v26 >> 63), v9);
  if (v8)
    return swift_bridgeObjectRelease();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v53 = ResolvedNavigationDestinations.domainDiffers(from:)(v61);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LODWORD(v12) = v53 & 1;
  if (v26 <= 0)
  {
LABEL_20:
    v23 = 0;
    return v23 | v12;
  }
LABEL_95:
  v23 = 0x100000000;
  return v23 | v12;
}

uint64_t ResolvedNavigationDestinations.ejectDestinations(at:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v48;

  v2 = v1;
  v3 = v1[2];
  if (!*(_QWORD *)(v3 + 16))
    return 0;
  v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v6 & 1) == 0)
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v5);
  swift_bridgeObjectRetain_n();
  specialized Dictionary._Variant.removeValue(forKey:)(a1);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    goto LABEL_34;
  swift_bridgeObjectRetain();
  for (i = 0; i != v8; ++i)
  {
    v10 = *(_QWORD *)(v7 + 8 * i + 32);
    if (a1 == -1)
    {
      v24 = v2[1];
      if (*(_QWORD *)(v24 + 16))
      {
        v25 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v7 + 8 * i + 32));
        if ((v26 & 1) != 0)
        {
          v27 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v24 + 56) + 8 * v25) + 96);
          v28 = swift_retain();
          v29 = v27(v28);
          v31 = v30;
          swift_release();
          if (v31)
          {
            swift_bridgeObjectRetain();
            v32 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v31);
            v34 = v33;
            swift_bridgeObjectRelease();
            if ((v34 & 1) != 0)
            {
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v36 = v2[4];
              v2[4] = 0x8000000000000000;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                specialized _NativeDictionary.copy()();
              swift_bridgeObjectRelease();
              specialized _NativeDictionary._delete(at:)(v32, v36);
              v2[4] = v36;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
        }
      }
      v42 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
      if ((v43 & 1) != 0)
      {
        v44 = v42;
        v45 = swift_isUniquelyReferenced_nonNull_native();
        v46 = v2[1];
        v2[1] = 0x8000000000000000;
        if (!v45)
          specialized _NativeDictionary.copy()();
        specialized _NativeDictionary._delete(at:)(v44, v46);
        v2[1] = v46;
        goto LABEL_6;
      }
    }
    else
    {
      v11 = *v2;
      if (*(_QWORD *)(*v2 + 16))
      {
        v12 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v7 + 8 * i + 32));
        if ((v13 & 1) != 0)
        {
          v14 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v11 + 56) + 8 * v12) + 96);
          v15 = swift_retain();
          v16 = v14(v15);
          v18 = v17;
          swift_release();
          if (v18)
          {
            swift_bridgeObjectRetain();
            v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v18);
            v21 = v20;
            swift_bridgeObjectRelease();
            if ((v21 & 1) != 0)
            {
              v22 = swift_isUniquelyReferenced_nonNull_native();
              v23 = v2[4];
              v2[4] = 0x8000000000000000;
              if ((v22 & 1) == 0)
                specialized _NativeDictionary.copy()();
              swift_bridgeObjectRelease();
              specialized _NativeDictionary._delete(at:)(v19, v23);
              v2[4] = v23;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
        }
      }
      v37 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
      if ((v38 & 1) != 0)
      {
        v39 = v37;
        v40 = swift_isUniquelyReferenced_nonNull_native();
        v41 = *v2;
        v48 = *v2;
        *v2 = 0x8000000000000000;
        if (!v40)
        {
          specialized _NativeDictionary.copy()();
          v41 = v48;
        }
        specialized _NativeDictionary._delete(at:)(v39, v41);
        *v2 = v41;
LABEL_6:
        swift_release();
        swift_bridgeObjectRelease();
        continue;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_34:
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t ResolvedNavigationDestinations.setPossibilities(_:depth:)(unint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  char v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v76;
  uint64_t result;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;

  v3 = v2;
  v5 = a1;
  if (a1 >> 62)
  {
LABEL_66:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6)
      goto LABEL_3;
LABEL_67:
    v7 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_68:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v87 = v3[2];
    v3[2] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v7, a2, isUniquelyReferenced_nonNull_native);
    v3[2] = v87;
    swift_bridgeObjectRelease();
    v76 = specialized Set.init<A>(_:)((uint64_t)v7);
    swift_bridgeObjectRelease();
    return v76;
  }
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_67;
LABEL_3:
  v83 = v5 & 0xC000000000000001;
  v7 = (char *)MEMORY[0x1E0DEE9D8];
  v8 = 4;
  v79 = v5;
  v80 = a2;
  v81 = v6;
  v78 = v3;
  while (1)
  {
    v9 = v8 - 4;
    if (v83)
    {
      v10 = MEMORY[0x18D75E3BC](v8 - 4, v5);
      v11 = v8 - 3;
      if (__OFADD__(v9, 1))
        goto LABEL_59;
    }
    else
    {
      v10 = *(_QWORD *)(v5 + 8 * v8);
      swift_retain();
      v11 = v8 - 3;
      if (__OFADD__(v9, 1))
      {
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
    }
    v84 = v11;
    v85 = v8;
    v12 = (*(uint64_t (**)(void))(*(_QWORD *)v10 + 80))();
    v13 = v12;
    if (a2 != -1)
    {
      if (*(_QWORD *)(*v3 + 16))
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v12);
        if ((v14 & 1) != 0)
        {
          _StringGuts.grow(_:)(153);
          v15._countAndFlagsBits = 0x100000000000001FLL;
          v15._object = (void *)0x8000000187BD46D0;
          String.append(_:)(v15);
          v16._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)v10 + 88))();
          String.append(_:)(v16);
          swift_bridgeObjectRelease();
          v17._countAndFlagsBits = 0x1000000000000078;
          v17._object = (void *)0x8000000187BD46F0;
          String.append(_:)(v17);
          MEMORY[0x18D75AC90](0, 0xE000000000000000);
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
      }
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
    v19 = *((_QWORD *)v7 + 2);
    v18 = *((_QWORD *)v7 + 3);
    if (v19 >= v18 >> 1)
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, v7);
    *((_QWORD *)v7 + 2) = v19 + 1;
    *(_QWORD *)&v7[8 * v19 + 32] = v13;
    swift_retain();
    if (a2 != -1)
    {
      v20 = swift_isUniquelyReferenced_nonNull_native();
      v21 = *v3;
      v86 = (_QWORD *)*v3;
      *v3 = 0x8000000000000000;
      v23 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
      v24 = *(_QWORD *)(v21 + 16);
      v25 = (v22 & 1) == 0;
      v26 = v24 + v25;
      if (__OFADD__(v24, v25))
        goto LABEL_60;
      v27 = v22;
      if (*(_QWORD *)(v21 + 24) < v26)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, v20);
        v28 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
        if ((v27 & 1) != (v29 & 1))
          goto LABEL_70;
        v23 = v28;
        v30 = v86;
        if ((v27 & 1) == 0)
          goto LABEL_38;
LABEL_33:
        v42 = v30[7];
        swift_release();
        *(_QWORD *)(v42 + 8 * v23) = v10;
LABEL_40:
        *v3 = v30;
        goto LABEL_45;
      }
      if ((v20 & 1) != 0)
      {
        v30 = v86;
        if ((v22 & 1) != 0)
          goto LABEL_33;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v30 = v86;
        if ((v27 & 1) != 0)
          goto LABEL_33;
      }
LABEL_38:
      v30[(v23 >> 6) + 8] |= 1 << v23;
      v44 = 8 * v23;
      *(_QWORD *)(v30[6] + v44) = v13;
      *(_QWORD *)(v30[7] + v44) = v10;
      v45 = v30[2];
      v46 = __OFADD__(v45, 1);
      v47 = v45 + 1;
      if (v46)
        goto LABEL_63;
      v30[2] = v47;
      goto LABEL_40;
    }
    v31 = swift_isUniquelyReferenced_nonNull_native();
    v32 = (_QWORD *)v3[1];
    v3[1] = 0x8000000000000000;
    v34 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    v35 = v32[2];
    v36 = (v33 & 1) == 0;
    v37 = v35 + v36;
    if (__OFADD__(v35, v36))
      goto LABEL_62;
    v38 = v33;
    if (v32[3] >= v37)
    {
      if ((v31 & 1) != 0)
      {
        v41 = v32;
        if ((v33 & 1) == 0)
          goto LABEL_42;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v41 = v32;
        if ((v38 & 1) == 0)
          goto LABEL_42;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, v31);
      v39 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
      if ((v38 & 1) != (v40 & 1))
        goto LABEL_70;
      v34 = v39;
      v41 = v32;
      if ((v38 & 1) == 0)
      {
LABEL_42:
        v41[(v34 >> 6) + 8] |= 1 << v34;
        v48 = 8 * v34;
        *(_QWORD *)(v41[6] + v48) = v13;
        *(_QWORD *)(v41[7] + v48) = v10;
        v49 = v41[2];
        v46 = __OFADD__(v49, 1);
        v50 = v49 + 1;
        if (v46)
          goto LABEL_65;
        v41[2] = v50;
        goto LABEL_44;
      }
    }
    v43 = v41[7];
    swift_release();
    *(_QWORD *)(v43 + 8 * v34) = v10;
LABEL_44:
    v3[1] = v41;
LABEL_45:
    v51 = swift_bridgeObjectRelease();
    v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 96))(v51);
    if (v53)
      break;
    swift_release();
LABEL_5:
    v6 = v81;
LABEL_6:
    v8 = v85 + 1;
    if (v84 == v6)
      goto LABEL_68;
  }
  v54 = v52;
  v55 = v53;
  v82 = v7;
  v56 = (*(uint64_t (**)(void))(*(_QWORD *)v10 + 104))();
  if (v56)
  {
    v59 = v56;
    a2 = v57;
    v5 = v58;
    v60 = swift_isUniquelyReferenced_nonNull_native();
    v61 = (_QWORD *)v3[4];
    v3[4] = 0x8000000000000000;
    v62 = v54;
    v64 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v55);
    v65 = v61[2];
    v66 = (v63 & 1) == 0;
    v67 = v65 + v66;
    if (__OFADD__(v65, v66))
      goto LABEL_61;
    v3 = v63;
    if (v61[3] >= v67)
    {
      if ((v60 & 1) != 0)
      {
        if ((v63 & 1) == 0)
          goto LABEL_56;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v3 & 1) == 0)
          goto LABEL_56;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v67, v60);
      v68 = specialized __RawDictionaryStorage.find<A>(_:)(v62, v55);
      if ((v3 & 1) != (v69 & 1))
        goto LABEL_71;
      v64 = v68;
      if ((v3 & 1) == 0)
      {
LABEL_56:
        v61[(v64 >> 6) + 8] |= 1 << v64;
        v71 = (uint64_t *)(v61[6] + 16 * v64);
        *v71 = v62;
        v71[1] = v55;
        v72 = (uint64_t *)(v61[7] + 24 * v64);
        *v72 = v59;
        v72[1] = a2;
        v72[2] = v5;
        v73 = v61[2];
        v46 = __OFADD__(v73, 1);
        v74 = v73 + 1;
        if (v46)
          goto LABEL_64;
        v61[2] = v74;
        swift_bridgeObjectRetain();
        goto LABEL_58;
      }
    }
    v70 = (uint64_t *)(v61[7] + 24 * v64);
    *v70 = v59;
    v70[1] = a2;
    v70[2] = v5;
LABEL_58:
    v3 = v78;
    v78[4] = v61;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = v79;
    a2 = v80;
    v7 = v82;
    goto LABEL_5;
  }
  __break(1u);
LABEL_70:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_71:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t ResolvedNavigationDestinations.popDestinationStack(_:)(uint64_t result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;

  if (result < 1)
    return 0;
  v2 = v1;
  v3 = v1[3];
  v4 = v3 - result;
  if (__OFSUB__(v3, result))
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v3 >= v4)
  {
    if (v4 == v3)
    {
      v5 = 0;
LABEL_6:
      v2[3] = v4;
      return v5;
    }
    if (v4 < v3)
    {
      LOBYTE(v5) = 0;
      v6 = v3 - result;
      v55 = v3 - result;
      v56 = v1[3];
      do
      {
        v7 = v2[2];
        if (*(_QWORD *)(v7 + 16) && (result = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v8 & 1) != 0))
        {
          v57 = v5;
          v9 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * result);
          v10 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
          v12 = v11;
          swift_bridgeObjectRetain_n();
          if ((v12 & 1) != 0)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v14 = v2[2];
            v2[2] = 0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native)
              specialized _NativeDictionary.copy()();
            specialized _NativeDictionary._delete(at:)(v10, v14);
            v2[2] = v14;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v15 = *(_QWORD *)(v9 + 16);
          if (v15)
          {
            swift_bridgeObjectRetain();
            v16 = 0;
            while (1)
            {
              v17 = *(_QWORD *)(v9 + 8 * v16 + 32);
              if (v6 == -1)
              {
                v31 = v2[1];
                if (*(_QWORD *)(v31 + 16))
                {
                  v32 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v9 + 8 * v16 + 32));
                  if ((v33 & 1) != 0)
                  {
                    v34 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v31 + 56) + 8 * v32) + 96);
                    v35 = swift_retain();
                    v36 = v34(v35);
                    v38 = v37;
                    swift_release();
                    if (v38)
                    {
                      swift_bridgeObjectRetain();
                      v39 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v38);
                      v41 = v40;
                      swift_bridgeObjectRelease();
                      if ((v41 & 1) != 0)
                      {
                        v42 = swift_isUniquelyReferenced_nonNull_native();
                        v43 = v2[4];
                        v2[4] = 0x8000000000000000;
                        if ((v42 & 1) == 0)
                          specialized _NativeDictionary.copy()();
                        swift_bridgeObjectRelease();
                        specialized _NativeDictionary._delete(at:)(v39, v43);
                        v2[4] = v43;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        swift_bridgeObjectRelease();
                      }
                    }
                  }
                }
                v49 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
                if ((v50 & 1) == 0)
                  goto LABEL_21;
                v51 = v49;
                v52 = swift_isUniquelyReferenced_nonNull_native();
                v53 = v2[1];
                v2[1] = 0x8000000000000000;
                if (!v52)
                  specialized _NativeDictionary.copy()();
                specialized _NativeDictionary._delete(at:)(v51, v53);
                v2[1] = v53;
              }
              else
              {
                v18 = *v2;
                if (*(_QWORD *)(*v2 + 16))
                {
                  v19 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v9 + 8 * v16 + 32));
                  if ((v20 & 1) != 0)
                  {
                    v21 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v18 + 56) + 8 * v19) + 96);
                    v22 = swift_retain();
                    v23 = v21(v22);
                    v25 = v24;
                    swift_release();
                    if (v25)
                    {
                      swift_bridgeObjectRetain();
                      v26 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v25);
                      v28 = v27;
                      swift_bridgeObjectRelease();
                      if ((v28 & 1) != 0)
                      {
                        v29 = swift_isUniquelyReferenced_nonNull_native();
                        v30 = v2[4];
                        v2[4] = 0x8000000000000000;
                        if ((v29 & 1) == 0)
                          specialized _NativeDictionary.copy()();
                        swift_bridgeObjectRelease();
                        specialized _NativeDictionary._delete(at:)(v26, v30);
                        v2[4] = v30;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        swift_bridgeObjectRelease();
                      }
                    }
                  }
                }
                v44 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
                if ((v45 & 1) == 0)
                  goto LABEL_21;
                v46 = v44;
                v47 = swift_isUniquelyReferenced_nonNull_native();
                v48 = *v2;
                v58 = *v2;
                *v2 = 0x8000000000000000;
                if (!v47)
                {
                  specialized _NativeDictionary.copy()();
                  v48 = v58;
                }
                specialized _NativeDictionary._delete(at:)(v46, v48);
                *v2 = v48;
              }
              swift_release();
              swift_bridgeObjectRelease();
LABEL_21:
              if (v15 == ++v16)
              {
                swift_bridgeObjectRelease();
                v4 = v55;
                break;
              }
            }
          }
          result = swift_bridgeObjectRelease();
          v3 = v56;
          ++v6;
          if (!v57)
          {
LABEL_51:
            if (v9)
            {
              v54 = *(_QWORD *)(v9 + 16);
              result = swift_bridgeObjectRelease();
              v5 = v54 != 0;
              if (v6 == v3)
                goto LABEL_6;
            }
            else
            {
              v5 = 0;
              if (v6 == v3)
                goto LABEL_6;
            }
            continue;
          }
        }
        else
        {
          v9 = 0;
          ++v6;
          if (!v5)
            goto LABEL_51;
        }
        result = swift_bridgeObjectRelease();
        v5 = 1;
        if (v6 == v3)
          goto LABEL_6;
      }
      while (v6 >= v4 && v6 < v3);
    }
    __break(1u);
    goto LABEL_58;
  }
LABEL_59:
  __break(1u);
  return result;
}

uint64_t ResolvedNavigationDestinations.domainDiffers(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  BOOL v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v37;

  v2 = a1;
  v3 = 0;
  v4 = *(_QWORD *)(v1 + 16);
  v35 = v4;
  while (1)
  {
    while (1)
    {
      if (*(_QWORD *)(v2 + 16))
      {
        v8 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
        if ((v9 & 1) != 0)
          break;
      }
      v10 = 0;
      if (!*(_QWORD *)(v4 + 16))
        goto LABEL_13;
LABEL_9:
      specialized __RawDictionaryStorage.find<A>(_:)(v3);
      if ((v11 & 1) == 0)
        goto LABEL_13;
      result = swift_bridgeObjectRetain();
      if (v10)
        goto LABEL_14;
LABEL_11:
      if (!result)
        return result;
      v12 = *(_QWORD *)(result + 16);
LABEL_29:
      result = swift_bridgeObjectRelease();
      if (v12)
        return 1;
LABEL_3:
      v7 = __OFADD__(v3++, 1);
      if (v7)
      {
        __break(1u);
        return result;
      }
    }
    v10 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v8);
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v4 + 16))
      goto LABEL_9;
LABEL_13:
    result = 0;
    if (!v10)
      goto LABEL_11;
LABEL_14:
    if (!result)
    {
      v12 = *(_QWORD *)(v10 + 16);
      goto LABEL_29;
    }
    v13 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(result + 16);
    if (v13)
      break;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14)
      return 1;
    v7 = __OFADD__(v3++, 1);
    if (v7)
    {
      __break(1u);
LABEL_45:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  if (!v14 || v13 != v14)
    goto LABEL_45;
  v37 = result;
  v15 = Set.init(minimumCapacity:)();
  v16 = 0;
  v17 = v15 + 56;
  while (2)
  {
    while (1)
    {
      v18 = *(_QWORD *)(v10 + 32 + 8 * v16++);
      v19 = static Hasher._hash(seed:_:)();
      v20 = -1 << *(_BYTE *)(v15 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v17 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
        break;
      v22 = *(_QWORD *)(v15 + 48);
      if (*(_QWORD *)(v22 + 8 * v21) != v18)
      {
        v23 = ~v20;
        do
        {
          v21 = (v21 + 1) & v23;
          if (((*(_QWORD *)(v17 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
            goto LABEL_26;
        }
        while (*(_QWORD *)(v22 + 8 * v21) != v18);
      }
      if (v16 == v13)
        goto LABEL_31;
    }
LABEL_26:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v18, v21, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    if (v16 != v13)
    {
      v17 = v15 + 56;
      continue;
    }
    break;
  }
LABEL_31:
  swift_bridgeObjectRelease();
  v25 = Set.init(minimumCapacity:)();
  v26 = 0;
  v27 = v25 + 56;
  while (2)
  {
    while (1)
    {
      v28 = *(_QWORD *)(v37 + 32 + 8 * v26++);
      v29 = static Hasher._hash(seed:_:)();
      v30 = -1 << *(_BYTE *)(v25 + 32);
      v31 = v29 & ~v30;
      if (((*(_QWORD *)(v27 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
        break;
      v32 = *(_QWORD *)(v25 + 48);
      if (*(_QWORD *)(v32 + 8 * v31) != v28)
      {
        v33 = ~v30;
        do
        {
          v31 = (v31 + 1) & v33;
          if (((*(_QWORD *)(v27 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
            goto LABEL_39;
        }
        while (*(_QWORD *)(v32 + 8 * v31) != v28);
      }
      if (v26 == v13)
        goto LABEL_2;
    }
LABEL_39:
    v34 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v28, v31, v34);
    swift_bridgeObjectRelease();
    if (v26 != v13)
    {
      v27 = v25 + 56;
      continue;
    }
    break;
  }
LABEL_2:
  swift_bridgeObjectRelease();
  v5 = specialized static Set.== infix(_:_:)(v15, v25);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v4 = v35;
  v2 = a1;
  if ((v5 & 1) != 0)
    goto LABEL_3;
  return 1;
}

uint64_t ResolvedNavigationDestinations.validateValue(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t *v9;

  v3 = *v1;
  v2 = v1[1];
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 80))();
  v5 = v4;
  if (*(_QWORD *)(v3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v4), (v6 & 1) != 0))
  {
    v7 = 1;
  }
  else if (*(_QWORD *)(v2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v5), (v8 & 1) != 0))
  {
    v7 = 0;
  }
  else
  {
    lazy protocol witness table accessor for type AnyNavigationPath.Error and conformance AnyNavigationPath.Error();
    swift_allocError();
    *v9 = v5;
    v9[1] = 0x4000000000000000;
    swift_willThrow();
  }
  return v7 & 1;
}

uint64_t ResolvedNavigationDestinations.view<A, B>(presenting:at:applying:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t (*v23)(uint64_t, uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;

  v8 = v7;
  v30 = a4;
  v31 = a7;
  v29 = a3;
  v13 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v16, v17);
  v18 = *v7;
  v19 = v8[1];
  if (*(_QWORD *)(v18 + 16))
  {
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
    if ((v21 & 1) != 0)
      goto LABEL_6;
  }
  if (*(_QWORD *)(v19 + 16))
  {
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
    if ((v22 & 1) != 0)
    {
      v18 = v19;
LABEL_6:
      v23 = *(uint64_t (**)(uint64_t, uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v18 + 56) + 8 * v20) + 112);
      swift_retain_n();
      v24 = v23(a1, a2, v29, v30, a5, a6, v31);
      swift_release_n();
      return v24;
    }
  }
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>();
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = 0xD00000000000001DLL;
  *(_QWORD *)(v26 + 24) = 0x8000000187BD4770;
  *(_DWORD *)(v26 + 32) = 0;
  *(_BYTE *)(v26 + 36) = 1;
  *(_OWORD *)(v26 + 40) = xmmword_187BF9F90;
  *(_QWORD *)(v26 + 56) = 0xD00000000000001DLL;
  *(_QWORD *)(v26 + 64) = 0x8000000187BD4770;
  *(_OWORD *)(v26 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v26 + 88) = 0;
  LOBYTE(v33) = 1;
  v27 = Image.symbolRenderingMode(_:)();
  swift_release();
  v33 = v27;
  v29(a2);
  v28 = MEMORY[0x1E0CE7238];
  MEMORY[0x18D75B4AC](v15, MEMORY[0x1E0CE7298], a6, MEMORY[0x1E0CE7238]);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a6);
  swift_release();
  v32[0] = v28;
  v32[1] = v31;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v16, v32);
  return AnyView.init<A>(_:)();
}

unint64_t ResolvedNavigationDestinations.pushResolvers<A>(for:pathIndex:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  unint64_t result;
  char v10;
  uint64_t v11;
  void (*v12)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t *v13;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(v6 + 16) && (result = specialized __RawDictionaryStorage.find<A>(_:)(a3), (v10 & 1) != 0))
  {
    v11 = a2 + 1;
    if (__OFADD__(a2, 1))
    {
      __break(1u);
    }
    else
    {
      v12 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 56) + 8 * result)
                                                                       + 120);
      swift_retain();
      v12(v4, a1, v11, a3);
      return swift_release();
    }
  }
  else
  {
    lazy protocol witness table accessor for type AnyNavigationPath.Error and conformance AnyNavigationPath.Error();
    swift_allocError();
    *v13 = a3;
    v13[1] = 0x4000000000000000;
    return swift_willThrow();
  }
  return result;
}

uint64_t ResolvedNavigationDestinations.possibilities<A>(from:depth:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint8_t *v23;
  uint8_t *v24;
  unint64_t v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  void *v39;
  uint8_t *v40;
  void *v41;
  os_log_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  uint8_t *v51;
  uint64_t v52;
  int v53;
  uint8_t *v54;
  os_log_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _OWORD v63[5];
  uint64_t v64;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v9, v10);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_OWORD *)(v4 + 48);
  v63[2] = *(_OWORD *)(v4 + 32);
  v63[3] = v15;
  v63[4] = *(_OWORD *)(v4 + 64);
  v64 = *(_QWORD *)(v4 + 80);
  v16 = *(_OWORD *)(v4 + 16);
  v63[0] = *(_OWORD *)v4;
  v63[1] = v16;
  if (a2 == -1)
    return MEMORY[0x1E0DEE9D8];
  MEMORY[0x1E0C80A78](v11, v12);
  *(&v49 - 4) = a3;
  *(&v49 - 3) = a4;
  *(&v49 - 2) = a1;
  MEMORY[0x1E0C80A78](v17, &v49 - 6);
  *(&v49 - 4) = a3;
  *(&v49 - 3) = a4;
  *(&v49 - 2) = a1;
  *(&v49 - 1) = (uint64_t)v63;
  NavigationHostingControllerCache_UIKit.prerenderHostingController(configureExisting:makeNew:)((void (*)(void))partial apply for closure #1 in ResolvedNavigationDestinations.possibilities<A>(from:depth:), v18, (uint64_t (*)(void))partial apply for closure #2 in ResolvedNavigationDestinations.possibilities<A>(from:depth:));
  v20 = v19;
  v21 = direct field offset for UIHostingController.host;
  v22 = *(void **)&v19[direct field offset for UIHostingController.host];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v24 = v23;
  v25 = lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  v26 = v22;
  ViewRendererHost.preferenceValue<A>(_:)();

  v27 = v61;
  static Log.navigation.getter();
  v28 = type metadata accessor for Logger();
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v14, 1, v28) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
LABEL_20:
    v44 = v20;
    v45 = AnyView.init<A>(_:)();
    v46 = *(_QWORD **)&v20[v21];
    v47 = (_QWORD *)((char *)v46 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v46) + 0x60));
    swift_beginAccess();
    *v47 = v45;
    swift_retain_n();
    v48 = v46;
    swift_release();
    LOWORD(v59._countAndFlagsBits) = 1;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_release_n();
    return v27;
  }
  v58 = v29;
  swift_bridgeObjectRetain_n();
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v30, (os_log_type_t)v31))
  {
    swift_bridgeObjectRelease_n();

LABEL_19:
    (*(void (**)(char *, uint64_t))(v58 + 8))(v14, v28);
    goto LABEL_20;
  }
  v53 = v31;
  v32 = swift_slowAlloc();
  v52 = swift_slowAlloc();
  v60 = v52;
  v61 = a2;
  *(_DWORD *)v32 = 134218242;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  v54 = (uint8_t *)v32;
  *(_WORD *)(v32 + 12) = 2080;
  v61 = 91;
  v62 = 0xE100000000000000;
  if (v27 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v33 = result;
  }
  else
  {
    v33 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v55 = v30;
  v56 = v28;
  v57 = v25;
  if (!v33)
  {
    swift_bridgeObjectRelease();
    v39 = (void *)0xE100000000000000;
    v38 = 91;
LABEL_18:
    v40 = v54;
    v51 = v54 + 14;
    v61 = 93;
    v62 = 0xE100000000000000;
    v59._countAndFlagsBits = v38;
    v59._object = v39;
    swift_bridgeObjectRetain();
    v59._countAndFlagsBits = String.init<A>(_:)();
    v59._object = v41;
    String.append<A>(contentsOf:)();
    swift_bridgeObjectRelease();
    v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59._countAndFlagsBits, (unint64_t)v59._object, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v42 = v55;
    _os_log_impl(&dword_186E48000, v55, (os_log_type_t)v53, "Extracting pre-render navigation destinations at depth: %ld\nReader: NascentViewDestinationsExtractor\nDestinations: %s", v40, 0x16u);
    v43 = v52;
    swift_arrayDestroy();
    MEMORY[0x18D760108](v43, -1, -1);
    MEMORY[0x18D760108](v40, -1, -1);

    v28 = v56;
    goto LABEL_19;
  }
  v49 = v21;
  v50 = v20;
  v51 = v24;
  if (v33 >= 1)
  {
    v35 = 0;
    do
    {
      if ((v27 & 0xC000000000000001) != 0)
      {
        v36 = MEMORY[0x18D75E3BC](v35, v27);
      }
      else
      {
        v36 = *(_QWORD *)(v27 + 8 * v35 + 32);
        swift_retain();
      }
      ++v35;
      v37._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)v36 + 128))();
      v59._countAndFlagsBits = 2314;
      v59._object = (void *)0xE200000000000000;
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      String.append(_:)(v59);
      swift_release();
      swift_bridgeObjectRelease();
    }
    while (v33 != v35);
    swift_bridgeObjectRelease();
    v38 = v61;
    v39 = (void *)v62;
    v20 = v50;
    v21 = v49;
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in ResolvedNavigationDestinations.possibilities<A>(from:depth:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD v14[2];

  v6 = type metadata accessor for ModifiedContent();
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  MEMORY[0x18D75B4AC](v8);
  v14[0] = a4;
  v14[1] = &protocol witness table for NascentViewDestinationsExtractor;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v14);
  v9 = AnyView.init<A>(_:)();
  v10 = *(_QWORD **)(a1 + direct field offset for UIHostingController.host);
  v11 = (_QWORD *)((char *)v10 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v10) + 0x60));
  swift_beginAccess();
  *v11 = v9;
  swift_retain_n();
  v12 = v10;
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  return swift_release_n();
}

char *closure #2 in ResolvedNavigationDestinations.possibilities<A>(from:depth:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Class v12;
  _BYTE *v13;
  _QWORD *v14;
  Class v15;
  id v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  __int16 v24;
  _QWORD v25[2];

  v6 = type metadata accessor for ModifiedContent();
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  MEMORY[0x18D75B4AC](v8);
  v25[0] = a4;
  v25[1] = &protocol witness table for NascentViewDestinationsExtractor;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v25);
  v9 = AnyView.init<A>(_:)();
  v10 = MEMORY[0x1E0CE7518];
  v11 = MEMORY[0x1E0CE7508];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
  v13 = objc_allocWithZone(v12);
  v14 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v13[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v13) + 0x3B8)] = 6;
  *(_QWORD *)&v13[*(_QWORD *)((*v14 & *(_QWORD *)v13) + 0x3C0)] = 0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>.HostingView, v10, v11, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController.HostingView);
  v16 = objc_allocWithZone(v15);
  v17 = specialized _UIHostingView.init(rootView:)(v9);
  v18 = (char *)specialized UIHostingController.init(_hostingView:)(v17);
  swift_release();
  v19 = *(_QWORD **)&v18[direct field offset for UIHostingController.host];
  v20 = (_QWORD *)((char *)v19 + *(_QWORD *)((*v14 & *v19) + 0x118));
  v21 = *v20;
  *v20 = *(_QWORD *)(a2 + 40);
  v20[1] = 0;
  swift_retain_n();
  v22 = v19;
  outlined consume of EnvironmentValues?(v21);
  v24 = 2;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, v10, v11, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  swift_release();
  return v18;
}

unint64_t protocol witness for static NavigationDestinationReader.readerDescription.getter in conformance ResolvedNavigationDestinations()
{
  return 0xD000000000000010;
}

void NavigationDestinationResolverBase.inputIdentifier.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NavigationDestinationResolverBase.inputTypeTagForLogging.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NavigationDestinationResolverBase.inputTypeTag.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NavigationDestinationResolverBase.inputType.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NavigationDestinationResolverBase.view<A, B>(for:at:applying:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NavigationDestinationResolverBase.pushDestinationResolvers<A>(onto:for:depth:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NavigationDestinationResolverBase.description.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for NavigationDestinationResolverBase()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for NavigationDestinationResolver()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NavigationDestinationResolverBase()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

uint64_t NavigationDestinationResolver.__allocating_init(transform:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t NavigationDestinationResolver.inputTypeTagForLogging.getter()
{
  return _typeName(_:qualified:)();
}

uint64_t NavigationDestinationResolver.inputTypeTag.getter()
{
  uint64_t v0;
  uint64_t result;

  result = dynamic_cast_existential_2_conditional(*(_QWORD *)(*(_QWORD *)v0 + 144));
  if (result)
    return _typeName(_:qualified:)();
  return result;
}

uint64_t NavigationDestinationResolver.inputType.getter()
{
  uint64_t v0;

  return dynamic_cast_existential_2_conditional(*(_QWORD *)(*(_QWORD *)v0 + 144));
}

uint64_t NavigationDestinationResolver.inputIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 144);
}

uint64_t NavigationDestinationResolver.view<A, B>(for:at:applying:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, double);
  int v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  void (*v57)(uint64_t *);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t DynamicType;
  uint64_t v62;
  unint64_t v63;

  v59 = a6;
  v60 = a7;
  v57 = a3;
  v58 = a4;
  v56 = a2;
  v51 = a1;
  v10 = *(_QWORD *)(*(_QWORD *)v7 + 144);
  v9 = *(_QWORD *)(*(_QWORD *)v7 + 152);
  v52 = *(_QWORD *)(*(_QWORD *)v7 + 160);
  v53 = v9;
  v11 = type metadata accessor for ParameterizedLazyView(0, v10, v9, v52);
  v54 = *(_QWORD *)(v11 - 8);
  v55 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v48 - v13;
  v15 = type metadata accessor for Optional();
  v48 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v48 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v49 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v48 - v24;
  v26 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v48 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x1E0C80A78](v31, v32);
  v35 = (char *)&v48 - v34;
  v37 = *(void (**)(char *, uint64_t, uint64_t, double))(v36 + 16);
  v37(v25, v51, a5, v33);
  v38 = swift_dynamicCast();
  v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  if (v38)
  {
    v39(v18, 0, 1, v10);
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v35, v18, v10);
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v30, v35, v10);
    ParameterizedLazyView.init(value:content:)((uint64_t)v30, *(_QWORD *)(v50 + 16), *(_QWORD *)(v50 + 24), v10, v53, v52, (uint64_t)v14);
    swift_retain();
    v40 = v55;
    v41 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ParameterizedLazyView<A, B>, v55);
    v42 = specialized static ResolvedNavigationDestinations.prepareToPresent<A, B>(view:at:shouldUpdateDestinations:applying:)((uint64_t)v14, v56, v57, v58, v40, v59, v41, v60);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v14, v40);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v35, v10);
    return v42;
  }
  else
  {
    v39(v18, 1, 1, v10);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v18, v15);
    ((void (*)(char *, uint64_t, uint64_t))v37)(v49, v51, a5);
    v62 = 0;
    v63 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    v62 = 0x100000000000001BLL;
    v63 = 0x8000000187BD4850;
    DynamicType = v10;
    swift_getMetatypeMetadata();
    v44._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 0x746F67202C9D80E2;
    v45._object = (void *)0xAC0000009C80E220;
    String.append(_:)(v45);
    DynamicType = swift_getDynamicType();
    swift_getMetatypeMetadata();
    v46._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._countAndFlagsBits = 10322146;
    v47._object = (void *)0xA300000000000000;
    String.append(_:)(v47);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t NavigationDestinationResolver.pushDestinationResolvers<A>(onto:for:depth:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, double);
  int v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t result;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t DynamicType;

  v60 = a3;
  v55 = a2;
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 144);
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 152);
  v56 = *(_QWORD *)(*(_QWORD *)v4 + 160);
  v57 = v7;
  v61 = type metadata accessor for ParameterizedLazyView(0, v8, v7, v56);
  v59 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61, v9);
  v58 = (uint64_t)&v52 - v10;
  v11 = type metadata accessor for Optional();
  v52 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v52 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v53 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v52 - v20;
  v22 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v52 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27, v28);
  v31 = (char *)&v52 - v30;
  v33 = *(void (**)(char *, uint64_t, uint64_t, double))(v32 + 16);
  v33(v21, v55, a4, v29);
  v34 = swift_dynamicCast();
  v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  if (v34)
  {
    v35(v14, 0, 1, v8);
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v31, v14, v8);
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v26, v31, v8);
    v36 = v58;
    ParameterizedLazyView.init(value:content:)((uint64_t)v26, *(_QWORD *)(v54 + 16), *(_QWORD *)(v54 + 24), v8, v57, v56, v58);
    v37 = *((_QWORD *)a1 + 4);
    v38 = *((_QWORD *)a1 + 7);
    v39 = *((_QWORD *)a1 + 8);
    v40 = *((_BYTE *)a1 + 72);
    v41 = *((_QWORD *)a1 + 10);
    v42 = a1[1];
    v62 = *a1;
    v63 = v42;
    v64 = v37;
    v65 = *(__int128 *)((char *)a1 + 40);
    v66 = v38;
    v67 = v39;
    v68 = v40;
    v69 = v41;
    swift_retain();
    v43 = v61;
    v44 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ParameterizedLazyView<A, B>, v61);
    v45 = v60;
    v46 = ResolvedNavigationDestinations.possibilities<A>(from:depth:)(v36, v60, v43, v44);
    ResolvedNavigationDestinations.setPossibilities(_:depth:)(v46, v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v36, v43);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v31, v8);
  }
  else
  {
    v35(v14, 1, 1, v8);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v14, v11);
    ((void (*)(char *, uint64_t, uint64_t))v33)(v53, v55, a4);
    *(_QWORD *)&v62 = 0;
    *((_QWORD *)&v62 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v62 = 0x100000000000001BLL;
    *((_QWORD *)&v62 + 1) = 0x8000000187BD4850;
    DynamicType = v8;
    swift_getMetatypeMetadata();
    v48._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._countAndFlagsBits = 0x746F67202C9D80E2;
    v49._object = (void *)0xAC0000009C80E220;
    String.append(_:)(v49);
    DynamicType = swift_getDynamicType();
    swift_getMetatypeMetadata();
    v50._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    v51._countAndFlagsBits = 10322146;
    v51._object = (void *)0xA300000000000000;
    String.append(_:)(v51);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t NavigationDestinationResolver.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(32);
  _print_unlocked<A, B>(_:_:)();
  v0._object = (void *)0x8000000187BD4800;
  v0._countAndFlagsBits = 0x100000000000001CLL;
  String.append(_:)(v0);
  swift_getMetatypeMetadata();
  v1._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t NavigationDestinationResolver.__ivar_destroyer()
{
  return swift_release();
}

uint64_t NavigationDestinationResolver.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NavigationDestinationResolver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationDestinationResolver);
}

uint64_t static NascentViewDestinationsExtractor._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  unint64_t v51;
  int v52;

  v3 = *((_DWORD *)a1 + 2);
  v4 = a1[2];
  v5 = *((_DWORD *)a1 + 6);
  v6 = *((_DWORD *)a1 + 7);
  v7 = *((_DWORD *)a1 + 9);
  v26 = *((_DWORD *)a1 + 8);
  v8 = a1[6];
  v25 = a1[5];
  v9 = *((_DWORD *)a1 + 14);
  v24 = *((_DWORD *)a1 + 15);
  v23 = *((_DWORD *)a1 + 16);
  v22 = *((_DWORD *)a1 + 17);
  v21 = *((_DWORD *)a1 + 18);
  v20 = *((_DWORD *)a1 + 19);
  v19 = *((_DWORD *)a1 + 20);
  v44 = *a1;
  v45 = v3;
  v46 = v4;
  *(_QWORD *)&v47 = __PAIR64__(v6, v5);
  *((_QWORD *)&v47 + 1) = __PAIR64__(v7, v26);
  v48 = v25;
  *((_QWORD *)&v50 + 1) = __PAIR64__(v22, v23);
  v51 = __PAIR64__(v20, v21);
  v52 = v19;
  PreferenceKeys.init()();
  v30 = v33;
  v43 = 0;
  _ViewInputs.intern<A>(_:id:)();
  swift_bridgeObjectRelease();
  v27 = v8;
  v10 = v9;
  _ViewInputs.withoutGeometryDependencies.getter();
  PreferencesInputs.init(hostKeys:)();
  swift_bridgeObjectRelease();
  v49 = v44;
  *(_QWORD *)&v50 = __PAIR64__(v24, v3);
  v11 = MEMORY[0x1E0CE4070];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<NavigationDestinationKey>, (uint64_t)&type metadata for NavigationDestinationKey, (uint64_t)&protocol witness table for NavigationDestinationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<NavigationDestinationKey> and conformance _AnyPreferenceKey<A>, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<NavigationDestinationKey>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v11, MEMORY[0x1E0CE4078]);
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations();
  PropertyList.subscript.setter();
  v33 = v44;
  v34 = v3;
  v36 = v4;
  v37 = v47;
  v38 = v25;
  v39 = v44;
  v40 = v50;
  v41 = __PAIR64__(v20, v21);
  v42 = v19;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRetain();
  a2(&v30, v12, &v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v13 = v30;
  v14 = v31;
  v15 = v32;
  v33 = v30;
  v34 = v31;
  v35 = v32;
  v16 = _ViewOutputs.subscript.getter();
  if ((v16 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
  }
  else
  {
    v33 = v27;
    v34 = v10;
    MEMORY[0x1E0C80A78](v16, v17);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    result = swift_bridgeObjectRelease();
    v13 = v30;
    v14 = v31;
    v15 = v32;
  }
  *(_QWORD *)a3 = v13;
  *(_DWORD *)(a3 + 8) = v14;
  *(_DWORD *)(a3 + 12) = v15;
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance NascentViewDestinationsExtractor.Key@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static NascentViewDestinationsExtractor.Key.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance NascentViewDestinationsExtractor.Key(uint64_t a1, void (*a2)(unint64_t *__return_ptr))
{
  unint64_t v3;

  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

void protocol witness for ViewModifier.body(content:) in conformance NascentViewDestinationsExtractor()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id specialized UIHostingController.init(_hostingView:)(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  objc_class *v15;
  id v16;
  objc_super v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  char v22;

  *(_QWORD *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  v3 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  v19 = xmmword_187BF9F90;
  v20 = 0;
  v21 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v22 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v19, v3);
  *(_QWORD *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  v4 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  v5 = swift_allocObject();
  v6 = v1;
  v7 = specialized UIKitDialogBridge.init()(v5);
  swift_release();
  *(_QWORD *)&v1[v4] = v7;
  *(_QWORD *)&v6[direct field offset for UIHostingController.testBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  v8 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = -1;
  *(_QWORD *)&v6[v8] = v9;
  *(_QWORD *)&v6[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  v10 = direct field offset for UIHostingController.fileImportExportBridge;
  *(_QWORD *)&v6[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v6[direct field offset for UIHostingController.deferredEdges] = 256;
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v6[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E0DEE9D8];
  v12 = &v6[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)v12 = 512;
  v12[2] = 3;
  *(_QWORD *)&v6[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v11;
  v6[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v6[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  v13 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(_QWORD *)&v6[v13] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(_QWORD *)&v6[direct field offset for UIHostingController.navigationBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.sizingOptions] = 0;
  *(_QWORD *)&v6[direct field offset for UIHostingController.host] = a1;
  v14 = a1;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v18.receiver = v6;
  v18.super_class = v15;
  v16 = objc_msgSendSuper2(&v18, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()();

  return v16;
}

unint64_t lazy protocol witness table accessor for type AnyNavigationPath.Error and conformance AnyNavigationPath.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyNavigationPath.Error and conformance AnyNavigationPath.Error;
  if (!lazy protocol witness table cache variable for type AnyNavigationPath.Error and conformance AnyNavigationPath.Error)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyNavigationPath.Error, &type metadata for AnyNavigationPath.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationPath.Error and conformance AnyNavigationPath.Error);
  }
  return result;
}

uint64_t outlined copy of NavigationPath.Representation(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t outlined consume of NavigationPath.Representation(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if ((a4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized static ResolvedNavigationDestinations.prepareToPresent<A, B>(view:at:shouldUpdateDestinations:applying:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[12];
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t *);
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  _QWORD v41[2];
  _QWORD v42[2];
  _QWORD v43[5];
  char v44;

  v39 = a8;
  v36 = a4;
  v37 = a3;
  v35 = a1;
  v12 = *a2;
  v32 = a2[1];
  v33 = v12;
  v31 = *((unsigned __int8 *)a2 + 16);
  v30 = a2[3];
  v29 = a2[4];
  v28 = a2[5] & 1;
  v38 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = &v27[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ReadDestinationsModifier<ResolvedNavigationDestinations>, (uint64_t)&type metadata for ResolvedNavigationDestinations, (uint64_t)&protocol witness table for ResolvedNavigationDestinations, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ReadDestinationsModifier);
  v15 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationDestinationKey>, (uint64_t)&type metadata for NavigationDestinationKey, (uint64_t)&protocol witness table for NavigationDestinationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v16 = type metadata accessor for ModifiedContent();
  v34 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = &v27[-v18];
  v20 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v20, v21);
  v43[0] = v33;
  v43[1] = v32;
  v43[2] = v31;
  v43[3] = v30;
  v43[4] = v29;
  v44 = v28;
  View.readNavigationDestinations<A>(position:isActive:reader:)((uint64_t)v43, 1, (uint64_t)&type metadata for ResolvedNavigationDestinations, a5, (uint64_t)&type metadata for ResolvedNavigationDestinations, a7, (uint64_t)&protocol witness table for ResolvedNavigationDestinations);
  v37(a2);
  v42[0] = a7;
  v42[1] = &protocol witness table for ReadDestinationsModifier<A>;
  v22 = MEMORY[0x1E0CE2E70];
  v23 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v15, v42);
  v24 = lazy protocol witness table accessor for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>, &lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationDestinationKey>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0], MEMORY[0x1E0CE63D0]);
  v41[0] = v23;
  v41[1] = v24;
  v25 = MEMORY[0x18D75FFDC](v22, v16, v41);
  MEMORY[0x18D75B4AC](v14, v16, a6, v25);
  (*(void (**)(_BYTE *, uint64_t))(v38 + 8))(v14, a6);
  (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v19, v16);
  v40[0] = v25;
  v40[1] = v39;
  MEMORY[0x18D75FFDC](v22, v20, v40);
  return AnyView.init<A>(_:)();
}

void type metadata accessor for ImageProviderBox<Image.NamedImageProvider>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>)
  {
    lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider();
    v0 = type metadata accessor for ImageProviderBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>);
  }
}

uint64_t specialized ResolvedNavigationDestinations.updatePossibilities<A>(for:over:)(unint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v8;
  uint64_t v10;
  uint64_t v11;

  if (a3)
    goto LABEL_2;
  if ((unint64_t)(a2 + 1) < 2)
  {
LABEL_4:
    v11 = *(_QWORD *)(v3 + 16);
    swift_bridgeObjectRetain();
    ResolvedNavigationDestinations.ejectDestinations(at:)(a2);
    swift_bridgeObjectRelease();
    ResolvedNavigationDestinations.setPossibilities(_:depth:)(a1, a2);
    swift_bridgeObjectRelease();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    v8 = ResolvedNavigationDestinations.domainDiffers(from:)(v11);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v8 & 1;
    v5 = 0x100000000;
    return v5 | v4;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    outlined consume of ResolvedNavigationDestinations.ChangeRequest(a1, a2, 0);
    if (!v10)
      goto LABEL_4;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_4;
  }
  MEMORY[0x18D75AC90](0xD000000000000065, 0x8000000187BD4790);
LABEL_2:
  v4 = 0;
  v5 = 0;
  return v5 | v4;
}

void type metadata accessor for Logger?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Logger?)
  {
    type metadata accessor for Logger();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Logger?);
  }
}

uint64_t partial apply for closure #1 in ResolvedNavigationDestinations.possibilities<A>(from:depth:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in ResolvedNavigationDestinations.possibilities<A>(from:depth:)(a1, v1[4], v1[2], v1[3]);
}

char *partial apply for closure #2 in ResolvedNavigationDestinations.possibilities<A>(from:depth:)()
{
  uint64_t *v0;

  return closure #2 in ResolvedNavigationDestinations.possibilities<A>(from:depth:)(v0[4], v0[5], v0[2], v0[3]);
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>);
  }
  return result;
}

uint64_t dynamic_cast_existential_2_conditional(uint64_t a1)
{
  uint64_t result;

  result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2())
      return a1;
    else
      return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NascentViewDestinationsExtractor()
{
  return &type metadata for NascentViewDestinationsExtractor;
}

ValueMetadata *type metadata accessor for NascentViewDestinationsExtractor.Key()
{
  return &type metadata for NascentViewDestinationsExtractor.Key;
}

uint64_t destroy for ResolvedNavigationDestinations()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ResolvedNavigationDestinations(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ResolvedNavigationDestinations(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ResolvedNavigationDestinations(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

ValueMetadata *type metadata accessor for ResolvedNavigationDestinations()
{
  return &type metadata for ResolvedNavigationDestinations;
}

_UNKNOWN **base witness table accessor for ViewModifier in NascentViewDestinationsExtractor()
{
  return &protocol witness table for NascentViewDestinationsExtractor;
}

uint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, (uint64_t)&type metadata for NavigationDestinationKey, (uint64_t)&protocol witness table for NavigationDestinationKey, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context;
  if (!lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInNavigationV4Context, &type metadata for IsInNavigationV4Context);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context;
  if (!lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInNavigationV4Context, &type metadata for IsInNavigationV4Context);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context;
  if (!lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInNavigationV4Context, &type metadata for IsInNavigationV4Context);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context;
  if (!lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInNavigationV4Context, &type metadata for IsInNavigationV4Context);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context;
  if (!lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInNavigationV4Context, &type metadata for IsInNavigationV4Context);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer;
  if (!lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInLazyContainer, &type metadata for IsInLazyContainer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer;
  if (!lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInLazyContainer, &type metadata for IsInLazyContainer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer;
  if (!lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInLazyContainer, &type metadata for IsInLazyContainer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer;
  if (!lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInLazyContainer, &type metadata for IsInLazyContainer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer;
  if (!lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInLazyContainer, &type metadata for IsInLazyContainer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations;
  if (!lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsExtractingNavigationDestinations, &type metadata for IsExtractingNavigationDestinations);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations;
  if (!lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsExtractingNavigationDestinations, &type metadata for IsExtractingNavigationDestinations);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations;
  if (!lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsExtractingNavigationDestinations, &type metadata for IsExtractingNavigationDestinations);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations;
  if (!lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsExtractingNavigationDestinations, &type metadata for IsExtractingNavigationDestinations);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations;
  if (!lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsExtractingNavigationDestinations, &type metadata for IsExtractingNavigationDestinations);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static NascentViewDestinationsExtractor._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16);
}

double static SensoryFeedback.success.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = -0.0;
  *a1 = xmmword_187BF9FB0;
  return result;
}

double static SensoryFeedback.warning.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0x8000000000000001;
  *a1 = xmmword_187BFE4C0;
  return result;
}

double static SensoryFeedback.error.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0x8000000000000002;
  *a1 = xmmword_187BFE4D0;
  return result;
}

double static SensoryFeedback.selection.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0x8000000000000001;
  *a1 = xmmword_187BFE4E0;
  return result;
}

double static SensoryFeedback.increase.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0x8000000000000003;
  *a1 = xmmword_187BFE4F0;
  return result;
}

double static SensoryFeedback.decrease.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = -0.0;
  *a1 = xmmword_187BFE500;
  return result;
}

double static SensoryFeedback.start.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = -0.0;
  *a1 = xmmword_187BFE510;
  return result;
}

double static SensoryFeedback.stop.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0x8000000000000001;
  *a1 = xmmword_187BFE520;
  return result;
}

double static SensoryFeedback.alignment.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0x8000000000000002;
  *a1 = xmmword_187BFE530;
  return result;
}

double static SensoryFeedback.levelChange.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0x8000000000000003;
  *a1 = xmmword_187BFE540;
  return result;
}

double static SensoryFeedback.pathComplete.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0x8000000000000002;
  *a1 = xmmword_187BFE550;
  return result;
}

unsigned __int8 *static SensoryFeedback.impact(weight:intensity:)@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(_QWORD *)a2 = *result;
  *(double *)(a2 + 8) = a3;
  return result;
}

double static SensoryFeedback.impact.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_187BFE560;
  return result;
}

unsigned __int8 *static SensoryFeedback.impact(flexibility:intensity:)@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(_QWORD *)a2 = *result | 0x4000000000000000;
  *(double *)(a2 + 8) = a3;
  return result;
}

void static SensoryFeedback.Flexibility.rigid.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static SensoryFeedback.Flexibility.solid.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static SensoryFeedback.Flexibility.soft.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

BOOL static SensoryFeedback.Flexibility.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void SensoryFeedback.FeedbackType.hash(into:)(uint64_t a1, unint64_t a2, Swift::UInt64 a3)
{
  unsigned __int8 v4;
  Swift::UInt v5;
  Swift::UInt64 v6;
  Swift::UInt v9;

  v4 = a2;
  if (!(a2 >> 62))
  {
    v5 = 10;
    goto LABEL_5;
  }
  if (a2 >> 62 == 1)
  {
    v5 = 11;
LABEL_5:
    Hasher._combine(_:)(v5);
    Hasher._combine(_:)(v4);
    if ((a3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v6 = a3;
    else
      v6 = 0;
    Hasher._combine(_:)(v6);
    return;
  }
  if ((__int128)__PAIR128__(1, 0x7FFFFFFFFFFFFFFFLL) >= (__int128)__PAIR128__(a3, a2))
    __asm { BR              X10 }
  if ((__int128)__PAIR128__(2, 0x7FFFFFFFFFFFFFFFLL) >= (__int128)__PAIR128__(a3, a2))
    __asm { BR              X10 }
  if (a3 == 2 && a2 == 0x8000000000000000)
  {
    v9 = 8;
  }
  else if (a3 == 2 && a2 == 0x8000000000000001)
  {
    v9 = 9;
  }
  else
  {
    v9 = 12;
  }
  Hasher._combine(_:)(v9);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SensoryFeedback.FeedbackType(unint64_t *a1, uint64_t a2)
{
  return specialized static SensoryFeedback.FeedbackType.== infix(_:_:)(*a1, a1[1], *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SensoryFeedback.FeedbackType()
{
  unint64_t *v0;
  unint64_t v1;
  Swift::UInt64 v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  SensoryFeedback.FeedbackType.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SensoryFeedback.FeedbackType(uint64_t a1)
{
  unint64_t *v1;

  SensoryFeedback.FeedbackType.hash(into:)(a1, *v1, v1[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SensoryFeedback.FeedbackType()
{
  unint64_t *v0;
  unint64_t v1;
  Swift::UInt64 v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  SensoryFeedback.FeedbackType.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t static SensoryFeedback.== infix(_:_:)(unint64_t *a1, uint64_t a2)
{
  return specialized static SensoryFeedback.FeedbackType.== infix(_:_:)(*a1, a1[1], *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

uint64_t specialized static SensoryFeedback.FeedbackType.== infix(_:_:)(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a1 >> 62)
  {
    if (a1 >> 62 != 1)
    {
      if ((__int128)__PAIR128__(1, 0x7FFFFFFFFFFFFFFFLL) >= (__int128)__PAIR128__(a2, a1))
        return ((uint64_t (*)(void))((char *)&loc_186FC151C
                                  + 4 * *(unsigned __int8 *)(&unk_187BFE578 + a1 + 0x8000000000000000)))();
      if ((__int128)__PAIR128__(2, 0x7FFFFFFFFFFFFFFFLL) >= (__int128)__PAIR128__(a2, a1))
        return ((uint64_t (*)(void))((char *)&loc_186FC14D4
                                  + 4 * *(unsigned __int8 *)(&unk_187BFE57C + a1 + 0x8000000000000000)))();
      if (a2 == 2 && a1 == 0x8000000000000000)
      {
        if (a3 >> 62 == 2 && a3 == 0x8000000000000000 && a4 == 2)
          return 1;
      }
      else if (a2 == 2 && a1 == 0x8000000000000001)
      {
        if (a3 >> 62 == 2 && a3 == 0x8000000000000001 && a4 == 2)
          return 1;
      }
      else if (a3 >> 62 == 2 && a3 == 0x8000000000000002 && a4 == 2)
      {
        return 1;
      }
      return 0;
    }
    if (a3 >> 62 != 1)
      return 0;
  }
  else if (a3 >> 62)
  {
    return 0;
  }
  return a3 == a1 && *(double *)&a2 == *(double *)&a4;
}

ValueMetadata *type metadata accessor for SensoryFeedback()
{
  return &type metadata for SensoryFeedback;
}

ValueMetadata *type metadata accessor for SensoryFeedback.Weight()
{
  return &type metadata for SensoryFeedback.Weight;
}

ValueMetadata *type metadata accessor for SensoryFeedback.Flexibility()
{
  return &type metadata for SensoryFeedback.Flexibility;
}

ValueMetadata *type metadata accessor for SensoryFeedback.Flexibility.Storage()
{
  return &type metadata for SensoryFeedback.Flexibility.Storage;
}

uint64_t storeEnumTagSinglePayload for SensoryFeedback.Weight(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_186FC1768 + 4 * byte_187BFE585[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_186FC179C + 4 * byte_187BFE580[v4]))();
}

uint64_t sub_186FC179C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186FC17A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186FC17ACLL);
  return result;
}

uint64_t sub_186FC17B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186FC17C0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_186FC17C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186FC17CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SensoryFeedback.Weight.Storage()
{
  return &type metadata for SensoryFeedback.Weight.Storage;
}

uint64_t getEnumTagSinglePayload for SensoryFeedback(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)a1 >> 2;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for SensoryFeedback(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 4 * -a2;
      *(_QWORD *)(result + 8) = 0;
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for SensoryFeedback.FeedbackType(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*(_QWORD *)a1 & 3 | (4 * *(_DWORD *)(a1 + 8))) + 2;
}

_QWORD *destructiveInjectEnumTag for SensoryFeedback.FeedbackType(_QWORD *result, uint64_t a2)
{
  if (a2 < 2)
  {
    *result = *result & 3 | (a2 << 62);
  }
  else
  {
    *result = ((_BYTE)a2 - 2) & 3 | 0x8000000000000000;
    result[1] = (unint64_t)(a2 - 2) >> 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SensoryFeedback.FeedbackType()
{
  return &type metadata for SensoryFeedback.FeedbackType;
}

unint64_t lazy protocol witness table accessor for type SensoryFeedback.Weight.Storage and conformance SensoryFeedback.Weight.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SensoryFeedback.Weight.Storage and conformance SensoryFeedback.Weight.Storage;
  if (!lazy protocol witness table cache variable for type SensoryFeedback.Weight.Storage and conformance SensoryFeedback.Weight.Storage)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SensoryFeedback.Weight.Storage, &type metadata for SensoryFeedback.Weight.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SensoryFeedback.Weight.Storage and conformance SensoryFeedback.Weight.Storage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SensoryFeedback.Flexibility.Storage and conformance SensoryFeedback.Flexibility.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SensoryFeedback.Flexibility.Storage and conformance SensoryFeedback.Flexibility.Storage;
  if (!lazy protocol witness table cache variable for type SensoryFeedback.Flexibility.Storage and conformance SensoryFeedback.Flexibility.Storage)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SensoryFeedback.Flexibility.Storage, &type metadata for SensoryFeedback.Flexibility.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SensoryFeedback.Flexibility.Storage and conformance SensoryFeedback.Flexibility.Storage);
  }
  return result;
}

void UIKitButton.body.getter()
{
  lazy protocol witness table accessor for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label();
  type metadata accessor for StaticSourceWriter();
}

void sub_186FC19D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  __int16 v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v4, v5);
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = *(_BYTE *)(v0 + 1);
  v9 = *(_QWORD *)(v0 + 8);
  v10 = *(_QWORD *)(v0 + 16);
  v11 = *(_BYTE *)(v0 + 24);
  v12 = *(_BYTE *)(v0 + 25);
  v13 = *(_QWORD *)(v0 + 28);
  v14 = *(_BYTE *)(v0 + 36);
  v15 = *(_WORD *)(v0 + 37);
  v16 = *(_QWORD *)(v0 + 40);
  v17 = *(_BYTE *)(v0 + 48);
  v18 = *(_BYTE *)(v0 + 49);
  v20 = *(_QWORD *)(v0 + 56);
  v19 = *(_QWORD *)(v0 + 64);
  *(_BYTE *)(v3 - 152) = *(_BYTE *)v0;
  *(_BYTE *)(v3 - 151) = v8;
  *(_QWORD *)(v3 - 144) = v9;
  *(_QWORD *)(v3 - 136) = v10;
  *(_BYTE *)(v3 - 128) = v11;
  *(_BYTE *)(v3 - 127) = v12;
  *(_QWORD *)(v3 - 124) = v13;
  *(_BYTE *)(v3 - 116) = v14;
  *(_WORD *)(v3 - 115) = v15;
  *(_QWORD *)(v3 - 112) = v16;
  *(_BYTE *)(v3 - 104) = v17;
  *(_BYTE *)(v3 - 103) = v18;
  *(_QWORD *)(v3 - 96) = v20;
  *(_QWORD *)(v3 - 88) = v19;
  *(_QWORD *)(v3 - 192) = v1;
  *(_QWORD *)(v3 - 184) = v2;
  *(_QWORD *)(v3 - 176) = v0;
  outlined copy of AppIntentExecutor?(v9);
  outlined copy of AppIntentExecutor?(v20);
  lazy protocol witness table accessor for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)partial apply for closure #1 in UIKitButton.body.getter);
}

uint64_t sub_186FC1AF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  v6 = *(_QWORD *)(v5 - 96);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v5 - 144));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v6);
  *(_QWORD *)(v5 - 168) = v0;
  *(_QWORD *)(v5 - 160) = &protocol witness table for StaticSourceWriter<A, B>;
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v5 - 168);
  static ViewBuilder.buildExpression<A>(_:)(v3, v1, v7);
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v3, v1);
  static ViewBuilder.buildBlock<A>(_:)(v2, v1, *(_QWORD *)(v5 - 216));
  return v8(v2, v1);
}

uint64_t closure #1 in UIKitButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UIKitButton(0, v11, v12, v13);
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v14 + 36), a2, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a2);
}

uint64_t one-time initialization function for defaultStyleModifier()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v0 = type metadata accessor for UIButton.Configuration();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UIKitSystemButtonConfigurationModifier(0);
  __swift_allocate_value_buffer(v5, static ResolvedUIKitButtonBody.defaultStyleModifier);
  v6 = __swift_project_value_buffer(v5, (uint64_t)static ResolvedUIKitButtonBody.defaultStyleModifier);
  static UIButton.Configuration.bordered()();
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v6, v4, v0);
  v7 = v6 + *(int *)(v5 + 20);
  result = swift_getKeyPath();
  *(_QWORD *)v7 = result;
  *(_BYTE *)(v7 + 8) = 0;
  return result;
}

{
  uint64_t result;

  result = swift_getKeyPath();
  static ResolvedLabeledContent.defaultStyleModifier = result;
  byte_1EDEFF858 = 0;
  return result;
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedUIKitButtonBody@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  __int16 v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *v1;
  v3 = v1[1];
  v4 = *((_QWORD *)v1 + 1);
  v5 = *((_QWORD *)v1 + 2);
  v6 = v1[24];
  v7 = v1[25];
  v8 = *(_QWORD *)(v1 + 28);
  v9 = v1[36];
  v10 = *(_WORD *)(v1 + 37);
  v11 = *((_QWORD *)v1 + 5);
  v12 = v1[48];
  v13 = v1[49];
  v14 = *((_QWORD *)v1 + 7);
  v15 = *((_QWORD *)v1 + 8);
  *(_BYTE *)a1 = v2;
  *(_BYTE *)(a1 + 1) = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 25) = v7;
  *(_QWORD *)(a1 + 28) = v8;
  *(_BYTE *)(a1 + 36) = v9;
  *(_WORD *)(a1 + 37) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_BYTE *)(a1 + 48) = v12;
  *(_BYTE *)(a1 + 49) = v13;
  *(_QWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 64) = v15;
  outlined copy of AppIntentExecutor?(v4);
  return outlined copy of AppIntentExecutor?(v14);
}

uint64_t protocol witness for static StyleableView.defaultStyleModifier.getter in conformance ResolvedUIKitButtonBody@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for defaultStyleModifier != -1)
    swift_once();
  v2 = type metadata accessor for UIKitSystemButtonConfigurationModifier(0);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static ResolvedUIKitButtonBody.defaultStyleModifier);
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, a1, type metadata accessor for UIKitSystemButtonConfigurationModifier);
}

void protocol witness for View.body.getter in conformance UIKitButtonConfiguration.Label()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t UIKitButtonConfiguration.label.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = static VerticalAlignment.center.getter();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t UIKitMenuButton.init(action:isPopUpButton:flexibleDimensions:menuTitleVisibility:menuIndicatorVisibility:onPresentationChanged:menuContent:label:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0 || !a1)
    type metadata accessor for UIKitMenuButton();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void static UIKitMenuButton._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v10[16];

  v10[14] = *MEMORY[0x1E0C80C00];
  swift_unknownObjectWeakInit();
  outlined init with take of BridgedPopUpButtonProvider();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for WeakBox<UIButton>?(0);
  lazy protocol witness table accessor for type BridgedPopUpButtonProvider and conformance BridgedPopUpButtonProvider();
  Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of weak FallbackResponderProvider?((uint64_t)v10);
  v10[0] = a3;
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  type metadata accessor for UIKitMenuButton();
}

void sub_186FC2140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int OffsetAttribute2;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  id v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  char v29;
  int v30;
  uint64_t v31;

  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 64) = type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v17 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64);
  *(_QWORD *)(v9 + 88) = v12;
  *(_DWORD *)(v9 + 152) = v15;
  *(_QWORD *)(v9 + 56) = v11;
  if (v17)
    closure #1 in static UIKitMenuButton._makeView(view:inputs:)();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  *(_QWORD *)(v9 + 208) = v13;
  *(_DWORD *)(v9 + 216) = *(_DWORD *)(v9 + 136);
  v19 = *(_QWORD *)(v9 + 120);
  *(_QWORD *)(v9 + 224) = *(_QWORD *)(v9 + 128);
  v20 = *(_DWORD *)(v9 + 140);
  *(_DWORD *)(v9 + 232) = *(_DWORD *)(v9 + 156);
  *(_DWORD *)(v9 + 236) = v20;
  v21 = *(_DWORD *)(v9 + 148);
  *(_DWORD *)(v9 + 240) = *(_DWORD *)(v9 + 152);
  *(_DWORD *)(v9 + 244) = v21;
  v22 = *(_QWORD *)(v9 + 160);
  *(_QWORD *)(v9 + 248) = v19;
  *(_QWORD *)(v9 + 256) = v22;
  *(_DWORD *)(v9 + 264) = *(_DWORD *)(v9 + 144);
  *(_DWORD *)(v9 + 268) = *(_DWORD *)(v9 + 116);
  *(_DWORD *)(v9 + 272) = *(_DWORD *)(v9 + 112);
  *(_DWORD *)(v9 + 276) = *(_DWORD *)(v9 + 108);
  *(_DWORD *)(v9 + 280) = *(_DWORD *)(v9 + 104);
  *(_DWORD *)(v9 + 284) = *(_DWORD *)(v9 + 100);
  *(_DWORD *)(v9 + 288) = *(_DWORD *)(v9 + 96);
  v23 = PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)(v9 + 208), 1, v16 - 208);
  *(_QWORD *)(v9 + 24) = &a9;
  v24 = *(_DWORD *)(v16 - 200);
  v25 = *(_QWORD *)(v16 - 192);
  v26 = *(_DWORD *)(v16 - 184);
  v27 = *(_QWORD *)(v16 - 176);
  v28 = *(_DWORD *)(v16 - 112);
  v29 = *(_BYTE *)(v16 - 108);
  *(_QWORD *)(v9 + 208) = *(_QWORD *)(v16 - 208);
  v30 = *(_DWORD *)(v16 - 104);
  *(_DWORD *)(v9 + 216) = v24;
  *(_QWORD *)(v9 + 224) = v25;
  *(_DWORD *)(v9 + 232) = v26;
  *(_QWORD *)(v9 + 240) = v27;
  *(_OWORD *)(v9 + 248) = *(_OWORD *)(v16 - 168);
  *(_OWORD *)(v9 + 264) = *(_OWORD *)(v16 - 152);
  *(_OWORD *)(v9 + 280) = *(_OWORD *)(v16 - 136);
  *(_QWORD *)(v9 + 296) = *(_QWORD *)(v16 - 120);
  *(_DWORD *)(v9 + 304) = v28;
  *(_BYTE *)(v9 + 308) = v29;
  *(_DWORD *)(v9 + 312) = v30;
  MEMORY[0x1E0C80A78](v23, v31);
  *(_QWORD *)(v9 + 176) = &type metadata for AllPlatformItemListFlags;
  *(_QWORD *)(v9 + 184) = v14;
  *(_QWORD *)(v9 + 192) = &protocol witness table for AllPlatformItemListFlags;
  *(_QWORD *)(v9 + 200) = v10;
  type metadata accessor for PlatformItemListGenerator();
}

void sub_186FC22E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int OffsetAttribute2;
  uint64_t v19;
  int v20;

  *(_QWORD *)(v4 - 16) = a1;
  *(_QWORD *)(v4 - 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListGenerator<A, B>, a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  v10 = v9;
  *(_QWORD *)(v1 + 80) = v5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 208, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_1, v2, a1, MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18], v11);
  *(_QWORD *)(v1 + 8) = 0;
  v12 = *(void **)(v1 + 208);
  v13 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  v14 = *(_DWORD *)(v1 + 176);
  LODWORD(v12) = *(_DWORD *)(v1 + 76);
  *(_DWORD *)(v7 - 208) = (_DWORD)v12;
  v15 = _GraphValue.value.getter();
  *(_DWORD *)(v7 - 208) = (_DWORD)v12;
  _GraphValue.value.getter();
  v16 = *(_QWORD *)(v1 + 56);
  if (*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64))
    closure #2 in static UIKitMenuButton._makeView(view:inputs:)();
  v17 = *(_QWORD *)(v1 + 88);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  type metadata accessor for UIKitButton(0, v16, v17, v19);
  *(_DWORD *)(v1 + 208) = v15;
  *(_DWORD *)(v1 + 212) = v14;
  *(_DWORD *)(v1 + 24) = v14;
  v20 = *(_DWORD *)(v1 + 44);
  *(_DWORD *)(v1 + 216) = OffsetAttribute2;
  *(_DWORD *)(v1 + 220) = v20;
  *(_QWORD *)(v7 - 208) = v16;
  *(_QWORD *)(v7 - 200) = v13;
  *(_QWORD *)(v7 - 192) = v17;
  *(_QWORD *)(v7 - 184) = v3;
  *(_QWORD *)(v1 + 32) = v3;
  type metadata accessor for UIKitMenuButton.Child();
}

uint64_t sub_186FC2470(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t result;
  _QWORD *v21;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitMenuButton<A, B>.Child, a1);
  _GraphValue.init<A>(_:)();
  v6 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v5 - 208) = v6;
  v7 = *(_DWORD *)(v1 + 136);
  *(_DWORD *)(v5 - 200) = v7;
  v8 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v5 - 192) = v8;
  v9 = *(_DWORD *)(v1 + 140);
  *(_DWORD *)(v5 - 184) = *(_DWORD *)(v1 + 156);
  *(_DWORD *)(v5 - 180) = v9;
  v10 = *(_DWORD *)(v1 + 148);
  *(_DWORD *)(v5 - 176) = *(_DWORD *)(v1 + 152);
  *(_DWORD *)(v5 - 172) = v10;
  v11 = *(_QWORD *)(v1 + 160);
  *(_QWORD *)(v5 - 168) = v3;
  *(_QWORD *)(v5 - 160) = v11;
  v12 = *(_DWORD *)(v1 + 116);
  *(_DWORD *)(v5 - 152) = *(_DWORD *)(v1 + 144);
  *(_DWORD *)(v5 - 148) = v12;
  v13 = *(_DWORD *)(v1 + 108);
  *(_DWORD *)(v5 - 144) = *(_DWORD *)(v1 + 112);
  *(_DWORD *)(v5 - 140) = v13;
  v14 = *(_DWORD *)(v1 + 100);
  *(_DWORD *)(v5 - 136) = *(_DWORD *)(v1 + 104);
  *(_DWORD *)(v5 - 132) = v14;
  *(_DWORD *)(v5 - 128) = *(_DWORD *)(v1 + 96);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitButton<A>, v2);
  static View._makeView(view:inputs:)();
  lazy protocol witness table accessor for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (*(_BYTE *)(v5 - 208) == 1)
  {
    v16 = *(_QWORD *)(v1 + 160);
    *(_QWORD *)(v5 - 208) = v16;
    *(_DWORD *)(v5 - 200) = *(_DWORD *)(v1 + 144);
    MEMORY[0x1E0C80A78](v16, v15);
    swift_bridgeObjectRetain();
    v8 = *(_QWORD *)(v1 + 128);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v5 - 208) = v6;
  *(_DWORD *)(v5 - 200) = v7;
  *(_QWORD *)(v5 - 192) = v8;
  v17 = *(_DWORD *)(v1 + 152);
  v18 = *(_DWORD *)(v1 + 140);
  *(_DWORD *)(v5 - 184) = *(_DWORD *)(v1 + 156);
  *(_DWORD *)(v5 - 180) = v18;
  v19 = *(_DWORD *)(v1 + 148);
  *(_DWORD *)(v5 - 176) = v17;
  *(_DWORD *)(v5 - 172) = v19;
  *(_QWORD *)(v5 - 168) = *(_QWORD *)(v1 + 120);
  result = static StyleContextAcceptsPredicate.evaluate(inputs:)();
  if ((result & 1) != 0)
  {
    *(_DWORD *)(v5 - 208) = *(_DWORD *)(v1 + 76);
    _GraphValue.value.getter();
    *(_QWORD *)v1 = v4;
    closure #3 in static UIKitMenuButton._makeView(view:inputs:)();
  }
  v21 = *(_QWORD **)(v1 + 48);
  *v21 = *(_QWORD *)(v1 + 208);
  v21[1] = *(_QWORD *)(v1 + 216);
  return result;
}

void closure #1 in static UIKitMenuButton._makeView(view:inputs:)()
{
  type metadata accessor for UIKitMenuButton();
}

uint64_t sub_186FC2A08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = v2 + *(int *)(a1 + 64);
  v7[2] = a1;
  v8 = v1;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v1, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v9;
}

void closure #2 in static UIKitMenuButton._makeView(view:inputs:)()
{
  type metadata accessor for UIKitMenuButton();
}

uint64_t sub_186FC2AA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = v2 + *(int *)(a1 + 60);
  v7[2] = a1;
  v8 = v1;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v1, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v9;
}

void closure #3 in static UIKitMenuButton._makeView(view:inputs:)()
{
  type metadata accessor for UIKitMenuButton();
}

uint64_t sub_186FC2B34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[14];

  v6[2] = a1;
  v2 = MEMORY[0x1E0DEAFA0];
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v6, v2, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v6[4];
}

uint64_t key path getter for UIKitMenuButton.action : <A, B>UIKitMenuButton<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return outlined copy of AppIntentExecutor?(v3);
}

uint64_t key path setter for UIKitMenuButton.action : <A, B>UIKitMenuButton<A, B>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  outlined copy of AppIntentExecutor?(v3);
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
  *a2 = (uint64_t)v6;
  a2[1] = v5;
  return result;
}

void implicit closure #2 in static UIKitMenuButton._makeView(view:inputs:)()
{
  type metadata accessor for UIKitMenuButton.TransformItemList();
}

uint64_t sub_186FC2CD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  _QWORD v6[5];
  unsigned int v7;

  v6[2] = a1;
  v6[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitMenuButton<A, B>.TransformItemList, a1);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v5, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v6, a1, MEMORY[0x1E0DEDCE8], v2, MEMORY[0x1E0DEDD18], v3);
  return v7;
}

void UIKitMenuButton.Child.menuButton.getter()
{
  type metadata accessor for UIKitMenuButton();
}

uint64_t sub_186FC2DAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void UIKitMenuButton.Child.value.getter()
{
  type metadata accessor for UIKitMenuButton();
}

void sub_186FC2E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v10 - 136) = (char *)&a9 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  *(_QWORD *)(v10 - 168) = (char *)&a9 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  *(_QWORD *)(v10 - 184) = (char *)&a9 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  *(_QWORD *)(v10 - 200) = (char *)&a9 - v20;
  MEMORY[0x1E0C80A78](v21, v22);
  MEMORY[0x1E0C80A78](v23, v24);
  *(_QWORD *)(v10 - 256) = v9;
  UIKitMenuButton.Child.menuButton.getter();
}

void sub_186FC2F44()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *v1;
  *(_QWORD *)(v4 - 160) = v1[1];
  *(_QWORD *)(v4 - 152) = v5;
  outlined copy of AppIntentExecutor?(v5);
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v1, v2);
  *(_QWORD *)(v4 - 240) = v0;
  UIKitMenuButton.Child.menuButton.getter();
}

void sub_186FC2F90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  *(_DWORD *)(v4 - 172) = *(unsigned __int8 *)(v1 + 16);
  v3(v1, v2);
  *(_QWORD *)(v4 - 248) = v0;
  UIKitMenuButton.Child.menuButton.getter();
}

void sub_186FC2FD8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v3 - 188) = *(unsigned __int8 *)(v0 + 17);
  v1(v0, v2);
  *(_QWORD *)(v3 - 144) = AGCreateWeakAttribute();
  UIKitMenuButton.Child.menuButton.getter();
}

void sub_186FC3024()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(v5 - 200) = *(unsigned __int8 *)(v1 + *(int *)(v4 + 68));
  v2(v1, v4);
  *(_QWORD *)(v5 - 224) = v3;
  *(_QWORD *)(v5 - 216) = v0;
  UIKitMenuButton.Child.menuButton.getter();
}

void sub_186FC3070()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v3 - 184) = *(unsigned __int8 *)(v0 + *(int *)(v2 + 72));
  v1(v0, v2);
  *(_QWORD *)(v3 - 128) = AGCreateWeakAttribute();
  UIKitMenuButton.Child.menuButton.getter();
}

uint64_t sub_186FC30BC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = (uint64_t *)(v0 + *(int *)(v3 + 76));
  v7 = v0;
  v8 = *v6;
  v9 = v6[1];
  outlined copy of AppIntentExecutor?(*v6);
  v1(v7, v3);
  v10 = *(_QWORD *)(v5 - 232);
  *(_WORD *)v10 = 256;
  v11 = *(_QWORD *)(v5 - 160);
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v5 - 152);
  *(_QWORD *)(v10 + 16) = v11;
  *(_BYTE *)(v10 + 24) = *(_DWORD *)(v5 - 172);
  *(_BYTE *)(v10 + 25) = *(_DWORD *)(v5 - 188);
  *(_QWORD *)(v10 + 28) = *(_QWORD *)(v5 - 144);
  *(_BYTE *)(v10 + 36) = 0;
  *(_BYTE *)(v10 + 37) = *(_DWORD *)(v5 - 200);
  *(_BYTE *)(v10 + 38) = *(_DWORD *)(v5 - 184);
  *(_QWORD *)(v10 + 40) = *(_QWORD *)(v5 - 128);
  *(_WORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = v8;
  *(_QWORD *)(v10 + 64) = v9;
  v12 = v10;
  v14 = type metadata accessor for UIKitButton(0, v4, v2, v13);
  return closure #1 in UIKitMenuButton.Child.value.getter(*(_QWORD *)(v5 - 216), v4, v2, v12 + *(int *)(v14 + 36));
}

uint64_t closure #1 in UIKitMenuButton.Child.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Value;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v17 - v12;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, Value, a2);
  static ViewBuilder.buildExpression<A>(_:)(v9, a2, a3);
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, a2);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v13, a2, a4);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, a2);
}

uint64_t (*UIKitMenuButton.TransformItemList.primaryAction.getter())()
{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  type metadata accessor for (())?(0);
  Value = (uint64_t *)AGGraphGetValue();
  v1 = *Value;
  v2 = Value[1];
  if (*Value)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    v4 = 0;
  }
  outlined copy of AppIntentExecutor?(v1);
  return v4;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance UIKitMenuButton<A, B>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for UIKitButton(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

void protocol witness for Rule.value.getter in conformance UIKitMenuButton<A, B>.Child()
{
  UIKitMenuButton.Child.value.getter();
}

uint64_t (*UIKitMenuButton.TransformItemList.value.getter(unint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))(uint64_t *a1)
{
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v11 = a2;
  v12 = a1;
  v13 = HIDWORD(a1);
  v14 = HIDWORD(a2);
  v15 = *(_QWORD *)AGGraphGetValue();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a4;
  *(_QWORD *)(v16 + 24) = a5;
  *(_QWORD *)(v16 + 32) = a6;
  *(_QWORD *)(v16 + 40) = a7;
  *(_QWORD *)(v16 + 48) = v15;
  *(_DWORD *)(v16 + 56) = v12;
  *(_DWORD *)(v16 + 60) = v13;
  *(_DWORD *)(v16 + 64) = v11;
  *(_DWORD *)(v16 + 68) = v14;
  *(_DWORD *)(v16 + 72) = a3;
  swift_bridgeObjectRetain();
  return partial apply for closure #1 in UIKitMenuButton.TransformItemList.value.getter;
}

uint64_t closure #1 in UIKitMenuButton.TransformItemList.value.getter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t (*v30)();
  uint64_t v31;
  uint64_t (*v32)();
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD v38[3];
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  _BYTE v48[184];
  __int128 v49[4];
  char v50;
  _BYTE v51[192];

  v42 = a7;
  v43 = a8;
  v41 = a6;
  v39 = a5;
  v38[1] = a4;
  v38[2] = a3;
  v40 = a9;
  v11 = type metadata accessor for PlatformItemList.Item();
  v44 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v45 = (uint64_t)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (void **)((char *)v38 - v16);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v38 - v20;
  v22 = *(_BYTE *)AGGraphGetValue();
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v48);
  v23 = MEMORY[0x1E0CE7280];
  outlined init with take of Image.Resolved?((uint64_t)v48, (uint64_t)v51, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  v49[0] = xmmword_187BF9840;
  memset(&v49[1], 0, 48);
  v50 = 0;
  v46 = 0uLL;
  v47 = 0;
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v51, v49, &v46, 0, 0, (uint64_t)v21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v21 + 77) = a2;
  v21[632] = v22;
  outlined consume of PlatformItemList.Item.SystemItem?(*((void **)v21 + 37), *((_QWORD *)v21 + 38), *((_QWORD *)v21 + 39), *((_QWORD *)v21 + 40), *((_QWORD *)v21 + 41), *((_QWORD *)v21 + 42), *((_QWORD *)v21 + 43), *((_QWORD *)v21 + 44), *((_QWORD *)v21 + 45), *((_QWORD *)v21 + 46), *((_QWORD *)v21 + 47), *((_QWORD *)v21 + 48), *((_QWORD *)v21 + 49));
  *(_OWORD *)(v21 + 296) = 0u;
  *(_OWORD *)(v21 + 312) = 0u;
  *((_QWORD *)v21 + 41) = 0x3FFFFFFFCLL;
  *((_OWORD *)v21 + 21) = 0u;
  *((_OWORD *)v21 + 22) = 0u;
  *((_OWORD *)v21 + 23) = 0u;
  *((_OWORD *)v21 + 24) = 0u;
  PlatformItemList.mergedContentItem.getter(*a1, (uint64_t)v17);
  swift_bridgeObjectRelease();
  v24 = *v17;
  v25 = *(void **)v21;
  *(_QWORD *)v21 = *v17;
  v26 = v24;

  v27 = v17[72];
  v28 = (void *)*((_QWORD *)v21 + 72);
  *((_QWORD *)v21 + 72) = v27;
  v29 = v27;

  outlined init with take of Image.Resolved?((uint64_t)(v17 + 8), (uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v23);
  outlined init with take of Image.Resolved?((uint64_t)(v21 + 64), (uint64_t)v51, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v23);
  outlined init with take of Image.Resolved?((uint64_t)v49, (uint64_t)(v21 + 64), (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v23);
  outlined retain of Image.Resolved?((uint64_t)v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
  outlined retain of Image.Resolved?((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
  v21[*(int *)(v11 + 124)] = *(_BYTE *)AGGraphGetValue();
  v21[*(int *)(v11 + 128)] = *(_BYTE *)AGGraphGetValue();
  v30 = UIKitMenuButton.TransformItemList.primaryAction.getter();
  if (v30)
  {
    v32 = v30;
    v33 = v31;
    outlined consume of PlatformItemList.Item.SelectionBehavior?(*((_QWORD *)v21 + 50), *((_QWORD *)v21 + 51), *((_QWORD *)v21 + 52), *((_QWORD *)v21 + 53), *((_QWORD *)v21 + 54), *((_QWORD *)v21 + 55));
    *((_QWORD *)v21 + 50) = 1;
    *((_QWORD *)v21 + 51) = v32;
    *((_QWORD *)v21 + 52) = v33;
    *(_OWORD *)(v21 + 424) = 0u;
    *(_OWORD *)(v21 + 440) = 0u;
    *(_OWORD *)(v21 + 449) = 0u;
  }
  v34 = v45;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v21, v45, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v35 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_187BF9830;
  outlined init with take of TableCellFormula(v34, v36 + v35, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  *a1 = v36;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
}

uint64_t protocol witness for Rule.value.getter in conformance UIKitMenuButton<A, B>.TransformItemList@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t *);
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = UIKitMenuButton.TransformItemList.value.getter(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 16), a1[2], a1[3], a1[4], a1[5]);
  v6 = v5;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v6;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a2[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitMenuButton<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  static UIKitMenuButton._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance UIKitMenuButton<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitMenuButton<A, B>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance UIKitMenuButton<A, B>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitMenuButton<A, B>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance UIKitMenuButton<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitMenuButton<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for Rule.value.getter in conformance BridgedPopUpButtonProvider@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t result;
  _BYTE v5[8];

  v3 = (void *)MEMORY[0x18D760234](v1);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();

  result = outlined init with take of TableCellFormula((uint64_t)v5, a1, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIButton>);
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance BridgedPopUpButtonPreferenceKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&static BridgedPopUpButtonPreferenceKey.defaultValue, a1, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIButton>?);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance BridgedPopUpButtonPreferenceKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v4;
  _BYTE v6[16];
  uint64_t v7;
  char v8;

  v4 = outlined init with take of TableCellFormula(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIButton>?);
  if ((v6[8] & 1) != 0)
  {
    a2(&v7, v4);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIButton>?);
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v6, (uint64_t)&v7, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIButton>);
    v8 = 0;
  }
  return outlined init with take of TableCellFormula((uint64_t)&v7, a1, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIButton>?);
}

uint64_t View.uikitButtonStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UIKitButtonStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t View.uikitButtonConfiguration(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v6 = type metadata accessor for UIKitSystemButtonConfigurationModifier(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, a1, v10);
  v11 = &v9[*(int *)(v6 + 20)];
  *(_QWORD *)v11 = swift_getKeyPath();
  v11[8] = 0;
  MEMORY[0x18D75B4AC](v9, a2, v6, a3);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for UIKitSystemButtonConfigurationModifier);
}

uint64_t UIKitButtonStyleModifier.styleBody(configuration:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45[8];
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  char v49;
  uint64_t v50;
  unsigned __int8 v51;
  __int16 v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;

  v44 = a3;
  v4 = *(_QWORD *)(a2 + 16);
  v39 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v38 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *(_QWORD *)(v6 + 24);
  v8 = type metadata accessor for UIKitButtonStyleModifier.ResolvedBody(0, v4, v42, v7);
  v43 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v41 = (char *)&v29 - v15;
  v16 = *a1;
  v36 = a1[1];
  v37 = v16;
  v17 = *((_QWORD *)a1 + 1);
  v18 = *((_QWORD *)a1 + 2);
  v19 = a1[24];
  v35 = a1[25];
  v34 = *(_QWORD *)(a1 + 28);
  v20 = a1[36];
  v33 = *(unsigned __int16 *)(a1 + 37);
  v32 = *((_QWORD *)a1 + 5);
  v31 = a1[48];
  v30 = a1[49];
  v21 = *((_QWORD *)a1 + 7);
  v22 = *((_QWORD *)a1 + 8);
  v23 = (uint64_t)v38;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v39 + 16))(v38, v40, v4, v14);
  v45[0] = v37;
  v45[1] = v36;
  v46 = v17;
  v47 = v18;
  v48 = v19;
  v49 = v35;
  v50 = v34;
  v51 = v20;
  v52 = v33;
  v53 = v32;
  v54 = v31;
  v55 = v30;
  v56 = v21;
  v57 = v22;
  KeyPath = swift_getKeyPath();
  UIKitButtonStyleModifier.ResolvedBody.init(style:configuration:isEnabled:)(v23, v45, KeyPath, 0, v4, v42, (uint64_t)v11);
  v25 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitButtonStyleModifier<A>.ResolvedBody, v8);
  v26 = (uint64_t)v41;
  static ViewBuilder.buildExpression<A>(_:)(v11, v8, v25);
  outlined copy of AppIntentExecutor?(v17);
  outlined copy of AppIntentExecutor?(v21);
  v27 = *(void (**)(char *, uint64_t))(v43 + 8);
  v27(v11, v8);
  static ViewBuilder.buildBlock<A>(_:)(v26, v8, v44);
  return ((uint64_t (*)(uint64_t, uint64_t))v27)(v26, v8);
}

uint64_t UIKitButtonStyleModifier.ResolvedBody.init(style:configuration:isEnabled:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  __int16 v26;

  v9 = *a2;
  v10 = a2[1];
  v11 = *((_QWORD *)a2 + 1);
  v12 = *((_QWORD *)a2 + 2);
  v13 = a2[24];
  v14 = a2[25];
  v15 = *(_QWORD *)(a2 + 28);
  v16 = a2[36];
  v26 = *(_WORD *)(a2 + 37);
  v25 = *((_QWORD *)a2 + 5);
  v23 = a2[49];
  v24 = a2[48];
  v21 = *((_QWORD *)a2 + 8);
  v22 = *((_QWORD *)a2 + 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(a7, a1, a5);
  result = type metadata accessor for UIKitButtonStyleModifier.ResolvedBody(0, a5, a6, v17);
  v19 = a7 + *(int *)(result + 36);
  *(_BYTE *)v19 = v9;
  *(_BYTE *)(v19 + 1) = v10;
  *(_QWORD *)(v19 + 8) = v11;
  *(_QWORD *)(v19 + 16) = v12;
  *(_BYTE *)(v19 + 24) = v13;
  *(_BYTE *)(v19 + 25) = v14;
  *(_QWORD *)(v19 + 28) = v15;
  *(_BYTE *)(v19 + 36) = v16;
  *(_WORD *)(v19 + 37) = v26;
  *(_QWORD *)(v19 + 40) = v25;
  *(_BYTE *)(v19 + 48) = v24;
  *(_BYTE *)(v19 + 49) = v23;
  *(_QWORD *)(v19 + 56) = v22;
  *(_QWORD *)(v19 + 64) = v21;
  v20 = a7 + *(int *)(result + 40);
  *(_QWORD *)v20 = a3;
  *(_BYTE *)(v20 + 8) = a4 & 1;
  return result;
}

uint64_t UIKitButtonStyleModifier.ResolvedBody.isEnabled.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v2 = v1 + *(int *)(a1 + 40);
  v3 = *(_QWORD *)v2;
  v4 = *(_BYTE *)(v2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v2, v4);
  v5 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool>.Content(v3, v4);
  return v5 & 1;
}

void UIKitButtonStyleModifier.ResolvedBody.body.getter()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
  lazy protocol witness table accessor for type HStack<UIKitButtonConfiguration.Label> and conformance HStack<A>();
  type metadata accessor for ButtonStyleContent();
}

void sub_186FC40C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  __int16 v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;

  v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleContent<A, B>, a1);
  *(_QWORD *)(v14 - 352) = v16;
  v18 = type metadata accessor for UIKitButtonAdaptor(0, a1, v16, v17);
  *(_QWORD *)(v14 - 336) = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v14 - 360) = v18;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&a9 - v20;
  type metadata accessor for StaticSourceWriter<ButtonStyleConfiguration.Label, HStack<UIKitButtonConfiguration.Label>>();
  v22 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v14 - 312) = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  *(_QWORD *)(v14 - 376) = (char *)&a9 - v24;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<ActionPlatformItemListFlags>, (uint64_t)&type metadata for ActionPlatformItemListFlags, (uint64_t)&protocol witness table for ActionPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  v25 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v14 - 320) = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  *(_QWORD *)(v14 - 368) = (char *)&a9 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v29);
  *(_QWORD *)(v14 - 344) = (char *)&a9 - v30;
  v31 = v10 + *(int *)(v11 + 36);
  v32 = *(_BYTE *)(v31 + 1);
  v33 = *(_QWORD *)(v31 + 8);
  v34 = *(_QWORD *)(v31 + 16);
  v35 = *(_BYTE *)(v31 + 24);
  LOBYTE(v30) = *(_BYTE *)(v31 + 25);
  v36 = *(_QWORD *)(v31 + 28);
  v37 = *(_BYTE *)(v31 + 36);
  v38 = *(_WORD *)(v31 + 37);
  v39 = *(_QWORD *)(v31 + 40);
  v40 = *(_BYTE *)(v31 + 48);
  v41 = *(_BYTE *)(v31 + 49);
  v42 = *(_QWORD *)(v31 + 56);
  v43 = *(_QWORD *)(v31 + 64);
  *(_BYTE *)(v14 - 168) = *(_BYTE *)v31;
  *(_BYTE *)(v14 - 167) = v32;
  *(_QWORD *)(v14 - 160) = v33;
  *(_QWORD *)(v14 - 152) = v34;
  *(_BYTE *)(v14 - 144) = v35;
  *(_BYTE *)(v14 - 143) = v30;
  *(_QWORD *)(v13 + 28) = v36;
  *(_BYTE *)(v14 - 132) = v37;
  *(_WORD *)(v13 + 37) = v38;
  *(_QWORD *)(v14 - 128) = v39;
  *(_BYTE *)(v14 - 120) = v40;
  *(_BYTE *)(v14 - 119) = v41;
  *(_QWORD *)(v14 - 112) = v42;
  *(_QWORD *)(v14 - 104) = v43;
  *(_QWORD *)(v14 - 224) = v12;
  *(_QWORD *)(v14 - 216) = v9;
  *(_QWORD *)(v14 - 208) = v10;
  outlined copy of AppIntentExecutor?(v33);
  outlined copy of AppIntentExecutor?(v42);
  UIKitButtonAdaptor.init(configuration:options:content:)(v14 - 168, 0, (void (*)(uint64_t))partial apply for closure #1 in UIKitButtonStyleModifier.ResolvedBody.body.getter, a1, *(_QWORD *)(v14 - 352), (uint64_t)v21);
  *(_QWORD *)(v14 - 272) = v12;
  *(_QWORD *)(v14 - 264) = v9;
  *(_QWORD *)(v14 - 256) = v10;
  lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for ButtonStyleConfiguration.Label, (uint64_t)UIKitButtonConfiguration.label.getter);
}

uint64_t sub_186FC4348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 336) + 8))(v6, v7);
  v11 = implicit closure #1 in UIKitButtonStyleModifier.ResolvedBody.body.getter(v8, v2, v3, v10);
  v13 = v12;
  *(_QWORD *)(v9 - 184) = v1;
  *(_QWORD *)(v9 - 176) = &protocol witness table for StaticSourceWriter<A, B>;
  v14 = MEMORY[0x1E0CE2E70];
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v9 - 184);
  v16 = *(_QWORD *)(v9 - 368);
  View.transformPlatformItemList<A>(_:_:)((uint64_t)&type metadata for ActionPlatformItemListFlags, (uint64_t)v11, v13, v5, (uint64_t)&type metadata for ActionPlatformItemListFlags, v15, (uint64_t)&protocol witness table for ActionPlatformItemListFlags);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 312) + 8))(v0, v5);
  *(_QWORD *)(v9 - 200) = v15;
  *(_QWORD *)(v9 - 192) = &protocol witness table for PlatformItemListTransformModifier<A>;
  v17 = MEMORY[0x18D75FFDC](v14, v4, v9 - 200);
  v18 = *(_QWORD *)(v9 - 344);
  static ViewBuilder.buildExpression<A>(_:)(v16, v4, v17);
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 320) + 8);
  v19(v16, v4);
  static ViewBuilder.buildBlock<A>(_:)(v18, v4, *(_QWORD *)(v9 - 296));
  return ((uint64_t (*)(uint64_t, uint64_t))v19)(v18, v4);
}

void closure #1 in UIKitButtonStyleModifier.ResolvedBody.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  _QWORD v12[3];
  char v13;
  char v14;
  char v15;

  v6 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v6);
  v10 = (char *)(a1 + *(int *)(type metadata accessor for UIKitButtonStyleModifier.ResolvedBody(0, a2, a3, v9) + 36));
  v11 = *v10;
  LOBYTE(v10) = v10[1];
  v14 = v11;
  v15 = (char)v10;
  v12[1] = static VerticalAlignment.center.getter();
  v12[2] = 0;
  v13 = 1;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
  lazy protocol witness table accessor for type HStack<UIKitButtonConfiguration.Label> and conformance HStack<A>();
  ButtonStyleContent.init(_:role:label:)();
}

void ButtonStyleContent.init(_:role:label:)()
{
  type metadata accessor for ButtonStyleContent();
}

uint64_t sub_186FC45F0(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = v5 + a1[13];
  *(_WORD *)v9 = 256;
  v10 = v5 + a1[15];
  *(_QWORD *)v10 = swift_getKeyPath();
  *(_BYTE *)(v10 + 8) = 0;
  v11 = v5 + a1[16];
  *(_BYTE *)v11 = 0;
  *(_QWORD *)(v11 + 8) = 0;
  v12 = v5 + a1[17];
  *(_BYTE *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v5, v4, v2);
  *(_BYTE *)v9 = v6;
  *(_BYTE *)(v9 + 1) = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v5 + a1[14], v3, v1);
}

uint64_t specialized UIKitButtonAdaptor.init(configuration:options:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(_OWORD *__return_ptr, uint64_t)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  _BOOL4 v15;
  char v16;
  uint64_t v17;
  _BOOL8 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  _BYTE v38[12];
  _BYTE v39[12];
  _BYTE v40[12];
  _BYTE v41[20];

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<AnyButtonStyleType.Unknown>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyButtonStyleType.Unknown and conformance AnyButtonStyleType.Unknown, (uint64_t)&type metadata for AnyButtonStyleType.Unknown, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox);
  *(_QWORD *)&v25 = v7;
  *((_QWORD *)&v25 + 1) = &protocol witness table for ButtonStyleTypeBox<A>;
  *(_QWORD *)&v26 = swift_getKeyPath();
  BYTE8(v26) = 0;
  *(_QWORD *)&v27 = swift_getKeyPath();
  BYTE8(v27) = 0;
  *(_QWORD *)&v28 = swift_getKeyPath();
  BYTE8(v28) = 0;
  *(_QWORD *)&v29 = swift_getKeyPath();
  BYTE8(v29) = 0;
  *(_QWORD *)&v30 = swift_getKeyPath();
  BYTE8(v30) = 0;
  *(_QWORD *)&v31 = swift_getKeyPath();
  BYTE8(v31) = 0;
  v23 = *(_BYTE *)(a1 + 24);
  if ((v23 & 1) != 0
    && (outlined init with take of TableCellFormula(a1 + 28, (uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for WeakAttribute<PlatformItemList>?), outlined init with take of TableCellFormula((uint64_t)v40, (uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for WeakAttribute<PlatformItemList>?), v41[8] == 1))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v32 = v8;
    *((_QWORD *)&v32 + 1) = *(_QWORD *)(a1 + 16);
    LOBYTE(v33) = *(_BYTE *)(a1 + 25);
    outlined init with take of TableCellFormula(a1 + 28, (uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for WeakAttribute<PlatformItemList>?);
    outlined init with take of TableCellFormula((uint64_t)v39, (uint64_t)&v33 + 4, (uint64_t (*)(_QWORD))type metadata accessor for WeakAttribute<PlatformItemList>?);
    v9 = *(unsigned __int8 *)(a1 + 37);
    *(_WORD *)((char *)&v33 + 13) = *(_WORD *)(a1 + 37);
    outlined init with take of WeakAttribute<WeakBox<UIButton>?>?(a1 + 40, (uint64_t)v38);
    outlined init with take of WeakAttribute<WeakBox<UIButton>?>?((uint64_t)v38, (uint64_t)&v34);
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)(a1 + 64);
    *((_QWORD *)&v36 + 1) = a2;
    *(_QWORD *)&v37 = v10;
    *((_QWORD *)&v37 + 1) = v11;
    outlined copy of AppIntentExecutor?(v8);
    v12 = outlined copy of AppIntentExecutor?(v10);
    a3(v35, v12);
    result = (uint64_t)outlined retain of UIKitButtonConfiguration((_QWORD *)a1, (void (*)(_QWORD, _QWORD))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    if ((v23 & 1) != 0 && (a2 & 0x80) == 0)
    {
      a2 |= 0x80uLL;
      *((_QWORD *)&v36 + 1) = a2;
    }
    v14 = *(unsigned __int8 *)(a1 + 49);
    v15 = (a2 & 0x100) == 0;
    v16 = v14 & v15;
    if ((v14 & v15) != 0)
      v17 = a2 | 0x100;
    else
      v17 = a2;
    v19 = (v17 & 1) == 0 && v9 == 1;
    if ((v16 & 1) != 0 || v19)
      *((_QWORD *)&v36 + 1) = v17 | v19;
    v20 = v35[1];
    a4[10] = v35[0];
    a4[11] = v20;
    v21 = v37;
    a4[12] = v36;
    a4[13] = v21;
    a4[6] = v31;
    a4[7] = v32;
    v22 = v34;
    a4[8] = v33;
    a4[9] = v22;
    a4[2] = v27;
    a4[3] = v28;
    a4[4] = v29;
    a4[5] = v30;
    *a4 = v25;
    a4[1] = v26;
  }
  return result;
}

uint64_t specialized UIKitButtonAdaptor.init(configuration:options:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  int v18;
  _BOOL4 v19;
  char v20;
  uint64_t v21;
  _BOOL8 v23;
  int v24;
  char v25;
  _BYTE v27[12];
  _BYTE v28[12];
  _BYTE v29[12];
  _BYTE v30[12];

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<AnyButtonStyleType.Unknown>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyButtonStyleType.Unknown and conformance AnyButtonStyleType.Unknown, (uint64_t)&type metadata for AnyButtonStyleType.Unknown, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox);
  *(_QWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = &protocol witness table for ButtonStyleTypeBox<A>;
  *(_QWORD *)(a4 + 16) = swift_getKeyPath();
  *(_BYTE *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = swift_getKeyPath();
  *(_BYTE *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 48) = swift_getKeyPath();
  *(_BYTE *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = swift_getKeyPath();
  *(_BYTE *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 80) = swift_getKeyPath();
  *(_BYTE *)(a4 + 88) = 0;
  *(_QWORD *)(a4 + 96) = swift_getKeyPath();
  *(_BYTE *)(a4 + 104) = 0;
  v25 = *(_BYTE *)(a1 + 24);
  if ((v25 & 1) != 0
    && (outlined init with take of TableCellFormula(a1 + 28, (uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for WeakAttribute<PlatformItemList>?), outlined init with take of TableCellFormula((uint64_t)v29, (uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for WeakAttribute<PlatformItemList>?), v30[8] == 1))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for UIKitButtonAdaptor<PlatformItemContent>(0);
    v9 = v8;
    v10 = (uint64_t *)(a4 + *(int *)(v8 + 92));
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a4 + 112) = v11;
    *(_QWORD *)(a4 + 120) = v12;
    *(_BYTE *)(a4 + 128) = *(_BYTE *)(a1 + 25);
    outlined init with take of TableCellFormula(a1 + 28, (uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for WeakAttribute<PlatformItemList>?);
    outlined init with take of TableCellFormula((uint64_t)v28, a4 + 132, (uint64_t (*)(_QWORD))type metadata accessor for WeakAttribute<PlatformItemList>?);
    v24 = *(unsigned __int8 *)(a1 + 37);
    *(_BYTE *)(a4 + 141) = v24;
    *(_BYTE *)(a4 + 142) = *(_BYTE *)(a1 + 38);
    outlined init with take of WeakAttribute<WeakBox<UIButton>?>?(a1 + 40, (uint64_t)v27);
    outlined init with take of WeakAttribute<WeakBox<UIButton>?>?((uint64_t)v27, a4 + 144);
    v13 = *(int *)(v9 + 88);
    *(_QWORD *)(a4 + v13) = a2;
    v14 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 64);
    *v10 = v14;
    v10[1] = v15;
    outlined copy of AppIntentExecutor?(v11);
    v16 = outlined copy of AppIntentExecutor?(v14);
    a3(v16);
    result = (uint64_t)outlined retain of UIKitButtonConfiguration((_QWORD *)a1, (void (*)(_QWORD, _QWORD))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    if ((v25 & 1) != 0 && (a2 & 0x80) == 0)
    {
      a2 |= 0x80uLL;
      *(_QWORD *)(a4 + v13) = a2;
    }
    v18 = *(unsigned __int8 *)(a1 + 49);
    v19 = (a2 & 0x100) == 0;
    v20 = v18 & v19;
    if ((v18 & v19) != 0)
      v21 = a2 | 0x100;
    else
      v21 = a2;
    v23 = (v21 & 1) == 0 && v24 == 1;
    if ((v20 & 1) != 0 || v23)
      *(_QWORD *)(a4 + v13) = v21 | v23;
  }
  return result;
}

uint64_t UIKitButtonAdaptor.init(configuration:options:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _BOOL4 v24;
  char v25;
  uint64_t v26;
  _BOOL4 v27;
  char v28;
  _BOOL8 v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  int v38;
  int v39;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(unsigned __int8 *)(a1 + 24);
  v35 = *(_BYTE *)(a1 + 25);
  v34 = *(_QWORD *)(a1 + 28);
  v12 = *(_BYTE *)(a1 + 36);
  v13 = *(unsigned __int8 *)(a1 + 37);
  v33 = *(_BYTE *)(a1 + 38);
  v32 = *(_QWORD *)(a1 + 40);
  v31 = *(_BYTE *)(a1 + 48);
  v38 = *(unsigned __int8 *)(a1 + 49);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 64);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<AnyButtonStyleType.Unknown>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyButtonStyleType.Unknown and conformance AnyButtonStyleType.Unknown, (uint64_t)&type metadata for AnyButtonStyleType.Unknown, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox);
  *(_QWORD *)a6 = v16;
  *(_QWORD *)(a6 + 8) = &protocol witness table for ButtonStyleTypeBox<A>;
  *(_QWORD *)(a6 + 16) = swift_getKeyPath();
  *(_BYTE *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 32) = swift_getKeyPath();
  *(_BYTE *)(a6 + 40) = 0;
  *(_QWORD *)(a6 + 48) = swift_getKeyPath();
  *(_BYTE *)(a6 + 56) = 0;
  *(_QWORD *)(a6 + 64) = swift_getKeyPath();
  *(_BYTE *)(a6 + 72) = 0;
  *(_QWORD *)(a6 + 80) = swift_getKeyPath();
  *(_BYTE *)(a6 + 88) = 0;
  *(_QWORD *)(a6 + 96) = swift_getKeyPath();
  *(_BYTE *)(a6 + 104) = 0;
  v39 = v11;
  if (v11 == 1 && (v12 & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v18 = type metadata accessor for UIKitButtonAdaptor(0, a4, a5, v17);
    v19 = (uint64_t *)(a6 + *(int *)(v18 + 92));
    *(_QWORD *)(a6 + 112) = v9;
    *(_QWORD *)(a6 + 120) = v10;
    *(_BYTE *)(a6 + 128) = v35;
    *(_QWORD *)(a6 + 132) = v34;
    *(_BYTE *)(a6 + 140) = v12;
    *(_BYTE *)(a6 + 141) = v13;
    *(_BYTE *)(a6 + 142) = v33;
    *(_QWORD *)(a6 + 144) = v32;
    *(_BYTE *)(a6 + 152) = v31;
    v20 = v13;
    v21 = *(int *)(v18 + 88);
    *(_QWORD *)(a6 + v21) = a2;
    *v19 = v14;
    v19[1] = v15;
    outlined copy of AppIntentExecutor?(v9);
    v22 = outlined copy of AppIntentExecutor?(v14);
    a3(v22);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v9);
    result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v14);
    v24 = (a2 & 0x80) == 0;
    v25 = v39 & v24;
    if ((v39 & v24) != 0)
      v26 = a2 | 0x80;
    else
      v26 = a2;
    v27 = (v26 & 0x100) == 0;
    v28 = v38 & v27;
    if ((v38 & v27) != 0)
      v26 |= 0x100uLL;
    v30 = (v26 & 1) == 0 && v20 == 1;
    if ((v25 & 1) != 0 || (v28 & 1) != 0 || v30)
      *(_QWORD *)(a6 + v21) = v26 | v30;
  }
  return result;
}

uint64_t (*implicit closure #1 in UIKitButtonStyleModifier.ResolvedBody.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = type metadata accessor for UIKitButtonStyleModifier.ResolvedBody(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v16 - v11, a1, v7, v10);
  v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14 + v13, v12, v7);
  return partial apply for implicit closure #2 in implicit closure #1 in UIKitButtonStyleModifier.ResolvedBody.body.getter;
}

uint64_t UIKitButtonStyleModifier.ResolvedBody.transform(itemList:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v5 = type metadata accessor for PlatformItemList.Item();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v20 - v12;
  PlatformItemList.mergedContentItem.getter(*a1, (uint64_t)&v20 - v12);
  swift_bridgeObjectRelease();
  v14 = 0;
  v15 = 0;
  if ((UIKitButtonStyleModifier.ResolvedBody.isEnabled.getter(a2) & 1) != 0)
  {
    v16 = v2 + *(int *)(a2 + 36);
    v14 = *(_QWORD *)(v16 + 8);
    v15 = *(_QWORD *)(v16 + 16);
    outlined copy of AppIntentExecutor?(v14);
  }
  outlined consume of PlatformItemList.Item.SelectionBehavior?(*((_QWORD *)v13 + 50), *((_QWORD *)v13 + 51), *((_QWORD *)v13 + 52), *((_QWORD *)v13 + 53), *((_QWORD *)v13 + 54), *((_QWORD *)v13 + 55));
  *((_QWORD *)v13 + 50) = 1;
  *((_QWORD *)v13 + 51) = v14;
  *((_QWORD *)v13 + 52) = v15;
  *(_OWORD *)(v13 + 424) = 0u;
  *(_OWORD *)(v13 + 440) = 0u;
  *(_OWORD *)(v13 + 449) = 0u;
  v13[56] = UIKitButtonStyleModifier.ResolvedBody.isEnabled.getter(a2) & 1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_187BF9830;
  outlined init with take of TableCellFormula((uint64_t)v9, v18 + v17, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  *a1 = v18;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
}

uint64_t UIKitSystemButtonConfigurationModifier.styleBody(configuration:)@<X0>(__int128 *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[14];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v5 = type metadata accessor for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v28 = a1[2];
  v29 = v11;
  v30 = *((_QWORD *)a1 + 8);
  v12 = a1[1];
  v26 = *a1;
  v27 = v12;
  if ((BYTE8(v12) & 1) != 0)
  {
    v21 = &v10[*(int *)(v7 + 20)];
    v22 = type metadata accessor for UIButton.Configuration();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, v2, v22);
    v23 = v29;
    *((_OWORD *)v10 + 2) = v28;
    *((_OWORD *)v10 + 3) = v23;
    *((_QWORD *)v10 + 8) = v30;
    v24 = v27;
    *(_OWORD *)v10 = v26;
    *((_OWORD *)v10 + 1) = v24;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v10, (uint64_t)a2, type metadata accessor for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent);
    type metadata accessor for _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>>.Storage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    outlined retain of UIKitButtonConfiguration(&v26, (void (*)(_QWORD, _QWORD))outlined copy of AppIntentExecutor?, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent);
  }
  else
  {
    MEMORY[0x1E0C80A78](v7, v8);
    *(_QWORD *)&v25[-1] = &v26;
    *((_QWORD *)&v25[-1] + 1) = v2;
    outlined retain of UIKitButtonConfiguration(&v26, (void (*)(_QWORD, _QWORD))outlined copy of AppIntentExecutor?, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    specialized UIKitButtonAdaptor.init(configuration:options:content:)((uint64_t)&v26, 0, (void (*)(_OWORD *__return_ptr, uint64_t))partial apply for closure #1 in UIKitSystemButtonConfigurationModifier.viewContent(configuration:), v25);
    v13 = v25[11];
    a2[10] = v25[10];
    a2[11] = v13;
    v14 = v25[13];
    a2[12] = v25[12];
    a2[13] = v14;
    v15 = v25[7];
    a2[6] = v25[6];
    a2[7] = v15;
    v16 = v25[9];
    a2[8] = v25[8];
    a2[9] = v16;
    v17 = v25[3];
    a2[2] = v25[2];
    a2[3] = v17;
    v18 = v25[5];
    a2[4] = v25[4];
    a2[5] = v18;
    v19 = v25[1];
    *a2 = v25[0];
    a2[1] = v19;
    type metadata accessor for _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>>.Storage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t closure #1 in UIKitSystemButtonConfigurationModifier.viewContent(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  _BYTE v10[2];

  outlined init with take of Image.Resolved?(a1, (uint64_t)v10, &lazy cache variable for type metadata for ButtonRole?, (uint64_t)&type metadata for ButtonRole);
  v5 = a2 + *(int *)(type metadata accessor for UIKitSystemButtonConfigurationModifier(0) + 20);
  v6 = *(_QWORD *)v5;
  v7 = *(_BYTE *)(v5 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v5, v7);
  v8 = specialized Environment.wrappedValue.getter(v6, v7);
  outlined consume of Environment<Bool>.Content(v6, v7);
  outlined init with take of Image.Resolved?((uint64_t)v10, a3 + 17, &lazy cache variable for type metadata for ButtonRole?, (uint64_t)&type metadata for ButtonRole);
  *(_QWORD *)(a3 + 24) = 1;
  *(_BYTE *)(a3 + 32) = v8 & 1;
  result = static VerticalAlignment.center.getter();
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

double static UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent._makeView(view:inputs:)@<D0>(double *a1@<X8>)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v10;
  double v11;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent>, type metadata accessor for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  swift_getKeyPath();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
  type metadata accessor for Focus<UIKitButtonConfiguration, HStack<UIKitButtonConfiguration.Label>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Focus<UIKitButtonConfiguration, HStack<UIKitButtonConfiguration.Label>> and conformance Focus<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Focus<UIKitButtonConfiguration, HStack<UIKitButtonConfiguration.Label>>, MEMORY[0x1E0CFECE0]);
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v1 = (id)AGSubgraphGetCurrent();
  if (!v1)
    __break(1u);
  v2 = v1;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformItemListGenerator<LabelPlatformItemListFlags, HStack<UIKitButtonConfiguration.Label>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformItemListGenerator<LabelPlatformItemListFlags, HStack<UIKitButtonConfiguration.Label>> and conformance PlatformItemListGenerator<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemListGenerator<LabelPlatformItemListFlags, HStack<UIKitButtonConfiguration.Label>>, (uint64_t)&protocol conformance descriptor for PlatformItemListGenerator<A, B>);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v3 = v2;
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  specialized static UseUIButtonConfigurationPredicate.evaluate(inputs:)();
  _GraphInputs.suppressTrailingInset.getter();
  lazy protocol witness table accessor for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _GraphInputs.interfaceIdiom.getter();
  AnyInterfaceIdiom.accepts<A>(_:)();
  _GraphValue.value.getter();
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitButtonAdaptor<PlatformItemContent>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor and conformance UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
  static View.makeDebuggableView(view:inputs:)();
  v4 = static StyleContextAcceptsPredicate.evaluate(inputs:)();
  if ((v4 & 1) != 0)
  {
    MEMORY[0x1E0C80A78](v4, v5);
    MEMORY[0x1E0C80A78](v6, v7);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

  }
  *(_QWORD *)a1 = v10;
  result = v11;
  a1[1] = v11;
  return result;
}

