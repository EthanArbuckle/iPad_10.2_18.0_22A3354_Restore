uint64_t specialized ScrollActionDispatcher.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  os_log_type_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t *Value;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Strong;
  _QWORD *v25;
  uint64_t v26;

  v1 = v0;
  v2 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v2 != *(_DWORD *)(v0 + 28))
  {
    *(_DWORD *)(v0 + 28) = v2;
    *(_QWORD *)(v0 + 16) = 0xFFFFFFFFLL;
    *(_BYTE *)(v0 + 24) = 0;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 32) = MEMORY[0x1E0DEE9D8];
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [ScrollPhaseState], MEMORY[0x1E0CE3390], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v3 = *(_QWORD *)AGGraphGetValue();
  if ((v4 & 1) != 0)
  {
    v6 = (uint64_t *)(v0 + 32);
    v5 = *(_QWORD *)(v0 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = specialized static Array<A>.== infix(_:_:)(v3, v5);
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      goto LABEL_6;
    v10 = *(_QWORD *)(v3 + 16);
    if (v10 >= 2)
    {
      v11 = static os_log_type_t.fault.getter();
      v12 = static Log.runtimeIssuesLog.getter();
      v13 = v11;
      if (os_log_type_enabled(v12, v11))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        v15 = swift_slowAlloc();
        v26 = v15;
        *(_DWORD *)v14 = 136315138;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x8000000187BD60F0, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_186E48000, v12, v13, "%s: Multiple scroll views were found. Picking the first one to compare.", v14, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x18D760108](v15, -1, -1);
        MEMORY[0x18D760108](v14, -1, -1);
      }

      v10 = *(_QWORD *)(v3 + 16);
    }
    if (v10)
      v16 = *(unsigned __int8 *)(v3 + 32);
    else
      v16 = 5;
    v17 = *v6;
    if (*(_QWORD *)(*v6 + 16))
    {
      v18 = *(unsigned __int8 *)(v17 + 32);
      if (v16 == 5)
        goto LABEL_25;
    }
    else
    {
      v18 = 5;
      if (v16 == 5)
      {
LABEL_25:
        result = swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
    if (v18 == 5 || v16 != v18)
    {
      MEMORY[0x1E0C80A78](v17, v8);
      if ((UpdateCycleDetector.dispatch(label:isDebug:)() & 1) != 0)
      {
        AGGraphClearUpdate();
        if (v18 == 5)
          v19 = v16;
        else
          v19 = v18;
        Value = (uint64_t *)AGGraphGetValue();
        v22 = *Value;
        v21 = Value[1];
        v23 = swift_allocObject();
        *(_QWORD *)(v23 + 16) = v22;
        *(_QWORD *)(v23 + 24) = v21;
        *(_BYTE *)(v23 + 32) = v19;
        *(_BYTE *)(v23 + 33) = v16;
        swift_retain();
        AGGraphSetUpdate();
        Strong = swift_weakLoadStrong();
        v25 = (_QWORD *)swift_allocObject();
        v25[2] = partial apply for closure #1 in OnScrollPhaseChangeModifier.PhaseActionProvider.makeAction(oldOutput:newOutput:);
        v25[3] = v23;
        v25[4] = Strong;
        swift_retain();
        swift_retain();
        static Update.enqueueAction(_:)();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
LABEL_6:
  result = swift_bridgeObjectRelease();
  v6 = (uint64_t *)(v1 + 32);
LABEL_26:
  *v6 = v3;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  os_log_type_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  int v17;
  double v18;
  double v19;
  uint64_t v20;
  int v21;
  double v22;
  double v23;
  double v24;
  double v25;
  char v26;
  uint64_t (*v27)();
  uint64_t v28;
  uint64_t v29;
  uint64_t Strong;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  double v34;
  double v35;
  uint64_t v36;
  double v37;
  double v38;

  v1 = v0;
  v2 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v2 != *(_DWORD *)(v0 + 32))
  {
    *(_DWORD *)(v0 + 32) = v2;
    *(_QWORD *)(v0 + 20) = 0xFFFFFFFFLL;
    *(_BYTE *)(v0 + 28) = 0;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 40) = MEMORY[0x1E0DEE9D8];
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [ScrollPhaseState], MEMORY[0x1E0CE3390], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v3 = *(_QWORD *)AGGraphGetValue();
  if ((v4 & 1) != 0)
  {
    v6 = (uint64_t *)(v0 + 40);
    v5 = *(_QWORD *)(v0 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = specialized static Array<A>.== infix(_:_:)(v3, v5);
    v8 = swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      goto LABEL_6;
    v11 = *(_QWORD *)(v3 + 16);
    if (v11 >= 2)
    {
      v12 = static os_log_type_t.fault.getter();
      v13 = static Log.runtimeIssuesLog.getter();
      v14 = v12;
      if (os_log_type_enabled(v13, v12))
      {
        v15 = (uint8_t *)swift_slowAlloc();
        v16 = swift_slowAlloc();
        v36 = v16;
        *(_DWORD *)v15 = 136315138;
        v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x8000000187BD6110, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_186E48000, v13, v14, "%s: Multiple scroll views were found. Picking the first one to compare.", v15, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x18D760108](v16, -1, -1);
        MEMORY[0x18D760108](v15, -1, -1);
      }

      v11 = *(_QWORD *)(v3 + 16);
    }
    if (!v11)
      goto LABEL_27;
    v17 = *(unsigned __int8 *)(v3 + 32);
    v18 = *(double *)(v3 + 40);
    v19 = *(double *)(v3 + 48);
    v20 = *v6;
    if (*(_QWORD *)(*v6 + 16))
    {
      if (v17 == 5)
        goto LABEL_27;
      v21 = *(unsigned __int8 *)(v20 + 32);
      v22 = *(double *)(v20 + 40);
      v23 = *(double *)(v20 + 48);
      v36 = *(unsigned __int8 *)(v3 + 32);
      v37 = v18;
      v38 = v19;
      if (v21 != 5)
      {
        LOBYTE(v33) = v21;
        v34 = v22;
        v35 = v23;
        v8 = static ScrollPhaseState.== infix(_:_:)();
        if ((v8 & 1) == 0)
        {
          v32 = 0;
          goto LABEL_20;
        }
LABEL_27:
        result = swift_bridgeObjectRelease();
        goto LABEL_28;
      }
    }
    else
    {
      if (v17 == 5)
        goto LABEL_27;
      v22 = 0.0;
      v23 = 0.0;
    }
    LOBYTE(v21) = 5;
    v32 = 1;
LABEL_20:
    MEMORY[0x1E0C80A78](v8, v9);
    if ((UpdateCycleDetector.dispatch(label:isDebug:)() & 1) != 0)
    {
      AGGraphClearUpdate();
      LOBYTE(v36) = v17;
      v37 = v18;
      v38 = v19;
      v24 = v18;
      v25 = v19;
      if (v32)
        v26 = v17;
      else
        v26 = v21;
      if (!v32)
      {
        v24 = v22;
        v25 = v23;
      }
      LOBYTE(v33) = v26;
      v34 = v24;
      v35 = v25;
      v27 = OnScrollPhaseContextChangeModifier.PhaseContextActionProvider.makeAction(oldOutput:newOutput:)((char *)&v33, (char *)&v36);
      v29 = v28;
      AGGraphSetUpdate();
      Strong = swift_weakLoadStrong();
      v31 = (_QWORD *)swift_allocObject();
      v31[2] = v27;
      v31[3] = v29;
      v31[4] = Strong;
      swift_retain();
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();
      swift_release();
      swift_release();
    }
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
LABEL_6:
  result = swift_bridgeObjectRelease();
  v6 = (uint64_t *)(v1 + 40);
LABEL_28:
  *v6 = v3;
  return result;
}

void specialized AccessibilityBridgedPlatformView.updateValue()()
{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  char v5;
  _QWORD *v6;
  id v7;
  id v8;
  id v9;
  _QWORD *v10;
  id v11;
  id v12;
  uint64_t v13;
  id *OutputValue;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>(0);
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)(Value + 64);
  v2 = *(unsigned __int8 *)(Value + 72);
  v3 = *(_QWORD **)(Value + 80);
  v16 = *(void **)(Value + 88);
  v4 = *(void **)((char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x78));
  if ((v5 & 1) != 0 || !AGGraphGetOutputValue())
  {
    swift_retain();
    swift_retain();
    v9 = v4;
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of Environment<Color?>.Content(v1, v2);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v10 = v3;
    v11 = v16;
    v18 = v9;
    v19 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of Environment<Color?>.Content(v1, v2);
    v6 = v3;
    v7 = v16;
    v8 = v4;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v12 = v4;
  v17 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v20 = v13;
  v21 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v18 = v4;
  specialized Dictionary.subscript.setter((uint64_t)&v18, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
    __break(1u);
  v15 = *OutputValue;
  v18 = v15;
  v19 = v17;
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of Environment<Color?>.Content(v1, v2);

}

{
  uint64_t Value;
  char v1;
  char v2;
  _QWORD *v3;
  void *v4;
  id v5;
  _QWORD *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  id *OutputValue;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(0);
  Value = AGGraphGetValue();
  v2 = v1;
  v3 = *(_QWORD **)(Value + 8);
  v4 = *(void **)((char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x78));
  v5 = *(id *)Value;
  v6 = v3;
  swift_retain();
  v7 = objc_msgSend(v4, sel_view);
  if (!v7)
  {
    __break(1u);
    goto LABEL_8;
  }
  v8 = v7;
  if ((v2 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v14 = v8;
    v15 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v9 = v8;
  v13 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v16 = v10;
  v17 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v14 = v8;
  specialized Dictionary.subscript.setter((uint64_t)&v14, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
LABEL_8:
    __break(1u);
  v12 = *OutputValue;
  v14 = v12;
  v15 = v13;
  AGGraphSetOutputValue();
  swift_release();

  swift_bridgeObjectRelease();
}

{
  _QWORD *v0;
  void *v1;
  char v2;
  _QWORD *v3;
  id v4;
  id v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  id *OutputValue;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(0);
  v0 = *(_QWORD **)(AGGraphGetValue() + 8);
  v1 = *(void **)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78));
  if ((v2 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v5 = v1;
    swift_bridgeObjectRetain();
    v6 = v0;
    v12 = v5;
    v13 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRetain();
    v3 = v0;
    v4 = v1;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v7 = v1;
  v11 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v14 = v8;
  v15 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v12 = v1;
  specialized Dictionary.subscript.setter((uint64_t)&v12, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
    __break(1u);
  v10 = *OutputValue;
  v12 = v10;
  v13 = v11;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  _QWORD *v3;
  void *v4;
  char v5;
  _QWORD *v6;
  id v7;
  id v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  id *OutputValue;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(0);
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_BYTE *)(Value + 8);
  v3 = *(_QWORD **)(Value + 16);
  v4 = *(void **)((char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x78));
  if ((v5 & 1) != 0 || !AGGraphGetOutputValue())
  {
    v8 = v4;
    outlined copy of Environment<Bool>.Content(v1, v2);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v9 = v3;
    v15 = v8;
    v16 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  else
  {
    outlined copy of Environment<Bool>.Content(v1, v2);
    v6 = v3;
    v7 = v4;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v10 = v4;
  v14 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v17 = v11;
  v18 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v15 = v4;
  specialized Dictionary.subscript.setter((uint64_t)&v15, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
    __break(1u);
  v13 = *OutputValue;
  v15 = v13;
  v16 = v14;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  outlined consume of Environment<Bool>.Content(v1, v2);

}

{
  uint64_t Value;
  _QWORD *v1;
  void *v2;
  void *v3;
  char v4;
  _QWORD *v5;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  id v10;
  id v11;
  uint64_t v12;
  id *OutputValue;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(0);
  Value = AGGraphGetValue();
  v1 = *(_QWORD **)(Value + 16);
  v2 = *(void **)(Value + 24);
  v3 = *(void **)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x78));
  if ((v4 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v8 = v3;
    swift_bridgeObjectRetain();
    v9 = v1;
    v10 = v2;
    v16 = v8;
    v17 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRetain();
    v5 = v1;
    v6 = v2;
    v7 = v3;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v11 = v3;
  v15 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v18 = v12;
  v19 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v16 = v3;
  specialized Dictionary.subscript.setter((uint64_t)&v16, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
    __break(1u);
  v14 = *OutputValue;
  v16 = v14;
  v17 = v15;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

{
  uint64_t Value;
  char v1;
  char v2;
  _QWORD *v3;
  void *v4;
  id v5;
  _QWORD *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  id *OutputValue;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(0);
  Value = AGGraphGetValue();
  v2 = v1;
  v3 = *(_QWORD **)(Value + 8);
  v4 = *(void **)((char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x78));
  v5 = *(id *)Value;
  v6 = v3;
  v7 = objc_msgSend(v4, sel_view);
  if (!v7)
  {
    __break(1u);
    goto LABEL_8;
  }
  v8 = v7;
  if ((v2 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v14 = v8;
    v15 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v9 = v8;
  v13 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v16 = v10;
  v17 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v14 = v8;
  specialized Dictionary.subscript.setter((uint64_t)&v14, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
LABEL_8:
    __break(1u);
  v12 = *OutputValue;
  v14 = v12;
  v15 = v13;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
}

uint64_t specialized AccessibilityBridgedPlatformView.updateValue()()
{
  _QWORD *Value;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  char v6;
  _QWORD *v7;
  id v8;
  id v9;
  id v10;
  _QWORD *v11;
  id v12;
  id v13;
  uint64_t v14;
  id *OutputValue;
  id v16;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>(0);
  Value = (_QWORD *)AGGraphGetValue();
  v1 = Value[1];
  v2 = Value[3];
  v3 = (_QWORD *)Value[7];
  v4 = (void *)Value[8];
  v5 = *(void **)((char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x78));
  if ((v6 & 1) != 0 || !AGGraphGetOutputValue())
  {
    swift_retain();
    v10 = v5;
    outlined copy of AppIntentExecutor?(v1);
    outlined copy of AppIntentExecutor?(v2);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    swift_retain();
    v11 = v3;
    v12 = v4;
    v19 = v10;
    v20 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_retain();
    outlined copy of AppIntentExecutor?(v1);
    outlined copy of AppIntentExecutor?(v2);
    swift_retain();
    v7 = v3;
    v8 = v4;
    v9 = v5;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v13 = v5;
  v18 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v21 = v14;
  v22 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v19 = v5;
  specialized Dictionary.subscript.setter((uint64_t)&v19, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
    __break(1u);
  v16 = *OutputValue;
  v19 = v16;
  v20 = v18;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);

  return swift_release();
}

{
  uint64_t Value;
  char v1;
  char v2;
  _QWORD *v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id *OutputValue;
  id v10;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  _BYTE v19[104];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>(0);
  Value = AGGraphGetValue();
  v2 = v1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  v19[96] = v2 & 1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v19, (uint64_t)&v13, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  v18 = v2 & 1;
  v3 = v17;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v13, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  v4 = *(id *)((char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x78));

  if ((v2 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v5 = v4;
    v6 = Dictionary.init(minimumCapacity:)();
    v13 = v5;
    v14 = v6;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v7 = v4;
  v12 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v15 = v8;
  v16 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v13 = v4;
  specialized Dictionary.subscript.setter((uint64_t)&v13, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
    __break(1u);
  v10 = *OutputValue;
  v13 = v10;
  v14 = v12;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, changed: Bool)((uint64_t)v19, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>, changed: Bool), type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  char v10;
  _QWORD *v11;
  id v12;
  id v13;
  id v14;
  _QWORD *v15;
  id v16;
  id v17;
  uint64_t v18;
  id *OutputValue;
  id v20;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(0);
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_BYTE *)(Value + 8);
  v3 = *(unsigned __int8 *)(Value + 24);
  v4 = *(_BYTE *)(Value + 25);
  v24 = *(_QWORD *)(Value + 32);
  v25 = *(_QWORD *)(Value + 16);
  v5 = *(unsigned __int8 *)(Value + 40);
  v6 = *(_QWORD *)(Value + 48);
  v23 = *(_BYTE *)(Value + 56);
  v7 = *(_QWORD **)(Value + 88);
  v8 = *(void **)(Value + 96);
  v9 = *(void **)((char *)v7 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v7) + 0x78));
  v22 = v6;
  if ((v10 & 1) != 0 || !AGGraphGetOutputValue())
  {
    v14 = v9;
    outlined copy of Environment<Bool>.Content(v1, v2);
    outlined copy of Environment<CGFloat?>.Content(v25, v3, v4);
    outlined copy of Environment<Color?>.Content(v24, v5);
    outlined copy of Environment<Bool>.Content(v6, v23);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    swift_bridgeObjectRetain();
    swift_retain();
    v15 = v7;
    v16 = v8;
    v27 = v14;
    v28 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  else
  {
    outlined copy of Environment<Bool>.Content(v1, v2);
    outlined copy of Environment<CGFloat?>.Content(v25, v3, v4);
    outlined copy of Environment<Color?>.Content(v24, v5);
    outlined copy of Environment<Bool>.Content(v6, v23);
    swift_bridgeObjectRetain();
    swift_retain();
    v11 = v7;
    v12 = v8;
    v13 = v9;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v17 = v9;
  v26 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v29 = v18;
  v30 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v27 = v9;
  specialized Dictionary.subscript.setter((uint64_t)&v27, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
    __break(1u);
  v20 = *OutputValue;
  v27 = v20;
  v28 = v26;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  outlined consume of Environment<Bool>.Content(v1, v2);
  outlined consume of Environment<CGFloat?>.Content(v25, v3, v4);
  outlined consume of Environment<Color?>.Content(v24, v5);
  outlined consume of Environment<Bool>.Content(v22, v23);

  swift_release();
  return swift_bridgeObjectRelease();
}

{
  _QWORD *Value;
  void *v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  char v5;
  _QWORD *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD *v12;
  id v13;
  id v14;
  uint64_t v15;
  id *OutputValue;
  id v17;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(0);
  Value = (_QWORD *)AGGraphGetValue();
  v1 = (void *)Value[2];
  v2 = (_QWORD *)Value[6];
  v3 = (void *)Value[7];
  v4 = *(void **)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x78));
  if ((v5 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v10 = v4;
    swift_retain();
    swift_retain();
    v11 = v1;
    swift_bridgeObjectRetain();
    v12 = v2;
    v13 = v3;
    v20 = v10;
    v21 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRetain();
    v6 = v2;
    v7 = v3;
    v8 = v4;
    swift_retain();
    swift_retain();
    v9 = v1;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v14 = v4;
  v19 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v22 = v15;
  v23 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v20 = v4;
  specialized Dictionary.subscript.setter((uint64_t)&v20, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
    __break(1u);
  v17 = *OutputValue;
  v20 = v17;
  v21 = v19;
  AGGraphSetOutputValue();

  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_bridgeObjectRelease();
}

{
  uint64_t Value;
  char v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id *OutputValue;
  id v12;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  _BYTE v21[88];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(0);
  Value = AGGraphGetValue();
  v2 = v1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  v3 = v2 & 1;
  v21[80] = v2 & 1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v21, (uint64_t)&v15, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  v20 = v2 & 1;
  v4 = v19;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v15, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v4
                                                             + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x78)), sel_view));
  if (!v5)
  {
    __break(1u);
    goto LABEL_8;
  }
  v6 = v5;

  if (v3 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v7 = v6;
    v8 = Dictionary.init(minimumCapacity:)();
    v15 = v7;
    v16 = v8;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v9 = v6;
  v14 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v17 = v10;
  v18 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v15 = v6;
  specialized Dictionary.subscript.setter((uint64_t)&v15, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
LABEL_8:
    __break(1u);
  v12 = *OutputValue;
  v15 = v12;
  v16 = v14;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, changed: Bool)((uint64_t)v21, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>, changed: Bool), type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
}

{
  uint64_t Value;
  _QWORD *v1;
  void *v2;
  void *v3;
  char v4;
  _QWORD *v5;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  id v10;
  id v11;
  uint64_t v12;
  id *OutputValue;
  id v14;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(0);
  Value = AGGraphGetValue();
  v1 = *(_QWORD **)(Value + 40);
  v2 = *(void **)(Value + 48);
  v3 = *(void **)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x78));
  if ((v4 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v8 = v3;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v9 = v1;
    v10 = v2;
    v17 = v8;
    v18 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_retain();
    swift_retain();
    v5 = v1;
    v6 = v2;
    v7 = v3;
    swift_bridgeObjectRetain();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v11 = v3;
  v16 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v19 = v12;
  v20 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v17 = v3;
  specialized Dictionary.subscript.setter((uint64_t)&v17, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
    __break(1u);
  v14 = *OutputValue;
  v17 = v14;
  v18 = v16;
  AGGraphSetOutputValue();

  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_release();
}

{
  _QWORD *v0;
  void *v1;
  char v2;
  _QWORD *v3;
  id v4;
  id v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  id *OutputValue;
  id v10;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(0);
  v0 = *(_QWORD **)(AGGraphGetValue() + 16);
  v1 = *(void **)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78));
  if ((v2 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v5 = v1;
    swift_retain();
    v6 = v0;
    v13 = v5;
    v14 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_retain();
    v3 = v0;
    v4 = v1;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v7 = v1;
  v12 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v15 = v8;
  v16 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v13 = v1;
  specialized Dictionary.subscript.setter((uint64_t)&v13, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
    __break(1u);
  v10 = *OutputValue;
  v13 = v10;
  v14 = v12;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return swift_release();
}

{
  uint64_t Value;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  char v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  id *OutputValue;
  id v17;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[11];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(0);
  Value = AGGraphGetValue();
  v1 = *(_OWORD *)(Value + 48);
  v3 = *(_OWORD *)Value;
  v2 = *(_OWORD *)(Value + 16);
  v24[2] = *(_OWORD *)(Value + 32);
  v24[3] = v1;
  v24[0] = v3;
  v24[1] = v2;
  v4 = *(_OWORD *)(Value + 112);
  v6 = *(_OWORD *)(Value + 64);
  v5 = *(_OWORD *)(Value + 80);
  v24[6] = *(_OWORD *)(Value + 96);
  v24[7] = v4;
  v24[4] = v6;
  v24[5] = v5;
  v8 = *(_OWORD *)(Value + 144);
  v7 = *(_OWORD *)(Value + 160);
  v9 = *(_OWORD *)(Value + 128);
  v25 = *(_QWORD **)(Value + 176);
  v24[9] = v8;
  v24[10] = v7;
  v24[8] = v9;
  v10 = *(void **)((char *)v25 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v25) + 0x78));
  if ((v11 & 1) != 0 || !AGGraphGetOutputValue())
  {
    v13 = v10;
    outlined retain of ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)v24);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v20 = v13;
    v21 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  else
  {
    outlined retain of ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)v24);
    v12 = v10;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v14 = v10;
  v19 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v22 = v15;
  v23 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v20 = v10;
  specialized Dictionary.subscript.setter((uint64_t)&v20, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
    __break(1u);
  v17 = *OutputValue;
  v20 = v17;
  v21 = v19;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined release of ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)v24);
}

{
  uint64_t Value;
  char v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id *OutputValue;
  id v12;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  _BYTE v21[392];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(0);
  Value = AGGraphGetValue();
  v2 = v1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  v3 = v2 & 1;
  v21[384] = v2 & 1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v21, (uint64_t)&v15, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  v20 = v2 & 1;
  v4 = v19;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v15, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v4
                                                             + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x78)), sel_view));
  if (!v5)
  {
    __break(1u);
    goto LABEL_8;
  }
  v6 = v5;

  if (v3 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v7 = v6;
    v8 = Dictionary.init(minimumCapacity:)();
    v15 = v7;
    v16 = v8;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v9 = v6;
  v14 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v17 = v10;
  v18 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v15 = v6;
  specialized Dictionary.subscript.setter((uint64_t)&v15, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
LABEL_8:
    __break(1u);
  v12 = *OutputValue;
  v15 = v12;
  v16 = v14;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, changed: Bool)((uint64_t)v21, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>, changed: Bool), type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
}

{
  uint64_t Value;
  char v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id *OutputValue;
  id v12;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  _BYTE v21[200];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(0);
  Value = AGGraphGetValue();
  v2 = v1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  v3 = v2 & 1;
  v21[192] = v2 & 1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v21, (uint64_t)&v15, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  v20 = v2 & 1;
  v4 = v19;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v15, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v4
                                                             + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x78)), sel_view));
  if (!v5)
  {
    __break(1u);
    goto LABEL_8;
  }
  v6 = v5;

  if (v3 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v7 = v6;
    v8 = Dictionary.init(minimumCapacity:)();
    v15 = v7;
    v16 = v8;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v9 = v6;
  v14 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v17 = v10;
  v18 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v15 = v6;
  specialized Dictionary.subscript.setter((uint64_t)&v15, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
LABEL_8:
    __break(1u);
  v12 = *OutputValue;
  v15 = v12;
  v16 = v14;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, changed: Bool)((uint64_t)v21, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>, changed: Bool), type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
}

{
  uint64_t Value;
  char v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id *OutputValue;
  id v12;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  _BYTE v21[208];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(0);
  Value = AGGraphGetValue();
  v2 = v1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  v3 = v2 & 1;
  v21[200] = v2 & 1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v21, (uint64_t)&v15, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  v20 = v2 & 1;
  v4 = v19;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v15, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v4
                                                             + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x78)), sel_view));
  if (!v5)
  {
    __break(1u);
    goto LABEL_8;
  }
  v6 = v5;

  if (v3 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v7 = v6;
    v8 = Dictionary.init(minimumCapacity:)();
    v15 = v7;
    v16 = v8;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v9 = v6;
  v14 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v17 = v10;
  v18 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v15 = v6;
  specialized Dictionary.subscript.setter((uint64_t)&v15, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
LABEL_8:
    __break(1u);
  v12 = *OutputValue;
  v15 = v12;
  v16 = v14;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, changed: Bool)((uint64_t)v21, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>, changed: Bool), type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
}

{
  uint64_t Value;
  _QWORD *v1;
  void *v2;
  void *v3;
  char v4;
  _QWORD *v5;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  id v10;
  id v11;
  uint64_t v12;
  id *OutputValue;
  id v14;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>(0);
  Value = AGGraphGetValue();
  v1 = *(_QWORD **)(Value + 48);
  v2 = *(void **)(Value + 56);
  v3 = *(void **)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x78));
  if ((v4 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v8 = v3;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v9 = v1;
    v10 = v2;
    v17 = v8;
    v18 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_retain();
    swift_retain();
    v5 = v1;
    v6 = v2;
    v7 = v3;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v11 = v3;
  v16 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v19 = v12;
  v20 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v17 = v3;
  specialized Dictionary.subscript.setter((uint64_t)&v17, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
    __break(1u);
  v14 = *OutputValue;
  v17 = v14;
  v18 = v16;
  AGGraphSetOutputValue();

  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t specialized AccessibilityBridgedPlatformView.updateValue()(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(uint64_t, char *), void (*a4)(char *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Value;
  char v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id *OutputValue;
  id v32;
  unint64_t *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v34 = a1;
  type metadata accessor for (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, changed: Bool)(0, a1, a2);
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v34 - v15;
  v18 = *(int *)(v17 + 48);
  v19 = ((uint64_t (*)(_QWORD, double))a2)(0, v14);
  Value = AGGraphGetValue();
  v22 = v21;
  a3(Value, v16);
  v16[v18] = v22 & 1;
  v23 = *(int *)(v8 + 48);
  a3((uint64_t)v16, v11);
  v11[v23] = v22 & 1;
  v24 = *(id *)&v11[*(int *)(v19 + 36)];
  a4(v11);
  v25 = *(id *)((char *)v24 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v24) + 0x78));

  if ((v22 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v26 = v25;
    v27 = Dictionary.init(minimumCapacity:)();
    v36 = v26;
    v37 = v27;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v28 = v25;
  v35 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v38 = v29;
  v39 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v36 = v25;
  specialized Dictionary.subscript.setter((uint64_t)&v36, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  v30 = v35;
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
    __break(1u);
  v32 = *OutputValue;
  v36 = v32;
  v37 = v30;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, changed: Bool)((uint64_t)v16, v34, a2);
}

uint64_t specialized AccessibilityBridgedPlatformView.updateValue()(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Value;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id *OutputValue;
  id v31;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  type metadata accessor for (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, changed: Bool)(0, a1, a2);
  v5 = v4;
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v33 - v12;
  v15 = *(int *)(v14 + 48);
  v16 = ((uint64_t (*)(_QWORD, double))a2)(0, v11);
  Value = AGGraphGetValue();
  v19 = v18;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v13, (uint64_t (*)(_QWORD))a2);
  v20 = v19 & 1;
  v13[v15] = v19 & 1;
  v21 = *(int *)(v5 + 48);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, (uint64_t)v8, (uint64_t (*)(_QWORD))a2);
  v8[v21] = v20;
  v22 = *(id *)&v8[*(int *)(v16 + 36)];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))a2);
  v23 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v22
                                                              + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v22) + 0x78)), sel_view));
  if (!v23)
  {
    __break(1u);
    goto LABEL_8;
  }
  v24 = v23;

  if (v20 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v25 = v24;
    v26 = Dictionary.init(minimumCapacity:)();
    v35 = v25;
    v36 = v26;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v27 = v24;
  v34 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  v37 = v28;
  v38 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, MEMORY[0x1E0CE6310]);
  v35 = v24;
  specialized Dictionary.subscript.setter((uint64_t)&v35, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  v29 = v34;
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
LABEL_8:
    __break(1u);
  v31 = *OutputValue;
  v35 = v31;
  v36 = v29;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, changed: Bool)((uint64_t)v13, a1, a2);
}

uint64_t specialized PlatformItemsTransform.updateValue()()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Value;
  char v6;
  char v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x1E0CFED28])
  {
    v1 = 0;
    v2 = 0;
    v3 = 0;
    v4 = (char *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    Value = AGGraphGetValue();
    v7 = v6;
    v8 = *(_QWORD *)Value;
    v9 = *(_DWORD *)(Value + 8);
    v10 = swift_bridgeObjectRetain();
    if (v10)
      v1 = v7 & 1;
    else
      v1 = 0;
    if (v10)
      v2 = v9;
    else
      v2 = 0;
    if (v10)
      v3 = v8;
    else
      v3 = 0;
    if (v10)
      v4 = (char *)v10;
    else
      v4 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v11 = (uint64_t *)AGGraphGetValue();
  v13 = v12;
  v14 = *v11;
  v15 = v11[1];
  if (AGGraphGetOutputValue())
    v16 = (v13 & 1) == 0;
  else
    v16 = 0;
  if (v16 && v1 == 0)
    return swift_bridgeObjectRelease();
  v18 = *((_QWORD *)v4 + 2);
  swift_bridgeObjectRetain();
  if (v18)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_59;
    while (1)
    {
      v19 = 0;
      v20 = 32;
      while (v19 < *((_QWORD *)v4 + 2))
      {
        outlined init with copy of PlatformItem((uint64_t)&v4[v20], (uint64_t)&v33);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v36 = v14;
        v37 = v15;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
        if (v19 >= *((_QWORD *)v4 + 2))
          goto LABEL_56;
        ++v19;
        outlined assign with copy of PlatformItem((uint64_t)&v33, (uint64_t)&v4[v20]);
        outlined destroy of PlatformItem((uint64_t)&v33);
        v20 += 336;
        if (v18 == v19)
          goto LABEL_32;
      }
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
    }
  }
LABEL_32:
  v22 = *(_DWORD *)(v0 + 8);
  v23 = (v22 + 1);
  v24 = v22 == -1;
  *(_DWORD *)(v0 + 8) = v23;
  if ((_DWORD)v2 != -1 && !v24)
  {
    if ((_DWORD)v2 && (_DWORD)v23 != -1)
    {
      v25 = (v23 | (v2 << 32)) + ~(v23 << 32);
      v26 = 9
          * (((v25 ^ (v25 >> 22)) + ~((v25 ^ (v25 >> 22)) << 13)) ^ (((v25 ^ (v25 >> 22)) + ~((v25 ^ (v25 >> 22)) << 13)) >> 8));
      v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
      LODWORD(v23) = (v27 >> 31) ^ v27;
    }
    v2 = *((_QWORD *)v4 + 2);
    if (!v2)
      goto LABEL_54;
LABEL_40:
    v15 = 0;
    v18 = 32;
    while (v15 < *((_QWORD *)v4 + 2))
    {
      v28 = *(unsigned int *)(v0 + 8);
      outlined init with copy of PlatformItem((uint64_t)&v4[v18], (uint64_t)&v33);
      if ((_DWORD)v35 != -1 && (_DWORD)v28 != 0)
      {
        if ((_DWORD)v35 && (_DWORD)v28 != -1)
        {
          v30 = (v28 | ((unint64_t)v35 << 32)) + ~(v28 << 32);
          v31 = (v30 ^ (v30 >> 22)) + ~((v30 ^ (v30 >> 22)) << 13);
          v32 = (9 * (v31 ^ (v31 >> 8))) ^ ((9 * (v31 ^ (v31 >> 8))) >> 15);
          LODWORD(v28) = ((v32 + ~(v32 << 27)) >> 31) ^ (v32 + ~((_DWORD)v32 << 27));
        }
        LODWORD(v35) = v28;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
      if (v15 >= *((_QWORD *)v4 + 2))
        goto LABEL_58;
      ++v15;
      outlined assign with copy of PlatformItem((uint64_t)&v33, (uint64_t)&v4[v18]);
      outlined destroy of PlatformItem((uint64_t)&v33);
      v18 += 336;
      if (v2 == v15)
        goto LABEL_54;
    }
    goto LABEL_57;
  }
  LODWORD(v23) = v2;
  v2 = *((_QWORD *)v4 + 2);
  if (v2)
    goto LABEL_40;
LABEL_54:
  v33 = v3;
  v34 = v23;
  v35 = v4;
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Value;
  char v6;
  char v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  BOOL v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  int v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char *v38;
  _BYTE v39[96];
  _BYTE v40[64];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x1E0CFED28])
  {
    v1 = 0;
    v2 = 0;
    v3 = 0;
    v4 = (char *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    Value = AGGraphGetValue();
    v7 = v6;
    v8 = *(_QWORD *)Value;
    v9 = *(_DWORD *)(Value + 8);
    v10 = swift_bridgeObjectRetain();
    if (v10)
      v1 = v7 & 1;
    else
      v1 = 0;
    if (v10)
      v2 = v9;
    else
      v2 = 0;
    if (v10)
      v3 = v8;
    else
      v3 = 0;
    if (v10)
      v4 = (char *)v10;
    else
      v4 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v11 = AGGraphGetValue();
  v13 = v12;
  outlined init with copy of PlatformButtonActionTransform(v11, (uint64_t)v40);
  if (AGGraphGetOutputValue())
    v14 = (v13 & 1) == 0;
  else
    v14 = 0;
  if (!v14 || v1 != 0)
  {
    v16 = *((_QWORD *)v4 + 2);
    v35 = v3;
    if (v16)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_58;
      while (1)
      {
        v17 = 0;
        v18 = 32;
        v19 = MEMORY[0x1E0DEB940];
        while (v17 < *((_QWORD *)v4 + 2))
        {
          outlined init with copy of PlatformItem((uint64_t)&v4[v18], (uint64_t)&v36);
          outlined destroy of AccessibilityScrollableContext?((uint64_t)v39, &lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent, (uint64_t (*)(_QWORD, uint64_t))v19);
          outlined init with copy of PlatformItem.SelectionContent((uint64_t)v40, (uint64_t)v39);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
          if (v17 >= *((_QWORD *)v4 + 2))
            goto LABEL_55;
          ++v17;
          outlined assign with copy of PlatformItem((uint64_t)&v36, (uint64_t)&v4[v18]);
          outlined destroy of PlatformItem((uint64_t)&v36);
          v18 += 336;
          if (v16 == v17)
            goto LABEL_30;
        }
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
      }
    }
LABEL_30:
    v20 = *(_DWORD *)(v0 + 8);
    v21 = (v20 + 1);
    v22 = v20 == -1;
    *(_DWORD *)(v0 + 8) = v21;
    if ((_DWORD)v2 == -1 || v22)
    {
      LODWORD(v21) = v2;
      v26 = *((_QWORD *)v4 + 2);
      if (!v26)
      {
LABEL_52:
        v36 = v35;
        v37 = v21;
        v38 = v4;
        AGGraphSetOutputValue();
        goto LABEL_53;
      }
    }
    else
    {
      if ((_DWORD)v2 && (_DWORD)v21 != -1)
      {
        v23 = (v21 | (v2 << 32)) + ~(v21 << 32);
        v24 = 9
            * (((v23 ^ (v23 >> 22)) + ~((v23 ^ (v23 >> 22)) << 13)) ^ (((v23 ^ (v23 >> 22))
                                                                      + ~((v23 ^ (v23 >> 22)) << 13)) >> 8));
        v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
        LODWORD(v21) = (v25 >> 31) ^ v25;
      }
      v26 = *((_QWORD *)v4 + 2);
      if (!v26)
        goto LABEL_52;
    }
    v27 = 0;
    v28 = 32;
    v2 = -1;
    while (v27 < *((_QWORD *)v4 + 2))
    {
      v29 = *(unsigned int *)(v0 + 8);
      outlined init with copy of PlatformItem((uint64_t)&v4[v28], (uint64_t)&v36);
      if ((_DWORD)v38 != -1 && (_DWORD)v29 != 0)
      {
        if ((_DWORD)v38 && (_DWORD)v29 != -1)
        {
          v31 = (v29 | ((unint64_t)v38 << 32)) + ~(v29 << 32);
          v32 = (v31 ^ (v31 >> 22)) + ~((v31 ^ (v31 >> 22)) << 13);
          v33 = (9 * (v32 ^ (v32 >> 8))) ^ ((9 * (v32 ^ (v32 >> 8))) >> 15);
          LODWORD(v29) = ((v33 + ~(v33 << 27)) >> 31) ^ (v33 + ~((_DWORD)v33 << 27));
        }
        LODWORD(v38) = v29;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
      if (v27 >= *((_QWORD *)v4 + 2))
        goto LABEL_57;
      ++v27;
      outlined assign with copy of PlatformItem((uint64_t)&v36, (uint64_t)&v4[v28]);
      outlined destroy of PlatformItem((uint64_t)&v36);
      v28 += 336;
      if (v26 == v27)
        goto LABEL_52;
    }
    goto LABEL_56;
  }
LABEL_53:
  outlined destroy of PlatformButtonActionTransform((uint64_t)v40);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t Value;
  char v6;
  char v7;
  char *v8;
  uint64_t v9;
  char v10;
  char v11;
  BOOL v12;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  int v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  _BYTE v36[216];
  uint64_t v37[27];
  _BYTE v38[216];
  uint64_t v39[27];
  _BYTE v40[216];
  uint64_t v41[27];
  char *v42;
  int v43;
  char *v44;
  id v45[2];
  id v46;
  _BYTE v47[216];
  uint64_t v48[29];

  v48[27] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x1E0CFED28])
  {
    v1 = 0;
    v2 = 0;
    v3 = 0;
    v4 = (char *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    Value = AGGraphGetValue();
    v7 = v6;
    v8 = *(char **)Value;
    LODWORD(v2) = *(_DWORD *)(Value + 8);
    v9 = swift_bridgeObjectRetain();
    if (v9)
      v1 = v7 & 1;
    else
      v1 = 0;
    if (v9)
      v2 = v2;
    else
      v2 = 0;
    if (v9)
      v3 = v8;
    else
      v3 = 0;
    if (v9)
      v4 = (char *)v9;
    else
      v4 = (char *)MEMORY[0x1E0DEE9D8];
  }
  AGGraphGetValue();
  v11 = v10;
  if (AGGraphGetOutputValue())
    v12 = (v11 & 1) == 0;
  else
    v12 = 0;
  if (v12 && v1 == 0)
    return swift_bridgeObjectRelease();
  v14 = (uint64_t *)*((_QWORD *)v4 + 2);
  if (!v14)
    goto LABEL_42;
  v34 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_69;
  while (1)
  {
    v35 = v3;
    if (!*((_QWORD *)v4 + 2))
    {
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    v15 = 0;
    v3 = (char *)v14 - 1;
    v16 = 32;
    v14 = &lazy cache variable for type metadata for PlatformItem.PrimaryContent?;
    while (1)
    {
      outlined init with copy of PlatformItem((uint64_t)&v4[v16], (uint64_t)&v42);
      outlined init with take of Image.Resolved?((uint64_t)v45, (uint64_t)v47, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
      outlined init with take of Image.Resolved?((uint64_t)v47, (uint64_t)v48, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
      if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v48) != 1)
      {
        v17 = v45[0];
        if (v45[0])
        {
          outlined init with take of Image.Resolved?((uint64_t)v45, (uint64_t)v40, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
          outlined init with take of Image.Resolved?((uint64_t)v40, (uint64_t)v41, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
          if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v41) == 1 || !v46)
          {
            outlined init with take of Image.Resolved?((uint64_t)v45, (uint64_t)v38, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
            outlined init with take of Image.Resolved?((uint64_t)v38, (uint64_t)v39, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
            if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v39) != 1)
            {
              v18 = v46;
              v19 = v17;

              v46 = v17;
            }
            outlined init with take of Image.Resolved?((uint64_t)v45, (uint64_t)v36, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
            outlined init with take of Image.Resolved?((uint64_t)v36, (uint64_t)v37, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
            if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v37) != 1)
            {

              v45[0] = 0;
            }
          }
        }
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
      if ((unint64_t)v15 >= *((_QWORD *)v4 + 2))
        goto LABEL_66;
      outlined assign with copy of PlatformItem((uint64_t)&v42, (uint64_t)&v4[v16]);
      outlined destroy of PlatformItem((uint64_t)&v42);
      if (v3 == v15)
        break;
      ++v15;
      v16 += 336;
      if ((unint64_t)v15 >= *((_QWORD *)v4 + 2))
        goto LABEL_65;
    }
    v2 = v34;
    v3 = v35;
LABEL_42:
    v21 = *(_DWORD *)(v0 + 8);
    v22 = (v21 + 1);
    v23 = v21 == -1;
    *(_DWORD *)(v0 + 8) = v22;
    if ((_DWORD)v2 == -1 || v23)
    {
      LODWORD(v22) = v2;
      v14 = (uint64_t *)*((_QWORD *)v4 + 2);
      if (!v14)
        break;
      goto LABEL_50;
    }
    if ((_DWORD)v2 && (_DWORD)v22 != -1)
    {
      v24 = (v22 | (v2 << 32)) + ~(v22 << 32);
      v25 = 9
          * (((v24 ^ (v24 >> 22)) + ~((v24 ^ (v24 >> 22)) << 13)) ^ (((v24 ^ (v24 >> 22)) + ~((v24 ^ (v24 >> 22)) << 13)) >> 8));
      v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
      LODWORD(v22) = (v26 >> 31) ^ v26;
    }
    v14 = (uint64_t *)*((_QWORD *)v4 + 2);
    if (!v14)
      break;
LABEL_50:
    v27 = 0;
    v28 = 32;
    while ((unint64_t)v27 < *((_QWORD *)v4 + 2))
    {
      v29 = *(unsigned int *)(v0 + 8);
      outlined init with copy of PlatformItem((uint64_t)&v4[v28], (uint64_t)&v42);
      if ((_DWORD)v44 != -1 && (_DWORD)v29 != 0)
      {
        if ((_DWORD)v44 && (_DWORD)v29 != -1)
        {
          v31 = (v29 | ((unint64_t)v44 << 32)) + ~(v29 << 32);
          v32 = (v31 ^ (v31 >> 22)) + ~((v31 ^ (v31 >> 22)) << 13);
          v33 = (9 * (v32 ^ (v32 >> 8))) ^ ((9 * (v32 ^ (v32 >> 8))) >> 15);
          LODWORD(v29) = ((v33 + ~(v33 << 27)) >> 31) ^ (v33 + ~((_DWORD)v33 << 27));
        }
        LODWORD(v44) = v29;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
      if ((unint64_t)v27 >= *((_QWORD *)v4 + 2))
        goto LABEL_68;
      v27 = (uint64_t *)((char *)v27 + 1);
      outlined assign with copy of PlatformItem((uint64_t)&v42, (uint64_t)&v4[v28]);
      outlined destroy of PlatformItem((uint64_t)&v42);
      v28 += 336;
      if (v14 == v27)
        goto LABEL_64;
    }
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
  }
LABEL_64:
  v42 = v3;
  v43 = v22;
  v44 = v4;
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Value;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  BOOL v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  ValueMetadata *v18;
  uint64_t (*v19)(void);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t (*v24)(void);
  uint64_t *v25;
  ValueMetadata *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t *v31;
  ValueMetadata *v32;
  uint64_t v33;
  int v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _OWORD v53[2];
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[40];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[11];

  v69[9] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x1E0CFED28])
  {
    v1 = 0;
    v2 = 0;
    v3 = 0;
    v4 = (char *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    Value = AGGraphGetValue();
    v7 = v6;
    v3 = *(_QWORD *)Value;
    LODWORD(v2) = *(_DWORD *)(Value + 8);
    v8 = swift_bridgeObjectRetain();
    if (v8)
      v1 = v7 & 1;
    else
      v1 = 0;
    if (v8)
      v2 = v2;
    else
      v2 = 0;
    if (v8)
    {
      v4 = (char *)v8;
    }
    else
    {
      v3 = 0;
      v4 = (char *)MEMORY[0x1E0DEE9D8];
    }
  }
  AGGraphGetValue();
  v10 = v9;
  if (AGGraphGetOutputValue())
    v11 = (v10 & 1) == 0;
  else
    v11 = 0;
  if (v11 && v1 == 0)
    return swift_bridgeObjectRelease();
  v50 = v2;
  v51 = v0;
  v13 = *((_QWORD *)v4 + 2);
  v49 = v3;
  if (v13)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_63;
    while (1)
    {
      v14 = 0;
      v15 = &v67;
      v16 = 32;
      v17 = &lazy cache variable for type metadata for PlatformItem.SelectionContent?;
      v18 = &type metadata for PlatformItem.SelectionContent;
      v19 = MEMORY[0x1E0DEB940];
      while (v14 < *((_QWORD *)v4 + 2))
      {
        outlined init with copy of PlatformItem((uint64_t)&v4[v16], (uint64_t)&v64);
        outlined init with copy of AccessibilityScrollableContext?((uint64_t)v15, (uint64_t)&v60, v17, (uint64_t)v18, (uint64_t (*)(_QWORD, uint64_t))v19);
        v20 = v63;
        outlined destroy of AccessibilityScrollableContext?((uint64_t)&v60, v17, (uint64_t)v18, (uint64_t (*)(_QWORD, uint64_t))v19);
        if (v20 == 1)
        {
          type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy);
          v21 = AGGraphGetValue();
          outlined init with copy of TableColumnList(v21, (uint64_t)v59);
          v22 = AGCreateWeakAttribute();
          v23 = v22;
          v52 = v4;
          v24 = v19;
          v25 = v15;
          v26 = v18;
          v27 = v17;
          v28 = HIDWORD(v22);
          v29 = AGCreateWeakAttribute();
          v54 = 0;
          memset(v53, 0, sizeof(v53));
          v62 = 0u;
          v63 = 0u;
          v61 = 0u;
          *(_QWORD *)&v60 = __PAIR64__(v28, v23);
          v17 = v27;
          v18 = v26;
          v15 = v25;
          v19 = v24;
          v4 = v52;
          *((_QWORD *)&v60 + 1) = v29;
          outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v53, (uint64_t)&v61 + 8, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent);
          v55 = v60;
          *((_QWORD *)&v56 + 1) = *((_QWORD *)&v61 + 1);
          v57 = v62;
          v58 = v63;
          *(_QWORD *)&v56 = 8;
          outlined assign with copy of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v59, (uint64_t)&v56 + 8);
          v60 = v55;
          v61 = v56;
          v62 = v57;
          v63 = v58;
          outlined destroy of AccessibilityScrollableContext?((uint64_t)v59, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent, (uint64_t (*)(_QWORD, uint64_t))v19);
          v30 = v15;
          v31 = v17;
          v32 = v18;
        }
        else
        {
          if (v69[3] == 1)
            goto LABEL_30;
          if ((v68 & 8) == 0)
            v68 |= 8uLL;
          type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy);
          v33 = AGGraphGetValue();
          outlined init with copy of TableColumnList(v33, (uint64_t)&v60);
          v30 = v69;
          v31 = &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?;
          v32 = &type metadata for PlatformItem.SelectionContent.AuxiliaryContent;
        }
        outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)&v60, (uint64_t)v30, v31, (uint64_t)v32);
LABEL_30:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
        if (v14 >= *((_QWORD *)v4 + 2))
          goto LABEL_60;
        ++v14;
        outlined assign with copy of PlatformItem((uint64_t)&v64, (uint64_t)&v4[v16]);
        outlined destroy of PlatformItem((uint64_t)&v64);
        v16 += 336;
        if (v13 == v14)
          goto LABEL_36;
      }
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
    }
  }
LABEL_36:
  v35 = *(_DWORD *)(v51 + 8);
  v36 = (v35 + 1);
  v37 = v35 == -1;
  *(_DWORD *)(v51 + 8) = v36;
  if ((_DWORD)v50 != -1 && !v37)
  {
    if ((_DWORD)v50 && (_DWORD)v36 != -1)
    {
      v38 = ((v36 | (v50 << 32)) + ~(v36 << 32)) ^ (((v36 | (unint64_t)(v50 << 32)) + ~(v36 << 32)) >> 22);
      v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
      v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
      LODWORD(v36) = (v40 >> 31) ^ v40;
    }
    v41 = *((_QWORD *)v4 + 2);
    if (!v41)
      goto LABEL_58;
LABEL_44:
    v42 = 0;
    v43 = 32;
    while (v42 < *((_QWORD *)v4 + 2))
    {
      v44 = *(unsigned int *)(v51 + 8);
      outlined init with copy of PlatformItem((uint64_t)&v4[v43], (uint64_t)&v64);
      if ((_DWORD)v66 != -1 && (_DWORD)v44 != 0)
      {
        if ((_DWORD)v66 && (_DWORD)v44 != -1)
        {
          v46 = (v44 | ((unint64_t)v66 << 32)) + ~(v44 << 32);
          v47 = (v46 ^ (v46 >> 22)) + ~((v46 ^ (v46 >> 22)) << 13);
          v48 = (9 * (v47 ^ (v47 >> 8))) ^ ((9 * (v47 ^ (v47 >> 8))) >> 15);
          LODWORD(v44) = ((v48 + ~(v48 << 27)) >> 31) ^ (v48 + ~((_DWORD)v48 << 27));
        }
        LODWORD(v66) = v44;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
      if (v42 >= *((_QWORD *)v4 + 2))
        goto LABEL_62;
      ++v42;
      outlined assign with copy of PlatformItem((uint64_t)&v64, (uint64_t)&v4[v43]);
      outlined destroy of PlatformItem((uint64_t)&v64);
      v43 += 336;
      if (v41 == v42)
        goto LABEL_58;
    }
    goto LABEL_61;
  }
  LODWORD(v36) = v50;
  v41 = *((_QWORD *)v4 + 2);
  if (v41)
    goto LABEL_44;
LABEL_58:
  v64 = v49;
  v65 = v36;
  v66 = v4;
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized PlatformItemRule.updateValue()()
{
  uint64_t v0;
  _DWORD *v1;
  void *v2;
  int v3;
  int v4;
  int v5;
  id *Value;
  char v7;
  char v8;
  id v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  char v13;
  int v14;
  char v15;
  uint64_t (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  id v20[2];
  int v21;
  _BYTE v22[232];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[13];
  uint64_t v31;
  _BYTE v32[184];
  __int128 v33;
  _OWORD v34[11];
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v1 = (_DWORD *)v0;
  v37 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(v0 + 24);
  v3 = *(_DWORD *)(v0 + 32);
  v4 = *(_DWORD *)(v0 + 36);
  v5 = *(_DWORD *)(v0 + 40);
  Value = (id *)AGGraphGetValue();
  v8 = v7;
  v20[0] = *Value;
  v9 = v20[0];
  v10 = PlatformTextRepresentableContext.text.getter();

  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v32);
  *(_QWORD *)&v34[0] = 0;
  v33 = (unint64_t)v10;
  outlined init with take of Image.Resolved?((uint64_t)v32, (uint64_t)v34 + 8, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  BYTE11(v35) = 0;
  v36 = 0;
  v11 = *(_DWORD *)AGGraphGetValue() >> 1;
  v12 = v11 != v4 || v3 == 0;
  v13 = v12;
  if (v12)
  {
    v3 = static ViewIdentity.nextSeed;
    if ((static ViewIdentity.nextSeed + 1) > 1)
      v14 = static ViewIdentity.nextSeed + 1;
    else
      v14 = 1;
    static ViewIdentity.nextSeed = v14;
    v1[8] = v3;
    v1[9] = v11;
  }
  if (AGGraphGetOutputValue())
    v15 = v13;
  else
    v15 = 1;
  if ((v15 & 1) == 0 && (v8 & 1) == 0)
    return outlined release of PlatformItem.PrimaryContent((uint64_t)&v33);
  v1[10] = v5 + 1;
  v17 = MEMORY[0x1E0DED1E8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ViewIdentity>, (uint64_t)&type metadata for ViewIdentity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_187BF9830;
  *(_DWORD *)(v18 + 32) = v3;
  v30[10] = v34[9];
  v30[11] = v34[10];
  v30[12] = v35;
  v31 = v36;
  v30[6] = v34[5];
  v30[7] = v34[6];
  v30[8] = v34[7];
  v30[9] = v34[8];
  v30[2] = v34[1];
  v30[3] = v34[2];
  v30[4] = v34[3];
  v30[5] = v34[4];
  v30[0] = v33;
  v30[1] = v34[0];
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v30);
  *(_OWORD *)&v22[216] = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = xmmword_187BFE310;
  v20[0] = (id)v18;
  v20[1] = v2;
  v21 = v5 + 1;
  outlined init with take of Image.Resolved?((uint64_t)v30, (uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
  v26 = 0;
  v27 = 1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItem>, (uint64_t)&type metadata for PlatformItem, (uint64_t (*)(_QWORD, uint64_t))v17);
  v28 = 0;
  v29 = 0;
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_187BF9830;
  outlined init with copy of PlatformItem((uint64_t)v20, v19 + 32);
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  return outlined destroy of PlatformItem((uint64_t)v20);
}

{
  uint64_t v0;
  char *Value;
  char v2;
  char v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  int v17;
  uint64_t OutputValue;
  int v20;
  uint64_t (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  int v26;
  _BYTE v27[232];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[13];
  uint64_t v36;
  _OWORD v37[10];
  _BYTE v38[19];
  _BYTE __dst[184];
  __int128 v40;
  _OWORD v41[11];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  Value = (char *)AGGraphGetValue();
  v3 = v2;
  v4 = *((_OWORD *)Value + 3);
  v6 = *(_OWORD *)Value;
  v5 = *((_OWORD *)Value + 1);
  v37[2] = *((_OWORD *)Value + 2);
  v37[3] = v4;
  v37[0] = v6;
  v37[1] = v5;
  v7 = *((_OWORD *)Value + 7);
  v9 = *((_OWORD *)Value + 4);
  v8 = *((_OWORD *)Value + 5);
  v37[6] = *((_OWORD *)Value + 6);
  v37[7] = v7;
  v37[4] = v9;
  v37[5] = v8;
  v11 = *((_OWORD *)Value + 9);
  v10 = *((_OWORD *)Value + 10);
  v12 = *(_DWORD *)(Value + 175);
  v37[8] = *((_OWORD *)Value + 8);
  *(_DWORD *)&v38[15] = v12;
  v37[9] = v11;
  *(_OWORD *)v38 = v10;
  v13 = *((_QWORD *)Value + 24);
  memmove(__dst, Value, 0xB3uLL);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__dst);
  v40 = 0uLL;
  *(_QWORD *)&v41[0] = 0;
  outlined init with take of Image.Resolved?((uint64_t)__dst, (uint64_t)v41 + 8, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  v14 = 1;
  BYTE11(v42) = 1;
  v43 = v13;
  v15 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v15 == *(_DWORD *)(v0 + 36) && (v16 = *(_DWORD *)(v0 + 32)) != 0)
  {
    v14 = 0;
  }
  else
  {
    v16 = static ViewIdentity.nextSeed;
    if ((static ViewIdentity.nextSeed + 1) > 1)
      v17 = static ViewIdentity.nextSeed + 1;
    else
      v17 = 1;
    static ViewIdentity.nextSeed = v17;
    *(_DWORD *)(v0 + 32) = v16;
    *(_DWORD *)(v0 + 36) = v15;
  }
  OutputValue = AGGraphGetOutputValue();
  if ((v14 & 1) != 0 || !OutputValue || (v3 & 1) != 0)
  {
    v20 = *(_DWORD *)(v0 + 40) + 1;
    *(_DWORD *)(v0 + 40) = v20;
    v21 = MEMORY[0x1E0DED1E8];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ViewIdentity>, (uint64_t)&type metadata for ViewIdentity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_187BF9830;
    *(_DWORD *)(v22 + 32) = v16;
    v23 = *(_QWORD *)(v0 + 24);
    v35[10] = v41[9];
    v35[11] = v41[10];
    v35[12] = v42;
    v36 = v43;
    v35[6] = v41[5];
    v35[7] = v41[6];
    v35[8] = v41[7];
    v35[9] = v41[8];
    v35[2] = v41[1];
    v35[3] = v41[2];
    v35[4] = v41[3];
    v35[5] = v41[4];
    v35[0] = v40;
    v35[1] = v41[0];
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v35);
    *(_OWORD *)&v27[216] = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = xmmword_187BFE310;
    v25[0] = v22;
    v25[1] = v23;
    v26 = v20;
    outlined init with take of Image.Resolved?((uint64_t)v35, (uint64_t)v27, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
    v31 = 0;
    v32 = 1;
    v33 = 0;
    v34 = 0;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItem>, (uint64_t)&type metadata for PlatformItem, (uint64_t (*)(_QWORD, uint64_t))v21);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_187BF9830;
    outlined init with copy of PlatformItem((uint64_t)v25, v24 + 32);
    outlined retain of Image.Resolved((uint64_t)v37);
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    return outlined destroy of PlatformItem((uint64_t)v25);
  }
  else
  {
    outlined retain of Image.Resolved((uint64_t)v37);
    swift_retain();
    return outlined release of PlatformItem.PrimaryContent((uint64_t)&v40);
  }
}

uint64_t specialized PlatformItemListGenerator.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  void *v3;
  id v4;
  id v5;

  v1 = v0;
  if (AGGraphGetOutputValue())
  {
    v2 = *(_DWORD *)(v0 + 104);
  }
  else
  {
    v3 = *(void **)v0;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v4 = v3;
    AGGraphClearUpdate();
    v5 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    v2 = specialized PlatformItemListGenerator.makeItemList()();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    *(_DWORD *)(v1 + 104) = v2;
  }
  if (v2 != *MEMORY[0x1E0CFED28])
  {
    AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized PlatformItemListGenerator.makeItemList()()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  _OWORD v5[5];
  int v6;

  v1 = *(_OWORD *)(v0 + 64);
  v5[2] = *(_OWORD *)(v0 + 48);
  v5[3] = v1;
  v5[4] = *(_OWORD *)(v0 + 80);
  v6 = *(_DWORD *)(v0 + 96);
  v2 = *(_OWORD *)(v0 + 32);
  v5[0] = *(_OWORD *)(v0 + 16);
  v5[1] = v2;
  if ((*(_BYTE *)(v0 + 100) & 1) != 0)
  {
    _ViewInputs.withoutGeometryDependencies.getter();
    outlined retain of _ViewInputs((uint64_t)v5);
    PreferenceKeys.init()();
    _ViewInputs.intern<A>(_:id:)();
    swift_bridgeObjectRelease();
    outlined release of _ViewInputs((uint64_t)v5);
    PreferencesInputs.init(hostKeys:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of _ViewInputs((uint64_t)v5);
  }
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(0);
  lazy protocol witness table accessor for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput();
  PropertyList.subscript.setter();
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    lazy protocol witness table accessor for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>();
    PreferenceKeys.add(_:)();
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
  _GraphValue.init(_:)();
  static HStack._makeView(view:inputs:)();
  v3 = PreferencesOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v3 & 0x100000000) != 0)
    v3 = *MEMORY[0x1E0CFED28];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v3;
}

uint64_t specialized implicit closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  id v8;
  Swift::UInt v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_187C05380;
  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    __break(1u);
  }
  else
  {
    v8 = (id)AGGraphGetAttributeGraph();
    v9 = AGGraphRef.graphIdentity()();

    v10 = MEMORY[0x1E0DEBB98];
    v11 = MEMORY[0x1E0DEBBF8];
    *(_QWORD *)(v6 + 56) = MEMORY[0x1E0DEBB98];
    *(_QWORD *)(v6 + 64) = v11;
    *(_QWORD *)(v6 + 32) = v9;
    *(_QWORD *)(v6 + 96) = MEMORY[0x1E0DEA968];
    v12 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v6 + 72) = a2;
    *(_QWORD *)(v6 + 80) = a3;
    v13 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(v6 + 136) = v10;
    *(_QWORD *)(v6 + 144) = v11;
    *(_QWORD *)(v6 + 104) = v12;
    *(_QWORD *)(v6 + 112) = v13;
    return v6;
  }
  return result;
}

void specialized closure #1 in PlatformViewChild.updateValue()(uint64_t a1)
{
  uint64_t Value;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  char v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  int v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  int v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  id v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  id v95;
  __int128 v96;
  void *v97;
  _QWORD v98[8];
  int v99;
  uint64_t v100;
  _QWORD v101[2];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned __int8 v125;
  void *v126;
  void *v127;
  __int128 v128;
  __int128 v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  id v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  char v144;
  id v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned __int8 v155;
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  Value = AGGraphGetValue();
  v108 = v3;
  v4 = *(_QWORD **)(Value + 8);
  v5 = *(_QWORD *)(Value + 16);
  v6 = *(_QWORD *)(Value + 24);
  v7 = *(_QWORD *)(Value + 32);
  v8 = *(_QWORD *)(Value + 40);
  v9 = *(_QWORD *)(Value + 48);
  v10 = *(_QWORD *)(Value + 64);
  v11 = *(unsigned __int8 *)(Value + 72);
  v146 = *(_QWORD *)Value;
  v147 = v4;
  v148 = v5;
  v149 = v6;
  v150 = v7;
  v151 = v8;
  v152 = v9;
  v153 = *(_QWORD *)(Value + 56);
  v154 = v10;
  LODWORD(v109) = v11;
  v155 = v11;
  v12 = (unsigned int *)AGGraphGetValue();
  v110 = v13;
  v14 = *v12;
  v15 = (uint64_t *)AGGraphGetValue();
  v112 = v16;
  v17 = *v15;
  v114 = v15[1];
  v115 = v17;
  LODWORD(v15) = *(_DWORD *)(a1 + 28);
  v18 = *MEMORY[0x1E0CFED28];
  LODWORD(v113) = v14;
  if ((_DWORD)v15 == v18)
  {
    LODWORD(v107) = 0;
    LODWORD(v106) = 0;
    LODWORD(v105) = 0;
    v111 = 0;
  }
  else
  {
    v19 = AGGraphGetValue();
    v21 = v20;
    v22 = *(_QWORD *)v19;
    LODWORD(v105) = *(unsigned __int8 *)(v19 + 8);
    LODWORD(v106) = *(_DWORD *)(v19 + 12);
    swift_retain();
    v111 = v22;
    if (v22 == 1)
    {
      LODWORD(v107) = 0;
      LODWORD(v106) = 0;
      LODWORD(v105) = 0;
      v111 = 0;
    }
    else
    {
      LODWORD(v107) = v21 & 1;
    }
    v14 = v113;
  }
  if (v14 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of Environment<Color?>.Content(v10, v109);
    v23 = v114;
    swift_retain();
    v24 = v115;
    swift_retain();
  }
  else
  {
    v128 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of Environment<Color?>.Content(v10, v109);
    v23 = v114;
    swift_retain();
    v24 = v115;
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    v25 = *(void **)(a1 + 72);
    if (v25)
    {
      v26 = *(void **)(a1 + 80);
      if (v26)
      {

        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v14 >> 1;
    v14 = v113;
  }
  v128 = *(_OWORD *)(a1 + 56);
  LODWORD(v116) = v14;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v27 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>(0);
    v27 = 1;
    if (AGGraphGetOutputValue() && (v108 & 1) == 0 && (v110 & 1) == 0)
      v27 = AGGraphCurrentAttributeWasModified();
  }
  AGGraphClearUpdate();
  v28 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, &v146);
  swift_retain();
  AGGraphSetUpdate();
  v139 = v24;
  v140 = v23;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v29 = *(_QWORD **)(a1 + 80);
  v108 = v28;
  if (v29)
  {
    if ((v112 & 1) != 0)
    {
      swift_retain();
      v30 = v29;
      swift_retain();
      v31 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v31 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        v27 = 1;
      }
    }
    else
    {
      v40 = v29;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v128 = 0;
      WORD4(v128) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v140)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    v41 = v110 | v112;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v42 = *((_QWORD *)&v128 + 1);
    swift_retain();
    v112 = (id)v128;
    swift_retain();
    AGGraphClearUpdate();
    if ((v41 & 1) != 0)
    {
      v43 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v43, 0, v113);
      swift_release();
    }
    if ((_DWORD)v107)
    {
      v44 = (char *)v29 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v29) + 0x90);
      *(_QWORD *)v44 = v111;
      v44[8] = v105;
      *((_DWORD *)v44 + 3) = v106;
      swift_retain();
      swift_release();
      objc_msgSend(v29, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    v45 = *(void **)(a1 + 72);
    if (!v45)
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    v46 = v45;

    v141 = *(_QWORD *)(a1 + 40);
    v142 = v28;
    *(_QWORD *)&v143 = v112;
    *((_QWORD *)&v143 + 1) = v42;
    v144 = 0;
    v145 = v46;
    swift_retain();
    if (!v27)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage((uint64_t)v112, v42, 0);

      swift_release();
      swift_release();
      v47 = v154;
      v48 = v155;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v49 = v47;
      v50 = v48;
LABEL_55:
      outlined consume of Environment<Color?>.Content(v49, v50);
      return;
    }
    swift_retain();
    v110 = 0;
LABEL_46:
    type metadata accessor for ViewGraph();
    v67 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v68 = MEMORY[0x18D760234](v67);
    v69 = swift_release();
    v113 = v42;
    if (v68)
    {
      swift_getObjectType();
      v69 = swift_conformsToProtocol2();
      if (v69)
        v71 = v68;
      else
        v71 = 0;
      if (!v71)
        v69 = swift_unknownObjectRelease();
    }
    v109 = v98;
    v73 = *(_QWORD *)(a1 + 40);
    v72 = *(_QWORD *)(a1 + 48);
    v74 = *(_QWORD *)(a1 + 56);
    v75 = *(void **)(a1 + 72);
    v76 = *(void **)(a1 + 80);
    v77 = *(_DWORD *)(a1 + 88);
    v130 = *(_DWORD *)(a1 + 32);
    v78 = *(_QWORD *)(a1 + 96);
    v79 = *(_OWORD *)(a1 + 16);
    v128 = *(_OWORD *)a1;
    v129 = v79;
    v131 = v73;
    v132 = v72;
    v133 = v74;
    v134 = *(_QWORD *)(a1 + 64);
    v135 = v75;
    v136 = v76;
    v137 = v77;
    v138 = v78;
    MEMORY[0x1E0C80A78](v69, v70);
    v107 = v80;
    v98[-6] = v80;
    v98[-5] = v81;
    v98[-4] = a1;
    v98[-3] = &v141;
    v98[-2] = &v146;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v82 = v75;
    v83 = v76;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v84 = v135;
    v85 = v136;
    swift_release();
    swift_release();
    swift_release();

    v86 = *(void **)(a1 + 80);
    if (v86)
    {
      v87 = *(void **)(a1 + 72);
      if (v87)
      {
        LODWORD(v110) = v155;
        v88 = v154;
        v89 = v152;
        v101[1] = v150;
        v109 = v147;
        v104 = *(_QWORD *)(a1 + 40);
        v105 = v146;
        v116 = v146;
        v117 = v147;
        v118 = v148;
        v119 = v149;
        v120 = v150;
        v121 = v151;
        v122 = v152;
        v106 = v151;
        v123 = v153;
        v124 = v154;
        v125 = v155;
        v126 = v86;
        v127 = v87;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>(0);
        v103 = v90;
        swift_retain();
        v101[0] = v89;
        swift_retain();
        v91 = v86;
        swift_retain();
        swift_retain();
        v92 = v87;
        v93 = v91;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v102 = v88;
        v94 = v110;
        outlined copy of Environment<Color?>.Content(v88, v110);
        v95 = v92;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined consume of Environment<Color?>.Content(v88, v94);

        v96 = v143;
        LOBYTE(v89) = v144;
        v97 = v145;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v96, *((uint64_t *)&v96 + 1), v89);

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v49 = v102;
        v50 = v110;
        goto LABEL_55;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_58;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v32 = *(void **)(a1 + 72);
  if (v32)
  {
    v33 = *((_QWORD *)&v128 + 1);
    v141 = *(_QWORD *)(a1 + 40);
    v142 = v28;
    v143 = v128;
    v144 = 0;
    v145 = v32;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    v34 = MEMORY[0x18D75C5F8](v32) + 200;
    swift_beginAccess();
    v35 = MEMORY[0x18D760234](v34);
    v36 = swift_release();
    if (v35)
    {
      swift_getObjectType();
      v36 = swift_conformsToProtocol2();
      v38 = (void *)v128;
      if (v36)
        v39 = v35;
      else
        v39 = 0;
      if (v39)
        goto LABEL_45;
      v36 = swift_unknownObjectRelease();
    }
    else
    {
      v38 = (void *)v128;
    }
    v39 = 0;
LABEL_45:
    v107 = v39;
    v109 = v101;
    v51 = *(_DWORD *)(a1 + 32);
    v53 = *(_QWORD *)(a1 + 40);
    v52 = *(_QWORD *)(a1 + 48);
    v54 = *(_QWORD *)(a1 + 56);
    v55 = *(void **)(a1 + 72);
    v112 = *(id *)(a1 + 80);
    v56 = *(_DWORD *)(a1 + 88);
    v130 = v51;
    v57 = *(_QWORD *)(a1 + 96);
    v58 = *(_OWORD *)(a1 + 16);
    v128 = *(_OWORD *)a1;
    v129 = v58;
    v131 = v53;
    v132 = v52;
    v133 = v54;
    v134 = *(_QWORD *)(a1 + 64);
    v135 = v55;
    v136 = v112;
    v137 = v56;
    v138 = v57;
    MEMORY[0x1E0C80A78](v36, v37);
    v98[2] = &v141;
    v98[3] = &v146;
    v98[4] = v60;
    v98[5] = v59;
    v98[6] = v38;
    v98[7] = v33;
    v99 = v113;
    v100 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>>(0);
    v110 = v61;
    v113 = v33;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v62 = v55;
    v63 = v112;
    swift_retain();
    v42 = v113;
    StatefulRule.withObservation<A>(do:)();
    v110 = 0;
    swift_release();
    v112 = v38;
    swift_release();
    v64 = v135;
    v65 = v136;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v66 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v116;

    goto LABEL_46;
  }
LABEL_59:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t Value;
  char v16;
  char v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  void *v35;
  void *v36;
  char v37;
  char v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  char v42;
  void *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _BYTE *v51;
  _QWORD *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void *v59;
  id v60;
  _BYTE *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  id v73;
  id v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  int v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  id v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  id v104;
  id v105;
  id v106;
  __int128 v107;
  char v108;
  void *v109;
  uint64_t v110;
  _BYTE v111[4];
  int v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  _BYTE *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  id v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  char v143;
  id v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = &v111[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v111[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v111[-v13];
  Value = AGGraphGetValue();
  v17 = v16;
  outlined init with copy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(Value, (uint64_t)v14);
  v18 = (unsigned int *)AGGraphGetValue();
  v120 = v19;
  v20 = *v18;
  v21 = (uint64_t *)AGGraphGetValue();
  v119 = v22;
  v23 = *v21;
  v125 = v21[1];
  v24 = *(_DWORD *)(a1 + 28) == *MEMORY[0x1E0CFED28];
  v115 = v6;
  v116 = v10;
  if (v24
    || (v25 = AGGraphGetValue(),
        v27 = v26,
        v28 = *(_QWORD *)v25,
        LODWORD(v114) = *(unsigned __int8 *)(v25 + 8),
        v29 = *(_DWORD *)(v25 + 12),
        swift_retain(),
        v122 = v28,
        v28 == 1))
  {
    v30 = 0;
    LODWORD(v113) = 0;
    LODWORD(v114) = 0;
    v122 = 0;
  }
  else
  {
    LODWORD(v113) = v29;
    v30 = v27 & 1;
  }
  v31 = v20 >> 1;
  if (v20 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    v32 = v3;
    v33 = v17;
    v34 = v20;
    v127 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    v35 = *(void **)(a1 + 72);
    if (v35)
    {
      v36 = *(void **)(a1 + 80);
      if (v36)
      {

        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v31;
    v20 = v34;
    v17 = v33;
    v3 = v32;
  }
  v127 = *(_OWORD *)(a1 + 56);
  LODWORD(v140) = v20;
  v37 = _DynamicPropertyBuffer.update(container:phase:)();
  v38 = (char)v119;
  LODWORD(v118) = v20;
  if ((v37 & 1) != 0)
  {
    v39 = 1;
  }
  else
  {
    v39 = 1;
    if (AGGraphGetOutputValue() && (v17 & 1) == 0 && (v120 & 1) == 0)
      v39 = AGGraphCurrentAttributeWasModified();
  }
  AGGraphClearUpdate();
  v123 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v14);
  swift_retain();
  AGGraphSetUpdate();
  v138 = v23;
  v139 = v125;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v40 = *(_QWORD **)(a1 + 80);
  v121 = v23;
  v124 = v14;
  v117 = v3;
  if (v40)
  {
    if ((v38 & 1) != 0)
    {
      swift_retain();
      v41 = v40;
      swift_retain();
      v42 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v42 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        v39 = 1;
      }
    }
    else
    {
      v52 = v40;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v127 = 0;
      WORD4(v127) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v139)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    v112 = v39;
    v53 = v120 | v38;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v55 = *((_QWORD *)&v127 + 1);
    v54 = v127;
    swift_retain();
    v56 = v54;
    swift_retain();
    AGGraphClearUpdate();
    if ((v53 & 1) != 0)
    {
      v57 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v57, 0, (int)v118);
      swift_release();
    }
    if (v30)
    {
      v58 = (char *)v40 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v40) + 0x90);
      *(_QWORD *)v58 = v122;
      v58[8] = (char)v114;
      *((_DWORD *)v58 + 3) = v113;
      swift_retain();
      swift_release();
      objc_msgSend(v40, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    v59 = *(void **)(a1 + 72);
    if (!v59)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v60 = v59;

    v140 = *(_QWORD *)(a1 + 40);
    v141 = v123;
    v61 = (_BYTE *)v56;
    *(_QWORD *)&v142 = v56;
    *((_QWORD *)&v142 + 1) = v55;
    v143 = 0;
    v144 = v60;
    swift_retain();
    if (!v112)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v56, v55, 0);

LABEL_52:
      v110 = (uint64_t)v124;
      swift_release();
      swift_release();
      outlined destroy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(v110);
      return;
    }
    swift_retain();
    v119 = 0;
LABEL_43:
    type metadata accessor for ViewGraph();
    v78 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v79 = MEMORY[0x18D760234](v78);
    v80 = swift_release();
    v120 = v55;
    v114 = v61;
    if (v79)
    {
      swift_getObjectType();
      v80 = swift_conformsToProtocol2();
      if (v80)
        v82 = v79;
      else
        v82 = 0;
      if (!v82)
        v80 = swift_unknownObjectRelease();
    }
    v118 = v111;
    v83 = *(_QWORD *)(a1 + 40);
    v84 = *(_QWORD *)(a1 + 48);
    v85 = *(_QWORD *)(a1 + 56);
    v87 = *(void **)(a1 + 72);
    v86 = *(void **)(a1 + 80);
    v88 = *(_DWORD *)(a1 + 88);
    v129 = *(_DWORD *)(a1 + 32);
    v89 = *(_QWORD *)(a1 + 96);
    v90 = *(_OWORD *)(a1 + 16);
    v127 = *(_OWORD *)a1;
    v128 = v90;
    v130 = v83;
    v131 = v84;
    v132 = v85;
    v133 = *(_QWORD *)(a1 + 64);
    v134 = v87;
    v135 = v86;
    v136 = v88;
    v137 = v89;
    MEMORY[0x1E0C80A78](v80, v81);
    v113 = v91;
    *(_QWORD *)&v111[-48] = v91;
    *(_QWORD *)&v111[-40] = v92;
    *(_QWORD *)&v111[-32] = a1;
    *(_QWORD *)&v111[-24] = &v140;
    v93 = (uint64_t)v124;
    *(_QWORD *)&v111[-16] = v124;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v94 = v87;
    v95 = v86;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v96 = v134;
    v97 = v135;
    swift_release();
    swift_release();
    swift_release();

    v98 = *(void **)(a1 + 80);
    if (v98)
    {
      v99 = *(void **)(a1 + 72);
      v100 = (uint64_t)v116;
      outlined init with copy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(v93, (uint64_t)v116);
      v101 = v117;
      if (v99)
      {
        v102 = (uint64_t)v115;
        *(_QWORD *)&v115[*(int *)(v117 + 40)] = v99;
        outlined init with take of PlatformViewRepresentableAdaptor<TextViewAdaptor>(v100, v102);
        *(_QWORD *)(v102 + *(int *)(v101 + 36)) = v98;
        v103 = v98;
        swift_retain();
        swift_retain();
        v104 = v99;
        v105 = v103;
        swift_retain();
        v106 = v104;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(v102);
        v107 = v142;
        v108 = v143;
        v109 = v144;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v107, *((uint64_t *)&v107 + 1), v108);

        goto LABEL_52;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_55;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v43 = *(void **)(a1 + 72);
  if (v43)
  {
    v44 = v127;
    v140 = *(_QWORD *)(a1 + 40);
    v141 = v123;
    v142 = v127;
    v143 = 0;
    v144 = v43;
    type metadata accessor for ViewGraph();
    v120 = *((_QWORD *)&v44 + 1);
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    v45 = MEMORY[0x18D75C5F8](v43) + 200;
    swift_beginAccess();
    v46 = MEMORY[0x18D760234](v45);
    v47 = swift_release();
    if (v46)
    {
      swift_getObjectType();
      v47 = swift_conformsToProtocol2();
      if (v47)
        v49 = v46;
      else
        v49 = 0;
      v50 = (int)v118;
      v51 = (_BYTE *)v44;
      if (!v49)
      {
        v47 = swift_unknownObjectRelease();
        v49 = 0;
      }
    }
    else
    {
      v51 = (_BYTE *)v44;
      v49 = 0;
      v50 = (int)v118;
    }
    v113 = v49;
    v114 = v111;
    v62 = *(_DWORD *)(a1 + 32);
    v64 = *(_QWORD *)(a1 + 40);
    v63 = *(_QWORD *)(a1 + 48);
    v65 = *(_QWORD *)(a1 + 56);
    v66 = *(void **)(a1 + 72);
    v119 = *(id *)(a1 + 80);
    v67 = *(_DWORD *)(a1 + 88);
    v129 = v62;
    v68 = *(_QWORD *)(a1 + 96);
    v69 = *(_OWORD *)(a1 + 16);
    v127 = *(_OWORD *)a1;
    v128 = v69;
    v130 = v64;
    v131 = v63;
    v132 = v65;
    v133 = *(_QWORD *)(a1 + 64);
    v134 = v66;
    v135 = v119;
    v136 = v67;
    v137 = v68;
    MEMORY[0x1E0C80A78](v47, v48);
    *(_QWORD *)&v111[-64] = &v140;
    *(_QWORD *)&v111[-56] = v124;
    *(_QWORD *)&v111[-48] = v70;
    *(_QWORD *)&v111[-40] = v71;
    *(_QWORD *)&v111[-32] = v51;
    v55 = v120;
    *(_QWORD *)&v111[-24] = v120;
    *(_DWORD *)&v111[-16] = v50;
    *(_QWORD *)&v111[-8] = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(0);
    v118 = v72;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v61 = v51;
    swift_retain();
    swift_retain();
    v73 = v66;
    v74 = v119;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v119 = 0;
    swift_release();
    swift_release();
    v75 = v134;
    v76 = v135;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v77 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v126;

    goto LABEL_43;
  }
LABEL_56:
  __break(1u);
}

{
  uint64_t Value;
  char v3;
  char v4;
  unsigned int *v5;
  void *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  void *v19;
  void *v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  uint64_t v35;
  char *v36;
  void *v37;
  id v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  id v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  id v76;
  id v77;
  id v78;
  id v79;
  __int128 v80;
  char v81;
  void *v82;
  _QWORD v83[8];
  int v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  _OWORD v97[5];
  _OWORD v98[5];
  void *v99;
  void *v100;
  __int128 v101;
  __int128 v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  void *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  char v117;
  id v118;
  _BYTE v119[80];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  Value = AGGraphGetValue();
  v4 = v3;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitPagingView>(Value, (uint64_t)v119);
  v5 = (unsigned int *)AGGraphGetValue();
  v94 = v6;
  v7 = *v5;
  v8 = (uint64_t *)AGGraphGetValue();
  v96 = v9;
  v10 = *v8;
  v11 = v8[1];
  if (*(_DWORD *)(a1 + 28) == *MEMORY[0x1E0CFED28]
    || (v12 = AGGraphGetValue(),
        v14 = v13,
        v15 = *(_QWORD *)v12,
        v16 = *(unsigned __int8 *)(v12 + 8),
        v17 = *(_DWORD *)(v12 + 12),
        swift_retain(),
        v15 == 1))
  {
    LODWORD(v89) = 0;
    LODWORD(v88) = 0;
    v16 = 0;
    v15 = 0;
  }
  else
  {
    LODWORD(v88) = v17;
    LODWORD(v89) = v14 & 1;
  }
  v18 = *(_DWORD *)(a1 + 88);
  LODWORD(v87) = v16;
  if (v7 >> 1 == v18)
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    v101 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    v19 = *(void **)(a1 + 72);
    if (v19)
    {
      v20 = *(void **)(a1 + 80);
      if (v20)
      {

        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v7 >> 1;
  }
  v101 = *(_OWORD *)(a1 + 56);
  LODWORD(v98[0]) = v7;
  LODWORD(v91) = v7;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v21 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>(0);
    v21 = 1;
    if (AGGraphGetOutputValue() && (v4 & 1) == 0 && (v94 & 1) == 0)
      v21 = AGGraphCurrentAttributeWasModified();
  }
  AGGraphClearUpdate();
  v22 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v119);
  swift_retain();
  AGGraphSetUpdate();
  v112 = v10;
  v113 = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v23 = *(_QWORD **)(a1 + 80);
  v92 = v10;
  v93 = v11;
  v95 = v22;
  v90 = v15;
  if (v23)
  {
    if ((v96 & 1) != 0)
    {
      swift_retain();
      v24 = v23;
      swift_retain();
      v25 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v25 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        v21 = 1;
      }
    }
    else
    {
      v33 = v23;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v101 = 0;
      WORD4(v101) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v113)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    v34 = v94 | v96;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v94 = (id)*((_QWORD *)&v101 + 1);
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    v96 = v101;
    if ((v34 & 1) != 0)
    {
      v35 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v35, 0, v91);
      swift_release();
    }
    if ((_DWORD)v89)
    {
      v36 = (char *)v23 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v23) + 0x90);
      *(_QWORD *)v36 = v15;
      v36[8] = (char)v87;
      *((_DWORD *)v36 + 3) = v88;
      swift_retain();
      swift_release();
      objc_msgSend(v23, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    v37 = *(void **)(a1 + 72);
    if (!v37)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    v38 = v37;

    v114 = *(_QWORD *)(a1 + 40);
    v115 = v95;
    *(_QWORD *)&v116 = v96;
    *((_QWORD *)&v116 + 1) = v94;
    v117 = 0;
    v118 = v38;
    swift_retain();
    if (!v21)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v96, (uint64_t)v94, 0);

LABEL_53:
      swift_release();
      swift_release();
      outlined destroy of PlatformViewRepresentableAdaptor<UIKitPagingView>((uint64_t)v119);
      return;
    }
    swift_retain();
    v91 = 0;
LABEL_44:
    type metadata accessor for ViewGraph();
    v55 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v56 = MEMORY[0x18D760234](v55);
    v57 = swift_release();
    if (v56)
    {
      swift_getObjectType();
      v57 = swift_conformsToProtocol2();
      if (v57)
        v59 = v56;
      else
        v59 = 0;
      if (!v59)
        v57 = swift_unknownObjectRelease();
    }
    v89 = v83;
    v61 = *(_QWORD *)(a1 + 40);
    v60 = *(_QWORD *)(a1 + 48);
    v62 = *(_QWORD *)(a1 + 56);
    v64 = *(void **)(a1 + 72);
    v63 = *(void **)(a1 + 80);
    v65 = *(_DWORD *)(a1 + 88);
    v103 = *(_DWORD *)(a1 + 32);
    v66 = *(_QWORD *)(a1 + 96);
    v67 = *(_OWORD *)(a1 + 16);
    v101 = *(_OWORD *)a1;
    v102 = v67;
    v104 = v61;
    v105 = v60;
    v106 = v62;
    v107 = *(_QWORD *)(a1 + 64);
    v108 = v64;
    v109 = v63;
    v110 = v65;
    v111 = v66;
    MEMORY[0x1E0C80A78](v57, v58);
    v88 = v68;
    v83[-6] = v68;
    v83[-5] = v69;
    v83[-4] = a1;
    v83[-3] = &v114;
    v83[-2] = v119;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v70 = v64;
    v71 = v63;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v72 = v108;
    v73 = v109;
    swift_release();
    swift_release();
    swift_release();

    v74 = *(void **)(a1 + 80);
    if (v74)
    {
      v75 = *(void **)(a1 + 72);
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitPagingView>((uint64_t)v119, (uint64_t)v97);
      if (v75)
      {
        v98[3] = v97[3];
        v98[4] = v97[4];
        v98[1] = v97[1];
        v98[2] = v97[2];
        v98[0] = v97[0];
        v99 = v74;
        v100 = v75;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>(0);
        v76 = v74;
        swift_retain();
        swift_retain();
        v77 = v75;
        v78 = v76;
        swift_retain();
        v79 = v77;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v98, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
        v80 = v116;
        v81 = v117;
        v82 = v118;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v80, *((uint64_t *)&v80 + 1), v81);

        goto LABEL_53;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_56;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v26 = *(void **)(a1 + 72);
  if (v26)
  {
    v114 = *(_QWORD *)(a1 + 40);
    v115 = v22;
    v116 = v101;
    v117 = 0;
    v118 = v26;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    v96 = v101;
    swift_retain_n();
    swift_retain();
    v27 = MEMORY[0x18D75C5F8](v26) + 200;
    swift_beginAccess();
    v28 = MEMORY[0x18D760234](v27);
    v29 = swift_release();
    if (v28)
    {
      swift_getObjectType();
      v29 = swift_conformsToProtocol2();
      v31 = (void *)*((_QWORD *)&v101 + 1);
      if (v29)
        v32 = v28;
      else
        v32 = 0;
      if (v32)
        goto LABEL_43;
      v29 = swift_unknownObjectRelease();
    }
    else
    {
      v31 = (void *)*((_QWORD *)&v101 + 1);
    }
    v32 = 0;
LABEL_43:
    v88 = v32;
    v89 = &v86;
    v39 = *(_DWORD *)(a1 + 32);
    v41 = *(_QWORD *)(a1 + 40);
    v40 = *(_QWORD *)(a1 + 48);
    v42 = *(_QWORD *)(a1 + 56);
    v43 = *(void **)(a1 + 80);
    v87 = *(id *)(a1 + 72);
    v94 = v43;
    v44 = *(_DWORD *)(a1 + 88);
    v103 = v39;
    v45 = *(_QWORD *)(a1 + 96);
    v46 = *(_OWORD *)(a1 + 16);
    v101 = *(_OWORD *)a1;
    v102 = v46;
    v104 = v41;
    v105 = v40;
    v106 = v42;
    v107 = *(_QWORD *)(a1 + 64);
    v108 = v87;
    v109 = v43;
    v110 = v44;
    v111 = v45;
    MEMORY[0x1E0C80A78](v29, v30);
    v83[2] = &v114;
    v83[3] = v119;
    v83[4] = v48;
    v83[5] = v47;
    v83[6] = v96;
    v83[7] = v31;
    v84 = v91;
    v85 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>>(0);
    v91 = v49;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v50 = v87;
    v51 = v94;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v91 = 0;
    v94 = v31;
    swift_release();
    swift_release();
    v52 = v108;
    v53 = v109;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v54 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)&v98[0];

    goto LABEL_44;
  }
LABEL_57:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t Value;
  char v16;
  char v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  void *v35;
  void *v36;
  char v37;
  char v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  char v42;
  void *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _BYTE *v51;
  _QWORD *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void *v59;
  id v60;
  _BYTE *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  id v73;
  id v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  int v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  id v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  id v104;
  id v105;
  id v106;
  __int128 v107;
  char v108;
  void *v109;
  uint64_t v110;
  _BYTE v111[4];
  int v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  _BYTE *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  id v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  char v143;
  id v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = &v111[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v111[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v111[-v13];
  Value = AGGraphGetValue();
  v17 = v16;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(Value, (uint64_t)v14);
  v18 = (unsigned int *)AGGraphGetValue();
  v120 = v19;
  v20 = *v18;
  v21 = (uint64_t *)AGGraphGetValue();
  v119 = v22;
  v23 = *v21;
  v125 = v21[1];
  v24 = *(_DWORD *)(a1 + 28) == *MEMORY[0x1E0CFED28];
  v115 = v6;
  v116 = v10;
  if (v24
    || (v25 = AGGraphGetValue(),
        v27 = v26,
        v28 = *(_QWORD *)v25,
        LODWORD(v114) = *(unsigned __int8 *)(v25 + 8),
        v29 = *(_DWORD *)(v25 + 12),
        swift_retain(),
        v122 = v28,
        v28 == 1))
  {
    v30 = 0;
    LODWORD(v113) = 0;
    LODWORD(v114) = 0;
    v122 = 0;
  }
  else
  {
    LODWORD(v113) = v29;
    v30 = v27 & 1;
  }
  v31 = v20 >> 1;
  if (v20 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    v32 = v3;
    v33 = v17;
    v34 = v20;
    v127 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    v35 = *(void **)(a1 + 72);
    if (v35)
    {
      v36 = *(void **)(a1 + 80);
      if (v36)
      {

        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v31;
    v20 = v34;
    v17 = v33;
    v3 = v32;
  }
  v127 = *(_OWORD *)(a1 + 56);
  LODWORD(v140) = v20;
  v37 = _DynamicPropertyBuffer.update(container:phase:)();
  v38 = (char)v119;
  LODWORD(v118) = v20;
  if ((v37 & 1) != 0)
  {
    v39 = 1;
  }
  else
  {
    v39 = 1;
    if (AGGraphGetOutputValue() && (v17 & 1) == 0 && (v120 & 1) == 0)
      v39 = AGGraphCurrentAttributeWasModified();
  }
  AGGraphClearUpdate();
  v123 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v14);
  swift_retain();
  AGGraphSetUpdate();
  v138 = v23;
  v139 = v125;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v40 = *(_QWORD **)(a1 + 80);
  v121 = v23;
  v124 = v14;
  v117 = v3;
  if (v40)
  {
    if ((v38 & 1) != 0)
    {
      swift_retain();
      v41 = v40;
      swift_retain();
      v42 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v42 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        v39 = 1;
      }
    }
    else
    {
      v52 = v40;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v127 = 0;
      WORD4(v127) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v139)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    v112 = v39;
    v53 = v120 | v38;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v55 = *((_QWORD *)&v127 + 1);
    v54 = v127;
    swift_retain();
    v56 = v54;
    swift_retain();
    AGGraphClearUpdate();
    if ((v53 & 1) != 0)
    {
      v57 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v57, 0, (int)v118);
      swift_release();
    }
    if (v30)
    {
      v58 = (char *)v40 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v40) + 0x90);
      *(_QWORD *)v58 = v122;
      v58[8] = (char)v114;
      *((_DWORD *)v58 + 3) = v113;
      swift_retain();
      swift_release();
      objc_msgSend(v40, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    v59 = *(void **)(a1 + 72);
    if (!v59)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v60 = v59;

    v140 = *(_QWORD *)(a1 + 40);
    v141 = v123;
    v61 = (_BYTE *)v56;
    *(_QWORD *)&v142 = v56;
    *((_QWORD *)&v142 + 1) = v55;
    v143 = 0;
    v144 = v60;
    swift_retain();
    if (!v112)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v56, v55, 0);

LABEL_52:
      v110 = (uint64_t)v124;
      swift_release();
      swift_release();
      outlined destroy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(v110);
      return;
    }
    swift_retain();
    v119 = 0;
LABEL_43:
    type metadata accessor for ViewGraph();
    v78 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v79 = MEMORY[0x18D760234](v78);
    v80 = swift_release();
    v120 = v55;
    v114 = v61;
    if (v79)
    {
      swift_getObjectType();
      v80 = swift_conformsToProtocol2();
      if (v80)
        v82 = v79;
      else
        v82 = 0;
      if (!v82)
        v80 = swift_unknownObjectRelease();
    }
    v118 = v111;
    v83 = *(_QWORD *)(a1 + 40);
    v84 = *(_QWORD *)(a1 + 48);
    v85 = *(_QWORD *)(a1 + 56);
    v87 = *(void **)(a1 + 72);
    v86 = *(void **)(a1 + 80);
    v88 = *(_DWORD *)(a1 + 88);
    v129 = *(_DWORD *)(a1 + 32);
    v89 = *(_QWORD *)(a1 + 96);
    v90 = *(_OWORD *)(a1 + 16);
    v127 = *(_OWORD *)a1;
    v128 = v90;
    v130 = v83;
    v131 = v84;
    v132 = v85;
    v133 = *(_QWORD *)(a1 + 64);
    v134 = v87;
    v135 = v86;
    v136 = v88;
    v137 = v89;
    MEMORY[0x1E0C80A78](v80, v81);
    v113 = v91;
    *(_QWORD *)&v111[-48] = v91;
    *(_QWORD *)&v111[-40] = v92;
    *(_QWORD *)&v111[-32] = a1;
    *(_QWORD *)&v111[-24] = &v140;
    v93 = (uint64_t)v124;
    *(_QWORD *)&v111[-16] = v124;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v94 = v87;
    v95 = v86;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v96 = v134;
    v97 = v135;
    swift_release();
    swift_release();
    swift_release();

    v98 = *(void **)(a1 + 80);
    if (v98)
    {
      v99 = *(void **)(a1 + 72);
      v100 = (uint64_t)v116;
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(v93, (uint64_t)v116);
      v101 = v117;
      if (v99)
      {
        v102 = (uint64_t)v115;
        *(_QWORD *)&v115[*(int *)(v117 + 40)] = v99;
        outlined init with take of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(v100, v102);
        *(_QWORD *)(v102 + *(int *)(v101 + 36)) = v98;
        v103 = v98;
        swift_retain();
        swift_retain();
        v104 = v99;
        v105 = v103;
        swift_retain();
        v106 = v104;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(v102);
        v107 = v142;
        v108 = v143;
        v109 = v144;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v107, *((uint64_t *)&v107 + 1), v108);

        goto LABEL_52;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_55;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v43 = *(void **)(a1 + 72);
  if (v43)
  {
    v44 = v127;
    v140 = *(_QWORD *)(a1 + 40);
    v141 = v123;
    v142 = v127;
    v143 = 0;
    v144 = v43;
    type metadata accessor for ViewGraph();
    v120 = *((_QWORD *)&v44 + 1);
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    v45 = MEMORY[0x18D75C5F8](v43) + 200;
    swift_beginAccess();
    v46 = MEMORY[0x18D760234](v45);
    v47 = swift_release();
    if (v46)
    {
      swift_getObjectType();
      v47 = swift_conformsToProtocol2();
      if (v47)
        v49 = v46;
      else
        v49 = 0;
      v50 = (int)v118;
      v51 = (_BYTE *)v44;
      if (!v49)
      {
        v47 = swift_unknownObjectRelease();
        v49 = 0;
      }
    }
    else
    {
      v51 = (_BYTE *)v44;
      v49 = 0;
      v50 = (int)v118;
    }
    v113 = v49;
    v114 = v111;
    v62 = *(_DWORD *)(a1 + 32);
    v64 = *(_QWORD *)(a1 + 40);
    v63 = *(_QWORD *)(a1 + 48);
    v65 = *(_QWORD *)(a1 + 56);
    v66 = *(void **)(a1 + 72);
    v119 = *(id *)(a1 + 80);
    v67 = *(_DWORD *)(a1 + 88);
    v129 = v62;
    v68 = *(_QWORD *)(a1 + 96);
    v69 = *(_OWORD *)(a1 + 16);
    v127 = *(_OWORD *)a1;
    v128 = v69;
    v130 = v64;
    v131 = v63;
    v132 = v65;
    v133 = *(_QWORD *)(a1 + 64);
    v134 = v66;
    v135 = v119;
    v136 = v67;
    v137 = v68;
    MEMORY[0x1E0C80A78](v47, v48);
    *(_QWORD *)&v111[-64] = &v140;
    *(_QWORD *)&v111[-56] = v124;
    *(_QWORD *)&v111[-48] = v70;
    *(_QWORD *)&v111[-40] = v71;
    *(_QWORD *)&v111[-32] = v51;
    v55 = v120;
    *(_QWORD *)&v111[-24] = v120;
    *(_DWORD *)&v111[-16] = v50;
    *(_QWORD *)&v111[-8] = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(0);
    v118 = v72;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v61 = v51;
    swift_retain();
    swift_retain();
    v73 = v66;
    v74 = v119;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v119 = 0;
    swift_release();
    swift_release();
    v75 = v134;
    v76 = v135;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v77 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v126;

    goto LABEL_43;
  }
LABEL_56:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t Value;
  char v16;
  char v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  void *v35;
  void *v36;
  char v37;
  char v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  char v42;
  void *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _BYTE *v51;
  _QWORD *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void *v59;
  id v60;
  _BYTE *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  id v73;
  id v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  int v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  id v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  id v104;
  id v105;
  id v106;
  __int128 v107;
  char v108;
  void *v109;
  uint64_t v110;
  _BYTE v111[4];
  int v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  _BYTE *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  id v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  char v143;
  id v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = &v111[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v111[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v111[-v13];
  Value = AGGraphGetValue();
  v17 = v16;
  outlined init with copy of PlatformViewRepresentableAdaptor<KitRepresentable>(Value, (uint64_t)v14);
  v18 = (unsigned int *)AGGraphGetValue();
  v120 = v19;
  v20 = *v18;
  v21 = (uint64_t *)AGGraphGetValue();
  v119 = v22;
  v23 = *v21;
  v125 = v21[1];
  v24 = *(_DWORD *)(a1 + 28) == *MEMORY[0x1E0CFED28];
  v115 = v6;
  v116 = v10;
  if (v24
    || (v25 = AGGraphGetValue(),
        v27 = v26,
        v28 = *(_QWORD *)v25,
        LODWORD(v114) = *(unsigned __int8 *)(v25 + 8),
        v29 = *(_DWORD *)(v25 + 12),
        swift_retain(),
        v122 = v28,
        v28 == 1))
  {
    v30 = 0;
    LODWORD(v113) = 0;
    LODWORD(v114) = 0;
    v122 = 0;
  }
  else
  {
    LODWORD(v113) = v29;
    v30 = v27 & 1;
  }
  v31 = v20 >> 1;
  if (v20 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    v32 = v3;
    v33 = v17;
    v34 = v20;
    v127 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    v35 = *(void **)(a1 + 72);
    if (v35)
    {
      v36 = *(void **)(a1 + 80);
      if (v36)
      {

        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v31;
    v20 = v34;
    v17 = v33;
    v3 = v32;
  }
  v127 = *(_OWORD *)(a1 + 56);
  LODWORD(v140) = v20;
  v37 = _DynamicPropertyBuffer.update(container:phase:)();
  v38 = (char)v119;
  LODWORD(v118) = v20;
  if ((v37 & 1) != 0)
  {
    v39 = 1;
  }
  else
  {
    v39 = 1;
    if (AGGraphGetOutputValue() && (v17 & 1) == 0 && (v120 & 1) == 0)
      v39 = AGGraphCurrentAttributeWasModified();
  }
  AGGraphClearUpdate();
  v123 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v14);
  swift_retain();
  AGGraphSetUpdate();
  v138 = v23;
  v139 = v125;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v40 = *(_QWORD **)(a1 + 80);
  v121 = v23;
  v124 = v14;
  v117 = v3;
  if (v40)
  {
    if ((v38 & 1) != 0)
    {
      swift_retain();
      v41 = v40;
      swift_retain();
      v42 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v42 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        v39 = 1;
      }
    }
    else
    {
      v52 = v40;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v127 = 0;
      WORD4(v127) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v139)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    v112 = v39;
    v53 = v120 | v38;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v55 = *((_QWORD *)&v127 + 1);
    v54 = v127;
    swift_retain();
    v56 = v54;
    swift_retain();
    AGGraphClearUpdate();
    if ((v53 & 1) != 0)
    {
      v57 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v57, 0, (int)v118);
      swift_release();
    }
    if (v30)
    {
      v58 = (char *)v40 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v40) + 0x90);
      *(_QWORD *)v58 = v122;
      v58[8] = (char)v114;
      *((_DWORD *)v58 + 3) = v113;
      swift_retain();
      swift_release();
      objc_msgSend(v40, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    v59 = *(void **)(a1 + 72);
    if (!v59)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v60 = v59;

    v140 = *(_QWORD *)(a1 + 40);
    v141 = v123;
    v61 = (_BYTE *)v56;
    *(_QWORD *)&v142 = v56;
    *((_QWORD *)&v142 + 1) = v55;
    v143 = 0;
    v144 = v60;
    swift_retain();
    if (!v112)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v56, v55, 0);

LABEL_52:
      v110 = (uint64_t)v124;
      swift_release();
      swift_release();
      outlined destroy of PlatformViewRepresentableAdaptor<KitRepresentable>(v110);
      return;
    }
    swift_retain();
    v119 = 0;
LABEL_43:
    type metadata accessor for ViewGraph();
    v78 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v79 = MEMORY[0x18D760234](v78);
    v80 = swift_release();
    v120 = v55;
    v114 = v61;
    if (v79)
    {
      swift_getObjectType();
      v80 = swift_conformsToProtocol2();
      if (v80)
        v82 = v79;
      else
        v82 = 0;
      if (!v82)
        v80 = swift_unknownObjectRelease();
    }
    v118 = v111;
    v83 = *(_QWORD *)(a1 + 40);
    v84 = *(_QWORD *)(a1 + 48);
    v85 = *(_QWORD *)(a1 + 56);
    v87 = *(void **)(a1 + 72);
    v86 = *(void **)(a1 + 80);
    v88 = *(_DWORD *)(a1 + 88);
    v129 = *(_DWORD *)(a1 + 32);
    v89 = *(_QWORD *)(a1 + 96);
    v90 = *(_OWORD *)(a1 + 16);
    v127 = *(_OWORD *)a1;
    v128 = v90;
    v130 = v83;
    v131 = v84;
    v132 = v85;
    v133 = *(_QWORD *)(a1 + 64);
    v134 = v87;
    v135 = v86;
    v136 = v88;
    v137 = v89;
    MEMORY[0x1E0C80A78](v80, v81);
    v113 = v91;
    *(_QWORD *)&v111[-48] = v91;
    *(_QWORD *)&v111[-40] = v92;
    *(_QWORD *)&v111[-32] = a1;
    *(_QWORD *)&v111[-24] = &v140;
    v93 = (uint64_t)v124;
    *(_QWORD *)&v111[-16] = v124;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v94 = v87;
    v95 = v86;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v96 = v134;
    v97 = v135;
    swift_release();
    swift_release();
    swift_release();

    v98 = *(void **)(a1 + 80);
    if (v98)
    {
      v99 = *(void **)(a1 + 72);
      v100 = (uint64_t)v116;
      outlined init with copy of PlatformViewRepresentableAdaptor<KitRepresentable>(v93, (uint64_t)v116);
      v101 = v117;
      if (v99)
      {
        v102 = (uint64_t)v115;
        *(_QWORD *)&v115[*(int *)(v117 + 40)] = v99;
        outlined init with take of PlatformViewRepresentableAdaptor<KitRepresentable>(v100, v102);
        *(_QWORD *)(v102 + *(int *)(v101 + 36)) = v98;
        v103 = v98;
        swift_retain();
        swift_retain();
        v104 = v99;
        v105 = v103;
        swift_retain();
        v106 = v104;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>(v102);
        v107 = v142;
        v108 = v143;
        v109 = v144;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v107, *((uint64_t *)&v107 + 1), v108);

        goto LABEL_52;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_55;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v43 = *(void **)(a1 + 72);
  if (v43)
  {
    v44 = v127;
    v140 = *(_QWORD *)(a1 + 40);
    v141 = v123;
    v142 = v127;
    v143 = 0;
    v144 = v43;
    type metadata accessor for ViewGraph();
    v120 = *((_QWORD *)&v44 + 1);
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    v45 = MEMORY[0x18D75C5F8](v43) + 200;
    swift_beginAccess();
    v46 = MEMORY[0x18D760234](v45);
    v47 = swift_release();
    if (v46)
    {
      swift_getObjectType();
      v47 = swift_conformsToProtocol2();
      if (v47)
        v49 = v46;
      else
        v49 = 0;
      v50 = (int)v118;
      v51 = (_BYTE *)v44;
      if (!v49)
      {
        v47 = swift_unknownObjectRelease();
        v49 = 0;
      }
    }
    else
    {
      v51 = (_BYTE *)v44;
      v49 = 0;
      v50 = (int)v118;
    }
    v113 = v49;
    v114 = v111;
    v62 = *(_DWORD *)(a1 + 32);
    v64 = *(_QWORD *)(a1 + 40);
    v63 = *(_QWORD *)(a1 + 48);
    v65 = *(_QWORD *)(a1 + 56);
    v66 = *(void **)(a1 + 72);
    v119 = *(id *)(a1 + 80);
    v67 = *(_DWORD *)(a1 + 88);
    v129 = v62;
    v68 = *(_QWORD *)(a1 + 96);
    v69 = *(_OWORD *)(a1 + 16);
    v127 = *(_OWORD *)a1;
    v128 = v69;
    v130 = v64;
    v131 = v63;
    v132 = v65;
    v133 = *(_QWORD *)(a1 + 64);
    v134 = v66;
    v135 = v119;
    v136 = v67;
    v137 = v68;
    MEMORY[0x1E0C80A78](v47, v48);
    *(_QWORD *)&v111[-64] = &v140;
    *(_QWORD *)&v111[-56] = v124;
    *(_QWORD *)&v111[-48] = v70;
    *(_QWORD *)&v111[-40] = v71;
    *(_QWORD *)&v111[-32] = v51;
    v55 = v120;
    *(_QWORD *)&v111[-24] = v120;
    *(_DWORD *)&v111[-16] = v50;
    *(_QWORD *)&v111[-8] = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>>(0);
    v118 = v72;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v61 = v51;
    swift_retain();
    swift_retain();
    v73 = v66;
    v74 = v119;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v119 = 0;
    swift_release();
    swift_release();
    v75 = v134;
    v76 = v135;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v77 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v126;

    goto LABEL_43;
  }
LABEL_56:
  __break(1u);
}

{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  void *v25;
  void *v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  char v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void *v45;
  id v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  int v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  int v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  id v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  _QWORD *v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  void *v109;
  _QWORD v110[8];
  int v111;
  uint64_t v112;
  _QWORD v113[2];
  id v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  _QWORD *v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 v137;
  uint64_t v138;
  unsigned __int8 v139;
  unsigned __int8 v140;
  _QWORD *v141;
  unsigned __int8 v142;
  uint64_t v143;
  unsigned __int8 v144;
  __int128 v145;
  _QWORD *v146;
  void *v147;
  void *v148;
  __int128 v149;
  __int128 v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  id v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  char v165;
  id v166;
  uint64_t v167;
  unsigned __int8 v168;
  uint64_t v169;
  unsigned __int8 v170;
  unsigned __int8 v171;
  _QWORD *v172;
  unsigned __int8 v173;
  uint64_t v174;
  unsigned __int8 v175;
  __int128 v176;
  _QWORD *v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  Value = AGGraphGetValue();
  v122 = v3;
  v4 = *(_QWORD *)Value;
  v5 = *(_BYTE *)(Value + 8);
  v6 = *(_QWORD *)(Value + 16);
  v7 = *(unsigned __int8 *)(Value + 24);
  v8 = *(_BYTE *)(Value + 25);
  v9 = *(_QWORD **)(Value + 32);
  v10 = *(unsigned __int8 *)(Value + 40);
  v11 = *(_QWORD *)(Value + 48);
  v12 = *(unsigned __int8 *)(Value + 56);
  v13 = *(_QWORD **)(Value + 80);
  v167 = *(_QWORD *)Value;
  v168 = v5;
  v169 = v6;
  v170 = v7;
  v171 = v8;
  v172 = v9;
  v125 = v10;
  v173 = v10;
  v126 = v11;
  v174 = v11;
  LODWORD(v127) = v12;
  v175 = v12;
  v128 = *(_OWORD *)(Value + 64);
  v176 = v128;
  v129 = v13;
  v177 = v13;
  v14 = (_DWORD *)AGGraphGetValue();
  *(_QWORD *)&v130 = v15;
  LODWORD(v134) = *v14;
  v16 = (uint64_t *)AGGraphGetValue();
  v133 = v17;
  v18 = *v16;
  v135 = v16[1];
  LODWORD(v16) = *(_DWORD *)(a1 + 28);
  v19 = *MEMORY[0x1E0CFED28];
  v131 = v18;
  if ((_DWORD)v16 == v19)
  {
    v124 = 0;
    LODWORD(v123) = 0;
    LODWORD(v121) = 0;
    v132 = 0;
  }
  else
  {
    v20 = AGGraphGetValue();
    v22 = v21;
    v23 = *(_QWORD *)v20;
    LODWORD(v121) = *(unsigned __int8 *)(v20 + 8);
    LODWORD(v123) = *(_DWORD *)(v20 + 12);
    swift_retain();
    v132 = v23;
    if (v23 == 1)
    {
      v124 = 0;
      LODWORD(v123) = 0;
      LODWORD(v121) = 0;
      v132 = 0;
    }
    else
    {
      v124 = v22 & 1;
    }
    v18 = v131;
  }
  v24 = v134 >> 1;
  if (v134 >> 1 == *(_DWORD *)(a1 + 88))
  {
    outlined copy of Environment<Bool>.Content(v4, v5);
    outlined copy of Environment<CGFloat?>.Content(v6, v7, v8);
    outlined copy of Environment<Color?>.Content(v9, v125);
    outlined copy of Environment<Bool>.Content(v126, v127);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v149 = *(_OWORD *)(a1 + 56);
    outlined copy of Environment<Bool>.Content(v4, v5);
    outlined copy of Environment<CGFloat?>.Content(v6, v7, v8);
    outlined copy of Environment<Color?>.Content(v9, v125);
    outlined copy of Environment<Bool>.Content(v126, v127);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    v25 = *(void **)(a1 + 72);
    if (v25)
    {
      v26 = *(void **)(a1 + 80);
      if (v26)
      {

        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v24;
  }
  v149 = *(_OWORD *)(a1 + 56);
  LODWORD(v136) = v134;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v27 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(0);
    v27 = 1;
    if (AGGraphGetOutputValue() && (v122 & 1) == 0 && (v130 & 1) == 0)
      v27 = AGGraphCurrentAttributeWasModified();
  }
  AGGraphClearUpdate();
  v28 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)&v167);
  swift_retain();
  AGGraphSetUpdate();
  v160 = v18;
  v161 = v135;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v29 = *(_QWORD **)(a1 + 80);
  v122 = v28;
  if (v29)
  {
    if ((v133 & 1) != 0)
    {
      swift_retain();
      v30 = v29;
      swift_retain();
      v31 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v31 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        v27 = 1;
      }
    }
    else
    {
      v40 = v29;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v149 = 0;
      WORD4(v149) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v161)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    v41 = v130 | v133;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v42 = *((_QWORD *)&v149 + 1);
    swift_retain();
    v133 = (id)v149;
    swift_retain();
    AGGraphClearUpdate();
    if ((v41 & 1) != 0)
    {
      v43 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v43, 0, v134);
      swift_release();
    }
    if (v124)
    {
      v44 = (char *)v29 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v29) + 0x90);
      *(_QWORD *)v44 = v132;
      v44[8] = v121;
      *((_DWORD *)v44 + 3) = (_DWORD)v123;
      swift_retain();
      swift_release();
      objc_msgSend(v29, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    v45 = *(void **)(a1 + 72);
    if (!v45)
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    v46 = v45;

    v162 = *(_QWORD *)(a1 + 40);
    v163 = v28;
    *(_QWORD *)&v164 = v133;
    *((_QWORD *)&v164 + 1) = v42;
    v165 = 0;
    v166 = v46;
    swift_retain();
    if (!v27)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage((uint64_t)v133, v42, 0);

      swift_release();
      swift_release();
      v47 = v169;
      v48 = v171;
      v49 = v172;
      v50 = v173;
      v51 = v174;
      v52 = v175;
      v53 = v170;
      outlined consume of Environment<Bool>.Content(v167, v168);
      outlined consume of Environment<CGFloat?>.Content(v47, v53, v48);
      outlined consume of Environment<Color?>.Content(v49, v50);
      outlined consume of Environment<Bool>.Content(v51, v52);
      swift_release();
LABEL_55:
      swift_bridgeObjectRelease();
      return;
    }
    swift_retain();
    *(_QWORD *)&v130 = 0;
LABEL_46:
    type metadata accessor for ViewGraph();
    v70 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v71 = MEMORY[0x18D760234](v70);
    v72 = swift_release();
    v134 = v42;
    if (v71)
    {
      swift_getObjectType();
      v72 = swift_conformsToProtocol2();
      if (v72)
        v74 = v71;
      else
        v74 = 0;
      if (!v74)
        v72 = swift_unknownObjectRelease();
    }
    v129 = v110;
    v76 = *(_QWORD *)(a1 + 40);
    v75 = *(_QWORD *)(a1 + 48);
    v77 = *(_QWORD *)(a1 + 56);
    v78 = *(void **)(a1 + 72);
    v79 = *(void **)(a1 + 80);
    v80 = *(_DWORD *)(a1 + 88);
    v151 = *(_DWORD *)(a1 + 32);
    v81 = *(_QWORD *)(a1 + 96);
    v82 = *(_OWORD *)(a1 + 16);
    v149 = *(_OWORD *)a1;
    v150 = v82;
    v152 = v76;
    v153 = v75;
    v154 = v77;
    v155 = *(_QWORD *)(a1 + 64);
    v156 = v78;
    v157 = v79;
    v158 = v80;
    v159 = v81;
    MEMORY[0x1E0C80A78](v72, v73);
    v121 = v83;
    v110[-6] = v83;
    v110[-5] = v84;
    v110[-4] = a1;
    v110[-3] = &v162;
    v110[-2] = &v167;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v85 = v78;
    v86 = v79;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v87 = v156;
    v88 = v157;
    swift_release();
    swift_release();
    swift_release();

    v89 = *(void **)(a1 + 80);
    if (v89)
    {
      v90 = *(void **)(a1 + 72);
      if (v90)
      {
        v123 = v177;
        v91 = v173;
        v92 = v172;
        v93 = v171;
        v94 = v169;
        v124 = v168;
        v95 = v167;
        v113[1] = *(_QWORD *)(a1 + 96);
        v96 = *(_QWORD *)(a1 + 40);
        v127 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)&v128 = v169;
        v119 = v167;
        v120 = v96;
        v125 = v170;
        LODWORD(v126) = v175;
        v136 = v167;
        v137 = v168;
        v138 = v169;
        v139 = v170;
        v140 = v171;
        v117 = v171;
        v118 = v173;
        v141 = v172;
        v129 = v172;
        v142 = v173;
        v143 = v174;
        v97 = v174;
        v144 = v175;
        v130 = v176;
        v145 = v176;
        v146 = v177;
        v147 = v89;
        v148 = v90;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(0);
        v116 = v98;
        v99 = v89;
        swift_retain();
        swift_retain();
        v100 = v90;
        v114 = v99;
        swift_retain();
        LOBYTE(v99) = v124;
        outlined copy of Environment<Bool>.Content(v95, v124);
        v101 = v94;
        v102 = v125;
        outlined copy of Environment<CGFloat?>.Content(v101, v125, v93);
        outlined copy of Environment<Color?>.Content(v92, v91);
        v103 = v97;
        v115 = v97;
        outlined copy of Environment<Bool>.Content(v97, v126);
        swift_bridgeObjectRetain();
        swift_retain();
        v104 = v100;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v105 = v114;

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        v106 = v119;
        outlined consume of Environment<Bool>.Content(v119, (char)v99);
        LOBYTE(v92) = v117;
        outlined consume of Environment<CGFloat?>.Content(v128, v102, v117);
        v107 = v118;
        outlined consume of Environment<Color?>.Content(v129, v118);
        LOBYTE(v99) = v126;
        outlined consume of Environment<Bool>.Content(v103, v126);

        swift_release();
        swift_bridgeObjectRelease();
        v108 = v164;
        LOBYTE(v103) = v165;
        v109 = v166;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v108, *((uint64_t *)&v108 + 1), v103);

        swift_release();
        swift_release();
        outlined consume of Environment<Bool>.Content(v106, v124);
        outlined consume of Environment<CGFloat?>.Content(v128, v125, (char)v92);
        outlined consume of Environment<Color?>.Content(v129, v107);
        outlined consume of Environment<Bool>.Content(v115, (char)v99);
        swift_release();
        goto LABEL_55;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_58;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v32 = *(void **)(a1 + 72);
  if (v32)
  {
    v33 = *((_QWORD *)&v149 + 1);
    v162 = *(_QWORD *)(a1 + 40);
    v163 = v28;
    v164 = v149;
    v165 = 0;
    v166 = v32;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    v34 = MEMORY[0x18D75C5F8](v32) + 200;
    swift_beginAccess();
    v35 = MEMORY[0x18D760234](v34);
    v36 = swift_release();
    if (v35)
    {
      swift_getObjectType();
      v36 = swift_conformsToProtocol2();
      v38 = (void *)v149;
      if (v36)
        v39 = v35;
      else
        v39 = 0;
      if (v39)
        goto LABEL_45;
      v36 = swift_unknownObjectRelease();
    }
    else
    {
      v38 = (void *)v149;
    }
    v39 = 0;
LABEL_45:
    *(_QWORD *)&v128 = v39;
    v129 = v113;
    v54 = *(_DWORD *)(a1 + 32);
    v56 = *(_QWORD *)(a1 + 40);
    v55 = *(_QWORD *)(a1 + 48);
    v57 = *(_QWORD *)(a1 + 56);
    v58 = *(void **)(a1 + 72);
    v133 = *(id *)(a1 + 80);
    v59 = *(_DWORD *)(a1 + 88);
    v151 = v54;
    v60 = *(_QWORD *)(a1 + 96);
    v61 = *(_OWORD *)(a1 + 16);
    v149 = *(_OWORD *)a1;
    v150 = v61;
    v152 = v56;
    v153 = v55;
    v154 = v57;
    v155 = *(_QWORD *)(a1 + 64);
    v156 = v58;
    v157 = v133;
    v158 = v59;
    v159 = v60;
    MEMORY[0x1E0C80A78](v36, v37);
    v110[2] = &v162;
    v110[3] = &v167;
    v110[4] = v63;
    v110[5] = v62;
    v110[6] = v38;
    v110[7] = v33;
    v111 = v134;
    v112 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(0);
    *(_QWORD *)&v130 = v64;
    v134 = v33;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v65 = v58;
    v66 = v133;
    swift_retain();
    v42 = v134;
    StatefulRule.withObservation<A>(do:)();
    *(_QWORD *)&v130 = 0;
    swift_release();
    v133 = v38;
    swift_release();
    v67 = v156;
    v68 = v157;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v69 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v136;

    goto LABEL_46;
  }
LABEL_59:
  __break(1u);
}

{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  void *v10;
  unsigned int v11;
  uint64_t *v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  char v20;
  id v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  char v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  char v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void *v47;
  id v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  int v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  __int128 v93;
  void *v94;
  _QWORD v95[8];
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  id v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  char v111;
  uint64_t v112;
  void *v113;
  void *v114;
  void *v115;
  __int128 v116;
  __int128 v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  void *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  char v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  char v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  Value = AGGraphGetValue();
  v103 = v3;
  v4 = *(_QWORD *)(Value + 8);
  v5 = *(void **)(Value + 16);
  v6 = *(_BYTE *)(Value + 24);
  v7 = *(_QWORD *)(Value + 32);
  v8 = *(void **)(Value + 40);
  v134 = *(_QWORD *)Value;
  v135 = v4;
  v136 = v5;
  v137 = v6;
  v138 = v7;
  v139 = v8;
  v9 = (unsigned int *)AGGraphGetValue();
  v104 = v10;
  v11 = *v9;
  v12 = (uint64_t *)AGGraphGetValue();
  v14 = v13;
  v15 = v12[1];
  v106 = *v12;
  v107 = v15;
  if (*(_DWORD *)(a1 + 28) == *MEMORY[0x1E0CFED28])
  {
    LODWORD(v102) = 0;
    LODWORD(v101) = 0;
    LODWORD(v100) = 0;
    v16 = 0;
  }
  else
  {
    v17 = v11;
    v18 = AGGraphGetValue();
    v20 = v19;
    v16 = *(_QWORD *)v18;
    LODWORD(v100) = *(unsigned __int8 *)(v18 + 8);
    LODWORD(v101) = *(_DWORD *)(v18 + 12);
    swift_retain();
    if (v16 == 1)
    {
      LODWORD(v102) = 0;
      LODWORD(v101) = 0;
      LODWORD(v100) = 0;
      v16 = 0;
    }
    else
    {
      LODWORD(v102) = v20 & 1;
    }
    v11 = v17;
  }
  if (v11 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
    v21 = v5;
    swift_retain();
    swift_bridgeObjectRetain();
    v22 = v106;
    swift_retain();
  }
  else
  {
    v116 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    v23 = v5;
    swift_retain();
    swift_bridgeObjectRetain();
    v22 = v106;
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    v24 = *(void **)(a1 + 72);
    if (v24)
    {
      v25 = *(void **)(a1 + 80);
      if (v25)
      {

        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v11 >> 1;
  }
  v116 = *(_OWORD *)(a1 + 56);
  LODWORD(v108) = v11;
  v26 = v14;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v27 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(0);
    v27 = 1;
    if (AGGraphGetOutputValue() && (v103 & 1) == 0 && (v104 & 1) == 0)
      v27 = AGGraphCurrentAttributeWasModified();
  }
  AGGraphClearUpdate();
  v28 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, &v134);
  swift_retain();
  AGGraphSetUpdate();
  v127 = v22;
  v128 = v107;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v29 = *(_QWORD **)(a1 + 80);
  v103 = v28;
  v105 = v16;
  if (!v29)
  {
    swift_retain();
    PropertyList.Tracker.reset()();
    swift_release();
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v32 = *(void **)(a1 + 72);
    if (!v32)
    {
LABEL_59:
      __break(1u);
      return;
    }
    v129 = *(_QWORD *)(a1 + 40);
    v130 = v28;
    v131 = v116;
    v132 = 0;
    v133 = v32;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    v33 = MEMORY[0x18D75C5F8](v32) + 200;
    swift_beginAccess();
    v34 = MEMORY[0x18D760234](v33);
    v35 = swift_release();
    if (v34)
    {
      swift_getObjectType();
      v35 = swift_conformsToProtocol2();
      v37 = v11;
      v38 = (void *)*((_QWORD *)&v116 + 1);
      v39 = v116;
      if (v35)
        v40 = v34;
      else
        v40 = 0;
      if (v40)
        goto LABEL_45;
      v35 = swift_unknownObjectRelease();
    }
    else
    {
      v37 = v11;
      v38 = (void *)*((_QWORD *)&v116 + 1);
      v39 = v116;
    }
    v40 = 0;
LABEL_45:
    v100 = v40;
    v101 = &v98;
    v50 = *(_DWORD *)(a1 + 32);
    v52 = *(_QWORD *)(a1 + 40);
    v51 = *(_QWORD *)(a1 + 48);
    v53 = *(_QWORD *)(a1 + 56);
    v54 = *(void **)(a1 + 80);
    v102 = *(id *)(a1 + 72);
    v104 = v54;
    v55 = *(_DWORD *)(a1 + 88);
    v118 = v50;
    v56 = *(_QWORD *)(a1 + 96);
    v57 = *(_OWORD *)(a1 + 16);
    v116 = *(_OWORD *)a1;
    v117 = v57;
    v119 = v52;
    v120 = v51;
    v121 = v53;
    v122 = *(_QWORD *)(a1 + 64);
    v123 = v102;
    v124 = v54;
    v125 = v55;
    v126 = v56;
    MEMORY[0x1E0C80A78](v35, v36);
    v95[2] = &v129;
    v95[3] = &v134;
    v95[4] = v59;
    v95[5] = v58;
    v95[6] = v39;
    v95[7] = v38;
    v96 = v37;
    v97 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(0);
    v99 = v60;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v49 = v39;
    swift_retain();
    swift_retain();
    v61 = v102;
    v62 = v104;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v102 = 0;
    v104 = v38;
    swift_release();
    swift_release();
    v63 = v123;
    v64 = v124;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v65 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v108;

    goto LABEL_46;
  }
  LODWORD(v99) = v11;
  if ((v26 & 1) != 0)
  {
    swift_retain();
    v30 = v29;
    swift_retain();
    v31 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
    swift_release();
    swift_release();
    if ((v31 & 1) != 0)
    {
      swift_retain();
      PropertyList.Tracker.reset()();
      swift_release();
      v27 = 1;
    }
  }
  else
  {
    v41 = v29;
  }
  if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.UnarySubtreeSequence) & 1) != 0)
  {
    *(_QWORD *)&v116 = 0;
    WORD4(v116) = 1;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v128)
    {
      LODWORD(v98) = v27;
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    v28 = v103;
  }
  v42 = v27;
  v43 = v104 | v26;
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v104 = (id)*((_QWORD *)&v116 + 1);
  swift_retain();
  v44 = v116;
  swift_retain();
  AGGraphClearUpdate();
  if ((v43 & 1) != 0)
  {
    v45 = swift_retain();
    specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v45, 0, v99);
    swift_release();
  }
  if ((_DWORD)v102)
  {
    v46 = (char *)v29 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v29) + 0x90);
    *(_QWORD *)v46 = v105;
    v46[8] = v100;
    *((_DWORD *)v46 + 3) = (_DWORD)v101;
    swift_retain();
    swift_release();
    objc_msgSend(v29, sel__noteTraitsDidChangeRecursively);
  }
  AGGraphSetUpdate();
  v47 = *(void **)(a1 + 72);
  if (!v47)
    goto LABEL_58;
  v48 = v47;

  v129 = *(_QWORD *)(a1 + 40);
  v130 = v28;
  v49 = v44;
  *(_QWORD *)&v131 = v44;
  *((_QWORD *)&v131 + 1) = v104;
  v132 = 0;
  v133 = v48;
  swift_retain();
  if (!v42)
  {
    swift_release_n();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v44, (uint64_t)v104, 0);

    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    return;
  }
  swift_retain();
  v102 = 0;
LABEL_46:
  type metadata accessor for ViewGraph();
  v66 = MEMORY[0x18D75C5F8]() + 200;
  swift_beginAccess();
  v67 = MEMORY[0x18D760234](v66);
  v68 = swift_release();
  v100 = v49;
  if (v67)
  {
    swift_getObjectType();
    v68 = swift_conformsToProtocol2();
    if (v68)
      v70 = v67;
    else
      v70 = 0;
    if (!v70)
      v68 = swift_unknownObjectRelease();
  }
  v101 = v95;
  v72 = *(_QWORD *)(a1 + 40);
  v71 = *(_QWORD *)(a1 + 48);
  v73 = *(_QWORD *)(a1 + 56);
  v74 = *(void **)(a1 + 72);
  v75 = *(void **)(a1 + 80);
  v76 = *(_DWORD *)(a1 + 88);
  v118 = *(_DWORD *)(a1 + 32);
  v77 = *(_QWORD *)(a1 + 96);
  v78 = *(_OWORD *)(a1 + 16);
  v116 = *(_OWORD *)a1;
  v117 = v78;
  v119 = v72;
  v120 = v71;
  v121 = v73;
  v122 = *(_QWORD *)(a1 + 64);
  v123 = v74;
  v124 = v75;
  v125 = v76;
  v126 = v77;
  MEMORY[0x1E0C80A78](v68, v69);
  v99 = v79;
  v95[-6] = v79;
  v95[-5] = v80;
  v95[-4] = a1;
  v95[-3] = &v129;
  v95[-2] = &v134;
  type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
  swift_retain();
  swift_retain();
  v81 = v74;
  v82 = v75;
  swift_retain();
  StatefulRule.withObservation<A>(do:)();
  v83 = v123;
  v84 = v124;
  swift_release();
  swift_release();
  swift_release();

  v85 = *(void **)(a1 + 80);
  if (!v85)
  {
    __break(1u);
    goto LABEL_57;
  }
  v86 = *(void **)(a1 + 72);
  if (!v86)
  {
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v87 = v136;
  v98 = v135;
  v101 = *(uint64_t **)(a1 + 40);
  v102 = v139;
  v108 = v134;
  v109 = v135;
  v110 = v136;
  v111 = v137;
  v112 = v138;
  v113 = v139;
  v114 = v85;
  v115 = v86;
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(0);
  swift_bridgeObjectRetain();
  v88 = v86;
  v89 = v85;
  swift_retain();
  swift_retain();
  v90 = v88;
  v91 = v89;
  swift_retain();
  swift_retain();
  swift_retain();
  v92 = v87;
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v93 = v131;
  LOBYTE(v87) = v132;
  v94 = v133;
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v93, *((uint64_t *)&v93 + 1), (char)v87);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t Value;
  char v16;
  char v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  void *v35;
  void *v36;
  char v37;
  char v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  char v42;
  void *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _BYTE *v51;
  _QWORD *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void *v59;
  id v60;
  _BYTE *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  id v73;
  id v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  int v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  id v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  id v104;
  id v105;
  id v106;
  __int128 v107;
  char v108;
  void *v109;
  uint64_t v110;
  _BYTE v111[4];
  int v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  _BYTE *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  id v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  char v143;
  id v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = &v111[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v111[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v111[-v13];
  Value = AGGraphGetValue();
  v17 = v16;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(Value, (uint64_t)v14);
  v18 = (unsigned int *)AGGraphGetValue();
  v120 = v19;
  v20 = *v18;
  v21 = (uint64_t *)AGGraphGetValue();
  v119 = v22;
  v23 = *v21;
  v125 = v21[1];
  v24 = *(_DWORD *)(a1 + 28) == *MEMORY[0x1E0CFED28];
  v115 = v6;
  v116 = v10;
  if (v24
    || (v25 = AGGraphGetValue(),
        v27 = v26,
        v28 = *(_QWORD *)v25,
        LODWORD(v114) = *(unsigned __int8 *)(v25 + 8),
        v29 = *(_DWORD *)(v25 + 12),
        swift_retain(),
        v122 = v28,
        v28 == 1))
  {
    v30 = 0;
    LODWORD(v113) = 0;
    LODWORD(v114) = 0;
    v122 = 0;
  }
  else
  {
    LODWORD(v113) = v29;
    v30 = v27 & 1;
  }
  v31 = v20 >> 1;
  if (v20 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    v32 = v3;
    v33 = v17;
    v34 = v20;
    v127 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    v35 = *(void **)(a1 + 72);
    if (v35)
    {
      v36 = *(void **)(a1 + 80);
      if (v36)
      {

        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v31;
    v20 = v34;
    v17 = v33;
    v3 = v32;
  }
  v127 = *(_OWORD *)(a1 + 56);
  LODWORD(v140) = v20;
  v37 = _DynamicPropertyBuffer.update(container:phase:)();
  v38 = (char)v119;
  LODWORD(v118) = v20;
  if ((v37 & 1) != 0)
  {
    v39 = 1;
  }
  else
  {
    v39 = 1;
    if (AGGraphGetOutputValue() && (v17 & 1) == 0 && (v120 & 1) == 0)
      v39 = AGGraphCurrentAttributeWasModified();
  }
  AGGraphClearUpdate();
  v123 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v14);
  swift_retain();
  AGGraphSetUpdate();
  v138 = v23;
  v139 = v125;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v40 = *(_QWORD **)(a1 + 80);
  v121 = v23;
  v124 = v14;
  v117 = v3;
  if (v40)
  {
    if ((v38 & 1) != 0)
    {
      swift_retain();
      v41 = v40;
      swift_retain();
      v42 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v42 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        v39 = 1;
      }
    }
    else
    {
      v52 = v40;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v127 = 0;
      WORD4(v127) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v139)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    v112 = v39;
    v53 = v120 | v38;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v55 = *((_QWORD *)&v127 + 1);
    v54 = v127;
    swift_retain();
    v56 = v54;
    swift_retain();
    AGGraphClearUpdate();
    if ((v53 & 1) != 0)
    {
      v57 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v57, 0, (int)v118);
      swift_release();
    }
    if (v30)
    {
      v58 = (char *)v40 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v40) + 0x90);
      *(_QWORD *)v58 = v122;
      v58[8] = (char)v114;
      *((_DWORD *)v58 + 3) = v113;
      swift_retain();
      swift_release();
      objc_msgSend(v40, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    v59 = *(void **)(a1 + 72);
    if (!v59)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v60 = v59;

    v140 = *(_QWORD *)(a1 + 40);
    v141 = v123;
    v61 = (_BYTE *)v56;
    *(_QWORD *)&v142 = v56;
    *((_QWORD *)&v142 + 1) = v55;
    v143 = 0;
    v144 = v60;
    swift_retain();
    if (!v112)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v56, v55, 0);

LABEL_52:
      v110 = (uint64_t)v124;
      swift_release();
      swift_release();
      outlined destroy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(v110);
      return;
    }
    swift_retain();
    v119 = 0;
LABEL_43:
    type metadata accessor for ViewGraph();
    v78 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v79 = MEMORY[0x18D760234](v78);
    v80 = swift_release();
    v120 = v55;
    v114 = v61;
    if (v79)
    {
      swift_getObjectType();
      v80 = swift_conformsToProtocol2();
      if (v80)
        v82 = v79;
      else
        v82 = 0;
      if (!v82)
        v80 = swift_unknownObjectRelease();
    }
    v118 = v111;
    v83 = *(_QWORD *)(a1 + 40);
    v84 = *(_QWORD *)(a1 + 48);
    v85 = *(_QWORD *)(a1 + 56);
    v87 = *(void **)(a1 + 72);
    v86 = *(void **)(a1 + 80);
    v88 = *(_DWORD *)(a1 + 88);
    v129 = *(_DWORD *)(a1 + 32);
    v89 = *(_QWORD *)(a1 + 96);
    v90 = *(_OWORD *)(a1 + 16);
    v127 = *(_OWORD *)a1;
    v128 = v90;
    v130 = v83;
    v131 = v84;
    v132 = v85;
    v133 = *(_QWORD *)(a1 + 64);
    v134 = v87;
    v135 = v86;
    v136 = v88;
    v137 = v89;
    MEMORY[0x1E0C80A78](v80, v81);
    v113 = v91;
    *(_QWORD *)&v111[-48] = v91;
    *(_QWORD *)&v111[-40] = v92;
    *(_QWORD *)&v111[-32] = a1;
    *(_QWORD *)&v111[-24] = &v140;
    v93 = (uint64_t)v124;
    *(_QWORD *)&v111[-16] = v124;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v94 = v87;
    v95 = v86;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v96 = v134;
    v97 = v135;
    swift_release();
    swift_release();
    swift_release();

    v98 = *(void **)(a1 + 80);
    if (v98)
    {
      v99 = *(void **)(a1 + 72);
      v100 = (uint64_t)v116;
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(v93, (uint64_t)v116);
      v101 = v117;
      if (v99)
      {
        v102 = (uint64_t)v115;
        *(_QWORD *)&v115[*(int *)(v117 + 40)] = v99;
        outlined init with take of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(v100, v102);
        *(_QWORD *)(v102 + *(int *)(v101 + 36)) = v98;
        v103 = v98;
        swift_retain();
        swift_retain();
        v104 = v99;
        v105 = v103;
        swift_retain();
        v106 = v104;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(v102);
        v107 = v142;
        v108 = v143;
        v109 = v144;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v107, *((uint64_t *)&v107 + 1), v108);

        goto LABEL_52;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_55;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v43 = *(void **)(a1 + 72);
  if (v43)
  {
    v44 = v127;
    v140 = *(_QWORD *)(a1 + 40);
    v141 = v123;
    v142 = v127;
    v143 = 0;
    v144 = v43;
    type metadata accessor for ViewGraph();
    v120 = *((_QWORD *)&v44 + 1);
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    v45 = MEMORY[0x18D75C5F8](v43) + 200;
    swift_beginAccess();
    v46 = MEMORY[0x18D760234](v45);
    v47 = swift_release();
    if (v46)
    {
      swift_getObjectType();
      v47 = swift_conformsToProtocol2();
      if (v47)
        v49 = v46;
      else
        v49 = 0;
      v50 = (int)v118;
      v51 = (_BYTE *)v44;
      if (!v49)
      {
        v47 = swift_unknownObjectRelease();
        v49 = 0;
      }
    }
    else
    {
      v51 = (_BYTE *)v44;
      v49 = 0;
      v50 = (int)v118;
    }
    v113 = v49;
    v114 = v111;
    v62 = *(_DWORD *)(a1 + 32);
    v64 = *(_QWORD *)(a1 + 40);
    v63 = *(_QWORD *)(a1 + 48);
    v65 = *(_QWORD *)(a1 + 56);
    v66 = *(void **)(a1 + 72);
    v119 = *(id *)(a1 + 80);
    v67 = *(_DWORD *)(a1 + 88);
    v129 = v62;
    v68 = *(_QWORD *)(a1 + 96);
    v69 = *(_OWORD *)(a1 + 16);
    v127 = *(_OWORD *)a1;
    v128 = v69;
    v130 = v64;
    v131 = v63;
    v132 = v65;
    v133 = *(_QWORD *)(a1 + 64);
    v134 = v66;
    v135 = v119;
    v136 = v67;
    v137 = v68;
    MEMORY[0x1E0C80A78](v47, v48);
    *(_QWORD *)&v111[-64] = &v140;
    *(_QWORD *)&v111[-56] = v124;
    *(_QWORD *)&v111[-48] = v70;
    *(_QWORD *)&v111[-40] = v71;
    *(_QWORD *)&v111[-32] = v51;
    v55 = v120;
    *(_QWORD *)&v111[-24] = v120;
    *(_DWORD *)&v111[-16] = v50;
    *(_QWORD *)&v111[-8] = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(0);
    v118 = v72;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v61 = v51;
    swift_retain();
    swift_retain();
    v73 = v66;
    v74 = v119;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v119 = 0;
    swift_release();
    swift_release();
    v75 = v134;
    v76 = v135;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v77 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v126;

    goto LABEL_43;
  }
LABEL_56:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Value;
  char v15;
  char v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  char v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  int v28;
  void *v29;
  void *v30;
  int v31;
  _QWORD *v32;
  _QWORD *v33;
  char v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  void *v57;
  void *v58;
  void *v59;
  _QWORD *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char *v65;
  void *v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  int v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  id v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  id v96;
  id v97;
  id v98;
  __int128 v99;
  char v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  id v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  id v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  char v133;
  id v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v7, v8);
  v108 = (uint64_t)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v102 - v12;
  Value = AGGraphGetValue();
  v16 = v15;
  outlined init with copy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(Value, (uint64_t)v13);
  v17 = (unsigned int *)AGGraphGetValue();
  v110 = v18;
  v19 = *v17;
  v20 = (uint64_t *)AGGraphGetValue();
  v22 = v21;
  v115 = *v20;
  v114 = v20[1];
  v23 = *(_DWORD *)(a1 + 28) == *MEMORY[0x1E0CFED28];
  v107 = v6;
  if (v23
    || (v24 = AGGraphGetValue(),
        v26 = v25,
        v27 = *(_QWORD *)v24,
        LODWORD(v105) = *(unsigned __int8 *)(v24 + 8),
        v28 = *(_DWORD *)(v24 + 12),
        swift_retain(),
        v112 = v27,
        v27 == 1))
  {
    LODWORD(v106) = 0;
    LODWORD(v104) = 0;
    LODWORD(v105) = 0;
    v112 = 0;
  }
  else
  {
    LODWORD(v104) = v28;
    LODWORD(v106) = v26 & 1;
  }
  if (v19 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    v117 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    v29 = *(void **)(a1 + 72);
    if (v29)
    {
      v30 = *(void **)(a1 + 80);
      if (v30)
      {

        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v19 >> 1;
  }
  v117 = *(_OWORD *)(a1 + 56);
  LODWORD(v130) = v19;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v31 = 1;
  }
  else
  {
    v31 = 1;
    if (AGGraphGetOutputValue() && (v16 & 1) == 0 && (v110 & 1) == 0)
      v31 = AGGraphCurrentAttributeWasModified();
  }
  AGGraphClearUpdate();
  v113 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v13);
  swift_retain();
  AGGraphSetUpdate();
  v128 = v115;
  v129 = v114;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v32 = *(_QWORD **)(a1 + 80);
  v111 = v13;
  v109 = v3;
  if (v32)
  {
    if ((v22 & 1) != 0)
    {
      swift_retain();
      v33 = v32;
      swift_retain();
      v34 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v34 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        v31 = 1;
      }
    }
    else
    {
      v60 = v32;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v117 = 0;
      WORD4(v117) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v129)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    v61 = v110 | v22;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v62 = *((_QWORD *)&v117 + 1);
    v38 = v117;
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    if ((v61 & 1) != 0)
    {
      v63 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v63, 0, v19, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1E1B20498, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
      swift_release();
    }
    v64 = v31;
    if ((_DWORD)v106)
    {
      v65 = (char *)v32 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v32) + 0x90);
      *(_QWORD *)v65 = v112;
      v65[8] = (char)v105;
      *((_DWORD *)v65 + 3) = v104;
      swift_retain();
      swift_release();
      specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(0);
    }
    AGGraphSetUpdate();
    v66 = *(void **)(a1 + 72);
    v67 = v113;
    if (!v66)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v68 = v66;

    v130 = *(_QWORD *)(a1 + 40);
    v131 = v67;
    *(_QWORD *)&v132 = v38;
    *((_QWORD *)&v132 + 1) = v62;
    v133 = 0;
    v134 = v68;
    swift_retain();
    if (!v64)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v38, v62, 0);

      v93 = (uint64_t)v111;
      goto LABEL_52;
    }
    v110 = v62;
    swift_retain();
    v106 = 0;
LABEL_42:
    type metadata accessor for ViewGraph();
    v69 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v70 = MEMORY[0x18D760234](v69);
    v71 = swift_release();
    v104 = v38;
    if (v70)
    {
      swift_getObjectType();
      v71 = swift_conformsToProtocol2();
      if (v71)
        v73 = v70;
      else
        v73 = 0;
      if (!v73)
        v71 = swift_unknownObjectRelease();
    }
    v105 = &v102;
    v74 = *(_QWORD *)(a1 + 40);
    v75 = *(_QWORD *)(a1 + 48);
    v76 = *(_QWORD *)(a1 + 56);
    v78 = *(void **)(a1 + 72);
    v77 = *(void **)(a1 + 80);
    v79 = *(_DWORD *)(a1 + 88);
    v119 = *(_DWORD *)(a1 + 32);
    v80 = *(_QWORD *)(a1 + 96);
    v81 = *(_OWORD *)(a1 + 16);
    v117 = *(_OWORD *)a1;
    v118 = v81;
    v120 = v74;
    v121 = v75;
    v122 = v76;
    v123 = *(_QWORD *)(a1 + 64);
    v124 = v78;
    v125 = v77;
    v126 = v79;
    v127 = v80;
    MEMORY[0x1E0C80A78](v71, v72);
    v103 = v82;
    *(&v102 - 6) = v82;
    *(&v102 - 5) = v83;
    *(&v102 - 4) = a1;
    *(&v102 - 3) = (uint64_t)&v130;
    v84 = (uint64_t)v111;
    *(&v102 - 2) = (uint64_t)v111;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v85 = v78;
    v86 = v77;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v87 = v124;
    v88 = v125;
    swift_release();
    swift_release();
    swift_release();

    v89 = *(void **)(a1 + 80);
    if (v89)
    {
      v90 = *(void **)(a1 + 72);
      v91 = v108;
      outlined init with copy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(v84, v108);
      v92 = v109;
      if (v90)
      {
        v93 = v84;
        v94 = (uint64_t)v107;
        *(_QWORD *)&v107[*(int *)(v109 + 40)] = v90;
        outlined init with take of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(v91, v94);
        *(_QWORD *)(v94 + *(int *)(v92 + 36)) = v89;
        v95 = v89;
        swift_retain();
        swift_retain();
        v96 = v90;
        v97 = v95;
        swift_retain();
        v98 = v96;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v94, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
        v99 = v132;
        v100 = v133;
        v101 = v134;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v99, *((uint64_t *)&v99 + 1), v100);

LABEL_52:
        swift_release();
        swift_release();
        outlined destroy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(v93);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_55;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v35 = *(void **)(a1 + 72);
  if (v35)
  {
    v36 = *((_QWORD *)&v117 + 1);
    v37 = v117;
    v130 = *(_QWORD *)(a1 + 40);
    v131 = v113;
    v132 = v117;
    v133 = 0;
    v134 = v35;
    type metadata accessor for ViewGraph();
    v110 = v36;
    v38 = v37;
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    v39 = MEMORY[0x18D75C5F8](v35) + 200;
    swift_beginAccess();
    v40 = MEMORY[0x18D760234](v39);
    v41 = swift_release();
    if (v40)
    {
      swift_getObjectType();
      v41 = swift_conformsToProtocol2();
      if (v41)
        v43 = v40;
      else
        v43 = 0;
      if (v43)
        goto LABEL_29;
      v41 = swift_unknownObjectRelease();
    }
    v43 = 0;
LABEL_29:
    v104 = v43;
    v105 = &v102;
    v44 = *(_DWORD *)(a1 + 32);
    v46 = *(_QWORD *)(a1 + 40);
    v45 = *(_QWORD *)(a1 + 48);
    v47 = *(_QWORD *)(a1 + 56);
    v48 = *(void **)(a1 + 72);
    v106 = *(id *)(a1 + 80);
    v49 = *(_DWORD *)(a1 + 88);
    v119 = v44;
    v50 = *(_QWORD *)(a1 + 96);
    v51 = *(_OWORD *)(a1 + 16);
    v117 = *(_OWORD *)a1;
    v118 = v51;
    v120 = v46;
    v121 = v45;
    v122 = v47;
    v123 = *(_QWORD *)(a1 + 64);
    v124 = v48;
    v125 = v106;
    v126 = v49;
    v127 = v50;
    MEMORY[0x1E0C80A78](v41, v42);
    *(&v102 - 8) = (uint64_t)&v130;
    *(&v102 - 7) = (uint64_t)v111;
    *(&v102 - 6) = v52;
    *(&v102 - 5) = v53;
    *(&v102 - 4) = v38;
    *(&v102 - 3) = v110;
    *((_DWORD *)&v102 - 4) = v19;
    *(&v102 - 1) = a1;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(0);
    v103 = v54;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v55 = v48;
    v56 = v106;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v106 = 0;
    swift_release();
    swift_release();
    v57 = v124;
    v58 = v125;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v59 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v116;

    goto LABEL_42;
  }
LABEL_56:
  __break(1u);
}

{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  void *v9;
  unsigned int v10;
  uint64_t *v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  char v19;
  void *v20;
  void *v21;
  char v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void *v42;
  id v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  int v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  int v71;
  uint64_t v72;
  __int128 v73;
  void *v74;
  uint64_t v75;
  id v76;
  id v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  id v82;
  id v83;
  id v84;
  id v85;
  __int128 v86;
  char v87;
  void *v88;
  _QWORD v89[8];
  int v90;
  uint64_t v91;
  _DWORD v92[4];
  id v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  void *v107;
  void *v108;
  __int128 v109;
  __int128 v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  void *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  char v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  Value = AGGraphGetValue();
  v99 = v3;
  v4 = *(_QWORD *)(Value + 8);
  v6 = *(_QWORD *)(Value + 16);
  v5 = *(_QWORD *)(Value + 24);
  v7 = *(_BYTE *)(Value + 32);
  v127 = *(_QWORD *)Value;
  v128 = v4;
  v129 = v6;
  v130 = v5;
  v131 = v7;
  v8 = (unsigned int *)AGGraphGetValue();
  v98 = v9;
  v10 = *v8;
  v11 = (uint64_t *)AGGraphGetValue();
  v13 = v12;
  v14 = *v11;
  v101 = v11[1];
  if (*(_DWORD *)(a1 + 28) == *MEMORY[0x1E0CFED28])
  {
    LODWORD(v95) = 0;
    LODWORD(v94) = 0;
    LODWORD(v93) = 0;
    v15 = 0;
  }
  else
  {
    v16 = v10;
    v17 = AGGraphGetValue();
    v19 = v18;
    v15 = *(_QWORD *)v17;
    LODWORD(v93) = *(unsigned __int8 *)(v17 + 8);
    LODWORD(v94) = *(_DWORD *)(v17 + 12);
    swift_retain();
    if (v15 == 1)
    {
      LODWORD(v95) = 0;
      LODWORD(v94) = 0;
      LODWORD(v93) = 0;
      v15 = 0;
    }
    else
    {
      LODWORD(v95) = v19 & 1;
    }
    v10 = v16;
  }
  if (v10 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v109 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    v20 = *(void **)(a1 + 72);
    if (v20)
    {
      v21 = *(void **)(a1 + 80);
      if (v21)
      {

        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v10 >> 1;
  }
  v109 = *(_OWORD *)(a1 + 56);
  LODWORD(v102) = v10;
  v22 = v13;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v23 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(0);
    v23 = 1;
    if (AGGraphGetOutputValue() && (v99 & 1) == 0 && (v98 & 1) == 0)
      v23 = AGGraphCurrentAttributeWasModified();
  }
  AGGraphClearUpdate();
  v24 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, &v127);
  swift_retain();
  AGGraphSetUpdate();
  v120 = v14;
  v121 = v101;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v25 = *(_QWORD **)(a1 + 80);
  v97 = v14;
  v99 = v24;
  v100 = v15;
  LODWORD(v96) = v10;
  if (v25)
  {
    if ((v22 & 1) != 0)
    {
      swift_retain();
      v26 = v25;
      swift_retain();
      v27 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v27 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        v23 = 1;
      }
    }
    else
    {
      v36 = v25;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v109 = 0;
      WORD4(v109) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v121)
      {
        v92[3] = v23;
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    v37 = v23;
    v38 = v98 | v22;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v98 = (id)*((_QWORD *)&v109 + 1);
    swift_retain();
    v39 = v109;
    swift_retain();
    AGGraphClearUpdate();
    if ((v38 & 1) != 0)
    {
      v40 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v40, 0, v96);
      swift_release();
    }
    if ((_DWORD)v95)
    {
      v41 = (char *)v25 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v25) + 0x90);
      *(_QWORD *)v41 = v100;
      v41[8] = (char)v93;
      *((_DWORD *)v41 + 3) = v94;
      swift_retain();
      swift_release();
      objc_msgSend(v25, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    v42 = *(void **)(a1 + 72);
    if (!v42)
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    v43 = v42;

    v122 = *(_QWORD *)(a1 + 40);
    v123 = v99;
    v44 = v39;
    *(_QWORD *)&v124 = v39;
    *((_QWORD *)&v124 + 1) = v98;
    v125 = 0;
    v126 = v43;
    swift_retain();
    if (!v37)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v39, (uint64_t)v98, 0);

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
LABEL_55:
      swift_release();
      return;
    }
    swift_retain();
    v96 = 0;
LABEL_46:
    type metadata accessor for ViewGraph();
    v61 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v62 = MEMORY[0x18D760234](v61);
    v63 = swift_release();
    v94 = v44;
    if (v62)
    {
      swift_getObjectType();
      v63 = swift_conformsToProtocol2();
      if (v63)
        v65 = v62;
      else
        v65 = 0;
      if (!v65)
        v63 = swift_unknownObjectRelease();
    }
    v95 = v89;
    v67 = *(_QWORD *)(a1 + 40);
    v66 = *(_QWORD *)(a1 + 48);
    v68 = *(_QWORD *)(a1 + 56);
    v70 = *(void **)(a1 + 72);
    v69 = *(void **)(a1 + 80);
    v71 = *(_DWORD *)(a1 + 88);
    v111 = *(_DWORD *)(a1 + 32);
    v72 = *(_QWORD *)(a1 + 96);
    v73 = *(_OWORD *)(a1 + 16);
    v109 = *(_OWORD *)a1;
    v110 = v73;
    v112 = v67;
    v113 = v66;
    v114 = v68;
    v115 = *(_QWORD *)(a1 + 64);
    v116 = v70;
    v117 = v69;
    v118 = v71;
    v119 = v72;
    MEMORY[0x1E0C80A78](v63, v64);
    v93 = v74;
    v89[-6] = v74;
    v89[-5] = v75;
    v89[-4] = a1;
    v89[-3] = &v122;
    v89[-2] = &v127;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v76 = v70;
    v77 = v69;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v78 = v116;
    v79 = v117;
    swift_release();
    swift_release();
    swift_release();

    v80 = *(void **)(a1 + 80);
    if (v80)
    {
      v81 = *(void **)(a1 + 72);
      if (v81)
      {
        v102 = v127;
        v103 = v128;
        v96 = v128;
        v104 = v129;
        v105 = v130;
        v106 = v131;
        v107 = v80;
        v108 = v81;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(0);
        swift_retain();
        swift_retain();
        v82 = v81;
        v83 = v80;
        swift_retain();
        swift_retain();
        v84 = v82;
        v85 = v83;
        swift_retain();
        swift_bridgeObjectRetain();
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        v86 = v124;
        v87 = v125;
        v88 = v126;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v86, *((uint64_t *)&v86 + 1), v87);

        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_55;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_58;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v28 = *(void **)(a1 + 72);
  if (v28)
  {
    v29 = v109;
    v122 = *(_QWORD *)(a1 + 40);
    v123 = v24;
    v124 = v109;
    v125 = 0;
    v126 = v28;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    v30 = MEMORY[0x18D75C5F8](v28) + 200;
    swift_beginAccess();
    v31 = MEMORY[0x18D760234](v30);
    v32 = swift_release();
    if (v31)
    {
      swift_getObjectType();
      v32 = swift_conformsToProtocol2();
      v34 = (void *)*((_QWORD *)&v109 + 1);
      if (v32)
        v35 = v31;
      else
        v35 = 0;
      if (v35)
        goto LABEL_45;
      v32 = swift_unknownObjectRelease();
    }
    else
    {
      v34 = (void *)*((_QWORD *)&v109 + 1);
    }
    v35 = 0;
LABEL_45:
    v94 = v35;
    v95 = v92;
    v45 = *(_DWORD *)(a1 + 32);
    v47 = *(_QWORD *)(a1 + 40);
    v46 = *(_QWORD *)(a1 + 48);
    v48 = *(_QWORD *)(a1 + 56);
    v49 = *(void **)(a1 + 80);
    v93 = *(id *)(a1 + 72);
    v98 = v49;
    v50 = *(_DWORD *)(a1 + 88);
    v111 = v45;
    v51 = *(_QWORD *)(a1 + 96);
    v52 = *(_OWORD *)(a1 + 16);
    v109 = *(_OWORD *)a1;
    v110 = v52;
    v112 = v47;
    v113 = v46;
    v114 = v48;
    v115 = *(_QWORD *)(a1 + 64);
    v116 = v93;
    v117 = v49;
    v118 = v50;
    v119 = v51;
    MEMORY[0x1E0C80A78](v32, v33);
    v89[2] = &v122;
    v89[3] = &v127;
    v89[4] = v54;
    v89[5] = v53;
    v89[6] = v29;
    v89[7] = v34;
    v90 = v96;
    v91 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(0);
    v96 = v55;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v44 = v29;
    swift_retain();
    swift_retain();
    v56 = v93;
    v57 = v98;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v96 = 0;
    v98 = v34;
    swift_release();
    swift_release();
    v58 = v116;
    v59 = v117;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v60 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v102;

    goto LABEL_46;
  }
LABEL_59:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t Value;
  char v16;
  char v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  void *v35;
  void *v36;
  char v37;
  char v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  char v42;
  void *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _BYTE *v51;
  _QWORD *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void *v59;
  id v60;
  _BYTE *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  id v73;
  id v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  int v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  id v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  id v104;
  id v105;
  id v106;
  __int128 v107;
  char v108;
  void *v109;
  uint64_t v110;
  _BYTE v111[4];
  int v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  _BYTE *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  id v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  char v143;
  id v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = &v111[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v111[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v111[-v13];
  Value = AGGraphGetValue();
  v17 = v16;
  outlined init with copy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(Value, (uint64_t)v14);
  v18 = (unsigned int *)AGGraphGetValue();
  v120 = v19;
  v20 = *v18;
  v21 = (uint64_t *)AGGraphGetValue();
  v119 = v22;
  v23 = *v21;
  v125 = v21[1];
  v24 = *(_DWORD *)(a1 + 28) == *MEMORY[0x1E0CFED28];
  v115 = v6;
  v116 = v10;
  if (v24
    || (v25 = AGGraphGetValue(),
        v27 = v26,
        v28 = *(_QWORD *)v25,
        LODWORD(v114) = *(unsigned __int8 *)(v25 + 8),
        v29 = *(_DWORD *)(v25 + 12),
        swift_retain(),
        v122 = v28,
        v28 == 1))
  {
    v30 = 0;
    LODWORD(v113) = 0;
    LODWORD(v114) = 0;
    v122 = 0;
  }
  else
  {
    LODWORD(v113) = v29;
    v30 = v27 & 1;
  }
  v31 = v20 >> 1;
  if (v20 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    v32 = v3;
    v33 = v17;
    v34 = v20;
    v127 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    v35 = *(void **)(a1 + 72);
    if (v35)
    {
      v36 = *(void **)(a1 + 80);
      if (v36)
      {

        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v31;
    v20 = v34;
    v17 = v33;
    v3 = v32;
  }
  v127 = *(_OWORD *)(a1 + 56);
  LODWORD(v140) = v20;
  v37 = _DynamicPropertyBuffer.update(container:phase:)();
  v38 = (char)v119;
  LODWORD(v118) = v20;
  if ((v37 & 1) != 0)
  {
    v39 = 1;
  }
  else
  {
    v39 = 1;
    if (AGGraphGetOutputValue() && (v17 & 1) == 0 && (v120 & 1) == 0)
      v39 = AGGraphCurrentAttributeWasModified();
  }
  AGGraphClearUpdate();
  v123 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v14);
  swift_retain();
  AGGraphSetUpdate();
  v138 = v23;
  v139 = v125;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v40 = *(_QWORD **)(a1 + 80);
  v121 = v23;
  v124 = v14;
  v117 = v3;
  if (v40)
  {
    if ((v38 & 1) != 0)
    {
      swift_retain();
      v41 = v40;
      swift_retain();
      v42 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v42 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        v39 = 1;
      }
    }
    else
    {
      v52 = v40;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v127 = 0;
      WORD4(v127) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v139)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    v112 = v39;
    v53 = v120 | v38;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v55 = *((_QWORD *)&v127 + 1);
    v54 = v127;
    swift_retain();
    v56 = v54;
    swift_retain();
    AGGraphClearUpdate();
    if ((v53 & 1) != 0)
    {
      v57 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v57, 0, (int)v118);
      swift_release();
    }
    if (v30)
    {
      v58 = (char *)v40 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v40) + 0x90);
      *(_QWORD *)v58 = v122;
      v58[8] = (char)v114;
      *((_DWORD *)v58 + 3) = v113;
      swift_retain();
      swift_release();
      objc_msgSend(v40, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    v59 = *(void **)(a1 + 72);
    if (!v59)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v60 = v59;

    v140 = *(_QWORD *)(a1 + 40);
    v141 = v123;
    v61 = (_BYTE *)v56;
    *(_QWORD *)&v142 = v56;
    *((_QWORD *)&v142 + 1) = v55;
    v143 = 0;
    v144 = v60;
    swift_retain();
    if (!v112)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v56, v55, 0);

LABEL_52:
      v110 = (uint64_t)v124;
      swift_release();
      swift_release();
      outlined destroy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(v110);
      return;
    }
    swift_retain();
    v119 = 0;
LABEL_43:
    type metadata accessor for ViewGraph();
    v78 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v79 = MEMORY[0x18D760234](v78);
    v80 = swift_release();
    v120 = v55;
    v114 = v61;
    if (v79)
    {
      swift_getObjectType();
      v80 = swift_conformsToProtocol2();
      if (v80)
        v82 = v79;
      else
        v82 = 0;
      if (!v82)
        v80 = swift_unknownObjectRelease();
    }
    v118 = v111;
    v83 = *(_QWORD *)(a1 + 40);
    v84 = *(_QWORD *)(a1 + 48);
    v85 = *(_QWORD *)(a1 + 56);
    v87 = *(void **)(a1 + 72);
    v86 = *(void **)(a1 + 80);
    v88 = *(_DWORD *)(a1 + 88);
    v129 = *(_DWORD *)(a1 + 32);
    v89 = *(_QWORD *)(a1 + 96);
    v90 = *(_OWORD *)(a1 + 16);
    v127 = *(_OWORD *)a1;
    v128 = v90;
    v130 = v83;
    v131 = v84;
    v132 = v85;
    v133 = *(_QWORD *)(a1 + 64);
    v134 = v87;
    v135 = v86;
    v136 = v88;
    v137 = v89;
    MEMORY[0x1E0C80A78](v80, v81);
    v113 = v91;
    *(_QWORD *)&v111[-48] = v91;
    *(_QWORD *)&v111[-40] = v92;
    *(_QWORD *)&v111[-32] = a1;
    *(_QWORD *)&v111[-24] = &v140;
    v93 = (uint64_t)v124;
    *(_QWORD *)&v111[-16] = v124;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v94 = v87;
    v95 = v86;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v96 = v134;
    v97 = v135;
    swift_release();
    swift_release();
    swift_release();

    v98 = *(void **)(a1 + 80);
    if (v98)
    {
      v99 = *(void **)(a1 + 72);
      v100 = (uint64_t)v116;
      outlined init with copy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(v93, (uint64_t)v116);
      v101 = v117;
      if (v99)
      {
        v102 = (uint64_t)v115;
        *(_QWORD *)&v115[*(int *)(v117 + 40)] = v99;
        outlined init with take of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(v100, v102);
        *(_QWORD *)(v102 + *(int *)(v101 + 36)) = v98;
        v103 = v98;
        swift_retain();
        swift_retain();
        v104 = v99;
        v105 = v103;
        swift_retain();
        v106 = v104;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(v102);
        v107 = v142;
        v108 = v143;
        v109 = v144;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v107, *((uint64_t *)&v107 + 1), v108);

        goto LABEL_52;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_55;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v43 = *(void **)(a1 + 72);
  if (v43)
  {
    v44 = v127;
    v140 = *(_QWORD *)(a1 + 40);
    v141 = v123;
    v142 = v127;
    v143 = 0;
    v144 = v43;
    type metadata accessor for ViewGraph();
    v120 = *((_QWORD *)&v44 + 1);
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    v45 = MEMORY[0x18D75C5F8](v43) + 200;
    swift_beginAccess();
    v46 = MEMORY[0x18D760234](v45);
    v47 = swift_release();
    if (v46)
    {
      swift_getObjectType();
      v47 = swift_conformsToProtocol2();
      if (v47)
        v49 = v46;
      else
        v49 = 0;
      v50 = (int)v118;
      v51 = (_BYTE *)v44;
      if (!v49)
      {
        v47 = swift_unknownObjectRelease();
        v49 = 0;
      }
    }
    else
    {
      v51 = (_BYTE *)v44;
      v49 = 0;
      v50 = (int)v118;
    }
    v113 = v49;
    v114 = v111;
    v62 = *(_DWORD *)(a1 + 32);
    v64 = *(_QWORD *)(a1 + 40);
    v63 = *(_QWORD *)(a1 + 48);
    v65 = *(_QWORD *)(a1 + 56);
    v66 = *(void **)(a1 + 72);
    v119 = *(id *)(a1 + 80);
    v67 = *(_DWORD *)(a1 + 88);
    v129 = v62;
    v68 = *(_QWORD *)(a1 + 96);
    v69 = *(_OWORD *)(a1 + 16);
    v127 = *(_OWORD *)a1;
    v128 = v69;
    v130 = v64;
    v131 = v63;
    v132 = v65;
    v133 = *(_QWORD *)(a1 + 64);
    v134 = v66;
    v135 = v119;
    v136 = v67;
    v137 = v68;
    MEMORY[0x1E0C80A78](v47, v48);
    *(_QWORD *)&v111[-64] = &v140;
    *(_QWORD *)&v111[-56] = v124;
    *(_QWORD *)&v111[-48] = v70;
    *(_QWORD *)&v111[-40] = v71;
    *(_QWORD *)&v111[-32] = v51;
    v55 = v120;
    *(_QWORD *)&v111[-24] = v120;
    *(_DWORD *)&v111[-16] = v50;
    *(_QWORD *)&v111[-8] = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(0);
    v118 = v72;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v61 = v51;
    swift_retain();
    swift_retain();
    v73 = v66;
    v74 = v119;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v119 = 0;
    swift_release();
    swift_release();
    v75 = v134;
    v76 = v135;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v77 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v126;

    goto LABEL_43;
  }
LABEL_56:
  __break(1u);
}

{
  uint64_t Value;
  char v3;
  char v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  void *v19;
  int v20;
  uint64_t OutputValue;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  _QWORD *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  id v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  int v66;
  __int128 v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  id v71;
  void *v72;
  void *v73;
  uint64_t v74;
  id v75;
  id v76;
  __int128 v77;
  char v78;
  _QWORD v79[8];
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[46];
  _OWORD v94[2];
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  int v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  char v122;
  uint64_t v123;
  _QWORD v124[49];

  v124[46] = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  Value = AGGraphGetValue();
  v4 = v3;
  outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>(Value, (uint64_t)v124);
  v5 = (unsigned int *)AGGraphGetValue();
  v92 = v6;
  v7 = *v5;
  v8 = (uint64_t *)AGGraphGetValue();
  v90 = v9;
  v10 = *v8;
  v11 = v8[1];
  if (*(_DWORD *)(a1 + 28) == *MEMORY[0x1E0CFED28]
    || (v12 = AGGraphGetValue(),
        v14 = v13,
        v15 = *(_QWORD *)v12,
        v16 = *(unsigned __int8 *)(v12 + 8),
        v17 = *(_DWORD *)(v12 + 12),
        swift_retain(),
        v15 == 1))
  {
    LODWORD(v84) = 0;
    v17 = 0;
    LODWORD(v83) = 0;
    v15 = 0;
  }
  else
  {
    LODWORD(v83) = v16;
    LODWORD(v84) = v14 & 1;
  }
  v18 = *(_DWORD *)(a1 + 88);
  v89 = v15;
  if (v7 >> 1 == v18)
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    v94[0] = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if (*(_QWORD *)(a1 + 72))
    {
      v19 = *(void **)(a1 + 80);
      if (v19)
      {

        swift_release();
        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v7 >> 1;
    v15 = v89;
  }
  v94[0] = *(_OWORD *)(a1 + 56);
  LODWORD(v93[0]) = v7;
  LODWORD(v85) = v7;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v20 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(0);
    OutputValue = AGGraphGetOutputValue();
    v20 = 1;
    if (OutputValue && (v4 & 1) == 0 && (v92 & 1) == 0)
      v20 = AGGraphCurrentAttributeWasModified();
  }
  LODWORD(v86) = v20;
  AGGraphClearUpdate();
  v22 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v124);
  swift_retain();
  AGGraphSetUpdate();
  v117 = v10;
  v118 = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v23 = *(_QWORD **)(a1 + 80);
  v87 = v11;
  v88 = v10;
  v91 = v22;
  if (v23)
  {
    v24 = (char)v90;
    if ((v90 & 1) != 0)
    {
      swift_retain();
      v25 = v23;
      swift_retain();
      v26 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v26 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        LODWORD(v86) = 1;
      }
    }
    else
    {
      v35 = v23;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v94[0] = 0;
      WORD4(v94[0]) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v118)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      v24 = (char)v90;
    }
    v36 = v92 | v24;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v90 = (id)*((_QWORD *)&v94[0] + 1);
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    v92 = *(_QWORD *)&v94[0];
    if ((v36 & 1) != 0)
    {
      v37 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v37, 0, (int)v85, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1E1B205D8, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
      swift_release();
    }
    if ((_DWORD)v84)
    {
      v38 = (char *)v23 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v23) + 0x90);
      *(_QWORD *)v38 = v15;
      v38[8] = v83;
      *((_DWORD *)v38 + 3) = v17;
      swift_retain();
      swift_release();
      specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(0);
    }
    AGGraphSetUpdate();
    v39 = *(_QWORD *)(a1 + 72);
    if (!v39)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    swift_retain();

    v119 = *(_QWORD *)(a1 + 40);
    v120 = v91;
    *(_QWORD *)&v121 = v92;
    *((_QWORD *)&v121 + 1) = v90;
    v122 = 0;
    v123 = v39;
    swift_retain();
    if (!(_DWORD)v86)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v92, (uint64_t)v90, 0);
      swift_release();
LABEL_53:
      swift_release();
      swift_release();
      outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>((uint64_t)v124);
      return;
    }
    swift_retain();
    v86 = 0;
LABEL_44:
    type metadata accessor for ViewGraph();
    v55 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v56 = MEMORY[0x18D760234](v55);
    v57 = swift_release();
    if (v56)
    {
      swift_getObjectType();
      v57 = swift_conformsToProtocol2();
      if (v57)
        v59 = v56;
      else
        v59 = 0;
      if (!v59)
        v57 = swift_unknownObjectRelease();
    }
    v85 = v79;
    v60 = *(_DWORD *)(a1 + 32);
    v62 = *(_QWORD *)(a1 + 40);
    v61 = *(_QWORD *)(a1 + 48);
    v63 = *(_QWORD *)(a1 + 56);
    v64 = *(_QWORD *)(a1 + 72);
    v65 = *(void **)(a1 + 80);
    v66 = *(_DWORD *)(a1 + 88);
    v67 = *(_OWORD *)(a1 + 16);
    v106 = *(_OWORD *)a1;
    v107 = v67;
    v68 = *(_QWORD *)(a1 + 96);
    v108 = v60;
    v109 = v62;
    v110 = v61;
    v111 = v63;
    v112 = *(_QWORD *)(a1 + 64);
    v113 = v64;
    v114 = v65;
    v115 = v66;
    v116 = v68;
    MEMORY[0x1E0C80A78](v57, v58);
    v84 = v69;
    v79[-6] = v69;
    v79[-5] = v70;
    v79[-4] = a1;
    v79[-3] = &v119;
    v79[-2] = v124;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    swift_retain();
    v71 = v65;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v72 = v114;
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v73 = *(void **)(a1 + 80);
    if (v73)
    {
      v74 = *(_QWORD *)(a1 + 72);
      outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>((uint64_t)v124, (uint64_t)v93);
      if (v74)
      {
        v105 = v74;
        outlined init with take of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>((uint64_t)v93, (uint64_t)v94);
        v104 = v73;
        type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(0);
        v75 = v73;
        swift_retain();
        swift_retain();
        swift_retain_n();
        v76 = v75;
        swift_retain();
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v94, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
        v77 = v121;
        v78 = v122;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v77, *((uint64_t *)&v77 + 1), v78);
        swift_release();
        goto LABEL_53;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_56;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v27 = *(_QWORD *)(a1 + 72);
  if (v27)
  {
    v119 = *(_QWORD *)(a1 + 40);
    v120 = v22;
    v121 = v94[0];
    v122 = 0;
    v123 = v27;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    v92 = *(_QWORD *)&v94[0];
    swift_retain_n();
    swift_retain();
    v28 = swift_retain();
    v29 = MEMORY[0x18D75C5F8](v28) + 200;
    swift_beginAccess();
    v30 = MEMORY[0x18D760234](v29);
    v31 = swift_release();
    if (v30)
    {
      swift_getObjectType();
      v31 = swift_conformsToProtocol2();
      v33 = (void *)*((_QWORD *)&v94[0] + 1);
      if (v31)
        v34 = v30;
      else
        v34 = 0;
      if (v34)
        goto LABEL_43;
      v31 = swift_unknownObjectRelease();
    }
    else
    {
      v33 = (void *)*((_QWORD *)&v94[0] + 1);
    }
    v34 = 0;
LABEL_43:
    v83 = v34;
    v84 = &v82;
    v40 = *(_DWORD *)(a1 + 32);
    v41 = *(_QWORD *)(a1 + 40);
    v42 = *(_QWORD *)(a1 + 48);
    v43 = *(_QWORD *)(a1 + 56);
    v44 = *(_QWORD *)(a1 + 72);
    v90 = *(id *)(a1 + 80);
    v45 = *(_DWORD *)(a1 + 88);
    v95 = v40;
    v46 = *(_QWORD *)(a1 + 96);
    v47 = *(_OWORD *)(a1 + 16);
    v94[0] = *(_OWORD *)a1;
    v94[1] = v47;
    v96 = v41;
    v97 = v42;
    v98 = v43;
    v99 = *(_QWORD *)(a1 + 64);
    v100 = v44;
    v101 = v90;
    v102 = v45;
    v103 = v46;
    MEMORY[0x1E0C80A78](v31, v32);
    v79[2] = &v119;
    v79[3] = v124;
    v79[4] = v49;
    v79[5] = v48;
    v79[6] = v92;
    v79[7] = v33;
    v80 = (int)v85;
    v81 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(0);
    v86 = v50;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v85 = v51;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    swift_retain();
    v52 = v90;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v86 = 0;
    v90 = v33;
    swift_release();
    swift_release();
    v53 = v101;
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v54 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v93[0];

    goto LABEL_44;
  }
LABEL_57:
  __break(1u);
}

{
  uint64_t Value;
  char v3;
  char v4;
  unsigned int *v5;
  void *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  void *v19;
  void *v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  uint64_t v35;
  char *v36;
  void *v37;
  id v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  int v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  id v77;
  id v78;
  id v79;
  id v80;
  __int128 v81;
  char v82;
  void *v83;
  _QWORD v84[8];
  int v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD v98[22];
  _OWORD v99[2];
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  void *v106;
  int v107;
  uint64_t v108;
  void *v109;
  void *v110;
  __int128 v111;
  __int128 v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  void *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  char v127;
  id v128;
  _QWORD v129[25];

  v129[22] = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  Value = AGGraphGetValue();
  v4 = v3;
  outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>(Value, (uint64_t)v129);
  v5 = (unsigned int *)AGGraphGetValue();
  v95 = v6;
  v7 = *v5;
  v8 = (uint64_t *)AGGraphGetValue();
  v97 = v9;
  v10 = *v8;
  v11 = v8[1];
  if (*(_DWORD *)(a1 + 28) == *MEMORY[0x1E0CFED28]
    || (v12 = AGGraphGetValue(),
        v14 = v13,
        v15 = *(_QWORD *)v12,
        v16 = *(unsigned __int8 *)(v12 + 8),
        v17 = *(_DWORD *)(v12 + 12),
        swift_retain(),
        v15 == 1))
  {
    LODWORD(v90) = 0;
    LODWORD(v89) = 0;
    v16 = 0;
    v15 = 0;
  }
  else
  {
    LODWORD(v89) = v17;
    LODWORD(v90) = v14 & 1;
  }
  v18 = *(_DWORD *)(a1 + 88);
  LODWORD(v88) = v16;
  if (v7 >> 1 == v18)
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    v99[0] = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    v19 = *(void **)(a1 + 72);
    if (v19)
    {
      v20 = *(void **)(a1 + 80);
      if (v20)
      {

        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v7 >> 1;
  }
  v99[0] = *(_OWORD *)(a1 + 56);
  LODWORD(v98[0]) = v7;
  LODWORD(v92) = v7;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v21 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(0);
    v21 = 1;
    if (AGGraphGetOutputValue() && (v4 & 1) == 0 && (v95 & 1) == 0)
      v21 = AGGraphCurrentAttributeWasModified();
  }
  AGGraphClearUpdate();
  v22 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v129);
  swift_retain();
  AGGraphSetUpdate();
  v122 = v10;
  v123 = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v23 = *(_QWORD **)(a1 + 80);
  v93 = v10;
  v94 = v11;
  v96 = v22;
  v91 = v15;
  if (v23)
  {
    if ((v97 & 1) != 0)
    {
      swift_retain();
      v24 = v23;
      swift_retain();
      v25 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v25 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        v21 = 1;
      }
    }
    else
    {
      v33 = v23;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v99[0] = 0;
      WORD4(v99[0]) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v123)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    v34 = v95 | v97;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v95 = (id)*((_QWORD *)&v99[0] + 1);
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    v97 = *(_QWORD *)&v99[0];
    if ((v34 & 1) != 0)
    {
      v35 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v35, 0, v92, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1E1B20448, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
      swift_release();
    }
    if ((_DWORD)v90)
    {
      v36 = (char *)v23 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v23) + 0x90);
      *(_QWORD *)v36 = v15;
      v36[8] = (char)v88;
      *((_DWORD *)v36 + 3) = v89;
      swift_retain();
      swift_release();
      specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(0);
    }
    AGGraphSetUpdate();
    v37 = *(void **)(a1 + 72);
    if (!v37)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    v38 = v37;

    v124 = *(_QWORD *)(a1 + 40);
    v125 = v96;
    *(_QWORD *)&v126 = v97;
    *((_QWORD *)&v126 + 1) = v95;
    v127 = 0;
    v128 = v38;
    swift_retain();
    if (!v21)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v97, (uint64_t)v95, 0);

LABEL_53:
      swift_release();
      swift_release();
      outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>((uint64_t)v129);
      return;
    }
    swift_retain();
    v92 = 0;
LABEL_44:
    type metadata accessor for ViewGraph();
    v55 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v56 = MEMORY[0x18D760234](v55);
    v57 = swift_release();
    if (v56)
    {
      swift_getObjectType();
      v57 = swift_conformsToProtocol2();
      if (v57)
        v59 = v56;
      else
        v59 = 0;
      if (!v59)
        v57 = swift_unknownObjectRelease();
    }
    v90 = v84;
    v60 = *(_DWORD *)(a1 + 32);
    v62 = *(_QWORD *)(a1 + 40);
    v61 = *(_QWORD *)(a1 + 48);
    v63 = *(_QWORD *)(a1 + 56);
    v65 = *(void **)(a1 + 72);
    v64 = *(void **)(a1 + 80);
    v66 = *(_DWORD *)(a1 + 88);
    v67 = *(_OWORD *)(a1 + 16);
    v111 = *(_OWORD *)a1;
    v112 = v67;
    v68 = *(_QWORD *)(a1 + 96);
    v113 = v60;
    v114 = v62;
    v115 = v61;
    v116 = v63;
    v117 = *(_QWORD *)(a1 + 64);
    v118 = v65;
    v119 = v64;
    v120 = v66;
    v121 = v68;
    MEMORY[0x1E0C80A78](v57, v58);
    v89 = v69;
    v84[-6] = v69;
    v84[-5] = v70;
    v84[-4] = a1;
    v84[-3] = &v124;
    v84[-2] = v129;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v71 = v65;
    v72 = v64;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v73 = v118;
    v74 = v119;
    swift_release();
    swift_release();
    swift_release();

    v75 = *(void **)(a1 + 80);
    if (v75)
    {
      v76 = *(void **)(a1 + 72);
      outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>((uint64_t)v129, (uint64_t)v98);
      if (v76)
      {
        v110 = v76;
        outlined init with take of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>((uint64_t)v98, (uint64_t)v99);
        v109 = v75;
        type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(0);
        v77 = v75;
        swift_retain();
        swift_retain();
        v78 = v76;
        v79 = v77;
        swift_retain();
        v80 = v78;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
        v81 = v126;
        v82 = v127;
        v83 = v128;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v81, *((uint64_t *)&v81 + 1), v82);

        goto LABEL_53;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_56;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v26 = *(void **)(a1 + 72);
  if (v26)
  {
    v124 = *(_QWORD *)(a1 + 40);
    v125 = v22;
    v126 = v99[0];
    v127 = 0;
    v128 = v26;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    v97 = *(_QWORD *)&v99[0];
    swift_retain_n();
    swift_retain();
    v27 = MEMORY[0x18D75C5F8](v26) + 200;
    swift_beginAccess();
    v28 = MEMORY[0x18D760234](v27);
    v29 = swift_release();
    if (v28)
    {
      swift_getObjectType();
      v29 = swift_conformsToProtocol2();
      v31 = (void *)*((_QWORD *)&v99[0] + 1);
      if (v29)
        v32 = v28;
      else
        v32 = 0;
      if (v32)
        goto LABEL_43;
      v29 = swift_unknownObjectRelease();
    }
    else
    {
      v31 = (void *)*((_QWORD *)&v99[0] + 1);
    }
    v32 = 0;
LABEL_43:
    v89 = v32;
    v90 = &v87;
    v39 = *(_DWORD *)(a1 + 32);
    v41 = *(_QWORD *)(a1 + 40);
    v40 = *(_QWORD *)(a1 + 48);
    v42 = *(_QWORD *)(a1 + 56);
    v43 = *(void **)(a1 + 80);
    v88 = *(id *)(a1 + 72);
    v95 = v43;
    v44 = *(_DWORD *)(a1 + 88);
    v100 = v39;
    v45 = *(_QWORD *)(a1 + 96);
    v46 = *(_OWORD *)(a1 + 16);
    v99[0] = *(_OWORD *)a1;
    v99[1] = v46;
    v101 = v41;
    v102 = v40;
    v103 = v42;
    v104 = *(_QWORD *)(a1 + 64);
    v105 = v88;
    v106 = v43;
    v107 = v44;
    v108 = v45;
    MEMORY[0x1E0C80A78](v29, v30);
    v84[2] = &v124;
    v84[3] = v129;
    v84[4] = v48;
    v84[5] = v47;
    v84[6] = v97;
    v84[7] = v31;
    v85 = v92;
    v86 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(0);
    v92 = v49;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v50 = v88;
    v51 = v95;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v92 = 0;
    v95 = v31;
    swift_release();
    swift_release();
    v52 = v105;
    v53 = v106;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v54 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v98[0];

    goto LABEL_44;
  }
LABEL_57:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t Value;
  char v16;
  char v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  void *v35;
  void *v36;
  char v37;
  char v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  char v42;
  void *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _BYTE *v51;
  _QWORD *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void *v59;
  id v60;
  _BYTE *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  id v73;
  id v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  int v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  id v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  id v104;
  id v105;
  id v106;
  __int128 v107;
  char v108;
  void *v109;
  uint64_t v110;
  _BYTE v111[4];
  int v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  _BYTE *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  id v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  char v143;
  id v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = &v111[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v111[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v111[-v13];
  Value = AGGraphGetValue();
  v17 = v16;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(Value, (uint64_t)v14);
  v18 = (unsigned int *)AGGraphGetValue();
  v120 = v19;
  v20 = *v18;
  v21 = (uint64_t *)AGGraphGetValue();
  v119 = v22;
  v23 = *v21;
  v125 = v21[1];
  v24 = *(_DWORD *)(a1 + 28) == *MEMORY[0x1E0CFED28];
  v115 = v6;
  v116 = v10;
  if (v24
    || (v25 = AGGraphGetValue(),
        v27 = v26,
        v28 = *(_QWORD *)v25,
        LODWORD(v114) = *(unsigned __int8 *)(v25 + 8),
        v29 = *(_DWORD *)(v25 + 12),
        swift_retain(),
        v122 = v28,
        v28 == 1))
  {
    v30 = 0;
    LODWORD(v113) = 0;
    LODWORD(v114) = 0;
    v122 = 0;
  }
  else
  {
    LODWORD(v113) = v29;
    v30 = v27 & 1;
  }
  v31 = v20 >> 1;
  if (v20 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    v32 = v3;
    v33 = v17;
    v34 = v20;
    v127 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    v35 = *(void **)(a1 + 72);
    if (v35)
    {
      v36 = *(void **)(a1 + 80);
      if (v36)
      {

        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v31;
    v20 = v34;
    v17 = v33;
    v3 = v32;
  }
  v127 = *(_OWORD *)(a1 + 56);
  LODWORD(v140) = v20;
  v37 = _DynamicPropertyBuffer.update(container:phase:)();
  v38 = (char)v119;
  LODWORD(v118) = v20;
  if ((v37 & 1) != 0)
  {
    v39 = 1;
  }
  else
  {
    v39 = 1;
    if (AGGraphGetOutputValue() && (v17 & 1) == 0 && (v120 & 1) == 0)
      v39 = AGGraphCurrentAttributeWasModified();
  }
  AGGraphClearUpdate();
  v123 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v14);
  swift_retain();
  AGGraphSetUpdate();
  v138 = v23;
  v139 = v125;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v40 = *(_QWORD **)(a1 + 80);
  v121 = v23;
  v124 = v14;
  v117 = v3;
  if (v40)
  {
    if ((v38 & 1) != 0)
    {
      swift_retain();
      v41 = v40;
      swift_retain();
      v42 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v42 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        v39 = 1;
      }
    }
    else
    {
      v52 = v40;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v127 = 0;
      WORD4(v127) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v139)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    v112 = v39;
    v53 = v120 | v38;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v55 = *((_QWORD *)&v127 + 1);
    v54 = v127;
    swift_retain();
    v56 = v54;
    swift_retain();
    AGGraphClearUpdate();
    if ((v53 & 1) != 0)
    {
      v57 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v57, 0, (int)v118);
      swift_release();
    }
    if (v30)
    {
      v58 = (char *)v40 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v40) + 0x90);
      *(_QWORD *)v58 = v122;
      v58[8] = (char)v114;
      *((_DWORD *)v58 + 3) = v113;
      swift_retain();
      swift_release();
      objc_msgSend(v40, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    v59 = *(void **)(a1 + 72);
    if (!v59)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v60 = v59;

    v140 = *(_QWORD *)(a1 + 40);
    v141 = v123;
    v61 = (_BYTE *)v56;
    *(_QWORD *)&v142 = v56;
    *((_QWORD *)&v142 + 1) = v55;
    v143 = 0;
    v144 = v60;
    swift_retain();
    if (!v112)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v56, v55, 0);

LABEL_52:
      v110 = (uint64_t)v124;
      swift_release();
      swift_release();
      outlined destroy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(v110);
      return;
    }
    swift_retain();
    v119 = 0;
LABEL_43:
    type metadata accessor for ViewGraph();
    v78 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v79 = MEMORY[0x18D760234](v78);
    v80 = swift_release();
    v120 = v55;
    v114 = v61;
    if (v79)
    {
      swift_getObjectType();
      v80 = swift_conformsToProtocol2();
      if (v80)
        v82 = v79;
      else
        v82 = 0;
      if (!v82)
        v80 = swift_unknownObjectRelease();
    }
    v118 = v111;
    v83 = *(_QWORD *)(a1 + 40);
    v84 = *(_QWORD *)(a1 + 48);
    v85 = *(_QWORD *)(a1 + 56);
    v87 = *(void **)(a1 + 72);
    v86 = *(void **)(a1 + 80);
    v88 = *(_DWORD *)(a1 + 88);
    v129 = *(_DWORD *)(a1 + 32);
    v89 = *(_QWORD *)(a1 + 96);
    v90 = *(_OWORD *)(a1 + 16);
    v127 = *(_OWORD *)a1;
    v128 = v90;
    v130 = v83;
    v131 = v84;
    v132 = v85;
    v133 = *(_QWORD *)(a1 + 64);
    v134 = v87;
    v135 = v86;
    v136 = v88;
    v137 = v89;
    MEMORY[0x1E0C80A78](v80, v81);
    v113 = v91;
    *(_QWORD *)&v111[-48] = v91;
    *(_QWORD *)&v111[-40] = v92;
    *(_QWORD *)&v111[-32] = a1;
    *(_QWORD *)&v111[-24] = &v140;
    v93 = (uint64_t)v124;
    *(_QWORD *)&v111[-16] = v124;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v94 = v87;
    v95 = v86;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v96 = v134;
    v97 = v135;
    swift_release();
    swift_release();
    swift_release();

    v98 = *(void **)(a1 + 80);
    if (v98)
    {
      v99 = *(void **)(a1 + 72);
      v100 = (uint64_t)v116;
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(v93, (uint64_t)v116);
      v101 = v117;
      if (v99)
      {
        v102 = (uint64_t)v115;
        *(_QWORD *)&v115[*(int *)(v117 + 40)] = v99;
        outlined init with take of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(v100, v102);
        *(_QWORD *)(v102 + *(int *)(v101 + 36)) = v98;
        v103 = v98;
        swift_retain();
        swift_retain();
        v104 = v99;
        v105 = v103;
        swift_retain();
        v106 = v104;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(v102);
        v107 = v142;
        v108 = v143;
        v109 = v144;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v107, *((uint64_t *)&v107 + 1), v108);

        goto LABEL_52;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_55;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v43 = *(void **)(a1 + 72);
  if (v43)
  {
    v44 = v127;
    v140 = *(_QWORD *)(a1 + 40);
    v141 = v123;
    v142 = v127;
    v143 = 0;
    v144 = v43;
    type metadata accessor for ViewGraph();
    v120 = *((_QWORD *)&v44 + 1);
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    v45 = MEMORY[0x18D75C5F8](v43) + 200;
    swift_beginAccess();
    v46 = MEMORY[0x18D760234](v45);
    v47 = swift_release();
    if (v46)
    {
      swift_getObjectType();
      v47 = swift_conformsToProtocol2();
      if (v47)
        v49 = v46;
      else
        v49 = 0;
      v50 = (int)v118;
      v51 = (_BYTE *)v44;
      if (!v49)
      {
        v47 = swift_unknownObjectRelease();
        v49 = 0;
      }
    }
    else
    {
      v51 = (_BYTE *)v44;
      v49 = 0;
      v50 = (int)v118;
    }
    v113 = v49;
    v114 = v111;
    v62 = *(_DWORD *)(a1 + 32);
    v64 = *(_QWORD *)(a1 + 40);
    v63 = *(_QWORD *)(a1 + 48);
    v65 = *(_QWORD *)(a1 + 56);
    v66 = *(void **)(a1 + 72);
    v119 = *(id *)(a1 + 80);
    v67 = *(_DWORD *)(a1 + 88);
    v129 = v62;
    v68 = *(_QWORD *)(a1 + 96);
    v69 = *(_OWORD *)(a1 + 16);
    v127 = *(_OWORD *)a1;
    v128 = v69;
    v130 = v64;
    v131 = v63;
    v132 = v65;
    v133 = *(_QWORD *)(a1 + 64);
    v134 = v66;
    v135 = v119;
    v136 = v67;
    v137 = v68;
    MEMORY[0x1E0C80A78](v47, v48);
    *(_QWORD *)&v111[-64] = &v140;
    *(_QWORD *)&v111[-56] = v124;
    *(_QWORD *)&v111[-48] = v70;
    *(_QWORD *)&v111[-40] = v71;
    *(_QWORD *)&v111[-32] = v51;
    v55 = v120;
    *(_QWORD *)&v111[-24] = v120;
    *(_DWORD *)&v111[-16] = v50;
    *(_QWORD *)&v111[-8] = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(0);
    v118 = v72;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v61 = v51;
    swift_retain();
    swift_retain();
    v73 = v66;
    v74 = v119;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v119 = 0;
    swift_release();
    swift_release();
    v75 = v134;
    v76 = v135;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v77 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v126;

    goto LABEL_43;
  }
LABEL_56:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t Value;
  char v16;
  char v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  void *v35;
  void *v36;
  char v37;
  char v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  char v42;
  void *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _BYTE *v51;
  _QWORD *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void *v59;
  id v60;
  _BYTE *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  id v73;
  id v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  int v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  id v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  id v104;
  id v105;
  id v106;
  __int128 v107;
  char v108;
  void *v109;
  uint64_t v110;
  _BYTE v111[4];
  int v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  _BYTE *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  id v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  char v143;
  id v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = &v111[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v111[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v111[-v13];
  Value = AGGraphGetValue();
  v17 = v16;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(Value, (uint64_t)v14);
  v18 = (unsigned int *)AGGraphGetValue();
  v120 = v19;
  v20 = *v18;
  v21 = (uint64_t *)AGGraphGetValue();
  v119 = v22;
  v23 = *v21;
  v125 = v21[1];
  v24 = *(_DWORD *)(a1 + 28) == *MEMORY[0x1E0CFED28];
  v115 = v6;
  v116 = v10;
  if (v24
    || (v25 = AGGraphGetValue(),
        v27 = v26,
        v28 = *(_QWORD *)v25,
        LODWORD(v114) = *(unsigned __int8 *)(v25 + 8),
        v29 = *(_DWORD *)(v25 + 12),
        swift_retain(),
        v122 = v28,
        v28 == 1))
  {
    v30 = 0;
    LODWORD(v113) = 0;
    LODWORD(v114) = 0;
    v122 = 0;
  }
  else
  {
    LODWORD(v113) = v29;
    v30 = v27 & 1;
  }
  v31 = v20 >> 1;
  if (v20 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    v32 = v3;
    v33 = v17;
    v34 = v20;
    v127 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    v35 = *(void **)(a1 + 72);
    if (v35)
    {
      v36 = *(void **)(a1 + 80);
      if (v36)
      {

        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v31;
    v20 = v34;
    v17 = v33;
    v3 = v32;
  }
  v127 = *(_OWORD *)(a1 + 56);
  LODWORD(v140) = v20;
  v37 = _DynamicPropertyBuffer.update(container:phase:)();
  v38 = (char)v119;
  LODWORD(v118) = v20;
  if ((v37 & 1) != 0)
  {
    v39 = 1;
  }
  else
  {
    v39 = 1;
    if (AGGraphGetOutputValue() && (v17 & 1) == 0 && (v120 & 1) == 0)
      v39 = AGGraphCurrentAttributeWasModified();
  }
  AGGraphClearUpdate();
  v123 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v14);
  swift_retain();
  AGGraphSetUpdate();
  v138 = v23;
  v139 = v125;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v40 = *(_QWORD **)(a1 + 80);
  v121 = v23;
  v124 = v14;
  v117 = v3;
  if (v40)
  {
    if ((v38 & 1) != 0)
    {
      swift_retain();
      v41 = v40;
      swift_retain();
      v42 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v42 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        v39 = 1;
      }
    }
    else
    {
      v52 = v40;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v127 = 0;
      WORD4(v127) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v139)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    v112 = v39;
    v53 = v120 | v38;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v55 = *((_QWORD *)&v127 + 1);
    v54 = v127;
    swift_retain();
    v56 = v54;
    swift_retain();
    AGGraphClearUpdate();
    if ((v53 & 1) != 0)
    {
      v57 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v57, 0, (int)v118);
      swift_release();
    }
    if (v30)
    {
      v58 = (char *)v40 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v40) + 0x90);
      *(_QWORD *)v58 = v122;
      v58[8] = (char)v114;
      *((_DWORD *)v58 + 3) = v113;
      swift_retain();
      swift_release();
      objc_msgSend(v40, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    v59 = *(void **)(a1 + 72);
    if (!v59)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v60 = v59;

    v140 = *(_QWORD *)(a1 + 40);
    v141 = v123;
    v61 = (_BYTE *)v56;
    *(_QWORD *)&v142 = v56;
    *((_QWORD *)&v142 + 1) = v55;
    v143 = 0;
    v144 = v60;
    swift_retain();
    if (!v112)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v56, v55, 0);

LABEL_52:
      v110 = (uint64_t)v124;
      swift_release();
      swift_release();
      outlined destroy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(v110);
      return;
    }
    swift_retain();
    v119 = 0;
LABEL_43:
    type metadata accessor for ViewGraph();
    v78 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v79 = MEMORY[0x18D760234](v78);
    v80 = swift_release();
    v120 = v55;
    v114 = v61;
    if (v79)
    {
      swift_getObjectType();
      v80 = swift_conformsToProtocol2();
      if (v80)
        v82 = v79;
      else
        v82 = 0;
      if (!v82)
        v80 = swift_unknownObjectRelease();
    }
    v118 = v111;
    v83 = *(_QWORD *)(a1 + 40);
    v84 = *(_QWORD *)(a1 + 48);
    v85 = *(_QWORD *)(a1 + 56);
    v87 = *(void **)(a1 + 72);
    v86 = *(void **)(a1 + 80);
    v88 = *(_DWORD *)(a1 + 88);
    v129 = *(_DWORD *)(a1 + 32);
    v89 = *(_QWORD *)(a1 + 96);
    v90 = *(_OWORD *)(a1 + 16);
    v127 = *(_OWORD *)a1;
    v128 = v90;
    v130 = v83;
    v131 = v84;
    v132 = v85;
    v133 = *(_QWORD *)(a1 + 64);
    v134 = v87;
    v135 = v86;
    v136 = v88;
    v137 = v89;
    MEMORY[0x1E0C80A78](v80, v81);
    v113 = v91;
    *(_QWORD *)&v111[-48] = v91;
    *(_QWORD *)&v111[-40] = v92;
    *(_QWORD *)&v111[-32] = a1;
    *(_QWORD *)&v111[-24] = &v140;
    v93 = (uint64_t)v124;
    *(_QWORD *)&v111[-16] = v124;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v94 = v87;
    v95 = v86;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v96 = v134;
    v97 = v135;
    swift_release();
    swift_release();
    swift_release();

    v98 = *(void **)(a1 + 80);
    if (v98)
    {
      v99 = *(void **)(a1 + 72);
      v100 = (uint64_t)v116;
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(v93, (uint64_t)v116);
      v101 = v117;
      if (v99)
      {
        v102 = (uint64_t)v115;
        *(_QWORD *)&v115[*(int *)(v117 + 40)] = v99;
        outlined init with take of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(v100, v102);
        *(_QWORD *)(v102 + *(int *)(v101 + 36)) = v98;
        v103 = v98;
        swift_retain();
        swift_retain();
        v104 = v99;
        v105 = v103;
        swift_retain();
        v106 = v104;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(v102);
        v107 = v142;
        v108 = v143;
        v109 = v144;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v107, *((uint64_t *)&v107 + 1), v108);

        goto LABEL_52;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_55;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v43 = *(void **)(a1 + 72);
  if (v43)
  {
    v44 = v127;
    v140 = *(_QWORD *)(a1 + 40);
    v141 = v123;
    v142 = v127;
    v143 = 0;
    v144 = v43;
    type metadata accessor for ViewGraph();
    v120 = *((_QWORD *)&v44 + 1);
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    v45 = MEMORY[0x18D75C5F8](v43) + 200;
    swift_beginAccess();
    v46 = MEMORY[0x18D760234](v45);
    v47 = swift_release();
    if (v46)
    {
      swift_getObjectType();
      v47 = swift_conformsToProtocol2();
      if (v47)
        v49 = v46;
      else
        v49 = 0;
      v50 = (int)v118;
      v51 = (_BYTE *)v44;
      if (!v49)
      {
        v47 = swift_unknownObjectRelease();
        v49 = 0;
      }
    }
    else
    {
      v51 = (_BYTE *)v44;
      v49 = 0;
      v50 = (int)v118;
    }
    v113 = v49;
    v114 = v111;
    v62 = *(_DWORD *)(a1 + 32);
    v64 = *(_QWORD *)(a1 + 40);
    v63 = *(_QWORD *)(a1 + 48);
    v65 = *(_QWORD *)(a1 + 56);
    v66 = *(void **)(a1 + 72);
    v119 = *(id *)(a1 + 80);
    v67 = *(_DWORD *)(a1 + 88);
    v129 = v62;
    v68 = *(_QWORD *)(a1 + 96);
    v69 = *(_OWORD *)(a1 + 16);
    v127 = *(_OWORD *)a1;
    v128 = v69;
    v130 = v64;
    v131 = v63;
    v132 = v65;
    v133 = *(_QWORD *)(a1 + 64);
    v134 = v66;
    v135 = v119;
    v136 = v67;
    v137 = v68;
    MEMORY[0x1E0C80A78](v47, v48);
    *(_QWORD *)&v111[-64] = &v140;
    *(_QWORD *)&v111[-56] = v124;
    *(_QWORD *)&v111[-48] = v70;
    *(_QWORD *)&v111[-40] = v71;
    *(_QWORD *)&v111[-32] = v51;
    v55 = v120;
    *(_QWORD *)&v111[-24] = v120;
    *(_DWORD *)&v111[-16] = v50;
    *(_QWORD *)&v111[-8] = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(0);
    v118 = v72;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v61 = v51;
    swift_retain();
    swift_retain();
    v73 = v66;
    v74 = v119;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v119 = 0;
    swift_release();
    swift_release();
    v75 = v134;
    v76 = v135;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v77 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v126;

    goto LABEL_43;
  }
LABEL_56:
  __break(1u);
}

void specialized closure #1 in PlatformViewChild.updateValue()(__int128 *a1)
{
  id *Value;
  uint64_t v3;
  uint64_t v4;
  id v5;
  unsigned int *v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  int v19;
  unsigned __int8 v20;
  uint64_t v21;
  id v22;
  id v23;
  void *v24;
  unsigned __int8 v25;
  int v26;
  uint64_t OutputValue;
  uint64_t v28;
  _QWORD *v29;
  unsigned __int8 v30;
  _QWORD *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  id v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  int v70;
  uint64_t v71;
  __int128 v72;
  uint64_t *v73;
  uint64_t v74;
  id v75;
  void *v76;
  void *v77;
  uint64_t v78;
  id v79;
  id v80;
  id v81;
  id v82;
  __int128 v83;
  char v84;
  _QWORD v85[8];
  int v86;
  __int128 *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  void *v101;
  uint64_t v102;
  id v103[4];
  __int128 v104;
  __int128 v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  char v120;
  uint64_t v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  Value = (id *)AGGraphGetValue();
  v4 = v3;
  v5 = *Value;
  v103[0] = *Value;
  v6 = (unsigned int *)AGGraphGetValue();
  v8 = v7;
  v9 = *v6;
  v10 = (uint64_t *)AGGraphGetValue();
  v99 = v11;
  v12 = *v10;
  v13 = v10[1];
  LODWORD(v10) = *((_DWORD *)a1 + 7);
  v14 = *MEMORY[0x1E0CFED28];
  v98 = v4;
  if ((_DWORD)v10 == v14
    || (v15 = AGGraphGetValue(),
        v17 = v16,
        v18 = *(_QWORD *)v15,
        v19 = *(_DWORD *)(v15 + 12),
        v89 = *(unsigned __int8 *)(v15 + 8),
        LODWORD(v90) = v19,
        swift_retain(),
        v18 == 1))
  {
    v20 = v8;
    LODWORD(v91) = 0;
    v89 = 0;
    LODWORD(v90) = 0;
    v21 = 0;
  }
  else
  {
    v21 = v18;
    v20 = v8;
    LODWORD(v91) = v17 & 1;
  }
  if (v9 >> 1 == *((_DWORD *)a1 + 22))
  {
    swift_retain();
    v22 = v5;
    swift_retain();
  }
  else
  {
    v104 = *(__int128 *)((char *)a1 + 56);
    swift_retain();
    v23 = v5;
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if (*((_QWORD *)a1 + 9))
    {
      v24 = (void *)*((_QWORD *)a1 + 10);
      if (v24)
      {

        swift_release();
        *((_QWORD *)a1 + 9) = 0;
        *((_QWORD *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v9 >> 1;
  }
  v104 = *(__int128 *)((char *)a1 + 56);
  LODWORD(v117) = v9;
  v25 = v20;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v26 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(0);
    OutputValue = AGGraphGetOutputValue();
    v26 = 1;
    if (OutputValue && (v98 & 1) == 0 && (v20 & 1) == 0)
      v26 = AGGraphCurrentAttributeWasModified();
  }
  LODWORD(v94) = v26;
  LODWORD(v93) = v9;
  AGGraphClearUpdate();
  if (!*((_QWORD *)a1 + 9))
  {
    type metadata accessor for TabItemGroup.Coordinator();
    *((_QWORD *)a1 + 9) = swift_allocObject();
  }
  v28 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  v115 = v12;
  v116 = v13;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v29 = (_QWORD *)*((_QWORD *)a1 + 10);
  v95 = v13;
  v96 = v12;
  v98 = v28;
  v92 = v21;
  if (v29)
  {
    v30 = v99;
    if ((v99 & 1) != 0)
    {
      swift_retain();
      v31 = v29;
      swift_retain();
      v32 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v32 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        LODWORD(v94) = 1;
      }
    }
    else
    {
      v41 = v29;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v104 = 0;
      WORD4(v104) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v116)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      v30 = v99;
    }
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v97 = (id)*((_QWORD *)&v104 + 1);
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    v99 = v104;
    if (((v25 | v30) & 1) != 0)
    {
      v42 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v42, 0, (int)v93, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1E1B201F0, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
      swift_release();
    }
    if ((_DWORD)v91)
    {
      v43 = (char *)v29 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v29) + 0x90);
      *(_QWORD *)v43 = v21;
      v43[8] = v89;
      *((_DWORD *)v43 + 3) = v90;
      swift_retain();
      swift_release();
      specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(0);
    }
    AGGraphSetUpdate();
    v44 = *((_QWORD *)a1 + 9);
    if (!v44)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    swift_retain();

    v117 = *((_QWORD *)a1 + 5);
    v118 = v98;
    *(_QWORD *)&v119 = v99;
    *((_QWORD *)&v119 + 1) = v97;
    v120 = 0;
    v121 = v44;
    swift_retain();
    if (!(_DWORD)v94)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v99, (uint64_t)v97, 0);
      swift_release();
      swift_release();
      swift_release();

      return;
    }
    swift_retain();
    v94 = 0;
LABEL_46:
    type metadata accessor for ViewGraph();
    v60 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v61 = MEMORY[0x18D760234](v60);
    v62 = swift_release();
    if (v61)
    {
      swift_getObjectType();
      v62 = swift_conformsToProtocol2();
      if (v62)
        v64 = v61;
      else
        v64 = 0;
      if (!v64)
        v62 = swift_unknownObjectRelease();
    }
    v93 = v85;
    v66 = *((_QWORD *)a1 + 5);
    v65 = *((_QWORD *)a1 + 6);
    v67 = *((_QWORD *)a1 + 7);
    v68 = *((_QWORD *)a1 + 9);
    v69 = (void *)*((_QWORD *)a1 + 10);
    v70 = *((_DWORD *)a1 + 22);
    v106 = *((_DWORD *)a1 + 8);
    v71 = *((_QWORD *)a1 + 12);
    v72 = a1[1];
    v104 = *a1;
    v105 = v72;
    v107 = v66;
    v108 = v65;
    v109 = v67;
    v110 = *((_QWORD *)a1 + 8);
    v111 = v68;
    v112 = v69;
    v113 = v70;
    v114 = v71;
    MEMORY[0x1E0C80A78](v62, v63);
    v91 = v73;
    v85[-6] = v73;
    v85[-5] = v74;
    v85[-4] = a1;
    v85[-3] = &v117;
    v85[-2] = v103;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    swift_retain();
    v75 = v69;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v76 = v112;
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v77 = (void *)*((_QWORD *)a1 + 10);
    if (v77)
    {
      v78 = *((_QWORD *)a1 + 9);
      if (v78)
      {
        v79 = v103[0];
        v100 = v103[0];
        v101 = v77;
        v102 = v78;
        type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(0);
        v80 = v77;
        swift_retain();
        swift_retain();
        swift_retain_n();
        v81 = v80;
        swift_retain();
        v82 = v79;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        swift_release();

        v83 = v119;
        v84 = v120;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v83, *((uint64_t *)&v83 + 1), v84);
        swift_release();

        swift_release();
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_57;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v33 = *((_QWORD *)a1 + 9);
  if (v33)
  {
    v117 = *((_QWORD *)a1 + 5);
    v118 = v28;
    v119 = v104;
    v120 = 0;
    v121 = v33;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    v99 = v104;
    swift_retain_n();
    swift_retain();
    v34 = swift_retain();
    v35 = MEMORY[0x18D75C5F8](v34) + 200;
    swift_beginAccess();
    v36 = MEMORY[0x18D760234](v35);
    v37 = swift_release();
    if (v36)
    {
      swift_getObjectType();
      v37 = swift_conformsToProtocol2();
      v39 = (void *)*((_QWORD *)&v104 + 1);
      if (v37)
        v40 = v36;
      else
        v40 = 0;
      if (v40)
        goto LABEL_45;
      v37 = swift_unknownObjectRelease();
    }
    else
    {
      v39 = (void *)*((_QWORD *)&v104 + 1);
    }
    v40 = 0;
LABEL_45:
    v90 = v40;
    v91 = &v88;
    v45 = *((_DWORD *)a1 + 8);
    v47 = *((_QWORD *)a1 + 5);
    v46 = *((_QWORD *)a1 + 6);
    v48 = *((_QWORD *)a1 + 7);
    v49 = *((_QWORD *)a1 + 9);
    v97 = (id)*((_QWORD *)a1 + 10);
    v50 = *((_DWORD *)a1 + 22);
    v106 = v45;
    v51 = *((_QWORD *)a1 + 12);
    v52 = a1[1];
    v104 = *a1;
    v105 = v52;
    v107 = v47;
    v108 = v46;
    v109 = v48;
    v110 = *((_QWORD *)a1 + 8);
    v111 = v49;
    v112 = v97;
    v113 = v50;
    v114 = v51;
    MEMORY[0x1E0C80A78](v37, v38);
    v85[2] = &v117;
    v85[3] = v103;
    v85[4] = v54;
    v85[5] = v53;
    v85[6] = v99;
    v85[7] = v39;
    v86 = (int)v93;
    v87 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(0);
    v94 = v55;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v93 = v56;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    swift_retain();
    v57 = v97;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v94 = 0;
    v97 = v39;
    swift_release();
    swift_release();
    v58 = v112;
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v59 = (void *)*((_QWORD *)a1 + 10);
    *((id *)a1 + 10) = v103[1];

    goto LABEL_46;
  }
LABEL_58:
  __break(1u);
}

{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  unsigned int v20;
  void *v21;
  void *v22;
  int v23;
  uint64_t OutputValue;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  objc_class *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  char v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  id v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  __int128 v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[2];
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  objc_super v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  void *v129;
  void *v130;
  __int128 v131;
  __int128 v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  void *v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  char v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  Value = (uint64_t *)AGGraphGetValue();
  v114 = v3;
  v4 = Value[1];
  v6 = Value[2];
  v5 = Value[3];
  v8 = Value[4];
  v7 = Value[5];
  v9 = (_QWORD *)Value[6];
  v149 = *Value;
  v150 = v4;
  v151 = v6;
  v152 = v5;
  v153 = v8;
  v154 = v7;
  v155 = v9;
  v10 = (_DWORD *)AGGraphGetValue();
  v115 = v11;
  LODWORD(v119) = *v10;
  v12 = (uint64_t *)AGGraphGetValue();
  v116 = v13;
  v14 = *v12;
  v120 = v12[1];
  LODWORD(v12) = *((_DWORD *)a1 + 7);
  v15 = *MEMORY[0x1E0CFED28];
  v118 = v14;
  if ((_DWORD)v12 == v15)
  {
    LODWORD(v112) = 0;
    LODWORD(v111) = 0;
    LODWORD(v110) = 0;
    v117 = 0;
  }
  else
  {
    v16 = AGGraphGetValue();
    v18 = v17;
    v19 = *(_QWORD *)v16;
    LODWORD(v110) = *(unsigned __int8 *)(v16 + 8);
    LODWORD(v111) = *(_DWORD *)(v16 + 12);
    swift_retain();
    v117 = v19;
    if (v19 == 1)
    {
      LODWORD(v112) = 0;
      LODWORD(v111) = 0;
      LODWORD(v110) = 0;
      v117 = 0;
    }
    else
    {
      LODWORD(v112) = v18 & 1;
    }
    v14 = v118;
  }
  v20 = v119 >> 1;
  if (v119 >> 1 == *((_DWORD *)a1 + 22))
  {
    swift_retain();
    outlined copy of AppIntentExecutor?(v4);
    outlined copy of AppIntentExecutor?(v5);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v131 = *(__int128 *)((char *)a1 + 56);
    swift_retain();
    outlined copy of AppIntentExecutor?(v4);
    outlined copy of AppIntentExecutor?(v5);
    swift_retain();
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    v21 = (void *)*((_QWORD *)a1 + 9);
    if (v21)
    {
      v22 = (void *)*((_QWORD *)a1 + 10);
      if (v22)
      {

        *((_QWORD *)a1 + 9) = 0;
        *((_QWORD *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v20;
  }
  v131 = *(__int128 *)((char *)a1 + 56);
  LODWORD(v122) = v119;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v23 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>(0);
    OutputValue = AGGraphGetOutputValue();
    v23 = 1;
    if (OutputValue && (v114 & 1) == 0 && (v115 & 1) == 0)
      v23 = AGGraphCurrentAttributeWasModified();
  }
  LODWORD(v114) = v23;
  v25 = AGGraphClearUpdate();
  if (!*((_QWORD *)a1 + 9))
  {
    v26 = v150;
    v27 = v151;
    v28 = v152;
    v29 = v153;
    v113 = v25;
    v30 = v155;
    v108 = v155;
    v109 = v154;
    v31 = (objc_class *)type metadata accessor for Coordinator();
    v32 = (char *)objc_allocWithZone(v31);
    v33 = &v32[OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration];
    *(_QWORD *)v33 = v149;
    *((_QWORD *)v33 + 1) = v26;
    *((_QWORD *)v33 + 2) = v27;
    *((_QWORD *)v33 + 3) = v28;
    v34 = v109;
    *((_QWORD *)v33 + 4) = v29;
    *((_QWORD *)v33 + 5) = v34;
    *((_QWORD *)v33 + 6) = v30;
    swift_retain();
    v35 = v26;
    v14 = v118;
    outlined copy of AppIntentExecutor?(v35);
    outlined copy of AppIntentExecutor?(v28);
    v121.receiver = v32;
    v121.super_class = v31;
    swift_retain();
    v36 = objc_msgSendSuper2(&v121, sel_init);
    v37 = (void *)*((_QWORD *)a1 + 9);
    *((_QWORD *)a1 + 9) = v36;

  }
  v38 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  v142 = v14;
  v143 = v120;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v39 = (_QWORD *)*((_QWORD *)a1 + 10);
  v113 = v38;
  if (v39)
  {
    if ((v116 & 1) != 0)
    {
      swift_retain();
      v40 = v39;
      swift_retain();
      v41 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v41 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        LODWORD(v114) = 1;
      }
    }
    else
    {
      v65 = v39;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v131 = 0;
      WORD4(v131) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v143)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v66 = *((_QWORD *)&v131 + 1);
    v61 = v131;
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    if (((v115 | v116) & 1) != 0)
    {
      v67 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v67, 0, v119);
      swift_release();
    }
    if ((_DWORD)v112)
    {
      v68 = (char *)v39 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v39) + 0x90);
      *(_QWORD *)v68 = v117;
      v68[8] = v110;
      *((_DWORD *)v68 + 3) = v111;
      swift_retain();
      swift_release();
      objc_msgSend(v39, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    v69 = (void *)*((_QWORD *)a1 + 9);
    if (!v69)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    v70 = v69;

    v144 = *((_QWORD *)a1 + 5);
    v145 = v38;
    *(_QWORD *)&v146 = v61;
    *((_QWORD *)&v146 + 1) = v66;
    v147 = 0;
    v148 = v70;
    swift_retain();
    if (!(_DWORD)v114)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v61, v66, 0);

      swift_release();
      swift_release();
      v105 = v150;
      v106 = v152;
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v105);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v106);
      goto LABEL_56;
    }
    v114 = v66;
    swift_retain();
    v116 = 0;
LABEL_46:
    type metadata accessor for ViewGraph();
    v71 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v72 = MEMORY[0x18D760234](v71);
    v73 = swift_release();
    v119 = v61;
    if (v72)
    {
      swift_getObjectType();
      v73 = swift_conformsToProtocol2();
      if (v73)
        v75 = v72;
      else
        v75 = 0;
      if (!v75)
        v73 = swift_unknownObjectRelease();
    }
    v115 = v107;
    v76 = *a1;
    v132 = a1[1];
    v77 = *((_DWORD *)a1 + 8);
    v78 = *((_QWORD *)a1 + 5);
    v79 = *((_QWORD *)a1 + 6);
    v80 = *((_QWORD *)a1 + 7);
    v81 = (void *)*((_QWORD *)a1 + 9);
    v82 = (void *)*((_QWORD *)a1 + 10);
    v83 = *((_DWORD *)a1 + 22);
    v84 = *((_QWORD *)a1 + 12);
    v131 = v76;
    v133 = v77;
    v134 = v78;
    v135 = v79;
    v136 = v80;
    v137 = *((_QWORD *)a1 + 8);
    v138 = v81;
    v139 = v82;
    v140 = v83;
    v141 = v84;
    MEMORY[0x1E0C80A78](v73, v74);
    v112 = v85;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v86 = v81;
    v87 = v82;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v88 = v138;
    v89 = v139;
    swift_release();
    swift_release();
    swift_release();

    v90 = (void *)*((_QWORD *)a1 + 10);
    if (v90)
    {
      v91 = (void *)*((_QWORD *)a1 + 9);
      if (v91)
      {
        v92 = v152;
        v93 = v153;
        v94 = v150;
        v107[0] = *((_QWORD *)a1 + 12);
        v96 = (uint64_t)a1 + 40;
        v95 = *((_QWORD *)a1 + 5);
        v109 = *(_QWORD *)(v96 + 8);
        v110 = v95;
        v122 = v149;
        v123 = v150;
        v115 = v155;
        v116 = v149;
        v124 = v151;
        v125 = v152;
        v111 = v152;
        v126 = v153;
        v127 = v154;
        v128 = v155;
        v129 = v90;
        v130 = v91;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>(0);
        v108 = v97;
        swift_retain();
        v98 = v90;
        swift_retain();
        swift_retain();
        v99 = v91;
        v100 = v98;
        swift_retain();
        outlined copy of AppIntentExecutor?(v94);
        v107[1] = v93;
        outlined copy of AppIntentExecutor?(v92);
        swift_retain();
        v101 = v99;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v94);
        v102 = v111;
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v111);

        swift_release();
        v103 = v146;
        LOBYTE(v92) = v147;
        v104 = v148;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v103, *((uint64_t *)&v103 + 1), v92);

        swift_release();
        swift_release();
        swift_release();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v94);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v102);
LABEL_56:
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_59;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v42 = (void *)*((_QWORD *)a1 + 9);
  if (v42)
  {
    v43 = v131;
    v144 = *((_QWORD *)a1 + 5);
    v145 = v38;
    v146 = v131;
    v147 = 0;
    v148 = v42;
    type metadata accessor for ViewGraph();
    v114 = *((_QWORD *)&v43 + 1);
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    v44 = MEMORY[0x18D75C5F8](v42) + 200;
    swift_beginAccess();
    v45 = MEMORY[0x18D760234](v44);
    v46 = swift_release();
    if (v45)
    {
      swift_getObjectType();
      v46 = swift_conformsToProtocol2();
      if (v46)
        v48 = v45;
      else
        v48 = 0;
      if (v48)
        goto LABEL_33;
      v46 = swift_unknownObjectRelease();
    }
    v48 = 0;
LABEL_33:
    v112 = v48;
    v115 = v107;
    v49 = a1[1];
    v131 = *a1;
    v51 = *((_QWORD *)a1 + 5);
    v50 = *((_QWORD *)a1 + 6);
    v52 = *((_QWORD *)a1 + 7);
    v53 = (void *)*((_QWORD *)a1 + 9);
    v54 = (void *)*((_QWORD *)a1 + 10);
    v55 = *((_DWORD *)a1 + 22);
    v133 = *((_DWORD *)a1 + 8);
    v56 = *((_QWORD *)a1 + 12);
    v132 = v49;
    v134 = v51;
    v135 = v50;
    v136 = v52;
    v137 = *((_QWORD *)a1 + 8);
    v138 = v53;
    v139 = v54;
    v140 = v55;
    v141 = v56;
    MEMORY[0x1E0C80A78](v46, v47);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>>(0);
    v116 = v57;
    v119 = v43;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v111 = v58;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v59 = v53;
    v60 = v54;
    swift_retain();
    v61 = v119;
    StatefulRule.withObservation<A>(do:)();
    v116 = 0;
    swift_release();
    swift_release();
    v62 = v138;
    v63 = v139;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v64 = (void *)*((_QWORD *)a1 + 10);
    *((_QWORD *)a1 + 10) = v122;

    goto LABEL_46;
  }
LABEL_60:
  __break(1u);
}

{
  _QWORD *Value;
  char v3;
  char v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  int v16;
  int v17;
  void *v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void *v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  void *v60;
  int v61;
  uint64_t v62;
  __int128 v63;
  uint64_t *v64;
  uint64_t v65;
  id v66;
  void *v67;
  void *v68;
  id v69;
  id v70;
  __int128 v71;
  _QWORD v72[8];
  unsigned int v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  _QWORD v86[4];
  __int128 v87;
  __int128 v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  void *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  char v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  Value = (_QWORD *)AGGraphGetValue();
  v4 = v3;
  v86[0] = *Value;
  v5 = (unsigned int *)AGGraphGetValue();
  v80 = v6;
  v7 = *v5;
  v8 = (uint64_t *)AGGraphGetValue();
  v81 = v9;
  v11 = *v8;
  v10 = v8[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E0CFED28]
    || (v12 = AGGraphGetValue(),
        v14 = v13,
        v15 = *(_QWORD *)v12,
        v16 = *(unsigned __int8 *)(v12 + 8),
        v17 = *(_DWORD *)(v12 + 12),
        swift_retain(),
        v15 == 1))
  {
    LODWORD(v77) = 0;
    v17 = 0;
    v16 = 0;
    v15 = 0;
  }
  else
  {
    LODWORD(v77) = v14 & 1;
  }
  if (v7 >> 1 == *((_DWORD *)a1 + 22))
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v87 = *(__int128 *)((char *)a1 + 56);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if ((*((_BYTE *)a1 + 72) & 1) == 0)
    {
      v18 = (void *)*((_QWORD *)a1 + 10);
      if (v18)
      {

        *((_BYTE *)a1 + 72) = 1;
        *((_QWORD *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v7 >> 1;
  }
  LODWORD(v76) = v16;
  v87 = *(__int128 *)((char *)a1 + 56);
  LODWORD(v100) = v7;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v19 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(0);
    v19 = 1;
    if (AGGraphGetOutputValue() && (v4 & 1) == 0 && (v80 & 1) == 0)
      v19 = AGGraphCurrentAttributeWasModified();
  }
  AGGraphClearUpdate();
  if (*((_BYTE *)a1 + 72) == 1)
    *((_BYTE *)a1 + 72) = 0;
  v20 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  v98 = v11;
  v99 = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v21 = (_QWORD *)*((_QWORD *)a1 + 10);
  v79 = v11;
  v83 = v10;
  v82 = v20;
  v78 = v15;
  if (v21)
  {
    if ((v81 & 1) != 0)
    {
      swift_retain();
      v22 = v21;
      swift_retain();
      v23 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v23 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        v19 = 1;
      }
    }
    else
    {
      v32 = v21;
    }
    HIDWORD(v75) = v17;
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v87 = 0;
      WORD4(v87) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v99)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    v33 = v80 | v81;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v81 = *((_QWORD *)&v87 + 1);
    v34 = v87;
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    if ((v33 & 1) != 0)
    {
      v35 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v35, 0, v7);
      swift_release();
    }
    if ((_DWORD)v77)
    {
      v36 = (char *)v21 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v21) + 0x90);
      *(_QWORD *)v36 = v15;
      v36[8] = v76;
      *((_DWORD *)v36 + 3) = HIDWORD(v75);
      swift_retain();
      swift_release();
      objc_msgSend(v21, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    if ((*((_BYTE *)a1 + 72) & 1) != 0)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }

    v100 = *((_QWORD *)a1 + 5);
    v101 = v82;
    *(_QWORD *)&v102 = v34;
    *((_QWORD *)&v102 + 1) = v81;
    v103 = 0;
    swift_retain();
    if (!v19)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v81, 0);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    v80 = v34;
    swift_retain();
LABEL_46:
    type metadata accessor for ViewGraph();
    v51 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v52 = MEMORY[0x18D760234](v51);
    v53 = swift_release();
    if (v52)
    {
      swift_getObjectType();
      v53 = swift_conformsToProtocol2();
      if (v53)
        v55 = v52;
      else
        v55 = 0;
      if (!v55)
        v53 = swift_unknownObjectRelease();
    }
    v56 = *((_QWORD *)a1 + 5);
    v57 = *((_QWORD *)a1 + 6);
    v58 = *((_QWORD *)a1 + 7);
    v59 = *((_BYTE *)a1 + 72);
    v60 = (void *)*((_QWORD *)a1 + 10);
    v61 = *((_DWORD *)a1 + 22);
    v89 = *((_DWORD *)a1 + 8);
    v62 = *((_QWORD *)a1 + 12);
    v63 = a1[1];
    v87 = *a1;
    v88 = v63;
    v90 = v56;
    v91 = v57;
    v92 = v58;
    v93 = *((_QWORD *)a1 + 8);
    v94 = v59;
    v95 = v60;
    v96 = v61;
    v97 = v62;
    MEMORY[0x1E0C80A78](v53, v54);
    v77 = v64;
    v72[-6] = v64;
    v72[-5] = v65;
    v72[-4] = a1;
    v72[-3] = &v100;
    v72[-2] = v86;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v66 = v60;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v67 = v95;
    swift_release();
    swift_release();
    swift_release();

    v68 = (void *)*((_QWORD *)a1 + 10);
    if (v68)
    {
      if ((*((_BYTE *)a1 + 72) & 1) == 0)
      {
        v84 = v86[0];
        v85 = v68;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(0);
        v69 = v68;
        swift_retain();
        swift_retain();
        v70 = v69;
        swift_retain();
        swift_bridgeObjectRetain();
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        v71 = v102;
        LOBYTE(v70) = v103;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v71, *((uint64_t *)&v71 + 1), (char)v70);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_57;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  if ((*((_BYTE *)a1 + 72) & 1) == 0)
  {
    v100 = *((_QWORD *)a1 + 5);
    v101 = v20;
    v102 = v87;
    v103 = 0;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    v80 = v87;
    swift_retain_n();
    v24 = swift_retain();
    v25 = MEMORY[0x18D75C5F8](v24) + 200;
    swift_beginAccess();
    v26 = MEMORY[0x18D760234](v25);
    v27 = swift_release();
    if (v26)
    {
      swift_getObjectType();
      v27 = swift_conformsToProtocol2();
      v29 = v7;
      v30 = *((_QWORD *)&v87 + 1);
      if (v27)
        v31 = v26;
      else
        v31 = 0;
      if (v31)
        goto LABEL_45;
      v27 = swift_unknownObjectRelease();
    }
    else
    {
      v29 = v7;
      v30 = *((_QWORD *)&v87 + 1);
    }
    v31 = 0;
LABEL_45:
    v76 = v31;
    v77 = &v75;
    v38 = *((_QWORD *)a1 + 5);
    v37 = *((_QWORD *)a1 + 6);
    v39 = *((_QWORD *)a1 + 7);
    v40 = *((_BYTE *)a1 + 72);
    v41 = (void *)*((_QWORD *)a1 + 10);
    v42 = *((_DWORD *)a1 + 22);
    v89 = *((_DWORD *)a1 + 8);
    v43 = *((_QWORD *)a1 + 12);
    v44 = a1[1];
    v87 = *a1;
    v88 = v44;
    v90 = v38;
    v91 = v37;
    v92 = v39;
    v93 = *((_QWORD *)a1 + 8);
    v94 = v40;
    v95 = v41;
    v96 = v42;
    v97 = v43;
    MEMORY[0x1E0C80A78](v27, v28);
    v72[2] = &v100;
    v72[3] = v86;
    v72[4] = v46;
    v72[5] = v45;
    v72[6] = v80;
    v72[7] = v30;
    v73 = v29;
    v74 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(0);
    v81 = v47;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v48 = v41;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v81 = v30;
    swift_release();
    swift_release();
    v49 = v95;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v50 = (void *)*((_QWORD *)a1 + 10);
    *((_QWORD *)a1 + 10) = v86[1];

    goto LABEL_46;
  }
LABEL_58:
  __break(1u);
}

{
  uint64_t Value;
  char v3;
  char v4;
  unsigned int *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  int v16;
  int v17;
  void *v18;
  int v19;
  uint64_t OutputValue;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  void *v58;
  int v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  id v63;
  void *v64;
  void *v65;
  char v66;
  id v67;
  id v68;
  __int128 v69;
  char v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD v82[4];
  char v83;
  _OWORD v84[4];
  char v85;
  void *v86;
  __int128 v87;
  __int128 v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  id v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  char v103;
  _BYTE v104[72];
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  Value = AGGraphGetValue();
  v4 = v3;
  outlined init with copy of PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>(Value, (uint64_t)v104);
  v5 = (unsigned int *)AGGraphGetValue();
  v78 = v6;
  v7 = *v5;
  v8 = (uint64_t *)AGGraphGetValue();
  v79 = v9;
  v10 = *v8;
  v11 = v8[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E0CFED28]
    || (v12 = AGGraphGetValue(),
        v14 = v13,
        v15 = *(_QWORD *)v12,
        v16 = *(unsigned __int8 *)(v12 + 8),
        v17 = *(_DWORD *)(v12 + 12),
        swift_retain(),
        v15 == 1))
  {
    v73 = 0;
    LODWORD(v74) = 0;
    v17 = 0;
    v15 = 0;
  }
  else
  {
    v73 = v16;
    LODWORD(v74) = v14 & 1;
  }
  if (v7 >> 1 == *((_DWORD *)a1 + 22))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    v87 = *(__int128 *)((char *)a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if ((*((_BYTE *)a1 + 72) & 1) == 0)
    {
      v18 = (void *)*((_QWORD *)a1 + 10);
      if (v18)
      {

        *((_BYTE *)a1 + 72) = 1;
        *((_QWORD *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v7 >> 1;
  }
  v87 = *(__int128 *)((char *)a1 + 56);
  LODWORD(v84[0]) = v7;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v19 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(0);
    OutputValue = AGGraphGetOutputValue();
    v19 = 1;
    if (OutputValue && (v4 & 1) == 0 && (v78 & 1) == 0)
      v19 = AGGraphCurrentAttributeWasModified();
  }
  LODWORD(v76) = v19;
  AGGraphClearUpdate();
  if (*((_BYTE *)a1 + 72) == 1)
    *((_BYTE *)a1 + 72) = 0;
  v21 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  v98 = v10;
  v99 = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v22 = (_QWORD *)*((_QWORD *)a1 + 10);
  v80 = v11;
  v81 = v15;
  v77 = v10;
  LODWORD(v75) = v7;
  if (v22)
  {
    if ((v79 & 1) != 0)
    {
      swift_retain();
      v23 = v22;
      swift_retain();
      v24 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v24 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        LODWORD(v76) = 1;
      }
    }
    else
    {
      v45 = v22;
    }
    v72 = v17;
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v87 = 0;
      WORD4(v87) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v99)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v46 = (void *)*((_QWORD *)&v87 + 1);
    swift_retain();
    v25 = v87;
    swift_retain();
    AGGraphClearUpdate();
    if (((v78 | v79) & 1) != 0)
    {
      v47 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v47, 0, v75, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1E1B20290, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
      swift_release();
    }
    if ((_DWORD)v74)
    {
      v48 = (char *)v22 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v22) + 0x90);
      *(_QWORD *)v48 = v81;
      v48[8] = v73;
      *((_DWORD *)v48 + 3) = v72;
      swift_retain();
      swift_release();
      specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(0);
    }
    AGGraphSetUpdate();
    if ((*((_BYTE *)a1 + 72) & 1) != 0)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }

    v100 = *((_QWORD *)a1 + 5);
    v101 = v21;
    *(_QWORD *)&v102 = v25;
    *((_QWORD *)&v102 + 1) = v46;
    v103 = 0;
    swift_retain();
    if (!(_DWORD)v76)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v25, (uint64_t)v46, 0);
      goto LABEL_54;
    }
    v76 = v46;
    v79 = v21;
    swift_retain();
LABEL_44:
    type metadata accessor for ViewGraph();
    v49 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v50 = MEMORY[0x18D760234](v49);
    v51 = swift_release();
    v75 = v25;
    if (v50)
    {
      swift_getObjectType();
      v51 = swift_conformsToProtocol2();
      if (v51)
        v53 = v50;
      else
        v53 = 0;
      if (!v53)
        v51 = swift_unknownObjectRelease();
    }
    v78 = &v71;
    v55 = *((_QWORD *)a1 + 5);
    v54 = *((_QWORD *)a1 + 6);
    v56 = *((_QWORD *)a1 + 7);
    v57 = *((_BYTE *)a1 + 72);
    v58 = (void *)*((_QWORD *)a1 + 10);
    v59 = *((_DWORD *)a1 + 22);
    v89 = *((_DWORD *)a1 + 8);
    v60 = *((_QWORD *)a1 + 12);
    v61 = a1[1];
    v87 = *a1;
    v88 = v61;
    v90 = v55;
    v91 = v54;
    v92 = v56;
    v93 = *((_QWORD *)a1 + 8);
    v94 = v57;
    v95 = v58;
    v96 = v59;
    v97 = v60;
    MEMORY[0x1E0C80A78](v51, v52);
    v74 = v62;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v63 = v58;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v64 = v95;
    swift_release();
    swift_release();
    swift_release();

    v65 = (void *)*((_QWORD *)a1 + 10);
    if (v65)
    {
      v66 = *((_BYTE *)a1 + 72);
      outlined init with copy of PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>((uint64_t)v104, (uint64_t)v82);
      if ((v66 & 1) == 0)
      {
        v84[2] = v82[2];
        v84[3] = v82[3];
        v85 = v83;
        v84[0] = v82[0];
        v84[1] = v82[1];
        v86 = v65;
        type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(0);
        v67 = v65;
        swift_retain();
        swift_retain();
        v68 = v67;
        swift_retain();
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v84, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
        v69 = v102;
        v70 = v103;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v69, *((uint64_t *)&v69 + 1), v70);
LABEL_54:
        swift_release();
        swift_release();
        outlined destroy of PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>((uint64_t)v104);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_57;
  }
  v79 = v21;
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  if ((*((_BYTE *)a1 + 72) & 1) == 0)
  {
    v26 = (void *)*((_QWORD *)&v87 + 1);
    v25 = v87;
    v100 = *((_QWORD *)a1 + 5);
    v101 = v79;
    v102 = v87;
    v103 = 0;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    v27 = swift_retain();
    v28 = MEMORY[0x18D75C5F8](v27) + 200;
    swift_beginAccess();
    v29 = MEMORY[0x18D760234](v28);
    v30 = swift_release();
    if (v29)
    {
      swift_getObjectType();
      v30 = swift_conformsToProtocol2();
      if (v30)
        v32 = v29;
      else
        v32 = 0;
      if (v32)
        goto LABEL_31;
      v30 = swift_unknownObjectRelease();
    }
    v32 = 0;
LABEL_31:
    v74 = v32;
    v78 = &v71;
    v33 = *((_DWORD *)a1 + 8);
    v35 = *((_QWORD *)a1 + 5);
    v34 = *((_QWORD *)a1 + 6);
    v36 = *((_QWORD *)a1 + 7);
    v37 = *((_BYTE *)a1 + 72);
    v76 = (id)*((_QWORD *)a1 + 10);
    v38 = *((_DWORD *)a1 + 22);
    v89 = v33;
    v39 = *((_QWORD *)a1 + 12);
    v40 = a1[1];
    v87 = *a1;
    v88 = v40;
    v90 = v35;
    v91 = v34;
    v92 = v36;
    v93 = *((_QWORD *)a1 + 8);
    v94 = v37;
    v95 = v76;
    v96 = v38;
    v97 = v39;
    MEMORY[0x1E0C80A78](v30, v31);
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(0);
    v75 = v41;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v42 = v76;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v76 = v26;
    swift_release();
    swift_release();
    v43 = v95;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v44 = (void *)*((_QWORD *)a1 + 10);
    *((_QWORD *)a1 + 10) = *(_QWORD *)&v84[0];

    goto LABEL_44;
  }
LABEL_58:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t Value;
  char v15;
  char v16;
  _DWORD *v17;
  _BYTE *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  BOOL v29;
  void *v30;
  void *v31;
  int v32;
  uint64_t OutputValue;
  id v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  char v38;
  void *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  int v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  int v84;
  uint64_t v85;
  __int128 v86;
  void *v87;
  uint64_t v88;
  id v89;
  id v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  id v99;
  id v100;
  id v101;
  __int128 v102;
  char v103;
  void *v104;
  _BYTE v105[4];
  int v106;
  id v107;
  _BYTE *v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  id v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  char v137;
  id v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = &v105[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v7, v8);
  v109 = &v105[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v105[-v12];
  Value = AGGraphGetValue();
  v16 = v15;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(Value, (uint64_t)v13);
  v17 = (_DWORD *)AGGraphGetValue();
  v115 = v18;
  LODWORD(v119) = *v17;
  v19 = (uint64_t *)AGGraphGetValue();
  v116 = v20;
  v22 = *v19;
  v21 = v19[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E0CFED28]
    || (v23 = AGGraphGetValue(),
        v25 = v24,
        v26 = *(_QWORD *)v23,
        v106 = *(unsigned __int8 *)(v23 + 8),
        v27 = *(_DWORD *)(v23 + 12),
        swift_retain(),
        v26 == 1))
  {
    LODWORD(v107) = 0;
    v27 = 0;
    v106 = 0;
    v26 = 0;
  }
  else
  {
    LODWORD(v107) = v25 & 1;
  }
  v28 = v119 >> 1;
  v29 = v119 >> 1 == *((_DWORD *)a1 + 22);
  v117 = v21;
  v108 = v6;
  if (v29)
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    v121 = *(__int128 *)((char *)a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    v30 = (void *)*((_QWORD *)a1 + 9);
    if (v30)
    {
      v31 = (void *)*((_QWORD *)a1 + 10);
      if (v31)
      {

        *((_QWORD *)a1 + 9) = 0;
        *((_QWORD *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v28;
    v21 = v117;
  }
  v121 = *(__int128 *)((char *)a1 + 56);
  LODWORD(v134) = v119;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v32 = 1;
  }
  else
  {
    OutputValue = AGGraphGetOutputValue();
    v32 = 1;
    if (OutputValue && (v16 & 1) == 0 && (v115 & 1) == 0)
      v32 = AGGraphCurrentAttributeWasModified();
  }
  LODWORD(v112) = v32;
  AGGraphClearUpdate();
  if (!*((_QWORD *)a1 + 9))
  {
    v34 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitSearchBarCoordinator(0)), sel_init);
    v35 = (void *)*((_QWORD *)a1 + 9);
    *((_QWORD *)a1 + 9) = v34;

  }
  v118 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  v132 = v22;
  v133 = v21;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v36 = (_QWORD *)*((_QWORD *)a1 + 10);
  v114 = v13;
  v110 = v3;
  v113 = v22;
  if (v36)
  {
    if ((v116 & 1) != 0)
    {
      swift_retain();
      v37 = v36;
      swift_retain();
      v38 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v38 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        LODWORD(v112) = 1;
      }
    }
    else
    {
      v64 = v36;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v121 = 0;
      WORD4(v121) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v133)
      {
        v111 = v26;
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        v26 = v111;
        swift_release();
      }
      swift_release();
    }
    v65 = v26;
    v66 = v115 | v116;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v67 = *((_QWORD *)&v121 + 1);
    v60 = v121;
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    if ((v66 & 1) != 0)
    {
      v68 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v68, 0, v119);
      swift_release();
    }
    if ((_DWORD)v107)
    {
      v69 = (char *)v36 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v36) + 0x90);
      *(_QWORD *)v69 = v65;
      v69[8] = v106;
      *((_DWORD *)v69 + 3) = v27;
      swift_retain();
      swift_release();
      objc_msgSend(v36, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    v70 = (void *)*((_QWORD *)a1 + 9);
    if (!v70)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    v71 = v70;

    v134 = *((_QWORD *)a1 + 5);
    v135 = v118;
    *(_QWORD *)&v136 = v60;
    *((_QWORD *)&v136 + 1) = v67;
    v137 = 0;
    v138 = v71;
    swift_retain();
    if (!(_DWORD)v112)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v60, v67, 0);

      v78 = (uint64_t)v114;
LABEL_56:
      swift_release();
      swift_release();
      outlined destroy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(v78);
      return;
    }
    v116 = v67;
    v111 = v65;
    swift_retain();
    v119 = 0;
LABEL_45:
    type metadata accessor for ViewGraph();
    v72 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v73 = MEMORY[0x18D760234](v72);
    v74 = swift_release();
    v112 = v60;
    if (v73)
    {
      swift_getObjectType();
      v74 = swift_conformsToProtocol2();
      if (v74)
        v76 = v73;
      else
        v76 = 0;
      v77 = (uint64_t)v114;
      if (!v76)
        v74 = swift_unknownObjectRelease();
    }
    else
    {
      v77 = (uint64_t)v114;
    }
    v115 = v105;
    v79 = *((_QWORD *)a1 + 5);
    v80 = *((_QWORD *)a1 + 6);
    v81 = *((_QWORD *)a1 + 7);
    v83 = (void *)*((_QWORD *)a1 + 9);
    v82 = (void *)*((_QWORD *)a1 + 10);
    v84 = *((_DWORD *)a1 + 22);
    v123 = *((_DWORD *)a1 + 8);
    v85 = *((_QWORD *)a1 + 12);
    v86 = a1[1];
    v121 = *a1;
    v122 = v86;
    v124 = v79;
    v125 = v80;
    v126 = v81;
    v127 = *((_QWORD *)a1 + 8);
    v128 = v83;
    v129 = v82;
    v130 = v84;
    v131 = v85;
    MEMORY[0x1E0C80A78](v74, v75);
    v107 = v87;
    *(_QWORD *)&v105[-48] = v87;
    *(_QWORD *)&v105[-40] = v88;
    *(_QWORD *)&v105[-32] = a1;
    *(_QWORD *)&v105[-24] = &v134;
    *(_QWORD *)&v105[-16] = v77;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v89 = v83;
    v90 = v82;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v91 = v128;
    v92 = v129;
    swift_release();
    swift_release();
    swift_release();

    v93 = (void *)*((_QWORD *)a1 + 10);
    if (v93)
    {
      v94 = (void *)*((_QWORD *)a1 + 9);
      v78 = v77;
      v95 = v109;
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(v77, (uint64_t)v109);
      v96 = v110;
      if (v94)
      {
        v97 = (uint64_t)v108;
        *(_QWORD *)&v108[*(int *)(v110 + 40)] = v94;
        outlined init with take of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>((uint64_t)v95, v97);
        *(_QWORD *)(v97 + *(int *)(v96 + 36)) = v93;
        v98 = v93;
        swift_retain();
        swift_retain();
        v99 = v94;
        v100 = v98;
        swift_retain();
        v101 = v99;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(v97);
        v102 = v136;
        v103 = v137;
        v104 = v138;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v102, *((uint64_t *)&v102 + 1), v103);

        goto LABEL_56;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_59;
  }
  v111 = v26;
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v39 = (void *)*((_QWORD *)a1 + 9);
  if (v39)
  {
    v40 = v121;
    v134 = *((_QWORD *)a1 + 5);
    v135 = v118;
    v136 = v121;
    v137 = 0;
    v138 = v39;
    type metadata accessor for ViewGraph();
    v116 = *((_QWORD *)&v40 + 1);
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    v41 = MEMORY[0x18D75C5F8](v39) + 200;
    swift_beginAccess();
    v42 = MEMORY[0x18D760234](v41);
    v43 = swift_release();
    if (v42)
    {
      swift_getObjectType();
      v43 = swift_conformsToProtocol2();
      if (v43)
        v45 = v42;
      else
        v45 = 0;
      if (v45)
        goto LABEL_32;
      v43 = swift_unknownObjectRelease();
    }
    v45 = 0;
LABEL_32:
    v112 = v45;
    v115 = v105;
    v46 = *((_DWORD *)a1 + 8);
    v47 = *((_QWORD *)a1 + 5);
    v48 = *((_QWORD *)a1 + 6);
    v49 = *((_QWORD *)a1 + 7);
    v50 = (void *)*((_QWORD *)a1 + 9);
    v107 = (id)*((_QWORD *)a1 + 10);
    v51 = *((_DWORD *)a1 + 22);
    v123 = v46;
    v52 = *((_QWORD *)a1 + 12);
    v53 = a1[1];
    v121 = *a1;
    v122 = v53;
    v124 = v47;
    v125 = v48;
    v126 = v49;
    v127 = *((_QWORD *)a1 + 8);
    v128 = v50;
    v129 = v107;
    v130 = v51;
    v131 = v52;
    MEMORY[0x1E0C80A78](v43, v44);
    *(_QWORD *)&v105[-64] = &v134;
    *(_QWORD *)&v105[-56] = v13;
    *(_QWORD *)&v105[-48] = v55;
    *(_QWORD *)&v105[-40] = v54;
    v56 = v116;
    *(_QWORD *)&v105[-32] = v40;
    *(_QWORD *)&v105[-24] = v56;
    *(_DWORD *)&v105[-16] = v119;
    *(_QWORD *)&v105[-8] = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(0);
    v119 = v57;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v58 = v50;
    v59 = v107;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v119 = 0;
    v60 = v40;
    swift_release();
    swift_release();
    v61 = v128;
    v62 = v129;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v63 = (void *)*((_QWORD *)a1 + 10);
    *((_QWORD *)a1 + 10) = v120;

    goto LABEL_45;
  }
LABEL_60:
  __break(1u);
}

{
  uint64_t Value;
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  unsigned int *v7;
  void *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  void *v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  void *v63;
  int v64;
  uint64_t v65;
  __int128 v66;
  uint64_t *v67;
  uint64_t v68;
  id v69;
  void *v70;
  void *v71;
  char v72;
  uint64_t v73;
  id v74;
  id v75;
  __int128 v76;
  _QWORD v77[8];
  int v78;
  __int128 *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  char v92;
  void *v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  id v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  char v111;
  uint64_t v112;
  char v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  Value = AGGraphGetValue();
  v4 = v3;
  v5 = *(_QWORD *)Value;
  v6 = *(_BYTE *)(Value + 8);
  v112 = *(_QWORD *)Value;
  v113 = v6;
  v7 = (unsigned int *)AGGraphGetValue();
  v90 = v8;
  v9 = *v7;
  v10 = (uint64_t *)AGGraphGetValue();
  v88 = v11;
  v12 = *v10;
  v13 = v10[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E0CFED28]
    || (v14 = AGGraphGetValue(),
        v16 = v15,
        v17 = *(_QWORD *)v14,
        v18 = *(_DWORD *)(v14 + 12),
        v81 = *(unsigned __int8 *)(v14 + 8),
        LODWORD(v82) = v18,
        swift_retain(),
        v17 == 1))
  {
    LODWORD(v83) = 0;
    v81 = 0;
    LODWORD(v82) = 0;
    v17 = 0;
  }
  else
  {
    LODWORD(v83) = v16 & 1;
  }
  if (v9 >> 1 == *((_DWORD *)a1 + 22))
  {
    outlined copy of Environment<Bool>.Content(v5, v6);
    swift_retain();
    swift_retain();
  }
  else
  {
    v95 = *(__int128 *)((char *)a1 + 56);
    outlined copy of Environment<Bool>.Content(v5, v6);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if ((*((_BYTE *)a1 + 72) & 1) == 0)
    {
      v19 = (void *)*((_QWORD *)a1 + 10);
      if (v19)
      {

        *((_BYTE *)a1 + 72) = 1;
        *((_QWORD *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v9 >> 1;
  }
  v95 = *(__int128 *)((char *)a1 + 56);
  LODWORD(v108) = v9;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v20 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(0);
    v20 = 1;
    if (AGGraphGetOutputValue() && (v4 & 1) == 0 && (v90 & 1) == 0)
      v20 = AGGraphCurrentAttributeWasModified();
  }
  LODWORD(v85) = v9;
  AGGraphClearUpdate();
  if (*((_BYTE *)a1 + 72) == 1)
    *((_BYTE *)a1 + 72) = 0;
  v21 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  v106 = v12;
  v107 = v13;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v22 = (_QWORD *)*((_QWORD *)a1 + 10);
  v86 = v13;
  v87 = v12;
  v89 = v21;
  v84 = v17;
  if (v22)
  {
    v23 = v88;
    if ((v88 & 1) != 0)
    {
      swift_retain();
      v24 = v22;
      swift_retain();
      v25 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v25 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        v20 = 1;
      }
    }
    else
    {
      v34 = v22;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v95 = 0;
      WORD4(v95) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v107)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      v23 = v88;
    }
    v35 = v90 | v23;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v88 = *((_QWORD *)&v95 + 1);
    swift_retain();
    v90 = (id)v95;
    swift_retain();
    AGGraphClearUpdate();
    if ((v35 & 1) != 0)
    {
      v36 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v36, 0, (int)v85);
      swift_release();
    }
    if ((_DWORD)v83)
    {
      v37 = (char *)v22 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v22) + 0x90);
      *(_QWORD *)v37 = v17;
      v37[8] = v81;
      *((_DWORD *)v37 + 3) = v82;
      swift_retain();
      swift_release();
      objc_msgSend(v22, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    if ((*((_BYTE *)a1 + 72) & 1) != 0)
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }

    v108 = *((_QWORD *)a1 + 5);
    v109 = v89;
    *(_QWORD *)&v110 = v90;
    *((_QWORD *)&v110 + 1) = v88;
    v111 = 0;
    swift_retain();
    if (!v20)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage((uint64_t)v90, v88, 0);
      swift_release();
      swift_release();
      v38 = v112;
      v39 = v113;
LABEL_55:
      outlined consume of Environment<Bool>.Content(v38, v39);
      return;
    }
    swift_retain();
LABEL_46:
    type metadata accessor for ViewGraph();
    v54 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v55 = MEMORY[0x18D760234](v54);
    v56 = swift_release();
    if (v55)
    {
      swift_getObjectType();
      v56 = swift_conformsToProtocol2();
      if (v56)
        v58 = v55;
      else
        v58 = 0;
      if (!v58)
        v56 = swift_unknownObjectRelease();
    }
    v85 = v77;
    v60 = *((_QWORD *)a1 + 5);
    v59 = *((_QWORD *)a1 + 6);
    v61 = *((_QWORD *)a1 + 7);
    v62 = *((_BYTE *)a1 + 72);
    v63 = (void *)*((_QWORD *)a1 + 10);
    v64 = *((_DWORD *)a1 + 22);
    v97 = *((_DWORD *)a1 + 8);
    v65 = *((_QWORD *)a1 + 12);
    v66 = a1[1];
    v95 = *a1;
    v96 = v66;
    v98 = v60;
    v99 = v59;
    v100 = v61;
    v101 = *((_QWORD *)a1 + 8);
    v102 = v62;
    v103 = v63;
    v104 = v64;
    v105 = v65;
    MEMORY[0x1E0C80A78](v56, v57);
    v83 = v67;
    v77[-6] = v67;
    v77[-5] = v68;
    v77[-4] = a1;
    v77[-3] = &v108;
    v77[-2] = &v112;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v69 = v63;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v70 = v103;
    swift_release();
    swift_release();
    swift_release();

    v71 = (void *)*((_QWORD *)a1 + 10);
    if (v71)
    {
      if ((*((_BYTE *)a1 + 72) & 1) == 0)
      {
        v72 = v113;
        v73 = v112;
        v91 = v112;
        v92 = v113;
        v93 = v71;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(0);
        v74 = v71;
        swift_retain();
        swift_retain();
        v75 = v74;
        swift_retain();
        outlined copy of Environment<Bool>.Content(v73, v72);
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined consume of Environment<Bool>.Content(v73, v72);

        v76 = v110;
        LOBYTE(v75) = v111;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v76, *((uint64_t *)&v76 + 1), (char)v75);
        swift_release();
        swift_release();
        v38 = v73;
        v39 = v72;
        goto LABEL_55;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_58;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  if ((*((_BYTE *)a1 + 72) & 1) == 0)
  {
    v108 = *((_QWORD *)a1 + 5);
    v109 = v21;
    v110 = v95;
    v111 = 0;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    v26 = swift_retain();
    v27 = MEMORY[0x18D75C5F8](v26) + 200;
    swift_beginAccess();
    v28 = MEMORY[0x18D760234](v27);
    v29 = swift_release();
    if (v28)
    {
      swift_getObjectType();
      v29 = swift_conformsToProtocol2();
      v31 = *((_QWORD *)&v95 + 1);
      v32 = (void *)v95;
      if (v29)
        v33 = v28;
      else
        v33 = 0;
      if (v33)
        goto LABEL_45;
      v29 = swift_unknownObjectRelease();
    }
    else
    {
      v31 = *((_QWORD *)&v95 + 1);
      v32 = (void *)v95;
    }
    v33 = 0;
LABEL_45:
    v82 = v33;
    v83 = &v80;
    v40 = *((_DWORD *)a1 + 8);
    v42 = *((_QWORD *)a1 + 5);
    v41 = *((_QWORD *)a1 + 6);
    v43 = *((_QWORD *)a1 + 7);
    v44 = *((_BYTE *)a1 + 72);
    v90 = (id)*((_QWORD *)a1 + 10);
    v45 = *((_DWORD *)a1 + 22);
    v97 = v40;
    v46 = *((_QWORD *)a1 + 12);
    v47 = a1[1];
    v95 = *a1;
    v96 = v47;
    v98 = v42;
    v99 = v41;
    v100 = v43;
    v101 = *((_QWORD *)a1 + 8);
    v102 = v44;
    v103 = v90;
    v104 = v45;
    v105 = v46;
    MEMORY[0x1E0C80A78](v29, v30);
    v77[2] = &v108;
    v77[3] = &v112;
    v77[4] = v49;
    v77[5] = v48;
    v77[6] = v32;
    v77[7] = v31;
    v78 = (int)v85;
    v79 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(0);
    v88 = v50;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v51 = v90;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v88 = v31;
    swift_release();
    v90 = v32;
    swift_release();
    v52 = v103;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v53 = (void *)*((_QWORD *)a1 + 10);
    *((_QWORD *)a1 + 10) = v94;

    goto LABEL_46;
  }
LABEL_59:
  __break(1u);
}

{
  uint64_t *Value;
  char v3;
  char v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  int v17;
  void *v18;
  int v19;
  uint64_t OutputValue;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void *v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  void *v45;
  void *v46;
  _QWORD *v47;
  int v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  void *v62;
  int v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  id v67;
  void *v68;
  void *v69;
  id v70;
  id v71;
  __int128 v72;
  char v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  void *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  Value = (uint64_t *)AGGraphGetValue();
  v4 = v3;
  v5 = Value[1];
  v105 = *Value;
  v106 = v5;
  v6 = (unsigned int *)AGGraphGetValue();
  v81 = v7;
  v8 = *v6;
  v9 = (uint64_t *)AGGraphGetValue();
  v80 = v10;
  v11 = *v9;
  v12 = v9[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E0CFED28]
    || (v13 = AGGraphGetValue(),
        v15 = v14,
        v16 = *(_QWORD *)v13,
        v75 = *(unsigned __int8 *)(v13 + 8),
        v17 = *(_DWORD *)(v13 + 12),
        swift_retain(),
        v16 == 1))
  {
    v75 = 0;
    LODWORD(v76) = 0;
    v17 = 0;
    v16 = 0;
  }
  else
  {
    LODWORD(v76) = v15 & 1;
  }
  if (v8 >> 1 == *((_DWORD *)a1 + 22))
  {
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v88 = *(__int128 *)((char *)a1 + 56);
    swift_retain();
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if ((*((_BYTE *)a1 + 72) & 1) == 0)
    {
      v18 = (void *)*((_QWORD *)a1 + 10);
      if (v18)
      {

        *((_BYTE *)a1 + 72) = 1;
        *((_QWORD *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v8 >> 1;
  }
  v88 = *(__int128 *)((char *)a1 + 56);
  LODWORD(v101) = v8;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v19 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(0);
    OutputValue = AGGraphGetOutputValue();
    v19 = 1;
    if (OutputValue && (v4 & 1) == 0 && (v81 & 1) == 0)
      v19 = AGGraphCurrentAttributeWasModified();
  }
  LODWORD(v78) = v19;
  v74 = v17;
  AGGraphClearUpdate();
  if (*((_BYTE *)a1 + 72) == 1)
    *((_BYTE *)a1 + 72) = 0;
  v21 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  v99 = v11;
  v100 = v12;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v22 = (_QWORD *)*((_QWORD *)a1 + 10);
  v82 = v21;
  v83 = v12;
  v77 = v16;
  v79 = v11;
  if (v22)
  {
    v23 = v80;
    if ((v80 & 1) != 0)
    {
      swift_retain();
      v24 = v22;
      swift_retain();
      v25 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v25 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        LODWORD(v78) = 1;
      }
    }
    else
    {
      v47 = v22;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v88 = 0;
      WORD4(v88) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v100)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      v23 = v80;
    }
    v48 = v8;
    v49 = v81 | v23;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v81 = *((_QWORD *)&v88 + 1);
    swift_retain();
    v50 = v88;
    swift_retain();
    AGGraphClearUpdate();
    if ((v49 & 1) != 0)
    {
      v51 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v51, 0, v48);
      swift_release();
    }
    if ((_DWORD)v76)
    {
      v52 = (char *)v22 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v22) + 0x90);
      *(_QWORD *)v52 = v16;
      v52[8] = v75;
      *((_DWORD *)v52 + 3) = v74;
      swift_retain();
      swift_release();
      objc_msgSend(v22, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    v44 = v50;
    if ((*((_BYTE *)a1 + 72) & 1) != 0)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }

    v101 = *((_QWORD *)a1 + 5);
    v102 = v82;
    *(_QWORD *)&v103 = v50;
    *((_QWORD *)&v103 + 1) = v81;
    v104 = 0;
    swift_retain();
    if (!(_DWORD)v78)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v50, v81, 0);
      swift_release();
      swift_release();
      goto LABEL_54;
    }
    swift_retain();
LABEL_44:
    type metadata accessor for ViewGraph();
    v53 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v54 = MEMORY[0x18D760234](v53);
    v55 = swift_release();
    v80 = v44;
    if (v54)
    {
      swift_getObjectType();
      v55 = swift_conformsToProtocol2();
      if (v55)
        v57 = v54;
      else
        v57 = 0;
      if (!v57)
        v55 = swift_unknownObjectRelease();
    }
    v78 = &v74;
    v59 = *((_QWORD *)a1 + 5);
    v58 = *((_QWORD *)a1 + 6);
    v60 = *((_QWORD *)a1 + 7);
    v61 = *((_BYTE *)a1 + 72);
    v62 = (void *)*((_QWORD *)a1 + 10);
    v63 = *((_DWORD *)a1 + 22);
    v90 = *((_DWORD *)a1 + 8);
    v64 = *((_QWORD *)a1 + 12);
    v65 = a1[1];
    v88 = *a1;
    v89 = v65;
    v91 = v59;
    v92 = v58;
    v93 = v60;
    v94 = *((_QWORD *)a1 + 8);
    v95 = v61;
    v96 = v62;
    v97 = v63;
    v98 = v64;
    MEMORY[0x1E0C80A78](v55, v56);
    v76 = v66;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v67 = v62;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v68 = v96;
    swift_release();
    swift_release();
    swift_release();

    v69 = (void *)*((_QWORD *)a1 + 10);
    if (v69)
    {
      if ((*((_BYTE *)a1 + 72) & 1) == 0)
      {
        v84 = v105;
        v85 = v106;
        v86 = v69;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(0);
        swift_retain();
        v70 = v69;
        swift_retain();
        swift_retain();
        v71 = v70;
        swift_retain();
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();

        swift_release();
        v72 = v103;
        v73 = v104;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v72, *((uint64_t *)&v72 + 1), v73);
        swift_release();
        swift_release();
LABEL_54:
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_57;
  }
  LODWORD(v81) = v8;
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  if ((*((_BYTE *)a1 + 72) & 1) == 0)
  {
    v26 = *((_QWORD *)&v88 + 1);
    v101 = *((_QWORD *)a1 + 5);
    v102 = v21;
    v103 = v88;
    v104 = 0;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    v27 = v88;
    swift_retain();
    swift_retain_n();
    v28 = swift_retain();
    v29 = MEMORY[0x18D75C5F8](v28) + 200;
    swift_beginAccess();
    v30 = MEMORY[0x18D760234](v29);
    v31 = swift_release();
    if (v30)
    {
      swift_getObjectType();
      v31 = swift_conformsToProtocol2();
      if (v31)
        v33 = v30;
      else
        v33 = 0;
      if (v33)
        goto LABEL_31;
      v31 = swift_unknownObjectRelease();
    }
    v33 = 0;
LABEL_31:
    v76 = v33;
    v78 = &v74;
    v35 = *((_QWORD *)a1 + 5);
    v34 = *((_QWORD *)a1 + 6);
    v36 = *((_QWORD *)a1 + 7);
    v37 = *((_BYTE *)a1 + 72);
    v38 = (void *)*((_QWORD *)a1 + 10);
    v39 = *((_DWORD *)a1 + 22);
    v90 = *((_DWORD *)a1 + 8);
    v40 = *((_QWORD *)a1 + 12);
    v41 = a1[1];
    v88 = *a1;
    v89 = v41;
    v91 = v35;
    v92 = v34;
    v93 = v36;
    v94 = *((_QWORD *)a1 + 8);
    v95 = v37;
    v96 = v38;
    v97 = v39;
    v98 = v40;
    MEMORY[0x1E0C80A78](v31, v32);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(0);
    v80 = v27;
    v81 = v42;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v43 = v38;
    swift_retain();
    v44 = v80;
    StatefulRule.withObservation<A>(do:)();
    v81 = v26;
    swift_release();
    swift_release();
    v45 = v96;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v46 = (void *)*((_QWORD *)a1 + 10);
    *((_QWORD *)a1 + 10) = v87;

    goto LABEL_44;
  }
LABEL_58:
  __break(1u);
}

{
  _OWORD *Value;
  char v3;
  char v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  int v24;
  int v25;
  void *v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned __int8 v30;
  _QWORD *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  __int128 *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  void *v67;
  int v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  void *v75;
  char v76;
  id v77;
  id v78;
  __int128 v79;
  char v80;
  _QWORD v81[8];
  int v82;
  __int128 *v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  void *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _OWORD v117[2];
  void *v118;
  _OWORD v119[9];
  _OWORD v120[4];
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  void *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  char v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  _OWORD v145[2];
  _OWORD v146[9];
  _OWORD v147[2];
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  Value = (_OWORD *)AGGraphGetValue();
  v4 = v3;
  v6 = Value[1];
  v5 = Value[2];
  v146[0] = *Value;
  v146[1] = v6;
  v146[2] = v5;
  v7 = Value[6];
  v9 = Value[3];
  v8 = Value[4];
  v146[5] = Value[5];
  v146[6] = v7;
  v146[3] = v9;
  v146[4] = v8;
  v11 = Value[8];
  v10 = Value[9];
  v12 = *(_OWORD *)((char *)Value + 153);
  v146[7] = Value[7];
  *(_OWORD *)((char *)v147 + 9) = v12;
  v146[8] = v11;
  v147[0] = v10;
  memmove(&v136, Value, 0xA9uLL);
  v13 = (unsigned int *)AGGraphGetValue();
  v95 = v14;
  v15 = *v13;
  v16 = (uint64_t *)AGGraphGetValue();
  v93 = v17;
  v18 = *v16;
  v19 = v16[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E0CFED28]
    || (v20 = AGGraphGetValue(),
        v22 = v21,
        v23 = *(_QWORD *)v20,
        v24 = *(unsigned __int8 *)(v20 + 8),
        v25 = *(_DWORD *)(v20 + 12),
        swift_retain(),
        v23 == 1))
  {
    LODWORD(v89) = 0;
    v86 = 0;
    v24 = 0;
    v23 = 0;
  }
  else
  {
    v86 = v25;
    LODWORD(v89) = v22 & 1;
  }
  if (v15 >> 1 == *((_DWORD *)a1 + 22))
  {
    outlined retain of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v146);
    swift_retain();
    swift_retain();
  }
  else
  {
    v108 = *(__int128 *)((char *)a1 + 56);
    outlined retain of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v146);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if ((*((_BYTE *)a1 + 72) & 1) == 0)
    {
      v26 = (void *)*((_QWORD *)a1 + 10);
      if (v26)
      {

        *((_BYTE *)a1 + 72) = 1;
        *((_QWORD *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v15 >> 1;
  }
  v108 = *(__int128 *)((char *)a1 + 56);
  LODWORD(v96) = v15;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v27 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(0);
    v27 = 1;
    if (AGGraphGetOutputValue() && (v4 & 1) == 0 && (v95 & 1) == 0)
      v27 = AGGraphCurrentAttributeWasModified();
  }
  v85 = v24;
  AGGraphClearUpdate();
  if (*((_BYTE *)a1 + 72) == 1)
    *((_BYTE *)a1 + 72) = 0;
  v28 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  v130 = v18;
  v131 = v19;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v29 = (_QWORD *)*((_QWORD *)a1 + 10);
  v94 = v28;
  v90 = v23;
  v92 = v19;
  LODWORD(v91) = v15;
  if (v29)
  {
    LODWORD(v88) = v27;
    v30 = v93;
    if ((v93 & 1) != 0)
    {
      swift_retain();
      v31 = v29;
      swift_retain();
      v32 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v32 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        LODWORD(v88) = 1;
      }
    }
    else
    {
      v40 = v29;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v108 = 0;
      WORD4(v108) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v131)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      v30 = v93;
    }
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v93 = (id)*((_QWORD *)&v108 + 1);
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    if (((v95 | v30) & 1) != 0)
    {
      v41 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v41, 0, v91);
      swift_release();
    }
    v95 = v108;
    if ((_DWORD)v89)
    {
      v42 = (char *)v29 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v29) + 0x90);
      *(_QWORD *)v42 = v23;
      v42[8] = v85;
      *((_DWORD *)v42 + 3) = v86;
      swift_retain();
      swift_release();
      objc_msgSend(v29, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    if ((*((_BYTE *)a1 + 72) & 1) != 0)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }

    v132 = *((_QWORD *)a1 + 5);
    v133 = v94;
    *(_QWORD *)&v134 = v95;
    *((_QWORD *)&v134 + 1) = v93;
    v135 = 0;
    if (!(_DWORD)v88)
    {
      swift_retain();
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v95, (uint64_t)v93, 0);
      swift_release();
      swift_release();
      v115 = v143;
      v116 = v144;
      v117[0] = v145[0];
      *(_OWORD *)((char *)v117 + 9) = *(_OWORD *)((char *)v145 + 9);
      v112 = v140;
      v113 = v141;
      v114 = v142;
      v108 = v136;
      v109 = v137;
      v110 = v138;
      v111 = v139;
      v43 = &v108;
LABEL_54:
      outlined release of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v43);
      return;
    }
    v87 = v18;
    swift_retain();
    swift_retain();
    v91 = 0;
LABEL_45:
    type metadata accessor for ViewGraph();
    v58 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v59 = MEMORY[0x18D760234](v58);
    v60 = swift_release();
    if (v59)
    {
      swift_getObjectType();
      v60 = swift_conformsToProtocol2();
      if (v60)
        v62 = v59;
      else
        v62 = 0;
      if (!v62)
        v60 = swift_unknownObjectRelease();
    }
    v89 = v81;
    v64 = *((_QWORD *)a1 + 5);
    v63 = *((_QWORD *)a1 + 6);
    v65 = *((_QWORD *)a1 + 7);
    v66 = *((_BYTE *)a1 + 72);
    v67 = (void *)*((_QWORD *)a1 + 10);
    v68 = *((_DWORD *)a1 + 22);
    v121 = *((_DWORD *)a1 + 8);
    v69 = *((_QWORD *)a1 + 12);
    v70 = a1[1];
    v120[2] = *a1;
    v120[3] = v70;
    v122 = v64;
    v123 = v63;
    v124 = v65;
    v125 = *((_QWORD *)a1 + 8);
    v126 = v66;
    v127 = v67;
    v128 = v68;
    v129 = v69;
    MEMORY[0x1E0C80A78](v60, v61);
    v88 = v71;
    v81[-6] = v71;
    v81[-5] = v72;
    v81[-4] = a1;
    v81[-3] = &v132;
    v81[-2] = &v136;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v73 = v67;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v74 = v127;
    swift_release();
    swift_release();
    swift_release();

    v75 = (void *)*((_QWORD *)a1 + 10);
    if (v75)
    {
      v76 = *((_BYTE *)a1 + 72);
      v119[7] = v143;
      v119[8] = v144;
      v120[0] = v145[0];
      *(_OWORD *)((char *)v120 + 9) = *(_OWORD *)((char *)v145 + 9);
      v119[4] = v140;
      v119[5] = v141;
      v119[6] = v142;
      v119[0] = v136;
      v119[1] = v137;
      v119[2] = v138;
      v119[3] = v139;
      if ((v76 & 1) == 0)
      {
        v116 = v144;
        v117[0] = v145[0];
        *(_OWORD *)((char *)v117 + 9) = *(_OWORD *)((char *)v145 + 9);
        v112 = v140;
        v113 = v141;
        v114 = v142;
        v115 = v143;
        v108 = v136;
        v109 = v137;
        v110 = v138;
        v111 = v139;
        v118 = v75;
        v104 = v144;
        v105 = v117[0];
        v106 = v117[1];
        v107 = v75;
        v100 = v140;
        v101 = v141;
        v102 = v142;
        v103 = v143;
        v96 = v136;
        v97 = v137;
        v98 = v138;
        v99 = v139;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(0);
        v77 = v75;
        swift_retain();
        swift_retain();
        v78 = v77;
        swift_retain();
        outlined retain of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v119);
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined release of ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)&v108);
        v79 = v134;
        v80 = v135;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v79, *((uint64_t *)&v79 + 1), v80);
        swift_release();
        swift_release();
        v43 = v119;
        goto LABEL_54;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_57;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  if ((*((_BYTE *)a1 + 72) & 1) == 0)
  {
    v132 = *((_QWORD *)a1 + 5);
    v133 = v28;
    v134 = v108;
    v135 = 0;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    v95 = v108;
    swift_retain_n();
    v33 = swift_retain();
    v34 = MEMORY[0x18D75C5F8](v33) + 200;
    swift_beginAccess();
    v35 = MEMORY[0x18D760234](v34);
    v36 = swift_release();
    v87 = v18;
    if (v35)
    {
      swift_getObjectType();
      v36 = swift_conformsToProtocol2();
      if (v36)
        v38 = v35;
      else
        v38 = 0;
      v39 = (void *)*((_QWORD *)&v108 + 1);
      if (!v38)
      {
        v36 = swift_unknownObjectRelease();
        v38 = 0;
      }
    }
    else
    {
      v39 = (void *)*((_QWORD *)&v108 + 1);
      v38 = 0;
    }
    v88 = v38;
    v89 = &v84;
    v44 = *((_DWORD *)a1 + 8);
    v46 = *((_QWORD *)a1 + 5);
    v45 = *((_QWORD *)a1 + 6);
    v47 = *((_QWORD *)a1 + 7);
    v48 = *((_BYTE *)a1 + 72);
    v93 = (id)*((_QWORD *)a1 + 10);
    v49 = *((_DWORD *)a1 + 22);
    LODWORD(v110) = v44;
    v50 = *((_QWORD *)a1 + 12);
    v51 = a1[1];
    v108 = *a1;
    v109 = v51;
    *((_QWORD *)&v110 + 1) = v46;
    *(_QWORD *)&v111 = v45;
    *((_QWORD *)&v111 + 1) = v47;
    *(_QWORD *)&v112 = *((_QWORD *)a1 + 8);
    BYTE8(v112) = v48;
    *(_QWORD *)&v113 = v93;
    DWORD2(v113) = v49;
    *(_QWORD *)&v114 = v50;
    MEMORY[0x1E0C80A78](v36, v37);
    v81[2] = &v132;
    v81[3] = &v136;
    v81[4] = v53;
    v81[5] = v52;
    v81[6] = v95;
    v81[7] = v39;
    v82 = v91;
    v83 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(0);
    v91 = v54;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v55 = v93;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v91 = 0;
    v93 = v39;
    swift_release();
    swift_release();
    v56 = (void *)v113;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v57 = (void *)*((_QWORD *)a1 + 10);
    *((_QWORD *)a1 + 10) = v96;

    goto LABEL_45;
  }
LABEL_58:
  __break(1u);
}

{
  uint64_t Value;
  char v3;
  char v4;
  char v5;
  unsigned int *v6;
  void *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  int v17;
  void *v18;
  void *v19;
  int v20;
  char v21;
  uint64_t v22;
  objc_class *v23;
  char *v24;
  char *v25;
  id v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  char v31;
  void *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void *v45;
  id v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  int v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  id v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  id v84;
  id v85;
  id v86;
  id v87;
  __int128 v88;
  void *v89;
  _QWORD v90[8];
  int v91;
  __int128 *v92;
  id v93;
  uint64_t v94;
  id *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  objc_super v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char v107;
  void *v108;
  void *v109;
  __int128 v110;
  __int128 v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  void *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  char v126;
  id v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  Value = AGGraphGetValue();
  v4 = v3;
  v5 = *(_BYTE *)(Value + 8);
  v104 = *(_QWORD *)Value;
  v105 = v5;
  v6 = (unsigned int *)AGGraphGetValue();
  v100 = v7;
  v8 = *v6;
  v9 = (uint64_t *)AGGraphGetValue();
  v102 = v10;
  v12 = *v9;
  v11 = v9[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E0CFED28]
    || (v13 = AGGraphGetValue(),
        v15 = v14,
        v16 = *(_QWORD *)v13,
        LODWORD(v94) = *(unsigned __int8 *)(v13 + 8),
        v17 = *(_DWORD *)(v13 + 12),
        swift_retain(),
        v16 == 1))
  {
    LODWORD(v95) = 0;
    LODWORD(v93) = 0;
    LODWORD(v94) = 0;
    v16 = 0;
  }
  else
  {
    LODWORD(v93) = v17;
    LODWORD(v95) = v15 & 1;
  }
  if (v8 >> 1 == *((_DWORD *)a1 + 22))
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v110 = *(__int128 *)((char *)a1 + 56);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    v18 = (void *)*((_QWORD *)a1 + 9);
    if (v18)
    {
      v19 = (void *)*((_QWORD *)a1 + 10);
      if (v19)
      {

        *((_QWORD *)a1 + 9) = 0;
        *((_QWORD *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v8 >> 1;
  }
  v110 = *(__int128 *)((char *)a1 + 56);
  LODWORD(v123) = v8;
  LODWORD(v97) = v8;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v20 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(0);
    v20 = 1;
    if (AGGraphGetOutputValue() && (v4 & 1) == 0 && (v100 & 1) == 0)
      v20 = AGGraphCurrentAttributeWasModified();
  }
  AGGraphClearUpdate();
  if (!*((_QWORD *)a1 + 9))
  {
    v21 = v105;
    v22 = v11;
    v23 = (objc_class *)type metadata accessor for UIKitSegmentedControlAdaptor.UIKitSegmentedControlCoordinator();
    v24 = (char *)objc_allocWithZone(v23);
    v25 = &v24[OBJC_IVAR____TtCV7SwiftUIP33_62A8DBD3A37E684D521D6BC97A6F345A28UIKitSegmentedControlAdaptor32UIKitSegmentedControlCoordinator_representable];
    *(_QWORD *)v25 = v104;
    v25[8] = v21;
    v103.receiver = v24;
    v103.super_class = v23;
    swift_bridgeObjectRetain();
    v11 = v22;
    v26 = objc_msgSendSuper2(&v103, sel_init);
    v27 = (void *)*((_QWORD *)a1 + 9);
    *((_QWORD *)a1 + 9) = v26;

  }
  v28 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  v121 = v12;
  v122 = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v29 = (_QWORD *)*((_QWORD *)a1 + 10);
  v98 = v11;
  v99 = v12;
  v101 = v28;
  v96 = v16;
  if (v29)
  {
    if ((v102 & 1) != 0)
    {
      swift_retain();
      v30 = v29;
      swift_retain();
      v31 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v31 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        v20 = 1;
      }
    }
    else
    {
      v40 = v29;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v110 = 0;
      WORD4(v110) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v122)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    v41 = v100 | v102;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v100 = (id)*((_QWORD *)&v110 + 1);
    v42 = v110;
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    v102 = v42;
    if ((v41 & 1) != 0)
    {
      v43 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v43, 0, v97);
      swift_release();
    }
    if ((_DWORD)v95)
    {
      v44 = (char *)v29 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v29) + 0x90);
      *(_QWORD *)v44 = v16;
      v44[8] = v94;
      *((_DWORD *)v44 + 3) = (_DWORD)v93;
      swift_retain();
      swift_release();
      objc_msgSend(v29, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    v45 = (void *)*((_QWORD *)a1 + 9);
    if (!v45)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    v46 = v45;

    v123 = *((_QWORD *)a1 + 5);
    v124 = v101;
    *(_QWORD *)&v125 = v102;
    *((_QWORD *)&v125 + 1) = v100;
    v126 = 0;
    v127 = v46;
    swift_retain();
    if (!v20)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v102, (uint64_t)v100, 0);

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    swift_retain();
    v97 = 0;
LABEL_46:
    type metadata accessor for ViewGraph();
    v63 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v64 = MEMORY[0x18D760234](v63);
    v65 = swift_release();
    if (v64)
    {
      swift_getObjectType();
      v65 = swift_conformsToProtocol2();
      if (v65)
        v67 = v64;
      else
        v67 = 0;
      if (!v67)
        v65 = swift_unknownObjectRelease();
    }
    v95 = (id *)v90;
    v69 = *((_QWORD *)a1 + 5);
    v68 = *((_QWORD *)a1 + 6);
    v70 = *((_QWORD *)a1 + 7);
    v72 = (void *)*((_QWORD *)a1 + 9);
    v71 = (void *)*((_QWORD *)a1 + 10);
    v73 = *((_DWORD *)a1 + 22);
    v112 = *((_DWORD *)a1 + 8);
    v74 = *((_QWORD *)a1 + 12);
    v75 = a1[1];
    v110 = *a1;
    v111 = v75;
    v113 = v69;
    v114 = v68;
    v115 = v70;
    v116 = *((_QWORD *)a1 + 8);
    v117 = v72;
    v118 = v71;
    v119 = v73;
    v120 = v74;
    MEMORY[0x1E0C80A78](v65, v66);
    v94 = v76;
    v90[-6] = v76;
    v90[-5] = v77;
    v90[-4] = a1;
    v90[-3] = &v123;
    v90[-2] = &v104;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v78 = v72;
    v79 = v71;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v80 = v117;
    v81 = v118;
    swift_release();
    swift_release();
    swift_release();

    v82 = (void *)*((_QWORD *)a1 + 10);
    if (v82)
    {
      v83 = (void *)*((_QWORD *)a1 + 9);
      if (v83)
      {
        v106 = v104;
        v107 = v105;
        v108 = v82;
        v109 = v83;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(0);
        v84 = v82;
        swift_retain();
        swift_retain();
        v85 = v83;
        v86 = v84;
        swift_retain();
        swift_bridgeObjectRetain();
        v87 = v85;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        v88 = v125;
        LOBYTE(v86) = v126;
        v89 = v127;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v88, *((uint64_t *)&v88 + 1), (char)v86);

        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_57;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v32 = (void *)*((_QWORD *)a1 + 9);
  if (v32)
  {
    v33 = v110;
    v123 = *((_QWORD *)a1 + 5);
    v124 = v28;
    v125 = v110;
    v126 = 0;
    v127 = v32;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    v102 = v33;
    swift_retain_n();
    swift_retain();
    v34 = MEMORY[0x18D75C5F8](v32) + 200;
    swift_beginAccess();
    v35 = MEMORY[0x18D760234](v34);
    v36 = swift_release();
    if (v35)
    {
      swift_getObjectType();
      v36 = swift_conformsToProtocol2();
      v38 = (void *)*((_QWORD *)&v33 + 1);
      if (v36)
        v39 = v35;
      else
        v39 = 0;
      if (v39)
        goto LABEL_45;
      v36 = swift_unknownObjectRelease();
    }
    else
    {
      v38 = (void *)*((_QWORD *)&v33 + 1);
    }
    v39 = 0;
LABEL_45:
    v94 = v39;
    v95 = &v93;
    v47 = *((_DWORD *)a1 + 8);
    v49 = *((_QWORD *)a1 + 5);
    v48 = *((_QWORD *)a1 + 6);
    v50 = *((_QWORD *)a1 + 7);
    v51 = (void *)*((_QWORD *)a1 + 10);
    v93 = (id)*((_QWORD *)a1 + 9);
    v100 = v51;
    v52 = *((_DWORD *)a1 + 22);
    v112 = v47;
    v53 = *((_QWORD *)a1 + 12);
    v54 = a1[1];
    v110 = *a1;
    v111 = v54;
    v113 = v49;
    v114 = v48;
    v115 = v50;
    v116 = *((_QWORD *)a1 + 8);
    v117 = v93;
    v118 = v51;
    v119 = v52;
    v120 = v53;
    MEMORY[0x1E0C80A78](v36, v37);
    v90[2] = &v123;
    v90[3] = &v104;
    v90[4] = v56;
    v90[5] = v55;
    v90[6] = v102;
    v90[7] = v38;
    v91 = v97;
    v92 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(0);
    v97 = v57;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v58 = v93;
    v59 = v100;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v97 = 0;
    v100 = v38;
    swift_release();
    swift_release();
    v60 = v117;
    v61 = v118;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v62 = (void *)*((_QWORD *)a1 + 10);
    *((_QWORD *)a1 + 10) = v106;

    goto LABEL_46;
  }
LABEL_58:
  __break(1u);
}

{
  id *Value;
  char v3;
  char v4;
  id v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  int v17;
  int v18;
  id v19;
  id v20;
  void *v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void *v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  void *v63;
  int v64;
  uint64_t v65;
  __int128 v66;
  uint64_t *v67;
  uint64_t v68;
  id v69;
  void *v70;
  void *v71;
  id v72;
  id v73;
  id v74;
  id v75;
  __int128 v76;
  _QWORD v77[8];
  unsigned int v78;
  __int128 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  void *v90;
  id v91[4];
  __int128 v92;
  __int128 v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  void *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  char v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  Value = (id *)AGGraphGetValue();
  v4 = v3;
  v5 = *Value;
  v91[0] = *Value;
  v6 = (unsigned int *)AGGraphGetValue();
  v88 = v7;
  v8 = *v6;
  v9 = (uint64_t *)AGGraphGetValue();
  v85 = v10;
  v11 = *v9;
  v12 = v9[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E0CFED28]
    || (v13 = AGGraphGetValue(),
        v15 = v14,
        v16 = *(_QWORD *)v13,
        v17 = *(unsigned __int8 *)(v13 + 8),
        v18 = *(_DWORD *)(v13 + 12),
        swift_retain(),
        v16 == 1))
  {
    LODWORD(v82) = 0;
    LODWORD(v81) = 0;
    v17 = 0;
    v16 = 0;
  }
  else
  {
    LODWORD(v81) = v18;
    LODWORD(v82) = v15 & 1;
  }
  if (v8 >> 1 == *((_DWORD *)a1 + 22))
  {
    swift_retain();
    v19 = v5;
    swift_retain();
  }
  else
  {
    v92 = *(__int128 *)((char *)a1 + 56);
    swift_retain();
    v20 = v5;
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if ((*((_BYTE *)a1 + 72) & 1) == 0)
    {
      v21 = (void *)*((_QWORD *)a1 + 10);
      if (v21)
      {

        *((_BYTE *)a1 + 72) = 1;
        *((_QWORD *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v8 >> 1;
  }
  HIDWORD(v80) = v17;
  v92 = *(__int128 *)((char *)a1 + 56);
  LODWORD(v105) = v8;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v22 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(0);
    v22 = 1;
    if (AGGraphGetOutputValue() && (v4 & 1) == 0 && (v88 & 1) == 0)
      v22 = AGGraphCurrentAttributeWasModified();
  }
  AGGraphClearUpdate();
  if (*((_BYTE *)a1 + 72) == 1)
    *((_BYTE *)a1 + 72) = 0;
  v23 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  v103 = v11;
  v104 = v12;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v24 = (_QWORD *)*((_QWORD *)a1 + 10);
  v84 = v11;
  v87 = v12;
  v86 = v23;
  v83 = v16;
  if (v24)
  {
    v25 = v85;
    if ((v85 & 1) != 0)
    {
      swift_retain();
      v26 = v24;
      swift_retain();
      v27 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v27 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        v22 = 1;
      }
    }
    else
    {
      v36 = v24;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v92 = 0;
      WORD4(v92) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v104)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      v25 = v85;
    }
    v37 = v88 | v25;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v85 = *((_QWORD *)&v92 + 1);
    swift_retain();
    v88 = v92;
    swift_retain();
    AGGraphClearUpdate();
    if ((v37 & 1) != 0)
    {
      v38 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v38, 0, v8, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1E1B20240, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
      swift_release();
    }
    if ((_DWORD)v82)
    {
      v39 = (char *)v24 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v24) + 0x90);
      *(_QWORD *)v39 = v16;
      v39[8] = BYTE4(v80);
      *((_DWORD *)v39 + 3) = v81;
      swift_retain();
      swift_release();
      specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(0);
    }
    AGGraphSetUpdate();
    if ((*((_BYTE *)a1 + 72) & 1) != 0)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }

    v105 = *((_QWORD *)a1 + 5);
    v106 = v86;
    *(_QWORD *)&v107 = v88;
    *((_QWORD *)&v107 + 1) = v85;
    v108 = 0;
    swift_retain();
    if (!v22)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v88, v85, 0);
      swift_release();
      swift_release();

      return;
    }
    swift_retain();
LABEL_46:
    type metadata accessor for ViewGraph();
    v54 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v55 = MEMORY[0x18D760234](v54);
    v56 = swift_release();
    if (v55)
    {
      swift_getObjectType();
      v56 = swift_conformsToProtocol2();
      if (v56)
        v58 = v55;
      else
        v58 = 0;
      if (!v58)
        v56 = swift_unknownObjectRelease();
    }
    v59 = *((_QWORD *)a1 + 5);
    v60 = *((_QWORD *)a1 + 6);
    v61 = *((_QWORD *)a1 + 7);
    v62 = *((_BYTE *)a1 + 72);
    v63 = (void *)*((_QWORD *)a1 + 10);
    v64 = *((_DWORD *)a1 + 22);
    v94 = *((_DWORD *)a1 + 8);
    v65 = *((_QWORD *)a1 + 12);
    v66 = a1[1];
    v92 = *a1;
    v93 = v66;
    v95 = v59;
    v96 = v60;
    v97 = v61;
    v98 = *((_QWORD *)a1 + 8);
    v99 = v62;
    v100 = v63;
    v101 = v64;
    v102 = v65;
    MEMORY[0x1E0C80A78](v56, v57);
    v82 = v67;
    v77[-6] = v67;
    v77[-5] = v68;
    v77[-4] = a1;
    v77[-3] = &v105;
    v77[-2] = v91;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v69 = v63;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v70 = v100;
    swift_release();
    swift_release();
    swift_release();

    v71 = (void *)*((_QWORD *)a1 + 10);
    if (v71)
    {
      if ((*((_BYTE *)a1 + 72) & 1) == 0)
      {
        v72 = v91[0];
        v89 = v91[0];
        v90 = v71;
        type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(0);
        v73 = v71;
        swift_retain();
        swift_retain();
        v74 = v73;
        swift_retain();
        v75 = v72;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();

        v76 = v107;
        LOBYTE(v74) = v108;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v76, *((uint64_t *)&v76 + 1), (char)v74);

        swift_release();
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_57;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  if ((*((_BYTE *)a1 + 72) & 1) == 0)
  {
    v105 = *((_QWORD *)a1 + 5);
    v106 = v23;
    v107 = v92;
    v108 = 0;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    v88 = v92;
    swift_retain_n();
    v28 = swift_retain();
    v29 = MEMORY[0x18D75C5F8](v28) + 200;
    swift_beginAccess();
    v30 = MEMORY[0x18D760234](v29);
    v31 = swift_release();
    if (v30)
    {
      swift_getObjectType();
      v31 = swift_conformsToProtocol2();
      v33 = v8;
      v34 = *((_QWORD *)&v92 + 1);
      if (v31)
        v35 = v30;
      else
        v35 = 0;
      if (v35)
        goto LABEL_45;
      v31 = swift_unknownObjectRelease();
    }
    else
    {
      v33 = v8;
      v34 = *((_QWORD *)&v92 + 1);
    }
    v35 = 0;
LABEL_45:
    v81 = v35;
    v82 = &v80;
    v41 = *((_QWORD *)a1 + 5);
    v40 = *((_QWORD *)a1 + 6);
    v42 = *((_QWORD *)a1 + 7);
    v43 = *((_BYTE *)a1 + 72);
    v44 = (void *)*((_QWORD *)a1 + 10);
    v45 = *((_DWORD *)a1 + 22);
    v94 = *((_DWORD *)a1 + 8);
    v46 = *((_QWORD *)a1 + 12);
    v47 = a1[1];
    v92 = *a1;
    v93 = v47;
    v95 = v41;
    v96 = v40;
    v97 = v42;
    v98 = *((_QWORD *)a1 + 8);
    v99 = v43;
    v100 = v44;
    v101 = v45;
    v102 = v46;
    MEMORY[0x1E0C80A78](v31, v32);
    v77[2] = &v105;
    v77[3] = v91;
    v77[4] = v49;
    v77[5] = v48;
    v77[6] = v88;
    v77[7] = v34;
    v78 = v33;
    v79 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(0);
    v85 = v50;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v51 = v44;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v85 = v34;
    swift_release();
    swift_release();
    v52 = v100;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v53 = (void *)*((_QWORD *)a1 + 10);
    *((id *)a1 + 10) = v91[1];

    goto LABEL_46;
  }
LABEL_58:
  __break(1u);
}

{
  uint64_t Value;
  char v3;
  char v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  int v16;
  int v17;
  void *v18;
  int v19;
  uint64_t OutputValue;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  void *v61;
  int v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  void *v69;
  char v70;
  id v71;
  id v72;
  __int128 v73;
  char v74;
  _QWORD v75[8];
  int v76;
  __int128 *v77;
  uint64_t v78;
  int v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[24];
  _OWORD v90[2];
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  id v97;
  int v98;
  uint64_t v99;
  void *v100;
  __int128 v101;
  __int128 v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  void *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  char v117;
  _QWORD v118[27];

  v118[24] = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  Value = AGGraphGetValue();
  v4 = v3;
  outlined init with copy of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>(Value, (uint64_t)v118);
  v5 = (unsigned int *)AGGraphGetValue();
  v85 = v6;
  v7 = *v5;
  v8 = (uint64_t *)AGGraphGetValue();
  v86 = v9;
  v10 = *v8;
  v11 = v8[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E0CFED28]
    || (v12 = AGGraphGetValue(),
        v14 = v13,
        v15 = *(_QWORD *)v12,
        v16 = *(unsigned __int8 *)(v12 + 8),
        v17 = *(_DWORD *)(v12 + 12),
        swift_retain(),
        v15 == 1))
  {
    LODWORD(v81) = 0;
    v17 = 0;
    LODWORD(v80) = 0;
    v15 = 0;
  }
  else
  {
    LODWORD(v80) = v16;
    LODWORD(v81) = v14 & 1;
  }
  if (v7 >> 1 == *((_DWORD *)a1 + 22))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    v90[0] = *(__int128 *)((char *)a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if ((*((_BYTE *)a1 + 72) & 1) == 0)
    {
      v18 = (void *)*((_QWORD *)a1 + 10);
      if (v18)
      {

        *((_BYTE *)a1 + 72) = 1;
        *((_QWORD *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v7 >> 1;
  }
  v90[0] = *(__int128 *)((char *)a1 + 56);
  LODWORD(v89[0]) = v7;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v19 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(0);
    OutputValue = AGGraphGetOutputValue();
    v19 = 1;
    if (OutputValue && (v4 & 1) == 0 && (v85 & 1) == 0)
      v19 = AGGraphCurrentAttributeWasModified();
  }
  LODWORD(v83) = v19;
  AGGraphClearUpdate();
  if (*((_BYTE *)a1 + 72) == 1)
    *((_BYTE *)a1 + 72) = 0;
  v21 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  v112 = v10;
  v113 = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v22 = (_QWORD *)*((_QWORD *)a1 + 10);
  v87 = v11;
  v88 = v15;
  v84 = v10;
  LODWORD(v82) = v7;
  if (v22)
  {
    if ((v86 & 1) != 0)
    {
      swift_retain();
      v23 = v22;
      swift_retain();
      v24 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v24 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        LODWORD(v83) = 1;
      }
    }
    else
    {
      v32 = v22;
    }
    v79 = v17;
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v90[0] = 0;
      WORD4(v90[0]) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v113)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v33 = *((_QWORD *)&v90[0] + 1);
    swift_retain();
    v34 = *(_QWORD *)&v90[0];
    swift_retain();
    AGGraphClearUpdate();
    if (((v85 | v86) & 1) != 0)
    {
      v35 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v35, 0, v82, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1E1B203F8, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
      swift_release();
    }
    if ((_DWORD)v81)
    {
      v36 = (char *)v22 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v22) + 0x90);
      *(_QWORD *)v36 = v88;
      v36[8] = (char)v80;
      *((_DWORD *)v36 + 3) = v79;
      swift_retain();
      swift_release();
      specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(0);
    }
    AGGraphSetUpdate();
    if ((*((_BYTE *)a1 + 72) & 1) != 0)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    v25 = v34;

    v114 = *((_QWORD *)a1 + 5);
    v115 = v21;
    *(_QWORD *)&v116 = v34;
    *((_QWORD *)&v116 + 1) = v33;
    v117 = 0;
    swift_retain();
    if (!(_DWORD)v83)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v33, 0);
LABEL_54:
      swift_release();
      swift_release();
      outlined destroy of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>((uint64_t)v118);
      return;
    }
    v85 = v33;
    v86 = v21;
    swift_retain();
LABEL_45:
    type metadata accessor for ViewGraph();
    v51 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v52 = MEMORY[0x18D760234](v51);
    v53 = swift_release();
    v82 = v25;
    if (v52)
    {
      swift_getObjectType();
      v53 = swift_conformsToProtocol2();
      if (v53)
        v55 = v52;
      else
        v55 = 0;
      if (!v55)
        v53 = swift_unknownObjectRelease();
    }
    v83 = v75;
    v56 = *((_DWORD *)a1 + 8);
    v58 = *((_QWORD *)a1 + 5);
    v57 = *((_QWORD *)a1 + 6);
    v59 = *((_QWORD *)a1 + 7);
    v60 = *((_BYTE *)a1 + 72);
    v61 = (void *)*((_QWORD *)a1 + 10);
    v62 = *((_DWORD *)a1 + 22);
    v63 = a1[1];
    v101 = *a1;
    v102 = v63;
    v64 = *((_QWORD *)a1 + 12);
    v103 = v56;
    v104 = v58;
    v105 = v57;
    v106 = v59;
    v107 = *((_QWORD *)a1 + 8);
    v108 = v60;
    v109 = v61;
    v110 = v62;
    v111 = v64;
    MEMORY[0x1E0C80A78](v53, v54);
    v81 = v65;
    v75[-6] = v65;
    v75[-5] = v66;
    v75[-4] = a1;
    v75[-3] = &v114;
    v75[-2] = v118;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v67 = v61;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v68 = v109;
    swift_release();
    swift_release();
    swift_release();

    v69 = (void *)*((_QWORD *)a1 + 10);
    if (v69)
    {
      v70 = *((_BYTE *)a1 + 72);
      outlined init with copy of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>((uint64_t)v118, (uint64_t)v89);
      if ((v70 & 1) == 0)
      {
        outlined init with take of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>((uint64_t)v89, (uint64_t)v90);
        v100 = v69;
        type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(0);
        v71 = v69;
        swift_retain();
        swift_retain();
        v72 = v71;
        swift_retain();
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v90, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
        v73 = v116;
        v74 = v117;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v73, *((uint64_t *)&v73 + 1), v74);
        goto LABEL_54;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_57;
  }
  v86 = v21;
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  if ((*((_BYTE *)a1 + 72) & 1) == 0)
  {
    v114 = *((_QWORD *)a1 + 5);
    v115 = v86;
    v116 = v90[0];
    v117 = 0;
    type metadata accessor for ViewGraph();
    v85 = *((_QWORD *)&v90[0] + 1);
    swift_retain_n();
    swift_retain();
    v25 = *(_QWORD *)&v90[0];
    swift_retain_n();
    v26 = swift_retain();
    v27 = MEMORY[0x18D75C5F8](v26) + 200;
    swift_beginAccess();
    v28 = MEMORY[0x18D760234](v27);
    v29 = swift_release();
    if (v28)
    {
      swift_getObjectType();
      v29 = swift_conformsToProtocol2();
      if (v29)
        v31 = v28;
      else
        v31 = 0;
      if (!v31)
      {
        v29 = swift_unknownObjectRelease();
        v31 = 0;
      }
    }
    else
    {
      v31 = 0;
    }
    v83 = &v78;
    v37 = *((_DWORD *)a1 + 8);
    v39 = *((_QWORD *)a1 + 5);
    v38 = *((_QWORD *)a1 + 6);
    v40 = *((_QWORD *)a1 + 7);
    v41 = *((_BYTE *)a1 + 72);
    v80 = (id)*((_QWORD *)a1 + 10);
    v81 = v31;
    v42 = *((_DWORD *)a1 + 22);
    v91 = v37;
    v43 = *((_QWORD *)a1 + 12);
    v44 = a1[1];
    v90[0] = *a1;
    v90[1] = v44;
    v92 = v39;
    v93 = v38;
    v94 = v40;
    v95 = *((_QWORD *)a1 + 8);
    v96 = v41;
    v97 = v80;
    v98 = v42;
    v99 = v43;
    MEMORY[0x1E0C80A78](v29, v30);
    v75[2] = &v114;
    v75[3] = v118;
    v75[4] = v46;
    v75[5] = v45;
    v75[6] = v25;
    v75[7] = v85;
    v76 = v82;
    v77 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(0);
    v82 = v47;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v48 = v80;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    swift_release();
    swift_release();
    v49 = v97;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v50 = (void *)*((_QWORD *)a1 + 10);
    *((_QWORD *)a1 + 10) = v89[0];

    goto LABEL_45;
  }
LABEL_58:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t Value;
  char v14;
  char v15;
  unsigned int *v16;
  _BYTE *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  int v27;
  void *v28;
  char v29;
  int v30;
  uint64_t OutputValue;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  void *v47;
  int v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  void *v56;
  _QWORD *v57;
  char v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  void *v71;
  int v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  void *v79;
  void *v80;
  char v81;
  _BYTE *v82;
  uint64_t v83;
  _BYTE *v84;
  id v85;
  id v86;
  __int128 v87;
  char v88;
  _BYTE v89[4];
  unsigned int v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  void *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  char v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v96 = &v89[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, type metadata accessor for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v6, v7);
  v97 = &v89[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v89[-v11];
  Value = AGGraphGetValue();
  v15 = v14;
  outlined init with copy of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>(Value, (uint64_t)v12);
  v16 = (unsigned int *)AGGraphGetValue();
  v102 = v17;
  v18 = *v16;
  v19 = (uint64_t *)AGGraphGetValue();
  v103 = v20;
  v21 = *v19;
  v22 = v19[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E0CFED28]
    || (v23 = AGGraphGetValue(),
        v25 = v24,
        v26 = *(_QWORD *)v23,
        v92 = *(unsigned __int8 *)(v23 + 8),
        v27 = *(_DWORD *)(v23 + 12),
        swift_retain(),
        v26 == 1))
  {
    LODWORD(v93) = 0;
    v27 = 0;
    v92 = 0;
    v26 = 0;
  }
  else
  {
    LODWORD(v93) = v25 & 1;
  }
  v91 = v27;
  if (v18 >> 1 == *((_DWORD *)a1 + 22))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    v106 = *(__int128 *)((char *)a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if ((*((_BYTE *)a1 + 72) & 1) == 0)
    {
      v28 = (void *)*((_QWORD *)a1 + 10);
      if (v28)
      {

        *((_BYTE *)a1 + 72) = 1;
        *((_QWORD *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v18 >> 1;
  }
  v106 = *(__int128 *)((char *)a1 + 56);
  LODWORD(v119) = v18;
  v29 = _DynamicPropertyBuffer.update(container:phase:)();
  v95 = v3;
  if ((v29 & 1) != 0)
  {
    v30 = 1;
  }
  else
  {
    OutputValue = AGGraphGetOutputValue();
    v30 = 1;
    if (OutputValue && (v15 & 1) == 0 && (v102 & 1) == 0)
      v30 = AGGraphCurrentAttributeWasModified();
  }
  LODWORD(v99) = v30;
  AGGraphClearUpdate();
  if (*((_BYTE *)a1 + 72) == 1)
    *((_BYTE *)a1 + 72) = 0;
  v32 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  v117 = v21;
  v118 = v22;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v33 = (_QWORD *)*((_QWORD *)a1 + 10);
  v104 = v12;
  v98 = v26;
  v101 = v21;
  v100 = v22;
  v94 = v32;
  if (v33)
  {
    if ((v103 & 1) != 0)
    {
      swift_retain();
      v34 = v33;
      swift_retain();
      v35 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v35 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        LODWORD(v99) = 1;
      }
    }
    else
    {
      v57 = v33;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v106 = 0;
      WORD4(v106) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v118)
      {
        v90 = v18;
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        v18 = v90;
        swift_release();
      }
      swift_release();
    }
    v58 = v102 | v103;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v59 = v106;
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    if ((v58 & 1) != 0)
    {
      v60 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v60, 0, v18, (uint64_t)partial apply for closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:), (uint64_t)&unk_1E1B1FE58, (uint64_t)partial apply for closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:), (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
      swift_release();
    }
    if ((_DWORD)v93)
    {
      v61 = (char *)v33 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v33) + 0x90);
      *(_QWORD *)v61 = v26;
      v61[8] = v92;
      *((_DWORD *)v61 + 3) = v91;
      swift_retain();
      swift_release();
      specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(0);
    }
    AGGraphSetUpdate();
    if ((*((_BYTE *)a1 + 72) & 1) != 0)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }

    v119 = *((_QWORD *)a1 + 5);
    v120 = v32;
    v121 = v59;
    v122 = 0;
    swift_retain();
    if (!(_DWORD)v99)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), 0);
      goto LABEL_54;
    }
    v99 = *((_QWORD *)&v59 + 1);
    v103 = v59;
    swift_retain();
LABEL_44:
    type metadata accessor for ViewGraph();
    v62 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v63 = MEMORY[0x18D760234](v62);
    v64 = swift_release();
    if (v63)
    {
      swift_getObjectType();
      v64 = swift_conformsToProtocol2();
      if (v64)
        v66 = v63;
      else
        v66 = 0;
      if (!v66)
        v64 = swift_unknownObjectRelease();
    }
    v102 = v89;
    v67 = *((_QWORD *)a1 + 5);
    v68 = *((_QWORD *)a1 + 6);
    v69 = *((_QWORD *)a1 + 7);
    v70 = *((_BYTE *)a1 + 72);
    v71 = (void *)*((_QWORD *)a1 + 10);
    v72 = *((_DWORD *)a1 + 22);
    v108 = *((_DWORD *)a1 + 8);
    v73 = *((_QWORD *)a1 + 12);
    v74 = a1[1];
    v106 = *a1;
    v107 = v74;
    v109 = v67;
    v110 = v68;
    v111 = v69;
    v112 = *((_QWORD *)a1 + 8);
    v113 = v70;
    v114 = v71;
    v115 = v72;
    v116 = v73;
    MEMORY[0x1E0C80A78](v64, v65);
    v93 = v75;
    *(_QWORD *)&v89[-48] = v75;
    *(_QWORD *)&v89[-40] = v76;
    *(_QWORD *)&v89[-32] = a1;
    *(_QWORD *)&v89[-24] = &v119;
    v77 = (uint64_t)v104;
    *(_QWORD *)&v89[-16] = v104;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v78 = v71;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v79 = v114;
    swift_release();
    swift_release();
    swift_release();

    v80 = (void *)*((_QWORD *)a1 + 10);
    if (v80)
    {
      v81 = *((_BYTE *)a1 + 72);
      v82 = v97;
      outlined init with copy of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>(v77, (uint64_t)v97);
      if ((v81 & 1) == 0)
      {
        v83 = (uint64_t)v82;
        v84 = v96;
        outlined init with take of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>(v83, (uint64_t)v96);
        *(_QWORD *)&v84[*(int *)(v95 + 36)] = v80;
        v85 = v80;
        swift_retain();
        swift_retain();
        v86 = v85;
        swift_retain();
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v84, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
        v87 = v121;
        v88 = v122;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v87, *((uint64_t *)&v87 + 1), v88);
LABEL_54:
        swift_release();
        swift_release();
        outlined destroy of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>((uint64_t)v104);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_57;
  }
  v90 = v18;
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  if ((*((_BYTE *)a1 + 72) & 1) == 0)
  {
    v36 = v106;
    v119 = *((_QWORD *)a1 + 5);
    v120 = v32;
    v121 = v106;
    v122 = 0;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    v103 = v36;
    swift_retain_n();
    v37 = swift_retain();
    v38 = MEMORY[0x18D75C5F8](v37) + 200;
    swift_beginAccess();
    v39 = MEMORY[0x18D760234](v38);
    v40 = swift_release();
    if (v39)
    {
      swift_getObjectType();
      v40 = swift_conformsToProtocol2();
      if (v40)
        v42 = v39;
      else
        v42 = 0;
      if (v42)
        goto LABEL_31;
      v40 = swift_unknownObjectRelease();
    }
    v42 = 0;
LABEL_31:
    v93 = v42;
    v102 = v89;
    v44 = *((_QWORD *)a1 + 5);
    v43 = *((_QWORD *)a1 + 6);
    v45 = *((_QWORD *)a1 + 7);
    v46 = *((_BYTE *)a1 + 72);
    v47 = (void *)*((_QWORD *)a1 + 10);
    v48 = *((_DWORD *)a1 + 22);
    v108 = *((_DWORD *)a1 + 8);
    v49 = *((_QWORD *)a1 + 12);
    v50 = a1[1];
    v106 = *a1;
    v107 = v50;
    v109 = v44;
    v110 = v43;
    v111 = v45;
    v112 = *((_QWORD *)a1 + 8);
    v113 = v46;
    v114 = v47;
    v115 = v48;
    v116 = v49;
    MEMORY[0x1E0C80A78](v40, v41);
    *(_QWORD *)&v89[-64] = &v119;
    *(_QWORD *)&v89[-56] = v104;
    *(_QWORD *)&v89[-48] = v51;
    *(_QWORD *)&v89[-40] = v52;
    *(_QWORD *)&v89[-32] = v103;
    *(_QWORD *)&v89[-24] = *((_QWORD *)&v36 + 1);
    *(_DWORD *)&v89[-16] = v90;
    *(_QWORD *)&v89[-8] = a1;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(0);
    v99 = v53;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v54 = v47;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v99 = *((_QWORD *)&v36 + 1);
    swift_release();
    swift_release();
    v55 = v114;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v56 = (void *)*((_QWORD *)a1 + 10);
    *((_QWORD *)a1 + 10) = v105;

    goto LABEL_44;
  }
LABEL_58:
  __break(1u);
}

{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  uint64_t *v11;
  char v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  unsigned int v20;
  void *v21;
  void *v22;
  char v23;
  int v24;
  uint64_t OutputValue;
  uint64_t v26;
  char v27;
  objc_class *v28;
  char *v29;
  char *v30;
  id v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  char v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void *v52;
  id v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  int v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  int v81;
  uint64_t v82;
  __int128 v83;
  void *v84;
  uint64_t v85;
  id v86;
  id v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  id v92;
  id v93;
  id v94;
  id v95;
  __int128 v96;
  char v97;
  void *v98;
  _QWORD v99[8];
  int v100;
  __int128 *v101;
  _QWORD v102[2];
  uint64_t v103;
  id v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  objc_super v113;
  _QWORD *v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  void *v121;
  __int128 v122;
  __int128 v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  void *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  char v138;
  id v139;
  _QWORD *v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  Value = AGGraphGetValue();
  v107 = v3;
  v4 = *(_QWORD *)(Value + 8);
  v5 = *(_BYTE *)(Value + 16);
  v7 = *(_QWORD *)(Value + 24);
  v6 = *(_QWORD *)(Value + 32);
  v8 = *(_QWORD *)(Value + 40);
  v140 = *(_QWORD **)Value;
  v141 = v4;
  v142 = v5;
  v143 = v7;
  v144 = v6;
  v145 = v8;
  v9 = (_DWORD *)AGGraphGetValue();
  v108 = v10;
  LODWORD(v111) = *v9;
  v11 = (uint64_t *)AGGraphGetValue();
  v13 = v12;
  v14 = *v11;
  v112 = v11[1];
  LODWORD(v11) = *((_DWORD *)a1 + 7);
  v15 = *MEMORY[0x1E0CFED28];
  v109 = v14;
  if ((_DWORD)v11 == v15)
  {
    LODWORD(v105) = 0;
    LODWORD(v104) = 0;
    LODWORD(v103) = 0;
    v110 = 0;
  }
  else
  {
    v16 = AGGraphGetValue();
    v18 = v17;
    v19 = *(_QWORD *)v16;
    LODWORD(v103) = *(unsigned __int8 *)(v16 + 8);
    LODWORD(v104) = *(_DWORD *)(v16 + 12);
    swift_retain();
    v110 = v19;
    if (v19 == 1)
    {
      LODWORD(v105) = 0;
      LODWORD(v104) = 0;
      LODWORD(v103) = 0;
      v110 = 0;
    }
    else
    {
      LODWORD(v105) = v18 & 1;
    }
    v14 = v109;
  }
  v20 = v111 >> 1;
  if (v111 >> 1 == *((_DWORD *)a1 + 22))
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v122 = *(__int128 *)((char *)a1 + 56);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    v21 = (void *)*((_QWORD *)a1 + 9);
    if (v21)
    {
      v22 = (void *)*((_QWORD *)a1 + 10);
      if (v22)
      {

        *((_QWORD *)a1 + 9) = 0;
        *((_QWORD *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v20;
  }
  v122 = *(__int128 *)((char *)a1 + 56);
  LODWORD(v114) = v111;
  v23 = v13;
  if ((_DynamicPropertyBuffer.update(container:phase:)() & 1) != 0)
  {
    v24 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>(0);
    OutputValue = AGGraphGetOutputValue();
    v24 = 1;
    if (OutputValue && (v107 & 1) == 0 && (v108 & 1) == 0)
      v24 = AGGraphCurrentAttributeWasModified();
  }
  LODWORD(v106) = v24;
  AGGraphClearUpdate();
  if (!*((_QWORD *)a1 + 9))
  {
    v26 = v141;
    v27 = v142;
    v28 = (objc_class *)type metadata accessor for PlatformSwitchCoordinator();
    v29 = (char *)objc_allocWithZone(v28);
    v30 = &v29[OBJC_IVAR____TtC7SwiftUIP33_1246D37251EA3A918B392E2B95F8B7EF25PlatformSwitchCoordinator__isOn];
    *(_QWORD *)v30 = v140;
    *((_QWORD *)v30 + 1) = v26;
    v30[16] = v27;
    v113.receiver = v29;
    v113.super_class = v28;
    swift_retain();
    swift_retain();
    v31 = objc_msgSendSuper2(&v113, sel_init);
    v32 = (void *)*((_QWORD *)a1 + 9);
    *((_QWORD *)a1 + 9) = v31;

  }
  v33 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  v133 = v14;
  v134 = v112;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  v34 = (_QWORD *)*((_QWORD *)a1 + 10);
  v107 = v33;
  if (v34)
  {
    if ((v23 & 1) != 0)
    {
      swift_retain();
      v35 = v34;
      swift_retain();
      v36 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if ((v36 & 1) != 0)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        LODWORD(v106) = 1;
      }
    }
    else
    {
      v46 = v34;
    }
    if ((specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(_QWORD))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>.UnarySubtreeSequence) & 1) != 0)
    {
      *(_QWORD *)&v122 = 0;
      WORD4(v122) = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v134)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      v33 = v107;
    }
    v47 = v108 | v23;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v108 = (id)*((_QWORD *)&v122 + 1);
    v48 = v122;
    swift_retain();
    v49 = v48;
    swift_retain();
    AGGraphClearUpdate();
    if ((v47 & 1) != 0)
    {
      v50 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v50, 0, v111);
      swift_release();
    }
    if ((_DWORD)v105)
    {
      v51 = (char *)v34 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v34) + 0x90);
      *(_QWORD *)v51 = v110;
      v51[8] = v103;
      *((_DWORD *)v51 + 3) = (_DWORD)v104;
      swift_retain();
      swift_release();
      objc_msgSend(v34, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    v52 = (void *)*((_QWORD *)a1 + 9);
    if (!v52)
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    v53 = v52;

    v135 = *((_QWORD *)a1 + 5);
    v136 = v33;
    v54 = v49;
    *(_QWORD *)&v137 = v49;
    *((_QWORD *)&v137 + 1) = v108;
    v138 = 0;
    v139 = v53;
    swift_retain();
    if (!(_DWORD)v106)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v49, (uint64_t)v108, 0);

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
LABEL_57:
      swift_release();
      return;
    }
    swift_retain();
    v111 = 0;
LABEL_48:
    type metadata accessor for ViewGraph();
    v71 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v72 = MEMORY[0x18D760234](v71);
    v73 = swift_release();
    v105 = v54;
    if (v72)
    {
      swift_getObjectType();
      v73 = swift_conformsToProtocol2();
      if (v73)
        v75 = v72;
      else
        v75 = 0;
      if (!v75)
        v73 = swift_unknownObjectRelease();
    }
    v106 = v99;
    v77 = *((_QWORD *)a1 + 5);
    v76 = *((_QWORD *)a1 + 6);
    v78 = *((_QWORD *)a1 + 7);
    v79 = (void *)*((_QWORD *)a1 + 9);
    v80 = (void *)*((_QWORD *)a1 + 10);
    v81 = *((_DWORD *)a1 + 22);
    v124 = *((_DWORD *)a1 + 8);
    v82 = *((_QWORD *)a1 + 12);
    v83 = a1[1];
    v122 = *a1;
    v123 = v83;
    v125 = v77;
    v126 = v76;
    v127 = v78;
    v128 = *((_QWORD *)a1 + 8);
    v129 = v79;
    v130 = v80;
    v131 = v81;
    v132 = v82;
    MEMORY[0x1E0C80A78](v73, v74);
    v104 = v84;
    v99[-6] = v84;
    v99[-5] = v85;
    v99[-4] = a1;
    v99[-3] = &v135;
    v99[-2] = &v140;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    swift_retain();
    swift_retain();
    v86 = v79;
    v87 = v80;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v88 = v129;
    v89 = v130;
    swift_release();
    swift_release();
    swift_release();

    v90 = (void *)*((_QWORD *)a1 + 10);
    if (v90)
    {
      v91 = (void *)*((_QWORD *)a1 + 9);
      if (v91)
      {
        v111 = v144;
        v102[0] = v141;
        v102[1] = v143;
        v103 = *((_QWORD *)a1 + 5);
        v114 = v140;
        v115 = v141;
        v106 = v140;
        v116 = v142;
        v117 = v143;
        v118 = v144;
        v119 = v145;
        v120 = v90;
        v121 = v91;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>(0);
        swift_retain();
        swift_retain();
        v92 = v91;
        v93 = v90;
        swift_retain();
        swift_retain();
        v94 = v92;
        v95 = v93;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v96 = v137;
        v97 = v138;
        v98 = v139;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v96, *((uint64_t *)&v96 + 1), v97);

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_57;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_60;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v37 = (void *)*((_QWORD *)a1 + 9);
  if (v37)
  {
    v38 = v122;
    v135 = *((_QWORD *)a1 + 5);
    v136 = v33;
    v137 = v122;
    v138 = 0;
    v139 = v37;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    v39 = MEMORY[0x18D75C5F8](v37) + 200;
    swift_beginAccess();
    v40 = MEMORY[0x18D760234](v39);
    v41 = swift_release();
    if (v40)
    {
      swift_getObjectType();
      v41 = swift_conformsToProtocol2();
      v43 = (void *)*((_QWORD *)&v38 + 1);
      v44 = v38;
      if (v41)
        v45 = v40;
      else
        v45 = 0;
      if (v45)
        goto LABEL_47;
      v41 = swift_unknownObjectRelease();
    }
    else
    {
      v43 = (void *)*((_QWORD *)&v38 + 1);
      v44 = v38;
    }
    v45 = 0;
LABEL_47:
    v105 = v45;
    v106 = v102;
    v55 = *((_DWORD *)a1 + 8);
    v57 = *((_QWORD *)a1 + 5);
    v56 = *((_QWORD *)a1 + 6);
    v58 = *((_QWORD *)a1 + 7);
    v59 = (void *)*((_QWORD *)a1 + 10);
    v104 = (id)*((_QWORD *)a1 + 9);
    v108 = v59;
    v60 = *((_DWORD *)a1 + 22);
    v124 = v55;
    v61 = *((_QWORD *)a1 + 12);
    v62 = a1[1];
    v122 = *a1;
    v123 = v62;
    v125 = v57;
    v126 = v56;
    v127 = v58;
    v128 = *((_QWORD *)a1 + 8);
    v129 = v104;
    v130 = v59;
    v131 = v60;
    v132 = v61;
    MEMORY[0x1E0C80A78](v41, v42);
    v99[2] = &v135;
    v99[3] = &v140;
    v99[4] = v64;
    v99[5] = v63;
    v99[6] = v44;
    v99[7] = v43;
    v100 = v111;
    v101 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>>(0);
    v111 = v65;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v54 = v44;
    swift_retain();
    swift_retain();
    v66 = v104;
    v67 = v108;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    v111 = 0;
    v108 = v43;
    swift_release();
    swift_release();
    v68 = v129;
    v69 = v130;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    v70 = (void *)*((_QWORD *)a1 + 10);
    *((_QWORD *)a1 + 10) = v114;

    goto LABEL_48;
  }
LABEL_61:
  __break(1u);
}

uint64_t specialized PlatformViewHost.isPlatformFocusContainerHost.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v6;
  _BYTE v7[8];
  _BYTE v8[8];

  swift_unknownObjectWeakInit();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v8, (uint64_t)v7, a1);
  v2 = swift_allocObject();
  v3 = (void *)MEMORY[0x18D760234](v7);
  swift_unknownObjectWeakInit();

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, a1);
  closure #1 in PlatformViewHost.UnarySubtreeSequence.makeIterator()(v2, &v6);
  v4 = v6;
  if (v6)
  {
    while (1)
    {
      objc_opt_self();
      if (swift_dynamicCastObjCClass())
        break;

      closure #1 in PlatformViewHost.UnarySubtreeSequence.makeIterator()(v2, &v6);
      v4 = v6;
      if (!v6)
        goto LABEL_4;
    }
    swift_release();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, a1);

    return 1;
  }
  else
  {
LABEL_4:
    swift_release();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, a1);
    return 0;
  }
}

void specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v7;
  char *v13;
  char v14;
  _QWORD *v15;
  id v16;
  void *v17;
  __int128 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v13 = (char *)v7 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v7) + 0x68);
  swift_beginAccess();
  v20 = *(_OWORD *)v13;
  EnvironmentValues.colorScheme.getter();
  swift_endAccess();
  v22 = a1;
  v23 = a2;
  EnvironmentValues.colorScheme.getter();
  v14 = v21 ^ v20;
  swift_beginAccess();
  *(_QWORD *)v13 = a1;
  *((_QWORD *)v13 + 1) = a2;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  *(_DWORD *)((char *)v7 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v7) + 0x70)) = a3;
  a7(v14 & 1, a4, a5, a6);
  *(_QWORD *)&v20 = a1;
  *((_QWORD *)&v20 + 1) = a2;
  v16 = objc_msgSend(*(id *)((char *)v7 + *(_QWORD *)((*v15 & *v7) + 0x78)), sel_view);
  if (v16)
  {
    v17 = v16;
    UIView.adoptEnvironment(_:hostedSubview:)((uint64_t)&v20, v16);

  }
  else
  {
    __break(1u);
  }
}

void specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  _QWORD *v7;
  char *v8;
  id v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = (char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x68);
  swift_beginAccess();
  v10 = *(_OWORD *)v8;
  EnvironmentValues.colorScheme.getter();
  swift_endAccess();
  v11 = a1;
  v12 = a2;
  EnvironmentValues.colorScheme.getter();
  swift_beginAccess();
  *(_QWORD *)v8 = a1;
  *((_QWORD *)v8 + 1) = a2;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  *(_DWORD *)((char *)v3 + *(_QWORD *)((*v7 & *v3) + 0x70)) = a3;
  objc_msgSend(v3, sel__noteTraitsDidChangeRecursively, v10);
  *(_QWORD *)&v10 = a1;
  *((_QWORD *)&v10 + 1) = a2;
  v9 = *(id *)((char *)v3 + *(_QWORD *)((*v7 & *v3) + 0x78));
  UIView.adoptEnvironment(_:hostedSubview:)((uint64_t)&v10, v9);

}

_QWORD *specialized closure #4 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  Class v22;
  id v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  char v27;
  unsigned int v29;
  uint64_t v34;
  uint64_t v35;
  char v37;

  AGGraphClearUpdate();
  v10 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 32);
  v14 = static RepresentableContextValues.current;
  v34 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  v35 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v10;
  *(_QWORD *)&xmmword_1ECE02220 = v12;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v11;
  v37 = byte_1ECE02230;
  byte_1ECE02230 = v13;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v11, v13);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v11, v13);
  outlined copy of RepresentableContextValues?(v14, *((uint64_t *)&v14 + 1), v35, v34, v37);
  outlined consume of RepresentableContextValues?(v14, *((uint64_t *)&v14 + 1), v35, v34, v37);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = *(unsigned __int8 *)(a2 + 72);
  v29 = *(unsigned __int8 *)(a2 + 72);
  v17 = *(void **)(a1 + 40);
  v18 = objc_allocWithZone(MEMORY[0x1E0DC3C80]);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<Color?>.Content(v15, v16);
  v19 = v17;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v11, v13);
  v20 = objc_msgSend(v18, sel_init);
  objc_msgSend(v20, sel_addTarget_action_forControlEvents_, v19, sel_valueChanged_, 4096);
  objc_msgSend(v20, sel_addTarget_action_forControlEvents_, v19, sel_editingEnded_, 448);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v12, v11, v13);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  outlined consume of Environment<Color?>.Content(v15, v29);
  v21 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>(0);
  v23 = objc_allocWithZone(v22);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v24 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v20, a3, a4, a5, 0, a7, v21);
  swift_release();
  v25 = static RepresentableContextValues.current;
  v26 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v14;
  *(_QWORD *)&xmmword_1ECE02220 = v35;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v34;
  v27 = byte_1ECE02230;
  byte_1ECE02230 = v37;
  outlined consume of RepresentableContextValues?(v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v12, v11, v13);
  AGGraphSetUpdate();
  return v24;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  AGGraphClearUpdate();
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  v21 = *((_QWORD *)&static RepresentableContextValues.current + 1);
  v22 = static RepresentableContextValues.current;
  v19 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  v20 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v9;
  *(_QWORD *)&xmmword_1ECE02220 = v10;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v11;
  v13 = byte_1ECE02230;
  byte_1ECE02230 = v12;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  outlined copy of RepresentableContextValues?(v22, v21, v20, v19, v13);
  outlined consume of RepresentableContextValues?(v22, v21, v20, v19, v13);
  v14 = specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(a2, a1, a3, a4, a5, a6, a7, a8);
  v15 = static RepresentableContextValues.current;
  v16 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v22;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v21;
  *(_QWORD *)&xmmword_1ECE02220 = v20;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v19;
  v17 = byte_1ECE02230;
  byte_1ECE02230 = v13;
  outlined consume of RepresentableContextValues?(v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  AGGraphSetUpdate();
  return v14;
}

{
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  char v19;

  AGGraphClearUpdate();
  v11 = *(_BYTE *)(a1 + 32);
  v12 = static RepresentableContextValues.current;
  v13 = xmmword_1ECE02220;
  v14 = *(_OWORD *)(a1 + 16);
  static RepresentableContextValues.current = *(_OWORD *)a1;
  xmmword_1ECE02220 = v14;
  v15 = byte_1ECE02230;
  byte_1ECE02230 = v11;
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined copy of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v15);
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v15);
  v16 = specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(a2, a1, a3, a4, a5, a6, a7, a8);
  v17 = static RepresentableContextValues.current;
  v18 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v12;
  xmmword_1ECE02220 = v13;
  v19 = byte_1ECE02230;
  byte_1ECE02230 = v15;
  outlined consume of RepresentableContextValues?(v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19);
  outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  AGGraphSetUpdate();
  return v16;
}

{
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  uint64_t v19;
  Class v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  char v30;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;

  AGGraphClearUpdate();
  v10 = *(_QWORD *)(a1 + 8);
  v34 = *(_QWORD *)(a1 + 16);
  v33 = *(_QWORD *)(a1 + 24);
  v35 = *(_BYTE *)(a1 + 32);
  v11 = static RepresentableContextValues.current;
  v12 = xmmword_1ECE02220;
  v13 = byte_1ECE02230;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v10;
  *(_QWORD *)&xmmword_1ECE02220 = v34;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v33;
  byte_1ECE02230 = v35;
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined copy of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13);
  v30 = v13;
  outlined consume of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13);
  v14 = *(_QWORD *)a2;
  v15 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(v14, v15);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v34, v33, v35);
  specialized Environment.wrappedValue.getter(v14, v15, &v36);
  if (v36)
    v16 = 2030;
  else
    v16 = 3901;
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3928]), sel_initWithFrame_style_, v16, 0.0, 0.0, 0.0, 0.0);
  if (result)
  {
    v18 = (uint64_t)result;
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
    outlined consume of Environment<Bool>.Content(v14, v15);
    v19 = *(_QWORD *)(a8 + 48);
    type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(0);
    v21 = objc_allocWithZone(v20);
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    v22 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)(v18, a3, a4, a5, 0, a7, v19);
    swift_release();
    v24 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v23 = static RepresentableContextValues.current;
    v25 = xmmword_1ECE02220;
    static RepresentableContextValues.current = v11;
    xmmword_1ECE02220 = v12;
    v26 = byte_1ECE02230;
    byte_1ECE02230 = v30;
    outlined consume of RepresentableContextValues?(v23, v24, v25, *((uint64_t *)&v25 + 1), v26);
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
    AGGraphSetUpdate();
    return v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  AGGraphClearUpdate();
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  v21 = *((_QWORD *)&static RepresentableContextValues.current + 1);
  v22 = static RepresentableContextValues.current;
  v19 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  v20 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v9;
  *(_QWORD *)&xmmword_1ECE02220 = v10;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v11;
  v13 = byte_1ECE02230;
  byte_1ECE02230 = v12;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  outlined copy of RepresentableContextValues?(v22, v21, v20, v19, v13);
  outlined consume of RepresentableContextValues?(v22, v21, v20, v19, v13);
  v14 = specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(a2, a1, a3, a4, a5, a6, a7, a8);
  v15 = static RepresentableContextValues.current;
  v16 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v22;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v21;
  *(_QWORD *)&xmmword_1ECE02220 = v20;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v19;
  v17 = byte_1ECE02230;
  byte_1ECE02230 = v13;
  outlined consume of RepresentableContextValues?(v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  AGGraphSetUpdate();
  return v14;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  AGGraphClearUpdate();
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  v21 = *((_QWORD *)&static RepresentableContextValues.current + 1);
  v22 = static RepresentableContextValues.current;
  v19 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  v20 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v9;
  *(_QWORD *)&xmmword_1ECE02220 = v10;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v11;
  v13 = byte_1ECE02230;
  byte_1ECE02230 = v12;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  outlined copy of RepresentableContextValues?(v22, v21, v20, v19, v13);
  outlined consume of RepresentableContextValues?(v22, v21, v20, v19, v13);
  v14 = specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(a2, a1, a3, a4, a5, a6, a7, a8);
  v15 = static RepresentableContextValues.current;
  v16 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v22;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v21;
  *(_QWORD *)&xmmword_1ECE02220 = v20;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v19;
  v17 = byte_1ECE02230;
  byte_1ECE02230 = v13;
  outlined consume of RepresentableContextValues?(v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  AGGraphSetUpdate();
  return v14;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  Class v20;
  id v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v32;

  AGGraphClearUpdate();
  v9 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  v13 = static RepresentableContextValues.current;
  v14 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v9;
  *(_QWORD *)&xmmword_1ECE02220 = v11;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v10;
  v32 = byte_1ECE02230;
  byte_1ECE02230 = v12;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v10, v12);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v10, v12);
  outlined copy of RepresentableContextValues?(v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v32);
  outlined consume of RepresentableContextValues?(v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v32);
  v15 = *(void **)(a1 + 40);
  v16 = objc_allocWithZone(MEMORY[0x1E0DC3C58]);
  swift_bridgeObjectRetain();
  v17 = v15;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v10, v12);
  v18 = objc_msgSend(v16, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v18, sel_setAutoresizingMask_, 2);
  objc_msgSend(v18, sel_setMomentary_, 1);
  objc_msgSend(v18, sel_addTarget_action_forControlEvents_, v17, sel_primaryActionTriggered_, 4096);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v11, v10, v12);
  swift_bridgeObjectRelease();

  v19 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(0);
  v21 = objc_allocWithZone(v20);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v22 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v18, a3, a4, a5, 0, a7, v19);
  swift_release();
  v23 = static RepresentableContextValues.current;
  v24 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v13;
  xmmword_1ECE02220 = v14;
  v25 = byte_1ECE02230;
  byte_1ECE02230 = v32;
  outlined consume of RepresentableContextValues?(v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v11, v10, v12);
  AGGraphSetUpdate();
  return v22;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  char v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  Class v20;
  id v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v27;
  uint64_t v33;
  uint64_t v34;

  AGGraphClearUpdate();
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  v13 = static RepresentableContextValues.current;
  v33 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  v34 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v9;
  *(_QWORD *)&xmmword_1ECE02220 = v10;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v11;
  v14 = byte_1ECE02230;
  byte_1ECE02230 = v12;
  swift_retain();
  swift_retain();
  v27 = v10;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  outlined copy of RepresentableContextValues?(v13, *((uint64_t *)&v13 + 1), v34, v33, v14);
  outlined consume of RepresentableContextValues?(v13, *((uint64_t *)&v13 + 1), v34, v33, v14);
  v15 = *(void **)(a1 + 40);
  v16 = objc_allocWithZone(MEMORY[0x1E0DC3530]);
  v17 = v15;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v27, v11, v12);
  v18 = objc_msgSend(v16, sel_init);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v27, v11, v12);

  v19 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(0);
  v21 = objc_allocWithZone(v20);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v22 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v18, a3, a4, a5, 0, a7, v19);
  swift_release();
  v23 = static RepresentableContextValues.current;
  v24 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v13;
  *(_QWORD *)&xmmword_1ECE02220 = v34;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v33;
  v25 = byte_1ECE02230;
  byte_1ECE02230 = v14;
  outlined consume of RepresentableContextValues?(v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v27, v11, v12);
  AGGraphSetUpdate();
  return v22;
}

{
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  _QWORD *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  AGGraphClearUpdate();
  v11 = *(_BYTE *)(a1 + 32);
  v12 = static RepresentableContextValues.current;
  v13 = qword_1ECE02220;
  v14 = qword_1ECE02228;
  v15 = *(_OWORD *)(a1 + 16);
  static RepresentableContextValues.current = *(_OWORD *)a1;
  *(_OWORD *)&qword_1ECE02220 = v15;
  v16 = byte_1ECE02230;
  byte_1ECE02230 = v11;
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined copy of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, v14, v16);
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, v14, v16);
  v17 = specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(a2, a1, a3, a4, a5, a6, a7, a8);
  v18 = static RepresentableContextValues.current;
  v19 = qword_1ECE02220;
  v20 = qword_1ECE02228;
  static RepresentableContextValues.current = v12;
  qword_1ECE02220 = v13;
  qword_1ECE02228 = v14;
  v21 = byte_1ECE02230;
  byte_1ECE02230 = v16;
  outlined consume of RepresentableContextValues?(v18, *((uint64_t *)&v18 + 1), v19, v20, v21);
  outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  AGGraphSetUpdate();
  return v17;
}

{
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  char v19;

  AGGraphClearUpdate();
  v11 = *(_BYTE *)(a1 + 32);
  v12 = static RepresentableContextValues.current;
  v13 = xmmword_1ECE02220;
  v14 = *(_OWORD *)(a1 + 16);
  static RepresentableContextValues.current = *(_OWORD *)a1;
  xmmword_1ECE02220 = v14;
  v15 = byte_1ECE02230;
  byte_1ECE02230 = v11;
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined copy of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v15);
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v15);
  v16 = specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(a2, a1, a3, a4, a5, a6, a7, a8);
  v17 = static RepresentableContextValues.current;
  v18 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v12;
  xmmword_1ECE02220 = v13;
  v19 = byte_1ECE02230;
  byte_1ECE02230 = v15;
  outlined consume of RepresentableContextValues?(v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19);
  outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  AGGraphSetUpdate();
  return v16;
}

_QWORD *specialized closure #4 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  AGGraphClearUpdate();
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  v22 = *((_QWORD *)&static RepresentableContextValues.current + 1);
  v23 = static RepresentableContextValues.current;
  v20 = qword_1ECE02228;
  v21 = qword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v9;
  qword_1ECE02220 = v10;
  qword_1ECE02228 = v11;
  v13 = byte_1ECE02230;
  byte_1ECE02230 = v12;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  outlined copy of RepresentableContextValues?(v23, v22, v21, v20, v13);
  outlined consume of RepresentableContextValues?(v23, v22, v21, v20, v13);
  v14 = specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(a2, a1, a3, a4, a5, a6, a7, a8);
  v15 = static RepresentableContextValues.current;
  v16 = qword_1ECE02220;
  v17 = qword_1ECE02228;
  *(_QWORD *)&static RepresentableContextValues.current = v23;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v22;
  qword_1ECE02220 = v21;
  qword_1ECE02228 = v20;
  v18 = byte_1ECE02230;
  byte_1ECE02230 = v13;
  outlined consume of RepresentableContextValues?(v15, *((uint64_t *)&v15 + 1), v16, v17, v18);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  AGGraphSetUpdate();
  return v14;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  Class v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v28;

  AGGraphClearUpdate();
  v9 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v12 = *(unsigned __int8 *)(a1 + 32);
  v13 = static RepresentableContextValues.current;
  v14 = xmmword_1ECE02220;
  v15 = byte_1ECE02230;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v9;
  *(_QWORD *)&xmmword_1ECE02220 = v11;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v10;
  v28 = v10;
  byte_1ECE02230 = v12;
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined copy of RepresentableContextValues?(v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15);
  v16 = outlined consume of RepresentableContextValues?(v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15);
  v18 = *a2;
  if (v12 == 1)
  {
    MEMORY[0x1E0C80A78](v16, v17);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
    swift_retain();
    v19 = v18;
    swift_retain();
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  }
  else
  {
    swift_retain();
    v20 = v18;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v28, 0);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v21 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(0);
  objc_allocWithZone(v22);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v23 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v18, a3, a4, a5, 0, a7, v21, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1E1B20240, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
  swift_release();
  v24 = static RepresentableContextValues.current;
  v25 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v13;
  xmmword_1ECE02220 = v14;
  v26 = byte_1ECE02230;
  byte_1ECE02230 = v15;
  outlined consume of RepresentableContextValues?(v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26);
  outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  AGGraphSetUpdate();
  return v23;
}

uint64_t specialized closure #4 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  AGGraphClearUpdate();
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 32);
  v23 = *((_QWORD *)&static RepresentableContextValues.current + 1);
  v24 = static RepresentableContextValues.current;
  v21 = qword_1ECE02228;
  v22 = qword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v10;
  qword_1ECE02220 = v11;
  qword_1ECE02228 = v12;
  v14 = byte_1ECE02230;
  byte_1ECE02230 = v13;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  outlined copy of RepresentableContextValues?(v24, v23, v22, v21, v14);
  outlined consume of RepresentableContextValues?(v24, v23, v22, v21, v14);
  v15 = a9(a2, a1, a3, a4, a5, a6, a7, a8);
  v16 = static RepresentableContextValues.current;
  v17 = qword_1ECE02220;
  v18 = qword_1ECE02228;
  *(_QWORD *)&static RepresentableContextValues.current = v24;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v23;
  qword_1ECE02220 = v22;
  qword_1ECE02228 = v21;
  v19 = byte_1ECE02230;
  byte_1ECE02230 = v14;
  outlined consume of RepresentableContextValues?(v16, *((uint64_t *)&v16 + 1), v17, v18, v19);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  AGGraphSetUpdate();
  return v15;
}

_QWORD *specialized closure #4 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  Class v18;
  id v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  char v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v31;

  AGGraphClearUpdate();
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 32);
  v14 = static RepresentableContextValues.current;
  v26 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  v27 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v10;
  *(_QWORD *)&xmmword_1ECE02220 = v11;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v12;
  v25 = byte_1ECE02230;
  byte_1ECE02230 = v13;
  swift_retain();
  swift_retain();
  v31 = v13;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  outlined copy of RepresentableContextValues?(v14, *((uint64_t *)&v14 + 1), v27, v26, v25);
  outlined consume of RepresentableContextValues?(v14, *((uint64_t *)&v14 + 1), v27, v26, v25);
  v15 = *a2;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v16 = specialized PlatformViewRepresentableAdaptor.makeViewProvider(context:)((uint64_t *)a1, v15);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(0);
  v19 = objc_allocWithZone(v18);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v20 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v16, a3, a4, a5, 0, a7, v17);
  swift_release();
  v21 = static RepresentableContextValues.current;
  v22 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v14;
  *(_QWORD *)&xmmword_1ECE02220 = v27;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v26;
  v23 = byte_1ECE02230;
  byte_1ECE02230 = v25;
  outlined consume of RepresentableContextValues?(v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v11, v12, v31);
  AGGraphSetUpdate();
  return v20;
}

_QWORD *specialized closure #4 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  char v19;

  AGGraphClearUpdate();
  v11 = *(_BYTE *)(a1 + 32);
  v12 = static RepresentableContextValues.current;
  v13 = xmmword_1ECE02220;
  v14 = *(_OWORD *)(a1 + 16);
  static RepresentableContextValues.current = *(_OWORD *)a1;
  xmmword_1ECE02220 = v14;
  v15 = byte_1ECE02230;
  byte_1ECE02230 = v11;
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined copy of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v15);
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v15);
  v16 = specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(a2, a1, a3, a4, a5, a6, a7, a8);
  v17 = static RepresentableContextValues.current;
  v18 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v12;
  xmmword_1ECE02220 = v13;
  v19 = byte_1ECE02230;
  byte_1ECE02230 = v15;
  outlined consume of RepresentableContextValues?(v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19);
  outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  AGGraphSetUpdate();
  return v16;
}

_QWORD *specialized closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  Class v24;
  id v25;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  char v29;
  char v31;
  uint64_t v37;
  char v38;

  v11 = *a1;
  v10 = a1[1];
  v12 = a1[2];
  v13 = a1[3];
  v14 = *((_BYTE *)a1 + 32);
  v15 = static RepresentableContextValues.current;
  v16 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v11;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v10;
  *(_QWORD *)&xmmword_1ECE02220 = v12;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v13;
  v38 = byte_1ECE02230;
  byte_1ECE02230 = v14;
  swift_retain();
  swift_retain();
  v37 = v12;
  v31 = v14;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v13, v14);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v13, v14);
  outlined copy of RepresentableContextValues?(v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v38);
  outlined consume of RepresentableContextValues?(v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v38);
  v17 = *(_QWORD *)(a2 + 8);
  v18 = *(_QWORD *)(a2 + 24);
  v19 = (void *)a1[5];
  v20 = objc_allocWithZone(MEMORY[0x1E0DC3CF0]);
  swift_retain();
  outlined copy of AppIntentExecutor?(v17);
  outlined copy of AppIntentExecutor?(v18);
  swift_retain();
  v21 = v19;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v37, v13, v31);
  v22 = objc_msgSend(v20, sel_init);
  objc_msgSend(v22, sel_addTarget_action_forControlEvents_, v21, sel_valueChanged_, 4096);
  objc_msgSend(v22, sel_addTarget_action_forControlEvents_, v21, sel_editingBegan_, 1);
  objc_msgSend(v22, sel_addTarget_action_forControlEvents_, v21, sel_editingEnded_, 448);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v37, v13, v31);
  swift_release();

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v17);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v18);
  swift_release();
  v23 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>(0);
  v25 = objc_allocWithZone(v24);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v26 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v22, a3, a4, a5, 0, a7, v23);
  swift_release();
  v27 = static RepresentableContextValues.current;
  v28 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v15;
  xmmword_1ECE02220 = v16;
  v29 = byte_1ECE02230;
  byte_1ECE02230 = v38;
  outlined consume of RepresentableContextValues?(v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v37, v13, v31);
  return v26;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  Class v22;
  id v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t v29;
  uint64_t v35;

  v10 = *a1;
  v9 = a1[1];
  v11 = a1[2];
  v12 = a1[3];
  v13 = *((_BYTE *)a1 + 32);
  v14 = *((_QWORD *)&static RepresentableContextValues.current + 1);
  v15 = xmmword_1ECE02220;
  v35 = static RepresentableContextValues.current;
  *(_QWORD *)&static RepresentableContextValues.current = v10;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v9;
  *(_QWORD *)&xmmword_1ECE02220 = v11;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v12;
  v16 = byte_1ECE02230;
  byte_1ECE02230 = v13;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  v29 = v14;
  outlined copy of RepresentableContextValues?(v35, v14, v15, *((uint64_t *)&v15 + 1), v16);
  outlined consume of RepresentableContextValues?(v35, v14, v15, *((uint64_t *)&v15 + 1), v16);
  v17 = (void *)a1[5];
  v18 = objc_allocWithZone(MEMORY[0x1E0DC36F0]);
  v19 = v17;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  v20 = objc_msgSend(v18, sel_init);
  objc_msgSend(v20, sel_addTarget_action_forControlEvents_, v19, sel_dateChanged_, 4096);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);

  v21 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(0);
  v23 = objc_allocWithZone(v22);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v24 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v20, a3, a4, a5, 0, a7, v21);
  swift_release();
  v25 = static RepresentableContextValues.current;
  v26 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v35;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v29;
  xmmword_1ECE02220 = v15;
  v27 = byte_1ECE02230;
  byte_1ECE02230 = v16;
  outlined consume of RepresentableContextValues?(v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  return v24;
}

_QWORD *specialized closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  Class v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  char v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  v44 = a8;
  v45 = a3;
  v48 = a7;
  v46 = a5;
  v47 = a4;
  v39 = a2;
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v37 - v11;
  v14 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(unsigned __int8 *)(a1 + 32);
  v18 = static RepresentableContextValues.current;
  v49 = xmmword_1ECE02220;
  v50 = *((_QWORD *)&static RepresentableContextValues.current + 1);
  v38 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  *(_QWORD *)&static RepresentableContextValues.current = v14;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v13;
  v43 = v14;
  *(_QWORD *)&xmmword_1ECE02220 = v15;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v16;
  v19 = byte_1ECE02230;
  byte_1ECE02230 = v17;
  swift_retain();
  swift_retain();
  v42 = v15;
  v40 = v16;
  v41 = v17;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v15, v16, v17);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v15, v16, v17);
  v20 = v18;
  v21 = v18;
  v22 = v49;
  v23 = v50;
  v24 = v38;
  LOBYTE(v16) = v19;
  outlined copy of RepresentableContextValues?(v21, v50, v49, v38, v19);
  v25 = v20;
  outlined consume of RepresentableContextValues?(v20, v23, v22, v24, v16);
  outlined init with copy of PlatformViewRepresentableAdaptor<KitRepresentable>(v39, (uint64_t)v12);
  v26 = specialized PlatformViewRepresentableAdaptor.makeViewProvider(context:)(a1);
  outlined destroy of PlatformViewRepresentableAdaptor<KitRepresentable>((uint64_t)v12);
  v27 = *(_QWORD *)(v44 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>(0);
  v29 = objc_allocWithZone(v28);
  v30 = v46;
  swift_retain();
  swift_retain();
  v31 = v45;
  swift_unknownObjectRetain();
  v32 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v26, v31, v47, v30, 0, v48, v27);
  swift_release();
  v33 = static RepresentableContextValues.current;
  v34 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v25;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v50;
  *(_QWORD *)&xmmword_1ECE02220 = v49;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v24;
  v35 = byte_1ECE02230;
  byte_1ECE02230 = v16;
  outlined consume of RepresentableContextValues?(v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1), v35);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v42, v40, v41);
  return v32;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  Class v31;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  char v35;
  unsigned int v37;
  void *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  _QWORD v52[4];
  char v53;
  void *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  uint64_t v65;

  v10 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 32);
  v15 = *((_QWORD *)&static RepresentableContextValues.current + 1);
  v14 = static RepresentableContextValues.current;
  v16 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  v51 = static RepresentableContextValues.current;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v10;
  *(_QWORD *)&xmmword_1ECE02220 = v12;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v11;
  v17 = v11;
  v18 = byte_1ECE02230;
  byte_1ECE02230 = v13;
  v19 = v13;
  v49 = v10;
  swift_retain();
  swift_retain();
  v47 = v12;
  v48 = v17;
  v50 = v19;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v17, v19);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v17, v19);
  v41 = v15;
  outlined copy of RepresentableContextValues?(v14, v15, v16, *((uint64_t *)&v16 + 1), v18);
  outlined consume of RepresentableContextValues?(v14, v15, v16, *((uint64_t *)&v16 + 1), v18);
  v20 = *(_BYTE *)(a2 + 8);
  v21 = *(_QWORD *)(a2 + 16);
  LOBYTE(v10) = *(_BYTE *)(a2 + 25);
  v22 = *(_QWORD *)(a2 + 32);
  v23 = *(_BYTE *)(a2 + 40);
  v37 = v23;
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(_BYTE *)(a2 + 56);
  v26 = *(_QWORD *)(a2 + 80);
  v27 = *(unsigned __int8 *)(a2 + 24);
  v55 = *(_QWORD *)a2;
  v39 = v55;
  v40 = v20;
  v56 = v20;
  v57 = v21;
  v58 = v27;
  v59 = v10;
  v60 = v22;
  v61 = v23;
  v62 = v24;
  v63 = v25;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = v26;
  v38 = *(void **)(a1 + 40);
  v52[0] = v51;
  v52[1] = v49;
  v52[2] = v47;
  v52[3] = v48;
  v53 = v50;
  v54 = v38;
  outlined copy of Environment<Bool>.Content(v55, v20);
  outlined copy of Environment<CGFloat?>.Content(v21, v27, v10);
  outlined copy of Environment<Color?>.Content(v22, v37);
  outlined copy of Environment<Bool>.Content(v24, v25);
  swift_bridgeObjectRetain();
  swift_retain();
  v28 = v38;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v47, v48, v50);
  v29 = UIKitPasteControl.makeUIView(context:)((uint64_t)v52);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v47, v48, v50);

  outlined consume of Environment<Bool>.Content(v39, v40);
  outlined consume of Environment<CGFloat?>.Content(v21, v27, v10);
  outlined consume of Environment<Color?>.Content(v22, v37);
  outlined consume of Environment<Bool>.Content(v24, v25);
  swift_release();
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(0);
  objc_allocWithZone(v31);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v32 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v29, a3, a4, a5, 0, a7, v30);
  swift_release();
  v33 = static RepresentableContextValues.current;
  v34 = xmmword_1ECE02220;
  static RepresentableContextValues.current = __PAIR128__(v41, v14);
  xmmword_1ECE02220 = v16;
  v35 = byte_1ECE02230;
  byte_1ECE02230 = v18;
  outlined consume of RepresentableContextValues?(v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1), v35);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v47, v48, v50);
  return v32;
}

{
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  unsigned __int128 v13;
  char v14;
  id v15;
  id v16;
  double v17;
  uint64_t v18;
  Class v19;
  id v20;
  _QWORD *v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  unint64_t v30;

  v9 = *(_QWORD *)(a1 + 8);
  v27 = *(_QWORD *)(a1 + 16);
  v26 = *(_QWORD *)(a1 + 24);
  v10 = *(_BYTE *)(a1 + 32);
  v11 = static RepresentableContextValues.current;
  v12 = xmmword_1ECE02220;
  v13 = xmmword_1ECE02220;
  v29 = v13 >> 64;
  v30 = v13;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v9;
  *(_QWORD *)&xmmword_1ECE02220 = v27;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v26;
  v14 = byte_1ECE02230;
  byte_1ECE02230 = v10;
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined copy of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v14);
  outlined consume of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v14);
  v15 = objc_allocWithZone((Class)type metadata accessor for UIKitToolbar());
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v27, v26, v10);
  v16 = objc_msgSend(v15, sel_init);
  LODWORD(v17) = 1112014848;
  objc_msgSend(v16, sel_setContentHuggingPriority_forAxis_, 0, v17);
  outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(0);
  v20 = objc_allocWithZone(v19);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v21 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v16, a3, a4, a5, 0, a7, v18);
  swift_release();
  v22 = static RepresentableContextValues.current;
  v23 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v11;
  xmmword_1ECE02220 = __PAIR128__(v29, v30);
  v24 = byte_1ECE02230;
  byte_1ECE02230 = v14;
  outlined consume of RepresentableContextValues?(v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24);
  outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  return v21;
}

{
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  id v15;
  id v16;
  uint64_t v17;
  Class v18;
  id v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v9 = *(_QWORD *)(a1 + 8);
  v26 = *(_QWORD *)(a1 + 16);
  v25 = *(_QWORD *)(a1 + 24);
  v10 = *(_BYTE *)(a1 + 32);
  v11 = static RepresentableContextValues.current;
  v12 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  v13 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v9;
  *(_QWORD *)&xmmword_1ECE02220 = v26;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v25;
  v14 = byte_1ECE02230;
  byte_1ECE02230 = v10;
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  v28 = v12;
  outlined copy of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v13, v12, v14);
  outlined consume of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v13, v12, v14);
  type metadata accessor for LinearUIKitProgressView.Base.SwiftUIProgressView();
  v15 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v26, v25, v10);
  v16 = objc_msgSend(v15, sel_initWithProgressViewStyle_, 0);
  outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  swift_release();
  v17 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(0);
  v19 = objc_allocWithZone(v18);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v20 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v16, a3, a4, a5, 0, a7, v17);
  swift_release();
  v21 = static RepresentableContextValues.current;
  v22 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v11;
  xmmword_1ECE02220 = __PAIR128__(v28, v13);
  v23 = byte_1ECE02230;
  byte_1ECE02230 = v14;
  outlined consume of RepresentableContextValues?(v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
  outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  return v20;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  Class v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  char v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  v44 = a8;
  v45 = a3;
  v48 = a7;
  v46 = a5;
  v47 = a4;
  v39 = a2;
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v37 - v11;
  v14 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(unsigned __int8 *)(a1 + 32);
  v18 = static RepresentableContextValues.current;
  v49 = xmmword_1ECE02220;
  v50 = *((_QWORD *)&static RepresentableContextValues.current + 1);
  v38 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  *(_QWORD *)&static RepresentableContextValues.current = v14;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v13;
  v43 = v14;
  *(_QWORD *)&xmmword_1ECE02220 = v15;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v16;
  v19 = byte_1ECE02230;
  byte_1ECE02230 = v17;
  swift_retain();
  swift_retain();
  v42 = v15;
  v40 = v16;
  v41 = v17;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v15, v16, v17);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v15, v16, v17);
  v20 = v18;
  v21 = v18;
  v22 = v49;
  v23 = v50;
  v24 = v38;
  LOBYTE(v16) = v19;
  outlined copy of RepresentableContextValues?(v21, v50, v49, v38, v19);
  v25 = v20;
  outlined consume of RepresentableContextValues?(v20, v23, v22, v24, v16);
  outlined init with copy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(v39, (uint64_t)v12);
  v26 = specialized PlatformViewRepresentableAdaptor.makeViewProvider(context:)(a1);
  outlined destroy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>((uint64_t)v12);
  v27 = *(_QWORD *)(v44 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(0);
  v29 = objc_allocWithZone(v28);
  v30 = v46;
  swift_retain();
  swift_retain();
  v31 = v45;
  swift_unknownObjectRetain();
  v32 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v26, v31, v47, v30, 0, v48, v27);
  swift_release();
  v33 = static RepresentableContextValues.current;
  v34 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v25;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v50;
  *(_QWORD *)&xmmword_1ECE02220 = v49;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v24;
  v35 = byte_1ECE02230;
  byte_1ECE02230 = v16;
  outlined consume of RepresentableContextValues?(v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1), v35);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v42, v40, v41);
  return v32;
}

_QWORD *specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  void *v12;
  __n128 v13;
  uint64_t (*v14)(uint64_t);
  __n128 *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  Class v21;
  _QWORD *v22;
  uint64_t v26;
  __int128 v27;
  __n128 v28;
  char v29;
  __n128 v30;
  uint64_t v31;
  _BYTE v32[8];
  __n128 v33;
  char v34;

  v12 = *a1;
  v13 = *(__n128 *)(a2 + 16);
  v27 = *(_OWORD *)a2;
  v28 = v13;
  v29 = *(_BYTE *)(a2 + 32);
  v14 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3278];
  outlined init with take of CGSize?((uint64_t)&v27, (uint64_t)v32, &lazy cache variable for type metadata for PreferenceBridge?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3278]);
  outlined init with take of CGSize?((uint64_t)v32, (uint64_t)&v26, &lazy cache variable for type metadata for PreferenceBridge?, v14);
  v31 = *((_QWORD *)&v27 + 1);
  outlined init with take of RepresentableContextValues.EnvironmentStorage(&v28, &v30);
  v15 = outlined init with take of RepresentableContextValues.EnvironmentStorage(&v30, &v33);
  if ((v34 & 1) != 0)
  {
    vrev64_s32(COERCE_INT32X2_T(MEMORY[0x1E0C80A78](v15, v16)));
    v17 = v12;
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(a2);
    swift_retain();
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v32);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v31);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>((uint64_t)&v27);
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>((uint64_t)&v27);
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(a2);
  }
  else
  {
    v18 = v12;
    swift_retain();
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v32);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v31);
    outlined retain of RepresentableContextValues.EnvironmentStorage((uint64_t)&v30);
  }
  v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F20]), sel_initWithNibName_bundle_, 0, 0);
  specialized TabItemGroup.Coordinator.addChildRemovingExistingIfNeeded(_:to:)(v12, v19);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v20 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(0);
  objc_allocWithZone(v21);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v22 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v19, a3, a4, a5, 0, a7, v20, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1E1B201F0, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
  swift_release();
  return v22;
}

_QWORD *specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  Class v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD v31[4];
  char v32;
  void *v33;

  v28 = a8;
  v29 = a4;
  v30 = a7;
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v27 - v14;
  outlined init with copy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(a1, (uint64_t)&v27 - v14);
  v16 = (void *)a2[5];
  v17 = *a2;
  v18 = a2[1];
  v20 = a2[2];
  v19 = a2[3];
  LOBYTE(a2) = *((_BYTE *)a2 + 32);
  v31[0] = v17;
  v31[1] = v18;
  v31[2] = v20;
  v31[3] = v19;
  v32 = (char)a2;
  v33 = v16;
  swift_retain();
  v21 = v16;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v20, v19, (char)a2);
  v22 = TextViewAdaptor.makeUIView(context:)((uint64_t)v31);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v20, v19, (char)a2);

  outlined destroy of PlatformViewRepresentableAdaptor<TextViewAdaptor>((uint64_t)v15);
  v23 = *(_QWORD *)(v28 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(0);
  objc_allocWithZone(v24);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v25 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v22, a3, v29, a5, 0, v30, v23);
  swift_release();
  return v25;
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Class v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void *v36;

  v29 = a8;
  v30 = a4;
  v31 = a7;
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v28 - v14;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(a1, (uint64_t)&v28 - v14);
  v16 = (void *)a2[5];
  v17 = *a2;
  v18 = a2[1];
  v20 = a2[2];
  v19 = a2[3];
  LOBYTE(a2) = *((_BYTE *)a2 + 32);
  *(_QWORD *)&v32 = v17;
  *((_QWORD *)&v32 + 1) = v18;
  v33 = v20;
  v34 = v19;
  v35 = (char)a2;
  v36 = v16;
  swift_retain();
  v21 = v16;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v20, v19, (char)a2);
  UIKitRichTextEditor.makeUIView(context:)(&v32);
  v23 = v22;
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v20, v19, (char)a2);

  outlined destroy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>((uint64_t)v15);
  v24 = *(_QWORD *)(v29 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(0);
  objc_allocWithZone(v25);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v26 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)(v23, a3, v30, a5, 0, v31, v24);
  swift_release();
  return v26;
}

_QWORD *specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  id v18;
  uint64_t v19;
  Class v20;
  _QWORD *v21;
  _QWORD v25[4];
  char v26;
  void *v27;
  _BYTE v28[80];

  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitPagingView>(a1, (uint64_t)v28);
  v12 = *(void **)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_BYTE *)(a2 + 32);
  v25[0] = *(_QWORD *)a2;
  v25[1] = v13;
  v25[2] = v14;
  v25[3] = v15;
  v26 = v16;
  v27 = v12;
  swift_retain();
  v17 = v12;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v14, v15, v16);
  v18 = UIKitPagingView.makeUIView(context:)((uint64_t)v25);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v14, v15, v16);

  outlined destroy of PlatformViewRepresentableAdaptor<UIKitPagingView>((uint64_t)v28);
  v19 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>(0);
  objc_allocWithZone(v20);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v21 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v18, a3, a4, a5, 0, a7, v19);
  swift_release();
  return v21;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  Class v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  v31 = a8;
  v32 = a5;
  v35 = a7;
  v33 = a3;
  v34 = a4;
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v30 - v12;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(a1, (uint64_t)&v30 - v12);
  v14 = *(void **)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 16);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_BYTE *)(a2 + 32);
  type metadata accessor for TextEditorTextView();
  v18 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  swift_retain();
  v19 = v14;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v15, v16, v17);
  v20 = objc_msgSend(v18, sel_init);
  objc_msgSend(v20, sel_setAllowsEditingTextAttributes_, 0);
  objc_msgSend(v20, sel_setDelegate_, v19);
  v21 = *(_QWORD *)v13;
  LOBYTE(v14) = v13[8];
  v22 = v20;
  outlined copy of Environment<Bool>.Content(v21, (char)v14);
  specialized Environment.wrappedValue.getter(v21, (char)v14);
  outlined consume of Environment<Bool>.Content(v21, (char)v14);
  objc_msgSend(v22, sel_setBorderStyle_, 0);
  swift_release();
  swift_release();

  outlined consume of RepresentableContextValues.EnvironmentStorage(v15, v16, v17);
  outlined destroy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>((uint64_t)v13);
  v23 = *(_QWORD *)(v31 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(0);
  v25 = objc_allocWithZone(v24);
  v26 = v32;
  swift_retain();
  swift_retain();
  v27 = v33;
  swift_unknownObjectRetain();
  v28 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v22, v27, v34, v26, 0, v35, v23);
  swift_release();
  return v28;
}

{
  void *v8;
  void *v9;
  uint64_t v10;
  char v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  Class v16;
  id v17;
  _QWORD *v18;
  uint64_t v20;
  id v21;

  v8 = *(void **)(a1 + 16);
  v9 = *(void **)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 16);
  v20 = *(_QWORD *)(a2 + 24);
  v11 = *(_BYTE *)(a2 + 32);
  v12 = objc_allocWithZone(MEMORY[0x1E0DC3670]);
  swift_retain();
  swift_retain();
  swift_retain();
  v21 = v8;
  swift_bridgeObjectRetain();
  v13 = v9;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v20, v11);
  v14 = objc_msgSend(v12, sel_init);
  objc_msgSend(v14, sel_addTarget_action_forControlEvents_, v13, sel_colorChanged_, 4096);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v10, v20, v11);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  v15 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(0);
  v17 = objc_allocWithZone(v16);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v18 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v14, a3, a4, a5, 0, a7, v15);
  swift_release();
  return v18;
}

{
  __n128 v14;
  uint64_t (*v15)(uint64_t);
  __n128 *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  Class v20;
  _QWORD *v21;
  uint64_t v23;
  _BYTE v24[72];
  __int128 v25;
  __n128 v26;
  char v27;
  __n128 v28;
  uint64_t v29;
  _BYTE v30[8];
  __n128 v31;
  char v32;

  outlined init with copy of PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>(a1, (uint64_t)v24);
  v14 = *(__n128 *)(a2 + 16);
  v25 = *(_OWORD *)a2;
  v26 = v14;
  v27 = *(_BYTE *)(a2 + 32);
  v15 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3278];
  outlined init with take of CGSize?((uint64_t)&v25, (uint64_t)v30, &lazy cache variable for type metadata for PreferenceBridge?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3278]);
  outlined init with take of CGSize?((uint64_t)v30, (uint64_t)&v23, &lazy cache variable for type metadata for PreferenceBridge?, v15);
  v29 = *((_QWORD *)&v25 + 1);
  outlined init with take of RepresentableContextValues.EnvironmentStorage(&v26, &v28);
  v16 = outlined init with take of RepresentableContextValues.EnvironmentStorage(&v28, &v31);
  if ((v32 & 1) != 0)
  {
    vrev64_s32(COERCE_INT32X2_T(MEMORY[0x1E0C80A78](v16, v17)));
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v30);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v29);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a2);
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a2);
  }
  else
  {
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v30);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v29);
    outlined retain of RepresentableContextValues.EnvironmentStorage((uint64_t)&v28);
  }
  v18 = BridgedNavigationView.makeUIViewController(context:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>((uint64_t)v24);
  v19 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(0);
  objc_allocWithZone(v20);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v21 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v18, a3, a4, a5, 0, a7, v19, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1E1B20290, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
  swift_release();
  return v21;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  __n128 v18;
  uint64_t (*v19)(uint64_t);
  __n128 *v20;
  uint64_t v21;
  id v22;
  id v23;
  __int128 v24;
  void *v25;
  id v26;
  uint64_t v27;
  Class v28;
  _QWORD *v29;
  uint64_t v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  __int128 v37;
  __n128 v38;
  char v39;
  __n128 v40;
  uint64_t v41;
  _BYTE v42[8];
  __n128 v43;
  char v44;

  v32 = a7;
  v31 = a4;
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v31 - v15;
  outlined init with copy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(a1, (uint64_t)&v31 - v15);
  v17 = *(void **)(a2 + 40);
  *(_QWORD *)&v33 = v17;
  v18 = *(__n128 *)(a2 + 16);
  v37 = *(_OWORD *)a2;
  v38 = v18;
  v39 = *(_BYTE *)(a2 + 32);
  v19 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3278];
  outlined init with take of CGSize?((uint64_t)&v37, (uint64_t)v42, &lazy cache variable for type metadata for PreferenceBridge?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3278]);
  outlined init with take of CGSize?((uint64_t)v42, (uint64_t)&v34, &lazy cache variable for type metadata for PreferenceBridge?, v19);
  v41 = *((_QWORD *)&v37 + 1);
  *((_QWORD *)&v33 + 1) = *((_QWORD *)&v37 + 1);
  outlined init with take of RepresentableContextValues.EnvironmentStorage(&v38, &v40);
  v20 = outlined init with take of RepresentableContextValues.EnvironmentStorage(&v40, &v43);
  if ((v44 & 1) != 0)
  {
    vrev64_s32(COERCE_INT32X2_T(MEMORY[0x1E0C80A78](v20, v21)));
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(a2);
    v22 = v17;
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v42);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v41);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>((uint64_t)&v37);
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>((uint64_t)&v37);
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(a2);
  }
  else
  {
    v35[0] = v43;
    v23 = v17;
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v42);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v41);
    outlined retain of RepresentableContextValues.EnvironmentStorage((uint64_t)&v40);
  }
  v24 = v35[0];
  v25 = (void *)v33;
  v35[0] = v33;
  v35[1] = v24;
  v36 = v34;
  v26 = UIKitAdaptableTabView.makeUIViewController(context:)((uint64_t *)v35);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>((uint64_t)v16);
  v27 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(0);
  objc_allocWithZone(v28);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v29 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v26, a3, v31, a5, 0, v32, v27, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1E1B20498, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
  swift_release();
  return v29;
}

{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  Class v18;
  id v19;
  _QWORD *v20;

  v8 = *(void **)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_BYTE *)(a2 + 32);
  type metadata accessor for UIKitSearchBar();
  v12 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  swift_retain();
  v13 = v8;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  v14 = objc_msgSend(v12, sel_init);
  swift_unknownObjectWeakAssign();
  objc_msgSend(v14, sel_setDelegate_, v13);
  v15 = objc_msgSend(v14, sel_searchTextField);
  objc_msgSend(v15, sel_setDelegate_, v13);

  v16 = objc_msgSend(v14, sel_searchTextField);
  objc_msgSend(v16, sel_addTarget_action_forControlEvents_, v13, sel_primaryActionTriggered_, 0x2000);
  swift_release();
  swift_release();

  outlined consume of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  v17 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(0);
  v19 = objc_allocWithZone(v18);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v20 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v14, a3, a4, a5, 0, a7, v17);
  swift_release();
  return v20;
}

{
  __n128 v13;
  uint64_t (*v14)(uint64_t);
  __n128 *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  Class v19;
  _QWORD *v20;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  __int128 v26;
  __n128 v27;
  char v28;
  __n128 v29;
  uint64_t v30;
  _BYTE v31[8];
  __n128 v32;
  char v33;

  v24.n128_u64[0] = *(_QWORD *)(a2 + 40);
  v13 = *(__n128 *)(a2 + 16);
  v26 = *(_OWORD *)a2;
  v27 = v13;
  v28 = *(_BYTE *)(a2 + 32);
  v14 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3278];
  outlined init with take of CGSize?((uint64_t)&v26, (uint64_t)v31, &lazy cache variable for type metadata for PreferenceBridge?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3278]);
  outlined init with take of CGSize?((uint64_t)v31, (uint64_t)&v25, &lazy cache variable for type metadata for PreferenceBridge?, v14);
  v30 = *((_QWORD *)&v26 + 1);
  v24.n128_u64[1] = *((_QWORD *)&v26 + 1);
  outlined init with take of RepresentableContextValues.EnvironmentStorage(&v27, &v29);
  v15 = outlined init with take of RepresentableContextValues.EnvironmentStorage(&v29, &v32);
  if ((v33 & 1) != 0)
  {
    vrev64_s32(COERCE_INT32X2_T(MEMORY[0x1E0C80A78](v15, v16)));
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(a2);
    swift_retain();
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v31);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v30);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>((uint64_t)&v26);
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>((uint64_t)&v26);
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(a2);
  }
  else
  {
    v23 = v32;
    swift_retain();
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v31);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v30);
    outlined retain of RepresentableContextValues.EnvironmentStorage((uint64_t)&v29);
  }
  v24 = v23;
  swift_retain();
  swift_retain();
  v17 = specialized NavigationSplitCoordinator.makeSplitViewController(environment:seeds:)((uint64_t *)&v24);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v18 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(0);
  objc_allocWithZone(v19);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v20 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v17, a3, a4, a5, 0, a7, v18, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1E1B205D8, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
  swift_release();
  return v20;
}

{
  void *v12;
  __n128 v13;
  uint64_t (*v14)(uint64_t);
  __n128 *v15;
  uint64_t v16;
  id v17;
  id v18;
  __int128 v19;
  UINavigationController *v20;
  uint64_t v21;
  Class v22;
  _QWORD *v23;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  _BYTE v31[176];
  __int128 v32;
  __n128 v33;
  char v34;
  __n128 v35;
  uint64_t v36;
  _BYTE v37[8];
  __n128 v38;
  char v39;

  outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>(a1, (uint64_t)v31);
  v12 = *(void **)(a2 + 40);
  v13 = *(__n128 *)(a2 + 16);
  v32 = *(_OWORD *)a2;
  v33 = v13;
  v34 = *(_BYTE *)(a2 + 32);
  v14 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3278];
  outlined init with take of CGSize?((uint64_t)&v32, (uint64_t)v37, &lazy cache variable for type metadata for PreferenceBridge?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3278]);
  outlined init with take of CGSize?((uint64_t)v37, (uint64_t)&v28, &lazy cache variable for type metadata for PreferenceBridge?, v14);
  v36 = *((_QWORD *)&v32 + 1);
  v27 = *((_QWORD *)&v32 + 1);
  outlined init with take of RepresentableContextValues.EnvironmentStorage(&v33, &v35);
  v15 = outlined init with take of RepresentableContextValues.EnvironmentStorage(&v35, &v38);
  if ((v39 & 1) != 0)
  {
    vrev64_s32(COERCE_INT32X2_T(MEMORY[0x1E0C80A78](v15, v16)));
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(a2);
    v17 = v12;
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v37);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v36);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>((uint64_t)&v32);
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>((uint64_t)&v32);
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(a2);
  }
  else
  {
    v29[0] = v38;
    v18 = v12;
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v37);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v36);
    outlined retain of RepresentableContextValues.EnvironmentStorage((uint64_t)&v35);
  }
  v19 = v29[0];
  *(_QWORD *)&v29[0] = v12;
  *((_QWORD *)&v29[0] + 1) = v27;
  v29[1] = v19;
  v30 = v28;
  v20 = NavigationStackRepresentable.makeUIViewController(context:)((uint64_t)v29);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>((uint64_t)v31);
  v21 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(0);
  objc_allocWithZone(v22);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v23 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v20, a3, a4, a5, 0, a7, v21, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1E1B20448, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
  swift_release();
  return v23;
}

{
  __n128 v13;
  uint64_t (*v14)(uint64_t);
  __n128 *v15;
  uint64_t v16;
  __int128 v17;
  id v18;
  uint64_t v19;
  Class v20;
  _QWORD *v21;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  uint64_t v27;
  _BYTE v28[192];
  __int128 v29;
  __n128 v30;
  char v31;
  __n128 v32;
  uint64_t v33;
  _BYTE v34[8];
  __n128 v35;
  char v36;

  outlined init with copy of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>(a1, (uint64_t)v28);
  v13 = *(__n128 *)(a2 + 16);
  v29 = *(_OWORD *)a2;
  v30 = v13;
  v31 = *(_BYTE *)(a2 + 32);
  v14 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3278];
  outlined init with take of CGSize?((uint64_t)&v29, (uint64_t)v34, &lazy cache variable for type metadata for PreferenceBridge?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3278]);
  outlined init with take of CGSize?((uint64_t)v34, (uint64_t)&v25, &lazy cache variable for type metadata for PreferenceBridge?, v14);
  v33 = *((_QWORD *)&v29 + 1);
  v24 = *((_QWORD *)&v29 + 1);
  outlined init with take of RepresentableContextValues.EnvironmentStorage(&v30, &v32);
  v15 = outlined init with take of RepresentableContextValues.EnvironmentStorage(&v32, &v35);
  if ((v36 & 1) != 0)
  {
    vrev64_s32(COERCE_INT32X2_T(MEMORY[0x1E0C80A78](v15, v16)));
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v34);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v33);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a2);
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a2);
  }
  else
  {
    *(__n128 *)v26 = v35;
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v34);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v33);
    outlined retain of RepresentableContextValues.EnvironmentStorage((uint64_t)&v32);
  }
  v17 = *(_OWORD *)v26;
  *(_QWORD *)v26 = v24;
  *(_OWORD *)&v26[8] = v17;
  v27 = v25;
  v18 = CustomizableDocumentViewControllerRepresentable.makeUIViewController(context:)((uint64_t)v26);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>((uint64_t)v28);
  v19 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(0);
  objc_allocWithZone(v20);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v21 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v18, a3, a4, a5, 0, a7, v19, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1E1B203F8, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
  swift_release();
  return v21;
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  __n128 v18;
  uint64_t (*v19)(uint64_t);
  __n128 *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  Class v24;
  _QWORD *v25;
  _BYTE v27[4];
  int v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __n128 v33;
  char v34;
  __n128 v35;
  uint64_t v36;
  _BYTE v37[8];
  __n128 v38;
  char v39;

  v28 = a7;
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, type metadata accessor for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = &v27[-v16];
  outlined init with copy of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>(a1, (uint64_t)&v27[-v16]);
  v18 = *(__n128 *)(a2 + 16);
  v32 = *(_OWORD *)a2;
  v33 = v18;
  v34 = *(_BYTE *)(a2 + 32);
  v19 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3278];
  outlined init with take of CGSize?((uint64_t)&v32, (uint64_t)v37, &lazy cache variable for type metadata for PreferenceBridge?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3278]);
  outlined init with take of CGSize?((uint64_t)v37, (uint64_t)&v31, &lazy cache variable for type metadata for PreferenceBridge?, v19);
  v36 = *((_QWORD *)&v32 + 1);
  v30 = *((_QWORD *)&v32 + 1);
  outlined init with take of RepresentableContextValues.EnvironmentStorage(&v33, &v35);
  v20 = outlined init with take of RepresentableContextValues.EnvironmentStorage(&v35, &v38);
  if ((v39 & 1) != 0)
  {
    vrev64_s32(COERCE_INT32X2_T(MEMORY[0x1E0C80A78](v20, v21)));
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v37);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v36);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a2);
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a2);
  }
  else
  {
    v29 = v38;
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v37);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v36);
    outlined retain of RepresentableContextValues.EnvironmentStorage((uint64_t)&v35);
  }
  v22 = CustomizableURLDocumentViewControllerRepresentable.makeUIViewController(context:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>((uint64_t)v17);
  v23 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(0);
  objc_allocWithZone(v24);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v25 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v22, a3, a4, a5, 0, v28, v23, (uint64_t)partial apply for closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:), (uint64_t)&unk_1E1B1FE58, (uint64_t)partial apply for closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:), (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
  swift_release();
  return v25;
}

{
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  Class v14;
  id v15;
  _QWORD *v16;
  char v18;
  uint64_t v19;

  v8 = *(void **)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 16);
  v19 = *(_QWORD *)(a2 + 24);
  v18 = *(_BYTE *)(a2 + 32);
  v10 = objc_allocWithZone(MEMORY[0x1E0DC3D18]);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v11 = v8;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v19, v18);
  v12 = objc_msgSend(v10, sel_init);
  objc_msgSend(v12, sel_addTarget_action_forControlEvents_, v11, sel_isOnChanged_, 4096);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v9, v19, v18);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  v13 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>(0);
  v15 = objc_allocWithZone(v14);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v16 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v12, a3, a4, a5, 0, a7, v13);
  swift_release();
  return v16;
}

_QWORD *specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  Class v32;
  _QWORD *v33;
  unsigned __int8 v35;
  __int128 v36;
  __n128 v37;
  char v38;
  __n128 v39;
  uint64_t v40;
  _BYTE v41[8];
  _OWORD v42[9];
  _BYTE v43[25];

  v14 = a1[8];
  v15 = a1[9];
  v16 = a1[6];
  v42[7] = a1[7];
  v42[8] = v14;
  *(_OWORD *)v43 = v15;
  *(_OWORD *)&v43[9] = *(_OWORD *)((char *)a1 + 153);
  v17 = a1[4];
  v18 = a1[5];
  v19 = a1[2];
  v42[3] = a1[3];
  v42[4] = v17;
  v42[5] = v18;
  v42[6] = v16;
  v20 = a1[1];
  v42[0] = *a1;
  v42[1] = v20;
  v42[2] = v19;
  v21 = *(__n128 *)(a2 + 16);
  v36 = *(_OWORD *)a2;
  v37 = v21;
  v38 = *(_BYTE *)(a2 + 32);
  outlined init with take of CGSize?((uint64_t)&v36, (uint64_t)v41, &lazy cache variable for type metadata for PreferenceBridge?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3278]);
  v40 = *((_QWORD *)&v36 + 1);
  outlined init with take of RepresentableContextValues.EnvironmentStorage(&v37, &v39);
  type metadata accessor for CircularUIKitProgressView.SwiftUIActivityIndicatorView();
  v22 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  outlined retain of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v42);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v41);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v40);
  outlined retain of RepresentableContextValues.EnvironmentStorage((uint64_t)&v39);
  v23 = objc_msgSend(v22, sel_init);
  v24 = v23;
  if (v43[24] == 1)
  {
    v25 = v23;
    v26 = 16;
  }
  else
  {
    v27 = *(_QWORD *)&v42[0];
    v28 = BYTE8(v42[0]);
    v29 = v23;
    outlined copy of Environment<Bool>.Content(v27, v28);
    specialized Environment.wrappedValue.getter(v27, v28, &v35);
    outlined consume of Environment<Bool>.Content(v27, v28);
    v30 = 101;
    if (v35 - 3 >= 2)
      v30 = 100;
    if (v35 >= 2u)
      v26 = v30;
    else
      v26 = 3;
  }
  objc_msgSend(v24, sel_setActivityIndicatorViewStyle_, v26);
  objc_msgSend(v24, sel_startAnimating);

  outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a2);
  outlined release of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v42);
  v31 = *(_QWORD *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(0);
  objc_allocWithZone(v32);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v33 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v24, a3, a4, a5, 0, a7, v31);
  swift_release();
  return v33;
}

uint64_t specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void **a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  __int128 v17;
  _OWORD v19[3];
  id v20;

  v9 = AGGraphClearUpdate();
  v11 = *(_QWORD **)(a3 + 80);
  if (v11)
  {
    v20 = *(id *)((char *)v11 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v11) + 0x78));
    MEMORY[0x1E0C80A78](v9, v10);
    if (a1)
    {
      MEMORY[0x1E0C80A78](v12, v13);
      v16 = v15;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v17 = a4[1];
      v19[0] = *a4;
      v19[1] = v17;
      v19[2] = a4[2];
      specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v19, a5, v14);
    }

  }
  return AGGraphSetUpdate();
}

uint64_t specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  __int128 v17;
  _OWORD v19[2];
  char v20;
  id v21;

  v9 = AGGraphClearUpdate();
  v11 = *(_QWORD **)(a3 + 80);
  if (v11)
  {
    v21 = *(id *)((char *)v11 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v11) + 0x78));
    MEMORY[0x1E0C80A78](v9, v10);
    if (a1)
    {
      MEMORY[0x1E0C80A78](v12, v13);
      v16 = v15;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v17 = *(_OWORD *)(a4 + 16);
      v19[0] = *(_OWORD *)a4;
      v19[1] = v17;
      v20 = *(_BYTE *)(a4 + 32);
      specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v19, a5, v14);
    }

  }
  return AGGraphSetUpdate();
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  unsigned __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  char v34;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  __int128 v51;
  __int128 v52;
  unsigned __int8 v53;
  id v54;

  v10 = AGGraphClearUpdate();
  v12 = v10;
  v13 = *(_OWORD *)(a4 + 16);
  v51 = *(_OWORD *)a4;
  v52 = v13;
  v53 = *(_BYTE *)(a4 + 32);
  v14 = *(_QWORD **)(a3 + 80);
  if (v14)
  {
    v15 = *(void **)((char *)v14 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v14) + 0x78));
    v54 = v15;
    MEMORY[0x1E0C80A78](v10, v11);
    if (a1)
    {
      MEMORY[0x1E0C80A78](v16, v17);
      v18 = v15;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v44 = &v36;
      v45 = v12;
      v19 = v52;
      v20 = v53;
      v47 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v48 = static RepresentableContextValues.current;
      v21 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v46 = xmmword_1ECE02220;
      static RepresentableContextValues.current = v51;
      v43 = v5;
      v22 = v51;
      xmmword_1ECE02220 = v52;
      v49 = byte_1ECE02230;
      byte_1ECE02230 = v53;
      v36 = *((_QWORD *)&v51 + 1);
      swift_retain();
      swift_retain();
      v39 = v19 >> 64;
      v37 = v19;
      v38 = v20;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v19, *((uint64_t *)&v19 + 1), v20);
      v41 = v15;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v19, *((uint64_t *)&v19 + 1), v20);
      v23 = v47;
      v24 = v48;
      v25 = v46;
      v42 = v21;
      LOBYTE(v20) = v49;
      outlined copy of RepresentableContextValues?(v48, v47, v46, v21, v49);
      outlined consume of RepresentableContextValues?(v24, v23, v25, v21, v20);
      v26 = *(_QWORD *)a5;
      v27 = *(_BYTE *)(a5 + 8);
      outlined copy of Environment<Bool>.Content(v26, v27);
      v40 = v22;
      swift_retain();
      swift_retain();
      v28 = v37;
      v29 = v39;
      v30 = v38;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v37, v39, v38);
      specialized Environment.wrappedValue.getter(v26, v27, &v50);
      if (v50)
        v31 = 2030;
      else
        v31 = 3901;
      objc_msgSend(v41, sel_transitionToStyle_, v31);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v28, v29, v30);
      outlined consume of Environment<Bool>.Content(v26, v27);
      v32 = static RepresentableContextValues.current;
      v33 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v48;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v47;
      *(_QWORD *)&xmmword_1ECE02220 = v46;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v42;
      v34 = byte_1ECE02230;
      byte_1ECE02230 = v49;
      outlined consume of RepresentableContextValues?(v32, *((uint64_t *)&v32 + 1), v33, *((uint64_t *)&v33 + 1), v34);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v28, v29, v30);
    }

  }
  return AGGraphSetUpdate();
}

{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  __int128 v17;
  _OWORD v19[2];
  char v20;
  id v21;

  v9 = AGGraphClearUpdate();
  v11 = *(_QWORD **)(a3 + 80);
  if (v11)
  {
    v21 = *(id *)((char *)v11 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v11) + 0x78));
    MEMORY[0x1E0C80A78](v9, v10);
    if (a1)
    {
      MEMORY[0x1E0C80A78](v12, v13);
      v16 = v15;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v17 = *(_OWORD *)(a4 + 16);
      v19[0] = *(_OWORD *)a4;
      v19[1] = v17;
      v20 = *(_BYTE *)(a4 + 32);
      specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v19, a5, (uint64_t)v14);
    }

  }
  return AGGraphSetUpdate();
}

{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  __int128 v17;
  _OWORD v19[2];
  char v20;
  id v21;

  v9 = AGGraphClearUpdate();
  v11 = *(_QWORD **)(a3 + 80);
  if (v11)
  {
    v21 = *(id *)((char *)v11 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v11) + 0x78));
    MEMORY[0x1E0C80A78](v9, v10);
    if (a1)
    {
      MEMORY[0x1E0C80A78](v12, v13);
      v16 = v15;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v17 = *(_OWORD *)(a4 + 16);
      v19[0] = *(_OWORD *)a4;
      v19[1] = v17;
      v20 = *(_BYTE *)(a4 + 32);
      specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v19, a5, v14);
    }

  }
  return AGGraphSetUpdate();
}

uint64_t specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;
  char v41;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[4];
  char v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _OWORD v65[2];
  _OWORD v66[2];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _OWORD v74[2];
  id v75;
  __int128 v76;
  __int128 v77;
  unsigned __int8 v78;
  uint64_t v79;

  v10 = AGGraphClearUpdate();
  v12 = *(_OWORD *)(a4 + 16);
  v76 = *(_OWORD *)a4;
  v77 = v12;
  v78 = *(_BYTE *)(a4 + 32);
  v13 = *(_QWORD **)(a3 + 80);
  if (v13)
  {
    v79 = v10;
    v14 = *(void **)((char *)v13 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v13) + 0x78));
    v75 = v14;
    MEMORY[0x1E0C80A78](v10, v11);
    if (a1)
    {
      MEMORY[0x1E0C80A78](v15, v16);
      v17 = v14;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v49 = &v43;
      v50 = v5;
      v18 = v76;
      v19 = v77;
      v20 = v78;
      v53 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v51 = static RepresentableContextValues.current;
      v43 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v52 = xmmword_1ECE02220;
      static RepresentableContextValues.current = v76;
      xmmword_1ECE02220 = v77;
      v21 = byte_1ECE02230;
      byte_1ECE02230 = v78;
      v46 = *((_QWORD *)&v76 + 1);
      swift_retain();
      v47 = v18;
      swift_retain();
      v45 = v19;
      v44 = v20;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v19, *((uint64_t *)&v19 + 1), v20);
      v48 = v14;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v19, *((uint64_t *)&v19 + 1), v20);
      v23 = v51;
      v22 = v52;
      v24 = v53;
      v25 = v43;
      outlined copy of RepresentableContextValues?(v51, v53, v52, v43, v21);
      outlined consume of RepresentableContextValues?(v23, v24, v22, v25, v21);
      v26 = a5[8];
      v27 = a5[6];
      v72 = a5[7];
      v73 = v26;
      v28 = a5[8];
      v74[0] = a5[9];
      *(_OWORD *)((char *)v74 + 9) = *(_OWORD *)((char *)a5 + 153);
      v29 = a5[3];
      v30 = a5[5];
      v69 = a5[4];
      v70 = v30;
      v31 = a5[5];
      v71 = a5[6];
      v32 = a5[1];
      v66[0] = *a5;
      v66[1] = v32;
      v33 = a5[3];
      v35 = *a5;
      v34 = a5[1];
      v67 = a5[2];
      v68 = v33;
      v36 = a5[9];
      v64 = v28;
      v65[0] = v36;
      *(_OWORD *)((char *)v65 + 9) = *(_OWORD *)((char *)a5 + 153);
      v60 = v69;
      v61 = v31;
      v62 = v27;
      v63 = v72;
      v56 = v35;
      v57 = v34;
      v58 = v67;
      v59 = v29;
      v54[0] = v47;
      v54[1] = v46;
      v37 = v45;
      v54[2] = v45;
      v54[3] = *((_QWORD *)&v19 + 1);
      v38 = v44;
      v55 = v44;
      outlined retain of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v66);
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v37, *((uint64_t *)&v19 + 1), v38);
      CircularUIKitProgressView.updateUIView(_:context:)(v48, (uint64_t)v54);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v37, *((uint64_t *)&v19 + 1), v38);
      outlined release of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v66);
      v39 = static RepresentableContextValues.current;
      v40 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v51;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v53;
      *(_QWORD *)&xmmword_1ECE02220 = v52;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v25;
      v41 = byte_1ECE02230;
      byte_1ECE02230 = v21;
      outlined consume of RepresentableContextValues?(v39, *((uint64_t *)&v39 + 1), v40, *((uint64_t *)&v40 + 1), v41);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v37, *((uint64_t *)&v19 + 1), v38);
    }

  }
  return AGGraphSetUpdate();
}

uint64_t specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  __int128 v17;
  id v18;
  _OWORD v20[2];
  char v21;
  id v22;

  v9 = AGGraphClearUpdate();
  v11 = *(_QWORD **)(a3 + 80);
  if (v11)
  {
    v22 = *(id *)((char *)v11 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v11) + 0x78));
    MEMORY[0x1E0C80A78](v9, v10);
    if (a1)
    {
      MEMORY[0x1E0C80A78](v12, v13);
      v16 = v15;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v17 = *(_OWORD *)(a4 + 16);
      v20[0] = *(_OWORD *)a4;
      v20[1] = v17;
      v21 = *(_BYTE *)(a4 + 32);
      v18 = v14;
      specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v20, a5);
    }

  }
  return AGGraphSetUpdate();
}

void specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t *a5)
{
  __int128 v5;
  _QWORD *v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[4];
  char v59;
  void *v60;
  id v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;

  v5 = a4[1];
  v62 = *a4;
  v63 = v5;
  v64 = a4[2];
  v6 = *(_QWORD **)(a3 + 80);
  if (v6)
  {
    v8 = *(void **)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x78));
    v61 = v8;
    MEMORY[0x1E0C80A78](a1, a2);
    if (v9)
    {
      MEMORY[0x1E0C80A78](v9, v10);
      v11 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v54 = &v40;
      v12 = v62;
      v13 = v63;
      v14 = v64;
      v50 = (void *)*((_QWORD *)&v64 + 1);
      v56 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v57 = static RepresentableContextValues.current;
      v15 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v55 = xmmword_1ECE02220;
      static RepresentableContextValues.current = v62;
      xmmword_1ECE02220 = v63;
      v16 = byte_1ECE02230;
      byte_1ECE02230 = v64;
      swift_retain();
      v41 = v12;
      swift_retain();
      v40 = v13;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v13, *((uint64_t *)&v13 + 1), v14);
      v51 = v8;
      swift_retain();
      v42 = *((_QWORD *)&v12 + 1);
      swift_retain();
      v44 = *((_QWORD *)&v13 + 1);
      v43 = v14;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v13, *((uint64_t *)&v13 + 1), v14);
      v17 = v57;
      v18 = v56;
      v19 = v55;
      v52 = v15;
      v53 = v16;
      outlined copy of RepresentableContextValues?(v57, v56, v55, v15, v16);
      outlined consume of RepresentableContextValues?(v17, v18, v19, v15, v16);
      v21 = *a5;
      v20 = a5[1];
      v22 = a5[2];
      v23 = a5[3];
      v24 = a5[4];
      v25 = a5[5];
      v26 = a5[6];
      v27 = a5[8];
      v28 = *((unsigned __int8 *)a5 + 72);
      v58[0] = v41;
      v58[1] = *((_QWORD *)&v12 + 1);
      v29 = v40;
      v58[2] = v40;
      v58[3] = *((_QWORD *)&v13 + 1);
      v59 = v14;
      v30 = v50;
      v60 = v50;
      v65 = v21;
      v66 = v20;
      v49 = v21;
      v46 = v20;
      v67 = v22;
      v68 = v23;
      v69 = v24;
      v47 = v25;
      v70 = v25;
      v71 = v26;
      v45 = v26;
      v72 = a5[7];
      v31 = v27;
      v48 = v27;
      v73 = v27;
      v74 = v28;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v32 = v28;
      outlined copy of Environment<Color?>.Content(v31, v28);
      v33 = v30;
      swift_retain();
      swift_retain();
      v34 = v29;
      v35 = v29;
      v36 = v44;
      LOBYTE(v14) = v43;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v34, v44, v43);
      SystemSlider.updateUIView(_:context:)(v51, (uint64_t)v58);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v35, v36, v14);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      outlined consume of Environment<Color?>.Content(v48, v32);
      v37 = static RepresentableContextValues.current;
      v38 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v57;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v56;
      *(_QWORD *)&xmmword_1ECE02220 = v55;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v52;
      v39 = byte_1ECE02230;
      byte_1ECE02230 = v53;
      outlined consume of RepresentableContextValues?(v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v39);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v35, v36, v14);
    }

  }
}

{
  __int128 v5;
  _QWORD *v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  double v30;
  double v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  __int128 v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  id v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;

  v5 = a4[1];
  v62 = *a4;
  v63 = v5;
  v64 = a4[2];
  v6 = *(_QWORD **)(a3 + 80);
  if (v6)
  {
    v8 = *(void **)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x78));
    v61 = v8;
    MEMORY[0x1E0C80A78](a1, a2);
    if (v9)
    {
      MEMORY[0x1E0C80A78](v9, v10);
      v11 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v12 = v62;
      v13 = *((_QWORD *)&v63 + 1);
      v51 = &v41;
      v46 = (id)*((_QWORD *)&v64 + 1);
      v14 = static RepresentableContextValues.current;
      v58 = xmmword_1ECE02220;
      v59 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v57 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      static RepresentableContextValues.current = v62;
      xmmword_1ECE02220 = v63;
      v15 = v63;
      v60 = byte_1ECE02230;
      byte_1ECE02230 = v64;
      v16 = v64;
      v54 = *((_QWORD *)&v62 + 1);
      swift_retain();
      swift_retain();
      v17 = v15;
      v56 = v13;
      v55 = v16;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v15, v13, v16);
      v18 = v8;
      v49 = v12;
      swift_retain();
      swift_retain();
      v19 = v17;
      v48 = v17;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v17, v13, v16);
      v20 = v14;
      v50 = v14;
      v21 = v14;
      v23 = v58;
      v22 = v59;
      v24 = v57;
      LOBYTE(v16) = v60;
      outlined copy of RepresentableContextValues?(v21, v59, v58, v57, v60);
      outlined consume of RepresentableContextValues?(v20, v22, v23, v24, v16);
      v25 = a5[1];
      v53 = *a5;
      v26 = a5[2];
      v27 = a5[3];
      v45 = a5[4];
      v28 = a5[6];
      v47 = a5[5];
      v52 = v28;
      swift_retain();
      v29 = (char *)v46;
      v46 = v29;
      outlined copy of AppIntentExecutor?(v25);
      outlined copy of AppIntentExecutor?(v27);
      swift_retain();
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v19, v56, v55);
      objc_msgSend(v18, sel_setValue_, 0.0);
      v30 = -2.0;
      if (!v27)
        v30 = 0.0;
      objc_msgSend(v18, sel_setMinimumValue_, v30);
      v31 = 2.0;
      if (!v25)
        v31 = 0.0;
      objc_msgSend(v18, sel_setMaximumValue_, v31);
      objc_msgSend(v18, sel_setStepValue_, 1.0);
      v32 = &v29[OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration];
      v33 = *(_QWORD *)&v29[OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 8];
      v42 = *(_QWORD *)&v29[OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 24];
      v43 = *(_QWORD *)&v29[OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 48];
      *(_QWORD *)v32 = v53;
      *((_QWORD *)v32 + 1) = v25;
      v44 = v26;
      *((_QWORD *)v32 + 2) = v26;
      *((_QWORD *)v32 + 3) = v27;
      v34 = v47;
      *((_QWORD *)v32 + 4) = v45;
      *((_QWORD *)v32 + 5) = v34;
      *((_QWORD *)v32 + 6) = v52;
      swift_retain();
      outlined copy of AppIntentExecutor?(v25);
      outlined copy of AppIntentExecutor?(v27);
      swift_retain();
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v33);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v42);
      swift_release();
      swift_release();
      swift_release();
      v35 = v48;
      v36 = v56;
      v37 = v55;
      outlined consume of RepresentableContextValues.EnvironmentStorage(v48, v56, v55);
      swift_release();

      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v25);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v27);
      swift_release();
      v38 = static RepresentableContextValues.current;
      v39 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v50;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v59;
      *(_QWORD *)&xmmword_1ECE02220 = v58;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v57;
      v40 = byte_1ECE02230;
      byte_1ECE02230 = v60;
      outlined consume of RepresentableContextValues?(v38, *((uint64_t *)&v38 + 1), v39, *((uint64_t *)&v39 + 1), v40);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v35, v36, v37);
    }

  }
}

{
  __int128 v5;
  _QWORD *v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  __int128 v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  int v30;
  id v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36[48];
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v5 = a4[1];
  v38 = *a4;
  v39 = v5;
  v40 = a4[2];
  v6 = *(_QWORD **)(a3 + 80);
  if (v6)
  {
    v8 = *(void **)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x78));
    v37 = v8;
    MEMORY[0x1E0C80A78](a1, a2);
    if (v9)
    {
      MEMORY[0x1E0C80A78](v9, v10);
      v11 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v32 = &v26;
      v12 = v39;
      v13 = v40;
      v31 = (id)*((_QWORD *)&v40 + 1);
      v34 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v35 = static RepresentableContextValues.current;
      v33 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v28 = xmmword_1ECE02220;
      static RepresentableContextValues.current = v38;
      xmmword_1ECE02220 = v39;
      v14 = byte_1ECE02230;
      byte_1ECE02230 = v40;
      swift_retain();
      swift_retain();
      v27 = *((_QWORD *)&v12 + 1);
      HIDWORD(v26) = v13;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v13);
      v29 = v8;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v13);
      v16 = v34;
      v15 = v35;
      v17 = v28;
      v18 = v33;
      v30 = v14;
      outlined copy of RepresentableContextValues?(v35, v34, v28, v33, v14);
      outlined consume of RepresentableContextValues?(v15, v16, v17, v18, v14);
      v19 = *a5;
      swift_bridgeObjectRetain();
      v20 = v31;
      swift_retain();
      swift_retain();
      v21 = v27;
      v22 = BYTE4(v26);
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v27, SBYTE4(v26));
      UIKitSegmentedControlAdaptor.updateUIView(_:context:)(v29, (uint64_t)v36, v19);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v12, v21, v22);
      swift_bridgeObjectRelease();

      v23 = static RepresentableContextValues.current;
      v24 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v35;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v34;
      *(_QWORD *)&xmmword_1ECE02220 = v17;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v33;
      v25 = byte_1ECE02230;
      byte_1ECE02230 = v30;
      outlined consume of RepresentableContextValues?(v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v12, v21, v22);
    }

  }
}

void specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unsigned __int128 v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];
  char v53;
  id v54;
  id v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v10, v11);
  v15 = (char *)&v40 - v14;
  v16 = a4[1];
  v56 = *a4;
  v57 = v16;
  v58 = a4[2];
  v17 = *(_QWORD **)(a3 + 80);
  if (v17)
  {
    v18 = *(void **)((char *)v17 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v17) + 0x78));
    v55 = v18;
    MEMORY[0x1E0C80A78](v12, v13);
    *(&v40 - 4) = (uint64_t)&v56;
    *(&v40 - 3) = a5;
    *(&v40 - 2) = (uint64_t)&v55;
    if (a1)
    {
      MEMORY[0x1E0C80A78](v19, v20);
      *(&v40 - 4) = a1;
      *(&v40 - 3) = a2;
      *(&v40 - 2) = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
      *(&v40 - 1) = v21;
      v22 = v18;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v49 = &v40;
      v23 = v56;
      v24 = v57;
      v25 = v58;
      v47 = (id)*((_QWORD *)&v58 + 1);
      v26 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v43 = static RepresentableContextValues.current;
      v50 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v51 = xmmword_1ECE02220;
      static RepresentableContextValues.current = v56;
      xmmword_1ECE02220 = v57;
      v44 = a5;
      v27 = byte_1ECE02230;
      byte_1ECE02230 = v58;
      v28 = *((_QWORD *)&v56 + 1);
      swift_retain();
      v42 = v23;
      swift_retain();
      v40 = v24 >> 64;
      v41 = v24;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v24, *((uint64_t *)&v24 + 1), v25);
      v45 = v18;
      swift_retain();
      v29 = v28;
      swift_retain();
      v30 = v25;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v24, *((uint64_t *)&v24 + 1), v25);
      v31 = v43;
      v46 = v26;
      v33 = v50;
      v32 = v51;
      v48 = v27;
      outlined copy of RepresentableContextValues?(v43, v26, v51, v50, v27);
      outlined consume of RepresentableContextValues?(v31, v26, v32, v33, v27);
      outlined init with copy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(v44, (uint64_t)v15);
      v52[0] = v42;
      v52[1] = v29;
      v34 = v41;
      v35 = v40;
      v52[2] = v41;
      v52[3] = v40;
      v53 = v30;
      v54 = v47;
      v36 = v47;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);
      TextViewAdaptor.updateUIView(_:context:)((uint64_t)v45, (uint64_t)v52);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);

      outlined destroy of PlatformViewRepresentableAdaptor<TextViewAdaptor>((uint64_t)v15);
      v37 = static RepresentableContextValues.current;
      v38 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v31;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v46;
      *(_QWORD *)&xmmword_1ECE02220 = v51;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v50;
      v39 = byte_1ECE02230;
      byte_1ECE02230 = v48;
      outlined consume of RepresentableContextValues?(v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v39);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);
    }

  }
}

{
  __int128 v5;
  _QWORD *v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  __int128 v36;
  char v37;
  id v38;
  _BYTE v39[80];
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v5 = a4[1];
  v41 = *a4;
  v42 = v5;
  v43 = a4[2];
  v6 = *(_QWORD **)(a3 + 80);
  if (v6)
  {
    v8 = *(void **)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x78));
    v40 = v8;
    MEMORY[0x1E0C80A78](a1, a2);
    if (v9)
    {
      MEMORY[0x1E0C80A78](v9, v10);
      v11 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v31 = &v25;
      v12 = v41;
      v13 = v42;
      v14 = v43;
      v29 = (id)*((_QWORD *)&v43 + 1);
      v34 = static RepresentableContextValues.current;
      v15 = xmmword_1ECE02220;
      v33 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v32 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      static RepresentableContextValues.current = v41;
      xmmword_1ECE02220 = v42;
      v16 = byte_1ECE02230;
      byte_1ECE02230 = v43;
      v26 = *((_QWORD *)&v41 + 1);
      swift_retain();
      v27 = v12;
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v13, *((uint64_t *)&v13 + 1), v14);
      v28 = v8;
      swift_retain();
      swift_retain();
      v17 = v14;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v13, *((uint64_t *)&v13 + 1), v14);
      v18 = v34;
      v19 = v33;
      v20 = v32;
      v30 = v16;
      outlined copy of RepresentableContextValues?(v34, v33, v15, v32, v16);
      outlined consume of RepresentableContextValues?(v18, v19, v15, v20, v16);
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitPagingView>(a5, (uint64_t)v39);
      v35[0] = v27;
      v35[1] = v26;
      v36 = v13;
      v37 = v17;
      v38 = v29;
      v21 = v29;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v13, *((uint64_t *)&v13 + 1), v17);
      UIKitPagingView.updateUIView(_:context:)(v28, (uint64_t)v35);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v13, *((uint64_t *)&v13 + 1), v17);

      outlined destroy of PlatformViewRepresentableAdaptor<UIKitPagingView>((uint64_t)v39);
      v22 = static RepresentableContextValues.current;
      v23 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v34;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v33;
      *(_QWORD *)&xmmword_1ECE02220 = v15;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v32;
      v24 = byte_1ECE02230;
      byte_1ECE02230 = v30;
      outlined consume of RepresentableContextValues?(v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v13, *((uint64_t *)&v13 + 1), v17);
    }

  }
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unsigned __int128 v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];
  char v53;
  id v54;
  id v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v10, v11);
  v15 = (char *)&v40 - v14;
  v16 = a4[1];
  v56 = *a4;
  v57 = v16;
  v58 = a4[2];
  v17 = *(_QWORD **)(a3 + 80);
  if (v17)
  {
    v18 = *(void **)((char *)v17 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v17) + 0x78));
    v55 = v18;
    MEMORY[0x1E0C80A78](v12, v13);
    *(&v40 - 4) = (uint64_t)&v56;
    *(&v40 - 3) = a5;
    *(&v40 - 2) = (uint64_t)&v55;
    if (a1)
    {
      MEMORY[0x1E0C80A78](v19, v20);
      *(&v40 - 4) = a1;
      *(&v40 - 3) = a2;
      *(&v40 - 2) = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
      *(&v40 - 1) = v21;
      v22 = v18;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v49 = &v40;
      v23 = v56;
      v24 = v57;
      v25 = v58;
      v47 = (id)*((_QWORD *)&v58 + 1);
      v26 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v43 = static RepresentableContextValues.current;
      v50 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v51 = xmmword_1ECE02220;
      static RepresentableContextValues.current = v56;
      xmmword_1ECE02220 = v57;
      v44 = a5;
      v27 = byte_1ECE02230;
      byte_1ECE02230 = v58;
      v28 = *((_QWORD *)&v56 + 1);
      swift_retain();
      v42 = v23;
      swift_retain();
      v40 = v24 >> 64;
      v41 = v24;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v24, *((uint64_t *)&v24 + 1), v25);
      v45 = v18;
      swift_retain();
      v29 = v28;
      swift_retain();
      v30 = v25;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v24, *((uint64_t *)&v24 + 1), v25);
      v31 = v43;
      v46 = v26;
      v33 = v50;
      v32 = v51;
      v48 = v27;
      outlined copy of RepresentableContextValues?(v43, v26, v51, v50, v27);
      outlined consume of RepresentableContextValues?(v31, v26, v32, v33, v27);
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(v44, (uint64_t)v15);
      v52[0] = v42;
      v52[1] = v29;
      v34 = v41;
      v35 = v40;
      v52[2] = v41;
      v52[3] = v40;
      v53 = v30;
      v54 = v47;
      v36 = v47;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);
      UIKitTextViewAdaptor.updateUIView(_:context:)(v45, (uint64_t)v52);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);

      outlined destroy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>((uint64_t)v15);
      v37 = static RepresentableContextValues.current;
      v38 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v31;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v46;
      *(_QWORD *)&xmmword_1ECE02220 = v51;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v50;
      v39 = byte_1ECE02230;
      byte_1ECE02230 = v48;
      outlined consume of RepresentableContextValues?(v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v39);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);
    }

  }
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unsigned __int128 v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];
  char v53;
  id v54;
  id v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v10, v11);
  v15 = (char *)&v40 - v14;
  v16 = a4[1];
  v56 = *a4;
  v57 = v16;
  v58 = a4[2];
  v17 = *(_QWORD **)(a3 + 80);
  if (v17)
  {
    v18 = *(void **)((char *)v17 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v17) + 0x78));
    v55 = v18;
    MEMORY[0x1E0C80A78](v12, v13);
    *(&v40 - 4) = (uint64_t)&v56;
    *(&v40 - 3) = a5;
    *(&v40 - 2) = (uint64_t)&v55;
    if (a1)
    {
      MEMORY[0x1E0C80A78](v19, v20);
      *(&v40 - 4) = a1;
      *(&v40 - 3) = a2;
      *(&v40 - 2) = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
      *(&v40 - 1) = v21;
      v22 = v18;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v49 = &v40;
      v23 = v56;
      v24 = v57;
      v25 = v58;
      v47 = (id)*((_QWORD *)&v58 + 1);
      v26 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v43 = static RepresentableContextValues.current;
      v50 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v51 = xmmword_1ECE02220;
      static RepresentableContextValues.current = v56;
      xmmword_1ECE02220 = v57;
      v44 = a5;
      v27 = byte_1ECE02230;
      byte_1ECE02230 = v58;
      v28 = *((_QWORD *)&v56 + 1);
      swift_retain();
      v42 = v23;
      swift_retain();
      v40 = v24 >> 64;
      v41 = v24;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v24, *((uint64_t *)&v24 + 1), v25);
      v45 = v18;
      swift_retain();
      v29 = v28;
      swift_retain();
      v30 = v25;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v24, *((uint64_t *)&v24 + 1), v25);
      v31 = v43;
      v46 = v26;
      v33 = v50;
      v32 = v51;
      v48 = v27;
      outlined copy of RepresentableContextValues?(v43, v26, v51, v50, v27);
      outlined consume of RepresentableContextValues?(v31, v26, v32, v33, v27);
      outlined init with copy of PlatformViewRepresentableAdaptor<KitRepresentable>(v44, (uint64_t)v15);
      v52[0] = v42;
      v52[1] = v29;
      v34 = v41;
      v35 = v40;
      v52[2] = v41;
      v52[3] = v40;
      v53 = v30;
      v54 = v47;
      v36 = v47;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);
      KitRepresentable.updateUIView(_:context:)(v45, (uint64_t)v52);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);

      outlined destroy of PlatformViewRepresentableAdaptor<KitRepresentable>((uint64_t)v15);
      v37 = static RepresentableContextValues.current;
      v38 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v31;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v46;
      *(_QWORD *)&xmmword_1ECE02220 = v51;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v50;
      v39 = byte_1ECE02230;
      byte_1ECE02230 = v48;
      outlined consume of RepresentableContextValues?(v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v39);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);
    }

  }
}

{
  __int128 v5;
  _QWORD *v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  __int128 v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[4];
  char v64;
  void *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  uint64_t v76;
  id v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;

  v5 = a4[1];
  v78 = *a4;
  v79 = v5;
  v80 = a4[2];
  v6 = *(_QWORD **)(a3 + 80);
  if (v6)
  {
    v8 = *(void **)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x78));
    v77 = v8;
    MEMORY[0x1E0C80A78](a1, a2);
    if (v9)
    {
      MEMORY[0x1E0C80A78](v9, v10);
      v11 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v58 = &v40;
      v12 = v78;
      v13 = v79;
      v14 = v80;
      v53 = (void *)*((_QWORD *)&v80 + 1);
      v15 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v62 = static RepresentableContextValues.current;
      v16 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v61 = xmmword_1ECE02220;
      static RepresentableContextValues.current = v78;
      xmmword_1ECE02220 = v79;
      v17 = byte_1ECE02230;
      byte_1ECE02230 = v80;
      v43 = *((_QWORD *)&v78 + 1);
      swift_retain();
      swift_retain();
      v60 = *((_QWORD *)&v13 + 1);
      v59 = v14;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v13, *((uint64_t *)&v13 + 1), v14);
      v54 = v8;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v13, *((uint64_t *)&v13 + 1), v14);
      v18 = v62;
      v19 = v15;
      v56 = v15;
      v20 = v15;
      v21 = v61;
      v55 = v16;
      v57 = v17;
      outlined copy of RepresentableContextValues?(v62, v20, v61, v16, v17);
      outlined consume of RepresentableContextValues?(v18, v19, v21, v16, v17);
      v22 = *(_QWORD *)a5;
      v23 = *(unsigned __int8 *)(a5 + 8);
      v24 = *(_QWORD *)(a5 + 16);
      v25 = *(unsigned __int8 *)(a5 + 25);
      v26 = *(_QWORD *)(a5 + 32);
      v42 = *(unsigned __int8 *)(a5 + 40);
      v27 = *(_QWORD *)(a5 + 48);
      LODWORD(v18) = *(unsigned __int8 *)(a5 + 56);
      v28 = *(_QWORD *)(a5 + 80);
      v41 = *(unsigned __int8 *)(a5 + 24);
      v66 = v22;
      v45 = v22;
      v49 = v23;
      v67 = v23;
      v68 = v24;
      v46 = v24;
      v69 = v41;
      v70 = v25;
      v47 = v25;
      v71 = v26;
      v48 = v26;
      v72 = v42;
      v73 = v27;
      v51 = v27;
      v74 = v18;
      v50 = v18;
      v52 = *(_OWORD *)(a5 + 64);
      v75 = v52;
      v76 = v28;
      v44 = v28;
      v63[0] = v12;
      v63[1] = v43;
      v63[2] = v13;
      v63[3] = v60;
      v64 = v59;
      v29 = v53;
      v65 = v53;
      outlined copy of Environment<Bool>.Content(v22, v23);
      v30 = v24;
      v31 = v41;
      outlined copy of Environment<CGFloat?>.Content(v30, v41, v25);
      v32 = v26;
      v33 = v42;
      outlined copy of Environment<Color?>.Content(v32, v42);
      outlined copy of Environment<Bool>.Content(v27, v18);
      swift_bridgeObjectRetain();
      swift_retain();
      v34 = v29;
      swift_retain();
      swift_retain();
      v35 = v60;
      v36 = v59;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v13, v60, v59);
      UIKitPasteControl.updateUIView(_:context:)(v54, (uint64_t)v63);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v13, v35, v36);

      outlined consume of Environment<Bool>.Content(v45, v49);
      outlined consume of Environment<CGFloat?>.Content(v46, v31, v47);
      outlined consume of Environment<Color?>.Content(v48, v33);
      outlined consume of Environment<Bool>.Content(v51, v50);
      swift_release();
      swift_bridgeObjectRelease();
      v37 = static RepresentableContextValues.current;
      v38 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v62;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v56;
      *(_QWORD *)&xmmword_1ECE02220 = v61;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v55;
      v39 = byte_1ECE02230;
      byte_1ECE02230 = v57;
      outlined consume of RepresentableContextValues?(v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v39);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v13, v35, v36);
    }

  }
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unsigned __int128 v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  id v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];
  char v53;
  id v54;
  id v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v10, v11);
  v15 = (char *)&v40 - v14;
  v16 = a4[1];
  v56 = *a4;
  v57 = v16;
  v58 = a4[2];
  v17 = *(_QWORD **)(a3 + 80);
  if (v17)
  {
    v18 = *(void **)((char *)v17 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v17) + 0x78));
    v55 = v18;
    MEMORY[0x1E0C80A78](v12, v13);
    *(&v40 - 4) = (uint64_t)&v56;
    *(&v40 - 3) = a5;
    *(&v40 - 2) = (uint64_t)&v55;
    if (a1)
    {
      MEMORY[0x1E0C80A78](v19, v20);
      *(&v40 - 4) = a1;
      *(&v40 - 3) = a2;
      *(&v40 - 2) = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
      *(&v40 - 1) = v21;
      v22 = v18;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v49 = &v40;
      v23 = v56;
      v24 = v57;
      v25 = v58;
      v47 = (id)*((_QWORD *)&v58 + 1);
      v26 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v43 = static RepresentableContextValues.current;
      v50 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v51 = xmmword_1ECE02220;
      static RepresentableContextValues.current = v56;
      xmmword_1ECE02220 = v57;
      v44 = a5;
      v27 = byte_1ECE02230;
      byte_1ECE02230 = v58;
      v28 = *((_QWORD *)&v56 + 1);
      swift_retain();
      v42 = v23;
      swift_retain();
      v40 = v24 >> 64;
      v41 = v24;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v24, *((uint64_t *)&v24 + 1), v25);
      v45 = v18;
      swift_retain();
      v29 = v28;
      swift_retain();
      v30 = v25;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v24, *((uint64_t *)&v24 + 1), v25);
      v31 = v43;
      v46 = v26;
      v33 = v50;
      v32 = v51;
      v48 = v27;
      outlined copy of RepresentableContextValues?(v43, v26, v51, v50, v27);
      outlined consume of RepresentableContextValues?(v31, v26, v32, v33, v27);
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(v44, (uint64_t)v15);
      v52[0] = v42;
      v52[1] = v29;
      v34 = v41;
      v35 = v40;
      v52[2] = v41;
      v52[3] = v40;
      v53 = v30;
      v54 = v47;
      v36 = v47;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);
      UIKitRichTextEditor.updateUIView(_:context:)(v45, (uint64_t)v52);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);

      outlined destroy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>((uint64_t)v15);
      v37 = static RepresentableContextValues.current;
      v38 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v31;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v46;
      *(_QWORD *)&xmmword_1ECE02220 = v51;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v50;
      v39 = byte_1ECE02230;
      byte_1ECE02230 = v48;
      outlined consume of RepresentableContextValues?(v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v39);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);
    }

  }
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  id v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  __int128 v38;
  __int128 v39;
  char v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  id v49;
  uint64_t v50[5];
  id v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v10, v11);
  v14 = a4[1];
  v52 = *a4;
  v53 = v14;
  v54 = a4[2];
  v15 = *(_QWORD **)(a3 + 80);
  if (v15)
  {
    v16 = *(void **)((char *)v15 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v15) + 0x78));
    v51 = v16;
    MEMORY[0x1E0C80A78](v12, v13);
    *(&v41 - 4) = (uint64_t)&v52;
    *(&v41 - 3) = a5;
    *(&v41 - 2) = (uint64_t)&v51;
    if (a1)
    {
      MEMORY[0x1E0C80A78](v17, v18);
      *(&v41 - 4) = a1;
      *(&v41 - 3) = a2;
      *(&v41 - 2) = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
      *(&v41 - 1) = v20;
      v21 = v16;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v48 = &v41;
      v22 = v52;
      v23 = v53;
      v24 = v54;
      v49 = (id)*((_QWORD *)&v54 + 1);
      v25 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v41 = static RepresentableContextValues.current;
      v26 = xmmword_1ECE02220;
      v43 = a5;
      v44 = v19;
      v27 = byte_1ECE02230;
      static RepresentableContextValues.current = v52;
      xmmword_1ECE02220 = v53;
      byte_1ECE02230 = v54;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v23, *((uint64_t *)&v23 + 1), v24);
      v28 = v16;
      v29 = v41;
      v42 = v28;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v23, *((uint64_t *)&v23 + 1), v24);
      outlined copy of RepresentableContextValues?(v29, v25, v26, *((uint64_t *)&v26 + 1), v27);
      v46 = v26;
      v47 = v25;
      v45 = v27;
      v30 = v27;
      v31 = v44;
      outlined consume of RepresentableContextValues?(v29, v25, v26, *((uint64_t *)&v26 + 1), v30);
      v32 = outlined init with copy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(v43, v31);
      LODWORD(v43) = v24;
      if (v24 == 1)
      {
        MEMORY[0x1E0C80A78](v32, v33);
        *(&v41 - 2) = __ROR8__(v23, 32);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v23, *((uint64_t *)&v23 + 1), 1);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v23, *((uint64_t *)&v23 + 1), 1);
        v34 = v49;
        swift_retain();
        swift_retain();
        static Update.ensure<A>(_:)();
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v23, *((uint64_t *)&v23 + 1), 1);
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v23, *((uint64_t *)&v23 + 1), 1);

        v35 = v50[0];
      }
      else
      {
        v36 = v49;
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v23, *((uint64_t *)&v23 + 1), 0);
        v35 = v23;
      }
      v37 = v49;
      v50[0] = (uint64_t)v49;
      v50[1] = *((_QWORD *)&v22 + 1);
      v50[2] = v35;
      v50[3] = v26;
      v50[4] = v22;
      UIKitAdaptableTabView.updateUIViewController(_:context:)(v42, v50);
      swift_release();
      swift_release();

      swift_release();
      swift_release();
      outlined destroy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(v31);
      v38 = static RepresentableContextValues.current;
      v39 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v29;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v47;
      *(_QWORD *)&xmmword_1ECE02220 = v46;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = *((_QWORD *)&v26 + 1);
      v40 = byte_1ECE02230;
      byte_1ECE02230 = v45;
      outlined consume of RepresentableContextValues?(v38, *((uint64_t *)&v38 + 1), v39, *((uint64_t *)&v39 + 1), v40);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v23, *((uint64_t *)&v23 + 1), v43);
    }

  }
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unsigned __int128 v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  id v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];
  char v53;
  id v54;
  id v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v10, v11);
  v15 = (char *)&v40 - v14;
  v16 = a4[1];
  v56 = *a4;
  v57 = v16;
  v58 = a4[2];
  v17 = *(_QWORD **)(a3 + 80);
  if (v17)
  {
    v18 = *(void **)((char *)v17 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v17) + 0x78));
    v55 = v18;
    MEMORY[0x1E0C80A78](v12, v13);
    *(&v40 - 4) = (uint64_t)&v56;
    *(&v40 - 3) = a5;
    *(&v40 - 2) = (uint64_t)&v55;
    if (a1)
    {
      MEMORY[0x1E0C80A78](v19, v20);
      *(&v40 - 4) = a1;
      *(&v40 - 3) = a2;
      *(&v40 - 2) = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
      *(&v40 - 1) = v21;
      v22 = v18;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v49 = &v40;
      v23 = v56;
      v24 = v57;
      v25 = v58;
      v47 = (id)*((_QWORD *)&v58 + 1);
      v26 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v43 = static RepresentableContextValues.current;
      v50 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v51 = xmmword_1ECE02220;
      static RepresentableContextValues.current = v56;
      xmmword_1ECE02220 = v57;
      v44 = a5;
      v27 = byte_1ECE02230;
      byte_1ECE02230 = v58;
      v28 = *((_QWORD *)&v56 + 1);
      swift_retain();
      v42 = v23;
      swift_retain();
      v40 = v24 >> 64;
      v41 = v24;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v24, *((uint64_t *)&v24 + 1), v25);
      v45 = v18;
      swift_retain();
      v29 = v28;
      swift_retain();
      v30 = v25;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v24, *((uint64_t *)&v24 + 1), v25);
      v31 = v43;
      v46 = v26;
      v33 = v50;
      v32 = v51;
      v48 = v27;
      outlined copy of RepresentableContextValues?(v43, v26, v51, v50, v27);
      outlined consume of RepresentableContextValues?(v31, v26, v32, v33, v27);
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(v44, (uint64_t)v15);
      v52[0] = v42;
      v52[1] = v29;
      v34 = v41;
      v35 = v40;
      v52[2] = v41;
      v52[3] = v40;
      v53 = v30;
      v54 = v47;
      v36 = v47;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);
      UIKitSearchBarAdaptor.updateUIView(_:context:)(v45, (uint64_t)v52);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);

      outlined destroy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>((uint64_t)v15);
      v37 = static RepresentableContextValues.current;
      v38 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v31;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v46;
      *(_QWORD *)&xmmword_1ECE02220 = v51;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v50;
      v39 = byte_1ECE02230;
      byte_1ECE02230 = v48;
      outlined consume of RepresentableContextValues?(v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v39);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);
    }

  }
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unsigned __int128 v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];
  char v53;
  id v54;
  id v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v10, v11);
  v15 = (char *)&v40 - v14;
  v16 = a4[1];
  v56 = *a4;
  v57 = v16;
  v58 = a4[2];
  v17 = *(_QWORD **)(a3 + 80);
  if (v17)
  {
    v18 = *(void **)((char *)v17 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v17) + 0x78));
    v55 = v18;
    MEMORY[0x1E0C80A78](v12, v13);
    *(&v40 - 4) = (uint64_t)&v56;
    *(&v40 - 3) = a5;
    *(&v40 - 2) = (uint64_t)&v55;
    if (a1)
    {
      MEMORY[0x1E0C80A78](v19, v20);
      *(&v40 - 4) = a1;
      *(&v40 - 3) = a2;
      *(&v40 - 2) = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
      *(&v40 - 1) = v21;
      v22 = v18;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v49 = &v40;
      v23 = v56;
      v24 = v57;
      v25 = v58;
      v47 = (id)*((_QWORD *)&v58 + 1);
      v26 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v43 = static RepresentableContextValues.current;
      v50 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v51 = xmmword_1ECE02220;
      static RepresentableContextValues.current = v56;
      xmmword_1ECE02220 = v57;
      v44 = a5;
      v27 = byte_1ECE02230;
      byte_1ECE02230 = v58;
      v28 = *((_QWORD *)&v56 + 1);
      swift_retain();
      v42 = v23;
      swift_retain();
      v40 = v24 >> 64;
      v41 = v24;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v24, *((uint64_t *)&v24 + 1), v25);
      v45 = v18;
      swift_retain();
      v29 = v28;
      swift_retain();
      v30 = v25;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v24, *((uint64_t *)&v24 + 1), v25);
      v31 = v43;
      v46 = v26;
      v33 = v50;
      v32 = v51;
      v48 = v27;
      outlined copy of RepresentableContextValues?(v43, v26, v51, v50, v27);
      outlined consume of RepresentableContextValues?(v31, v26, v32, v33, v27);
      outlined init with copy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(v44, (uint64_t)v15);
      v52[0] = v42;
      v52[1] = v29;
      v34 = v41;
      v35 = v40;
      v52[2] = v41;
      v52[3] = v40;
      v53 = v30;
      v54 = v47;
      v36 = v47;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);
      PlatformTextFieldAdaptor.updateUIView(_:context:)(v45, (uint64_t)v52);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);

      outlined destroy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>((uint64_t)v15);
      v37 = static RepresentableContextValues.current;
      v38 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v31;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v46;
      *(_QWORD *)&xmmword_1ECE02220 = v51;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v50;
      v39 = byte_1ECE02230;
      byte_1ECE02230 = v48;
      outlined consume of RepresentableContextValues?(v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v39);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);
    }

  }
}

{
  __int128 v5;
  _QWORD *v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  __int128 v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[368];
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v5 = a4[1];
  v47 = *a4;
  v48 = v5;
  v49 = a4[2];
  v6 = *(_QWORD **)(a3 + 80);
  if (v6)
  {
    v8 = *(void **)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x78));
    v46 = v8;
    MEMORY[0x1E0C80A78](a1, a2);
    if (v9)
    {
      MEMORY[0x1E0C80A78](v9, v10);
      v11 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v35 = &v30;
      v12 = v48;
      v13 = v49;
      v31 = *((_QWORD *)&v47 + 1);
      v32 = *((_QWORD *)&v49 + 1);
      v38 = static RepresentableContextValues.current;
      v39 = v47;
      v14 = xmmword_1ECE02220;
      v37 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v15 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v36 = byte_1ECE02230;
      static RepresentableContextValues.current = v47;
      xmmword_1ECE02220 = v48;
      byte_1ECE02230 = v49;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v13);
      v33 = v8;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v13);
      v17 = v37;
      v16 = v38;
      v18 = v36;
      outlined copy of RepresentableContextValues?(v38, v37, v14, v15, v36);
      v19 = v14;
      *(_QWORD *)&v34 = v14;
      *((_QWORD *)&v34 + 1) = v15;
      v20 = v15;
      v21 = v31;
      v22 = v32;
      outlined consume of RepresentableContextValues?(v16, v17, v19, v20, v18);
      v23 = outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>(a5, (uint64_t)v45);
      if (v13 == 1)
      {
        MEMORY[0x1E0C80A78](v23, v24);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), 1);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), 1);
        swift_retain_n();
        swift_retain();
        swift_retain();
        static Update.ensure<A>(_:)();
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), 1);
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), 1);
        swift_release();
        v26 = v40;
        v25 = v41;
      }
      else
      {
        swift_retain();
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), 0);
        v25 = *((_QWORD *)&v12 + 1);
        v26 = v12;
      }
      v40 = v22;
      v41 = v21;
      v42 = v26;
      v43 = v25;
      v44 = v39;
      NavigationSplitRepresentable.updateUIViewController(_:context:)(v33, &v40);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>((uint64_t)v45);
      v27 = static RepresentableContextValues.current;
      v28 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v38;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v37;
      xmmword_1ECE02220 = v34;
      v29 = byte_1ECE02230;
      byte_1ECE02230 = v36;
      outlined consume of RepresentableContextValues?(v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v12, *((uint64_t *)&v12 + 1), v13);
    }

  }
}

{
  __int128 v5;
  _QWORD *v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  char v35;
  void *v36;
  unint64_t v37;
  id v38;
  __int128 v39;
  int v40;
  void **v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[24];
  _BYTE v50[136];
  uint64_t v51;
  char v52;
  id v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;

  v5 = a4[1];
  v54 = *a4;
  v55 = v5;
  v56 = a4[2];
  v6 = *(_QWORD **)(a3 + 80);
  if (v6)
  {
    v8 = *(void **)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x78));
    v53 = v8;
    MEMORY[0x1E0C80A78](a1, a2);
    if (v9)
    {
      MEMORY[0x1E0C80A78](v9, v10);
      v11 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v41 = &v36;
      v12 = *((_QWORD *)&v54 + 1);
      v13 = v55;
      v14 = v56;
      v36 = (void *)*((_QWORD *)&v56 + 1);
      v44 = static RepresentableContextValues.current;
      v45 = v54;
      v15 = xmmword_1ECE02220;
      v43 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v16 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v42 = byte_1ECE02230;
      static RepresentableContextValues.current = v54;
      xmmword_1ECE02220 = v55;
      byte_1ECE02230 = v56;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v13, *((uint64_t *)&v13 + 1), v14);
      v38 = v8;
      swift_retain();
      swift_retain();
      v46 = *((_QWORD *)&v13 + 1);
      outlined copy of RepresentableContextValues.EnvironmentStorage(v13, *((uint64_t *)&v13 + 1), v14);
      v18 = v43;
      v17 = v44;
      v19 = v42;
      outlined copy of RepresentableContextValues?(v44, v43, v15, v16, v42);
      *(_QWORD *)&v39 = v15;
      *((_QWORD *)&v39 + 1) = v16;
      v20 = v15;
      v21 = v36;
      outlined consume of RepresentableContextValues?(v17, v18, v20, v16, v19);
      v22 = outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>(a5, (uint64_t)v49);
      v40 = v14;
      if (v14 == 1)
      {
        MEMORY[0x1E0C80A78](v22, v23);
        swift_retain();
        swift_retain();
        v24 = v46;
        outlined copy of RepresentableContextValues.EnvironmentStorage(v13, v46, 1);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v13, v24, 1);
        v25 = v21;
        swift_retain();
        swift_retain();
        static Update.ensure<A>(_:)();
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v13, v24, 1);
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v13, v24, 1);

        v26 = v47;
        v27 = v48;
      }
      else
      {
        v28 = v21;
        swift_retain();
        swift_retain();
        v27 = v46;
        outlined copy of RepresentableContextValues.EnvironmentStorage(v13, v46, 0);
        v26 = v13;
      }
      v37 = *(_QWORD *)&v50[84];
      v29 = v51;
      v30 = v52;
      swift_retain();
      swift_retain();
      outlined copy of Environment<Bool>.Content(v29, v30);
      v31 = specialized Environment.wrappedValue.getter(v29, v30);
      outlined consume of Environment<Bool>.Content(v29, v30);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_VariadicView_Children>, MEMORY[0x1E0CE5600], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_187BF9830;
      outlined init with copy of _VariadicView_Children((uint64_t)v50, v32 + 32);
      swift_retain();
      swift_retain();
      specialized NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(v38, v26, v27, v12, v37, v31 & 1, v26, v27, v32);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_release_n();
      swift_release_n();
      outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>((uint64_t)v49);
      v33 = static RepresentableContextValues.current;
      v34 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v44;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v43;
      xmmword_1ECE02220 = v39;
      v35 = byte_1ECE02230;
      byte_1ECE02230 = v42;
      outlined consume of RepresentableContextValues?(v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1), v35);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v13, v46, v40);
    }

  }
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unsigned __int128 v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];
  char v53;
  id v54;
  id v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v10, v11);
  v15 = (char *)&v40 - v14;
  v16 = a4[1];
  v56 = *a4;
  v57 = v16;
  v58 = a4[2];
  v17 = *(_QWORD **)(a3 + 80);
  if (v17)
  {
    v18 = *(void **)((char *)v17 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v17) + 0x78));
    v55 = v18;
    MEMORY[0x1E0C80A78](v12, v13);
    *(&v40 - 4) = (uint64_t)&v56;
    *(&v40 - 3) = a5;
    *(&v40 - 2) = (uint64_t)&v55;
    if (a1)
    {
      MEMORY[0x1E0C80A78](v19, v20);
      *(&v40 - 4) = a1;
      *(&v40 - 3) = a2;
      *(&v40 - 2) = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
      *(&v40 - 1) = v21;
      v22 = v18;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v49 = &v40;
      v23 = v56;
      v24 = v57;
      v25 = v58;
      v47 = (id)*((_QWORD *)&v58 + 1);
      v26 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v43 = static RepresentableContextValues.current;
      v50 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v51 = xmmword_1ECE02220;
      static RepresentableContextValues.current = v56;
      xmmword_1ECE02220 = v57;
      v44 = a5;
      v27 = byte_1ECE02230;
      byte_1ECE02230 = v58;
      v28 = *((_QWORD *)&v56 + 1);
      swift_retain();
      v42 = v23;
      swift_retain();
      v40 = v24 >> 64;
      v41 = v24;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v24, *((uint64_t *)&v24 + 1), v25);
      v45 = v18;
      swift_retain();
      v29 = v28;
      swift_retain();
      v30 = v25;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v24, *((uint64_t *)&v24 + 1), v25);
      v31 = v43;
      v46 = v26;
      v33 = v50;
      v32 = v51;
      v48 = v27;
      outlined copy of RepresentableContextValues?(v43, v26, v51, v50, v27);
      outlined consume of RepresentableContextValues?(v31, v26, v32, v33, v27);
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(v44, (uint64_t)v15);
      v52[0] = v42;
      v52[1] = v29;
      v34 = v41;
      v35 = v40;
      v52[2] = v41;
      v52[3] = v40;
      v53 = v30;
      v54 = v47;
      v36 = v47;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);
      UIKitDatePickerRepresentable.updateUIView(_:context:)(v45, (uint64_t)v52);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);

      outlined destroy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>((uint64_t)v15);
      v37 = static RepresentableContextValues.current;
      v38 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v31;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v46;
      *(_QWORD *)&xmmword_1ECE02220 = v51;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v50;
      v39 = byte_1ECE02230;
      byte_1ECE02230 = v48;
      outlined consume of RepresentableContextValues?(v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v39);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);
    }

  }
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unsigned __int128 v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];
  char v53;
  id v54;
  id v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v10, v11);
  v15 = (char *)&v40 - v14;
  v16 = a4[1];
  v56 = *a4;
  v57 = v16;
  v58 = a4[2];
  v17 = *(_QWORD **)(a3 + 80);
  if (v17)
  {
    v18 = *(void **)((char *)v17 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v17) + 0x78));
    v55 = v18;
    MEMORY[0x1E0C80A78](v12, v13);
    *(&v40 - 4) = (uint64_t)&v56;
    *(&v40 - 3) = a5;
    *(&v40 - 2) = (uint64_t)&v55;
    if (a1)
    {
      MEMORY[0x1E0C80A78](v19, v20);
      *(&v40 - 4) = a1;
      *(&v40 - 3) = a2;
      *(&v40 - 2) = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
      *(&v40 - 1) = v21;
      v22 = v18;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v49 = &v40;
      v23 = v56;
      v24 = v57;
      v25 = v58;
      v47 = (id)*((_QWORD *)&v58 + 1);
      v26 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v43 = static RepresentableContextValues.current;
      v50 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v51 = xmmword_1ECE02220;
      static RepresentableContextValues.current = v56;
      xmmword_1ECE02220 = v57;
      v44 = a5;
      v27 = byte_1ECE02230;
      byte_1ECE02230 = v58;
      v28 = *((_QWORD *)&v56 + 1);
      swift_retain();
      v42 = v23;
      swift_retain();
      v40 = v24 >> 64;
      v41 = v24;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v24, *((uint64_t *)&v24 + 1), v25);
      v45 = v18;
      swift_retain();
      v29 = v28;
      swift_retain();
      v30 = v25;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v24, *((uint64_t *)&v24 + 1), v25);
      v31 = v43;
      v46 = v26;
      v33 = v50;
      v32 = v51;
      v48 = v27;
      outlined copy of RepresentableContextValues?(v43, v26, v51, v50, v27);
      outlined consume of RepresentableContextValues?(v31, v26, v32, v33, v27);
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(v44, (uint64_t)v15);
      v52[0] = v42;
      v52[1] = v29;
      v34 = v41;
      v35 = v40;
      v52[2] = v41;
      v52[3] = v40;
      v53 = v30;
      v54 = v47;
      v36 = v47;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);
      UIKitCalendarViewRepresentable.updateUIView(_:context:)(v45, (uint64_t)v52);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);

      outlined destroy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>((uint64_t)v15);
      v37 = static RepresentableContextValues.current;
      v38 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v31;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v46;
      *(_QWORD *)&xmmword_1ECE02220 = v51;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v50;
      v39 = byte_1ECE02230;
      byte_1ECE02230 = v48;
      outlined consume of RepresentableContextValues?(v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v39);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, v35, v30);
    }

  }
}

void specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, __int128 *a5)
{
  __int128 v5;
  _QWORD *v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  id v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  void *v25;
  id v26;
  __int128 v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52[8];
  uint64_t v53;

  v5 = a4[1];
  v41 = *a4;
  v42 = v5;
  v43 = a4[2];
  v6 = *(_QWORD **)(a3 + 80);
  if (v6)
  {
    v8 = *(void **)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x78));
    v40 = v8;
    MEMORY[0x1E0C80A78](a1, a2);
    if (v9)
    {
      MEMORY[0x1E0C80A78](v9, v10);
      v12 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v13 = v11[1];
      v44[0] = *v11;
      v44[1] = v13;
      v45 = v11[2];
      v38 = &v30;
      v14 = *(_QWORD *)&v44[0];
      v15 = v13;
      v16 = v45;
      v39 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v17 = static RepresentableContextValues.current;
      v32 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v33 = xmmword_1ECE02220;
      static RepresentableContextValues.current = v44[0];
      xmmword_1ECE02220 = v13;
      v31 = byte_1ECE02230;
      byte_1ECE02230 = v45;
      swift_retain();
      v37 = v14;
      swift_retain();
      v36 = *((_QWORD *)&v15 + 1);
      outlined copy of RepresentableContextValues.EnvironmentStorage(v15, *((uint64_t *)&v15 + 1), v16);
      v35 = v8;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v15, *((uint64_t *)&v15 + 1), v16);
      v18 = v17;
      v34 = v17;
      v19 = v17;
      v20 = v39;
      v21 = v33;
      v22 = v32;
      v23 = v31;
      outlined copy of RepresentableContextValues?(v19, v39, v33, v32, v31);
      outlined consume of RepresentableContextValues?(v18, v20, v21, v22, v23);
      v24 = a5[1];
      v46 = *a5;
      v47 = v24;
      v48 = a5[2];
      v49 = v46;
      v50 = v24;
      v51 = v48;
      v25 = (void *)v24;
      v53 = v46;
      outlined init with take of Image.Resolved?((uint64_t)&v51, (uint64_t)v52, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968]);
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v53);
      swift_retain();
      v26 = v25;
      outlined retain of String?((uint64_t)v52);
      specialized PlatformViewRepresentableAdaptor.updateViewProvider(_:context:)(v35, (uint64_t)v44);
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v53);

      swift_release();
      outlined release of String?((uint64_t)v52);
      v27 = static RepresentableContextValues.current;
      v28 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v34;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v39;
      *(_QWORD *)&xmmword_1ECE02220 = v21;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v22;
      v29 = byte_1ECE02230;
      byte_1ECE02230 = v23;
      outlined consume of RepresentableContextValues?(v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v15, v36, v16);
    }

  }
}

{
  __int128 v5;
  _QWORD *v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  id v23;
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[4];
  char v38;
  void *v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47;

  v5 = a4[1];
  v41 = *a4;
  v42 = v5;
  v43 = a4[2];
  v6 = *(_QWORD **)(a3 + 80);
  if (v6)
  {
    v8 = *(void **)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x78));
    v40 = v8;
    MEMORY[0x1E0C80A78](a1, a2);
    if (v9)
    {
      MEMORY[0x1E0C80A78](v9, v10);
      v11 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v33 = &v27;
      v12 = v41;
      v13 = v42;
      v14 = v43;
      v29 = (void *)*((_QWORD *)&v43 + 1);
      v35 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v36 = static RepresentableContextValues.current;
      v15 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v34 = xmmword_1ECE02220;
      static RepresentableContextValues.current = v41;
      xmmword_1ECE02220 = v42;
      v16 = byte_1ECE02230;
      byte_1ECE02230 = v43;
      v28 = *((_QWORD *)&v41 + 1);
      swift_retain();
      swift_retain();
      v27 = *((_QWORD *)&v13 + 1);
      outlined copy of RepresentableContextValues.EnvironmentStorage(v13, *((uint64_t *)&v13 + 1), v14);
      v30 = v8;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v13, *((uint64_t *)&v13 + 1), v14);
      v17 = v36;
      v18 = v35;
      v19 = v34;
      v31 = v15;
      v32 = v16;
      outlined copy of RepresentableContextValues?(v36, v35, v34, v15, v16);
      outlined consume of RepresentableContextValues?(v17, v18, v19, v15, v16);
      v20 = a5[1];
      v44 = *a5;
      v45 = v20;
      v46 = *((_BYTE *)a5 + 32);
      v47 = v44;
      v37[0] = v12;
      v37[1] = v28;
      v21 = v27;
      v37[2] = v13;
      v37[3] = v27;
      v38 = v14;
      v22 = v29;
      v39 = v29;
      outlined retain of [Text.Modifier]((uint64_t)&v47);
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v47 + 8);
      swift_retain();
      v23 = v22;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v13, v21, v14);
      SystemSegmentedControl.updateUIView(_:context:)(v30, (uint64_t)v37);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v13, v21, v14);

      outlined release of _IncrementalLayout_Placements((uint64_t)&v47);
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v47 + 8);
      swift_release();
      v24 = static RepresentableContextValues.current;
      v25 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v36;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v35;
      *(_QWORD *)&xmmword_1ECE02220 = v34;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v31;
      v26 = byte_1ECE02230;
      byte_1ECE02230 = v32;
      outlined consume of RepresentableContextValues?(v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v13, v21, v14);
    }

  }
}

{
  __int128 v5;
  _QWORD *v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  id v23;
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[4];
  char v38;
  void *v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  char v48[8];
  char v49[8];
  uint64_t v50;

  v5 = a4[1];
  v41 = *a4;
  v42 = v5;
  v43 = a4[2];
  v6 = *(_QWORD **)(a3 + 80);
  if (v6)
  {
    v8 = *(void **)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x78));
    v40 = v8;
    MEMORY[0x1E0C80A78](a1, a2);
    if (v9)
    {
      MEMORY[0x1E0C80A78](v9, v10);
      v11 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v33 = &v27;
      v12 = v41;
      v13 = v42;
      v14 = v43;
      v29 = (void *)*((_QWORD *)&v43 + 1);
      v35 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v36 = static RepresentableContextValues.current;
      v15 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v34 = xmmword_1ECE02220;
      static RepresentableContextValues.current = v41;
      xmmword_1ECE02220 = v42;
      v16 = byte_1ECE02230;
      byte_1ECE02230 = v43;
      v28 = *((_QWORD *)&v41 + 1);
      swift_retain();
      swift_retain();
      v27 = v13;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v13, *((uint64_t *)&v13 + 1), v14);
      v30 = v8;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v13, *((uint64_t *)&v13 + 1), v14);
      v17 = v36;
      v18 = v35;
      v19 = v34;
      v31 = v15;
      v32 = v16;
      outlined copy of RepresentableContextValues?(v36, v35, v34, v15, v16);
      outlined consume of RepresentableContextValues?(v17, v18, v19, v15, v16);
      v20 = a5[1];
      v44 = *a5;
      v45 = v20;
      v46 = a5[2];
      v47 = v44;
      outlined init with take of Image.Resolved?((uint64_t)&v45 + 8, (uint64_t)v48, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
      outlined init with take of Image.Resolved?((uint64_t)&v46, (uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for AnyShapeStyle?, MEMORY[0x1E0CE1D58]);
      v50 = *((_QWORD *)&v46 + 1);
      v37[0] = v12;
      v37[1] = v28;
      v21 = v27;
      v37[2] = v27;
      v37[3] = *((_QWORD *)&v13 + 1);
      v38 = v14;
      v22 = v29;
      v39 = v29;
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v47);
      swift_retain();
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v48);
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v49);
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v50);
      v23 = v22;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v21, *((uint64_t *)&v13 + 1), v14);
      Switch.updateUIView(_:context:)(v30, v37);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v21, *((uint64_t *)&v13 + 1), v14);

      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v47);
      swift_release();
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v48);
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v49);
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v50);
      v24 = static RepresentableContextValues.current;
      v25 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v36;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v35;
      *(_QWORD *)&xmmword_1ECE02220 = v34;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v31;
      v26 = byte_1ECE02230;
      byte_1ECE02230 = v32;
      outlined consume of RepresentableContextValues?(v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v21, *((uint64_t *)&v13 + 1), v14);
    }

  }
}

void specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int128 v19;
  char v20;
  Class isa;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  __int128 v35;
  __int128 v36;
  unsigned __int8 v37;

  v4 = *(_OWORD *)(a4 + 16);
  v35 = *(_OWORD *)a4;
  v36 = v4;
  v37 = *(_BYTE *)(a4 + 32);
  v5 = *(_QWORD **)(a3 + 80);
  if (v5)
  {
    v6 = *(void **)((char *)v5 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0x78));
    v34 = v6;
    MEMORY[0x1E0C80A78](a1, a2);
    if (v7)
    {
      MEMORY[0x1E0C80A78](v7, v8);
      v9 = v6;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v31 = &v25;
      v10 = v36;
      v11 = v37;
      v32 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v33 = static RepresentableContextValues.current;
      v12 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v27 = xmmword_1ECE02220;
      static RepresentableContextValues.current = v35;
      xmmword_1ECE02220 = v36;
      v13 = byte_1ECE02230;
      byte_1ECE02230 = v37;
      swift_retain();
      swift_retain();
      v26 = v10;
      HIDWORD(v25) = v11;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v10, *((uint64_t *)&v10 + 1), v11);
      v28 = v6;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v10, *((uint64_t *)&v10 + 1), v11);
      v15 = v32;
      v14 = v33;
      v16 = v27;
      v29 = v12;
      v30 = v13;
      outlined copy of RepresentableContextValues?(v33, v32, v27, v12, v13);
      outlined consume of RepresentableContextValues?(v14, v15, v16, v12, v13);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      v19 = v26;
      v18 = v19 >> 64;
      v17 = v19;
      v20 = BYTE4(v25);
      outlined copy of RepresentableContextValues.EnvironmentStorage(v26, *((uint64_t *)&v26 + 1), SBYTE4(v25));
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v28, sel_setItems_, isa);
      swift_release();
      swift_release();

      outlined consume of RepresentableContextValues.EnvironmentStorage(v17, v18, v20);
      swift_bridgeObjectRelease();
      v22 = static RepresentableContextValues.current;
      v23 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v33;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v32;
      *(_QWORD *)&xmmword_1ECE02220 = v16;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v29;
      v24 = byte_1ECE02230;
      byte_1ECE02230 = v30;
      outlined consume of RepresentableContextValues?(v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v17, v18, v20);
    }

  }
}

void specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5)
{
  __int128 v5;
  _QWORD *v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  int v36;
  __int128 *v37;
  uint64_t v38;
  _QWORD v39[2];
  __int128 v40;
  char v41;
  id v42;
  __int128 v43;
  __int128 v44;
  char v45;

  v5 = *(_OWORD *)(a4 + 16);
  v43 = *(_OWORD *)a4;
  v44 = v5;
  v45 = *(_BYTE *)(a4 + 32);
  v6 = *(_QWORD **)(a3 + 80);
  if (v6)
  {
    v8 = *(void **)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x78));
    v42 = v8;
    MEMORY[0x1E0C80A78](a1, a2);
    if (v9)
    {
      MEMORY[0x1E0C80A78](v9, v10);
      v11 = v8;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v12 = v43;
      v37 = &v31;
      v13 = v44;
      v14 = v45;
      v33 = *((_QWORD *)&static RepresentableContextValues.current + 1);
      v34 = static RepresentableContextValues.current;
      v38 = *((_QWORD *)&xmmword_1ECE02220 + 1);
      v32 = xmmword_1ECE02220;
      static RepresentableContextValues.current = v43;
      xmmword_1ECE02220 = v44;
      v15 = byte_1ECE02230;
      byte_1ECE02230 = v45;
      v16 = *((_QWORD *)&v43 + 1);
      swift_retain();
      swift_retain();
      v31 = v13;
      v17 = v14;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v13, *((uint64_t *)&v13 + 1), v14);
      v35 = v8;
      swift_retain();
      v18 = v16;
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v13, *((uint64_t *)&v13 + 1), v17);
      v20 = v33;
      v19 = v34;
      v21 = v32;
      v22 = v38;
      v36 = v15;
      outlined copy of RepresentableContextValues?(v34, v33, v32, v38, v15);
      outlined consume of RepresentableContextValues?(v19, v20, v21, v22, v15);
      v23 = *a5;
      v24 = *((_QWORD *)a5 + 1);
      v39[0] = v12;
      v39[1] = v18;
      v27 = v31;
      v26 = v27 >> 64;
      v25 = v27;
      v40 = v31;
      v41 = v17;
      swift_retain();
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v25, v26, v17);
      LinearUIKitProgressView.Base.updateUIView(_:context:)(v35, (uint64_t)v39, v24, v23);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v25, v26, v17);
      swift_release();
      v28 = static RepresentableContextValues.current;
      v29 = xmmword_1ECE02220;
      *(_QWORD *)&static RepresentableContextValues.current = v19;
      *((_QWORD *)&static RepresentableContextValues.current + 1) = v20;
      *(_QWORD *)&xmmword_1ECE02220 = v21;
      *((_QWORD *)&xmmword_1ECE02220 + 1) = v38;
      v30 = byte_1ECE02230;
      byte_1ECE02230 = v36;
      outlined consume of RepresentableContextValues?(v28, *((uint64_t *)&v28 + 1), v29, *((uint64_t *)&v29 + 1), v30);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v25, v26, v17);
    }

  }
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  char v26;
  id v28;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _QWORD v35[4];
  char v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v6 = *a1;
  v5 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v9 = *((_BYTE *)a1 + 32);
  v10 = static RepresentableContextValues.current;
  v32 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  v33 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v6;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v5;
  v30 = v6;
  *(_QWORD *)&xmmword_1ECE02220 = v7;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v8;
  v34 = byte_1ECE02230;
  byte_1ECE02230 = v9;
  v11 = v5;
  swift_retain();
  swift_retain();
  v31 = v9;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v8, v9);
  swift_retain();
  v12 = v11;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v8, v9);
  outlined copy of RepresentableContextValues?(v10, *((uint64_t *)&v10 + 1), v33, v32, v34);
  outlined consume of RepresentableContextValues?(v10, *((uint64_t *)&v10 + 1), v33, v32, v34);
  v13 = *a2;
  v14 = a2[1];
  v15 = a2[2];
  v16 = a2[3];
  v17 = a2[4];
  v18 = a2[5];
  v19 = a2[6];
  v20 = a2[8];
  v21 = *((unsigned __int8 *)a2 + 72);
  v22 = (void *)a1[5];
  v35[0] = v30;
  v35[1] = v12;
  v35[2] = v7;
  v35[3] = v8;
  v36 = v31;
  v37 = v22;
  v38 = v13;
  v39 = v14;
  v40 = v15;
  v41 = v16;
  v42 = v17;
  v43 = v18;
  v44 = v19;
  v45 = a2[7];
  v46 = v20;
  v23 = v21;
  v47 = v21;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<Color?>.Content(v20, v23);
  v28 = v22;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v8, v31);
  SystemSlider.updateUIView(_:context:)(a3, (uint64_t)v35);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v8, v31);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  outlined consume of Environment<Color?>.Content(v20, v23);
  v24 = static RepresentableContextValues.current;
  v25 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v10;
  *(_QWORD *)&xmmword_1ECE02220 = v33;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v32;
  v26 = byte_1ECE02230;
  byte_1ECE02230 = v34;
  outlined consume of RepresentableContextValues?(v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v8, v31);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[48];

  v5 = *a1;
  v4 = a1[1];
  v7 = a1[2];
  v6 = a1[3];
  v8 = *((_BYTE *)a1 + 32);
  v9 = static RepresentableContextValues.current;
  v10 = static RepresentableContextValues.current;
  v23 = xmmword_1ECE02220;
  v22 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  *(_QWORD *)&static RepresentableContextValues.current = v5;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v4;
  *(_QWORD *)&xmmword_1ECE02220 = v7;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v6;
  v11 = byte_1ECE02230;
  byte_1ECE02230 = v8;
  swift_retain();
  swift_retain();
  v12 = v6;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);
  outlined copy of RepresentableContextValues?(v9, *((uint64_t *)&v10 + 1), v23, v22, v11);
  outlined consume of RepresentableContextValues?(v9, *((uint64_t *)&v10 + 1), v23, v22, v11);
  v13 = *a2;
  v14 = (void *)a1[5];
  swift_bridgeObjectRetain();
  v15 = v14;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v12, v8);
  UIKitSegmentedControlAdaptor.updateUIView(_:context:)(a3, (uint64_t)v24, v13);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v12, v8);
  swift_bridgeObjectRelease();

  v16 = static RepresentableContextValues.current;
  v17 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v10;
  *(_QWORD *)&xmmword_1ECE02220 = v23;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v22;
  v18 = byte_1ECE02230;
  byte_1ECE02230 = v11;
  outlined consume of RepresentableContextValues?(v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v12, v8);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, void **a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v25;
  int v26;
  void **v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v27 = a2;
  v28 = a3;
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(unsigned __int8 *)(a1 + 32);
  v9 = static RepresentableContextValues.current;
  v10 = qword_1ECE02220;
  v11 = qword_1ECE02228;
  v26 = byte_1ECE02230;
  *(_QWORD *)&static RepresentableContextValues.current = v4;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v5;
  qword_1ECE02220 = v6;
  qword_1ECE02228 = v7;
  byte_1ECE02230 = v8;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  v29 = v4;
  v12 = v26;
  swift_retain();
  swift_retain();
  v30 = v6;
  v31 = v7;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  outlined copy of RepresentableContextValues?(v9, *((uint64_t *)&v9 + 1), v10, v11, v26);
  v34 = *((_QWORD *)&v9 + 1);
  v35 = v9;
  v32 = v11;
  v33 = v10;
  v13 = outlined consume of RepresentableContextValues?(v9, *((uint64_t *)&v9 + 1), v10, v11, v26);
  v15 = *v27;
  if (v8 == 1)
  {
    v27 = (void **)&v25;
    MEMORY[0x1E0C80A78](v13, v14);
    v16 = v30;
    swift_retain();
    swift_retain();
    v17 = v31;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v16, v31, 1);
    v18 = v15;
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(a1);
    swift_retain();
    swift_retain();
    swift_retain();
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v16, v17, 1);
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(a1);
  }
  else
  {
    v19 = v15;
    swift_retain();
    swift_retain();
    swift_retain();
    v16 = v30;
    v17 = v31;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v30, v31, 0);
  }
  specialized TabItemGroup.Coordinator.addChildRemovingExistingIfNeeded(_:to:)(v15, v28);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v20 = static RepresentableContextValues.current;
  v21 = qword_1ECE02220;
  v22 = qword_1ECE02228;
  *(_QWORD *)&static RepresentableContextValues.current = v35;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v34;
  qword_1ECE02220 = v33;
  qword_1ECE02228 = v32;
  v23 = byte_1ECE02230;
  byte_1ECE02230 = v12;
  outlined consume of RepresentableContextValues?(v20, *((uint64_t *)&v20 + 1), v21, v22, v23);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v16, v17, v8);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char *v19;
  double v20;
  double v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *((_QWORD *)&static RepresentableContextValues.current + 1);
  v38 = xmmword_1ECE02220;
  v39 = static RepresentableContextValues.current;
  v37 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v5;
  *(_QWORD *)&xmmword_1ECE02220 = v7;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v6;
  v10 = v6;
  v11 = byte_1ECE02230;
  byte_1ECE02230 = v8;
  v12 = v8;
  swift_retain();
  swift_retain();
  v36 = v12;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v10, v12);
  swift_retain();
  swift_retain();
  v13 = v10;
  v32 = v10;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v10, v12);
  v34 = v11;
  outlined copy of RepresentableContextValues?(v39, v9, v38, v37, v11);
  outlined consume of RepresentableContextValues?(v39, v9, v38, v37, v11);
  v14 = *a2;
  v15 = a2[1];
  v16 = a2[2];
  v17 = a2[3];
  v35 = a2[4];
  v30 = a2[6];
  v31 = a2[5];
  v18 = *(void **)(a1 + 40);
  swift_retain();
  v19 = v18;
  v29 = v19;
  outlined copy of AppIntentExecutor?(v15);
  outlined copy of AppIntentExecutor?(v17);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v13, v36);
  objc_msgSend(a3, sel_setValue_, 0.0);
  v20 = -2.0;
  if (!v17)
    v20 = 0.0;
  objc_msgSend(a3, sel_setMinimumValue_, v20);
  v21 = 2.0;
  if (!v15)
    v21 = 0.0;
  objc_msgSend(a3, sel_setMaximumValue_, v21);
  objc_msgSend(a3, sel_setStepValue_, 1.0);
  v22 = &v19[OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration];
  v23 = *(_QWORD *)&v19[OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 8];
  v28 = *((_QWORD *)v22 + 3);
  *(_QWORD *)v22 = v14;
  *((_QWORD *)v22 + 1) = v15;
  *((_QWORD *)v22 + 2) = v16;
  *((_QWORD *)v22 + 3) = v17;
  *((_QWORD *)v22 + 4) = v35;
  *((_QWORD *)v22 + 5) = v31;
  *((_QWORD *)v22 + 6) = v30;
  swift_retain();
  outlined copy of AppIntentExecutor?(v15);
  outlined copy of AppIntentExecutor?(v17);
  swift_retain();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v23);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v28);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v32, v36);
  swift_release();

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v15);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v17);
  swift_release();
  v24 = static RepresentableContextValues.current;
  v25 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v39;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v9;
  *(_QWORD *)&xmmword_1ECE02220 = v38;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v37;
  v26 = byte_1ECE02230;
  byte_1ECE02230 = v34;
  outlined consume of RepresentableContextValues?(v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v32, v36);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  char v36;
  void *v37;

  v31 = a2;
  v32 = a3;
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v4, v5);
  v27 = (uint64_t)&v25 - v6;
  v8 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  v11 = *((unsigned __int8 *)a1 + 32);
  v12 = static RepresentableContextValues.current;
  v33 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  v34 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v8;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v7;
  *(_QWORD *)&xmmword_1ECE02220 = v9;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v10;
  v13 = byte_1ECE02230;
  byte_1ECE02230 = v11;
  swift_retain();
  swift_retain();
  v26 = v9;
  HIDWORD(v25) = v11;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  v28 = *((_QWORD *)&v12 + 1);
  v29 = v12;
  v14 = v33;
  v15 = v34;
  v30 = v13;
  outlined copy of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v34, v33, v13);
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v15, v14, v13);
  v16 = v27;
  outlined init with copy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(v31, v27);
  v17 = (void *)a1[5];
  v35[0] = v8;
  v35[1] = v7;
  v18 = v26;
  v35[2] = v26;
  v35[3] = v10;
  v19 = v10;
  LOBYTE(v10) = BYTE4(v25);
  v36 = BYTE4(v25);
  v37 = v17;
  v20 = v17;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);
  TextViewAdaptor.updateUIView(_:context:)(v32, (uint64_t)v35);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);

  outlined destroy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(v16);
  v21 = static RepresentableContextValues.current;
  v22 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v29;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v28;
  *(_QWORD *)&xmmword_1ECE02220 = v34;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v33;
  v23 = byte_1ECE02230;
  byte_1ECE02230 = v30;
  outlined consume of RepresentableContextValues?(v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  void *v11;
  id v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v17;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  char v23;
  void *v24;
  _BYTE v25[88];

  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *((_QWORD *)&static RepresentableContextValues.current + 1);
  v21 = static RepresentableContextValues.current;
  v17 = xmmword_1ECE02220;
  v20 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  v5 = static RepresentableContextValues.current;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v4;
  *(_QWORD *)&xmmword_1ECE02220 = v6;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v7;
  v10 = byte_1ECE02230;
  byte_1ECE02230 = v8;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  outlined copy of RepresentableContextValues?(v21, v9, v17, v20, v10);
  outlined consume of RepresentableContextValues?(v21, v9, v17, v20, v10);
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitPagingView>(a2, (uint64_t)v25);
  v11 = *(void **)(a1 + 40);
  v22[0] = v5;
  v22[1] = v4;
  v22[2] = v6;
  v22[3] = v7;
  v23 = v8;
  v24 = v11;
  v12 = v11;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  UIKitPagingView.updateUIView(_:context:)(a3, (uint64_t)v22);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);

  outlined destroy of PlatformViewRepresentableAdaptor<UIKitPagingView>((uint64_t)v25);
  v13 = static RepresentableContextValues.current;
  v14 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v21;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v9;
  *(_QWORD *)&xmmword_1ECE02220 = v17;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v20;
  v15 = byte_1ECE02230;
  byte_1ECE02230 = v10;
  outlined consume of RepresentableContextValues?(v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
}

{
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  Class isa;
  __int128 v12;
  __int128 v13;
  char v14;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 32);
  v16 = v6;
  v7 = static RepresentableContextValues.current;
  v8 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  v9 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v4;
  *(_QWORD *)&xmmword_1ECE02220 = v17;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v5;
  v10 = byte_1ECE02230;
  byte_1ECE02230 = v6;
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  v18 = v8;
  outlined copy of RepresentableContextValues?(v7, *((uint64_t *)&v7 + 1), v9, v8, v10);
  outlined consume of RepresentableContextValues?(v7, *((uint64_t *)&v7 + 1), v9, v8, v10);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v17, v5, v16);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a3, sel_setItems_, isa);

  outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  swift_bridgeObjectRelease();
  v12 = static RepresentableContextValues.current;
  v13 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v7;
  xmmword_1ECE02220 = __PAIR128__(v18, v9);
  v14 = byte_1ECE02230;
  byte_1ECE02230 = v10;
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14);
  return outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
}

{
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[80];

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned __int8 *)(a1 + 32);
  v7 = static RepresentableContextValues.current;
  v8 = xmmword_1ECE02220;
  v9 = byte_1ECE02230;
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v22;
  *(_QWORD *)&xmmword_1ECE02220 = v4;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v5;
  byte_1ECE02230 = v6;
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined copy of RepresentableContextValues?(v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v9);
  v10 = v9;
  outlined consume of RepresentableContextValues?(v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v9);
  v11 = outlined init with copy of PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>(a2, (uint64_t)v27);
  if (v6 == 1)
  {
    MEMORY[0x1E0C80A78](v11, v12);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
    v13 = v22;
    swift_retain();
    v14 = v21;
    swift_retain();
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
    v4 = v23;
    v5 = v24;
  }
  else
  {
    v13 = v22;
    swift_retain();
    v14 = v21;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, 0);
  }
  v23 = v13;
  v24 = v4;
  v25 = v5;
  v26 = v14;
  BridgedNavigationView.updateUIViewController(_:context:)(a3, &v23);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>((uint64_t)v27);
  v15 = static RepresentableContextValues.current;
  v16 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v7;
  xmmword_1ECE02220 = v8;
  v17 = byte_1ECE02230;
  byte_1ECE02230 = v10;
  outlined consume of RepresentableContextValues?(v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17);
  return outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v43 = a3;
  v35 = a2;
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v4, v5);
  v45 = (uint64_t)&v34 - v6;
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(unsigned __int8 *)(a1 + 32);
  v12 = *((_QWORD *)&static RepresentableContextValues.current + 1);
  v44 = static RepresentableContextValues.current;
  v14 = qword_1ECE02220;
  v13 = qword_1ECE02228;
  v15 = byte_1ECE02230;
  *(_QWORD *)&static RepresentableContextValues.current = v7;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v8;
  qword_1ECE02220 = v9;
  qword_1ECE02228 = v10;
  byte_1ECE02230 = v11;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  v38 = v7;
  v16 = v8;
  swift_retain();
  swift_retain();
  v39 = v9;
  v40 = v10;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  v17 = v44;
  outlined copy of RepresentableContextValues?(v44, v12, v14, v13, v15);
  v41 = v14;
  v42 = v12;
  v37 = v13;
  v36 = v15;
  outlined consume of RepresentableContextValues?(v17, v12, v14, v13, v15);
  v18 = outlined init with copy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(v35, v45);
  v20 = *(void **)(a1 + 40);
  if (v11 == 1)
  {
    MEMORY[0x1E0C80A78](v18, v19);
    v21 = v38;
    v22 = v39;
    *(&v34 - 2) = __ROR8__(v39, 32);
    swift_retain();
    swift_retain();
    v23 = v40;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v22, v40, 1);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(a1);
    v24 = v20;
    swift_retain();
    swift_retain();
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v22, v23, 1);
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(a1);
    v26 = v46;
    v25 = v47;
  }
  else
  {
    v27 = v20;
    v21 = v38;
    swift_retain();
    swift_retain();
    v22 = v39;
    v23 = v40;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v39, v40, 0);
    v25 = v23;
    v26 = v22;
  }
  v46 = (uint64_t)v20;
  v47 = v16;
  v48 = v26;
  v49 = v25;
  v50 = v21;
  v28 = v45;
  UIKitAdaptableTabView.updateUIViewController(_:context:)(v43, &v46);
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(v28);
  v29 = static RepresentableContextValues.current;
  v30 = qword_1ECE02220;
  v31 = qword_1ECE02228;
  *(_QWORD *)&static RepresentableContextValues.current = v44;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v42;
  qword_1ECE02220 = v41;
  qword_1ECE02228 = v37;
  v32 = byte_1ECE02230;
  byte_1ECE02230 = v36;
  outlined consume of RepresentableContextValues?(v29, *((uint64_t *)&v29 + 1), v30, v31, v32);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v22, v23, v11);
}

{
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  char v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;

  v5 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 32);
  v17 = v6;
  v7 = static RepresentableContextValues.current;
  v20 = static RepresentableContextValues.current;
  v8 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v5;
  *(_QWORD *)&xmmword_1ECE02220 = v19;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v18;
  v9 = byte_1ECE02230;
  byte_1ECE02230 = v6;
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined copy of RepresentableContextValues?(v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v9);
  outlined consume of RepresentableContextValues?(v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v9);
  v10 = *(_QWORD *)a2;
  v11 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(v10, v11);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v19, v18, v17);
  specialized Environment.wrappedValue.getter(v10, v11, &v22);
  if (v22)
    v12 = 2030;
  else
    v12 = 3901;
  objc_msgSend(a3, sel_transitionToStyle_, v12);
  outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined consume of Environment<Bool>.Content(v10, v11);
  v13 = static RepresentableContextValues.current;
  v14 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v20;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = *((_QWORD *)&v7 + 1);
  xmmword_1ECE02220 = v8;
  v15 = byte_1ECE02230;
  byte_1ECE02230 = v9;
  outlined consume of RepresentableContextValues?(v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15);
  return outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  char v21;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[376];

  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(unsigned __int8 *)(a1 + 32);
  v9 = *((_QWORD *)&static RepresentableContextValues.current + 1);
  v30 = static RepresentableContextValues.current;
  v10 = xmmword_1ECE02220;
  v11 = byte_1ECE02230;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  v5 = static RepresentableContextValues.current;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v4;
  *(_QWORD *)&xmmword_1ECE02220 = v6;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v7;
  byte_1ECE02230 = v8;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  swift_retain();
  swift_retain();
  v25 = v6;
  v26 = v7;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  outlined copy of RepresentableContextValues?(v30, v9, v10, *((uint64_t *)&v10 + 1), v11);
  v27 = v9;
  v24 = v11;
  outlined consume of RepresentableContextValues?(v30, v9, v10, *((uint64_t *)&v10 + 1), v11);
  v12 = outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>(a2, (uint64_t)v36);
  v14 = *(_QWORD *)(a1 + 40);
  v29 = v8;
  if (v8 == 1)
  {
    MEMORY[0x1E0C80A78](v12, v13);
    v15 = v5;
    v16 = v25;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v25, v26, 1);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(a1);
    swift_retain();
    swift_retain();
    swift_retain();
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v25, v26, 1);
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(a1);
    v18 = v31;
    v17 = v32;
  }
  else
  {
    swift_retain();
    v15 = v5;
    swift_retain();
    swift_retain();
    v16 = v25;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v25, v26, 0);
    v17 = v26;
    v18 = v25;
  }
  v31 = v14;
  v32 = v4;
  v33 = v18;
  v34 = v17;
  v35 = v15;
  NavigationSplitRepresentable.updateUIViewController(_:context:)(a3, &v31);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>((uint64_t)v36);
  v19 = static RepresentableContextValues.current;
  v20 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v30;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v27;
  xmmword_1ECE02220 = v10;
  v21 = byte_1ECE02230;
  byte_1ECE02230 = v24;
  outlined consume of RepresentableContextValues?(v19, *((uint64_t *)&v19 + 1), v20, *((uint64_t *)&v20 + 1), v21);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v16, v10, v29);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  char v26;
  void *v28;
  uint64_t v30;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[24];
  _BYTE v38[120];
  uint64_t v39;
  char v40;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(unsigned __int8 *)(a1 + 32);
  v8 = static RepresentableContextValues.current;
  v9 = xmmword_1ECE02220;
  v34 = byte_1ECE02230;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v4;
  *(_QWORD *)&xmmword_1ECE02220 = v5;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v6;
  byte_1ECE02230 = v7;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v6, v7);
  swift_retain();
  swift_retain();
  v30 = v5;
  v10 = v5;
  v11 = v6;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v6, v7);
  outlined copy of RepresentableContextValues?(v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v34);
  outlined consume of RepresentableContextValues?(v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v34);
  v12 = outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>(a2, (uint64_t)v37);
  v14 = *(void **)(a1 + 40);
  v32 = v7;
  v33 = v11;
  v28 = v14;
  if (v7 == 1)
  {
    MEMORY[0x1E0C80A78](v12, v13);
    v15 = v30;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v30, v11, 1);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(a1);
    v16 = v14;
    swift_retain();
    swift_retain();
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v30, v11, 1);
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(a1);
    v17 = v35;
    v11 = v36;
  }
  else
  {
    v18 = v14;
    swift_retain();
    swift_retain();
    v15 = v30;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v30, v11, 0);
    v17 = v30;
  }
  v19 = *(_QWORD *)&v38[84];
  v20 = v39;
  v21 = v40;
  swift_retain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v20, v21);
  v22 = specialized Environment.wrappedValue.getter(v20, v21);
  outlined consume of Environment<Bool>.Content(v20, v21);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_VariadicView_Children>, MEMORY[0x1E0CE5600], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_187BF9830;
  outlined init with copy of _VariadicView_Children((uint64_t)v38, v23 + 32);
  swift_retain();
  swift_retain();
  specialized NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(a3, v17, v11, v4, v19, v22 & 1, v17, v11, v23);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release_n();
  swift_release_n();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>((uint64_t)v37);
  v24 = static RepresentableContextValues.current;
  v25 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v8;
  xmmword_1ECE02220 = v9;
  v26 = byte_1ECE02230;
  byte_1ECE02230 = v34;
  outlined consume of RepresentableContextValues?(v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v15, v33, v32);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  v25 = a3;
  v23 = a2;
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, type metadata accessor for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v21 - v6;
  v8 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v11 = *(unsigned __int8 *)(a1 + 32);
  v12 = static RepresentableContextValues.current;
  v13 = xmmword_1ECE02220;
  v14 = byte_1ECE02230;
  v26 = *(_QWORD *)a1;
  v27 = v8;
  *(_QWORD *)&static RepresentableContextValues.current = v26;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v8;
  *(_QWORD *)&xmmword_1ECE02220 = v10;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v9;
  v22 = v9;
  byte_1ECE02230 = v11;
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined copy of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14);
  v24 = v12;
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14);
  v15 = outlined init with copy of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>(v23, (uint64_t)v7);
  if (v11 == 1)
  {
    MEMORY[0x1E0C80A78](v15, v16);
    *(&v21 - 2) = __ROR8__(v10, 32);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
    swift_retain();
    swift_retain();
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  }
  else
  {
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v22, 0);
  }
  CustomizableURLDocumentViewControllerRepresentable.updateUIViewController(_:context:)(v25);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>((uint64_t)v7);
  v17 = static RepresentableContextValues.current;
  v18 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v24;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = *((_QWORD *)&v12 + 1);
  xmmword_1ECE02220 = v13;
  v19 = byte_1ECE02230;
  byte_1ECE02230 = v14;
  outlined consume of RepresentableContextValues?(v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19);
  return outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  char v36;
  void *v37;

  v31 = a2;
  v32 = a3;
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v4, v5);
  v27 = (uint64_t)&v25 - v6;
  v8 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  v11 = *((unsigned __int8 *)a1 + 32);
  v12 = static RepresentableContextValues.current;
  v33 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  v34 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v8;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v7;
  *(_QWORD *)&xmmword_1ECE02220 = v9;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v10;
  v13 = byte_1ECE02230;
  byte_1ECE02230 = v11;
  swift_retain();
  swift_retain();
  v26 = v9;
  HIDWORD(v25) = v11;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  v28 = *((_QWORD *)&v12 + 1);
  v29 = v12;
  v14 = v33;
  v15 = v34;
  v30 = v13;
  outlined copy of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v34, v33, v13);
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v15, v14, v13);
  v16 = v27;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(v31, v27);
  v17 = (void *)a1[5];
  v35[0] = v8;
  v35[1] = v7;
  v18 = v26;
  v35[2] = v26;
  v35[3] = v10;
  v19 = v10;
  LOBYTE(v10) = BYTE4(v25);
  v36 = BYTE4(v25);
  v37 = v17;
  v20 = v17;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);
  UIKitTextViewAdaptor.updateUIView(_:context:)(v32, (uint64_t)v35);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);

  outlined destroy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(v16);
  v21 = static RepresentableContextValues.current;
  v22 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v29;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v28;
  *(_QWORD *)&xmmword_1ECE02220 = v34;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v33;
  v23 = byte_1ECE02230;
  byte_1ECE02230 = v30;
  outlined consume of RepresentableContextValues?(v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  char v36;
  void *v37;

  v31 = a2;
  v32 = a3;
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v4, v5);
  v27 = (uint64_t)&v25 - v6;
  v8 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  v11 = *((unsigned __int8 *)a1 + 32);
  v12 = static RepresentableContextValues.current;
  v33 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  v34 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v8;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v7;
  *(_QWORD *)&xmmword_1ECE02220 = v9;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v10;
  v13 = byte_1ECE02230;
  byte_1ECE02230 = v11;
  swift_retain();
  swift_retain();
  v26 = v9;
  HIDWORD(v25) = v11;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  v28 = *((_QWORD *)&v12 + 1);
  v29 = v12;
  v14 = v33;
  v15 = v34;
  v30 = v13;
  outlined copy of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v34, v33, v13);
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v15, v14, v13);
  v16 = v27;
  outlined init with copy of PlatformViewRepresentableAdaptor<KitRepresentable>(v31, v27);
  v17 = (void *)a1[5];
  v35[0] = v8;
  v35[1] = v7;
  v18 = v26;
  v35[2] = v26;
  v35[3] = v10;
  v19 = v10;
  LOBYTE(v10) = BYTE4(v25);
  v36 = BYTE4(v25);
  v37 = v17;
  v20 = v17;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);
  KitRepresentable.updateUIView(_:context:)(v32, (uint64_t)v35);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);

  outlined destroy of PlatformViewRepresentableAdaptor<KitRepresentable>(v16);
  v21 = static RepresentableContextValues.current;
  v22 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v29;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v28;
  *(_QWORD *)&xmmword_1ECE02220 = v34;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v33;
  v23 = byte_1ECE02230;
  byte_1ECE02230 = v30;
  outlined consume of RepresentableContextValues?(v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  void *v20;
  id v21;
  __int128 v22;
  __int128 v23;
  char v24;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  _QWORD v37[4];
  char v38;
  void *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unsigned __int8 v43;
  char v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;

  v6 = *a1;
  v5 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v9 = *((_BYTE *)a1 + 32);
  v10 = static RepresentableContextValues.current;
  v35 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  v11 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v6;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v5;
  *(_QWORD *)&xmmword_1ECE02220 = v7;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v8;
  v36 = byte_1ECE02230;
  byte_1ECE02230 = v9;
  v33 = v5;
  swift_retain();
  swift_retain();
  v34 = v9;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v8, v9);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v8, v9);
  v31 = v11;
  outlined copy of RepresentableContextValues?(v10, *((uint64_t *)&v10 + 1), v11, v35, v36);
  outlined consume of RepresentableContextValues?(v10, *((uint64_t *)&v10 + 1), v11, v35, v36);
  v12 = *(_BYTE *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_BYTE *)(a2 + 25);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(_BYTE *)(a2 + 40);
  v17 = *(_QWORD *)(a2 + 48);
  v27 = v16;
  v28 = *(_BYTE *)(a2 + 56);
  v18 = *(_QWORD *)(a2 + 80);
  v19 = *(_BYTE *)(a2 + 24);
  v26 = v19;
  v40 = *(_QWORD *)a2;
  v29 = v40;
  v30 = v12;
  v41 = v12;
  v42 = v13;
  v43 = v19;
  v44 = v14;
  v45 = v15;
  v46 = v16;
  v47 = v17;
  v48 = v28;
  v49 = *(_OWORD *)(a2 + 64);
  v50 = v18;
  v20 = (void *)a1[5];
  v37[0] = v6;
  v37[1] = v33;
  v37[2] = v7;
  v37[3] = v8;
  v38 = v34;
  v39 = v20;
  outlined copy of Environment<Bool>.Content(v40, v12);
  outlined copy of Environment<CGFloat?>.Content(v13, v26, v14);
  outlined copy of Environment<Color?>.Content(v15, v27);
  outlined copy of Environment<Bool>.Content(v17, v28);
  swift_bridgeObjectRetain();
  swift_retain();
  v21 = v20;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v8, v34);
  UIKitPasteControl.updateUIView(_:context:)(a3, (uint64_t)v37);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v8, v34);

  outlined consume of Environment<Bool>.Content(v29, v30);
  outlined consume of Environment<CGFloat?>.Content(v13, v26, v14);
  outlined consume of Environment<Color?>.Content(v15, v27);
  outlined consume of Environment<Bool>.Content(v17, v28);
  swift_release();
  swift_bridgeObjectRelease();
  v22 = static RepresentableContextValues.current;
  v23 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v10;
  xmmword_1ECE02220 = __PAIR128__(v35, v31);
  v24 = byte_1ECE02230;
  byte_1ECE02230 = v36;
  outlined consume of RepresentableContextValues?(v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v8, v34);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  char v36;
  void *v37;

  v31 = a2;
  v32 = a3;
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v4, v5);
  v27 = (uint64_t)&v25 - v6;
  v8 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  v11 = *((unsigned __int8 *)a1 + 32);
  v12 = static RepresentableContextValues.current;
  v33 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  v34 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v8;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v7;
  *(_QWORD *)&xmmword_1ECE02220 = v9;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v10;
  v13 = byte_1ECE02230;
  byte_1ECE02230 = v11;
  swift_retain();
  swift_retain();
  v26 = v9;
  HIDWORD(v25) = v11;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  v28 = *((_QWORD *)&v12 + 1);
  v29 = v12;
  v14 = v33;
  v15 = v34;
  v30 = v13;
  outlined copy of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v34, v33, v13);
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v15, v14, v13);
  v16 = v27;
  outlined init with copy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(v31, v27);
  v17 = (void *)a1[5];
  v35[0] = v8;
  v35[1] = v7;
  v18 = v26;
  v35[2] = v26;
  v35[3] = v10;
  v19 = v10;
  LOBYTE(v10) = BYTE4(v25);
  v36 = BYTE4(v25);
  v37 = v17;
  v20 = v17;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);
  PlatformTextFieldAdaptor.updateUIView(_:context:)(v32, (uint64_t)v35);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);

  outlined destroy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(v16);
  v21 = static RepresentableContextValues.current;
  v22 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v29;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v28;
  *(_QWORD *)&xmmword_1ECE02220 = v34;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v33;
  v23 = byte_1ECE02230;
  byte_1ECE02230 = v30;
  outlined consume of RepresentableContextValues?(v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  char v36;
  void *v37;

  v31 = a2;
  v32 = a3;
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v4, v5);
  v27 = (uint64_t)&v25 - v6;
  v8 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  v11 = *((unsigned __int8 *)a1 + 32);
  v12 = static RepresentableContextValues.current;
  v33 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  v34 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v8;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v7;
  *(_QWORD *)&xmmword_1ECE02220 = v9;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v10;
  v13 = byte_1ECE02230;
  byte_1ECE02230 = v11;
  swift_retain();
  swift_retain();
  v26 = v9;
  HIDWORD(v25) = v11;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  v28 = *((_QWORD *)&v12 + 1);
  v29 = v12;
  v14 = v33;
  v15 = v34;
  v30 = v13;
  outlined copy of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v34, v33, v13);
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v15, v14, v13);
  v16 = v27;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(v31, v27);
  v17 = (void *)a1[5];
  v35[0] = v8;
  v35[1] = v7;
  v18 = v26;
  v35[2] = v26;
  v35[3] = v10;
  v19 = v10;
  LOBYTE(v10) = BYTE4(v25);
  v36 = BYTE4(v25);
  v37 = v17;
  v20 = v17;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);
  UIKitDatePickerRepresentable.updateUIView(_:context:)(v32, (uint64_t)v35);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);

  outlined destroy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(v16);
  v21 = static RepresentableContextValues.current;
  v22 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v29;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v28;
  *(_QWORD *)&xmmword_1ECE02220 = v34;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v33;
  v23 = byte_1ECE02230;
  byte_1ECE02230 = v30;
  outlined consume of RepresentableContextValues?(v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  char v36;
  void *v37;

  v31 = a2;
  v32 = a3;
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v4, v5);
  v27 = (uint64_t)&v25 - v6;
  v8 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  v11 = *((unsigned __int8 *)a1 + 32);
  v12 = static RepresentableContextValues.current;
  v33 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  v34 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v8;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v7;
  *(_QWORD *)&xmmword_1ECE02220 = v9;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v10;
  v13 = byte_1ECE02230;
  byte_1ECE02230 = v11;
  swift_retain();
  swift_retain();
  v26 = v9;
  HIDWORD(v25) = v11;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  v28 = *((_QWORD *)&v12 + 1);
  v29 = v12;
  v14 = v33;
  v15 = v34;
  v30 = v13;
  outlined copy of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v34, v33, v13);
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v15, v14, v13);
  v16 = v27;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(v31, v27);
  v17 = (void *)a1[5];
  v35[0] = v8;
  v35[1] = v7;
  v18 = v26;
  v35[2] = v26;
  v35[3] = v10;
  v19 = v10;
  LOBYTE(v10) = BYTE4(v25);
  v36 = BYTE4(v25);
  v37 = v17;
  v20 = v17;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);
  UIKitCalendarViewRepresentable.updateUIView(_:context:)(v32, (uint64_t)v35);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);

  outlined destroy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(v16);
  v21 = static RepresentableContextValues.current;
  v22 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v29;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v28;
  *(_QWORD *)&xmmword_1ECE02220 = v34;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v33;
  v23 = byte_1ECE02230;
  byte_1ECE02230 = v30;
  outlined consume of RepresentableContextValues?(v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, __int128 *a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  id v12;
  __int128 v13;
  __int128 v14;
  char v15;
  char v17;
  uint64_t v19;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[16];
  _QWORD v26[2];

  v5 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v10 = *((_QWORD *)&static RepresentableContextValues.current + 1);
  v9 = static RepresentableContextValues.current;
  v11 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v5;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v4;
  *(_QWORD *)&xmmword_1ECE02220 = v7;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v6;
  v17 = byte_1ECE02230;
  byte_1ECE02230 = v8;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);
  v19 = v10;
  outlined copy of RepresentableContextValues?(v9, v10, v11, *((uint64_t *)&v11 + 1), v17);
  outlined consume of RepresentableContextValues?(v9, v10, v11, *((uint64_t *)&v11 + 1), v17);
  v22 = *a2;
  v23 = a2[1];
  v24 = a2[2];
  v26[0] = v22;
  outlined init with take of Image.Resolved?((uint64_t)&v24, (uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968]);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v26);
  swift_retain();
  v12 = (id)v23;
  outlined retain of String?((uint64_t)v25);
  specialized PlatformViewRepresentableAdaptor.updateViewProvider(_:context:)(a3, a1);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v26);

  swift_release();
  outlined release of String?((uint64_t)v25);
  v13 = static RepresentableContextValues.current;
  v14 = xmmword_1ECE02220;
  static RepresentableContextValues.current = __PAIR128__(v19, v9);
  xmmword_1ECE02220 = v11;
  v15 = byte_1ECE02230;
  byte_1ECE02230 = v17;
  outlined consume of RepresentableContextValues?(v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  void *v16;
  id v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v23;
  uint64_t v25;
  uint64_t v27[4];
  char v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34[8];
  char v35[8];
  _QWORD v36[2];

  v5 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *((_QWORD *)&static RepresentableContextValues.current + 1);
  v10 = static RepresentableContextValues.current;
  v11 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v5;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v4;
  v23 = v5;
  *(_QWORD *)&xmmword_1ECE02220 = v7;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v6;
  v12 = byte_1ECE02230;
  byte_1ECE02230 = v8;
  v13 = v4;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);
  swift_retain();
  v14 = v13;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);
  v25 = v10;
  outlined copy of RepresentableContextValues?(v10, v9, v11, *((uint64_t *)&v11 + 1), v12);
  outlined consume of RepresentableContextValues?(v10, v9, v11, *((uint64_t *)&v11 + 1), v12);
  v15 = a2[1];
  v30 = *a2;
  v31 = v15;
  v32 = a2[2];
  v33 = v30;
  outlined init with take of Image.Resolved?((uint64_t)&v31 + 8, (uint64_t)v34, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
  outlined init with take of Image.Resolved?((uint64_t)&v32, (uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for AnyShapeStyle?, MEMORY[0x1E0CE1D58]);
  v36[0] = *((_QWORD *)&v32 + 1);
  v16 = *(void **)(a1 + 40);
  v27[0] = v23;
  v27[1] = v14;
  v27[2] = v7;
  v27[3] = v6;
  v28 = v8;
  v29 = v16;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v33);
  swift_retain();
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v34);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v35);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v36);
  v17 = v16;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);
  Switch.updateUIView(_:context:)(a3, v27);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);

  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v33);
  swift_release();
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v34);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v35);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v36);
  v18 = static RepresentableContextValues.current;
  v19 = xmmword_1ECE02220;
  static RepresentableContextValues.current = __PAIR128__(v9, v25);
  xmmword_1ECE02220 = v11;
  v20 = byte_1ECE02230;
  byte_1ECE02230 = v12;
  outlined consume of RepresentableContextValues?(v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v6, v8);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  char v36;
  void *v37;

  v31 = a2;
  v32 = a3;
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v4, v5);
  v27 = (uint64_t)&v25 - v6;
  v8 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  v11 = *((unsigned __int8 *)a1 + 32);
  v12 = static RepresentableContextValues.current;
  v33 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  v34 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v8;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v7;
  *(_QWORD *)&xmmword_1ECE02220 = v9;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v10;
  v13 = byte_1ECE02230;
  byte_1ECE02230 = v11;
  swift_retain();
  swift_retain();
  v26 = v9;
  HIDWORD(v25) = v11;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  v28 = *((_QWORD *)&v12 + 1);
  v29 = v12;
  v14 = v33;
  v15 = v34;
  v30 = v13;
  outlined copy of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v34, v33, v13);
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v15, v14, v13);
  v16 = v27;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(v31, v27);
  v17 = (void *)a1[5];
  v35[0] = v8;
  v35[1] = v7;
  v18 = v26;
  v35[2] = v26;
  v35[3] = v10;
  v19 = v10;
  LOBYTE(v10) = BYTE4(v25);
  v36 = BYTE4(v25);
  v37 = v17;
  v20 = v17;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);
  UIKitRichTextEditor.updateUIView(_:context:)(v32, (uint64_t)v35);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);

  outlined destroy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(v16);
  v21 = static RepresentableContextValues.current;
  v22 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v29;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v28;
  *(_QWORD *)&xmmword_1ECE02220 = v34;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v33;
  v23 = byte_1ECE02230;
  byte_1ECE02230 = v30;
  outlined consume of RepresentableContextValues?(v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  char v36;
  void *v37;

  v31 = a2;
  v32 = a3;
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v4, v5);
  v27 = (uint64_t)&v25 - v6;
  v8 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  v11 = *((unsigned __int8 *)a1 + 32);
  v12 = static RepresentableContextValues.current;
  v33 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  v34 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v8;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v7;
  *(_QWORD *)&xmmword_1ECE02220 = v9;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v10;
  v13 = byte_1ECE02230;
  byte_1ECE02230 = v11;
  swift_retain();
  swift_retain();
  v26 = v9;
  HIDWORD(v25) = v11;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v10, v11);
  v28 = *((_QWORD *)&v12 + 1);
  v29 = v12;
  v14 = v33;
  v15 = v34;
  v30 = v13;
  outlined copy of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v34, v33, v13);
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v15, v14, v13);
  v16 = v27;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(v31, v27);
  v17 = (void *)a1[5];
  v35[0] = v8;
  v35[1] = v7;
  v18 = v26;
  v35[2] = v26;
  v35[3] = v10;
  v19 = v10;
  LOBYTE(v10) = BYTE4(v25);
  v36 = BYTE4(v25);
  v37 = v17;
  v20 = v17;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);
  UIKitSearchBarAdaptor.updateUIView(_:context:)(v32, (uint64_t)v35);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);

  outlined destroy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(v16);
  v21 = static RepresentableContextValues.current;
  v22 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v29;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v28;
  *(_QWORD *)&xmmword_1ECE02220 = v34;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v33;
  v23 = byte_1ECE02230;
  byte_1ECE02230 = v30;
  outlined consume of RepresentableContextValues?(v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v18, v19, v10);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t *a1, __int128 *a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  void *v15;
  id v16;
  __int128 v17;
  __int128 v18;
  char v19;
  char v21;
  uint64_t v23;
  uint64_t v25;
  _QWORD v26[4];
  char v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  char v31;
  __int128 v32;

  v5 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = *((_BYTE *)a1 + 32);
  v9 = *((_QWORD *)&static RepresentableContextValues.current + 1);
  v10 = static RepresentableContextValues.current;
  v11 = *((_QWORD *)&xmmword_1ECE02220 + 1);
  v25 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = v5;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v4;
  *(_QWORD *)&xmmword_1ECE02220 = v6;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v7;
  v12 = byte_1ECE02230;
  byte_1ECE02230 = v8;
  v13 = v4;
  swift_retain();
  swift_retain();
  v21 = v8;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  v23 = v10;
  outlined copy of RepresentableContextValues?(v10, v9, v25, v11, v12);
  outlined consume of RepresentableContextValues?(v10, v9, v25, v11, v12);
  v14 = a2[1];
  v29 = *a2;
  v30 = v14;
  v31 = *((_BYTE *)a2 + 32);
  v32 = v29;
  v15 = (void *)a1[5];
  v26[0] = v5;
  v26[1] = v13;
  v26[2] = v6;
  v26[3] = v7;
  v27 = v21;
  v28 = v15;
  outlined retain of [Text.Modifier]((uint64_t)&v32);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v32 + 8);
  swift_retain();
  v16 = v15;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v21);
  SystemSegmentedControl.updateUIView(_:context:)(a3, (uint64_t)v26);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v7, v21);

  outlined release of _IncrementalLayout_Placements((uint64_t)&v32);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v32 + 8);
  swift_release();
  v17 = static RepresentableContextValues.current;
  v18 = xmmword_1ECE02220;
  static RepresentableContextValues.current = __PAIR128__(v9, v23);
  *(_QWORD *)&xmmword_1ECE02220 = v25;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v11;
  v19 = byte_1ECE02230;
  byte_1ECE02230 = v12;
  outlined consume of RepresentableContextValues?(v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v7, v21);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, double *a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  char v9;
  double v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  char v19;
  _QWORD v21[4];
  char v22;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v6 = *(_BYTE *)(a1 + 32);
  v7 = static RepresentableContextValues.current;
  v8 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  v16 = static RepresentableContextValues.current;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v4;
  *(_QWORD *)&xmmword_1ECE02220 = v5;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v17;
  v9 = byte_1ECE02230;
  byte_1ECE02230 = v6;
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  v19 = v9;
  outlined copy of RepresentableContextValues?(v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v9);
  outlined consume of RepresentableContextValues?(v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v9);
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 1);
  v21[0] = v16;
  v21[1] = v4;
  v21[2] = v5;
  v21[3] = v17;
  v22 = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v17, v6);
  LinearUIKitProgressView.Base.updateUIView(_:context:)(a3, (uint64_t)v21, v11, v10);
  outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  swift_release();
  v12 = static RepresentableContextValues.current;
  v13 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v7;
  xmmword_1ECE02220 = v8;
  v14 = byte_1ECE02230;
  byte_1ECE02230 = v19;
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14);
  return outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, _OWORD *a2, void *a3)
{
  char v5;
  __int128 v6;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v31[4];
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[2];
  _OWORD v43[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[3];

  v27 = *(_QWORD *)(a1 + 8);
  v25 = *(_QWORD *)(a1 + 24);
  v26 = *(_QWORD *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 32);
  v24 = v5;
  v6 = static RepresentableContextValues.current;
  v7 = xmmword_1ECE02220;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  v28 = static RepresentableContextValues.current;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v27;
  *(_QWORD *)&xmmword_1ECE02220 = v26;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v25;
  v8 = byte_1ECE02230;
  byte_1ECE02230 = v5;
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined copy of RepresentableContextValues?(v6, *((uint64_t *)&v6 + 1), v7, *((uint64_t *)&v7 + 1), v8);
  outlined consume of RepresentableContextValues?(v6, *((uint64_t *)&v6 + 1), v7, *((uint64_t *)&v7 + 1), v8);
  v9 = a2[8];
  v10 = a2[6];
  v49 = a2[7];
  v50 = v9;
  v11 = a2[8];
  v51[0] = a2[9];
  *(_OWORD *)((char *)v51 + 9) = *(_OWORD *)((char *)a2 + 153);
  v12 = a2[3];
  v13 = a2[5];
  v46 = a2[4];
  v47 = v13;
  v14 = a2[5];
  v48 = a2[6];
  v15 = a2[1];
  v43[0] = *a2;
  v43[1] = v15;
  v16 = a2[3];
  v18 = *a2;
  v17 = a2[1];
  v44 = a2[2];
  v45 = v16;
  v19 = a2[9];
  v41 = v11;
  v42[0] = v19;
  *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)((char *)a2 + 153);
  v37 = v46;
  v38 = v14;
  v39 = v10;
  v40 = v49;
  v33 = v18;
  v34 = v17;
  v35 = v44;
  v36 = v12;
  v31[0] = v28;
  v31[1] = v27;
  v31[2] = v26;
  v31[3] = v25;
  v32 = v24;
  outlined retain of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v43);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v26, v25, v24);
  CircularUIKitProgressView.updateUIView(_:context:)(a3, (uint64_t)v31);
  outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined release of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v43);
  v20 = static RepresentableContextValues.current;
  v21 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v6;
  xmmword_1ECE02220 = v7;
  v22 = byte_1ECE02230;
  byte_1ECE02230 = v8;
  outlined consume of RepresentableContextValues?(v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22);
  return outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[168];

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(unsigned __int8 *)(a1 + 32);
  v8 = static RepresentableContextValues.current;
  v9 = qword_1ECE02220;
  v10 = qword_1ECE02228;
  v11 = byte_1ECE02230;
  v25 = *(_QWORD *)a1;
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v4;
  v26 = v4;
  qword_1ECE02220 = v5;
  qword_1ECE02228 = v6;
  byte_1ECE02230 = v7;
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined copy of RepresentableContextValues?(v8, *((uint64_t *)&v8 + 1), v9, v10, v11);
  v27 = v10;
  v12 = v10;
  v13 = v11;
  outlined consume of RepresentableContextValues?(v8, *((uint64_t *)&v8 + 1), v9, v12, v11);
  v14 = outlined init with copy of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>(a2, (uint64_t)v32);
  if (v7 == 1)
  {
    MEMORY[0x1E0C80A78](v14, v15);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
    v16 = v26;
    swift_retain();
    v17 = v25;
    swift_retain();
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
    v5 = v28;
    v6 = v29;
  }
  else
  {
    v16 = v26;
    swift_retain();
    v17 = v25;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v6, 0);
  }
  v28 = v16;
  v29 = v5;
  v30 = v6;
  v31 = v17;
  CustomizableDocumentViewControllerRepresentable.updateUIViewController(_:context:)(a3, (uint64_t)&v28);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>((uint64_t)v32);
  v18 = static RepresentableContextValues.current;
  v19 = qword_1ECE02220;
  v20 = qword_1ECE02228;
  static RepresentableContextValues.current = v8;
  qword_1ECE02220 = v9;
  qword_1ECE02228 = v27;
  v21 = byte_1ECE02230;
  byte_1ECE02230 = v13;
  outlined consume of RepresentableContextValues?(v18, *((uint64_t *)&v18 + 1), v19, v20, v21);
  return outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
}

uint64_t (*specialized ViewResponderFilter.preferredFocusableView.getter())()
{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UISlider);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UIStepper);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for VerticalTextView);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for PagingCollectionView);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for TextEditorTextView);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UISearchTextField);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UIPasteControl);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UIColorWell);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for TextEditorTextView);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for UIKitToolbar);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for UIKitTabBarController);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for UIKitSearchBar);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for SystemSegmentedControl.UISegmentedControl);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UIKBVisualEffectView);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UIProgressView);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UITextField);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UIActivityIndicatorView);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (unint64_t *)&lazy cache variable for type metadata for UISplitViewController);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UIDatePicker);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UISegmentedControl);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for UICalendarView);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for CustomizableDocumentViewController);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), (unint64_t *)&lazy cache variable for type metadata for UISwitch);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  if (!*Value)
    return 0;
  v4 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  return partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

uint64_t specialized ViewResponderFilter.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *Value;
  __int128 v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  int v10;
  __int128 v11;
  unsigned int v12;
  uint64_t (*v13)();
  void *v14;
  uint64_t (*v15)();
  uint64_t v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  unsigned int v20;
  _OWORD v21[2];
  _BYTE v22[24];
  __int128 v23;
  uint64_t v24;

  v1 = v0;
  v24 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>(0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v2 = *(_QWORD *)(v0 + 24);
  v20 = *(_DWORD *)(v0 + 8);
  Value = (_OWORD *)AGGraphGetValue();
  v4 = Value[1];
  v21[0] = *Value;
  v21[1] = v4;
  v5 = *(_DWORD *)(v0 + 4);
  AGGraphGetValue();
  v6 = *(_DWORD *)(v0 + 12);
  v7 = AGGraphGetValue();
  *(_QWORD *)v22 = *(_QWORD *)v7;
  *(_OWORD *)&v22[8] = *(_OWORD *)(v7 + 8);
  v23 = *(_OWORD *)(v7 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_release();
  v9 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v2 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_DWORD *)(v1 + 16);
  LODWORD(v11) = *(_DWORD *)v1;
  DWORD1(v11) = v5;
  *((_QWORD *)&v11 + 1) = __PAIR64__(v6, v20);
  v12 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)v22 = v11;
  *(_DWORD *)&v22[16] = v10;
  *(_QWORD *)&v23 = v2;
  *((_QWORD *)&v23 + 1) = __PAIR64__(v12, v9);
  v13 = specialized ViewResponderFilter.preferredFocusableView.getter();
  v14 = 0;
  if ((unint64_t)v13 >= 2)
  {
    v15 = v13;
    v16 = AGGraphGetValue();
    *(_QWORD *)&v21[0] = *(_QWORD *)(*(_QWORD *)(v16 + 80) + *(_QWORD *)((*v8 & **(_QWORD **)(v16 + 80)) + 0x78));
    v17 = *(id *)&v21[0];
    v14 = (void *)((uint64_t (*)(_OWORD *))v15)(v21);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v15);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v19 + 32) = *(_QWORD *)(v1 + 24);
    *(_QWORD *)&v21[0] = v19;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *Value;
  __int128 v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  int v10;
  __int128 v11;
  unsigned int v12;
  uint64_t (*v13)();
  void *v14;
  uint64_t (*v15)();
  uint64_t v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  unsigned int v20;
  _OWORD v21[2];
  _BYTE v22[24];
  __int128 v23;
  uint64_t v24;

  v1 = v0;
  v24 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>(0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v2 = *(_QWORD *)(v0 + 24);
  v20 = *(_DWORD *)(v0 + 8);
  Value = (_OWORD *)AGGraphGetValue();
  v4 = Value[1];
  v21[0] = *Value;
  v21[1] = v4;
  v5 = *(_DWORD *)(v0 + 4);
  AGGraphGetValue();
  v6 = *(_DWORD *)(v0 + 12);
  v7 = AGGraphGetValue();
  *(_QWORD *)v22 = *(_QWORD *)v7;
  *(_OWORD *)&v22[8] = *(_OWORD *)(v7 + 8);
  v23 = *(_OWORD *)(v7 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_release();
  v9 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v2 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_DWORD *)(v1 + 16);
  LODWORD(v11) = *(_DWORD *)v1;
  DWORD1(v11) = v5;
  *((_QWORD *)&v11 + 1) = __PAIR64__(v6, v20);
  v12 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)v22 = v11;
  *(_DWORD *)&v22[16] = v10;
  *(_QWORD *)&v23 = v2;
  *((_QWORD *)&v23 + 1) = __PAIR64__(v12, v9);
  v13 = specialized ViewResponderFilter.preferredFocusableView.getter();
  v14 = 0;
  if ((unint64_t)v13 >= 2)
  {
    v15 = v13;
    v16 = AGGraphGetValue();
    *(_QWORD *)&v21[0] = *(_QWORD *)(*(_QWORD *)(v16 + 56) + *(_QWORD *)((*v8 & **(_QWORD **)(v16 + 56)) + 0x78));
    v17 = *(id *)&v21[0];
    v14 = (void *)((uint64_t (*)(_OWORD *))v15)(v21);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v15);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v19 + 32) = *(_QWORD *)(v1 + 24);
    *(_QWORD *)&v21[0] = v19;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *Value;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  int v13;
  __int128 v14;
  unsigned int v15;
  uint64_t (*v16)();
  void *v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  __int128 v28;
  _OWORD v29[2];
  _BYTE v30[24];
  __int128 v31;
  uint64_t v32;

  v1 = v0;
  v32 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v25 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v6 = *(_QWORD *)(v0 + 24);
  v27 = *(_DWORD *)(v0 + 8);
  Value = (_OWORD *)AGGraphGetValue();
  v8 = Value[1];
  v29[0] = *Value;
  v29[1] = v8;
  v26 = *(_DWORD *)(v0 + 4);
  v28 = *(_OWORD *)AGGraphGetValue();
  v9 = *(_DWORD *)(v0 + 12);
  v10 = AGGraphGetValue();
  *(_QWORD *)v30 = *(_QWORD *)v10;
  *(_OWORD *)&v30[8] = *(_OWORD *)(v10 + 8);
  v31 = *(_OWORD *)(v10 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  v11 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v6 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_bridgeObjectRelease();
  v13 = *(_DWORD *)(v1 + 16);
  LODWORD(v14) = *(_DWORD *)v1;
  DWORD1(v14) = v26;
  *((_QWORD *)&v14 + 1) = __PAIR64__(v9, v27);
  v15 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)v30 = v14;
  *(_DWORD *)&v30[16] = v13;
  *(_QWORD *)&v31 = v6;
  *((_QWORD *)&v31 + 1) = __PAIR64__(v15, v11);
  v16 = specialized ViewResponderFilter.preferredFocusableView.getter();
  v17 = 0;
  if ((unint64_t)v16 >= 2)
  {
    v18 = v16;
    v19 = AGGraphGetValue();
    v20 = v25;
    outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(v19, v25);
    v21 = *(_QWORD **)(v20 + *(int *)(v3 + 36));
    *(_QWORD *)&v29[0] = *(_QWORD *)((char *)v21 + *(_QWORD *)((*v12 & *v21) + 0x78));
    v22 = *(id *)&v29[0];
    outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(v20);
    v17 = (void *)((uint64_t (*)(_OWORD *))v18)(v29);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v18);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v24 + 32) = *(_QWORD *)(v1 + 24);
    *(_QWORD *)&v29[0] = v24;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  __int128 v3;
  _QWORD *v4;
  uint64_t (*v5)();
  void *v6;
  uint64_t (*v7)();
  uint64_t v8;
  id v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  id v16[5];

  v16[3] = *(id *)MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>(0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v1 = *(_QWORD *)(v0 + 24);
  AGGraphGetValue();
  AGGraphGetValue();
  Value = AGGraphGetValue();
  v12 = *(_QWORD *)Value;
  v3 = *(_OWORD *)(Value + 24);
  v13 = *(_OWORD *)(Value + 8);
  v14 = v3;
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v1 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = specialized ViewResponderFilter.preferredFocusableView.getter();
  v6 = 0;
  if ((unint64_t)v5 >= 2)
  {
    v7 = v5;
    v8 = AGGraphGetValue();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v8, (uint64_t)&v12, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
    v16[0] = *(id *)((char *)v15 + *(_QWORD *)((*v4 & *v15) + 0x78));
    v9 = v16[0];
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v12, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
    v6 = (void *)((uint64_t (*)(id *))v7)(v16);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v7);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v11 + 32) = *(_QWORD *)(v0 + 24);
    v12 = v11;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *Value;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  int v13;
  __int128 v14;
  unsigned int v15;
  uint64_t (*v16)();
  void *v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  __int128 v28;
  _OWORD v29[2];
  _BYTE v30[24];
  __int128 v31;
  uint64_t v32;

  v1 = v0;
  v32 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v25 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v6 = *(_QWORD *)(v0 + 24);
  v27 = *(_DWORD *)(v0 + 8);
  Value = (_OWORD *)AGGraphGetValue();
  v8 = Value[1];
  v29[0] = *Value;
  v29[1] = v8;
  v26 = *(_DWORD *)(v0 + 4);
  v28 = *(_OWORD *)AGGraphGetValue();
  v9 = *(_DWORD *)(v0 + 12);
  v10 = AGGraphGetValue();
  *(_QWORD *)v30 = *(_QWORD *)v10;
  *(_OWORD *)&v30[8] = *(_OWORD *)(v10 + 8);
  v31 = *(_OWORD *)(v10 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  v11 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v6 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_bridgeObjectRelease();
  v13 = *(_DWORD *)(v1 + 16);
  LODWORD(v14) = *(_DWORD *)v1;
  DWORD1(v14) = v26;
  *((_QWORD *)&v14 + 1) = __PAIR64__(v9, v27);
  v15 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)v30 = v14;
  *(_DWORD *)&v30[16] = v13;
  *(_QWORD *)&v31 = v6;
  *((_QWORD *)&v31 + 1) = __PAIR64__(v15, v11);
  v16 = specialized ViewResponderFilter.preferredFocusableView.getter();
  v17 = 0;
  if ((unint64_t)v16 >= 2)
  {
    v18 = v16;
    v19 = AGGraphGetValue();
    v20 = v25;
    outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(v19, v25);
    v21 = *(_QWORD **)(v20 + *(int *)(v3 + 36));
    *(_QWORD *)&v29[0] = *(_QWORD *)((char *)v21 + *(_QWORD *)((*v12 & *v21) + 0x78));
    v22 = *(id *)&v29[0];
    outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(v20);
    v17 = (void *)((uint64_t (*)(_OWORD *))v18)(v29);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v18);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v24 + 32) = *(_QWORD *)(v1 + 24);
    *(_QWORD *)&v29[0] = v24;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *Value;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  int v13;
  __int128 v14;
  unsigned int v15;
  uint64_t (*v16)();
  void *v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  __int128 v28;
  _OWORD v29[2];
  _BYTE v30[24];
  __int128 v31;
  uint64_t v32;

  v1 = v0;
  v32 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v25 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v6 = *(_QWORD *)(v0 + 24);
  v27 = *(_DWORD *)(v0 + 8);
  Value = (_OWORD *)AGGraphGetValue();
  v8 = Value[1];
  v29[0] = *Value;
  v29[1] = v8;
  v26 = *(_DWORD *)(v0 + 4);
  v28 = *(_OWORD *)AGGraphGetValue();
  v9 = *(_DWORD *)(v0 + 12);
  v10 = AGGraphGetValue();
  *(_QWORD *)v30 = *(_QWORD *)v10;
  *(_OWORD *)&v30[8] = *(_OWORD *)(v10 + 8);
  v31 = *(_OWORD *)(v10 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  v11 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v6 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_bridgeObjectRelease();
  v13 = *(_DWORD *)(v1 + 16);
  LODWORD(v14) = *(_DWORD *)v1;
  DWORD1(v14) = v26;
  *((_QWORD *)&v14 + 1) = __PAIR64__(v9, v27);
  v15 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)v30 = v14;
  *(_DWORD *)&v30[16] = v13;
  *(_QWORD *)&v31 = v6;
  *((_QWORD *)&v31 + 1) = __PAIR64__(v15, v11);
  v16 = specialized ViewResponderFilter.preferredFocusableView.getter();
  v17 = 0;
  if ((unint64_t)v16 >= 2)
  {
    v18 = v16;
    v19 = AGGraphGetValue();
    v20 = v25;
    outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>(v19, v25);
    v21 = *(_QWORD **)(v20 + *(int *)(v3 + 36));
    *(_QWORD *)&v29[0] = *(_QWORD *)((char *)v21 + *(_QWORD *)((*v12 & *v21) + 0x78));
    v22 = *(id *)&v29[0];
    outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>(v20);
    v17 = (void *)((uint64_t (*)(_OWORD *))v18)(v29);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v18);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v24 + 32) = *(_QWORD *)(v1 + 24);
    *(_QWORD *)&v29[0] = v24;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *Value;
  __int128 v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  int v10;
  __int128 v11;
  unsigned int v12;
  uint64_t (*v13)();
  void *v14;
  uint64_t (*v15)();
  uint64_t v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  unsigned int v20;
  _OWORD v21[2];
  _BYTE v22[24];
  __int128 v23;
  uint64_t v24;

  v1 = v0;
  v24 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v2 = *(_QWORD *)(v0 + 24);
  v20 = *(_DWORD *)(v0 + 8);
  Value = (_OWORD *)AGGraphGetValue();
  v4 = Value[1];
  v21[0] = *Value;
  v21[1] = v4;
  v5 = *(_DWORD *)(v0 + 4);
  AGGraphGetValue();
  v6 = *(_DWORD *)(v0 + 12);
  v7 = AGGraphGetValue();
  *(_QWORD *)v22 = *(_QWORD *)v7;
  *(_OWORD *)&v22[8] = *(_OWORD *)(v7 + 8);
  v23 = *(_OWORD *)(v7 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_release();
  v9 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v2 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_DWORD *)(v1 + 16);
  LODWORD(v11) = *(_DWORD *)v1;
  DWORD1(v11) = v5;
  *((_QWORD *)&v11 + 1) = __PAIR64__(v6, v20);
  v12 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)v22 = v11;
  *(_DWORD *)&v22[16] = v10;
  *(_QWORD *)&v23 = v2;
  *((_QWORD *)&v23 + 1) = __PAIR64__(v12, v9);
  v13 = specialized ViewResponderFilter.preferredFocusableView.getter();
  v14 = 0;
  if ((unint64_t)v13 >= 2)
  {
    v15 = v13;
    v16 = AGGraphGetValue();
    *(_QWORD *)&v21[0] = *(_QWORD *)(*(_QWORD *)(v16 + 88) + *(_QWORD *)((*v8 & **(_QWORD **)(v16 + 88)) + 0x78));
    v17 = *(id *)&v21[0];
    v14 = (void *)((uint64_t (*)(_OWORD *))v15)(v21);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v15);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v19 + 32) = *(_QWORD *)(v1 + 24);
    *(_QWORD *)&v21[0] = v19;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *Value;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  int v13;
  __int128 v14;
  unsigned int v15;
  uint64_t (*v16)();
  void *v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  __int128 v28;
  _OWORD v29[2];
  _BYTE v30[24];
  __int128 v31;
  uint64_t v32;

  v1 = v0;
  v32 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v25 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v6 = *(_QWORD *)(v0 + 24);
  v27 = *(_DWORD *)(v0 + 8);
  Value = (_OWORD *)AGGraphGetValue();
  v8 = Value[1];
  v29[0] = *Value;
  v29[1] = v8;
  v26 = *(_DWORD *)(v0 + 4);
  v28 = *(_OWORD *)AGGraphGetValue();
  v9 = *(_DWORD *)(v0 + 12);
  v10 = AGGraphGetValue();
  *(_QWORD *)v30 = *(_QWORD *)v10;
  *(_OWORD *)&v30[8] = *(_OWORD *)(v10 + 8);
  v31 = *(_OWORD *)(v10 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  v11 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v6 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_bridgeObjectRelease();
  v13 = *(_DWORD *)(v1 + 16);
  LODWORD(v14) = *(_DWORD *)v1;
  DWORD1(v14) = v26;
  *((_QWORD *)&v14 + 1) = __PAIR64__(v9, v27);
  v15 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)v30 = v14;
  *(_DWORD *)&v30[16] = v13;
  *(_QWORD *)&v31 = v6;
  *((_QWORD *)&v31 + 1) = __PAIR64__(v15, v11);
  v16 = specialized ViewResponderFilter.preferredFocusableView.getter();
  v17 = 0;
  if ((unint64_t)v16 >= 2)
  {
    v18 = v16;
    v19 = AGGraphGetValue();
    v20 = v25;
    outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(v19, v25);
    v21 = *(_QWORD **)(v20 + *(int *)(v3 + 36));
    *(_QWORD *)&v29[0] = *(_QWORD *)((char *)v21 + *(_QWORD *)((*v12 & *v21) + 0x78));
    v22 = *(id *)&v29[0];
    outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(v20);
    v17 = (void *)((uint64_t (*)(_OWORD *))v18)(v29);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v18);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v24 + 32) = *(_QWORD *)(v1 + 24);
    *(_QWORD *)&v29[0] = v24;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *Value;
  __int128 v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  int v10;
  __int128 v11;
  unsigned int v12;
  uint64_t (*v13)();
  void *v14;
  uint64_t (*v15)();
  uint64_t v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  unsigned int v20;
  _OWORD v21[2];
  _BYTE v22[24];
  __int128 v23;
  uint64_t v24;

  v1 = v0;
  v24 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v2 = *(_QWORD *)(v0 + 24);
  v20 = *(_DWORD *)(v0 + 8);
  Value = (_OWORD *)AGGraphGetValue();
  v4 = Value[1];
  v21[0] = *Value;
  v21[1] = v4;
  v5 = *(_DWORD *)(v0 + 4);
  AGGraphGetValue();
  v6 = *(_DWORD *)(v0 + 12);
  v7 = AGGraphGetValue();
  *(_QWORD *)v22 = *(_QWORD *)v7;
  *(_OWORD *)&v22[8] = *(_OWORD *)(v7 + 8);
  v23 = *(_OWORD *)(v7 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_release();
  v9 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v2 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_DWORD *)(v1 + 16);
  LODWORD(v11) = *(_DWORD *)v1;
  DWORD1(v11) = v5;
  *((_QWORD *)&v11 + 1) = __PAIR64__(v6, v20);
  v12 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)v22 = v11;
  *(_DWORD *)&v22[16] = v10;
  *(_QWORD *)&v23 = v2;
  *((_QWORD *)&v23 + 1) = __PAIR64__(v12, v9);
  v13 = specialized ViewResponderFilter.preferredFocusableView.getter();
  v14 = 0;
  if ((unint64_t)v13 >= 2)
  {
    v15 = v13;
    v16 = AGGraphGetValue();
    *(_QWORD *)&v21[0] = *(_QWORD *)(*(_QWORD *)(v16 + 8) + *(_QWORD *)((*v8 & **(_QWORD **)(v16 + 8)) + 0x78));
    v17 = *(id *)&v21[0];
    v14 = (void *)((uint64_t (*)(_OWORD *))v15)(v21);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v15);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v19 + 32) = *(_QWORD *)(v1 + 24);
    *(_QWORD *)&v21[0] = v19;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t Value;
  __int128 v9;
  uint64_t (*v10)();
  void *v11;
  _QWORD *v12;
  uint64_t (*v13)();
  uint64_t v14;
  id v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  id v22[5];

  v1 = v0;
  v22[3] = *(id *)MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v2 = *(_QWORD **)(AGGraphGetValue() + 72);
  v3 = *(void **)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x78));
  v4 = v2;
  v5 = objc_msgSend(v3, sel_view);
  if (!v5)
    __break(1u);
  v6 = v5;

  swift_unknownObjectWeakAssign();
  v7 = *(_QWORD *)(v1 + 24);
  AGGraphGetValue();
  AGGraphGetValue();
  Value = AGGraphGetValue();
  v18 = *(_QWORD *)Value;
  v9 = *(_OWORD *)(Value + 24);
  v19 = *(_OWORD *)(Value + 8);
  v20 = v9;
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v7 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = specialized ViewResponderFilter.preferredFocusableView.getter();
  v11 = 0;
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if ((unint64_t)v10 >= 2)
  {
    v13 = v10;
    v14 = AGGraphGetValue();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v14, (uint64_t)&v18, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
    v22[0] = *(id *)((char *)v21 + *(_QWORD *)((*v12 & *v21) + 0x78));
    v15 = v22[0];
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v18, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
    v11 = (void *)((uint64_t (*)(id *))v13)(v22);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v13);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v17 + 32) = *(_QWORD *)(v1 + 24);
    v18 = v17;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *Value;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  int v13;
  __int128 v14;
  unsigned int v15;
  uint64_t (*v16)();
  void *v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  __int128 v28;
  _OWORD v29[2];
  _BYTE v30[24];
  __int128 v31;
  uint64_t v32;

  v1 = v0;
  v32 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v25 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v6 = *(_QWORD *)(v0 + 24);
  v27 = *(_DWORD *)(v0 + 8);
  Value = (_OWORD *)AGGraphGetValue();
  v8 = Value[1];
  v29[0] = *Value;
  v29[1] = v8;
  v26 = *(_DWORD *)(v0 + 4);
  v28 = *(_OWORD *)AGGraphGetValue();
  v9 = *(_DWORD *)(v0 + 12);
  v10 = AGGraphGetValue();
  *(_QWORD *)v30 = *(_QWORD *)v10;
  *(_OWORD *)&v30[8] = *(_OWORD *)(v10 + 8);
  v31 = *(_OWORD *)(v10 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  v11 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v6 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_bridgeObjectRelease();
  v13 = *(_DWORD *)(v1 + 16);
  LODWORD(v14) = *(_DWORD *)v1;
  DWORD1(v14) = v26;
  *((_QWORD *)&v14 + 1) = __PAIR64__(v9, v27);
  v15 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)v30 = v14;
  *(_DWORD *)&v30[16] = v13;
  *(_QWORD *)&v31 = v6;
  *((_QWORD *)&v31 + 1) = __PAIR64__(v15, v11);
  v16 = specialized ViewResponderFilter.preferredFocusableView.getter();
  v17 = 0;
  if ((unint64_t)v16 >= 2)
  {
    v18 = v16;
    v19 = AGGraphGetValue();
    v20 = v25;
    outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(v19, v25);
    v21 = *(_QWORD **)(v20 + *(int *)(v3 + 36));
    *(_QWORD *)&v29[0] = *(_QWORD *)((char *)v21 + *(_QWORD *)((*v12 & *v21) + 0x78));
    v22 = *(id *)&v29[0];
    outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(v20);
    v17 = (void *)((uint64_t (*)(_OWORD *))v18)(v29);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v18);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v24 + 32) = *(_QWORD *)(v1 + 24);
    *(_QWORD *)&v29[0] = v24;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *Value;
  __int128 v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  int v10;
  __int128 v11;
  unsigned int v12;
  uint64_t (*v13)();
  void *v14;
  uint64_t (*v15)();
  uint64_t v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  unsigned int v20;
  _OWORD v21[2];
  _BYTE v22[24];
  __int128 v23;
  uint64_t v24;

  v1 = v0;
  v24 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v2 = *(_QWORD *)(v0 + 24);
  v20 = *(_DWORD *)(v0 + 8);
  Value = (_OWORD *)AGGraphGetValue();
  v4 = Value[1];
  v21[0] = *Value;
  v21[1] = v4;
  v5 = *(_DWORD *)(v0 + 4);
  AGGraphGetValue();
  v6 = *(_DWORD *)(v0 + 12);
  v7 = AGGraphGetValue();
  *(_QWORD *)v22 = *(_QWORD *)v7;
  *(_OWORD *)&v22[8] = *(_OWORD *)(v7 + 8);
  v23 = *(_OWORD *)(v7 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_release();
  v9 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v2 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_DWORD *)(v1 + 16);
  LODWORD(v11) = *(_DWORD *)v1;
  DWORD1(v11) = v5;
  *((_QWORD *)&v11 + 1) = __PAIR64__(v6, v20);
  v12 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)v22 = v11;
  *(_DWORD *)&v22[16] = v10;
  *(_QWORD *)&v23 = v2;
  *((_QWORD *)&v23 + 1) = __PAIR64__(v12, v9);
  v13 = specialized ViewResponderFilter.preferredFocusableView.getter();
  v14 = 0;
  if ((unint64_t)v13 >= 2)
  {
    v15 = v13;
    v16 = AGGraphGetValue();
    *(_QWORD *)&v21[0] = *(_QWORD *)(*(_QWORD *)(v16 + 40) + *(_QWORD *)((*v8 & **(_QWORD **)(v16 + 40)) + 0x78));
    v17 = *(id *)&v21[0];
    v14 = (void *)((uint64_t (*)(_OWORD *))v15)(v21);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v15);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v19 + 32) = *(_QWORD *)(v1 + 24);
    *(_QWORD *)&v21[0] = v19;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *Value;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  int v13;
  __int128 v14;
  unsigned int v15;
  uint64_t (*v16)();
  void *v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  __int128 v28;
  _OWORD v29[2];
  _BYTE v30[24];
  __int128 v31;
  uint64_t v32;

  v1 = v0;
  v32 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v25 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v6 = *(_QWORD *)(v0 + 24);
  v27 = *(_DWORD *)(v0 + 8);
  Value = (_OWORD *)AGGraphGetValue();
  v8 = Value[1];
  v29[0] = *Value;
  v29[1] = v8;
  v26 = *(_DWORD *)(v0 + 4);
  v28 = *(_OWORD *)AGGraphGetValue();
  v9 = *(_DWORD *)(v0 + 12);
  v10 = AGGraphGetValue();
  *(_QWORD *)v30 = *(_QWORD *)v10;
  *(_OWORD *)&v30[8] = *(_OWORD *)(v10 + 8);
  v31 = *(_OWORD *)(v10 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  v11 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v6 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_bridgeObjectRelease();
  v13 = *(_DWORD *)(v1 + 16);
  LODWORD(v14) = *(_DWORD *)v1;
  DWORD1(v14) = v26;
  *((_QWORD *)&v14 + 1) = __PAIR64__(v9, v27);
  v15 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)v30 = v14;
  *(_DWORD *)&v30[16] = v13;
  *(_QWORD *)&v31 = v6;
  *((_QWORD *)&v31 + 1) = __PAIR64__(v15, v11);
  v16 = specialized ViewResponderFilter.preferredFocusableView.getter();
  v17 = 0;
  if ((unint64_t)v16 >= 2)
  {
    v18 = v16;
    v19 = AGGraphGetValue();
    v20 = v25;
    outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(v19, v25);
    v21 = *(_QWORD **)(v20 + *(int *)(v3 + 36));
    *(_QWORD *)&v29[0] = *(_QWORD *)((char *)v21 + *(_QWORD *)((*v12 & *v21) + 0x78));
    v22 = *(id *)&v29[0];
    outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(v20);
    v17 = (void *)((uint64_t (*)(_OWORD *))v18)(v29);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v18);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v24 + 32) = *(_QWORD *)(v1 + 24);
    *(_QWORD *)&v29[0] = v24;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *Value;
  __int128 v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  int v10;
  __int128 v11;
  unsigned int v12;
  uint64_t (*v13)();
  void *v14;
  uint64_t (*v15)();
  uint64_t v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  unsigned int v20;
  _OWORD v21[2];
  _BYTE v22[24];
  __int128 v23;
  uint64_t v24;

  v1 = v0;
  v24 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v2 = *(_QWORD *)(v0 + 24);
  v20 = *(_DWORD *)(v0 + 8);
  Value = (_OWORD *)AGGraphGetValue();
  v4 = Value[1];
  v21[0] = *Value;
  v21[1] = v4;
  v5 = *(_DWORD *)(v0 + 4);
  AGGraphGetValue();
  v6 = *(_DWORD *)(v0 + 12);
  v7 = AGGraphGetValue();
  *(_QWORD *)v22 = *(_QWORD *)v7;
  *(_OWORD *)&v22[8] = *(_OWORD *)(v7 + 8);
  v23 = *(_OWORD *)(v7 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_release();
  v9 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v2 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_DWORD *)(v1 + 16);
  LODWORD(v11) = *(_DWORD *)v1;
  DWORD1(v11) = v5;
  *((_QWORD *)&v11 + 1) = __PAIR64__(v6, v20);
  v12 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)v22 = v11;
  *(_DWORD *)&v22[16] = v10;
  *(_QWORD *)&v23 = v2;
  *((_QWORD *)&v23 + 1) = __PAIR64__(v12, v9);
  v13 = specialized ViewResponderFilter.preferredFocusableView.getter();
  v14 = 0;
  if ((unint64_t)v13 >= 2)
  {
    v15 = v13;
    v16 = AGGraphGetValue();
    *(_QWORD *)&v21[0] = *(_QWORD *)(*(_QWORD *)(v16 + 176) + *(_QWORD *)((*v8 & **(_QWORD **)(v16 + 176)) + 0x78));
    v17 = *(id *)&v21[0];
    v14 = (void *)((uint64_t (*)(_OWORD *))v15)(v21);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v15);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v19 + 32) = *(_QWORD *)(v1 + 24);
    *(_QWORD *)&v21[0] = v19;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t Value;
  __int128 v9;
  uint64_t (*v10)();
  void *v11;
  _QWORD *v12;
  uint64_t (*v13)();
  uint64_t v14;
  id v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  id v22[5];

  v1 = v0;
  v22[3] = *(id *)MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v2 = *(_QWORD **)(AGGraphGetValue() + 368);
  v3 = *(void **)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x78));
  v4 = v2;
  v5 = objc_msgSend(v3, sel_view);
  if (!v5)
    __break(1u);
  v6 = v5;

  swift_unknownObjectWeakAssign();
  v7 = *(_QWORD *)(v1 + 24);
  AGGraphGetValue();
  AGGraphGetValue();
  Value = AGGraphGetValue();
  v18 = *(_QWORD *)Value;
  v9 = *(_OWORD *)(Value + 24);
  v19 = *(_OWORD *)(Value + 8);
  v20 = v9;
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v7 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = specialized ViewResponderFilter.preferredFocusableView.getter();
  v11 = 0;
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if ((unint64_t)v10 >= 2)
  {
    v13 = v10;
    v14 = AGGraphGetValue();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v14, (uint64_t)&v18, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
    v22[0] = *(id *)((char *)v21 + *(_QWORD *)((*v12 & *v21) + 0x78));
    v15 = v22[0];
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v18, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
    v11 = (void *)((uint64_t (*)(id *))v13)(v22);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v13);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v17 + 32) = *(_QWORD *)(v1 + 24);
    v18 = v17;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t Value;
  __int128 v9;
  uint64_t (*v10)();
  void *v11;
  _QWORD *v12;
  uint64_t (*v13)();
  uint64_t v14;
  id v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  id v22[5];

  v1 = v0;
  v22[3] = *(id *)MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v2 = *(_QWORD **)(AGGraphGetValue() + 176);
  v3 = *(void **)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x78));
  v4 = v2;
  v5 = objc_msgSend(v3, sel_view);
  if (!v5)
    __break(1u);
  v6 = v5;

  swift_unknownObjectWeakAssign();
  v7 = *(_QWORD *)(v1 + 24);
  AGGraphGetValue();
  AGGraphGetValue();
  Value = AGGraphGetValue();
  v18 = *(_QWORD *)Value;
  v9 = *(_OWORD *)(Value + 24);
  v19 = *(_OWORD *)(Value + 8);
  v20 = v9;
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v7 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = specialized ViewResponderFilter.preferredFocusableView.getter();
  v11 = 0;
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if ((unint64_t)v10 >= 2)
  {
    v13 = v10;
    v14 = AGGraphGetValue();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v14, (uint64_t)&v18, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
    v22[0] = *(id *)((char *)v21 + *(_QWORD *)((*v12 & *v21) + 0x78));
    v15 = v22[0];
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v18, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
    v11 = (void *)((uint64_t (*)(id *))v13)(v22);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v13);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v17 + 32) = *(_QWORD *)(v1 + 24);
    v18 = v17;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *Value;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  int v13;
  __int128 v14;
  unsigned int v15;
  uint64_t (*v16)();
  void *v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  __int128 v28;
  _OWORD v29[2];
  _BYTE v30[24];
  __int128 v31;
  uint64_t v32;

  v1 = v0;
  v32 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v25 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v6 = *(_QWORD *)(v0 + 24);
  v27 = *(_DWORD *)(v0 + 8);
  Value = (_OWORD *)AGGraphGetValue();
  v8 = Value[1];
  v29[0] = *Value;
  v29[1] = v8;
  v26 = *(_DWORD *)(v0 + 4);
  v28 = *(_OWORD *)AGGraphGetValue();
  v9 = *(_DWORD *)(v0 + 12);
  v10 = AGGraphGetValue();
  *(_QWORD *)v30 = *(_QWORD *)v10;
  *(_OWORD *)&v30[8] = *(_OWORD *)(v10 + 8);
  v31 = *(_OWORD *)(v10 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  v11 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v6 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_bridgeObjectRelease();
  v13 = *(_DWORD *)(v1 + 16);
  LODWORD(v14) = *(_DWORD *)v1;
  DWORD1(v14) = v26;
  *((_QWORD *)&v14 + 1) = __PAIR64__(v9, v27);
  v15 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)v30 = v14;
  *(_DWORD *)&v30[16] = v13;
  *(_QWORD *)&v31 = v6;
  *((_QWORD *)&v31 + 1) = __PAIR64__(v15, v11);
  v16 = specialized ViewResponderFilter.preferredFocusableView.getter();
  v17 = 0;
  if ((unint64_t)v16 >= 2)
  {
    v18 = v16;
    v19 = AGGraphGetValue();
    v20 = v25;
    outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(v19, v25);
    v21 = *(_QWORD **)(v20 + *(int *)(v3 + 36));
    *(_QWORD *)&v29[0] = *(_QWORD *)((char *)v21 + *(_QWORD *)((*v12 & *v21) + 0x78));
    v22 = *(id *)&v29[0];
    outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(v20);
    v17 = (void *)((uint64_t (*)(_OWORD *))v18)(v29);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v18);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v24 + 32) = *(_QWORD *)(v1 + 24);
    *(_QWORD *)&v29[0] = v24;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *Value;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  int v13;
  __int128 v14;
  unsigned int v15;
  uint64_t (*v16)();
  void *v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  __int128 v28;
  _OWORD v29[2];
  _BYTE v30[24];
  __int128 v31;
  uint64_t v32;

  v1 = v0;
  v32 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v25 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v6 = *(_QWORD *)(v0 + 24);
  v27 = *(_DWORD *)(v0 + 8);
  Value = (_OWORD *)AGGraphGetValue();
  v8 = Value[1];
  v29[0] = *Value;
  v29[1] = v8;
  v26 = *(_DWORD *)(v0 + 4);
  v28 = *(_OWORD *)AGGraphGetValue();
  v9 = *(_DWORD *)(v0 + 12);
  v10 = AGGraphGetValue();
  *(_QWORD *)v30 = *(_QWORD *)v10;
  *(_OWORD *)&v30[8] = *(_OWORD *)(v10 + 8);
  v31 = *(_OWORD *)(v10 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  v11 = *(_DWORD *)(v0 + 32);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v6 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_bridgeObjectRelease();
  v13 = *(_DWORD *)(v1 + 16);
  LODWORD(v14) = *(_DWORD *)v1;
  DWORD1(v14) = v26;
  *((_QWORD *)&v14 + 1) = __PAIR64__(v9, v27);
  v15 = *(_DWORD *)(v1 + 36);
  *(_OWORD *)v30 = v14;
  *(_DWORD *)&v30[16] = v13;
  *(_QWORD *)&v31 = v6;
  *((_QWORD *)&v31 + 1) = __PAIR64__(v15, v11);
  v16 = specialized ViewResponderFilter.preferredFocusableView.getter();
  v17 = 0;
  if ((unint64_t)v16 >= 2)
  {
    v18 = v16;
    v19 = AGGraphGetValue();
    v20 = v25;
    outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(v19, v25);
    v21 = *(_QWORD **)(v20 + *(int *)(v3 + 36));
    *(_QWORD *)&v29[0] = *(_QWORD *)((char *)v21 + *(_QWORD *)((*v12 & *v21) + 0x78));
    v22 = *(id *)&v29[0];
    outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(v20);
    v17 = (void *)((uint64_t (*)(_OWORD *))v18)(v29);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v18);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v24 + 32) = *(_QWORD *)(v1 + 24);
    *(_QWORD *)&v29[0] = v24;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t Value;
  uint64_t (*v9)();
  void *v10;
  _QWORD *v11;
  uint64_t (*v12)();
  uint64_t v13;
  id v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  id v21[5];

  v1 = v0;
  v21[3] = *(id *)MEMORY[0x1E0C80C00];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v2 = *(_QWORD **)(AGGraphGetValue() + 192);
  v3 = *(void **)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x78));
  v4 = v2;
  v5 = objc_msgSend(v3, sel_view);
  if (!v5)
    __break(1u);
  v6 = v5;

  swift_unknownObjectWeakAssign();
  v7 = *(_QWORD *)(v1 + 24);
  AGGraphGetValue();
  AGGraphGetValue();
  Value = AGGraphGetValue();
  v17 = *(_QWORD *)Value;
  v18 = *(_OWORD *)(Value + 8);
  v19 = *(_OWORD *)(Value + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v7 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = specialized ViewResponderFilter.preferredFocusableView.getter();
  v10 = 0;
  v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if ((unint64_t)v9 >= 2)
  {
    v12 = v9;
    v13 = AGGraphGetValue();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v13, (uint64_t)&v17, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
    v21[0] = *(id *)((char *)v20 + *(_QWORD *)((*v11 & *v20) + 0x78));
    v14 = v21[0];
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v17, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
    v10 = (void *)((uint64_t (*)(id *))v12)(v21);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v12);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v16 + 32) = *(_QWORD *)(v1 + 24);
    v17 = v16;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized ViewResponderFilter.updateValue()(void (*a1)(_QWORD), uint64_t (*a2)(uint64_t), void (*a3)(uint64_t (*)(_QWORD), uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *Value;
  __int128 v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  _QWORD *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t (*v20)(_OWORD *);
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t result;
  uint64_t v25;
  unsigned int v27;
  _OWORD v29[2];
  _BYTE v30[24];
  __int128 v31;
  uint64_t v32;

  v4 = v3;
  v32 = *MEMORY[0x1E0C80C00];
  a1(0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v5 = *(_QWORD *)(v3 + 24);
  v27 = *(_DWORD *)(v3 + 8);
  Value = (_OWORD *)AGGraphGetValue();
  v7 = Value[1];
  v29[0] = *Value;
  v29[1] = v7;
  v8 = *(_DWORD *)(v3 + 4);
  AGGraphGetValue();
  v9 = *(_DWORD *)(v3 + 12);
  v10 = AGGraphGetValue();
  *(_QWORD *)v30 = *(_QWORD *)v10;
  *(_OWORD *)&v30[8] = *(_OWORD *)(v10 + 8);
  v31 = *(_OWORD *)(v10 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  v11 = *(_DWORD *)(v3 + 32);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v5 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRelease();
  v13 = *(_DWORD *)(v4 + 16);
  LODWORD(v14) = *(_DWORD *)v4;
  DWORD1(v14) = v8;
  *((_QWORD *)&v14 + 1) = __PAIR64__(v9, v27);
  v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v16 = *(_DWORD *)(v4 + 36);
  *(_OWORD *)v30 = v14;
  *(_DWORD *)&v30[16] = v13;
  *(_QWORD *)&v31 = v5;
  *((_QWORD *)&v31 + 1) = __PAIR64__(v16, v11);
  v17 = a2(v12);
  v19 = 0;
  if (v17 >= 2)
  {
    v20 = (uint64_t (*)(_OWORD *))v17;
    v21 = v18;
    v22 = AGGraphGetValue();
    *(_QWORD *)&v29[0] = *(_QWORD *)(*(_QWORD *)(v22 + 16) + *(_QWORD *)((*v15 & **(_QWORD **)(v22 + 16)) + 0x78));
    v23 = *(id *)&v29[0];
    v19 = (void *)v20(v29);
    a3((uint64_t (*)(_QWORD))v20, v21);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v25 + 32) = *(_QWORD *)(v4 + 24);
    *(_QWORD *)&v29[0] = v25;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *Value;
  __int128 v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  _QWORD *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t (*v20)(_OWORD *);
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t result;
  uint64_t v25;
  unsigned int v27;
  _OWORD v29[2];
  _BYTE v30[24];
  __int128 v31;
  uint64_t v32;

  v4 = v3;
  v32 = *MEMORY[0x1E0C80C00];
  a1(0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v5 = *(_QWORD *)(v3 + 24);
  v27 = *(_DWORD *)(v3 + 8);
  Value = (_OWORD *)AGGraphGetValue();
  v7 = Value[1];
  v29[0] = *Value;
  v29[1] = v7;
  v8 = *(_DWORD *)(v3 + 4);
  AGGraphGetValue();
  v9 = *(_DWORD *)(v3 + 12);
  v10 = AGGraphGetValue();
  *(_QWORD *)v30 = *(_QWORD *)v10;
  *(_OWORD *)&v30[8] = *(_OWORD *)(v10 + 8);
  v31 = *(_OWORD *)(v10 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  v11 = *(_DWORD *)(v3 + 32);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v5 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRelease();
  v13 = *(_DWORD *)(v4 + 16);
  LODWORD(v14) = *(_DWORD *)v4;
  DWORD1(v14) = v8;
  *((_QWORD *)&v14 + 1) = __PAIR64__(v9, v27);
  v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v16 = *(_DWORD *)(v4 + 36);
  *(_OWORD *)v30 = v14;
  *(_DWORD *)&v30[16] = v13;
  *(_QWORD *)&v31 = v5;
  *((_QWORD *)&v31 + 1) = __PAIR64__(v16, v11);
  v17 = a2(v12);
  v19 = 0;
  if (v17 >= 2)
  {
    v20 = (uint64_t (*)(_OWORD *))v17;
    v21 = v18;
    v22 = AGGraphGetValue();
    *(_QWORD *)&v29[0] = *(_QWORD *)(*(_QWORD *)(v22 + 48) + *(_QWORD *)((*v15 & **(_QWORD **)(v22 + 48)) + 0x78));
    v23 = *(id *)&v29[0];
    v19 = (void *)v20(v29);
    a3((uint64_t (*)(_QWORD))v20, v21);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v25 + 32) = *(_QWORD *)(v4 + 24);
    *(_QWORD *)&v29[0] = v25;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized ViewResponderFilter.updateValue()(void (*a1)(_QWORD), uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  id v7;
  void *v8;
  uint64_t v9;
  _OWORD *Value;
  __int128 v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t (*v22)(_OWORD *);
  uint64_t v23;
  id v24;
  uint64_t result;
  uint64_t v26;
  unsigned int v27;
  _OWORD v29[2];
  _BYTE v30[24];
  __int128 v31;
  uint64_t v32;

  v3 = v2;
  v32 = *MEMORY[0x1E0C80C00];
  a1(0);
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v4 = *(_QWORD **)(AGGraphGetValue() + 8);
  v5 = *(void **)((char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x78));
  v6 = v4;
  v7 = objc_msgSend(v5, sel_view);
  if (!v7)
    __break(1u);
  v8 = v7;

  swift_unknownObjectWeakAssign();
  v9 = *(_QWORD *)(v3 + 24);
  v27 = *(_DWORD *)(v3 + 8);
  Value = (_OWORD *)AGGraphGetValue();
  v11 = Value[1];
  v29[0] = *Value;
  v29[1] = v11;
  LODWORD(v8) = *(_DWORD *)(v3 + 4);
  AGGraphGetValue();
  v12 = *(_DWORD *)(v3 + 12);
  v13 = AGGraphGetValue();
  *(_QWORD *)v30 = *(_QWORD *)v13;
  *(_OWORD *)&v30[8] = *(_OWORD *)(v13 + 8);
  v31 = *(_OWORD *)(v13 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  v14 = *(_DWORD *)(v3 + 32);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v9 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  v15 = swift_bridgeObjectRelease();
  v16 = *(_DWORD *)(v3 + 16);
  LODWORD(v17) = *(_DWORD *)v3;
  DWORD1(v17) = (_DWORD)v8;
  *((_QWORD *)&v17 + 1) = __PAIR64__(v12, v27);
  v18 = *(_DWORD *)(v3 + 36);
  *(_OWORD *)v30 = v17;
  *(_DWORD *)&v30[16] = v16;
  *(_QWORD *)&v31 = v9;
  *((_QWORD *)&v31 + 1) = __PAIR64__(v18, v14);
  v19 = a2(v15);
  v20 = 0;
  v21 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v19 >= 2)
  {
    v22 = (uint64_t (*)(_OWORD *))v19;
    v23 = AGGraphGetValue();
    *(_QWORD *)&v29[0] = *(_QWORD *)(*(_QWORD *)(v23 + 8) + *(_QWORD *)((*v21 & **(_QWORD **)(v23 + 8)) + 0x78));
    v24 = *(id *)&v29[0];
    v20 = (void *)v22(v29);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v22);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v26 + 32) = *(_QWORD *)(v3 + 24);
    *(_QWORD *)&v29[0] = v26;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized ViewResponderFilter.updateValue()(uint64_t (*a1)(_QWORD), uint64_t (*a2)(uint64_t), void (*a3)(uint64_t (*)(_QWORD), uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  id v11;
  void *v12;
  uint64_t v13;
  _OWORD *Value;
  __int128 v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  uint64_t (*v27)(_OWORD *);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD);
  _QWORD *v32;
  id v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(_QWORD);
  void (*v39)(uint64_t (*)(_QWORD), uint64_t);
  int v40;
  unsigned int v41;
  uint64_t (*v42)(uint64_t);
  __int128 v43;
  _OWORD v44[2];
  _BYTE v45[24];
  __int128 v46;
  uint64_t v47;

  v39 = a3;
  v42 = a2;
  v4 = v3;
  v47 = *MEMORY[0x1E0C80C00];
  v38 = a1;
  v5 = a1(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v37 = (uint64_t)&v36 - v7;
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  v8 = *(_QWORD **)(AGGraphGetValue() + *(int *)(v5 + 36));
  v9 = *(void **)((char *)v8 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v8) + 0x78));
  v10 = v8;
  v11 = objc_msgSend(v9, sel_view);
  if (!v11)
    __break(1u);
  v12 = v11;

  swift_unknownObjectWeakAssign();
  v13 = *(_QWORD *)(v4 + 24);
  v41 = *(_DWORD *)(v4 + 8);
  Value = (_OWORD *)AGGraphGetValue();
  v15 = Value[1];
  v44[0] = *Value;
  v44[1] = v15;
  v40 = *(_DWORD *)(v4 + 4);
  v43 = *(_OWORD *)AGGraphGetValue();
  v16 = *(_DWORD *)(v4 + 12);
  v17 = AGGraphGetValue();
  *(_QWORD *)v45 = *(_QWORD *)v17;
  *(_OWORD *)&v45[8] = *(_OWORD *)(v17 + 8);
  v46 = *(_OWORD *)(v17 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  v18 = *(_DWORD *)(v4 + 32);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v13 + 208) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  v19 = swift_bridgeObjectRelease();
  v20 = *(_DWORD *)(v4 + 16);
  LODWORD(v21) = *(_DWORD *)v4;
  DWORD1(v21) = v40;
  *((_QWORD *)&v21 + 1) = __PAIR64__(v16, v41);
  v22 = *(_DWORD *)(v4 + 36);
  *(_OWORD *)v45 = v21;
  *(_DWORD *)&v45[16] = v20;
  *(_QWORD *)&v46 = v13;
  *((_QWORD *)&v46 + 1) = __PAIR64__(v22, v18);
  v23 = v42(v19);
  v25 = 0;
  v26 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v23 >= 2)
  {
    v27 = (uint64_t (*)(_OWORD *))v23;
    v28 = v24;
    v29 = AGGraphGetValue();
    v30 = v37;
    v31 = v38;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v29, v37, v38);
    v32 = *(_QWORD **)(v30 + *(int *)(v5 + 36));
    *(_QWORD *)&v44[0] = *(_QWORD *)((char *)v32 + *(_QWORD *)((*v26 & *v32) + 0x78));
    v33 = *(id *)&v44[0];
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v30, v31);
    v25 = (void *)v27(v44);
    v39((uint64_t (*)(_QWORD))v27, v28);

  }
  swift_unknownObjectWeakAssign();

  AGGraphGetValue();
  swift_weakAssign();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v35 + 32) = *(_QWORD *)(v4 + 24);
    *(_QWORD *)&v44[0] = v35;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void specialized FixedSizeIncrementalLayout<>.place(children:context:state:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double v18;
  int v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  __int128 *Value;
  __int128 v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  _QWORD v42[6];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v8 = v4[1];
  v50 = *v4;
  v51 = v8;
  v52 = v4[2];
  v53 = *((_QWORD *)v4 + 6);
  v9 = *(_QWORD *)(a2 + 280);
  v10 = *(_QWORD *)(a2 + 288);
  v11 = *(_BYTE *)(a2 + 296);
  v12 = *(_OWORD *)(a2 + 104);
  v13 = *(_OWORD *)(a2 + 136);
  v58 = *(_OWORD *)(a2 + 120);
  v59 = v13;
  v60 = *(_OWORD *)(a2 + 152);
  v14 = *(_OWORD *)(a2 + 72);
  v54 = *(_OWORD *)(a2 + 56);
  v55 = v14;
  v56 = *(_OWORD *)(a2 + 88);
  v57 = v12;
  v15 = *(_OWORD *)(a2 + 104);
  v16 = *(_OWORD *)(a2 + 136);
  v47 = *(_OWORD *)(a2 + 120);
  v48 = v16;
  v49 = *(_OWORD *)(a2 + 152);
  v17 = *(_OWORD *)(a2 + 72);
  v43 = *(_OWORD *)(a2 + 56);
  v44 = v17;
  v45 = *(_OWORD *)(a2 + 88);
  v46 = v15;
  if ((v11 & 1) != 0)
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v10, v9));
  v18 = *(double *)v4;
  v19 = *((unsigned __int8 *)v4 + 8);
  v20 = *(_DWORD *)(a2 + 12);
  ScrollGeometry.visibleRect.getter();
  CGRect.subscript.getter();
  v22 = v21;
  v24 = v23;
  if (v19 == 1)
  {
    v18 = 0.0;
    if (v20 != *MEMORY[0x1E0CFED28])
    {
      Value = (__int128 *)AGGraphGetValue();
      v26 = Value[1];
      v43 = *Value;
      v44 = v26;
      v18 = MEMORY[0x18D75BE3C]();
    }
  }
  if (v22 <= 0.0)
    v22 = 0.0;
  if (v22 >= v24)
  {
    v40 = "for placement from visible range";
    v41 = 32;
LABEL_18:
    specialized FixedSizeIncrementalLayout<>.logEarlyReturn(_:)((uint64_t)v40, v41, 2, 0x746E6F7A69726F68, 0xEA00000000006C61);
    return;
  }
  if (v22 > v24)
  {
    __break(1u);
    return;
  }
  if (*(double *)(a2 + 40) <= 0.0)
  {
    v40 = "for placement from minor size";
    v41 = 29;
    goto LABEL_18;
  }
  v27 = *((double *)v4 + 3);
  *(_QWORD *)&v43 = *(_QWORD *)a2;
  DWORD2(v43) = *(_DWORD *)(a2 + 8);
  swift_getKeyPath();
  SizeAndSpacingContext.subscript.getter();
  swift_release();
  v28 = *(double *)&v61;
  v61 = v50;
  v62 = v51;
  v63 = v52;
  v64 = v53;
  v29 = specialized FixedSizeIncrementalLayout<>.makeIndexRange(in:children:childLength:pixelLength:)(v22, v24, v18, v28);
  if ((v31 & 1) != 0)
  {
    v40 = "because unable to make index range";
    v41 = 34;
    goto LABEL_18;
  }
  v32 = v29;
  v33 = v30;
  v42[1] = v42;
  v42[4] = v29;
  v42[5] = v29;
  MEMORY[0x1E0C80A78](v29, v30);
  v42[3] = *(_QWORD *)(a1 + 104);
  v34 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)&v43);
  v42[2] = 2;
  MEMORY[0x1E0C80A78](v34, v35);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v43);
  swift_bridgeObjectRelease();
  v36 = v18 + v27;
  v47 = v58;
  v48 = v59;
  v49 = v60;
  v43 = v54;
  v44 = v55;
  v45 = v56;
  v46 = v57;
  if ((v11 & 1) != 0)
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v10, v9));
  ScrollGeometry.visibleRect.getter();
  v37 = v36 * (double)v32;
  *(double *)(a4 + 8) = v37;
  *(_QWORD *)(a4 + 16) = v38;
  *(double *)(a4 + 24) = v36 * (double)v33 - v37;
  *(_QWORD *)(a4 + 32) = v39;
  specialized FixedSizeIncrementalLayout<>.logPlacement(_:_:)(0x746E6F7A69726F68, 0xEA00000000006C61);
}

{
  __int128 *v4;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double v18;
  int v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  __int128 *Value;
  __int128 v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  _QWORD v43[6];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v8 = v4[1];
  v51 = *v4;
  v52 = v8;
  v53 = v4[2];
  v54 = *((_QWORD *)v4 + 6);
  v9 = *(_QWORD *)(a2 + 280);
  v10 = *(_QWORD *)(a2 + 288);
  v11 = *(_BYTE *)(a2 + 296);
  v12 = *(_OWORD *)(a2 + 104);
  v13 = *(_OWORD *)(a2 + 136);
  v59 = *(_OWORD *)(a2 + 120);
  v60 = v13;
  v61 = *(_OWORD *)(a2 + 152);
  v14 = *(_OWORD *)(a2 + 72);
  v55 = *(_OWORD *)(a2 + 56);
  v56 = v14;
  v57 = *(_OWORD *)(a2 + 88);
  v58 = v12;
  v15 = *(_OWORD *)(a2 + 104);
  v16 = *(_OWORD *)(a2 + 136);
  v48 = *(_OWORD *)(a2 + 120);
  v49 = v16;
  v50 = *(_OWORD *)(a2 + 152);
  v17 = *(_OWORD *)(a2 + 72);
  v44 = *(_OWORD *)(a2 + 56);
  v45 = v17;
  v46 = *(_OWORD *)(a2 + 88);
  v47 = v15;
  if ((v11 & 1) != 0)
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v10, v9));
  v18 = *(double *)v4;
  v19 = *((unsigned __int8 *)v4 + 8);
  v20 = *(_DWORD *)(a2 + 12);
  ScrollGeometry.visibleRect.getter();
  CGRect.subscript.getter();
  v22 = v21;
  v24 = v23;
  if (v19 == 1)
  {
    v18 = 0.0;
    if (v20 != *MEMORY[0x1E0CFED28])
    {
      Value = (__int128 *)AGGraphGetValue();
      v26 = Value[1];
      v44 = *Value;
      v45 = v26;
      MEMORY[0x18D75BE3C]();
      v18 = v27;
    }
  }
  if (v22 <= 0.0)
    v22 = 0.0;
  if (v22 >= v24)
  {
    v41 = "for placement from visible range";
    v42 = 32;
LABEL_18:
    specialized FixedSizeIncrementalLayout<>.logEarlyReturn(_:)((uint64_t)v41, v42, 2, 0x6C61636974726576, 0xE800000000000000);
    return;
  }
  if (v22 > v24)
  {
    __break(1u);
    return;
  }
  if (*(double *)(a2 + 32) <= 0.0)
  {
    v41 = "for placement from minor size";
    v42 = 29;
    goto LABEL_18;
  }
  v28 = *((double *)v4 + 3);
  *(_QWORD *)&v44 = *(_QWORD *)a2;
  DWORD2(v44) = *(_DWORD *)(a2 + 8);
  swift_getKeyPath();
  SizeAndSpacingContext.subscript.getter();
  swift_release();
  v29 = *(double *)&v62;
  v62 = v51;
  v63 = v52;
  v64 = v53;
  v65 = v54;
  v30 = specialized FixedSizeIncrementalLayout<>.makeIndexRange(in:children:childLength:pixelLength:)(v22, v24, v18, v29);
  if ((v32 & 1) != 0)
  {
    v41 = "because unable to make index range";
    v42 = 34;
    goto LABEL_18;
  }
  v33 = v30;
  v34 = v31;
  v43[1] = v43;
  v43[4] = v30;
  v43[5] = v30;
  MEMORY[0x1E0C80A78](v30, v31);
  v43[3] = *(_QWORD *)(a1 + 104);
  v35 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)&v44);
  v43[2] = 2;
  MEMORY[0x1E0C80A78](v35, v36);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v44);
  swift_bridgeObjectRelease();
  v37 = v18 + v28;
  v48 = v59;
  v49 = v60;
  v50 = v61;
  v44 = v55;
  v45 = v56;
  v46 = v57;
  v47 = v58;
  if ((v11 & 1) != 0)
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v10, v9));
  ScrollGeometry.visibleRect.getter();
  v38 = v37 * (double)v33;
  *(_QWORD *)(a4 + 8) = v39;
  *(double *)(a4 + 16) = v38;
  *(_QWORD *)(a4 + 24) = v40;
  *(double *)(a4 + 32) = v37 * (double)v34 - v38;
  specialized FixedSizeIncrementalLayout<>.logPlacement(_:_:)(0x6C61636974726576, 0xE800000000000000);
}

uint64_t specialized FixedSizeIncrementalLayout<>.makeIndexRange(in:children:childLength:pixelLength:)(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  double v17;
  double v18;
  uint64_t v20;
  uint64_t result;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;

  v9 = type metadata accessor for FloatingPointRoundingRule();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(double *)(v4 + 24) + a3;
  if (v28 <= 0.0)
    return 0;
  v26 = a2;
  v27 = a1;
  v14 = *MEMORY[0x1E0DED4F0];
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v15(v13, v14, v9);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v13, a4);
  v16 = *(void (**)(char *, uint64_t))(v10 + 8);
  v16(v13, v9);
  v15(v13, v14, v9);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v13, a4);
  v16(v13, v9);
  v15(v13, v14, v9);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v13, a4);
  v16(v13, v9);
  v17 = v27 / v28;
  v18 = v26 / v28;
  if ((~COERCE__INT64(v27 / v28) & 0x7FF0000000000000) == 0
    || (~COERCE__INT64(v26 / v28) & 0x7FF0000000000000) == 0)
  {
    return 0;
  }
  v25 = 2;
  result = _ViewList_Node.estimatedCount(style:)();
  v22 = floor(v17);
  if ((~*(_QWORD *)&v22 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v22 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v22 >= 9.22337204e18)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v20 = (uint64_t)v22 & ~((uint64_t)v22 >> 63);
  if (result < v20)
    v20 = result;
  v23 = ceil(v18);
  if ((~*(_QWORD *)&v23 & 0x7FF0000000000000) == 0)
    goto LABEL_25;
  if (v23 <= -9.22337204e18)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v23 < 9.22337204e18)
  {
    v24 = (uint64_t)v23 & ~((uint64_t)v23 >> 63);
    if (result < v24)
      v24 = result;
    if (v20 >= v24)
      return 0;
    return v20;
  }
LABEL_27:
  __break(1u);
  return result;
}

void specialized FixedSizeIncrementalLayout<>.firstIndex(children:context:state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  if ((*(_BYTE *)(a2 + 296) & 1) != 0)
    ScrollGeometry.outsetForAX(limit:)(*(CGSize *)(a2 + 280));
  v4 = *(_DWORD *)(a2 + 12);
  ScrollGeometry.visibleRect.getter();
  CGRect.subscript.getter();
  v6 = v5;
  v8 = v7;
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    v9 = 0.0;
    if (v4 != *MEMORY[0x1E0CFED28])
    {
      AGGraphGetValue();
      v9 = MEMORY[0x18D75BE3C]();
    }
  }
  else
  {
    v9 = *(double *)v2;
  }
  if (v6 <= 0.0)
    v6 = 0.0;
  if (v6 < v8)
  {
    if (v6 > v8)
    {
      __break(1u);
    }
    else
    {
      swift_getKeyPath();
      SizeAndSpacingContext.subscript.getter();
      swift_release();
      specialized FixedSizeIncrementalLayout<>.makeIndexRange(in:children:childLength:pixelLength:)(v6, v8, v9, v10);
    }
  }
}

uint64_t specialized FixedSizeIncrementalLayout<>.firstIndex(children:context:state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t result;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  char v12;
  double v13;

  if ((*(_BYTE *)(a2 + 296) & 1) != 0)
    ScrollGeometry.outsetForAX(limit:)(*(CGSize *)(a2 + 280));
  v4 = *(_DWORD *)(a2 + 12);
  ScrollGeometry.visibleRect.getter();
  result = CGRect.subscript.getter();
  v7 = v6;
  v9 = v8;
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    v10 = 0.0;
    if (v4 != *MEMORY[0x1E0CFED28])
    {
      AGGraphGetValue();
      result = MEMORY[0x18D75BE3C]();
      v10 = v11;
    }
  }
  else
  {
    v10 = *(double *)v2;
  }
  if (v7 <= 0.0)
    v7 = 0.0;
  if (v7 >= v9)
    return 0;
  if (v7 > v9)
  {
    __break(1u);
  }
  else
  {
    swift_getKeyPath();
    SizeAndSpacingContext.subscript.getter();
    swift_release();
    result = specialized FixedSizeIncrementalLayout<>.makeIndexRange(in:children:childLength:pixelLength:)(v7, v9, v10, v13);
    if ((v12 & 1) != 0)
      return 0;
  }
  return result;
}

id specialized PlatformViewRepresentableAdaptor.makeViewProvider(context:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  id v5;
  id v6;
  id v7;

  v1 = *(void **)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = objc_allocWithZone(MEMORY[0x1E0DC3C48]);
  swift_retain();
  v6 = v1;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v2, v3, v4);
  v7 = objc_msgSend(v5, sel_init);
  objc_msgSend(v7, sel_addTarget_action_forControlEvents_, v6, sel_textDidChange_, 0x20000);
  objc_msgSend(v7, sel_addTarget_action_forControlEvents_, v6, sel_editingDidBegin_, 0x10000);
  objc_msgSend(v7, sel_addTarget_action_forControlEvents_, v6, sel_editingDidEnd_, 0x40000);
  swift_release();
  swift_release();

  outlined consume of RepresentableContextValues.EnvironmentStorage(v2, v3, v4);
  return v7;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  _BYTE v12[8];
  _BYTE v13[16];

  v2 = v1;
  v3 = *(void **)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_BYTE *)(a1 + 32);
  v7 = objc_allocWithZone(MEMORY[0x1E0DC3DB8]);
  swift_retain();
  v8 = v3;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, v6);
  v9 = objc_msgSend(v7, sel_init);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<UITextField>((uint64_t)v12, (uint64_t)v13);
  v13[8] = 0;
  PlatformTextFieldCoordinator.configure(field:)((uint64_t)v13);
  outlined destroy of PlatformTextFieldCoordinator.FieldStorage((uint64_t)v13);
  objc_msgSend(v9, sel_setBorderStyle_, *(_QWORD *)(v2 + *(int *)(type metadata accessor for SystemTextFieldConfiguration(0) + 20)));
  v10 = (void *)MEMORY[0x18D75CC88](32, 0xE100000000000000);
  objc_msgSend(v9, sel_setText_, v10);
  swift_release();
  swift_release();

  outlined consume of RepresentableContextValues.EnvironmentStorage(v4, v5, v6);
  return v9;
}

void specialized PlatformViewRepresentableAdaptor.updateViewProvider(_:context:)(void *a1, uint64_t a2)
{
  __int128 *v2;
  __int128 v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  void *v15;
  char *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _BYTE v28[16];
  uint64_t v29;
  void *v30;

  v4 = v2[1];
  v24 = *v2;
  v25 = v4;
  v26 = v2[2];
  v5 = *(char **)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  v9 = MEMORY[0x1E0DEA968];
  outlined init with take of Image.Resolved?((uint64_t)&v26, (uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968]);
  outlined init with take of Image.Resolved?((uint64_t)v28, (uint64_t)&v29, (unint64_t *)&lazy cache variable for type metadata for String?, v9);
  v10 = v30;
  if (v30)
  {
    v11 = v29;
    swift_retain();
    v12 = v5;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
    v10 = (void *)MEMORY[0x18D75CC88](v11, v10);
  }
  else
  {
    swift_retain();
    v13 = v5;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  }
  objc_msgSend(a1, sel_setTitle_, v10, v7, v6);

  objc_msgSend(a1, sel_setSupportsAlpha_, BYTE8(v25));
  v14 = (void *)v25;
  v27 = v24;
  type metadata accessor for Binding<UIColor>();
  MEMORY[0x18D75B9C8](&v23);
  v15 = v23;
  objc_msgSend(a1, sel_setSelectedColor_, v23);

  v16 = &v5[OBJC_IVAR____TtCV7SwiftUIP33_0B012DB3D42FBF9295A4AA29478C936C18BridgedColorPicker11Coordinator_parent];
  v17 = *(void **)&v5[OBJC_IVAR____TtCV7SwiftUIP33_0B012DB3D42FBF9295A4AA29478C936C18BridgedColorPicker11Coordinator_parent
                    + 16];
  v19 = v25;
  v18 = v26;
  *(_OWORD *)v16 = v24;
  *((_OWORD *)v16 + 1) = v19;
  *((_OWORD *)v16 + 2) = v18;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v27);
  swift_retain();
  v20 = v14;
  outlined retain of String?((uint64_t)v28);
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v22, v21, v8);

}

void specialized IncrementalChildPrefetcher.updateValue()(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  int v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v4 = v2;
  Value = AGGraphGetValue();
  v6 = *(_QWORD *)Value;
  if (*(_QWORD *)(v2 + 32) != *(_QWORD *)Value)
  {
    v7 = *(_QWORD *)(Value + 8);
    v8 = *(unsigned __int8 *)(Value + 16);
    *(_QWORD *)(v2 + 32) = v6;
    type metadata accessor for IncrementalLayoutViewCache();
    if ((*(_BYTE *)(*(_QWORD *)AGGraphGetValue() + 216) & v8) != 0)
    {
      v28 = *(_DWORD *)v2;
      lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
      if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
        goto LABEL_8;
      if (one-time initialization token for log != -1)
        goto LABEL_22;
      while (1)
      {
        v9 = type metadata accessor for Logger();
        __swift_project_value_buffer(v9, (uint64_t)static Log.LazyLayoutPrefetch.log);
        v10 = Logger.logObject.getter();
        v11 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v10, v11))
        {
          v12 = swift_slowAlloc();
          v27 = swift_slowAlloc();
          v30 = v27;
          *(_DWORD *)v12 = 136446466;
          v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000040, (unint64_t)a1, &v30);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v12 + 12) = 2082;
          v13 = MEMORY[0x18D754CF0](v28, a2);
          v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v30);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_186E48000, v10, v11, "%{public}s %{public}s start prefetch", (uint8_t *)v12, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x18D760108](v27, -1, -1);
          MEMORY[0x18D760108](v12, -1, -1);
        }

LABEL_8:
        if (AGGraphGetCurrentAttribute() != *MEMORY[0x1E0CFED28])
          break;
        __break(1u);
LABEL_22:
        swift_once();
      }
      v15 = (id)AGGraphGetAttributeGraph();
      AGGraphGetDeadline();
      AGGraphSetDeadline();
      specialized closure #1 in IncrementalChildPrefetcher.updateValue()(v4, v6, v7, v8, a1, a2);
      AGGraphSetDeadline();

      v16 = *(unsigned __int8 *)(v4 + 56);
      if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
      {
        if (one-time initialization token for log != -1)
          swift_once();
        v17 = type metadata accessor for Logger();
        __swift_project_value_buffer(v17, (uint64_t)static Log.LazyLayoutPrefetch.log);
        v18 = Logger.logObject.getter();
        v19 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v18, v19))
        {
          v20 = swift_slowAlloc();
          v21 = swift_slowAlloc();
          v32 = v21;
          *(_DWORD *)v20 = 136446722;
          v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000040, (unint64_t)a1, &v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v20 + 12) = 2082;
          v22 = MEMORY[0x18D754CF0](v28, a2);
          v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 22) = 2082;
          if (v16)
          {
            if (v16 == 1)
            {
              v24 = 0xEF7374757074754FLL;
              v25 = 0x6863746566657270;
            }
            else
            {
              v24 = 0xE800000000000000;
              v25 = 0x6574656C706D6F63;
            }
          }
          else
          {
            v30 = 0x77656956656B616DLL;
            v31 = 0xEA00000000002320;
            v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v26);
            swift_bridgeObjectRelease();
            v25 = v30;
            v24 = v31;
          }
          v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, &v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_186E48000, v18, v19, "%{public}s %{public}s end prefetch, phase=%{public}s", (uint8_t *)v20, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x18D760108](v21, -1, -1);
          MEMORY[0x18D760108](v20, -1, -1);
        }

      }
    }
  }
}

uint64_t specialized closure #1 in IncrementalChildPrefetcher.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  int v10;
  uint64_t result;
  int v12;
  char v13;

  v10 = *(_DWORD *)(a1 + 40);
  type metadata accessor for IncrementalLayoutViewCache();
  result = AGGraphGetValue();
  v12 = *(_DWORD *)(*(_QWORD *)result + 212);
  if (v10 != v12)
  {
    *(_DWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 56) = 0;
  }
  do
  {
    if (*(unsigned __int8 *)(a1 + 56) > 1u)
      break;
    result = a5(a2, a3, a4);
    *(_QWORD *)(a1 + 48) = result;
    *(_BYTE *)(a1 + 56) = v13;
    if (!v13)
      break;
    result = AGGraphHasDeadlinePassed();
  }
  while (!(_DWORD)result);
  return result;
}

{
  int v10;
  uint64_t result;
  int v12;
  char v13;

  v10 = *(_DWORD *)(a1 + 40);
  type metadata accessor for IncrementalLayoutViewCache();
  result = AGGraphGetValue();
  v12 = *(_DWORD *)(*(_QWORD *)result + 212);
  if (v10 == v12)
    goto LABEL_3;
  *(_DWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  do
  {
    result = a5(a2, a3, a4);
    *(_QWORD *)(a1 + 48) = result;
    *(_BYTE *)(a1 + 56) = v13;
    if (!v13)
      break;
    result = AGGraphHasDeadlinePassed();
    if ((result & 1) != 0)
      break;
LABEL_3:
    ;
  }
  while (*(unsigned __int8 *)(a1 + 56) < 2u);
  return result;
}

uint64_t specialized closure #1 in IncrementalChildPrefetcher.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unint64_t a6)
{
  int v9;
  uint64_t result;
  int v11;
  char v12;

  v9 = *(_DWORD *)(a1 + 40);
  type metadata accessor for IncrementalLayoutViewCache();
  result = AGGraphGetValue();
  v11 = *(_DWORD *)(*(_QWORD *)result + 212);
  if (v9 != v11)
  {
    *(_DWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 56) = 0;
  }
  do
  {
    if (*(unsigned __int8 *)(a1 + 56) > 1u)
      break;
    result = specialized IncrementalChildPrefetcher.step(info:)(a5, a6);
    *(_QWORD *)(a1 + 48) = result;
    *(_BYTE *)(a1 + 56) = v12;
    if (!v12)
      break;
    result = AGGraphHasDeadlinePassed();
  }
  while (!(_DWORD)result);
  return result;
}

uint64_t specialized IncrementalChildPrefetcher.step(info:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t CurrentAttribute;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v4 = (uint64_t)v3;
  v6 = *((_QWORD *)v3 + 6);
  if (*((_BYTE *)v3 + 56))
  {
    if (*((_BYTE *)v3 + 56) != 1)
      return v6;
    type metadata accessor for IncrementalLayoutViewCache();
    AGGraphGetValue();
    swift_retain();
    v7 = IncrementalLayoutViewCache.prefetchOutputs()();
    swift_release();
    if (v7)
      return v6;
    return v7;
  }
  v10 = *v3;
  lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
    goto LABEL_10;
  if (one-time initialization token for log != -1)
    goto LABEL_18;
  while (1)
  {
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Log.LazyLayoutPrefetch.log);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc();
      v20 = swift_slowAlloc();
      v21 = v20;
      *(_DWORD *)v14 = 136446722;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x8000000187BD5BD0, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2082;
      v15 = MEMORY[0x18D754CF0](v10, &type metadata for LazyVStackLayout);
      v10 = v16;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 22) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v12, v13, "%{public}s %{public}s making item %ld", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v20, -1, -1);
      MEMORY[0x18D760108](v14, -1, -1);
    }

LABEL_10:
    CurrentAttribute = AGGraphGetCurrentAttribute();
    if ((_DWORD)CurrentAttribute != *MEMORY[0x1E0CFED28])
      break;
    __break(1u);
LABEL_18:
    swift_once();
  }
  v18 = CurrentAttribute;
  AGGraphClearUpdate();
  v7 = specialized closure #1 in IncrementalChildPrefetcher.step(info:)(v18, v4, a1, a2, a3, v6, (uint64_t)&type metadata for LazyVStackLayout, &lazy cache variable for type metadata for _IncrementalStack_State<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t (*)(uint64_t *, uint64_t, uint64_t *, _BYTE *, uint64_t, uint64_t, uint64_t, unint64_t))specialized IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:));
  AGGraphSetUpdate();
  if (!v7)
    return v7;
  if (v7 != 1)
    ++v6;
  return v6;
}

{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t CurrentAttribute;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v4 = (uint64_t)v3;
  v6 = *((_QWORD *)v3 + 6);
  if (*((_BYTE *)v3 + 56))
  {
    if (*((_BYTE *)v3 + 56) != 1)
      return v6;
    type metadata accessor for IncrementalLayoutViewCache();
    AGGraphGetValue();
    swift_retain();
    v7 = IncrementalLayoutViewCache.prefetchOutputs()();
    swift_release();
    if (v7)
      return v6;
    return v7;
  }
  v10 = *v3;
  lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
    goto LABEL_10;
  if (one-time initialization token for log != -1)
    goto LABEL_18;
  while (1)
  {
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Log.LazyLayoutPrefetch.log);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc();
      v20 = swift_slowAlloc();
      v21 = v20;
      *(_DWORD *)v14 = 136446722;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x8000000187BD5CE0, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2082;
      v15 = MEMORY[0x18D754CF0](v10, &type metadata for LazyHStackLayout);
      v10 = v16;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 22) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v12, v13, "%{public}s %{public}s making item %ld", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v20, -1, -1);
      MEMORY[0x18D760108](v14, -1, -1);
    }

LABEL_10:
    CurrentAttribute = AGGraphGetCurrentAttribute();
    if ((_DWORD)CurrentAttribute != *MEMORY[0x1E0CFED28])
      break;
    __break(1u);
LABEL_18:
    swift_once();
  }
  v18 = CurrentAttribute;
  AGGraphClearUpdate();
  v7 = specialized closure #1 in IncrementalChildPrefetcher.step(info:)(v18, v4, a1, a2, a3, v6, (uint64_t)&type metadata for LazyHStackLayout, &lazy cache variable for type metadata for _IncrementalStack_State<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t (*)(uint64_t *, uint64_t, uint64_t *, _BYTE *, uint64_t, uint64_t, uint64_t, unint64_t))specialized IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:));
  AGGraphSetUpdate();
  if (!v7)
    return v7;
  if (v7 != 1)
    ++v6;
  return v6;
}

{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t CurrentAttribute;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v4 = (uint64_t)v3;
  v6 = *((_QWORD *)v3 + 6);
  if (*((_BYTE *)v3 + 56))
  {
    if (*((_BYTE *)v3 + 56) != 1)
      return v6;
    type metadata accessor for IncrementalLayoutViewCache();
    AGGraphGetValue();
    swift_retain();
    v7 = IncrementalLayoutViewCache.prefetchOutputs()();
    swift_release();
    if (v7)
      return v6;
    return v7;
  }
  v10 = *v3;
  lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
    goto LABEL_10;
  if (one-time initialization token for log != -1)
    goto LABEL_18;
  while (1)
  {
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Log.LazyLayoutPrefetch.log);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc();
      v20 = swift_slowAlloc();
      v21 = v20;
      *(_DWORD *)v14 = 136446722;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000036, 0x8000000187BD5F30, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2082;
      v15 = MEMORY[0x18D754CF0](v10, &type metadata for LazyHGridLayout);
      v10 = v16;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 22) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v12, v13, "%{public}s %{public}s making item %ld", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v20, -1, -1);
      MEMORY[0x18D760108](v14, -1, -1);
    }

LABEL_10:
    CurrentAttribute = AGGraphGetCurrentAttribute();
    if ((_DWORD)CurrentAttribute != *MEMORY[0x1E0CFED28])
      break;
    __break(1u);
LABEL_18:
    swift_once();
  }
  v18 = CurrentAttribute;
  AGGraphClearUpdate();
  v7 = specialized closure #1 in IncrementalChildPrefetcher.step(info:)(v18, v4, a1, a2, a3, v6, (uint64_t)&type metadata for LazyHGridLayout, &lazy cache variable for type metadata for _IncrementalStack_State<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t (*)(uint64_t *, uint64_t, uint64_t *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:));
  AGGraphSetUpdate();
  if (!v7)
    return v7;
  if (v7 != 1)
    ++v6;
  return v6;
}

{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t CurrentAttribute;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v4 = (uint64_t)v3;
  v6 = *((_QWORD *)v3 + 6);
  if (*((_BYTE *)v3 + 56))
  {
    if (*((_BYTE *)v3 + 56) != 1)
      return v6;
    type metadata accessor for IncrementalLayoutViewCache();
    AGGraphGetValue();
    swift_retain();
    v7 = IncrementalLayoutViewCache.prefetchOutputs()();
    swift_release();
    if (v7)
      return v6;
    return v7;
  }
  v10 = *v3;
  lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
    goto LABEL_10;
  if (one-time initialization token for log != -1)
    goto LABEL_18;
  while (1)
  {
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Log.LazyLayoutPrefetch.log);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc();
      v20 = swift_slowAlloc();
      v21 = v20;
      *(_DWORD *)v14 = 136446722;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000036, 0x8000000187BD5FE0, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2082;
      v15 = MEMORY[0x18D754CF0](v10, &type metadata for LazyVGridLayout);
      v10 = v16;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 22) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v12, v13, "%{public}s %{public}s making item %ld", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v20, -1, -1);
      MEMORY[0x18D760108](v14, -1, -1);
    }

LABEL_10:
    CurrentAttribute = AGGraphGetCurrentAttribute();
    if ((_DWORD)CurrentAttribute != *MEMORY[0x1E0CFED28])
      break;
    __break(1u);
LABEL_18:
    swift_once();
  }
  v18 = CurrentAttribute;
  AGGraphClearUpdate();
  v7 = specialized closure #1 in IncrementalChildPrefetcher.step(info:)(v18, v4, a1, a2, a3, v6, (uint64_t)&type metadata for LazyVGridLayout, &lazy cache variable for type metadata for _IncrementalStack_State<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t (*)(uint64_t *, uint64_t, uint64_t *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:));
  AGGraphSetUpdate();
  if (!v7)
    return v7;
  if (v7 != 1)
    ++v6;
  return v6;
}

uint64_t specialized closure #1 in IncrementalChildPrefetcher.step(info:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t *a8, uint64_t (*a9)(void), uint64_t (*a10)(uint64_t *, uint64_t, uint64_t *, _BYTE *, uint64_t, uint64_t, uint64_t, unint64_t))
{
  int v13;
  int v14;
  __int128 *Value;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  _BYTE v47[48];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v13 = *MEMORY[0x1E0CFED28];
  v14 = *(_DWORD *)(a2 + 28);
  LOBYTE(v45) = 0;
  SizeAndSpacingContext.init(context:owner:environment:)();
  v39 = v45;
  v40 = v46;
  v41 = v14;
  v44 = *(_OWORD *)AGGraphGetValue();
  Value = (__int128 *)AGGraphGetValue();
  v16 = Value[1];
  v31 = *Value;
  v32 = v16;
  v17 = AGGraphGetValue();
  *(_QWORD *)v47 = *(_QWORD *)v17;
  *(_OWORD *)&v47[8] = *(_OWORD *)(v17 + 8);
  *(_OWORD *)&v47[24] = *(_OWORD *)(v17 + 24);
  type metadata accessor for IncrementalLayoutViewCache();
  AGGraphGetValue();
  v43 = *(_BYTE *)AGGraphGetValue();
  v42 = *(_DWORD *)(AGGraphGetValue() + 20);
  AGGraphGetValue();
  v18 = *(_BYTE *)AGGraphGetValue();
  swift_retain();
  _IncrementalLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)(&v39, &v31, (uint64_t)v47, &v43, &v42, v18, (uint64_t)&v45);
  AGGraphGetValue();
  swift_retain();
  IncrementalLayoutViewCache.children(context:)(v13, (uint64_t)&v39);
  swift_release();
  v19 = *(_QWORD *)AGGraphGetValue();
  type metadata accessor for VStack<TableHeaderViewCore>(0, a8, a9, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _IncrementalStack_State);
  v21 = v20;
  v22 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v19 + 280);
  swift_retain();
  v22(&v31, v21, v21);
  swift_release();
  v23 = AGGraphGetValue();
  v24 = *(_QWORD *)v23;
  v25 = *(_QWORD *)(v23 + 8);
  v26 = *(_BYTE *)(v23 + 16);
  v27 = *(unsigned int *)(v23 + 20);
  *(_OWORD *)&v47[32] = v33;
  v48 = v34;
  *(_OWORD *)v47 = v31;
  *(_OWORD *)&v47[16] = v32;
  v51 = v37;
  v52 = v38;
  v49 = v35;
  v50 = v36;
  LOBYTE(v44) = v26;
  v28 = a10(&v39, a5, &v45, v47, a6, v24, v25, v26 | (unint64_t)(v27 << 32));
  outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)v47);
  outlined destroy of _IncrementalLayout_Children((uint64_t)&v39);
  return v28;
}

uint64_t specialized closure #1 in IncrementalChildPrefetcher.step(info:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t *a8, uint64_t (*a9)(void), uint64_t (*a10)(uint64_t *, uint64_t, uint64_t *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  int v13;
  int v14;
  __int128 *Value;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  _BYTE v47[48];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v13 = *MEMORY[0x1E0CFED28];
  v14 = *(_DWORD *)(a2 + 28);
  LOBYTE(v45) = 0;
  SizeAndSpacingContext.init(context:owner:environment:)();
  v39 = v45;
  v40 = v46;
  v41 = v14;
  v44 = *(_OWORD *)AGGraphGetValue();
  Value = (__int128 *)AGGraphGetValue();
  v16 = Value[1];
  v31 = *Value;
  v32 = v16;
  v17 = AGGraphGetValue();
  *(_QWORD *)v47 = *(_QWORD *)v17;
  *(_OWORD *)&v47[8] = *(_OWORD *)(v17 + 8);
  *(_OWORD *)&v47[24] = *(_OWORD *)(v17 + 24);
  type metadata accessor for IncrementalLayoutViewCache();
  AGGraphGetValue();
  v43 = *(_BYTE *)AGGraphGetValue();
  v42 = *(_DWORD *)(AGGraphGetValue() + 28);
  AGGraphGetValue();
  v18 = *(_BYTE *)AGGraphGetValue();
  swift_retain();
  _IncrementalLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)(&v39, &v31, (uint64_t)v47, &v43, &v42, v18, (uint64_t)&v45);
  AGGraphGetValue();
  swift_retain();
  IncrementalLayoutViewCache.children(context:)(v13, (uint64_t)&v39);
  swift_release();
  v19 = *(_QWORD *)AGGraphGetValue();
  type metadata accessor for VStack<TableHeaderViewCore>(0, a8, a9, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _IncrementalStack_State);
  v21 = v20;
  v22 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v19 + 280);
  swift_retain();
  v22(&v31, v21, v21);
  swift_release();
  v23 = AGGraphGetValue();
  v24 = *(_QWORD *)v23;
  v25 = *(_QWORD *)(v23 + 8);
  v26 = *(_QWORD *)(v23 + 16);
  LOBYTE(v22) = *(_BYTE *)(v23 + 24);
  v27 = *(unsigned int *)(v23 + 28);
  *(_OWORD *)&v47[32] = v33;
  v48 = v34;
  *(_OWORD *)v47 = v31;
  *(_OWORD *)&v47[16] = v32;
  v52 = v38;
  v50 = v36;
  v51 = v37;
  v49 = v35;
  swift_bridgeObjectRetain();
  LOBYTE(v44) = (_BYTE)v22;
  v28 = a10(&v39, a5, &v45, v47, a6, v24, v25, v26, v22 | (unint64_t)(v27 << 32));
  swift_bridgeObjectRelease();
  outlined release of _IncrementalStack_State<LazyHGridLayout>((uint64_t)v47);
  outlined destroy of _IncrementalLayout_Children((uint64_t)&v39);
  return v28;
}

id (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

void (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t *(*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

id specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return FoundationProgressView.Body.BodyAttribute.updateValue()();
}

void specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t))closure #1 in LimitedAvailabilityCommandContent.IndirectOutputs.updateValue());
}

{
  specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t))closure #1 in LimitedAvailabilityScene.IndirectOutputs.updateValue());
}

{
  specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t))closure #1 in LimitedAvailabilityConfiguration.IndirectOutputs.updateValue());
}

{
  specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t))closure #1 in LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs.updateValue());
}

uint64_t *specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return BadgeInfoActionBinding.updateValue()();
}

{
  return ScrollStateActionBinding.updateValue()();
}

void specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;

  if (!*(_QWORD *)(a1 + 96))
  {
    v5 = (id)AGSubgraphGetGraph();
    v6 = (void *)AGSubgraphCreate();

    v7 = *(void **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v6;
    v9 = v6;

    AGSubgraphAddChild();
    AGGraphClearUpdate();
    v8 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    a3(a1);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t merge32(_:_:)(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (a2 | (unint64_t)(a1 << 32)) + ~((unint64_t)a2 << 32);
  v3 = (v2 ^ (v2 >> 22)) + ~((v2 ^ (v2 >> 22)) << 13);
  v4 = (9 * (v3 ^ (v3 >> 8))) ^ ((9 * (v3 ^ (v3 >> 8))) >> 15);
  return ((v4 + ~(v4 << 27)) >> 31) ^ ((_DWORD)v4 + ~((_DWORD)v4 << 27));
}

uint64_t partial apply for closure #2 in static _ScrollableLayoutView._makeView(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #2 in static _ScrollableLayoutView._makeView(view:inputs:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in static _ScrollableLayoutView._makeView(view:inputs:));
}

void type metadata accessor for _ScrollableLayoutView()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t partial apply for closure #3 in static _ScrollableLayoutView._makeView(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #2 in static _ScrollableLayoutView._makeView(view:inputs:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #3 in static _ScrollableLayoutView._makeView(view:inputs:));
}

uint64_t partial apply for closure #2 in static _ScrollableLayoutView._makeView(view:inputs:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

unint64_t lazy protocol witness table accessor for type _ViewInputs.ContainingScrollViewInput and conformance _ViewInputs.ContainingScrollViewInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewInputs.ContainingScrollViewInput and conformance _ViewInputs.ContainingScrollViewInput;
  if (!lazy protocol witness table cache variable for type _ViewInputs.ContainingScrollViewInput and conformance _ViewInputs.ContainingScrollViewInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ViewInputs.ContainingScrollViewInput, &type metadata for _ViewInputs.ContainingScrollViewInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.ContainingScrollViewInput and conformance _ViewInputs.ContainingScrollViewInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewInputs.ContainingScrollViewInput and conformance _ViewInputs.ContainingScrollViewInput;
  if (!lazy protocol witness table cache variable for type _ViewInputs.ContainingScrollViewInput and conformance _ViewInputs.ContainingScrollViewInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ViewInputs.ContainingScrollViewInput, &type metadata for _ViewInputs.ContainingScrollViewInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.ContainingScrollViewInput and conformance _ViewInputs.ContainingScrollViewInput);
  }
  return result;
}

void type metadata accessor for ScrollableLayoutState.Value()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for ScrollableLayoutViewAdaptor()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type ScrollableItemLayoutComputer and conformance ScrollableItemLayoutComputer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollableItemLayoutComputer and conformance ScrollableItemLayoutComputer;
  if (!lazy protocol witness table cache variable for type ScrollableItemLayoutComputer and conformance ScrollableItemLayoutComputer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollableItemLayoutComputer, &unk_1E1AF8050);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollableItemLayoutComputer and conformance ScrollableItemLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollableItemLayoutComputer and conformance ScrollableItemLayoutComputer;
  if (!lazy protocol witness table cache variable for type ScrollableItemLayoutComputer and conformance ScrollableItemLayoutComputer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollableItemLayoutComputer, &unk_1E1AF8050);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollableItemLayoutComputer and conformance ScrollableItemLayoutComputer);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in _ScrollableLayoutView<A, B>()
{
  return &protocol witness table for _ScrollableLayoutView<A, B>;
}

void associated type witness table accessor for _ScrollableContentProvider.Root : View in _ScrollableLayoutView<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata completion function for _ScrollableLayoutView()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  _QWORD v3[6];

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v3[4] = v3;
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      v3[5] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ScrollableLayoutView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + v9 + 8;
  v11 = v9 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || (v10 & ~v9) + *(_QWORD *)(v8 + 64) > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }
  else
  {
    v15 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v7 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v15, ((unint64_t)a2 + v10) & v15, v5);
  }
  return v4;
}

uint64_t destroy for _ScrollableLayoutView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + ((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t initializeWithCopy for _ScrollableLayoutView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  *(_QWORD *)((v7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v7 + a2) & 0xFFFFFFFFFFFFF8);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 16))(((v7 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v8 + 80) + 8 + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((v7 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v8 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t assignWithCopy for _ScrollableLayoutView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  *(_QWORD *)((v7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v7 + a2) & 0xFFFFFFFFFFFFF8);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((v7 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v8 + 80) + 8 + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((v7 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v8 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t initializeWithTake for _ScrollableLayoutView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  *(_QWORD *)((v7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v7 + a2) & 0xFFFFFFFFFFFFF8);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((v7 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v8 + 80) + 8 + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((v7 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v8 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t assignWithTake for _ScrollableLayoutView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  *(_QWORD *)((v7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v7 + a2) & 0xFFFFFFFFFFFFF8);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((v7 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v8 + 80) + 8 + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((v7 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v8 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _ScrollableLayoutView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = ((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + v9 + 8;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(unint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_187083D5C + 4 * byte_187C0539C[v17 - 1]))();
}

void storeEnumTagSinglePayload for _ScrollableLayoutView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X17 }
}

void *type metadata accessor for ScrollableItemLayoutComputer()
{
  return &unk_1E1AF8050;
}

uint64_t destroy for ScrollableLayoutViewAdaptor()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ScrollableLayoutViewAdaptor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ScrollableLayoutViewAdaptor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for ScrollableLayoutViewAdaptor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollableLayoutViewAdaptor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollableLayoutViewAdaptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata completion function for ScrollableLayoutState.Value()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ScrollableLayoutState.Value(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x1000F8) != 0
    || (v7 = *(_QWORD *)(v5 + 64),
        ((((((((((((((v7 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 103) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 39) & 0xFFFFFFFFFFFFFFF8)
      + 16 > 0x18))
  {
    v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v8 = (_DWORD *)(((unint64_t)a1 + v7 + 3) & 0xFFFFFFFFFFFFFCLL);
    v9 = (_DWORD *)(((unint64_t)a2 + v7 + 3) & 0xFFFFFFFFFFFFFCLL);
    *v8 = *v9;
    v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFCLL);
    v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v10 = *v11;
    v12 = (_OWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_OWORD *)(((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8);
    v14 = v13[2];
    v15 = v13[3];
    v16 = v13[5];
    v12[4] = v13[4];
    v12[5] = v16;
    v12[2] = v14;
    v12[3] = v15;
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v18 = (_QWORD *)(((unint64_t)v12 + 103) & 0xFFFFFFFFFFFFF8);
    v19 = (_QWORD *)(((unint64_t)v13 + 103) & 0xFFFFFFFFFFFFF8);
    *v18 = *v19;
    v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
    v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8);
    *v20 = *v21;
    v22 = (_OWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    v23 = (_OWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    *(_OWORD *)(((unint64_t)v22 + 39) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v23 + 39) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ScrollableLayoutState.Value(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ScrollableLayoutState.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_OWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_OWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v15 = v12[4];
  v14 = v12[5];
  v16 = v12[3];
  v11[2] = v12[2];
  v11[3] = v16;
  v11[4] = v15;
  v11[5] = v14;
  v17 = (_QWORD *)(((unint64_t)v11 + 103) & 0xFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)v12 + 103) & 0xFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
  *v19 = *v20;
  v21 = (_OWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_OWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  *(_OWORD *)(((unint64_t)v21 + 39) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v22 + 39) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ScrollableLayoutState.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = ((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
  *(_QWORD *)(v11 + 24) = *(_QWORD *)(v12 + 24);
  *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
  *(_QWORD *)(v11 + 40) = *(_QWORD *)(v12 + 40);
  *(_QWORD *)(v11 + 48) = *(_QWORD *)(v12 + 48);
  *(_QWORD *)(v11 + 56) = *(_QWORD *)(v12 + 56);
  *(_QWORD *)(v11 + 64) = *(_QWORD *)(v12 + 64);
  *(_QWORD *)(v11 + 72) = *(_QWORD *)(v12 + 72);
  *(_QWORD *)(v11 + 80) = *(_QWORD *)(v12 + 80);
  *(_QWORD *)(v11 + 88) = *(_QWORD *)(v12 + 88);
  v11 += 103;
  v12 += 103;
  v13 = (v12 & 0xFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFF8);
  v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 &= 0xFFFFFFFFFFFFFFF8;
  v13 &= 0xFFFFFFFFFFFFF8uLL;
  v15 = *(_QWORD *)v13;
  v13 += 15;
  *(_QWORD *)v14 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = (_QWORD *)((v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  v16[1] = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 8);
  v16[2] = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 16);
  v16[3] = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24);
  v17 = (_QWORD *)(((unint64_t)v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((v13 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  v17[1] = v18[1];
  return a1;
}

uint64_t initializeWithTake for ScrollableLayoutState.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_OWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_OWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v15 = v12[4];
  v14 = v12[5];
  v16 = v12[3];
  v11[2] = v12[2];
  v11[3] = v16;
  v11[4] = v15;
  v11[5] = v14;
  v17 = (_QWORD *)(((unint64_t)v11 + 103) & 0xFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)v12 + 103) & 0xFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
  *v19 = *v20;
  v21 = (_OWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_OWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  *(_OWORD *)(((unint64_t)v21 + 39) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v22 + 39) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ScrollableLayoutState.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = ((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8;
  v12 = (_QWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v11 = *v12;
  *(_QWORD *)(v11 + 8) = v12[1];
  *(_QWORD *)(v11 + 16) = v12[2];
  *(_QWORD *)(v11 + 24) = v12[3];
  *(_QWORD *)(v11 + 32) = v12[4];
  *(_QWORD *)(v11 + 40) = v12[5];
  *(_QWORD *)(v11 + 48) = v12[6];
  *(_QWORD *)(v11 + 56) = v12[7];
  *(_QWORD *)(v11 + 64) = v12[8];
  *(_QWORD *)(v11 + 72) = v12[9];
  *(_QWORD *)(v11 + 80) = v12[10];
  *(_QWORD *)(v11 + 88) = v12[11];
  v11 += 103;
  v13 = (_QWORD *)(((unint64_t)v12 + 103) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8) = *v13;
  v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRelease();
  v14 &= 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  v15 += 15;
  *(_QWORD *)v14 = v16;
  swift_bridgeObjectRelease();
  v17 = (_QWORD *)((v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
  v17[1] = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 8);
  v17[2] = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 16);
  v17[3] = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24);
  v18 = (_QWORD *)(((unint64_t)v17 + 39) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((v15 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v18[1] = v19[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollableLayoutState.Value(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    if (((((((((((((((((v7 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 103) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 39) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v12 = *(_QWORD *)((((((((a1 + v7 + 3) & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFF8)
                   + 103) & 0xFFFFFFFFFFFFF8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

void storeEnumTagSinglePayload for ScrollableLayoutState.Value(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v10 = 0u;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((((((((((((((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) + 7) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) + 103) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 39) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v7 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((((((((((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) + 7) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) + 103) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8)
       + 39) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v7 + a2;
    bzero(a1, ((((((((((((((*(_QWORD *)(v6 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)+ 103) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_187084C9C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187084D2CLL);
}

void sub_187084CA4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x187084CACLL);
  JUMPOUT(0x187084D2CLL);
}

void sub_187084D08()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187084D2CLL);
}

void sub_187084D10()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187084D2CLL);
}

uint64_t sub_187084D18@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v3 + v5) = 0;
  if (!(_DWORD)v4)
    JUMPOUT(0x187084D2CLL);
  if (a1 < 0x7FFFFFFF)
  {
    if ((v4 & 0x80000000) == 0)
      JUMPOUT(0x187084D28);
    JUMPOUT(0x187084D24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v3, v4);
}

uint64_t type metadata completion function for ScrollableLayoutState()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_DWORD *initializeBufferWithCopyOfBuffer for ScrollableLayoutState(_DWORD *a1, _DWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  id v20;
  _DWORD *v21;
  _DWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _OWORD *v29;
  _OWORD *v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  uint64_t v34;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6 <= 7 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0;
  if (v7
    && (v8 = *(_QWORD *)(v5 + 64) + 3,
        ((((((((((((((v8 + ((v6 + 48) & ~v6)) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 39) & 0xFFFFFFFFFFFFFFF8)
      + 16 <= 0x18))
  {
    v9 = AssociatedTypeWitness;
    *a1 = *a2;
    v10 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
    v11 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v11 = *v10;
    v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFCLL);
    v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v13 = *v12;
    v14 = ((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFFFF8;
    v15 = ((unint64_t)v12 + 11) & 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)v14 = *(_DWORD *)v15;
    *(_DWORD *)(v14 + 4) = *(_DWORD *)(v15 + 4);
    v16 = *(void **)(v15 + 8);
    *(_QWORD *)(v14 + 8) = v16;
    *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
    *(_DWORD *)(v14 + 24) = *(_DWORD *)(v15 + 24);
    *(_DWORD *)(v14 + 28) = *(_DWORD *)(v15 + 28);
    v17 = (v14 + v6 + 32) & ~v6;
    v18 = (v15 + v6 + 32) & ~v6;
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v20 = v16;
    swift_bridgeObjectRetain();
    v19(v17, v18, v9);
    v21 = (_DWORD *)((v8 + v17) & 0xFFFFFFFFFFFFFCLL);
    v22 = (_DWORD *)((v8 + v18) & 0xFFFFFFFFFFFFFCLL);
    *v21 = *v22;
    v23 = ((unint64_t)v21 + 11) & 0xFFFFFFFFFFFFFFF8;
    v24 = ((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)v23 = *(_DWORD *)v24;
    *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
    v25 = (_QWORD *)((v23 + 23) & 0xFFFFFFFFFFFFF8);
    v26 = (_QWORD *)((v24 + 23) & 0xFFFFFFFFFFFFF8);
    *v25 = *v26;
    v27 = (_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8);
    v28 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8);
    *v27 = *v28;
    v29 = (_OWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    v30 = (_OWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v29 = *v30;
    v31 = (_OWORD *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
    v32 = (_OWORD *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    *(_OWORD *)(((unint64_t)v31 + 39) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v32 + 39) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v34 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (_DWORD *)(v34 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for ScrollableLayoutState(uint64_t a1)
{
  unint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = (((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8;

  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((v1 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_DWORD *initializeWithCopy for ScrollableLayoutState(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  id v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _OWORD *v26;
  _OWORD *v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  v7 = ((unint64_t)v5 + 11) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)v6 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  v9 = *(void **)(v8 + 8);
  *(_QWORD *)(v7 + 8) = v9;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(v8 + 28);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 32 + v7) & ~v12;
  v14 = (v12 + 32 + v8) & ~v12;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  v16 = v9;
  swift_bridgeObjectRetain();
  v15(v13, v14, AssociatedTypeWitness);
  v17 = *(_QWORD *)(v11 + 64) + 3;
  v18 = (_DWORD *)((v17 + v13) & 0xFFFFFFFFFFFFFFFCLL);
  v19 = (_DWORD *)((v17 + v14) & 0xFFFFFFFFFFFFFFFCLL);
  *v18 = *v19;
  v20 = ((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
  v22 = (_QWORD *)((v20 + 23) & 0xFFFFFFFFFFFFF8);
  v23 = (_QWORD *)((v21 + 23) & 0xFFFFFFFFFFFFF8);
  *v22 = *v23;
  v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFF8);
  *v24 = *v25;
  v26 = (_OWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_OWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v26 = *v27;
  v28 = (_OWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_OWORD *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  *(_OWORD *)(((unint64_t)v28 + 39) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v29 + 39) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_DWORD *assignWithCopy for ScrollableLayoutState(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v3;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v6 = *v5;
  v7 = ((unint64_t)v6 + 11) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)v5 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  v9 = *(void **)(v8 + 8);
  v10 = *(void **)(v7 + 8);
  *(_QWORD *)(v7 + 8) = v9;
  v11 = v9;

  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(v8 + 28);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v14 + 32 + v7) & ~v14;
  v16 = (v14 + 32 + v8) & ~v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(v15, v16, AssociatedTypeWitness);
  v17 = *(_QWORD *)(v13 + 64) + 3;
  v18 = (_DWORD *)((v17 + v15) & 0xFFFFFFFFFFFFFFFCLL);
  v19 = (_DWORD *)((v17 + v16) & 0xFFFFFFFFFFFFFFFCLL);
  *v18 = *v19;
  v20 = ((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = (_QWORD *)((v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)((v21 + 23) & 0xFFFFFFFFFFFFF8);
  *v22 = *v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFF8;
  v26 = *(_QWORD *)v25;
  v25 += 15;
  *v24 = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v27 = *(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF8);
  v27[1] = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 8);
  v28 = (_QWORD *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_QWORD *)(((v25 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  *v28 = *v29;
  v28[1] = v29[1];
  v28[2] = v29[2];
  v28[3] = v29[3];
  v30 = (_QWORD *)(((unint64_t)v28 + 39) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_QWORD *)(((unint64_t)v29 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v30 = *v31;
  v30[1] = v31[1];
  return a1;
}

_DWORD *initializeWithTake for ScrollableLayoutState(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _OWORD *v18;
  _OWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _OWORD *v24;
  _OWORD *v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  v7 = (_OWORD *)(((unint64_t)v5 + 11) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)(((unint64_t)v6 + 11) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ((unint64_t)v7 + v12 + 32) & ~v12;
  v14 = ((unint64_t)v8 + v12 + 32) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v13, v14, AssociatedTypeWitness);
  v15 = *(_QWORD *)(v11 + 64) + 3;
  v16 = (_DWORD *)((v15 + v13) & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (_DWORD *)((v15 + v14) & 0xFFFFFFFFFFFFFFFCLL);
  *v16 = *v17;
  v18 = (_OWORD *)(((unint64_t)v16 + 11) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_OWORD *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = (_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
  v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFF8);
  *v22 = *v23;
  v24 = (_OWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_OWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v25;
  v26 = (_OWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_OWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  *(_OWORD *)(((unint64_t)v26 + 39) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v27 + 39) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for ScrollableLayoutState(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v4 = *v3;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v6 = *v5;
  v7 = ((unint64_t)v6 + 11) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)v5 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  v9 = *(void **)(v7 + 8);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);

  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(v8 + 28);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 32 + v7) & ~v12;
  v14 = (v12 + 32 + v8) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40))(v13, v14, AssociatedTypeWitness);
  v15 = *(_QWORD *)(v11 + 64) + 3;
  v16 = (_DWORD *)((v15 + v13) & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (_DWORD *)((v15 + v14) & 0xFFFFFFFFFFFFFFFCLL);
  *v16 = *v17;
  v18 = ((unint64_t)v16 + 11) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_QWORD *)(v18 + 8) = *(_QWORD *)(v19 + 8);
  swift_bridgeObjectRelease();
  v20 = (_QWORD *)((v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)((v19 + 23) & 0xFFFFFFFFFFFFF8);
  *v20 = *v21;
  swift_bridgeObjectRelease();
  v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)v23;
  v23 += 15;
  *v22 = v24;
  swift_bridgeObjectRelease();
  v25 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
  v25[1] = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 8);
  v26 = (_QWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_QWORD *)(((v23 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  *v26 = *v27;
  v26[1] = v27[1];
  v26[2] = v27[2];
  v26[3] = v27[3];
  v28 = (_QWORD *)(((unint64_t)v26 + 39) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_QWORD *)(((unint64_t)v27 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v28 = *v29;
  v28[1] = v29[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollableLayoutState(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 < a2)
  {
    if (((((((((((((((((*(_QWORD *)(v4 + 64) + ((v7 + 48) & ~v7) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                   + 23) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 23) & 0xFFFFFFFFFFFFFFF8)
           + 39) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X15 }
  }
  v12 = (((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 0x80000000) != 0)
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((v12 + v7 + 32) & ~v7);
  v13 = *(_QWORD *)(v12 + 8);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  return (v13 + 1);
}

void storeEnumTagSinglePayload for ScrollableLayoutState(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v10 = 0u;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((((((((((((((*(_DWORD *)(v6 + 64) + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~*(unsigned __int8 *)(v6 + 80)) + 3) & 0xFFFFFFFC)
                   + 11) & 0xFFFFFFF8)
                 + 23) & 0xFFFFFFF8)
               + 15) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 39) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v7 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((((((((((((((*(_DWORD *)(v6 + 64) + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~*(unsigned __int8 *)(v6 + 80)) + 3) & 0xFFFFFFFC)
                 + 11) & 0xFFFFFFF8)
               + 23) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 39) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v7 + a2;
    bzero(a1, ((((((((((((((*(_QWORD *)(v6 + 64)+ ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ 3) & 0xFFFFFFFFFFFFFFFCLL)+ 11) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_187085AC0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187085B4CLL);
}

void sub_187085AC8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x187085AD0);
  JUMPOUT(0x187085B4CLL);
}

void sub_187085AFC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187085B4CLL);
}

void sub_187085B04()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187085B4CLL);
}

void sub_187085B0C(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (v3)
  {
    if (a3 < 0)
      JUMPOUT(0x187085B18);
    if (v3 < 0)
      JUMPOUT(0x187085B40);
    *(_QWORD *)(((((((v4 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 8) = (v3 - 1);
  }
  JUMPOUT(0x187085B4CLL);
}

unint64_t lazy protocol witness table accessor for type AnyDynamicItem and conformance AnyDynamicItem()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyDynamicItem and conformance AnyDynamicItem;
  if (!lazy protocol witness table cache variable for type AnyDynamicItem and conformance AnyDynamicItem)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyDynamicItem, &type metadata for AnyDynamicItem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyDynamicItem and conformance AnyDynamicItem);
  }
  return result;
}

void base witness table accessor for _AttributeBody in ScrollableLayoutState<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_187085BC0()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ScrollableLayoutState.updateValue()()
{
  return closure #1 in ScrollableLayoutState.updateValue()();
}

uint64_t sub_187085C3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #2 in ScrollableLayoutState.updateValue()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[24];

  v2 = v1[2];
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  *(_QWORD *)&v4[16] = v1[6];
  *(_OWORD *)v4 = *((_OWORD *)v1 + 2);
  closure #2 in ScrollableLayoutState.updateValue()(a1, v1[8], v1[9], v1[10], v1[11], (uint64_t)v1 + ((v3 + 96) & ~v3), v2, v1[3], v1[4], *(__int128 *)&v4[8], v1[7]);
}

uint64_t outlined init with copy of _ScrollableLayoutItem(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _ScrollableLayoutItem(a2, a1);
  return a2;
}

uint64_t outlined destroy of _ScrollableLayoutItem(uint64_t a1)
{
  destroy for AccessibilityRelationshipScope.Key();
  return a1;
}

void type metadata accessor for ScrollableLayoutState.TemplateView()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t specialized closure #1 in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(uint64_t a1, BOOL *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, char a12, _QWORD *a13, double (*a14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  return specialized closure #1 in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(a1, a2, a3, *a4, a4[2], a5, a6, *(_QWORD *)a7, *(_QWORD *)(a7 + 8), *(_QWORD *)(a7 + 16), *(unsigned __int8 *)(a7 + 24) | ((unint64_t)*(unsigned int *)(a7 + 28) << 32), a8, a9, a10, a11, a12 & 1, a13, a14);
}

uint64_t specialized closure #1 in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(uint64_t a1, BOOL *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, char a12, _QWORD *a13, double (*a14)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, double))
{
  return specialized closure #1 in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(a1, a2, a3, *(_QWORD *)a4, a5, a6, *(_QWORD *)a7, *(_QWORD *)(a7 + 8), *(double *)(a4 + 8), *(double *)(a4 + 16), *(unsigned __int8 *)(a7 + 16) | ((unint64_t)*(unsigned int *)(a7 + 20) << 32), a8, a9, a10, a11, a12 & 1, a13, a14);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(unint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v7 = a1;
  v8 = HIDWORD(a1);
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0);
  v10 = v9;
  v31 = v9;
  v32 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, MEMORY[0x1E0CE6310]);
  *(_QWORD *)&v30 = __PAIR64__(v8, v7);
  v11 = (_QWORD *)*a4;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = (_QWORD *)*a4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7] + 40 * v13;
      __swift_destroy_boxed_opaque_existential_1(v20);
      return outlined init with take of OptionalBinaryInteger(&v30, v20);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a3 & 1);
  v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v13 = v22;
  v19 = (_QWORD *)*a4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v24 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v10);
  v25 = MEMORY[0x1E0C80A78](v24, v24);
  v27 = (unint64_t *)((char *)&v29 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(unint64_t *, double))(v28 + 16))(v27, v25);
  specialized _NativeDictionary._insert(at:key:value:)(v13, a2, *v27, v19);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v30);
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v5 = a3;
  v8 = HIDWORD(a3);
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0);
  v15 = v9;
  v16 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, MEMORY[0x1E0CE6310]);
  *(_QWORD *)&v14 = __PAIR64__(v8, v5);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = outlined init with take of OptionalBinaryInteger(&v14, a4[7] + 40 * a1);
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t specialized Sequence.reduce<A>(into:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  int64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  _OWORD v26[3];
  _OWORD v27[3];
  uint64_t v28;

  v7 = a2 + 56;
  v6 = *(_QWORD *)(a2 + 56);
  v28 = a1;
  v8 = 1 << *(_BYTE *)(a2 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v6;
  v11 = (uint64_t *)(a3 + 16);
  v12 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v14 = 0;
  while (v10)
  {
    v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v16 = v15 | (v14 << 6);
LABEL_24:
    outlined init with copy of AccessibilityRelationshipScope.Key(*(_QWORD *)(a2 + 48) + 48 * v16, (uint64_t)v27);
    v26[0] = v27[0];
    v26[1] = v27[1];
    v26[2] = v27[2];
    swift_beginAccess();
    v20 = *v11;
    if (*(_QWORD *)(*v11 + 16) && (v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v26), (v22 & 1) != 0))
    {
      v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
      swift_endAccess();
      if (*(_QWORD *)(v23 + 16))
      {
        specialized __RawDictionaryStorage.find<A>(_:)(a4);
        if ((v24 & 1) != 0)
        {
          v25 = swift_bridgeObjectRetain();
          specialized Array.append<A>(contentsOf:)(v25);
        }
      }
    }
    else
    {
      swift_endAccess();
    }
    result = outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v26);
  }
  v17 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v17 >= v12)
    goto LABEL_29;
  v18 = *(_QWORD *)(v7 + 8 * v17);
  ++v14;
  if (v18)
    goto LABEL_23;
  v14 = v17 + 1;
  if (v17 + 1 >= v12)
    goto LABEL_29;
  v18 = *(_QWORD *)(v7 + 8 * v14);
  if (v18)
    goto LABEL_23;
  v14 = v17 + 2;
  if (v17 + 2 >= v12)
    goto LABEL_29;
  v18 = *(_QWORD *)(v7 + 8 * v14);
  if (v18)
    goto LABEL_23;
  v14 = v17 + 3;
  if (v17 + 3 >= v12)
    goto LABEL_29;
  v18 = *(_QWORD *)(v7 + 8 * v14);
  if (v18)
  {
LABEL_23:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v14 << 6);
    goto LABEL_24;
  }
  v19 = v17 + 4;
  if (v19 >= v12)
  {
LABEL_29:
    swift_release();
    return v28;
  }
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v14 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    v14 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v14 >= v12)
      goto LABEL_29;
    v18 = *(_QWORD *)(v7 + 8 * v14);
    ++v19;
    if (v18)
      goto LABEL_23;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized IncrementalStack<>.collectBackwards(from:to:children:style:atEnd:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _BYTE *a5)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD **v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[88];
  uint64_t v32;
  uint64_t v33;
  char v34;
  int v35;
  char v36;
  uint64_t v37;

  v10 = swift_allocObject();
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v30 = v10;
  *(_QWORD *)(v10 + 16) = MEMORY[0x1E0DEE9D8];
  v12 = (_QWORD **)(v10 + 16);
  v37 = a1;
  v35 = 0;
  v36 = 1;
  v34 = 3;
  result = swift_allocObject();
  v15 = result;
  *(_QWORD *)(result + 16) = v11;
  v16 = (_QWORD *)(result + 16);
  v17 = a4 >> 1;
  v18 = (a4 >> 1) - 1;
  if (a4 >> 1 == 1)
  {
LABEL_6:
    v20 = __OFADD__(a2, v18);
    v22 = a2 + v18;
    if (v20)
    {
      __break(1u);
    }
    else
    {
      v32 = a1;
      v33 = v22;
      MEMORY[0x1E0C80A78](result, v14);
      v23 = outlined init with copy of _ViewList_Node(a3 + 16, (uint64_t)v31);
      MEMORY[0x1E0C80A78](v23, v24);
      swift_bridgeObjectRetain();
      v25 = _ViewList_Node.applyNodes(from:style:transform:to:)();
      outlined destroy of _ViewList_Node((uint64_t)v31);
      swift_bridgeObjectRelease();
      *a5 = v25 & 1;
      swift_beginAccess();
      a3 = *(_QWORD *)(v15 + 16);
      if (!*(_QWORD *)(a3 + 16))
      {
LABEL_12:
        swift_beginAccess();
        v29 = *(_QWORD *)(v30 + 16);
        swift_bridgeObjectRetain();
        swift_release();
        swift_release();
        return v29;
      }
      swift_beginAccess();
      v11 = *v12;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_9:
        v26 = MEMORY[0x1E0DEE9D8];
        v28 = v11[2];
        v27 = v11[3];
        if (v28 >= v27 >> 1)
          v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v11);
        v11[2] = v28 + 1;
        v11[v28 + 4] = a3;
        *v12 = v11;
        *v16 = v26;
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    goto LABEL_9;
  }
  if (!v17)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v19 = a2 % v17;
  if (!(a2 % v17))
    goto LABEL_6;
  v20 = __OFSUB__(v17, v19);
  v21 = v17 - v19;
  if (v20)
    goto LABEL_16;
  v20 = __OFADD__(a2, v21);
  a2 += v21;
  if (!v20)
    goto LABEL_6;
LABEL_17:
  __break(1u);
  return result;
}

uint64_t specialized flushMinorGroup #1 <A>() in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, double (*a14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t *v22;
  _BYTE *v23;
  uint64_t *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char HasDeadlinePassed;
  uint64_t v35;

  v22 = (uint64_t *)(a2 + 16);
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16))
    goto LABEL_10;
  v23 = (_BYTE *)(a5 + 16);
  v24 = (uint64_t *)(a10 + 16);
  swift_beginAccess();
  if ((*v23 & 1) != 0)
  {
    result = swift_beginAccess();
    *v23 = 0;
  }
  else
  {
    swift_beginAccess();
    v35 = a3;
    v26 = *v24;
    swift_bridgeObjectRetain();
    v27 = swift_bridgeObjectRetain();
    v28 = a14(v27, v26, a4, a6, a7, a8, a9 & 0xFFFFFFFF00000001);
    v30 = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(double *)(a11 + 16) = v30 + v28 + *(double *)(a11 + 16);
    swift_beginAccess();
    v31 = *v24 == 0;
    if (*v24)
      v32 = *(_QWORD *)&v30;
    else
      v32 = 0;
    swift_beginAccess();
    v33 = v32;
    a3 = v35;
    EstimationState.add(length:spacing:count:)(v33, v31, 1, v28);
    result = swift_endAccess();
  }
  if (!__OFADD__(*a13, a3))
  {
    *a13 += a3;
    swift_beginAccess();
    swift_beginAccess();
    swapChildren(_:_:)(v24, v22);
    swift_endAccess();
    swift_endAccess();
LABEL_10:
    HasDeadlinePassed = AGGraphHasDeadlinePassed();
    result = swift_beginAccess();
    *(_BYTE *)(a1 + 16) = HasDeadlinePassed;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized flushMinorGroup #1 <A>() in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11, _QWORD *a12, double (*a13)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, double))
{
  uint64_t *v22;
  _BYTE *v23;
  uint64_t *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  char v31;
  uint64_t v32;
  char HasDeadlinePassed;

  v22 = (uint64_t *)(a2 + 16);
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16))
    goto LABEL_10;
  v23 = (_BYTE *)(a4 + 16);
  v24 = (uint64_t *)(a8 + 16);
  swift_beginAccess();
  if ((*v23 & 1) != 0)
  {
    result = swift_beginAccess();
    *v23 = 0;
  }
  else
  {
    swift_beginAccess();
    v26 = *v24;
    swift_bridgeObjectRetain();
    v27 = swift_bridgeObjectRetain();
    v28 = a13(v27, v26, a5, a6, a7 & 0xFFFFFFFF00000001, a9);
    v30 = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(double *)(a10 + 16) = v30 + v28 + *(double *)(a10 + 16);
    swift_beginAccess();
    v31 = *v24 == 0;
    if (*v24)
      v32 = *(_QWORD *)&v30;
    else
      v32 = 0;
    swift_beginAccess();
    EstimationState.add(length:spacing:count:)(v32, v31, 1, v28);
    result = swift_endAccess();
  }
  if (!__OFADD__(*a12, a3))
  {
    *a12 += a3;
    swift_beginAccess();
    swift_beginAccess();
    swapChildren(_:_:)(v24, v22);
    swift_endAccess();
    swift_endAccess();
LABEL_10:
    HasDeadlinePassed = AGGraphHasDeadlinePassed();
    result = swift_beginAccess();
    *(_BYTE *)(a1 + 16) = HasDeadlinePassed;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized ScrollableLayoutState.TemplateView.view.setter(uint64_t a1)
{
  int *v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  _BYTE v12[15];
  _BYTE v13[16];
  uint64_t v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  v8 = &v12[-v7];
  v9 = *v1;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v4 + 16))(&v12[-v7], a1, AssociatedTypeWitness, v6);
  v14 = AssociatedTypeWitness;
  v15 = v9;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v8, (uint64_t)_s14AttributeGraph0A0V8setValueySbxFSbSPyxGXEfU_TA_0, (uint64_t)v13, AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v10);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v8, AssociatedTypeWitness);
}

void type metadata accessor for ScrollableItemIdentifier()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for ScrollableItemGeometry()
{
  JUMPOUT(0x18D75FF28);
}

void partial apply for closure #1 in ScrollableLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)()
{
  closure #1 in ScrollableLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)();
}

void partial apply for closure #1 in ScrollableLayoutViewAdaptor.updatedItems()(uint64_t a1)
{
  uint64_t *v1;

  closure #1 in ScrollableLayoutViewAdaptor.updatedItems()(a1, v1[8], v1[9], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

void type metadata accessor for AnyViewVisitor()
{
  JUMPOUT(0x18D75FF28);
}

void partial apply for closure #1 in PropertiesTransform.updateValue()()
{
  closure #1 in PropertiesTransform.updateValue()();
}

uint64_t specialized static UnaryPlatformItemsModifier.updateItems(modifier:items:)(uint64_t result)
{
  char *v1;
  uint64_t *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  char isUniquelyReferenced_nonNull_native;
  _BYTE v11[216];
  uint64_t v12[27];
  _BYTE v13[216];
  uint64_t v14[27];
  _BYTE v15[216];
  uint64_t v16[27];
  _BYTE v17[24];
  id v18[2];
  id v19;
  _BYTE v20[216];
  uint64_t v21[28];

  v1 = *(char **)(result + 16);
  v2 = (uint64_t *)*((_QWORD *)v1 + 2);
  if (v2)
  {
    v3 = result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_22;
    while (1)
    {
      *(_QWORD *)(v3 + 16) = v1;
      if (*((_QWORD *)v1 + 2))
      {
        v4 = 0;
        v5 = (char *)v2 - 1;
        v6 = 32;
        v2 = &lazy cache variable for type metadata for PlatformItem.PrimaryContent?;
        while (1)
        {
          outlined init with copy of PlatformItem((uint64_t)&v1[v6], (uint64_t)v17);
          outlined init with take of Image.Resolved?((uint64_t)v18, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
          outlined init with take of Image.Resolved?((uint64_t)v20, (uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
          if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v21) != 1)
          {
            v7 = v18[0];
            if (v18[0])
            {
              outlined init with take of Image.Resolved?((uint64_t)v18, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
              outlined init with take of Image.Resolved?((uint64_t)v15, (uint64_t)v16, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
              if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v16) == 1 || !v19)
              {
                outlined init with take of Image.Resolved?((uint64_t)v18, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
                outlined init with take of Image.Resolved?((uint64_t)v13, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
                if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v14) != 1)
                {
                  v8 = v19;
                  v9 = v7;

                  v19 = v7;
                }
                outlined init with take of Image.Resolved?((uint64_t)v18, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
                outlined init with take of Image.Resolved?((uint64_t)v11, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
                if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v12) != 1)
                {

                  v18[0] = 0;
                }
              }
            }
          }
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v3 + 16) = v1;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
            *(_QWORD *)(v3 + 16) = v1;
          }
          if ((unint64_t)v4 >= *((_QWORD *)v1 + 2))
            break;
          outlined assign with copy of PlatformItem((uint64_t)v17, (uint64_t)&v1[v6]);
          result = outlined destroy of PlatformItem((uint64_t)v17);
          if (v5 == v4)
            return result;
          v1 = *(char **)(v3 + 16);
          ++v4;
          v6 += 336;
          if ((unint64_t)v4 >= *((_QWORD *)v1 + 2))
            goto LABEL_21;
        }
        __break(1u);
      }
LABEL_21:
      __break(1u);
LABEL_22:
      v1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
    }
  }
  return result;
}

uint64_t specialized IncrementalStack<>.resolveIndexAndPosition(children:context:state:placer:properties:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  __int128 *Value;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  char v26;
  double v27;
  _BOOL4 v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  double v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  BOOL v53;
  uint64_t result;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  double v63;
  char **v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  int v80;
  char *v81;
  int64_t v82;
  char v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  double v92;
  uint64_t v93;
  double v94;
  char *v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  double v102;
  uint64_t v103;
  double v104;
  double v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  int isUniquelyReferenced_nonNull_native;
  _QWORD *v127;
  size_t v128;
  _BOOL8 v129;
  uint64_t v130;
  uint64_t v131;
  double v132;
  double v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  BOOL v141;
  uint64_t v142;
  uint64_t v143;
  double v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  int v154;
  double v155;
  __int128 *v156;
  char **v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  double v166;
  uint64_t v167;
  _BOOL4 v168;
  unint64_t v169;
  uint64_t v170;
  double v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  _OWORD v176[5];
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  _OWORD v181[2];
  double v182;
  int v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  _OWORD v188[2];
  double v189;
  int v190;
  uint64_t v191;
  char v192;
  double v193;
  int v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  char v198;
  char v199;
  char v200;
  __int16 v201;
  char v202[17];

  v167 = a4;
  v170 = a1;
  v8 = type metadata accessor for FloatingPointRoundingRule();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v143 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 216);
  v14 = *(_QWORD *)(a2 + 224);
  v15 = 0.0;
  if (*(_DWORD *)(a2 + 12) != *MEMORY[0x1E0CFED28])
  {
    Value = (__int128 *)AGGraphGetValue();
    v17 = Value[1];
    v196 = *Value;
    v197 = v17;
    MEMORY[0x18D75BE3C]();
    v15 = v18;
  }
  v19 = *(_QWORD *)a5;
  v21 = *(double *)(a5 + 8);
  v20 = *(double *)(a5 + 16);
  v22 = *(_QWORD *)(a3 + 112);
  v23 = *(_QWORD *)(v22 + 16);
  if (v23)
  {
    v25 = COERCE_DOUBLE(EstimationState.average.getter(*(_QWORD *)(a3 + 112), *(_QWORD *)(a3 + 120)));
    if ((v26 & 1) != 0)
      v25 = 0.0;
    v27 = v24 + v25;
    v23 = *(_QWORD *)(v22 + 16);
  }
  else
  {
    v27 = 32.0;
  }
  v169 = 2 * v19;
  v166 = v27;
  v29 = v27 <= 0.0 || v23 == 0;
  v168 = v29;
  *(_QWORD *)&v196 = *(_QWORD *)a2;
  DWORD2(v196) = *(_DWORD *)(a2 + 8);
  v30 = *(double *)(a5 + 32);
  v171 = *(double *)(a5 + 24);
  swift_getKeyPath();
  SizeAndSpacingContext.subscript.getter();
  swift_release();
  if ((*(_BYTE *)(a3 + 24) & 1) != 0
    || v19 != *(_QWORD *)a3
    || v21 != *(double *)(a3 + 8)
    || v20 != *(double *)(a3 + 16)
    || (*(_BYTE *)(a5 + 40) & 1) != 0)
  {
    goto LABEL_15;
  }
  v158 = v19;
  v159 = v14;
  v160 = v13;
  v41 = v193;
  v39 = *(_QWORD *)(a3 + 48);
  v42 = *(_QWORD *)(a3 + 64);
  v43 = *MEMORY[0x1E0DED4F0];
  v44 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  v44(v12, v43, v8);
  *(_QWORD *)&v196 = v42;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v12, v41);
  v45 = *(double *)&v196;
  v46 = *(void (**)(char *, uint64_t))(v9 + 8);
  v46(v12, v8);
  v162 = a3;
  v47 = *(_QWORD *)(a3 + 72);
  v44(v12, v43, v8);
  *(_QWORD *)&v196 = v47;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v12, v41);
  v48 = *(double *)&v196;
  v46(v12, v8);
  if (v45 > v48)
    goto LABEL_204;
  a3 = v162;
  v19 = v158;
  if (v45 <= v171
    && (v30 <= v48 || v171 <= v48
                   && (*(_BYTE *)(v162 + 40) & 1) == 0
                   && *(_QWORD *)(v162 + 32) == *(_QWORD *)(v162 + 56)))
  {
    return v39;
  }
  v49 = *(double *)(v162 + 72);
  v50 = v171 - v49;
  v51 = v15 + v15;
  if (v171 - v49 + 0.01 > 0.0 && v50 < v51)
    return *(_QWORD *)(v162 + 56);
  v55 = *(double *)(v162 + 64);
  v56 = v171 - v55;
  if (v171 - v55 + 0.01 > 0.0 && v56 < v51)
    return *(_QWORD *)(v162 + 48);
  if (v56 >= 0.0)
  {
    v57 = v171 - v49;
  }
  else
  {
    v57 = v171 - v55;
    if (v50 < 0.0)
    {
      if (v56 > v50)
        v57 = v171 - v55;
      else
        v57 = v171 - v49;
    }
  }
  if (v57 >= 0.0 || v15 * 3.0 <= -v57)
  {
    if (!v168)
    {
LABEL_172:
      *(_QWORD *)&v196 = v169;
      v130 = _ViewList_Node.estimatedCount(style:)();
      if (v19 != 1)
      {
        if (!v19)
        {
LABEL_225:
          __break(1u);
          goto LABEL_226;
        }
        if (v130 == 0x8000000000000000 && v19 == -1)
          goto LABEL_230;
        v130 /= v19;
      }
      v131 = v130 - 1;
      if (__OFSUB__(v130, 1))
        goto LABEL_217;
      v132 = *(double *)(a3 + 64);
      v133 = round((v171 - v132) / v166);
      if ((~*(_QWORD *)&v133 & 0x7FF0000000000000) == 0)
      {
LABEL_218:
        __break(1u);
        goto LABEL_219;
      }
      if (v133 <= -9.22337204e18)
      {
LABEL_219:
        __break(1u);
        goto LABEL_220;
      }
      if (v133 >= 9.22337204e18)
      {
LABEL_220:
        __break(1u);
        goto LABEL_221;
      }
      v134 = v131 & ~(v131 >> 63);
      v135 = v134 * v19;
      if ((unsigned __int128)(v134 * (__int128)v19) >> 64 != (v134 * v19) >> 63)
      {
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
        goto LABEL_223;
      }
      if (v131 >= (uint64_t)v133)
        v131 = (uint64_t)v133;
      v136 = v131 & ~(v131 >> 63);
      v137 = v136 * v19;
      if ((unsigned __int128)(v136 * (__int128)v19) >> 64 != (v136 * v19) >> 63)
        goto LABEL_222;
      v138 = *(_QWORD *)(a3 + 48);
      v53 = __OFADD__(v138, v137);
      v139 = v138 + v137;
      if (v53)
      {
LABEL_223:
        __break(1u);
LABEL_224:
        __break(1u);
        goto LABEL_225;
      }
      v140 = v132 + v166 * (double)v136;
      v141 = v140 + 0.01 < 0.0 || v140 + -0.01 > v171;
      if (!v141)
      {
        v142 = v139 & ~(v139 >> 63);
        if (v135 >= v142)
          return v142;
        else
          return v135;
      }
    }
LABEL_15:
    *(_QWORD *)&v196 = v169;
    v31 = _ViewList_Node.estimatedCount(style:)();
    if (v19 != 1)
    {
      if (!v19)
        goto LABEL_200;
      if (v31 == 0x8000000000000000 && v19 == -1)
      {
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
LABEL_207:
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
        goto LABEL_218;
      }
      v31 /= v19;
    }
    v32 = *(double *)(a2 + 40);
    v33 = v171 / v32;
    v141 = v32 <= 0.0;
    v34 = 0.0;
    if (v141)
      v33 = 0.0;
    if (v33 >= 0.0)
      v34 = v33;
    if (v33 >= 1.0)
      v34 = 1.0;
    if (__OFSUB__(v31, 1))
    {
      __break(1u);
    }
    else
    {
      v35 = (v31 - 1) & ~((v31 - 1) >> 63);
      v36 = v35 * v19;
      if ((unsigned __int128)(v35 * (__int128)v19) >> 64 == (v35 * v19) >> 63)
      {
        v37 = v34 * (double)v31 + 0.5;
        if ((~*(_QWORD *)&v37 & 0x7FF0000000000000) != 0)
        {
          if (v37 > -9.22337204e18)
          {
            if (v37 < 9.22337204e18)
            {
              v38 = (uint64_t)v37 * v19;
              if ((unsigned __int128)((uint64_t)v37 * (__int128)v19) >> 64 == v38 >> 63)
              {
                if (v38 < 0)
                  return v36 & (v36 >> 63);
                if (v36 >= v38)
                  v39 = (uint64_t)v37 * v19;
                else
                  v39 = v36;
                v40 = v168;
                if (v39 < 1)
                  v40 = 1;
                if ((v40 & 1) != 0)
                  return v39;
                EstimationState.average.getter(*(_QWORD *)(a3 + 112), *(_QWORD *)(a3 + 120));
                EdgeInsets.originOffset.getter();
                if (v39 < v19)
                  return v39;
                if (v52 <= 0.0)
                  return v39;
                v53 = __OFSUB__(v39, v19);
                v39 -= v19;
                if (!v53)
                  return v39;
                goto LABEL_203;
              }
              goto LABEL_199;
            }
LABEL_198:
            __break(1u);
LABEL_199:
            __break(1u);
LABEL_200:
            __break(1u);
LABEL_201:
            __break(1u);
            goto LABEL_202;
          }
LABEL_197:
          __break(1u);
          goto LABEL_198;
        }
LABEL_196:
        __break(1u);
        goto LABEL_197;
      }
    }
    __break(1u);
    goto LABEL_196;
  }
  if (v168)
    goto LABEL_15;
  v59 = *(_QWORD *)(v162 + 48);
  v58 = *(_QWORD *)(v162 + 56);
  v60 = v58 - v59;
  if (__OFSUB__(v58, v59))
  {
LABEL_226:
    __break(1u);
    goto LABEL_227;
  }
  v61 = ceil(v15 / v166);
  if ((~*(_QWORD *)&v61 & 0x7FF0000000000000) == 0)
  {
LABEL_227:
    __break(1u);
    goto LABEL_228;
  }
  if (v61 <= -9.22337204e18)
  {
LABEL_228:
    __break(1u);
    goto LABEL_229;
  }
  if (v61 < 9.22337204e18)
  {
    v161 = 0;
    if (v60 <= (uint64_t)v61)
      v60 = (uint64_t)v61;
    v146 = v60;
    if (v56 >= 0.0)
      v62 = v58;
    else
      v62 = v59;
    if (v56 >= 0.0)
      v55 = v49;
    v144 = v55;
    v63 = v171 + 0.01;
    v64 = (char **)(v167 + 136);
    v149 = &v195;
    v156 = &v197;
    v65 = 2;
    v66 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v145 = v62;
    v157 = (char **)(v167 + 136);
    while (1)
    {
      v67 = v65 * v146;
      if ((unsigned __int128)(v65 * (__int128)v146) >> 64 != (v65 * v146) >> 63)
        goto LABEL_211;
      v147 = v65;
      v53 = __OFSUB__(v62, v67);
      v68 = v62 - v67;
      if (v53)
        goto LABEL_212;
      v148 = v68;
      v202[0] = 0;
      v69 = specialized IncrementalStack<>.collectBackwards(from:to:children:style:atEnd:)(v68 & ~(v68 >> 63), v62, v170, v169, v202);
      v70 = v167;
      v164 = *(_QWORD *)(v69 + 16);
      if (v164)
        break;
      swift_bridgeObjectRelease();
LABEL_167:
      if (*(double *)(v70 + 112) <= v63)
        return *(_QWORD *)(v70 + 96);
      if (v148 > 0)
      {
        v65 = 2 * v147;
        v62 = v145;
        if (v147 < 8)
          continue;
      }
      goto LABEL_172;
    }
    v163 = v69;
    v71 = v202[0];
    specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(v62, 0, 1, 1, v144);
    v201 = 0;
    v200 = 0;
    if ((v71 & 1) == 0)
      goto LABEL_90;
    v72 = *(_QWORD *)(v70 + 32);
    v73 = *(_QWORD *)(v70 + 96);
    v53 = __OFSUB__(v73, v72);
    v74 = v73 - v72;
    if (!v53)
    {
      *(_QWORD *)(v70 + 96) = v74;
      v200 = 1;
LABEL_90:
      v75 = v163;
      swift_bridgeObjectRetain();
      swift_beginAccess();
      swift_beginAccess();
      swift_beginAccess();
      v76 = 0;
      v77 = 8 * v164 + 24;
      while (1)
      {
        v165 = v77;
        *v64 = *(char **)(v75 + v77);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v76 == 1)
          break;
        if (v76)
        {
          v200 = 1;
          v95 = *v64;
          if (!*((_QWORD *)*v64 + 2))
          {
LABEL_119:
            v66 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            goto LABEL_161;
          }
          v96 = *(_QWORD *)(v70 + 144);
          if (!v96)
            goto LABEL_232;
          if (!*(_QWORD *)(v96 + 16))
            goto LABEL_206;
          outlined init with copy of _IncrementalLayout_Child(v96 + 32, (uint64_t)&v196);
          if ((v198 & 1) != 0 || v199 == 1)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined destroy of _IncrementalLayout_Child((uint64_t)&v196);
            outlined init with copy of _IncrementalLayout_Child(v96 + 32, (uint64_t)&v196);
            swift_bridgeObjectRelease();
            v97 = *(_BYTE *)(v70 + 24);
            _ProposedSize.init(_:in:by:)();
            if (!*((_QWORD *)v95 + 2))
              goto LABEL_207;
            v155 = *(double *)&v172;
            v154 = BYTE8(v172);
            v153 = v173;
            v152 = BYTE8(v173);
            outlined init with copy of _IncrementalLayout_Child((uint64_t)(v95 + 32), (uint64_t)&v193);
            swift_bridgeObjectRelease();
            v151 = *(_QWORD *)(v70 + 8);
            v150 = *(unsigned __int8 *)(v70 + 16);
            v98 = IncrementalLayoutViewCache.item(data:)((uint64_t)v156);
            v99 = *(_QWORD *)(v98 + 32);
            swift_bridgeObjectRetain();
            v100 = *(_QWORD *)(v98 + 40);
            swift_release();
            *(_QWORD *)&v184 = v99;
            *((_QWORD *)&v184 + 1) = v100;
            _ViewOutputs.layoutComputer.getter();
            swift_bridgeObjectRelease();
            LayoutProxy.init(context:layoutComputer:)();
            v189 = *(double *)&v177;
            v190 = DWORD2(v177);
            *(double *)&v184 = v155;
            BYTE8(v184) = v154;
            *(_QWORD *)&v185 = v153;
            BYTE8(v185) = v152;
            LayoutProxy.lengthThatFits(_:in:)();
            v102 = v101;
            outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v193, (uint64_t)&v184, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            if ((_QWORD)v184)
            {
              v179 = v186;
              v180 = v187;
              v181[0] = v188[0];
              *(_OWORD *)((char *)v181 + 15) = *(_OWORD *)((char *)v188 + 15);
              v177 = v184;
              v178 = v185;
              v103 = v161;
              closure #1 in _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v177, v151, v150, v97, (uint64_t)&v196, &v189);
              v161 = v103;
              outlined destroy of _IncrementalLayout_Child((uint64_t)&v177);
              v104 = v189;
            }
            else
            {
              v104 = 0.0;
            }
            v64 = v157;
            v66 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            outlined destroy of AccessibilityScrollableContext?((uint64_t)&v193, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            outlined destroy of _IncrementalLayout_Child((uint64_t)&v196);
            v70 = v167;
            v75 = v163;
            if ((v200 & 1) != 0)
              goto LABEL_126;
LABEL_145:
            v108 = *(_QWORD *)(v70 + 96);
            v107 = *(double *)(v70 + 112);
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined destroy of _IncrementalLayout_Child((uint64_t)&v196);
            if (!*(_QWORD *)(v96 + 16))
              goto LABEL_213;
            v151 = *(_QWORD *)(v70 + 8);
            v150 = *(unsigned __int8 *)(v70 + 16);
            outlined init with copy of _IncrementalLayout_Child(v96 + 32, (uint64_t)&v193);
            _ProposedSize.init(_:in:by:)();
            if (!*((_QWORD *)v95 + 2))
              goto LABEL_216;
            v155 = v189;
            v154 = v190;
            v153 = v191;
            v115 = v192;
            outlined init with copy of _IncrementalLayout_Child((uint64_t)(v95 + 32), (uint64_t)&v184);
            v152 = v194;
            v116 = IncrementalLayoutViewCache.item(data:)((uint64_t)v149);
            v117 = *(_QWORD *)(v116 + 32);
            swift_bridgeObjectRetain();
            v118 = *(_QWORD *)(v116 + 40);
            swift_release();
            *(_QWORD *)&v177 = v117;
            *((_QWORD *)&v177 + 1) = v118;
            _ViewOutputs.layoutComputer.getter();
            swift_bridgeObjectRelease();
            LayoutProxy.init(context:layoutComputer:)();
            v182 = *(double *)&v172;
            v183 = DWORD2(v172);
            *(double *)&v177 = v155;
            BYTE8(v177) = v154;
            *(_QWORD *)&v178 = v153;
            BYTE8(v178) = v115;
            LayoutProxy.lengthThatFits(_:in:)();
            v102 = v119;
            outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v184, (uint64_t)&v177, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            if ((_QWORD)v177)
            {
              v174 = v179;
              v175 = v180;
              v176[0] = v181[0];
              *(_OWORD *)((char *)v176 + 15) = *(_OWORD *)((char *)v181 + 15);
              v172 = v177;
              v173 = v178;
              v120 = v161;
              closure #1 in _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v172, v151, v150, 1, (uint64_t)&v193, &v182);
              v161 = v120;
              outlined destroy of _IncrementalLayout_Child((uint64_t)&v172);
              v104 = v182;
            }
            else
            {
              v104 = 0.0;
            }
            a3 = v162;
            v75 = v163;
            outlined destroy of AccessibilityScrollableContext?((uint64_t)&v184, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            outlined destroy of _IncrementalLayout_Child((uint64_t)&v193);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v70 = v167;
            v64 = v157;
            v66 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if ((v200 & 1) == 0)
              goto LABEL_145;
LABEL_126:
            v107 = *(double *)(v70 + 112) - v102;
            *(double *)(v70 + 112) = v107;
            v108 = *(_QWORD *)(v70 + 96);
            if (v108)
            {
              v107 = v107 - v104;
              *(double *)(v70 + 112) = v107;
            }
          }
          if (v104 + v107 > *(double *)(v70 + 56))
          {
            v123 = *(_QWORD *)(v70 + 32);
            v53 = __OFSUB__(v108, v123);
            v122 = v108 - v123;
            if (v53)
              goto LABEL_210;
LABEL_148:
            if (v201 == 1 && (v122 & 0x8000000000000000) == 0)
              *(_QWORD *)(v70 + 96) = v122;
LABEL_152:
            v124 = *(_QWORD *)(v70 + 136);
            if (*(_QWORD *)(v70 + 144))
              v125 = *(_QWORD **)(v70 + 144);
            else
              v125 = v66;
            *(_QWORD *)(v70 + 136) = v125;
            *(_QWORD *)(v70 + 144) = v124;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v81 = *(char **)(v70 + 136);
            if (isUniquelyReferenced_nonNull_native)
            {
              specialized Array.replaceSubrange<A>(_:with:)(0, *((_QWORD *)v81 + 2));
              goto LABEL_161;
            }
            goto LABEL_157;
          }
LABEL_151:
          HIBYTE(v201) = 1;
          goto LABEL_152;
        }
        v78 = *(_QWORD *)(v70 + 136);
        if (*(_QWORD *)(v70 + 144))
          v79 = *(_QWORD **)(v70 + 144);
        else
          v79 = v66;
        *(_QWORD *)(v70 + 136) = v79;
        *(_QWORD *)(v70 + 144) = v78;
        v80 = swift_isUniquelyReferenced_nonNull_native();
        v81 = *(char **)(v70 + 136);
        if (v80)
        {
          v82 = *((_QWORD *)v81 + 2);
          v83 = swift_isUniquelyReferenced_nonNull_native();
          *v64 = v81;
          if ((v83 & 1) == 0)
          {
            v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82, 1, v81);
            *v64 = v81;
          }
          swift_arrayDestroy();
          if (v82)
          {
            v84 = *((_QWORD *)v81 + 2) - v82;
            if (v84 < 0)
              goto LABEL_233;
            memmove(v81 + 32, &v81[96 * v82 + 32], 96 * v84);
            *((_QWORD *)v81 + 2) = v84;
            v70 = v167;
          }
          *v64 = v81;
          v66 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          goto LABEL_160;
        }
LABEL_157:
        v127 = v66;
        if (*((_QWORD *)v81 + 3) >= 2uLL)
        {
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_IncrementalLayout_Child>, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v127 = (_QWORD *)swift_allocObject();
          v128 = _swift_stdlib_malloc_size_0(v127);
          v127[2] = 0;
          v127[3] = 2 * ((uint64_t)(v128 - 32) / 96);
        }
        *v64 = (char *)v127;
        swift_bridgeObjectRelease();
LABEL_160:
        v75 = v163;
LABEL_161:
        if (HIBYTE(v201) == 1)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_167;
        }
        if (__OFADD__(v76, 1))
          goto LABEL_201;
        ++v76;
        v77 = v165 - 8;
        if (v164 == v76)
        {
          v129 = v148 < 1;
          swift_bridgeObjectRelease();
          swift_beginAccess();
          LOBYTE(v201) = 1;
          swift_beginAccess();
          v200 = 1;
          specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v129, (uint64_t *)v70, &v200, 0, (_BYTE *)&v201 + 1, &v201);
          swift_bridgeObjectRelease();
          goto LABEL_167;
        }
      }
      LOBYTE(v201) = 1;
      v85 = *v64;
      if (!*((_QWORD *)*v64 + 2))
        goto LABEL_119;
      v86 = *(_QWORD *)(v70 + 144);
      if (!v86)
        goto LABEL_231;
      if (!*(_QWORD *)(v86 + 16))
        goto LABEL_205;
      outlined init with copy of _IncrementalLayout_Child(v86 + 32, (uint64_t)&v196);
      if ((v198 & 1) != 0 || v199 == 1)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined destroy of _IncrementalLayout_Child((uint64_t)&v196);
        outlined init with copy of _IncrementalLayout_Child(v86 + 32, (uint64_t)&v196);
        swift_bridgeObjectRelease();
        v87 = *(_BYTE *)(v70 + 24);
        _ProposedSize.init(_:in:by:)();
        if (!*((_QWORD *)v85 + 2))
          goto LABEL_208;
        v155 = *(double *)&v172;
        v154 = BYTE8(v172);
        v153 = v173;
        v152 = BYTE8(v173);
        outlined init with copy of _IncrementalLayout_Child((uint64_t)(v85 + 32), (uint64_t)&v193);
        swift_bridgeObjectRelease();
        v151 = *(_QWORD *)(v70 + 8);
        v150 = *(unsigned __int8 *)(v70 + 16);
        v88 = IncrementalLayoutViewCache.item(data:)((uint64_t)v156);
        v89 = *(_QWORD *)(v88 + 32);
        swift_bridgeObjectRetain();
        v90 = *(_QWORD *)(v88 + 40);
        swift_release();
        *(_QWORD *)&v184 = v89;
        *((_QWORD *)&v184 + 1) = v90;
        _ViewOutputs.layoutComputer.getter();
        swift_bridgeObjectRelease();
        LayoutProxy.init(context:layoutComputer:)();
        v189 = *(double *)&v177;
        v190 = DWORD2(v177);
        *(double *)&v184 = v155;
        BYTE8(v184) = v154;
        *(_QWORD *)&v185 = v153;
        BYTE8(v185) = v152;
        LayoutProxy.lengthThatFits(_:in:)();
        v92 = v91;
        outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v193, (uint64_t)&v184, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        if ((_QWORD)v184)
        {
          v179 = v186;
          v180 = v187;
          v181[0] = v188[0];
          *(_OWORD *)((char *)v181 + 15) = *(_OWORD *)((char *)v188 + 15);
          v177 = v184;
          v178 = v185;
          v93 = v161;
          closure #1 in _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v177, v151, v150, v87, (uint64_t)&v196, &v189);
          v161 = v93;
          outlined destroy of _IncrementalLayout_Child((uint64_t)&v177);
          v94 = v189;
        }
        else
        {
          v94 = 0.0;
        }
        v64 = v157;
        v66 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        outlined destroy of AccessibilityScrollableContext?((uint64_t)&v193, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        outlined destroy of _IncrementalLayout_Child((uint64_t)&v196);
        v70 = v167;
        v75 = v163;
        if ((v200 & 1) != 0)
        {
LABEL_122:
          v105 = *(double *)(v70 + 112) - v92;
          *(double *)(v70 + 112) = v105;
          v106 = *(_QWORD *)(v70 + 96);
          if (v106)
          {
            v105 = v105 - v94;
            *(double *)(v70 + 112) = v105;
          }
LABEL_139:
          if (v94 + v105 > *(double *)(v70 + 56))
          {
            v121 = *(_QWORD *)(v70 + 32);
            v53 = __OFSUB__(v106, v121);
            v122 = v106 - v121;
            if (v53)
              goto LABEL_209;
            goto LABEL_148;
          }
          goto LABEL_151;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined destroy of _IncrementalLayout_Child((uint64_t)&v196);
        if (!*(_QWORD *)(v86 + 16))
          goto LABEL_214;
        v151 = *(_QWORD *)(v70 + 8);
        v150 = *(unsigned __int8 *)(v70 + 16);
        outlined init with copy of _IncrementalLayout_Child(v86 + 32, (uint64_t)&v193);
        _ProposedSize.init(_:in:by:)();
        if (!*((_QWORD *)v85 + 2))
          goto LABEL_215;
        v155 = v189;
        v154 = v190;
        v153 = v191;
        v109 = v192;
        outlined init with copy of _IncrementalLayout_Child((uint64_t)(v85 + 32), (uint64_t)&v184);
        v152 = v194;
        v110 = IncrementalLayoutViewCache.item(data:)((uint64_t)v149);
        v111 = *(_QWORD *)(v110 + 32);
        swift_bridgeObjectRetain();
        v112 = *(_QWORD *)(v110 + 40);
        swift_release();
        *(_QWORD *)&v177 = v111;
        *((_QWORD *)&v177 + 1) = v112;
        _ViewOutputs.layoutComputer.getter();
        swift_bridgeObjectRelease();
        LayoutProxy.init(context:layoutComputer:)();
        v182 = *(double *)&v172;
        v183 = DWORD2(v172);
        *(double *)&v177 = v155;
        BYTE8(v177) = v154;
        *(_QWORD *)&v178 = v153;
        BYTE8(v178) = v109;
        LayoutProxy.lengthThatFits(_:in:)();
        v92 = v113;
        outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v184, (uint64_t)&v177, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        if ((_QWORD)v177)
        {
          v174 = v179;
          v175 = v180;
          v176[0] = v181[0];
          *(_OWORD *)((char *)v176 + 15) = *(_OWORD *)((char *)v181 + 15);
          v172 = v177;
          v173 = v178;
          v114 = v161;
          closure #1 in _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v172, v151, v150, 1, (uint64_t)&v193, &v182);
          v161 = v114;
          outlined destroy of _IncrementalLayout_Child((uint64_t)&v172);
          v94 = v182;
        }
        else
        {
          v94 = 0.0;
        }
        a3 = v162;
        v75 = v163;
        outlined destroy of AccessibilityScrollableContext?((uint64_t)&v184, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        outlined destroy of _IncrementalLayout_Child((uint64_t)&v193);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v70 = v167;
        v64 = v157;
        v66 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        if ((v200 & 1) != 0)
          goto LABEL_122;
      }
      v106 = *(_QWORD *)(v70 + 96);
      v105 = *(double *)(v70 + 112);
      goto LABEL_139;
    }
    goto LABEL_224;
  }
LABEL_229:
  __break(1u);
LABEL_230:
  __break(1u);
LABEL_231:
  __break(1u);
LABEL_232:
  __break(1u);
LABEL_233:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  __int128 *Value;
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  char v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  double v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  double v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  double v63;
  double v64;
  BOOL v65;
  uint64_t result;
  double v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  int isUniquelyReferenced_nonNull_native;
  char *v91;
  int64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  double v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  double v115;
  uint64_t v116;
  double v117;
  double v118;
  uint64_t v119;
  double v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  double v127;
  double v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  double v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  int v142;
  uint64_t v143;
  _QWORD *v144;
  int v145;
  char v146;
  uint64_t v147;
  _QWORD *v148;
  size_t v149;
  uint64_t v150;
  uint64_t v151;
  double v152;
  double v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  double v160;
  BOOL v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  __int128 *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  double v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _BOOL4 v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  _OWORD v193[2];
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  _OWORD v198[2];
  double v199;
  int v200;
  _QWORD v201[12];
  uint64_t v202;
  unsigned __int8 v203;
  uint64_t v204;
  char v205;
  __int128 v206;
  __int128 v207;
  char v208;
  char v209;
  char v210;
  __int16 v211;
  char v212[17];

  v187 = a1;
  v181 = type metadata accessor for FloatingPointRoundingRule();
  v9 = *(_QWORD *)(v181 - 8);
  MEMORY[0x1E0C80A78](v181, v10);
  v12 = (char *)&v163 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 216);
  v14 = *(_QWORD *)(a2 + 224);
  v15 = 0.0;
  if (*(_DWORD *)(a2 + 12) != *MEMORY[0x1E0CFED28])
  {
    Value = (__int128 *)AGGraphGetValue();
    v17 = Value[1];
    v206 = *Value;
    v207 = v17;
    v15 = MEMORY[0x18D75BE3C]();
  }
  v179 = a4;
  v180 = v9;
  v188 = *(_QWORD *)a5;
  v18 = *(double *)(a5 + 8);
  v19 = *(_QWORD *)(a5 + 16);
  v20 = *(_QWORD *)(a3 + 104);
  v21 = *(_QWORD *)(v20 + 16);
  v182 = v14;
  v183 = v13;
  if (v21)
  {
    v22 = *(_QWORD *)(a3 + 112);
    outlined retain of PlacementProperties<LazyHGridLayout>(a5);
    v24 = COERCE_DOUBLE(EstimationState.average.getter(v20, v22));
    if ((v25 & 1) != 0)
      v24 = 0.0;
    v26 = v23 + v24;
  }
  else
  {
    outlined retain of PlacementProperties<LazyHGridLayout>(a5);
    v26 = 32.0;
  }
  v27 = a5;
  v28 = v188;
  v186 = 2 * v188;
  v30 = v26 > 0.0 && *(_QWORD *)(v20 + 16) != 0;
  v185 = v30;
  *(_QWORD *)&v206 = *(_QWORD *)a2;
  v31 = a2;
  DWORD2(v206) = *(_DWORD *)(a2 + 8);
  v33 = *(double *)(v27 + 24);
  v32 = *(double *)(v27 + 32);
  v34 = v27;
  swift_getKeyPath();
  SizeAndSpacingContext.subscript.getter();
  swift_release();
  v35 = *(_QWORD *)(a3 + 16);
  v184 = a3;
  if (!v35 || v28 != *(_QWORD *)a3)
  {
    v38 = v34;
    outlined retain of PlacementProperties<LazyHGridLayout>(v34);
    goto LABEL_25;
  }
  v178 = v26;
  v36 = *(double *)v201;
  v37 = *(double *)(a3 + 8);
  v38 = v34;
  outlined retain of PlacementProperties<LazyHGridLayout>(v34);
  if (v18 != v37)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    v40 = v31;
    goto LABEL_26;
  }
  outlined retain of PlacementProperties<LazyHGridLayout>(v34);
  swift_bridgeObjectRetain();
  v39 = specialized static Array<A>.== infix(_:_:)(v19, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of PlacementProperties<LazyHGridLayout>(v34);
  v40 = v31;
  if ((v39 & 1) == 0 || (*(_BYTE *)(v34 + 40) & 1) != 0)
    goto LABEL_26;
  v176 = v34;
  v174 = v31;
  a3 = v184;
  v41 = *(_QWORD *)(v184 + 40);
  v42 = *(_QWORD *)(v184 + 56);
  v43 = *MEMORY[0x1E0DED4F0];
  v44 = v180;
  v45 = v181;
  v46 = *(void (**)(char *, uint64_t, uint64_t))(v180 + 104);
  v46(v12, v43, v181);
  v177 = v42;
  *(_QWORD *)&v206 = v42;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v12, v36);
  v47 = *(double *)&v206;
  v48 = *(void (**)(char *, uint64_t))(v44 + 8);
  v48(v12, v45);
  v49 = *(_QWORD *)(a3 + 64);
  v46(v12, v43, v45);
  *(_QWORD *)&v206 = v49;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v12, v36);
  v50 = *(double *)&v206;
  v48(v12, v45);
  if (v47 > v50)
    goto LABEL_203;
  v51 = v184;
  v38 = v176;
  if (v47 <= v33
    && (v32 <= v50 || v33 <= v50 && (*(_BYTE *)(v184 + 32) & 1) == 0 && *(_QWORD *)(v184 + 24) == *(_QWORD *)(v184 + 48)))
  {
    outlined release of PlacementProperties<LazyHGridLayout>(v176);
    return v41;
  }
  v52 = *(double *)(v184 + 64);
  v53 = v33 - v52;
  v54 = v15 + v15;
  if (v33 - v52 + 0.01 > 0.0 && v53 < v54)
  {
    outlined release of PlacementProperties<LazyHGridLayout>(v176);
    return *(_QWORD *)(v51 + 48);
  }
  v67 = *(double *)(v184 + 56);
  v68 = v33 - v67;
  if (v33 - v67 + 0.01 > 0.0 && v68 < v54)
  {
    outlined release of PlacementProperties<LazyHGridLayout>(v176);
    return *(_QWORD *)(v51 + 40);
  }
  if (v68 >= 0.0)
  {
    v69 = v33 - v52;
    v40 = v174;
  }
  else
  {
    v69 = v33 - v67;
    v40 = v174;
    if (v53 < 0.0)
    {
      if (v68 > v53)
        v69 = v33 - v67;
      else
        v69 = v33 - v52;
    }
  }
  if (v69 < 0.0 && v15 * 3.0 > -v69)
  {
    if (v185)
    {
      v71 = *(_QWORD *)(v184 + 40);
      v70 = *(_QWORD *)(v184 + 48);
      v72 = v70 - v71;
      if (__OFSUB__(v70, v71))
      {
LABEL_221:
        __break(1u);
        goto LABEL_222;
      }
      v73 = ceil(v15 / v178);
      if ((~*(_QWORD *)&v73 & 0x7FF0000000000000) == 0)
      {
LABEL_222:
        __break(1u);
        goto LABEL_223;
      }
      if (v73 <= -9.22337204e18)
      {
LABEL_223:
        __break(1u);
        goto LABEL_224;
      }
      if (v73 >= 9.22337204e18)
      {
LABEL_224:
        __break(1u);
        goto LABEL_225;
      }
      v175 = 0;
      if (v72 <= (uint64_t)v73)
        v72 = (uint64_t)v73;
      v166 = v72;
      if (v68 >= 0.0)
        v74 = v70;
      else
        v74 = v71;
      if (v68 >= 0.0)
        v75 = v52;
      else
        v75 = v67;
      v165 = v75;
      v173 = &v207;
      v76 = 2;
      v164 = v74;
      a3 = v179;
      while (1)
      {
        v77 = v76 * v166;
        if ((unsigned __int128)(v76 * (__int128)v166) >> 64 != (v76 * v166) >> 63)
          goto LABEL_210;
        v78 = v74 - v77;
        if (__OFSUB__(v74, v77))
          goto LABEL_211;
        v212[0] = 0;
        v79 = specialized IncrementalStack<>.collectBackwards(from:to:children:style:atEnd:)(v78 & ~(v78 >> 63), v74, v187, v186, v212);
        v180 = *(_QWORD *)(v79 + 16);
        if (v180)
          break;
        swift_bridgeObjectRelease();
LABEL_166:
        if (*(double *)(a3 + 120) <= v33 + 0.01)
          goto LABEL_198;
        if (v78 > 0)
        {
          v161 = v76 < 8;
          v76 *= 2;
          if (v161)
            continue;
        }
        goto LABEL_171;
      }
      v177 = v79;
      v80 = v212[0];
      specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(v74, 0, 1, 1, v165);
      v211 = 0;
      v210 = 0;
      if ((v80 & 1) == 0)
        goto LABEL_93;
      v81 = *(_QWORD *)(a3 + 40);
      v82 = *(_QWORD *)(a3 + 104);
      v65 = __OFSUB__(v82, v81);
      v83 = v82 - v81;
      if (!v65)
      {
        *(_QWORD *)(a3 + 104) = v83;
        v210 = 1;
LABEL_93:
        v167 = v78;
        v168 = v76;
        v84 = v177;
        swift_bridgeObjectRetain();
        swift_beginAccess();
        swift_beginAccess();
        swift_beginAccess();
        v85 = 0;
        v86 = 8 * v180 + 24;
        v87 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        while (1)
        {
          *(_QWORD *)(a3 + 144) = *(_QWORD *)(v84 + v86);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (v85 != 1)
          {
            if (!v85)
            {
              v88 = *(_QWORD *)(a3 + 144);
              if (*(_QWORD *)(a3 + 152))
                v89 = *(_QWORD **)(a3 + 152);
              else
                v89 = v87;
              *(_QWORD *)(a3 + 144) = v89;
              *(_QWORD *)(a3 + 152) = v88;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v91 = *(char **)(a3 + 144);
              if (!isUniquelyReferenced_nonNull_native)
                goto LABEL_157;
              v92 = *((_QWORD *)v91 + 2);
              v93 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(a3 + 144) = v91;
              v181 = v86;
              if ((v93 & 1) == 0)
                goto LABEL_152;
              goto LABEL_153;
            }
            v210 = 1;
            v106 = *(_QWORD *)(a3 + 144);
            if (!*(_QWORD *)(v106 + 16))
              goto LABEL_160;
            v181 = v86;
            v107 = *(_QWORD *)(a3 + 152);
            if (!v107)
              goto LABEL_227;
            if (!*(_QWORD *)(v107 + 16))
              goto LABEL_205;
            outlined init with copy of _IncrementalLayout_Child(v107 + 32, (uint64_t)&v206);
            if ((v208 & 1) != 0 || v209 == 1)
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              outlined destroy of _IncrementalLayout_Child((uint64_t)&v206);
              outlined init with copy of _IncrementalLayout_Child(v107 + 32, (uint64_t)&v206);
              swift_bridgeObjectRelease();
              v108 = *(_BYTE *)(a3 + 32);
              _ProposedSize.init(_:in:by:)();
              if (!*(_QWORD *)(v106 + 16))
                goto LABEL_207;
              v172 = v202;
              LODWORD(v171) = v203;
              v170 = v204;
              v109 = v205;
              outlined init with copy of _IncrementalLayout_Child(v106 + 32, (uint64_t)v201);
              swift_bridgeObjectRelease();
              v110 = *(_QWORD *)(a3 + 16);
              v169 = *(unsigned __int8 *)(a3 + 24);
              v111 = IncrementalLayoutViewCache.item(data:)((uint64_t)v173);
              v112 = *(_QWORD *)(v111 + 32);
              swift_bridgeObjectRetain();
              v113 = *(_QWORD *)(v111 + 40);
              swift_release();
              *(_QWORD *)&v194 = v112;
              *((_QWORD *)&v194 + 1) = v113;
              _ViewOutputs.layoutComputer.getter();
              swift_bridgeObjectRelease();
              LayoutProxy.init(context:layoutComputer:)();
              v199 = *(double *)&v189;
              v200 = DWORD2(v189);
              *(_QWORD *)&v194 = v172;
              BYTE8(v194) = v171;
              *(_QWORD *)&v195 = v170;
              BYTE8(v195) = v109;
              LayoutProxy.lengthThatFits(_:in:)();
              v115 = v114;
              outlined init with copy of AccessibilityScrollableContext?((uint64_t)v201, (uint64_t)&v194, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
              if ((_QWORD)v194)
              {
                v191 = v196;
                v192 = v197;
                v193[0] = v198[0];
                *(_OWORD *)((char *)v193 + 15) = *(_OWORD *)((char *)v198 + 15);
                v189 = v194;
                v190 = v195;
                v116 = v175;
                closure #1 in _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v189, v110, v169, v108, (uint64_t)&v206, &v199);
                v175 = v116;
                outlined destroy of _IncrementalLayout_Child((uint64_t)&v189);
                v117 = v199;
              }
              else
              {
                v117 = 0.0;
              }
              v87 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              v86 = v181;
              outlined destroy of AccessibilityScrollableContext?((uint64_t)v201, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
              outlined destroy of _IncrementalLayout_Child((uint64_t)&v206);
              if ((v210 & 1) != 0)
              {
LABEL_124:
                v120 = *(double *)(a3 + 120) - v115;
                *(double *)(a3 + 120) = v120;
                v121 = *(_QWORD *)(a3 + 104);
                if (v121)
                {
                  v120 = v120 - v117;
                  *(double *)(a3 + 120) = v120;
                }
LABEL_135:
                if (v117 + v120 > *(double *)(a3 + 64))
                {
                  v138 = *(_QWORD *)(a3 + 40);
                  v65 = __OFSUB__(v121, v138);
                  v139 = v121 - v138;
                  if (v65)
                    goto LABEL_209;
                  if (v211 == 1 && (v139 & 0x8000000000000000) == 0)
                    *(_QWORD *)(a3 + 104) = v139;
                  v140 = *(_QWORD *)(a3 + 144);
                  if (*(_QWORD *)(a3 + 152))
                    v141 = *(_QWORD **)(a3 + 152);
                  else
                    v141 = v87;
                  *(_QWORD *)(a3 + 144) = v141;
                  *(_QWORD *)(a3 + 152) = v140;
                  v142 = swift_isUniquelyReferenced_nonNull_native();
                  v91 = *(char **)(a3 + 144);
                  if (!v142)
                  {
LABEL_157:
                    v148 = v87;
                    if (*((_QWORD *)v91 + 3) >= 2uLL)
                    {
                      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_IncrementalLayout_Child>, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                      v148 = (_QWORD *)swift_allocObject();
                      v149 = _swift_stdlib_malloc_size_0(v148);
                      v148[2] = 0;
                      v148[3] = 2 * ((uint64_t)(v149 - 32) / 96);
                    }
                    *(_QWORD *)(a3 + 144) = v148;
                    swift_bridgeObjectRelease();
                    v84 = v177;
                    goto LABEL_160;
                  }
                  v92 = *((_QWORD *)v91 + 2);
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v92, 1, v91);
                  goto LABEL_153;
                }
LABEL_146:
                HIBYTE(v211) = 1;
                goto LABEL_147;
              }
            }
            else
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              outlined destroy of _IncrementalLayout_Child((uint64_t)&v206);
              v131 = *(_QWORD *)a3;
              v132 = *(_QWORD *)(a3 + 8);
              v133 = *(_QWORD *)(a3 + 16);
              v134 = *(_BYTE *)(a3 + 24);
              v135 = *(_QWORD *)(a3 + 56);
              v171 = *(unsigned int *)(a3 + 28);
              v172 = v133;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              LOBYTE(v201[0]) = v134;
              v87 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              specialized HVGrid.lengthAndSpacing(children:predecessors:minorGeometry:)(v107, v106, v135, v131, v132, v172, v201[0]);
              v115 = v136;
              v117 = v137;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v86 = v181;
              if ((v210 & 1) != 0)
                goto LABEL_124;
            }
            v121 = *(_QWORD *)(a3 + 104);
            v120 = *(double *)(a3 + 120);
            goto LABEL_135;
          }
          LOBYTE(v211) = 1;
          v94 = *(_QWORD *)(a3 + 144);
          if (!*(_QWORD *)(v94 + 16))
            goto LABEL_160;
          v181 = v86;
          v95 = *(_QWORD *)(a3 + 152);
          if (!v95)
            goto LABEL_226;
          if (!*(_QWORD *)(v95 + 16))
            goto LABEL_204;
          outlined init with copy of _IncrementalLayout_Child(v95 + 32, (uint64_t)&v206);
          if ((v208 & 1) != 0 || v209 == 1)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined destroy of _IncrementalLayout_Child((uint64_t)&v206);
            outlined init with copy of _IncrementalLayout_Child(v95 + 32, (uint64_t)&v206);
            swift_bridgeObjectRelease();
            v96 = *(_BYTE *)(a3 + 32);
            _ProposedSize.init(_:in:by:)();
            if (!*(_QWORD *)(v94 + 16))
              goto LABEL_206;
            v172 = v202;
            LODWORD(v171) = v203;
            v170 = v204;
            v97 = v205;
            outlined init with copy of _IncrementalLayout_Child(v94 + 32, (uint64_t)v201);
            swift_bridgeObjectRelease();
            v98 = *(_QWORD *)(a3 + 16);
            v169 = *(unsigned __int8 *)(a3 + 24);
            v99 = IncrementalLayoutViewCache.item(data:)((uint64_t)v173);
            v100 = *(_QWORD *)(v99 + 32);
            swift_bridgeObjectRetain();
            v101 = *(_QWORD *)(v99 + 40);
            swift_release();
            *(_QWORD *)&v194 = v100;
            *((_QWORD *)&v194 + 1) = v101;
            _ViewOutputs.layoutComputer.getter();
            swift_bridgeObjectRelease();
            LayoutProxy.init(context:layoutComputer:)();
            v199 = *(double *)&v189;
            v200 = DWORD2(v189);
            *(_QWORD *)&v194 = v172;
            BYTE8(v194) = v171;
            *(_QWORD *)&v195 = v170;
            BYTE8(v195) = v97;
            LayoutProxy.lengthThatFits(_:in:)();
            v103 = v102;
            outlined init with copy of AccessibilityScrollableContext?((uint64_t)v201, (uint64_t)&v194, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            if ((_QWORD)v194)
            {
              v191 = v196;
              v192 = v197;
              v193[0] = v198[0];
              *(_OWORD *)((char *)v193 + 15) = *(_OWORD *)((char *)v198 + 15);
              v189 = v194;
              v190 = v195;
              v104 = v175;
              closure #1 in _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v189, v98, v169, v96, (uint64_t)&v206, &v199);
              v175 = v104;
              outlined destroy of _IncrementalLayout_Child((uint64_t)&v189);
              v105 = v199;
            }
            else
            {
              v105 = 0.0;
            }
            v87 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            v86 = v181;
            outlined destroy of AccessibilityScrollableContext?((uint64_t)v201, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            outlined destroy of _IncrementalLayout_Child((uint64_t)&v206);
            if ((v210 & 1) == 0)
            {
LABEL_127:
              v119 = *(_QWORD *)(a3 + 104);
              v118 = *(double *)(a3 + 120);
              goto LABEL_128;
            }
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined destroy of _IncrementalLayout_Child((uint64_t)&v206);
            v122 = *(_QWORD *)a3;
            v123 = *(_QWORD *)(a3 + 8);
            v124 = *(_QWORD *)(a3 + 16);
            v125 = *(_BYTE *)(a3 + 24);
            v126 = *(_QWORD *)(a3 + 56);
            v171 = *(unsigned int *)(a3 + 28);
            v172 = v124;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            LOBYTE(v201[0]) = v125;
            v87 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            specialized HVGrid.lengthAndSpacing(children:predecessors:minorGeometry:)(v95, v94, v126, v122, v123, v172, v201[0]);
            v103 = v127;
            v105 = v128;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v86 = v181;
            if ((v210 & 1) == 0)
              goto LABEL_127;
          }
          v118 = *(double *)(a3 + 120) - v103;
          *(double *)(a3 + 120) = v118;
          v119 = *(_QWORD *)(a3 + 104);
          if (v119)
          {
            v118 = v118 - v105;
            *(double *)(a3 + 120) = v118;
          }
LABEL_128:
          if (v105 + v118 <= *(double *)(a3 + 64))
            goto LABEL_146;
          v129 = *(_QWORD *)(a3 + 40);
          v65 = __OFSUB__(v119, v129);
          v130 = v119 - v129;
          if (v65)
            goto LABEL_208;
          if (v211 == 1 && (v130 & 0x8000000000000000) == 0)
            *(_QWORD *)(a3 + 104) = v130;
LABEL_147:
          v143 = *(_QWORD *)(a3 + 144);
          if (*(_QWORD *)(a3 + 152))
            v144 = *(_QWORD **)(a3 + 152);
          else
            v144 = v87;
          *(_QWORD *)(a3 + 144) = v144;
          *(_QWORD *)(a3 + 152) = v143;
          v145 = swift_isUniquelyReferenced_nonNull_native();
          v91 = *(char **)(a3 + 144);
          if (!v145)
            goto LABEL_157;
          v92 = *((_QWORD *)v91 + 2);
          v146 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(a3 + 144) = v91;
          if ((v146 & 1) == 0)
          {
LABEL_152:
            v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v92, 1, v91);
            *(_QWORD *)(a3 + 144) = v91;
          }
LABEL_153:
          swift_arrayDestroy();
          if (v92)
          {
            v147 = *((_QWORD *)v91 + 2) - v92;
            if (v147 < 0)
              goto LABEL_228;
            memmove(v91 + 32, &v91[96 * v92 + 32], 96 * v147);
            *((_QWORD *)v91 + 2) = v147;
            v87 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          }
          *(_QWORD *)(a3 + 144) = v91;
          v84 = v177;
          v86 = v181;
LABEL_160:
          if (HIBYTE(v211) == 1)
          {
            swift_bridgeObjectRelease_n();
            v74 = v164;
            v78 = v167;
            v76 = v168;
            v40 = v174;
            goto LABEL_166;
          }
          if (__OFADD__(v85, 1))
            goto LABEL_201;
          ++v85;
          v86 -= 8;
          if (v180 == v85)
          {
            v78 = v167;
            swift_bridgeObjectRelease();
            swift_beginAccess();
            LOBYTE(v211) = 1;
            swift_beginAccess();
            v210 = 1;
            specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v78 < 1, (uint64_t *)a3, &v210, 0, (_BYTE *)&v211 + 1, &v211);
            swift_bridgeObjectRelease();
            v74 = v164;
            v76 = v168;
            v40 = v174;
            goto LABEL_166;
          }
        }
      }
      goto LABEL_219;
    }
    goto LABEL_26;
  }
  if (!v185)
    goto LABEL_26;
LABEL_171:
  *(_QWORD *)&v206 = v186;
  v150 = _ViewList_Node.estimatedCount(style:)();
  if (v188 == 1)
  {
LABEL_176:
    v151 = v150 - 1;
    if (__OFSUB__(v150, 1))
    {
LABEL_212:
      __break(1u);
      goto LABEL_213;
    }
    v152 = *(double *)(v184 + 56);
    v153 = round((v33 - v152) / v178);
    if ((~*(_QWORD *)&v153 & 0x7FF0000000000000) == 0)
    {
LABEL_213:
      __break(1u);
      goto LABEL_214;
    }
    if (v153 <= -9.22337204e18)
    {
LABEL_214:
      __break(1u);
      goto LABEL_215;
    }
    if (v153 >= 9.22337204e18)
    {
LABEL_215:
      __break(1u);
      goto LABEL_216;
    }
    v154 = v151 & ~(v151 >> 63);
    v155 = v154 * v188;
    if ((unsigned __int128)(v154 * (__int128)v188) >> 64 != (v154 * v188) >> 63)
    {
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
      goto LABEL_218;
    }
    if (v151 >= (uint64_t)v153)
      v151 = (uint64_t)v153;
    v156 = v151 & ~(v151 >> 63);
    v157 = v156 * v188;
    if ((unsigned __int128)(v156 * (__int128)v188) >> 64 != (v156 * v188) >> 63)
      goto LABEL_217;
    v158 = *(_QWORD *)(v184 + 40);
    v65 = __OFADD__(v158, v157);
    v159 = v158 + v157;
    if (v65)
    {
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
      goto LABEL_220;
    }
    v160 = v152 + v178 * (double)v156;
    v161 = v160 + 0.01 < 0.0 || v160 + -0.01 > v33;
    if (!v161)
    {
      v162 = v159 & ~(v159 >> 63);
      if (v155 >= v162)
        v41 = v162;
      else
        v41 = v155;
      goto LABEL_52;
    }
LABEL_26:
    *(_QWORD *)&v206 = v186;
    v55 = _ViewList_Node.estimatedCount(style:)();
    v56 = v188;
    if (v188 == 1)
      goto LABEL_31;
    if (v188)
    {
      if (v55 != 0x8000000000000000 || v188 != -1)
      {
        v55 /= v188;
LABEL_31:
        v57 = *(double *)(v40 + 32);
        v58 = v33 / v57;
        v161 = v57 <= 0.0;
        v59 = 0.0;
        if (v161)
          v58 = 0.0;
        if (v58 >= 0.0)
          v59 = v58;
        if (v58 >= 1.0)
          v59 = 1.0;
        if (__OFSUB__(v55, 1))
        {
          __break(1u);
        }
        else
        {
          v60 = (v55 - 1) & ~((v55 - 1) >> 63);
          v41 = v60 * v188;
          if ((unsigned __int128)(v60 * (__int128)v188) >> 64 == (v60 * v188) >> 63)
          {
            v61 = v59 * (double)v55 + 0.5;
            if ((~*(_QWORD *)&v61 & 0x7FF0000000000000) != 0)
            {
              if (v61 > -9.22337204e18)
              {
                if (v61 < 9.22337204e18)
                {
                  v62 = (uint64_t)v61 * v188;
                  if ((unsigned __int128)((uint64_t)v61 * (__int128)v188) >> 64 == v62 >> 63)
                  {
                    if (v62 < 0)
                    {
                      if ((v41 & 0x8000000000000000) == 0)
                      {
                        outlined release of PlacementProperties<LazyHGridLayout>(v38);
                        return 0;
                      }
                    }
                    else
                    {
                      if (v41 >= v62)
                        v41 = (uint64_t)v61 * v188;
                      if (v41 >= 1 && v185)
                      {
                        EstimationState.average.getter(*(_QWORD *)(v184 + 104), *(_QWORD *)(v184 + 112));
                        EdgeInsets.originOffset.getter();
                        v64 = v63;
                        outlined release of PlacementProperties<LazyHGridLayout>(v38);
                        if (v41 < v56)
                          return v41;
                        if (v64 <= 0.0)
                          return v41;
                        v65 = __OFSUB__(v41, v56);
                        v41 -= v56;
                        if (!v65)
                          return v41;
                        goto LABEL_202;
                      }
                    }
LABEL_52:
                    outlined release of PlacementProperties<LazyHGridLayout>(v38);
                    return v41;
                  }
LABEL_197:
                  __break(1u);
LABEL_198:
                  outlined release of PlacementProperties<LazyHGridLayout>(v38);
                  return *(_QWORD *)(a3 + 104);
                }
LABEL_196:
                __break(1u);
                goto LABEL_197;
              }
LABEL_195:
              __break(1u);
              goto LABEL_196;
            }
LABEL_194:
            __break(1u);
            goto LABEL_195;
          }
        }
        __break(1u);
        goto LABEL_194;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
    goto LABEL_212;
  }
  if (!v188)
  {
LABEL_220:
    __break(1u);
    goto LABEL_221;
  }
  if (v150 != 0x8000000000000000 || v188 != -1)
  {
    v150 /= v188;
    goto LABEL_176;
  }
LABEL_225:
  __break(1u);
LABEL_226:
  __break(1u);
LABEL_227:
  __break(1u);
LABEL_228:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  __int128 *Value;
  __int128 v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  char v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  double v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  double v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  double v64;
  double v65;
  BOOL v66;
  uint64_t result;
  double v68;
  double v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  int isUniquelyReferenced_nonNull_native;
  char *v92;
  int64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  double v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  double v115;
  double v116;
  uint64_t v117;
  double v118;
  double v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  double v128;
  double v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  double v137;
  double v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  int v143;
  uint64_t v144;
  _QWORD *v145;
  int v146;
  char v147;
  uint64_t v148;
  _QWORD *v149;
  size_t v150;
  uint64_t v151;
  uint64_t v152;
  double v153;
  double v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  double v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  double v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  __int128 *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  double v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _BOOL4 v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  _OWORD v194[2];
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _OWORD v199[2];
  double v200;
  int v201;
  _QWORD v202[12];
  uint64_t v203;
  unsigned __int8 v204;
  uint64_t v205;
  char v206;
  __int128 v207;
  __int128 v208;
  char v209;
  char v210;
  char v211;
  __int16 v212;
  char v213[17];

  v188 = a1;
  v182 = type metadata accessor for FloatingPointRoundingRule();
  v9 = *(_QWORD *)(v182 - 8);
  MEMORY[0x1E0C80A78](v182, v10);
  v12 = (char *)&v164 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 216);
  v14 = *(_QWORD *)(a2 + 224);
  v15 = 0.0;
  if (*(_DWORD *)(a2 + 12) != *MEMORY[0x1E0CFED28])
  {
    Value = (__int128 *)AGGraphGetValue();
    v17 = Value[1];
    v207 = *Value;
    v208 = v17;
    MEMORY[0x18D75BE3C]();
    v15 = v18;
  }
  v180 = a4;
  v181 = v9;
  v189 = *(_QWORD *)a5;
  v19 = *(double *)(a5 + 8);
  v20 = *(_QWORD *)(a5 + 16);
  v21 = *(_QWORD *)(a3 + 104);
  v22 = *(_QWORD *)(v21 + 16);
  v183 = v14;
  v184 = v13;
  if (v22)
  {
    v23 = *(_QWORD *)(a3 + 112);
    outlined retain of PlacementProperties<LazyHGridLayout>(a5);
    v25 = COERCE_DOUBLE(EstimationState.average.getter(v21, v23));
    if ((v26 & 1) != 0)
      v25 = 0.0;
    v27 = v24 + v25;
  }
  else
  {
    outlined retain of PlacementProperties<LazyHGridLayout>(a5);
    v27 = 32.0;
  }
  v28 = a5;
  v29 = v189;
  v187 = 2 * v189;
  v31 = v27 > 0.0 && *(_QWORD *)(v21 + 16) != 0;
  v186 = v31;
  *(_QWORD *)&v207 = *(_QWORD *)a2;
  v32 = a2;
  DWORD2(v207) = *(_DWORD *)(a2 + 8);
  v34 = *(double *)(v28 + 24);
  v33 = *(double *)(v28 + 32);
  v35 = v28;
  swift_getKeyPath();
  SizeAndSpacingContext.subscript.getter();
  swift_release();
  v36 = *(_QWORD *)(a3 + 16);
  v185 = a3;
  if (!v36 || v29 != *(_QWORD *)a3)
  {
    v39 = v35;
    outlined retain of PlacementProperties<LazyHGridLayout>(v35);
    goto LABEL_25;
  }
  v179 = v27;
  v37 = *(double *)v202;
  v38 = *(double *)(a3 + 8);
  v39 = v35;
  outlined retain of PlacementProperties<LazyHGridLayout>(v35);
  if (v19 != v38)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    v41 = v32;
    goto LABEL_26;
  }
  outlined retain of PlacementProperties<LazyHGridLayout>(v35);
  swift_bridgeObjectRetain();
  v40 = specialized static Array<A>.== infix(_:_:)(v20, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of PlacementProperties<LazyHGridLayout>(v35);
  v41 = v32;
  if ((v40 & 1) == 0 || (*(_BYTE *)(v35 + 40) & 1) != 0)
    goto LABEL_26;
  v177 = v35;
  v175 = v32;
  a3 = v185;
  v42 = *(_QWORD *)(v185 + 40);
  v43 = *(_QWORD *)(v185 + 56);
  v44 = *MEMORY[0x1E0DED4F0];
  v45 = v181;
  v46 = v182;
  v47 = *(void (**)(char *, uint64_t, uint64_t))(v181 + 104);
  v47(v12, v44, v182);
  v178 = v43;
  *(_QWORD *)&v207 = v43;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v12, v37);
  v48 = *(double *)&v207;
  v49 = *(void (**)(char *, uint64_t))(v45 + 8);
  v49(v12, v46);
  v50 = *(_QWORD *)(a3 + 64);
  v47(v12, v44, v46);
  *(_QWORD *)&v207 = v50;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v12, v37);
  v51 = *(double *)&v207;
  v49(v12, v46);
  if (v48 > v51)
    goto LABEL_203;
  v52 = v185;
  v39 = v177;
  if (v48 <= v34
    && (v33 <= v51 || v34 <= v51 && (*(_BYTE *)(v185 + 32) & 1) == 0 && *(_QWORD *)(v185 + 24) == *(_QWORD *)(v185 + 48)))
  {
    outlined release of PlacementProperties<LazyHGridLayout>(v177);
    return v42;
  }
  v53 = *(double *)(v185 + 64);
  v54 = v34 - v53;
  v55 = v15 + v15;
  if (v34 - v53 + 0.01 > 0.0 && v54 < v55)
  {
    outlined release of PlacementProperties<LazyHGridLayout>(v177);
    return *(_QWORD *)(v52 + 48);
  }
  v68 = *(double *)(v185 + 56);
  v69 = v34 - v68;
  if (v34 - v68 + 0.01 > 0.0 && v69 < v55)
  {
    outlined release of PlacementProperties<LazyHGridLayout>(v177);
    return *(_QWORD *)(v52 + 40);
  }
  if (v69 >= 0.0)
  {
    v70 = v34 - v53;
    v41 = v175;
  }
  else
  {
    v70 = v34 - v68;
    v41 = v175;
    if (v54 < 0.0)
    {
      if (v69 > v54)
        v70 = v34 - v68;
      else
        v70 = v34 - v53;
    }
  }
  if (v70 < 0.0 && v15 * 3.0 > -v70)
  {
    if (v186)
    {
      v72 = *(_QWORD *)(v185 + 40);
      v71 = *(_QWORD *)(v185 + 48);
      v73 = v71 - v72;
      if (__OFSUB__(v71, v72))
      {
LABEL_221:
        __break(1u);
        goto LABEL_222;
      }
      v74 = ceil(v15 / v179);
      if ((~*(_QWORD *)&v74 & 0x7FF0000000000000) == 0)
      {
LABEL_222:
        __break(1u);
        goto LABEL_223;
      }
      if (v74 <= -9.22337204e18)
      {
LABEL_223:
        __break(1u);
        goto LABEL_224;
      }
      if (v74 >= 9.22337204e18)
      {
LABEL_224:
        __break(1u);
        goto LABEL_225;
      }
      v176 = 0;
      if (v73 <= (uint64_t)v74)
        v73 = (uint64_t)v74;
      v167 = v73;
      if (v69 >= 0.0)
        v75 = v71;
      else
        v75 = v72;
      if (v69 >= 0.0)
        v76 = v53;
      else
        v76 = v68;
      v166 = v76;
      v174 = &v208;
      v77 = 2;
      v165 = v75;
      a3 = v180;
      while (1)
      {
        v78 = v77 * v167;
        if ((unsigned __int128)(v77 * (__int128)v167) >> 64 != (v77 * v167) >> 63)
          goto LABEL_210;
        v79 = v75 - v78;
        if (__OFSUB__(v75, v78))
          goto LABEL_211;
        v213[0] = 0;
        v80 = specialized IncrementalStack<>.collectBackwards(from:to:children:style:atEnd:)(v79 & ~(v79 >> 63), v75, v188, v187, v213);
        v181 = *(_QWORD *)(v80 + 16);
        if (v181)
          break;
        swift_bridgeObjectRelease();
LABEL_166:
        if (*(double *)(a3 + 120) <= v34 + 0.01)
          goto LABEL_198;
        if (v79 > 0)
        {
          v162 = v77 < 8;
          v77 *= 2;
          if (v162)
            continue;
        }
        goto LABEL_171;
      }
      v178 = v80;
      v81 = v213[0];
      specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(v75, 0, 1, 1, v166);
      v212 = 0;
      v211 = 0;
      if ((v81 & 1) == 0)
        goto LABEL_93;
      v82 = *(_QWORD *)(a3 + 40);
      v83 = *(_QWORD *)(a3 + 104);
      v66 = __OFSUB__(v83, v82);
      v84 = v83 - v82;
      if (!v66)
      {
        *(_QWORD *)(a3 + 104) = v84;
        v211 = 1;
LABEL_93:
        v168 = v79;
        v169 = v77;
        v85 = v178;
        swift_bridgeObjectRetain();
        swift_beginAccess();
        swift_beginAccess();
        swift_beginAccess();
        v86 = 0;
        v87 = 8 * v181 + 24;
        v88 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        while (1)
        {
          *(_QWORD *)(a3 + 144) = *(_QWORD *)(v85 + v87);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (v86 != 1)
          {
            if (!v86)
            {
              v89 = *(_QWORD *)(a3 + 144);
              if (*(_QWORD *)(a3 + 152))
                v90 = *(_QWORD **)(a3 + 152);
              else
                v90 = v88;
              *(_QWORD *)(a3 + 144) = v90;
              *(_QWORD *)(a3 + 152) = v89;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v92 = *(char **)(a3 + 144);
              if (!isUniquelyReferenced_nonNull_native)
                goto LABEL_157;
              v93 = *((_QWORD *)v92 + 2);
              v94 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(a3 + 144) = v92;
              v182 = v87;
              if ((v94 & 1) == 0)
                goto LABEL_152;
              goto LABEL_153;
            }
            v211 = 1;
            v107 = *(_QWORD *)(a3 + 144);
            if (!*(_QWORD *)(v107 + 16))
              goto LABEL_160;
            v182 = v87;
            v108 = *(_QWORD *)(a3 + 152);
            if (!v108)
              goto LABEL_227;
            if (!*(_QWORD *)(v108 + 16))
              goto LABEL_205;
            outlined init with copy of _IncrementalLayout_Child(v108 + 32, (uint64_t)&v207);
            if ((v209 & 1) != 0 || v210 == 1)
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              outlined destroy of _IncrementalLayout_Child((uint64_t)&v207);
              outlined init with copy of _IncrementalLayout_Child(v108 + 32, (uint64_t)&v207);
              swift_bridgeObjectRelease();
              v109 = *(_BYTE *)(a3 + 32);
              _ProposedSize.init(_:in:by:)();
              if (!*(_QWORD *)(v107 + 16))
                goto LABEL_207;
              v173 = v203;
              LODWORD(v172) = v204;
              v171 = v205;
              v110 = v206;
              outlined init with copy of _IncrementalLayout_Child(v107 + 32, (uint64_t)v202);
              swift_bridgeObjectRelease();
              v111 = *(_QWORD *)(a3 + 16);
              v170 = *(unsigned __int8 *)(a3 + 24);
              v112 = IncrementalLayoutViewCache.item(data:)((uint64_t)v174);
              v113 = *(_QWORD *)(v112 + 32);
              swift_bridgeObjectRetain();
              v114 = *(_QWORD *)(v112 + 40);
              swift_release();
              *(_QWORD *)&v195 = v113;
              *((_QWORD *)&v195 + 1) = v114;
              _ViewOutputs.layoutComputer.getter();
              swift_bridgeObjectRelease();
              LayoutProxy.init(context:layoutComputer:)();
              v200 = *(double *)&v190;
              v201 = DWORD2(v190);
              *(_QWORD *)&v195 = v173;
              BYTE8(v195) = v172;
              *(_QWORD *)&v196 = v171;
              BYTE8(v196) = v110;
              LayoutProxy.lengthThatFits(_:in:)();
              v116 = v115;
              outlined init with copy of AccessibilityScrollableContext?((uint64_t)v202, (uint64_t)&v195, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
              if ((_QWORD)v195)
              {
                v192 = v197;
                v193 = v198;
                v194[0] = v199[0];
                *(_OWORD *)((char *)v194 + 15) = *(_OWORD *)((char *)v199 + 15);
                v190 = v195;
                v191 = v196;
                v117 = v176;
                closure #1 in _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v190, v111, v170, v109, (uint64_t)&v207, &v200);
                v176 = v117;
                outlined destroy of _IncrementalLayout_Child((uint64_t)&v190);
                v118 = v200;
              }
              else
              {
                v118 = 0.0;
              }
              v88 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              v87 = v182;
              outlined destroy of AccessibilityScrollableContext?((uint64_t)v202, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
              outlined destroy of _IncrementalLayout_Child((uint64_t)&v207);
              if ((v211 & 1) != 0)
              {
LABEL_124:
                v121 = *(double *)(a3 + 120) - v116;
                *(double *)(a3 + 120) = v121;
                v122 = *(_QWORD *)(a3 + 104);
                if (v122)
                {
                  v121 = v121 - v118;
                  *(double *)(a3 + 120) = v121;
                }
LABEL_135:
                if (v118 + v121 > *(double *)(a3 + 64))
                {
                  v139 = *(_QWORD *)(a3 + 40);
                  v66 = __OFSUB__(v122, v139);
                  v140 = v122 - v139;
                  if (v66)
                    goto LABEL_209;
                  if (v212 == 1 && (v140 & 0x8000000000000000) == 0)
                    *(_QWORD *)(a3 + 104) = v140;
                  v141 = *(_QWORD *)(a3 + 144);
                  if (*(_QWORD *)(a3 + 152))
                    v142 = *(_QWORD **)(a3 + 152);
                  else
                    v142 = v88;
                  *(_QWORD *)(a3 + 144) = v142;
                  *(_QWORD *)(a3 + 152) = v141;
                  v143 = swift_isUniquelyReferenced_nonNull_native();
                  v92 = *(char **)(a3 + 144);
                  if (!v143)
                  {
LABEL_157:
                    v149 = v88;
                    if (*((_QWORD *)v92 + 3) >= 2uLL)
                    {
                      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_IncrementalLayout_Child>, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                      v149 = (_QWORD *)swift_allocObject();
                      v150 = _swift_stdlib_malloc_size_0(v149);
                      v149[2] = 0;
                      v149[3] = 2 * ((uint64_t)(v150 - 32) / 96);
                    }
                    *(_QWORD *)(a3 + 144) = v149;
                    swift_bridgeObjectRelease();
                    v85 = v178;
                    goto LABEL_160;
                  }
                  v93 = *((_QWORD *)v92 + 2);
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v93, 1, v92);
                  goto LABEL_153;
                }
LABEL_146:
                HIBYTE(v212) = 1;
                goto LABEL_147;
              }
            }
            else
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              outlined destroy of _IncrementalLayout_Child((uint64_t)&v207);
              v132 = *(_QWORD *)a3;
              v133 = *(_QWORD *)(a3 + 8);
              v134 = *(_QWORD *)(a3 + 16);
              v135 = *(_BYTE *)(a3 + 24);
              v136 = *(_QWORD *)(a3 + 56);
              v172 = *(unsigned int *)(a3 + 28);
              v173 = v134;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              LOBYTE(v202[0]) = v135;
              v88 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              specialized HVGrid.lengthAndSpacing(children:predecessors:minorGeometry:)(v108, v107, v136, v132, v133, v173, v202[0]);
              v116 = v137;
              v118 = v138;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v87 = v182;
              if ((v211 & 1) != 0)
                goto LABEL_124;
            }
            v122 = *(_QWORD *)(a3 + 104);
            v121 = *(double *)(a3 + 120);
            goto LABEL_135;
          }
          LOBYTE(v212) = 1;
          v95 = *(_QWORD *)(a3 + 144);
          if (!*(_QWORD *)(v95 + 16))
            goto LABEL_160;
          v182 = v87;
          v96 = *(_QWORD *)(a3 + 152);
          if (!v96)
            goto LABEL_226;
          if (!*(_QWORD *)(v96 + 16))
            goto LABEL_204;
          outlined init with copy of _IncrementalLayout_Child(v96 + 32, (uint64_t)&v207);
          if ((v209 & 1) != 0 || v210 == 1)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined destroy of _IncrementalLayout_Child((uint64_t)&v207);
            outlined init with copy of _IncrementalLayout_Child(v96 + 32, (uint64_t)&v207);
            swift_bridgeObjectRelease();
            v97 = *(_BYTE *)(a3 + 32);
            _ProposedSize.init(_:in:by:)();
            if (!*(_QWORD *)(v95 + 16))
              goto LABEL_206;
            v173 = v203;
            LODWORD(v172) = v204;
            v171 = v205;
            v98 = v206;
            outlined init with copy of _IncrementalLayout_Child(v95 + 32, (uint64_t)v202);
            swift_bridgeObjectRelease();
            v99 = *(_QWORD *)(a3 + 16);
            v170 = *(unsigned __int8 *)(a3 + 24);
            v100 = IncrementalLayoutViewCache.item(data:)((uint64_t)v174);
            v101 = *(_QWORD *)(v100 + 32);
            swift_bridgeObjectRetain();
            v102 = *(_QWORD *)(v100 + 40);
            swift_release();
            *(_QWORD *)&v195 = v101;
            *((_QWORD *)&v195 + 1) = v102;
            _ViewOutputs.layoutComputer.getter();
            swift_bridgeObjectRelease();
            LayoutProxy.init(context:layoutComputer:)();
            v200 = *(double *)&v190;
            v201 = DWORD2(v190);
            *(_QWORD *)&v195 = v173;
            BYTE8(v195) = v172;
            *(_QWORD *)&v196 = v171;
            BYTE8(v196) = v98;
            LayoutProxy.lengthThatFits(_:in:)();
            v104 = v103;
            outlined init with copy of AccessibilityScrollableContext?((uint64_t)v202, (uint64_t)&v195, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            if ((_QWORD)v195)
            {
              v192 = v197;
              v193 = v198;
              v194[0] = v199[0];
              *(_OWORD *)((char *)v194 + 15) = *(_OWORD *)((char *)v199 + 15);
              v190 = v195;
              v191 = v196;
              v105 = v176;
              closure #1 in _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v190, v99, v170, v97, (uint64_t)&v207, &v200);
              v176 = v105;
              outlined destroy of _IncrementalLayout_Child((uint64_t)&v190);
              v106 = v200;
            }
            else
            {
              v106 = 0.0;
            }
            v88 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            v87 = v182;
            outlined destroy of AccessibilityScrollableContext?((uint64_t)v202, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            outlined destroy of _IncrementalLayout_Child((uint64_t)&v207);
            if ((v211 & 1) == 0)
            {
LABEL_127:
              v120 = *(_QWORD *)(a3 + 104);
              v119 = *(double *)(a3 + 120);
              goto LABEL_128;
            }
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined destroy of _IncrementalLayout_Child((uint64_t)&v207);
            v123 = *(_QWORD *)a3;
            v124 = *(_QWORD *)(a3 + 8);
            v125 = *(_QWORD *)(a3 + 16);
            v126 = *(_BYTE *)(a3 + 24);
            v127 = *(_QWORD *)(a3 + 56);
            v172 = *(unsigned int *)(a3 + 28);
            v173 = v125;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            LOBYTE(v202[0]) = v126;
            v88 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            specialized HVGrid.lengthAndSpacing(children:predecessors:minorGeometry:)(v96, v95, v127, v123, v124, v173, v202[0]);
            v104 = v128;
            v106 = v129;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v87 = v182;
            if ((v211 & 1) == 0)
              goto LABEL_127;
          }
          v119 = *(double *)(a3 + 120) - v104;
          *(double *)(a3 + 120) = v119;
          v120 = *(_QWORD *)(a3 + 104);
          if (v120)
          {
            v119 = v119 - v106;
            *(double *)(a3 + 120) = v119;
          }
LABEL_128:
          if (v106 + v119 <= *(double *)(a3 + 64))
            goto LABEL_146;
          v130 = *(_QWORD *)(a3 + 40);
          v66 = __OFSUB__(v120, v130);
          v131 = v120 - v130;
          if (v66)
            goto LABEL_208;
          if (v212 == 1 && (v131 & 0x8000000000000000) == 0)
            *(_QWORD *)(a3 + 104) = v131;
LABEL_147:
          v144 = *(_QWORD *)(a3 + 144);
          if (*(_QWORD *)(a3 + 152))
            v145 = *(_QWORD **)(a3 + 152);
          else
            v145 = v88;
          *(_QWORD *)(a3 + 144) = v145;
          *(_QWORD *)(a3 + 152) = v144;
          v146 = swift_isUniquelyReferenced_nonNull_native();
          v92 = *(char **)(a3 + 144);
          if (!v146)
            goto LABEL_157;
          v93 = *((_QWORD *)v92 + 2);
          v147 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(a3 + 144) = v92;
          if ((v147 & 1) == 0)
          {
LABEL_152:
            v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v93, 1, v92);
            *(_QWORD *)(a3 + 144) = v92;
          }
LABEL_153:
          swift_arrayDestroy();
          if (v93)
          {
            v148 = *((_QWORD *)v92 + 2) - v93;
            if (v148 < 0)
              goto LABEL_228;
            memmove(v92 + 32, &v92[96 * v93 + 32], 96 * v148);
            *((_QWORD *)v92 + 2) = v148;
            v88 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          }
          *(_QWORD *)(a3 + 144) = v92;
          v85 = v178;
          v87 = v182;
LABEL_160:
          if (HIBYTE(v212) == 1)
          {
            swift_bridgeObjectRelease_n();
            v75 = v165;
            v79 = v168;
            v77 = v169;
            v41 = v175;
            goto LABEL_166;
          }
          if (__OFADD__(v86, 1))
            goto LABEL_201;
          ++v86;
          v87 -= 8;
          if (v181 == v86)
          {
            v79 = v168;
            swift_bridgeObjectRelease();
            swift_beginAccess();
            LOBYTE(v212) = 1;
            swift_beginAccess();
            v211 = 1;
            specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v79 < 1, (uint64_t *)a3, &v211, 0, (_BYTE *)&v212 + 1, &v212);
            swift_bridgeObjectRelease();
            v75 = v165;
            v77 = v169;
            v41 = v175;
            goto LABEL_166;
          }
        }
      }
      goto LABEL_219;
    }
    goto LABEL_26;
  }
  if (!v186)
    goto LABEL_26;
LABEL_171:
  *(_QWORD *)&v207 = v187;
  v151 = _ViewList_Node.estimatedCount(style:)();
  if (v189 == 1)
  {
LABEL_176:
    v152 = v151 - 1;
    if (__OFSUB__(v151, 1))
    {
LABEL_212:
      __break(1u);
      goto LABEL_213;
    }
    v153 = *(double *)(v185 + 56);
    v154 = round((v34 - v153) / v179);
    if ((~*(_QWORD *)&v154 & 0x7FF0000000000000) == 0)
    {
LABEL_213:
      __break(1u);
      goto LABEL_214;
    }
    if (v154 <= -9.22337204e18)
    {
LABEL_214:
      __break(1u);
      goto LABEL_215;
    }
    if (v154 >= 9.22337204e18)
    {
LABEL_215:
      __break(1u);
      goto LABEL_216;
    }
    v155 = v152 & ~(v152 >> 63);
    v156 = v155 * v189;
    if ((unsigned __int128)(v155 * (__int128)v189) >> 64 != (v155 * v189) >> 63)
    {
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
      goto LABEL_218;
    }
    if (v152 >= (uint64_t)v154)
      v152 = (uint64_t)v154;
    v157 = v152 & ~(v152 >> 63);
    v158 = v157 * v189;
    if ((unsigned __int128)(v157 * (__int128)v189) >> 64 != (v157 * v189) >> 63)
      goto LABEL_217;
    v159 = *(_QWORD *)(v185 + 40);
    v66 = __OFADD__(v159, v158);
    v160 = v159 + v158;
    if (v66)
    {
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
      goto LABEL_220;
    }
    v161 = v153 + v179 * (double)v157;
    v162 = v161 + 0.01 < 0.0 || v161 + -0.01 > v34;
    if (!v162)
    {
      v163 = v160 & ~(v160 >> 63);
      if (v156 >= v163)
        v42 = v163;
      else
        v42 = v156;
      goto LABEL_52;
    }
LABEL_26:
    *(_QWORD *)&v207 = v187;
    v56 = _ViewList_Node.estimatedCount(style:)();
    v57 = v189;
    if (v189 == 1)
      goto LABEL_31;
    if (v189)
    {
      if (v56 != 0x8000000000000000 || v189 != -1)
      {
        v56 /= v189;
LABEL_31:
        v58 = *(double *)(v41 + 40);
        v59 = v34 / v58;
        v162 = v58 <= 0.0;
        v60 = 0.0;
        if (v162)
          v59 = 0.0;
        if (v59 >= 0.0)
          v60 = v59;
        if (v59 >= 1.0)
          v60 = 1.0;
        if (__OFSUB__(v56, 1))
        {
          __break(1u);
        }
        else
        {
          v61 = (v56 - 1) & ~((v56 - 1) >> 63);
          v42 = v61 * v189;
          if ((unsigned __int128)(v61 * (__int128)v189) >> 64 == (v61 * v189) >> 63)
          {
            v62 = v60 * (double)v56 + 0.5;
            if ((~*(_QWORD *)&v62 & 0x7FF0000000000000) != 0)
            {
              if (v62 > -9.22337204e18)
              {
                if (v62 < 9.22337204e18)
                {
                  v63 = (uint64_t)v62 * v189;
                  if ((unsigned __int128)((uint64_t)v62 * (__int128)v189) >> 64 == v63 >> 63)
                  {
                    if (v63 < 0)
                    {
                      if ((v42 & 0x8000000000000000) == 0)
                      {
                        outlined release of PlacementProperties<LazyHGridLayout>(v39);
                        return 0;
                      }
                    }
                    else
                    {
                      if (v42 >= v63)
                        v42 = (uint64_t)v62 * v189;
                      if (v42 >= 1 && v186)
                      {
                        EstimationState.average.getter(*(_QWORD *)(v185 + 104), *(_QWORD *)(v185 + 112));
                        EdgeInsets.originOffset.getter();
                        v65 = v64;
                        outlined release of PlacementProperties<LazyHGridLayout>(v39);
                        if (v42 < v57)
                          return v42;
                        if (v65 <= 0.0)
                          return v42;
                        v66 = __OFSUB__(v42, v57);
                        v42 -= v57;
                        if (!v66)
                          return v42;
                        goto LABEL_202;
                      }
                    }
LABEL_52:
                    outlined release of PlacementProperties<LazyHGridLayout>(v39);
                    return v42;
                  }
LABEL_197:
                  __break(1u);
LABEL_198:
                  outlined release of PlacementProperties<LazyHGridLayout>(v39);
                  return *(_QWORD *)(a3 + 104);
                }
LABEL_196:
                __break(1u);
                goto LABEL_197;
              }
LABEL_195:
              __break(1u);
              goto LABEL_196;
            }
LABEL_194:
            __break(1u);
            goto LABEL_195;
          }
        }
        __break(1u);
        goto LABEL_194;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
    goto LABEL_212;
  }
  if (!v189)
  {
LABEL_220:
    __break(1u);
    goto LABEL_221;
  }
  if (v151 != 0x8000000000000000 || v189 != -1)
  {
    v151 /= v189;
    goto LABEL_176;
  }
LABEL_225:
  __break(1u);
LABEL_226:
  __break(1u);
LABEL_227:
  __break(1u);
LABEL_228:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  __int128 *Value;
  __int128 v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  char v25;
  double v26;
  _BOOL4 v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  double v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  BOOL v52;
  uint64_t result;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  double v62;
  char **v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  int v79;
  char *v80;
  int64_t v81;
  char v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  double v91;
  char v92;
  uint64_t v93;
  double v94;
  char *v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  double v102;
  char v103;
  uint64_t v104;
  double v105;
  double v106;
  uint64_t v107;
  double v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  int isUniquelyReferenced_nonNull_native;
  _QWORD *v128;
  size_t v129;
  _BOOL8 v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  BOOL v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  double v156;
  __int128 *v157;
  char **v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  double v167;
  uint64_t v168;
  _BOOL4 v169;
  unint64_t v170;
  uint64_t v171;
  double v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  _OWORD v177[5];
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  _OWORD v182[2];
  double v183;
  int v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  _OWORD v189[2];
  double v190;
  int v191;
  uint64_t v192;
  char v193;
  double v194;
  int v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  char v199;
  char v200;
  char v201;
  __int16 v202;
  char v203[17];

  v168 = a4;
  v171 = a1;
  v8 = type metadata accessor for FloatingPointRoundingRule();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v144 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 216);
  v14 = *(_QWORD *)(a2 + 224);
  v15 = 0.0;
  if (*(_DWORD *)(a2 + 12) != *MEMORY[0x1E0CFED28])
  {
    Value = (__int128 *)AGGraphGetValue();
    v17 = Value[1];
    v197 = *Value;
    v198 = v17;
    v15 = MEMORY[0x18D75BE3C]();
  }
  v18 = *(_QWORD *)a5;
  v20 = *(double *)(a5 + 8);
  v19 = *(double *)(a5 + 16);
  v21 = *(_QWORD *)(a3 + 112);
  v22 = *(_QWORD *)(v21 + 16);
  if (v22)
  {
    v24 = COERCE_DOUBLE(EstimationState.average.getter(*(_QWORD *)(a3 + 112), *(_QWORD *)(a3 + 120)));
    if ((v25 & 1) != 0)
      v24 = 0.0;
    v26 = v23 + v24;
    v22 = *(_QWORD *)(v21 + 16);
  }
  else
  {
    v26 = 32.0;
  }
  v170 = 2 * v18;
  v167 = v26;
  v28 = v26 <= 0.0 || v22 == 0;
  v169 = v28;
  *(_QWORD *)&v197 = *(_QWORD *)a2;
  DWORD2(v197) = *(_DWORD *)(a2 + 8);
  v29 = *(double *)(a5 + 32);
  v172 = *(double *)(a5 + 24);
  swift_getKeyPath();
  SizeAndSpacingContext.subscript.getter();
  swift_release();
  if ((*(_BYTE *)(a3 + 24) & 1) != 0
    || v18 != *(_QWORD *)a3
    || v20 != *(double *)(a3 + 8)
    || v19 != *(double *)(a3 + 16)
    || (*(_BYTE *)(a5 + 40) & 1) != 0)
  {
    goto LABEL_15;
  }
  v159 = v18;
  v160 = v14;
  v161 = v13;
  v40 = v194;
  v38 = *(_QWORD *)(a3 + 48);
  v41 = *(_QWORD *)(a3 + 64);
  v42 = *MEMORY[0x1E0DED4F0];
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  v43(v12, v42, v8);
  *(_QWORD *)&v197 = v41;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v12, v40);
  v44 = *(double *)&v197;
  v45 = *(void (**)(char *, uint64_t))(v9 + 8);
  v45(v12, v8);
  v163 = a3;
  v46 = *(_QWORD *)(a3 + 72);
  v43(v12, v42, v8);
  *(_QWORD *)&v197 = v46;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v12, v40);
  v47 = *(double *)&v197;
  v45(v12, v8);
  if (v44 > v47)
    goto LABEL_204;
  a3 = v163;
  v18 = v159;
  if (v44 <= v172
    && (v29 <= v47 || v172 <= v47
                   && (*(_BYTE *)(v163 + 40) & 1) == 0
                   && *(_QWORD *)(v163 + 32) == *(_QWORD *)(v163 + 56)))
  {
    return v38;
  }
  v48 = *(double *)(v163 + 72);
  v49 = v172 - v48;
  v50 = v15 + v15;
  if (v172 - v48 + 0.01 > 0.0 && v49 < v50)
    return *(_QWORD *)(v163 + 56);
  v54 = *(double *)(v163 + 64);
  v55 = v172 - v54;
  if (v172 - v54 + 0.01 > 0.0 && v55 < v50)
    return *(_QWORD *)(v163 + 48);
  if (v55 >= 0.0)
  {
    v56 = v172 - v48;
  }
  else
  {
    v56 = v172 - v54;
    if (v49 < 0.0)
    {
      if (v55 > v49)
        v56 = v172 - v54;
      else
        v56 = v172 - v48;
    }
  }
  if (v56 >= 0.0 || v15 * 3.0 <= -v56)
  {
    if (!v169)
    {
LABEL_172:
      *(_QWORD *)&v197 = v170;
      v131 = _ViewList_Node.estimatedCount(style:)();
      if (v18 != 1)
      {
        if (!v18)
        {
LABEL_225:
          __break(1u);
          goto LABEL_226;
        }
        if (v131 == 0x8000000000000000 && v18 == -1)
          goto LABEL_230;
        v131 /= v18;
      }
      v132 = v131 - 1;
      if (__OFSUB__(v131, 1))
        goto LABEL_217;
      v133 = *(double *)(a3 + 64);
      v134 = round((v172 - v133) / v167);
      if ((~*(_QWORD *)&v134 & 0x7FF0000000000000) == 0)
      {
LABEL_218:
        __break(1u);
        goto LABEL_219;
      }
      if (v134 <= -9.22337204e18)
      {
LABEL_219:
        __break(1u);
        goto LABEL_220;
      }
      if (v134 >= 9.22337204e18)
      {
LABEL_220:
        __break(1u);
        goto LABEL_221;
      }
      v135 = v132 & ~(v132 >> 63);
      v136 = v135 * v18;
      if ((unsigned __int128)(v135 * (__int128)v18) >> 64 != (v135 * v18) >> 63)
      {
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
        goto LABEL_223;
      }
      if (v132 >= (uint64_t)v134)
        v132 = (uint64_t)v134;
      v137 = v132 & ~(v132 >> 63);
      v138 = v137 * v18;
      if ((unsigned __int128)(v137 * (__int128)v18) >> 64 != (v137 * v18) >> 63)
        goto LABEL_222;
      v139 = *(_QWORD *)(a3 + 48);
      v52 = __OFADD__(v139, v138);
      v140 = v139 + v138;
      if (v52)
      {
LABEL_223:
        __break(1u);
LABEL_224:
        __break(1u);
        goto LABEL_225;
      }
      v141 = v133 + v167 * (double)v137;
      v142 = v141 + 0.01 < 0.0 || v141 + -0.01 > v172;
      if (!v142)
      {
        v143 = v140 & ~(v140 >> 63);
        if (v136 >= v143)
          return v143;
        else
          return v136;
      }
    }
LABEL_15:
    *(_QWORD *)&v197 = v170;
    v30 = _ViewList_Node.estimatedCount(style:)();
    if (v18 != 1)
    {
      if (!v18)
        goto LABEL_200;
      if (v30 == 0x8000000000000000 && v18 == -1)
      {
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
LABEL_207:
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
        goto LABEL_218;
      }
      v30 /= v18;
    }
    v31 = *(double *)(a2 + 32);
    v32 = v172 / v31;
    v142 = v31 <= 0.0;
    v33 = 0.0;
    if (v142)
      v32 = 0.0;
    if (v32 >= 0.0)
      v33 = v32;
    if (v32 >= 1.0)
      v33 = 1.0;
    if (__OFSUB__(v30, 1))
    {
      __break(1u);
    }
    else
    {
      v34 = (v30 - 1) & ~((v30 - 1) >> 63);
      v35 = v34 * v18;
      if ((unsigned __int128)(v34 * (__int128)v18) >> 64 == (v34 * v18) >> 63)
      {
        v36 = v33 * (double)v30 + 0.5;
        if ((~*(_QWORD *)&v36 & 0x7FF0000000000000) != 0)
        {
          if (v36 > -9.22337204e18)
          {
            if (v36 < 9.22337204e18)
            {
              v37 = (uint64_t)v36 * v18;
              if ((unsigned __int128)((uint64_t)v36 * (__int128)v18) >> 64 == v37 >> 63)
              {
                if (v37 < 0)
                  return v35 & (v35 >> 63);
                if (v35 >= v37)
                  v38 = (uint64_t)v36 * v18;
                else
                  v38 = v35;
                v39 = v169;
                if (v38 < 1)
                  v39 = 1;
                if ((v39 & 1) != 0)
                  return v38;
                EstimationState.average.getter(*(_QWORD *)(a3 + 112), *(_QWORD *)(a3 + 120));
                EdgeInsets.originOffset.getter();
                if (v38 < v18)
                  return v38;
                if (v51 <= 0.0)
                  return v38;
                v52 = __OFSUB__(v38, v18);
                v38 -= v18;
                if (!v52)
                  return v38;
                goto LABEL_203;
              }
              goto LABEL_199;
            }
LABEL_198:
            __break(1u);
LABEL_199:
            __break(1u);
LABEL_200:
            __break(1u);
LABEL_201:
            __break(1u);
            goto LABEL_202;
          }
LABEL_197:
          __break(1u);
          goto LABEL_198;
        }
LABEL_196:
        __break(1u);
        goto LABEL_197;
      }
    }
    __break(1u);
    goto LABEL_196;
  }
  if (v169)
    goto LABEL_15;
  v58 = *(_QWORD *)(v163 + 48);
  v57 = *(_QWORD *)(v163 + 56);
  v59 = v57 - v58;
  if (__OFSUB__(v57, v58))
  {
LABEL_226:
    __break(1u);
    goto LABEL_227;
  }
  v60 = ceil(v15 / v167);
  if ((~*(_QWORD *)&v60 & 0x7FF0000000000000) == 0)
  {
LABEL_227:
    __break(1u);
    goto LABEL_228;
  }
  if (v60 <= -9.22337204e18)
  {
LABEL_228:
    __break(1u);
    goto LABEL_229;
  }
  if (v60 < 9.22337204e18)
  {
    v162 = 0;
    if (v59 <= (uint64_t)v60)
      v59 = (uint64_t)v60;
    v147 = v59;
    if (v55 >= 0.0)
      v61 = v57;
    else
      v61 = v58;
    if (v55 >= 0.0)
      v54 = v48;
    v145 = v54;
    v62 = v172 + 0.01;
    v63 = (char **)(v168 + 136);
    v150 = &v196;
    v157 = &v198;
    v64 = 2;
    v65 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v146 = v61;
    v158 = (char **)(v168 + 136);
    while (1)
    {
      v66 = v64 * v147;
      if ((unsigned __int128)(v64 * (__int128)v147) >> 64 != (v64 * v147) >> 63)
        goto LABEL_211;
      v148 = v64;
      v52 = __OFSUB__(v61, v66);
      v67 = v61 - v66;
      if (v52)
        goto LABEL_212;
      v149 = v67;
      v203[0] = 0;
      v68 = specialized IncrementalStack<>.collectBackwards(from:to:children:style:atEnd:)(v67 & ~(v67 >> 63), v61, v171, v170, v203);
      v69 = v168;
      v165 = *(_QWORD *)(v68 + 16);
      if (v165)
        break;
      swift_bridgeObjectRelease();
LABEL_167:
      if (*(double *)(v69 + 112) <= v62)
        return *(_QWORD *)(v69 + 96);
      if (v149 > 0)
      {
        v64 = 2 * v148;
        v61 = v146;
        if (v148 < 8)
          continue;
      }
      goto LABEL_172;
    }
    v164 = v68;
    v70 = v203[0];
    specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(v61, 0, 1, 1, v145);
    v202 = 0;
    v201 = 0;
    if ((v70 & 1) == 0)
      goto LABEL_90;
    v71 = *(_QWORD *)(v69 + 32);
    v72 = *(_QWORD *)(v69 + 96);
    v52 = __OFSUB__(v72, v71);
    v73 = v72 - v71;
    if (!v52)
    {
      *(_QWORD *)(v69 + 96) = v73;
      v201 = 1;
LABEL_90:
      v74 = v164;
      swift_bridgeObjectRetain();
      swift_beginAccess();
      swift_beginAccess();
      swift_beginAccess();
      v75 = 0;
      v76 = 8 * v165 + 24;
      while (1)
      {
        v166 = v76;
        *v63 = *(char **)(v74 + v76);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v75 == 1)
          break;
        if (v75)
        {
          v201 = 1;
          v95 = *v63;
          if (!*((_QWORD *)*v63 + 2))
          {
LABEL_119:
            v65 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            goto LABEL_161;
          }
          v96 = *(_QWORD *)(v69 + 144);
          if (!v96)
            goto LABEL_232;
          if (!*(_QWORD *)(v96 + 16))
            goto LABEL_206;
          outlined init with copy of _IncrementalLayout_Child(v96 + 32, (uint64_t)&v197);
          if ((v199 & 1) != 0 || v200 == 1)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined destroy of _IncrementalLayout_Child((uint64_t)&v197);
            outlined init with copy of _IncrementalLayout_Child(v96 + 32, (uint64_t)&v197);
            swift_bridgeObjectRelease();
            v97 = *(_BYTE *)(v69 + 24);
            _ProposedSize.init(_:in:by:)();
            if (!*((_QWORD *)v95 + 2))
              goto LABEL_207;
            v156 = *(double *)&v173;
            v155 = BYTE8(v173);
            v154 = v174;
            v153 = BYTE8(v174);
            outlined init with copy of _IncrementalLayout_Child((uint64_t)(v95 + 32), (uint64_t)&v194);
            swift_bridgeObjectRelease();
            v152 = *(_QWORD *)(v69 + 8);
            v151 = *(unsigned __int8 *)(v69 + 16);
            v98 = IncrementalLayoutViewCache.item(data:)((uint64_t)v157);
            v99 = *(_QWORD *)(v98 + 32);
            swift_bridgeObjectRetain();
            v100 = *(_QWORD *)(v98 + 40);
            swift_release();
            *(_QWORD *)&v185 = v99;
            *((_QWORD *)&v185 + 1) = v100;
            _ViewOutputs.layoutComputer.getter();
            swift_bridgeObjectRelease();
            LayoutProxy.init(context:layoutComputer:)();
            v190 = *(double *)&v178;
            v191 = DWORD2(v178);
            *(double *)&v185 = v156;
            BYTE8(v185) = v155;
            *(_QWORD *)&v186 = v154;
            BYTE8(v186) = v153;
            LayoutProxy.lengthThatFits(_:in:)();
            v102 = v101;
            outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v194, (uint64_t)&v185, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            if ((_QWORD)v185)
            {
              v180 = v187;
              v181 = v188;
              v182[0] = v189[0];
              *(_OWORD *)((char *)v182 + 15) = *(_OWORD *)((char *)v189 + 15);
              v178 = v185;
              v179 = v186;
              v103 = v97;
              v104 = v162;
              closure #1 in _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v178, v152, v151, v103, (uint64_t)&v197, &v190);
              v162 = v104;
              outlined destroy of _IncrementalLayout_Child((uint64_t)&v178);
              v105 = v190;
            }
            else
            {
              v105 = 0.0;
            }
            v63 = v158;
            v65 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            v74 = v164;
            outlined destroy of AccessibilityScrollableContext?((uint64_t)&v194, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            outlined destroy of _IncrementalLayout_Child((uint64_t)&v197);
            v69 = v168;
            if ((v201 & 1) != 0)
              goto LABEL_126;
LABEL_145:
            v109 = *(_QWORD *)(v69 + 96);
            v108 = *(double *)(v69 + 112);
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined destroy of _IncrementalLayout_Child((uint64_t)&v197);
            if (!*(_QWORD *)(v96 + 16))
              goto LABEL_213;
            v152 = *(_QWORD *)(v69 + 8);
            v151 = *(unsigned __int8 *)(v69 + 16);
            outlined init with copy of _IncrementalLayout_Child(v96 + 32, (uint64_t)&v194);
            _ProposedSize.init(_:in:by:)();
            if (!*((_QWORD *)v95 + 2))
              goto LABEL_216;
            v156 = v190;
            v155 = v191;
            v154 = v192;
            v116 = v193;
            outlined init with copy of _IncrementalLayout_Child((uint64_t)(v95 + 32), (uint64_t)&v185);
            v153 = v195;
            v117 = IncrementalLayoutViewCache.item(data:)((uint64_t)v150);
            v118 = *(_QWORD *)(v117 + 32);
            swift_bridgeObjectRetain();
            v119 = *(_QWORD *)(v117 + 40);
            swift_release();
            *(_QWORD *)&v178 = v118;
            *((_QWORD *)&v178 + 1) = v119;
            _ViewOutputs.layoutComputer.getter();
            swift_bridgeObjectRelease();
            LayoutProxy.init(context:layoutComputer:)();
            v183 = *(double *)&v173;
            v184 = DWORD2(v173);
            *(double *)&v178 = v156;
            BYTE8(v178) = v155;
            *(_QWORD *)&v179 = v154;
            BYTE8(v179) = v116;
            LayoutProxy.lengthThatFits(_:in:)();
            v102 = v120;
            outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v185, (uint64_t)&v178, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            if ((_QWORD)v178)
            {
              v175 = v180;
              v176 = v181;
              v177[0] = v182[0];
              *(_OWORD *)((char *)v177 + 15) = *(_OWORD *)((char *)v182 + 15);
              v173 = v178;
              v174 = v179;
              v121 = v162;
              closure #1 in _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v173, v152, v151, 0, (uint64_t)&v194, &v183);
              v162 = v121;
              outlined destroy of _IncrementalLayout_Child((uint64_t)&v173);
              v105 = v183;
            }
            else
            {
              v105 = 0.0;
            }
            a3 = v163;
            v74 = v164;
            outlined destroy of AccessibilityScrollableContext?((uint64_t)&v185, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            outlined destroy of _IncrementalLayout_Child((uint64_t)&v194);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v69 = v168;
            v63 = v158;
            v65 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if ((v201 & 1) == 0)
              goto LABEL_145;
LABEL_126:
            v108 = *(double *)(v69 + 112) - v102;
            *(double *)(v69 + 112) = v108;
            v109 = *(_QWORD *)(v69 + 96);
            if (v109)
            {
              v108 = v108 - v105;
              *(double *)(v69 + 112) = v108;
            }
          }
          if (v105 + v108 > *(double *)(v69 + 56))
          {
            v124 = *(_QWORD *)(v69 + 32);
            v52 = __OFSUB__(v109, v124);
            v123 = v109 - v124;
            if (v52)
              goto LABEL_210;
LABEL_148:
            if (v202 == 1 && (v123 & 0x8000000000000000) == 0)
              *(_QWORD *)(v69 + 96) = v123;
LABEL_152:
            v125 = *(_QWORD *)(v69 + 136);
            if (*(_QWORD *)(v69 + 144))
              v126 = *(_QWORD **)(v69 + 144);
            else
              v126 = v65;
            *(_QWORD *)(v69 + 136) = v126;
            *(_QWORD *)(v69 + 144) = v125;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v80 = *(char **)(v69 + 136);
            if (isUniquelyReferenced_nonNull_native)
            {
              specialized Array.replaceSubrange<A>(_:with:)(0, *((_QWORD *)v80 + 2));
              goto LABEL_161;
            }
            goto LABEL_157;
          }
LABEL_151:
          HIBYTE(v202) = 1;
          goto LABEL_152;
        }
        v77 = *(_QWORD *)(v69 + 136);
        if (*(_QWORD *)(v69 + 144))
          v78 = *(_QWORD **)(v69 + 144);
        else
          v78 = v65;
        *(_QWORD *)(v69 + 136) = v78;
        *(_QWORD *)(v69 + 144) = v77;
        v79 = swift_isUniquelyReferenced_nonNull_native();
        v80 = *(char **)(v69 + 136);
        if (v79)
        {
          v81 = *((_QWORD *)v80 + 2);
          v82 = swift_isUniquelyReferenced_nonNull_native();
          *v63 = v80;
          if ((v82 & 1) == 0)
          {
            v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v81, 1, v80);
            *v63 = v80;
          }
          swift_arrayDestroy();
          if (v81)
          {
            v83 = *((_QWORD *)v80 + 2) - v81;
            if (v83 < 0)
              goto LABEL_233;
            memmove(v80 + 32, &v80[96 * v81 + 32], 96 * v83);
            *((_QWORD *)v80 + 2) = v83;
            v69 = v168;
          }
          *v63 = v80;
          v65 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          goto LABEL_160;
        }
LABEL_157:
        v128 = v65;
        if (*((_QWORD *)v80 + 3) >= 2uLL)
        {
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_IncrementalLayout_Child>, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v128 = (_QWORD *)swift_allocObject();
          v129 = _swift_stdlib_malloc_size_0(v128);
          v128[2] = 0;
          v128[3] = 2 * ((uint64_t)(v129 - 32) / 96);
        }
        *v63 = (char *)v128;
        swift_bridgeObjectRelease();
LABEL_160:
        v74 = v164;
LABEL_161:
        if (HIBYTE(v202) == 1)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_167;
        }
        if (__OFADD__(v75, 1))
          goto LABEL_201;
        ++v75;
        v76 = v166 - 8;
        if (v165 == v75)
        {
          v130 = v149 < 1;
          swift_bridgeObjectRelease();
          swift_beginAccess();
          LOBYTE(v202) = 1;
          swift_beginAccess();
          v201 = 1;
          specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v130, (uint64_t *)v69, &v201, 0, (_BYTE *)&v202 + 1, &v202);
          swift_bridgeObjectRelease();
          goto LABEL_167;
        }
      }
      LOBYTE(v202) = 1;
      v84 = *v63;
      if (!*((_QWORD *)*v63 + 2))
        goto LABEL_119;
      v85 = *(_QWORD *)(v69 + 144);
      if (!v85)
        goto LABEL_231;
      if (!*(_QWORD *)(v85 + 16))
        goto LABEL_205;
      outlined init with copy of _IncrementalLayout_Child(v85 + 32, (uint64_t)&v197);
      if ((v199 & 1) != 0 || v200 == 1)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined destroy of _IncrementalLayout_Child((uint64_t)&v197);
        outlined init with copy of _IncrementalLayout_Child(v85 + 32, (uint64_t)&v197);
        swift_bridgeObjectRelease();
        v86 = *(_BYTE *)(v69 + 24);
        _ProposedSize.init(_:in:by:)();
        if (!*((_QWORD *)v84 + 2))
          goto LABEL_208;
        v156 = *(double *)&v173;
        v155 = BYTE8(v173);
        v154 = v174;
        v153 = BYTE8(v174);
        outlined init with copy of _IncrementalLayout_Child((uint64_t)(v84 + 32), (uint64_t)&v194);
        swift_bridgeObjectRelease();
        v152 = *(_QWORD *)(v69 + 8);
        v151 = *(unsigned __int8 *)(v69 + 16);
        v87 = IncrementalLayoutViewCache.item(data:)((uint64_t)v157);
        v88 = *(_QWORD *)(v87 + 32);
        swift_bridgeObjectRetain();
        v89 = *(_QWORD *)(v87 + 40);
        swift_release();
        *(_QWORD *)&v185 = v88;
        *((_QWORD *)&v185 + 1) = v89;
        _ViewOutputs.layoutComputer.getter();
        swift_bridgeObjectRelease();
        LayoutProxy.init(context:layoutComputer:)();
        v190 = *(double *)&v178;
        v191 = DWORD2(v178);
        *(double *)&v185 = v156;
        BYTE8(v185) = v155;
        *(_QWORD *)&v186 = v154;
        BYTE8(v186) = v153;
        LayoutProxy.lengthThatFits(_:in:)();
        v91 = v90;
        outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v194, (uint64_t)&v185, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        if ((_QWORD)v185)
        {
          v180 = v187;
          v181 = v188;
          v182[0] = v189[0];
          *(_OWORD *)((char *)v182 + 15) = *(_OWORD *)((char *)v189 + 15);
          v178 = v185;
          v179 = v186;
          v92 = v86;
          v93 = v162;
          closure #1 in _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v178, v152, v151, v92, (uint64_t)&v197, &v190);
          v162 = v93;
          outlined destroy of _IncrementalLayout_Child((uint64_t)&v178);
          v94 = v190;
        }
        else
        {
          v94 = 0.0;
        }
        v63 = v158;
        v65 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v74 = v164;
        outlined destroy of AccessibilityScrollableContext?((uint64_t)&v194, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        outlined destroy of _IncrementalLayout_Child((uint64_t)&v197);
        v69 = v168;
        if ((v201 & 1) != 0)
        {
LABEL_122:
          v106 = *(double *)(v69 + 112) - v91;
          *(double *)(v69 + 112) = v106;
          v107 = *(_QWORD *)(v69 + 96);
          if (v107)
          {
            v106 = v106 - v94;
            *(double *)(v69 + 112) = v106;
          }
LABEL_139:
          if (v94 + v106 > *(double *)(v69 + 56))
          {
            v122 = *(_QWORD *)(v69 + 32);
            v52 = __OFSUB__(v107, v122);
            v123 = v107 - v122;
            if (v52)
              goto LABEL_209;
            goto LABEL_148;
          }
          goto LABEL_151;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined destroy of _IncrementalLayout_Child((uint64_t)&v197);
        if (!*(_QWORD *)(v85 + 16))
          goto LABEL_214;
        v152 = *(_QWORD *)(v69 + 8);
        v151 = *(unsigned __int8 *)(v69 + 16);
        outlined init with copy of _IncrementalLayout_Child(v85 + 32, (uint64_t)&v194);
        _ProposedSize.init(_:in:by:)();
        if (!*((_QWORD *)v84 + 2))
          goto LABEL_215;
        v156 = v190;
        v155 = v191;
        v154 = v192;
        v110 = v193;
        outlined init with copy of _IncrementalLayout_Child((uint64_t)(v84 + 32), (uint64_t)&v185);
        v153 = v195;
        v111 = IncrementalLayoutViewCache.item(data:)((uint64_t)v150);
        v112 = *(_QWORD *)(v111 + 32);
        swift_bridgeObjectRetain();
        v113 = *(_QWORD *)(v111 + 40);
        swift_release();
        *(_QWORD *)&v178 = v112;
        *((_QWORD *)&v178 + 1) = v113;
        _ViewOutputs.layoutComputer.getter();
        swift_bridgeObjectRelease();
        LayoutProxy.init(context:layoutComputer:)();
        v183 = *(double *)&v173;
        v184 = DWORD2(v173);
        *(double *)&v178 = v156;
        BYTE8(v178) = v155;
        *(_QWORD *)&v179 = v154;
        BYTE8(v179) = v110;
        LayoutProxy.lengthThatFits(_:in:)();
        v91 = v114;
        outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v185, (uint64_t)&v178, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        if ((_QWORD)v178)
        {
          v175 = v180;
          v176 = v181;
          v177[0] = v182[0];
          *(_OWORD *)((char *)v177 + 15) = *(_OWORD *)((char *)v182 + 15);
          v173 = v178;
          v174 = v179;
          v115 = v162;
          closure #1 in _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v173, v152, v151, 0, (uint64_t)&v194, &v183);
          v162 = v115;
          outlined destroy of _IncrementalLayout_Child((uint64_t)&v173);
          v94 = v183;
        }
        else
        {
          v94 = 0.0;
        }
        a3 = v163;
        v74 = v164;
        outlined destroy of AccessibilityScrollableContext?((uint64_t)&v185, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        outlined destroy of _IncrementalLayout_Child((uint64_t)&v194);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v69 = v168;
        v63 = v158;
        v65 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        if ((v201 & 1) != 0)
          goto LABEL_122;
      }
      v107 = *(_QWORD *)(v69 + 96);
      v106 = *(double *)(v69 + 112);
      goto LABEL_139;
    }
    goto LABEL_224;
  }
LABEL_229:
  __break(1u);
LABEL_230:
  __break(1u);
LABEL_231:
  __break(1u);
LABEL_232:
  __break(1u);
LABEL_233:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #2 in IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;

  lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
  {
    if (one-time initialization token for log != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.LazyLayoutPrefetch.log);
    outlined init with copy of _IncrementalLayout_Child(a1, (uint64_t)&v20);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc();
      v18 = swift_slowAlloc();
      v19 = v18;
      *(_DWORD *)v13 = 136446466;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x8000000187BD5BD0, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2082;
      _ViewList_ID.canonicalID.getter();
      v14 = _ViewList_ID.Canonical.description.getter();
      v16 = v15;
      swift_release();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of _IncrementalLayout_Child((uint64_t)&v20);
      _os_log_impl(&dword_186E48000, v11, v12, "%{public}s prefetch %{public}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v18, -1, -1);
      MEMORY[0x18D760108](v13, -1, -1);

    }
    else
    {

      outlined destroy of _IncrementalLayout_Child((uint64_t)&v20);
    }
  }
  IncrementalLayoutViewCache.item(data:)(a1 + 16);
  v20 = a2;
  v21 = a3 & 1;
  v22 = a4;
  v23 = a5 & 1;
  IncrementalLayoutCacheItem.beginPrefetching(at:)((uint64_t)&v20);
  return swift_release();
}

uint64_t specialized closure #2 in IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, unint64_t a7)
{
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;

  lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
  {
    if (one-time initialization token for log != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.LazyLayoutPrefetch.log);
    outlined init with copy of _IncrementalLayout_Child(a1, (uint64_t)&v28);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v25 = a4;
      v17 = swift_slowAlloc();
      v26 = a5;
      v18 = swift_slowAlloc();
      v27 = v18;
      *(_DWORD *)v17 = 136446466;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a6, a7, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2082;
      _ViewList_ID.canonicalID.getter();
      v19 = _ViewList_ID.Canonical.description.getter();
      v21 = v20;
      swift_release();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of _IncrementalLayout_Child((uint64_t)&v28);
      _os_log_impl(&dword_186E48000, v15, v16, "%{public}s prefetch %{public}s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      v22 = v18;
      a5 = v26;
      MEMORY[0x18D760108](v22, -1, -1);
      v23 = v17;
      a4 = v25;
      MEMORY[0x18D760108](v23, -1, -1);

    }
    else
    {

      outlined destroy of _IncrementalLayout_Child((uint64_t)&v28);
    }
  }
  IncrementalLayoutViewCache.item(data:)(a1 + 16);
  v28 = a2;
  v29 = a3 & 1;
  v30 = a4;
  v31 = a5 & 1;
  IncrementalLayoutCacheItem.beginPrefetching(at:)((uint64_t)&v28);
  return swift_release();
}

uint64_t specialized closure #1 in IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:)(uint64_t result, _BYTE *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[2];

  v6 = result;
  if ((*(_BYTE *)(result + 93) & 1) != 0 || (*(_BYTE *)(result + 94) & 1) != 0)
  {
    if (!*(_QWORD *)(*a3 + 16))
    {
      v7 = result + 16;
      lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
      if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
      {
        if (one-time initialization token for log != -1)
          swift_once();
        v8 = type metadata accessor for Logger();
        __swift_project_value_buffer(v8, (uint64_t)static Log.LazyLayoutPrefetch.log);
        outlined init with copy of _IncrementalLayout_Child(v6, (uint64_t)&v35);
        v9 = Logger.logObject.getter();
        v10 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v9, v10))
        {
          v11 = swift_slowAlloc();
          v12 = swift_slowAlloc();
          v30 = v12;
          *(_DWORD *)v11 = 136446466;
          v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x8000000187BD5BD0, &v30);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v11 + 12) = 2082;
          _ViewList_ID.canonicalID.getter();
          v13 = _ViewList_ID.Canonical.description.getter();
          v15 = v14;
          swift_release();
          v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v30);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of _IncrementalLayout_Child((uint64_t)&v35);
          _os_log_impl(&dword_186E48000, v9, v10, "%{public}s prefetch %{public}s", (uint8_t *)v11, 0x16u);
          swift_arrayDestroy();
          v16 = v12;
          v7 = v6 + 16;
          MEMORY[0x18D760108](v16, -1, -1);
          MEMORY[0x18D760108](v11, -1, -1);

        }
        else
        {

          outlined destroy of _IncrementalLayout_Child((uint64_t)&v35);
        }
      }
      _ProposedSize.init(_:in:by:)();
      v26 = v35;
      v27 = BYTE8(v35);
      v28 = v36;
      v29 = BYTE8(v36);
      IncrementalLayoutViewCache.item(data:)(v7);
      v31 = v26;
      LOBYTE(v32) = v27;
      v33 = v28;
      v34 = v29;
      IncrementalLayoutCacheItem.beginPrefetching(at:)((uint64_t)&v31);
      result = swift_release();
    }
LABEL_17:
    *a2 = 1;
    return result;
  }
  outlined init with copy of _IncrementalLayout_Child(result, (uint64_t)&v35);
  v18 = *a3;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v18;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1, (char *)v18);
    v18 = result;
    *a3 = result;
  }
  v20 = *(_QWORD *)(v18 + 16);
  v19 = *(_QWORD *)(v18 + 24);
  if (v20 >= v19 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, (char *)v18);
    v18 = result;
    *a3 = result;
  }
  *(_QWORD *)(v18 + 16) = v20 + 1;
  v21 = (_OWORD *)(v18 + 96 * v20);
  v22 = v36;
  v21[2] = v35;
  v21[3] = v22;
  v23 = v37;
  v24 = v38;
  v25 = v39[0];
  *(_OWORD *)((char *)v21 + 111) = *(_OWORD *)((char *)v39 + 15);
  v21[5] = v24;
  v21[6] = v25;
  v21[4] = v23;
  if (*(_QWORD *)(*a3 + 16) == a4)
    goto LABEL_17;
  return result;
}

uint64_t specialized closure #1 in IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:)(uint64_t result, _BYTE *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];

  v11 = result;
  if ((*(_BYTE *)(result + 93) & 1) != 0 || *(_BYTE *)(result + 94) == 1)
  {
    if (!*(_QWORD *)(*a3 + 16))
    {
      v12 = result + 16;
      lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
      if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
      {
        if (one-time initialization token for log != -1)
          swift_once();
        v13 = type metadata accessor for Logger();
        __swift_project_value_buffer(v13, (uint64_t)static Log.LazyLayoutPrefetch.log);
        outlined init with copy of _IncrementalLayout_Child(v11, (uint64_t)&v40);
        v14 = Logger.logObject.getter();
        v15 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v14, v15))
        {
          v16 = swift_slowAlloc();
          v17 = swift_slowAlloc();
          v35 = v17;
          *(_DWORD *)v16 = 136446466;
          v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a6, a7, &v35);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v16 + 12) = 2082;
          _ViewList_ID.canonicalID.getter();
          v18 = _ViewList_ID.Canonical.description.getter();
          v20 = v19;
          swift_release();
          v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v35);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of _IncrementalLayout_Child((uint64_t)&v40);
          _os_log_impl(&dword_186E48000, v14, v15, "%{public}s prefetch %{public}s", (uint8_t *)v16, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x18D760108](v17, -1, -1);
          v21 = v16;
          v12 = v11 + 16;
          MEMORY[0x18D760108](v21, -1, -1);

        }
        else
        {

          outlined destroy of _IncrementalLayout_Child((uint64_t)&v40);
        }
      }
      _ProposedSize.init(_:in:by:)();
      v31 = v40;
      v32 = BYTE8(v40);
      v33 = v41;
      v34 = BYTE8(v41);
      IncrementalLayoutViewCache.item(data:)(v12);
      v36 = v31;
      LOBYTE(v37) = v32;
      v38 = v33;
      v39 = v34;
      IncrementalLayoutCacheItem.beginPrefetching(at:)((uint64_t)&v36);
      result = swift_release();
    }
LABEL_17:
    *a2 = 1;
    return result;
  }
  outlined init with copy of _IncrementalLayout_Child(result, (uint64_t)&v40);
  v23 = *a3;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v23;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1, (char *)v23);
    v23 = result;
    *a3 = result;
  }
  v25 = *(_QWORD *)(v23 + 16);
  v24 = *(_QWORD *)(v23 + 24);
  if (v25 >= v24 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, (char *)v23);
    v23 = result;
    *a3 = result;
  }
  *(_QWORD *)(v23 + 16) = v25 + 1;
  v26 = (_OWORD *)(v23 + 96 * v25);
  v27 = v41;
  v26[2] = v40;
  v26[3] = v27;
  v28 = v42;
  v29 = v43;
  v30 = v44[0];
  *(_OWORD *)((char *)v26 + 111) = *(_OWORD *)((char *)v44 + 15);
  v26[5] = v29;
  v26[6] = v30;
  v26[4] = v28;
  if (*(_QWORD *)(*a3 + 16) == a4)
    goto LABEL_17;
  return result;
}

uint64_t outlined assign with copy of PlatformItem(uint64_t a1, uint64_t a2)
{
  assignWithCopy for MapKitPlatformItem(a2, a1);
  return a2;
}

uint64_t outlined destroy of PlatformItem(uint64_t a1)
{
  destroy for MapKitPlatformItem(a1);
  return a1;
}

uint64_t outlined destroy of ScrollableCollection?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, MEMORY[0x1E0CE4E20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for AccessibilityPropertiesEntry<ScrollableCollection?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<ScrollableCollection?>)
  {
    type metadata accessor for _ContiguousArrayStorage<CVarArg>(255, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, MEMORY[0x1E0CE4E20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<ScrollableCollection?>);
  }
}

uint64_t sub_18708D074()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t outlined destroy of AnyAccessibilityPropertiesEntry?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E0CE6610], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyVStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyVStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyVStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyVStackLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer.Engine);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>.Engine, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyVStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  return specialized closure #1 in IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:)(a1, a2, *(uint64_t **)(v2 + 16), **(_QWORD **)(v2 + 24));
}

{
  return partial apply for specialized closure #1 in IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:)(a1, a2, 0xD000000000000010, 0x8000000187BD5CE0);
}

{
  return partial apply for specialized closure #1 in IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:)(a1, a2, 0xD000000000000036, 0x8000000187BD5F30);
}

{
  return partial apply for specialized closure #1 in IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:)(a1, a2, 0xD000000000000036, 0x8000000187BD5FE0);
}

unint64_t lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HorizontalAlignment and conformance HorizontalAlignment;
  if (!lazy protocol witness table cache variable for type HorizontalAlignment and conformance HorizontalAlignment)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE47E8], MEMORY[0x1E0CE47F8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalAlignment and conformance HorizontalAlignment);
  }
  return result;
}

uint64_t outlined destroy of StackPlacement<LazyVStackLayout>?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for StackPlacement<LazyVGridLayout>?(0, &lazy cache variable for type metadata for StackPlacement<LazyVStackLayout>?, &lazy cache variable for type metadata for StackPlacement<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for StackPlacement<LazyVGridLayout>?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
    v6 = type metadata accessor for Optional();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t outlined init with copy of AccessibilityScrollableContext?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t))
{
  uint64_t v7;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t outlined release of _IncrementalLayout_Section(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t partial apply for specialized closure #1 in StackPlacement.placeSection(_:from:)(uint64_t a1, BOOL *a2)
{
  return partial apply for specialized closure #1 in StackPlacement.placeSection(_:from:)(a1, a2, (void (*)(uint64_t))lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment, MEMORY[0x1E0CE47F8], 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
}

{
  return partial apply for specialized closure #1 in StackPlacement.placeSection(_:from:)(a1, a2, (void (*)(uint64_t))lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment, MEMORY[0x1E0CE4020], 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
}

{
  return partial apply for specialized closure #1 in StackPlacement.placeSection(_:from:)(a1, a2, (void (*)(uint64_t))lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment, MEMORY[0x1E0CE4020], 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
}

{
  return partial apply for specialized closure #1 in StackPlacement.placeSection(_:from:)(a1, a2, (void (*)(uint64_t))lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment, MEMORY[0x1E0CE47F8], 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
}

uint64_t partial apply for specialized closure #3 in StackPlacement.placeSection(_:from:)(uint64_t a1)
{
  uint64_t v1;

  return specialized StackPlacement.placeHeaderOrFooter(start:child:kind:)(*(_QWORD *)(v1 + 24), a1, 2u, (void (*)(uint64_t))lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment, MEMORY[0x1E0CE47F8], 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
}

{
  uint64_t v1;

  return specialized StackPlacement.placeHeaderOrFooter(start:child:kind:)(*(_QWORD *)(v1 + 24), a1, 2u, (void (*)(uint64_t))lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment, MEMORY[0x1E0CE4020], 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
}

{
  uint64_t v1;

  return specialized StackPlacement.placeHeaderOrFooter(start:child:kind:)(*(_QWORD *)(v1 + 24), a1, 2u, (void (*)(uint64_t))lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment, MEMORY[0x1E0CE4020], 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
}

{
  uint64_t v1;

  return specialized StackPlacement.placeHeaderOrFooter(start:child:kind:)(*(_QWORD *)(v1 + 24), a1, 2u, (void (*)(uint64_t))lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment, MEMORY[0x1E0CE47F8], 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
}

uint64_t sub_18708D3E8()
{
  return swift_deallocObject();
}

uint64_t sub_18708D3F8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined release of PositionState(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *(unsigned __int8 *)(a1 + 296);
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

uint64_t partial apply for specialized closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:)(uint64_t a1)
{
  uint64_t *v1;

  return specialized closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:)(a1, v1[2], v1[3], v1[4], (uint64_t)&type metadata for LazyVStackLayout, (void (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized IncrementalStack<>.place(children:context:state:in:));
}

{
  uint64_t *v1;

  return specialized closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:)(a1, v1[2], v1[3], v1[4], (uint64_t)&type metadata for LazyHStackLayout, (void (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized IncrementalStack<>.place(children:context:state:in:));
}

{
  uint64_t *v1;

  return specialized closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:)(a1, v1[2], v1[3], v1[4], (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))specialized FixedSizeIncrementalLayout<>.place(children:context:state:in:));
}

{
  uint64_t *v1;

  return specialized closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:)(a1, v1[2], v1[3], v1[4], (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))specialized FixedSizeIncrementalLayout<>.place(children:context:state:in:));
}

{
  uint64_t *v1;

  return specialized closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:)(a1, v1[2], v1[3], v1[4], (uint64_t)&type metadata for LazyHGridLayout, (void (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized IncrementalStack<>.place(children:context:state:in:));
}

{
  uint64_t *v1;

  return specialized closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:)(a1, v1[2], v1[3], v1[4], (uint64_t)&type metadata for LazyVGridLayout, (void (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized IncrementalStack<>.place(children:context:state:in:));
}

void specialized FixedSizeIncrementalLayout<>.logEarlyReturn(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized FixedSizeIncrementalLayout<>.logEarlyReturn(_:)(a1, a2, a3, 0x746E6F7A69726F68, 0xEA00000000006C61);
}

{
  specialized FixedSizeIncrementalLayout<>.logEarlyReturn(_:)(a1, a2, a3, 0x6C61636974726576, 0xE800000000000000);
}

void specialized FixedSizeIncrementalLayout<>.logEarlyReturn(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *oslog;
  uint64_t v14;

  lazy protocol witness table accessor for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
  {
    if (one-time initialization token for log != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.LazyFixedSizeStack.log);
    oslog = Logger.logObject.getter();
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = swift_slowAlloc();
      v10 = swift_slowAlloc();
      v14 = v10;
      *(_DWORD *)v9 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2080;
      v11 = StaticString.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_186E48000, oslog, v8, "%s: Early return %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v10, -1, -1);
      MEMORY[0x18D760108](v9, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t specialized IncrementalChildPlacements.logDefaultPlacement(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.scroll.getter();
  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
  swift_bridgeObjectRetain_n();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v17 = a1;
    v14 = v13;
    v15 = swift_slowAlloc();
    v19 = v15;
    *(_DWORD *)v14 = 136315394;
    v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x8000000187BD5BD0, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain();
    v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, a2, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_186E48000, v11, v12, "%s: Placing default children %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v15, -1, -1);
    MEMORY[0x18D760108](v14, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v7, v8);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v11;
  os_log_type_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, (void (*)(uint64_t))MEMORY[0x1E0DF2258]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v19 - v6;
  static Log.scroll.getter();
  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of Logger?((uint64_t)v7);
  swift_bridgeObjectRetain_n();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  v13 = v12;
  if (os_log_type_enabled(v11, v12))
  {
    v14 = swift_slowAlloc();
    HIDWORD(v19) = v13;
    v15 = v14;
    v20 = swift_slowAlloc();
    v22 = v20;
    *(_DWORD *)v15 = 136315394;
    v16 = _typeName(_:qualified:)();
    v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    swift_bridgeObjectRetain();
    v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_186E48000, v11, BYTE4(v19), "%s: Placing default children %s", (uint8_t *)v15, 0x16u);
    v18 = v20;
    swift_arrayDestroy();
    MEMORY[0x18D760108](v18, -1, -1);
    MEMORY[0x18D760108](v15, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v7, v8);
}

uint64_t specialized IncrementalChildPlacements.logTranslation(_:reason:)(char a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.scroll.getter();
  v10 = type metadata accessor for Logger();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = 0xD000000000000013;
    v16 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    v22 = v20;
    *(_DWORD *)v16 = 134218498;
    v21 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2048;
    v21 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 22) = 2080;
    if (a1)
    {
      if (a1 == 1)
      {
        v15 = 0xD00000000000001CLL;
        v17 = 0x8000000187BD5C60;
      }
      else
      {
        v17 = 0x8000000187BD5C40;
      }
    }
    else
    {
      v17 = 0x8000000187BD5C80;
    }
    v21 = COERCE_DOUBLE(getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v22));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_186E48000, v13, v14, "Adjusting content offset by %f, %f for reason: %s.", (uint8_t *)v16, 0x20u);
    v18 = v20;
    swift_arrayDestroy();
    MEMORY[0x18D760108](v18, -1, -1);
    MEMORY[0x18D760108](v16, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v9, v10);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, (void (*)(uint64_t))MEMORY[0x1E0DF2258]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v19 - v8;
  static Log.scroll.getter();
  v10 = type metadata accessor for Logger();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    return outlined destroy of Logger?((uint64_t)v9);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = 0xD000000000000013;
    v16 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    v22 = v20;
    *(_DWORD *)v16 = 134218498;
    v21 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2048;
    v21 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 22) = 2080;
    if (a1)
    {
      if (a1 == 1)
      {
        v15 = 0xD00000000000001CLL;
        v17 = 0x8000000187BD5C60;
      }
      else
      {
        v17 = 0x8000000187BD5C40;
      }
    }
    else
    {
      v17 = 0x8000000187BD5C80;
    }
    v21 = COERCE_DOUBLE(getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v22));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_186E48000, v13, v14, "Adjusting content offset by %f, %f for reason: %s.", (uint8_t *)v16, 0x20u);
    v18 = v20;
    swift_arrayDestroy();
    MEMORY[0x18D760108](v18, -1, -1);
    MEMORY[0x18D760108](v16, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v9, v10);
}

uint64_t outlined destroy of Scrollable?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable?, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18708DBB8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in IncrementalChildPlacements.placeChildren(placementContext:in:for:)()
{
  return closure #2 in IncrementalChildPlacements.placeChildren(placementContext:in:for:)();
}

uint64_t sub_18708DBD4()
{
  return swift_deallocObject();
}

uint64_t sub_18708DBE4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

double _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 288) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 296) = 2;
  return result;
}

uint64_t outlined retain of PositionState(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined destroy of ScrollPosition(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE29F0] - 8) + 8))();
  return a1;
}

uint64_t outlined init with copy of ScrollPosition.Storage(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE29D8] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of ScrollPosition.ViewID(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE29D0] - 8) + 8))();
  return a1;
}

uint64_t outlined release of PlatformItem.PrimaryContent(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(void **)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 64);
  v16 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 104);
  v15 = *(_OWORD *)(a1 + 88);
  v12 = *(_OWORD *)(a1 + 136);
  v13 = *(_OWORD *)(a1 + 120);
  v10 = *(_OWORD *)(a1 + 168);
  v11 = *(_OWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 184);
  v8 = *(void **)(a1 + 192);

  outlined consume of Image.Resolved?(v20, v19, v18, v17, v16, v4, v5, v6, v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((unint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v10,
    *((uint64_t *)&v10 + 1),
    v7,
    v8);
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyHStackLayout and conformance LazyHStackLayout;
  if (!lazy protocol witness table cache variable for type LazyHStackLayout and conformance LazyHStackLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyHStackLayout, &type metadata for LazyHStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyHStackLayout and conformance LazyHStackLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyHStackLayout and conformance LazyHStackLayout;
  if (!lazy protocol witness table cache variable for type LazyHStackLayout and conformance LazyHStackLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyHStackLayout, &type metadata for LazyHStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyHStackLayout and conformance LazyHStackLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyHStackLayout and conformance LazyHStackLayout;
  if (!lazy protocol witness table cache variable for type LazyHStackLayout and conformance LazyHStackLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyHStackLayout, &type metadata for LazyHStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyHStackLayout and conformance LazyHStackLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyHStackLayout> and conformance IncrementalLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyHStackLayout> and conformance IncrementalLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyHStackLayout> and conformance IncrementalLayoutComputer<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyHStackLayout> and conformance IncrementalLayoutComputer<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyHStackLayout> and conformance IncrementalLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyHStackLayout> and conformance IncrementalLayoutComputer<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyHStackLayout> and conformance IncrementalLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyHStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyHStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyHStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyHStackLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer.Engine);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>.Engine, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyHStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine);
  }
  return result;
}

uint64_t outlined release of _IncrementalStack_State<LazyVStackLayout>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t partial apply for specialized closure #1 in IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:)(uint64_t a1, _BYTE *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;

  return specialized closure #1 in IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:)(a1, a2, *(uint64_t **)(v4 + 16), **(_QWORD **)(v4 + 24), *(unsigned __int8 *)(v4 + 32), a3, a4);
}

unint64_t lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VerticalAlignment and conformance VerticalAlignment;
  if (!lazy protocol witness table cache variable for type VerticalAlignment and conformance VerticalAlignment)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4010], MEMORY[0x1E0CE4020]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalAlignment and conformance VerticalAlignment);
  }
  return result;
}

uint64_t outlined destroy of StackPlacement<LazyHStackLayout>?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for StackPlacement<LazyVGridLayout>?(0, &lazy cache variable for type metadata for StackPlacement<LazyHStackLayout>?, &lazy cache variable for type metadata for StackPlacement<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of StackPlacement<LazyHStackLayout>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for StackPlacement<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for specialized closure #1 in StackPlacement.placeSection(_:from:)(uint64_t a1, BOOL *a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))
{
  uint64_t v6;
  uint64_t result;

  result = specialized StackPlacement.placeHeaderOrFooter(start:child:kind:)(*(_QWORD *)(v6 + 24), a1, 1u, a3, a4, a5, a6);
  *a2 = (*(_BYTE *)(a1 + 93) & 1) == 0;
  return result;
}

{
  uint64_t v6;
  uint64_t result;

  result = specialized StackPlacement.placeHeaderOrFooter(start:child:kind:)(*(_QWORD *)(v6 + 24), a1, 1u, a3, a4, a5, a6);
  *a2 = (*(_BYTE *)(a1 + 93) & 1) == 0;
  return result;
}

uint64_t sub_18708E210()
{
  return swift_deallocObject();
}

void type metadata accessor for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>)?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>)?, (uint64_t (*)(uint64_t))type metadata accessor for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>))
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for StackPlacement<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PlacementProperties<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlacementProperties);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>));
  }
}

uint64_t outlined init with copy of StackPlacement<LazyHStackLayout>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for StackPlacement<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout;
  if (!lazy protocol witness table cache variable for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyFixedSizeHStackLayout, &type metadata for LazyFixedSizeHStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout;
  if (!lazy protocol witness table cache variable for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyFixedSizeHStackLayout, &type metadata for LazyFixedSizeHStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout;
  if (!lazy protocol witness table cache variable for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyFixedSizeHStackLayout, &type metadata for LazyFixedSizeHStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyFixedSizeHStackLayout> and conformance IncrementalLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyFixedSizeHStackLayout> and conformance IncrementalLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyFixedSizeHStackLayout> and conformance IncrementalLayoutComputer<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyFixedSizeHStackLayout> and conformance IncrementalLayoutComputer<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyFixedSizeHStackLayout> and conformance IncrementalLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyFixedSizeHStackLayout> and conformance IncrementalLayoutComputer<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyFixedSizeHStackLayout> and conformance IncrementalLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyFixedSizeHStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyFixedSizeHStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyFixedSizeHStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyFixedSizeHStackLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer.Engine);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>.Engine, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyFixedSizeHStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine);
  }
  return result;
}

uint64_t specialized IncrementalChildPlacements.logDefaultPlacement(_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.scroll.getter();
  v12 = type metadata accessor for Logger();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
  swift_bridgeObjectRetain_n();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    v22 = v20;
    *(_DWORD *)v17 = 136315394;
    v19 = a1;
    v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain();
    v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, a2, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_186E48000, v15, v16, "%s: Placing default children %s", (uint8_t *)v17, 0x16u);
    v18 = v20;
    swift_arrayDestroy();
    MEMORY[0x18D760108](v18, -1, -1);
    MEMORY[0x18D760108](v17, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v11, v12);
}

void specialized FixedSizeIncrementalLayout<>.logPlacement(_:_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  NSObject *oslog;
  uint64_t v10;

  lazy protocol witness table accessor for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
  {
    if (one-time initialization token for log != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.LazyFixedSizeStack.log);
    oslog = Logger.logObject.getter();
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = swift_slowAlloc();
      v7 = swift_slowAlloc();
      v10 = v7;
      *(_DWORD *)v6 = 136315650;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2080;
      _print_unlocked<A, B>(_:_:)();
      v8._countAndFlagsBits = 3026478;
      v8._object = (void *)0xE300000000000000;
      String.append(_:)(v8);
      _print_unlocked<A, B>(_:_:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 22) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, oslog, v5, "%s: Placing children in range %s, childLength %f", (uint8_t *)v6, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v7, -1, -1);
      MEMORY[0x18D760108](v6, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  objc_class *v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  id v16;
  void *v17;
  uint64_t v19;
  objc_super v20;

  if (!*(_QWORD *)(a1 + 72))
  {
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[2];
    v7 = a2[4];
    v19 = a2[3];
    v8 = a2[5];
    v9 = a2[6];
    v10 = a2[8];
    v11 = *((unsigned __int8 *)a2 + 72);
    v12 = (objc_class *)type metadata accessor for Coordinator();
    v13 = a2[7];
    v14 = objc_allocWithZone(v12);
    v14[OBJC_IVAR____TtC7SwiftUIP33_8AA246B2E0E916EFA5AD706DCC8A0FE811Coordinator_isUpdating] = 0;
    v15 = &v14[OBJC_IVAR____TtC7SwiftUIP33_8AA246B2E0E916EFA5AD706DCC8A0FE811Coordinator_configuration];
    *(_QWORD *)v15 = v4;
    *((_QWORD *)v15 + 1) = v5;
    *((_QWORD *)v15 + 2) = v6;
    *((_QWORD *)v15 + 3) = v19;
    *((_QWORD *)v15 + 4) = v7;
    *((_QWORD *)v15 + 5) = v8;
    *((_QWORD *)v15 + 6) = v9;
    *((_QWORD *)v15 + 7) = v13;
    *((_QWORD *)v15 + 8) = v10;
    v15[72] = v11;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of Environment<Color?>.Content(v10, v11);
    v20.receiver = v14;
    v20.super_class = v12;
    v16 = objc_msgSendSuper2(&v20, sel_init);
    v17 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v16;

  }
  return *(_QWORD *)AGGraphGetValue();
}

{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  char *v10;
  char *v11;
  id v12;
  id v13;
  void *v14;
  objc_super v16;

  if (!*(_QWORD *)(a1 + 72))
  {
    v3 = *a2;
    v4 = a2[1];
    v5 = (void *)a2[2];
    v6 = *((_BYTE *)a2 + 24);
    v8 = a2[4];
    v7 = a2[5];
    v9 = (objc_class *)type metadata accessor for BridgedColorPicker.Coordinator();
    v10 = (char *)objc_allocWithZone(v9);
    v11 = &v10[OBJC_IVAR____TtCV7SwiftUIP33_0B012DB3D42FBF9295A4AA29478C936C18BridgedColorPicker11Coordinator_parent];
    *(_QWORD *)v11 = v3;
    *((_QWORD *)v11 + 1) = v4;
    *((_QWORD *)v11 + 2) = v5;
    v11[24] = v6;
    *((_QWORD *)v11 + 4) = v8;
    *((_QWORD *)v11 + 5) = v7;
    v16.receiver = v10;
    v16.super_class = v9;
    swift_retain();
    swift_retain();
    v12 = v5;
    swift_bridgeObjectRetain();
    v13 = objc_msgSendSuper2(&v16, sel_init);
    v14 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v13;

  }
  return *(_QWORD *)AGGraphGetValue();
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  objc_class *v8;
  char *v9;
  char *v10;
  id v11;
  void *v12;
  objc_super v14;

  if (!*(_QWORD *)(a1 + 72))
  {
    v3 = *a2;
    v4 = a2[1];
    v5 = a2[2];
    v6 = a2[3];
    v7 = *((_BYTE *)a2 + 32);
    v8 = (objc_class *)type metadata accessor for SegmentedControlCoordinator();
    v9 = (char *)objc_allocWithZone(v8);
    v10 = &v9[OBJC_IVAR____TtC7SwiftUIP33_D74FE142C3C5A6C2CEA4987A69AEBD7527SegmentedControlCoordinator_configuration];
    *(_QWORD *)v10 = v3;
    *((_QWORD *)v10 + 1) = v4;
    *((_QWORD *)v10 + 2) = v5;
    *((_QWORD *)v10 + 3) = v6;
    v10[32] = v7;
    *(_QWORD *)&v9[OBJC_IVAR____TtC7SwiftUIP33_D74FE142C3C5A6C2CEA4987A69AEBD7527SegmentedControlCoordinator_itemChanges] = MEMORY[0x1E0DEE9D8];
    v14.receiver = v9;
    v14.super_class = v8;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v11 = objc_msgSendSuper2(&v14, sel_init);
    v12 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v11;

  }
  return *(_QWORD *)AGGraphGetValue();
}

uint64_t specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  objc_class *v19;
  _BYTE *v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  id v25;
  void *v26;
  __int128 v28;
  __int128 v29;
  objc_super v30;
  _BYTE v31[200];

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v28 - v6;
  v8 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v28 - v14;
  if (!*(_QWORD *)(a1 + 72))
  {
    outlined init with copy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(a2, (uint64_t)v15);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, (uint64_t)v11, type metadata accessor for SystemTextFieldConfiguration);
    outlined init with take of TextField<_TextFieldStyleLabel>((uint64_t)v11, (uint64_t)v7);
    v16 = &v15[*(int *)(type metadata accessor for TextViewAdaptor(0) + 24)];
    v29 = *(_OWORD *)v16;
    v17 = *((_QWORD *)v16 + 2);
    v18 = *((_QWORD *)v16 + 3);
    v19 = (objc_class *)type metadata accessor for PlatformTextFieldCoordinator(0);
    v20 = objc_allocWithZone(v19);
    v28 = xmmword_187BFE310;
    *(_OWORD *)&v20[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment] = xmmword_187BFE310;
    v21 = &v20[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_label];
    _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)v31);
    *((_OWORD *)v21 + 15) = 0u;
    *((_OWORD *)v21 + 16) = 0u;
    v22 = v28;
    *((_OWORD *)v21 + 17) = 0u;
    *((_OWORD *)v21 + 18) = v22;
    *(_QWORD *)v21 = &outlined read-only object #0 of specialized closure #2 in closure #1 in PlatformViewChild.updateValue();
    *((_QWORD *)v21 + 1) = 0;
    *((_DWORD *)v21 + 4) = 0;
    outlined init with take of Image.Resolved?((uint64_t)v31, (uint64_t)(v21 + 24), (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
    *((_QWORD *)v21 + 38) = 0;
    v21[312] = 1;
    *((_QWORD *)v21 + 40) = 0;
    *((_QWORD *)v21 + 41) = 0;
    v23 = &v20[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_selectionStorage];
    *(_OWORD *)v23 = 0u;
    *((_OWORD *)v23 + 1) = 0u;
    v23[32] = 1;
    v20[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isViewUpdating] = 0;
    v24 = &v20[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field];
    *(_QWORD *)v24 = 0;
    v24[8] = -1;
    v20[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_ignoreNextUpdate] = 0;
    v20[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isUserEditing] = 0;
    outlined init with copy of TextField<_TextFieldStyleLabel>((uint64_t)v7, (uint64_t)&v20[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration]);
    *(_OWORD *)v23 = v29;
    *((_QWORD *)v23 + 2) = v17;
    *((_QWORD *)v23 + 3) = v18;
    v23[32] = 0;
    v30.receiver = v20;
    v30.super_class = v19;
    v25 = objc_msgSendSuper2(&v30, sel_init);
    outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v7);
    outlined destroy of PlatformViewRepresentableAdaptor<TextViewAdaptor>((uint64_t)v15);
    v26 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v25;

  }
  return *(_QWORD *)AGGraphGetValue();
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  char v9;
  _BYTE v10[56];
  _QWORD v11[3];
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 72))
  {
    outlined init with copy of PlatformViewRepresentableAdaptor<UIKitPagingView>(a2, (uint64_t)v11);
    v3 = v11[0];
    v4 = v11[1];
    v5 = v11[2];
    outlined init with copy of _VariadicView_Children((uint64_t)&v12, (uint64_t)v10);
    v9 = 0;
    objc_allocWithZone((Class)type metadata accessor for Coordinator());
    swift_retain();
    swift_retain();
    v6 = specialized Coordinator.init(selectedIndex:children:layoutDirection:)(v3, v4, v5, (uint64_t)v10, &v9);
    swift_release();
    swift_release();
    outlined destroy of PlatformViewRepresentableAdaptor<UIKitPagingView>((uint64_t)v11);
    v7 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v6;

  }
  return *(_QWORD *)AGGraphGetValue();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  objc_class *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  id v20;
  void *v21;
  __int128 v23;
  objc_super v24;

  v4 = type metadata accessor for UIKitTextViewAdaptor(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, v8, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v23 - v11;
  if (!*(_QWORD *)(a1 + 72))
  {
    outlined init with copy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(a2, (uint64_t)v12);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, (uint64_t)v7, type metadata accessor for UIKitTextViewAdaptor);
    v13 = &v12[*(int *)(v4 + 28)];
    v14 = (objc_class *)type metadata accessor for UIKitTextEditorCoordinator(0);
    v23 = *(_OWORD *)v13;
    v15 = *((_QWORD *)v13 + 2);
    v16 = *((_QWORD *)v13 + 3);
    v17 = objc_allocWithZone(v14);
    v18 = &v17[OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_textInputValidation];
    *(_OWORD *)v18 = 0u;
    *((_OWORD *)v18 + 1) = 0u;
    *((_QWORD *)v18 + 4) = 0;
    v17[OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_viewIsUpdating] = 0;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v7, (uint64_t)&v17[OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_configuration], type metadata accessor for UIKitTextViewAdaptor);
    v19 = &v17[OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_selectionStorage];
    *(_OWORD *)v19 = v23;
    *((_QWORD *)v19 + 2) = v15;
    *((_QWORD *)v19 + 3) = v16;
    v24.receiver = v17;
    v24.super_class = v14;
    v20 = objc_msgSendSuper2(&v24, sel_init);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for UIKitTextViewAdaptor);
    outlined destroy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>((uint64_t)v12);
    v21 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v20;

  }
  return *(_QWORD *)AGGraphGetValue();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  objc_class *v12;
  _BYTE *v13;
  id v14;
  void *v15;
  objc_super v17;

  type metadata accessor for Binding<SearchFieldState>(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v17 - v10;
  if (!*(_QWORD *)(a1 + 72))
  {
    outlined init with copy of PlatformViewRepresentableAdaptor<KitRepresentable>(a2, (uint64_t)v11);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
    v12 = (objc_class *)type metadata accessor for Coordinator(0);
    v13 = objc_allocWithZone(v12);
    v13[OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_isViewUpdating] = 0;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v7, (uint64_t)&v13[OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_state], (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
    v17.receiver = v13;
    v17.super_class = v12;
    v14 = objc_msgSendSuper2(&v17, sel_init);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
    outlined destroy of PlatformViewRepresentableAdaptor<KitRepresentable>((uint64_t)v11);
    v15 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v14;

  }
  return *(_QWORD *)AGGraphGetValue();
}

{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  objc_class *v12;
  id v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  __int128 v24;

  if (!*(_QWORD *)(a1 + 72))
  {
    v4 = *(_QWORD *)a2;
    v19 = *(_BYTE *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    v21 = *(_QWORD *)a2;
    v6 = *(_BYTE *)(a2 + 25);
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(unsigned __int8 *)(a2 + 40);
    v22 = *(unsigned __int8 *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 48);
    v10 = *(_BYTE *)(a2 + 56);
    v23 = v10;
    v20 = *(_QWORD *)(a2 + 80);
    v11 = *(unsigned __int8 *)(a2 + 24);
    v12 = (objc_class *)type metadata accessor for PasteHelper.ConfigurationSupport();
    v24 = *(_OWORD *)(a2 + 64);
    v13 = objc_allocWithZone(v12);
    outlined copy of Environment<Bool>.Content(v4, v19);
    outlined copy of Environment<CGFloat?>.Content(v5, v11, v6);
    outlined copy of Environment<Color?>.Content(v7, v8);
    outlined copy of Environment<Bool>.Content(v9, v10);
    swift_bridgeObjectRetain();
    swift_retain();
    v14 = (char *)objc_msgSend(v13, sel_init);
    v15 = &v14[OBJC_IVAR____TtCV7SwiftUI11PasteHelper20ConfigurationSupport_pasteHelper];
    v16 = *(_QWORD *)&v14[OBJC_IVAR____TtCV7SwiftUI11PasteHelper20ConfigurationSupport_pasteHelper];
    *(_OWORD *)v15 = v24;
    *((_QWORD *)v15 + 2) = v20;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    outlined copy of PasteHelper?(v16);
    outlined consume of PasteHelper?(v16);
    PasteHelper.ConfigurationSupport.pasteHelper.didset(v16);
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of PasteHelper?(v16);
    outlined consume of Environment<Bool>.Content(v21, v19);
    outlined consume of Environment<CGFloat?>.Content(v5, v11, v6);
    outlined consume of Environment<Color?>.Content(v7, v22);
    outlined consume of Environment<Bool>.Content(v9, v23);
    swift_release();
    swift_bridgeObjectRelease();
    v17 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v14;

  }
  return *(_QWORD *)AGGraphGetValue();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v17;

  v4 = type metadata accessor for UIKitRichTextEditor(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, v8, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v17 - v11;
  if (!*(_QWORD *)(a1 + 72))
  {
    outlined init with copy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(a2, (uint64_t)v12);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, (uint64_t)v7, type metadata accessor for UIKitRichTextEditor);
    v13 = objc_allocWithZone((Class)type metadata accessor for UIKitRichTextEditorCoordinator(0));
    v14 = UIKitRichTextEditorCoordinator.init(configuration:)((uint64_t)v7);
    outlined destroy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>((uint64_t)v12);
    v15 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v14;

  }
  return *(_QWORD *)AGGraphGetValue();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  Class v23;
  id v24;
  void *v25;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[7];
  __int16 v31;

  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v27 - v10;
  if (!*(_QWORD *)(a1 + 72))
  {
    outlined init with copy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(a2, (uint64_t)v11);
    v13 = *(_QWORD *)v11;
    v12 = *((_QWORD *)v11 + 1);
    v14 = *((_QWORD *)v11 + 2);
    v15 = v11[24];
    v17 = *((_QWORD *)v11 + 4);
    v16 = *((_QWORD *)v11 + 5);
    v18 = *((_QWORD *)v11 + 8);
    v28 = *((_QWORD *)v11 + 7);
    v29 = v14;
    v27[1] = v18;
    v19 = *((_QWORD *)v11 + 9);
    v20 = v11[48];
    v21 = *((_WORD *)v11 + 40);
    v30[0] = v15;
    v30[1] = v17;
    v30[2] = v16;
    v30[3] = v20;
    v30[4] = v28;
    v30[5] = v18;
    v30[6] = v19;
    v31 = v21;
    v22 = type metadata accessor for UIKitAdaptableTabView();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v11[*(int *)(v22 + 24)], (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for TabViewCoordinator_Phone<AdaptiveTabViewStrategy>, (uint64_t)&type metadata for AdaptiveTabViewStrategy, (uint64_t)&protocol witness table for AdaptiveTabViewStrategy, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TabViewCoordinator_Phone);
    objc_allocWithZone(v23);
    swift_retain();
    swift_retain();
    outlined copy of Binding<NavigationSplitViewColumn>?(v17, v16);
    outlined copy of TabSidebarAccessoryViewConfiguration?(v28);
    v24 = specialized TabViewCoordinator_Phone.init(selected:sidebarConfiguration:customization:tabs:)(v13, v12, v29, (uint64_t)v30, (uint64_t)v7, MEMORY[0x1E0DEE9D8]);
    swift_release();
    swift_release();
    outlined destroy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>((uint64_t)v11);
    v25 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v24;

  }
  return *(_QWORD *)AGGraphGetValue();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  objc_class *v20;
  _BYTE *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  id v26;
  void *v27;
  __int128 v29;
  __int128 v30;
  objc_super v31;
  _BYTE v32[200];

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v29 - v6;
  v8 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v29 - v14;
  if (!*(_QWORD *)(a1 + 72))
  {
    outlined init with copy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(a2, (uint64_t)v15);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, (uint64_t)v11, type metadata accessor for SystemTextFieldConfiguration);
    outlined init with take of TextField<_TextFieldStyleLabel>((uint64_t)v11, (uint64_t)v7);
    v16 = &v15[*(int *)(type metadata accessor for PlatformTextFieldAdaptor(0) + 24)];
    v30 = *(_OWORD *)v16;
    v17 = *((_QWORD *)v16 + 2);
    v18 = *((_QWORD *)v16 + 3);
    v19 = v16[32];
    v20 = (objc_class *)type metadata accessor for PlatformTextFieldCoordinator(0);
    v21 = objc_allocWithZone(v20);
    v29 = xmmword_187BFE310;
    *(_OWORD *)&v21[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment] = xmmword_187BFE310;
    v22 = &v21[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_label];
    _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)v32);
    *((_OWORD *)v22 + 15) = 0u;
    *((_OWORD *)v22 + 16) = 0u;
    v23 = v29;
    *((_OWORD *)v22 + 17) = 0u;
    *((_OWORD *)v22 + 18) = v23;
    *(_QWORD *)v22 = &outlined read-only object #0 of specialized closure #2 in closure #1 in PlatformViewChild.updateValue();
    *((_QWORD *)v22 + 1) = 0;
    *((_DWORD *)v22 + 4) = 0;
    outlined init with take of Image.Resolved?((uint64_t)v32, (uint64_t)(v22 + 24), (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
    *((_QWORD *)v22 + 38) = 0;
    v22[312] = 1;
    *((_QWORD *)v22 + 40) = 0;
    *((_QWORD *)v22 + 41) = 0;
    v24 = &v21[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_selectionStorage];
    *(_OWORD *)v24 = 0u;
    *((_OWORD *)v24 + 1) = 0u;
    v24[32] = 1;
    v21[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isViewUpdating] = 0;
    v25 = &v21[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field];
    *(_QWORD *)v25 = 0;
    v25[8] = -1;
    v21[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_ignoreNextUpdate] = 0;
    v21[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isUserEditing] = 0;
    outlined init with copy of TextField<_TextFieldStyleLabel>((uint64_t)v7, (uint64_t)&v21[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration]);
    *(_OWORD *)v24 = v30;
    *((_QWORD *)v24 + 2) = v17;
    *((_QWORD *)v24 + 3) = v18;
    v24[32] = v19;
    v31.receiver = v21;
    v31.super_class = v20;
    v26 = objc_msgSendSuper2(&v31, sel_init);
    outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v7);
    outlined destroy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>((uint64_t)v15);
    v27 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v26;

  }
  return *(_QWORD *)AGGraphGetValue();
}

{
  uint64_t v3;
  _BYTE v5[368];

  if (!*(_QWORD *)(a1 + 72))
  {
    outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>(a2, (uint64_t)v5);
    v3 = NavigationSplitRepresentable.makeCoordinator()();
    outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>((uint64_t)v5);
    *(_QWORD *)(a1 + 72) = v3;
    swift_release();
  }
  return *(_QWORD *)AGGraphGetValue();
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Class v6;
  id v7;
  uint64_t v8;
  void *v9;
  _BYTE v11[24];
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 72))
  {
    outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>(a2, (uint64_t)&v12);
    v3 = v12;
    v4 = v14;
    v5 = v13;
    outlined init with copy of NavigationAuthority((uint64_t)&v15, (uint64_t)v11);
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for NavigationStackCoordinator<NavigationStrategy_Phone>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationStrategy_Phone and conformance NavigationStrategy_Phone, (uint64_t)&type metadata for NavigationStrategy_Phone, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationStackCoordinator);
    v7 = objc_allocWithZone(v6);
    v8 = specialized NavigationStackCoordinator.init(context:navigationAuthority:)(v3, v5, v4, v11);
    outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>((uint64_t)&v12);
    v9 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v8;

  }
  return *(_QWORD *)AGGraphGetValue();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  objc_class *v13;
  char *v14;
  id v15;
  void *v16;
  objc_super v18;

  v4 = type metadata accessor for DatePickerStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v18 - v10;
  if (!*(_QWORD *)(a1 + 72))
  {
    outlined init with copy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(a2, (uint64_t)v11);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v7, type metadata accessor for DatePickerStyleConfiguration);
    v12 = *(_QWORD *)&v11[*(int *)(type metadata accessor for UIKitDatePickerRepresentable(0) + 32)];
    v13 = (objc_class *)type metadata accessor for UIKitDatePickerRepresentable.Coordinator(0);
    v14 = (char *)objc_allocWithZone(v13);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v7, (uint64_t)&v14[OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_configuration], type metadata accessor for DatePickerStyleConfiguration);
    *(_QWORD *)&v14[OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_style] = v12;
    v18.receiver = v14;
    v18.super_class = v13;
    v15 = objc_msgSendSuper2(&v18, sel_init);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for DatePickerStyleConfiguration);
    outlined destroy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>((uint64_t)v11);
    v16 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v15;

  }
  return *(_QWORD *)AGGraphGetValue();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  objc_class *v12;
  id v13;
  id v14;
  void *v15;
  objc_super v17;

  v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v17 - v10;
  if (!*(_QWORD *)(a1 + 72))
  {
    outlined init with copy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(a2, (uint64_t)v11);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v7, type metadata accessor for MultiDatePickerStyleConfiguration);
    v12 = (objc_class *)type metadata accessor for UIKitCalendarViewRepresentable.Coordinator(0);
    v13 = objc_allocWithZone(v12);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v7, (uint64_t)v13+ OBJC_IVAR____TtCV7SwiftUIP33_1CD2D554D5FF79B0EC2610FA354BC03430UIKitCalendarViewRepresentable11Coordinator_configuration, type metadata accessor for MultiDatePickerStyleConfiguration);
    v17.receiver = v13;
    v17.super_class = v12;
    v14 = objc_msgSendSuper2(&v17, sel_init);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for MultiDatePickerStyleConfiguration);
    outlined destroy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>((uint64_t)v11);
    v15 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v14;

  }
  return *(_QWORD *)AGGraphGetValue();
}

void specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  uint64_t ObjectType;
  void *v9;
  id v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  int v18;
  objc_class *v19;
  char *v20;
  char *v21;
  char *v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  char v30;
  id v31;
  objc_super v32;

  v2 = v1;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *(void **)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x78));
  v6 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x80);
  if (MEMORY[0x18D760234](v6))
  {
    v7 = *((_QWORD *)v6 + 1);
    ObjectType = swift_getObjectType();
    v31 = v5;
    v9 = (void *)ViewRendererHost.uiViewController.getter(ObjectType, v7);
    swift_unknownObjectRelease();
    if (v9)
    {
      v10 = objc_msgSend(v1, sel_traitCollection);
      v11 = (_QWORD *)((char *)v2 + *(_QWORD *)((*v4 & *v2) + 0x68));
      swift_beginAccess();
      v12 = *(_DWORD *)((char *)v2 + *(_QWORD *)((*v4 & *v2) + 0x70));
      v13 = *v11;
      v14 = v11[1];
      v15 = (char *)v2 + *(_QWORD *)((*v4 & *v2) + 0x90);
      v16 = *(_QWORD *)v15;
      v30 = a1;
      v17 = v15[8];
      v18 = *((_DWORD *)v15 + 3);
      v19 = (objc_class *)type metadata accessor for EnvironmentWrapper();
      v20 = (char *)objc_allocWithZone(v19);
      v21 = &v20[OBJC_IVAR___SwiftUIEnvironmentWrapper_environment];
      *(_QWORD *)v21 = v13;
      *((_QWORD *)v21 + 1) = v14;
      *(_DWORD *)&v20[OBJC_IVAR___SwiftUIEnvironmentWrapper_phase] = v12;
      v22 = &v20[OBJC_IVAR___SwiftUIEnvironmentWrapper_focusedValues];
      *(_QWORD *)v22 = v16;
      v22[8] = v17;
      *((_DWORD *)v22 + 3) = v18;
      v32.receiver = v20;
      v32.super_class = v19;
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      v23 = objc_msgSendSuper2(&v32, sel_init);
      MEMORY[0x1E0C80A78](v23, v24);
      v25 = (void *)UITraitCollection._modifyingTraits(environmentWrapper:mutations:)();
      swift_release();
      swift_release();
      swift_release();

      v26 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v27 = swift_allocObject();
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = v25;
      *(_QWORD *)(v27 + 32) = v31;
      *(_BYTE *)(v27 + 40) = v30 & 1;
      v28 = v31;
      swift_retain();
      v29 = v25;
      static Update.enqueueAction(_:)();

      swift_release();
      swift_release();

    }
    else
    {

    }
  }
}

uint64_t specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t ObjectType;
  void *v10;
  id v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  int v20;
  objc_class *v21;
  char *v22;
  char *v23;
  char *v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  char v32;
  void *v33;
  objc_super v34;

  v2 = v1;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *(void **)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x78));
  v6 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x80);
  result = MEMORY[0x18D760234](v6);
  if (result)
  {
    v8 = *((_QWORD *)v6 + 1);
    ObjectType = swift_getObjectType();
    v10 = (void *)ViewRendererHost.uiViewController.getter(ObjectType, v8);
    result = swift_unknownObjectRelease();
    if (v10)
    {
      v11 = objc_msgSend(v1, sel_traitCollection);
      v12 = (_QWORD *)((char *)v2 + *(_QWORD *)((*v4 & *v2) + 0x68));
      swift_beginAccess();
      v13 = *v4 & *v2;
      v33 = v5;
      v14 = *(_DWORD *)((char *)v2 + *(_QWORD *)(v13 + 0x70));
      v15 = *v12;
      v16 = v12[1];
      v17 = (char *)v2 + *(_QWORD *)(v13 + 144);
      v18 = *(_QWORD *)v17;
      v32 = a1;
      v19 = v17[8];
      v20 = *((_DWORD *)v17 + 3);
      v21 = (objc_class *)type metadata accessor for EnvironmentWrapper();
      v22 = (char *)objc_allocWithZone(v21);
      v23 = &v22[OBJC_IVAR___SwiftUIEnvironmentWrapper_environment];
      *(_QWORD *)v23 = v15;
      *((_QWORD *)v23 + 1) = v16;
      *(_DWORD *)&v22[OBJC_IVAR___SwiftUIEnvironmentWrapper_phase] = v14;
      v24 = &v22[OBJC_IVAR___SwiftUIEnvironmentWrapper_focusedValues];
      *(_QWORD *)v24 = v18;
      v24[8] = v19;
      *((_DWORD *)v24 + 3) = v20;
      v34.receiver = v22;
      v34.super_class = v21;
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      v25 = objc_msgSendSuper2(&v34, sel_init);
      MEMORY[0x1E0C80A78](v25, v26);
      v27 = (void *)UITraitCollection._modifyingTraits(environmentWrapper:mutations:)();
      swift_release();
      swift_release();
      swift_release();

      v28 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v29 = swift_allocObject();
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = v27;
      *(_QWORD *)(v29 + 32) = v33;
      *(_BYTE *)(v29 + 40) = v32 & 1;
      swift_retain();
      v30 = v27;
      v31 = v33;
      static Update.enqueueAction(_:)();

      swift_release();
      return swift_release();
    }
  }
  return result;
}

_QWORD *specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  objc_class *ObjectType;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t *v18;
  int64x2_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  _QWORD *v24;
  id v25;
  id v26;
  uint64_t v27;
  objc_super v31;
  objc_super v32;

  v8 = v7;
  ObjectType = (objc_class *)swift_getObjectType();
  v14 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v15 = (char *)v7 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v7) + 0x80);
  *((_QWORD *)v15 + 1) = 0;
  swift_unknownObjectWeakInit();
  *((_BYTE *)v7 + *(_QWORD *)((*v14 & *v7) + 0x88)) = 2;
  swift_weakInit();
  v16 = *(_QWORD *)((*v14 & *v7) + 0xA0);
  type metadata accessor for UIView.SafeAreaHelper();
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_BYTE *)(v17 + 48) = 1;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_BYTE *)(v17 + 88) = 1;
  *(_QWORD *)((char *)v8 + v16) = v17;
  v18 = (int64x2_t *)((char *)v8 + *(_QWORD *)((*v14 & *v8) + 0xA8));
  v19 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *v18 = v19;
  v18[1] = v19;
  *((_BYTE *)v8 + *(_QWORD *)((*v14 & *v8) + 0xB0)) = 0;
  *((_BYTE *)v8 + *(_QWORD *)((*v14 & *v8) + 0xB8)) = 2;
  v20 = (char *)v8 + *(_QWORD *)((*v14 & *v8) + 0xC0);
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  v20[16] = 1;
  *((_BYTE *)v8 + *(_QWORD *)((*v14 & *v8) + 0xC8)) = 0;
  v21 = (char *)v8 + *(_QWORD *)((*v14 & *v8) + 0xD0);
  *(_OWORD *)v21 = 0u;
  *((_OWORD *)v21 + 1) = 0u;
  *((_OWORD *)v21 + 2) = 0u;
  v21[48] = 1;
  v22 = (_QWORD *)((char *)v8 + *(_QWORD *)((*v14 & *v8) + 0x68));
  *v22 = a4;
  v22[1] = a5;
  *(_DWORD *)((char *)v8 + *(_QWORD *)((*v14 & *v8) + 0x70)) = a6;
  *(_QWORD *)((char *)v8 + *(_QWORD *)((*v14 & *v8) + 0x78)) = a1;
  *((_QWORD *)v15 + 1) = a3;
  swift_unknownObjectWeakAssign();
  v23 = (char *)v8 + *(_QWORD *)((*v14 & *v8) + 0x90);
  *(_QWORD *)v23 = 0;
  v23[8] = 0;
  *((_DWORD *)v23 + 3) = 0;
  *(_QWORD *)((char *)v8 + *(_QWORD *)((*v14 & *v8) + 0x60)) = a7;
  v32.receiver = v8;
  v32.super_class = ObjectType;
  swift_retain();
  swift_retain();
  swift_retain();
  v24 = objc_msgSendSuper2(&v32, sel_initWithHostedView_, 0);
  static Semantics.v6.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0)
  {
    v25 = objc_msgSend(v24, sel_layer);
    objc_msgSend(v25, sel_setAllowsGroupOpacity_, 0);

    v26 = objc_msgSend(v24, sel_layer);
    objc_msgSend(v26, sel_setAllowsGroupBlending_, 0);

  }
  v27 = *(_QWORD *)((char *)v24 + *(_QWORD *)((*v14 & *v24) + 0x78));
  v31.receiver = v24;
  v31.super_class = ObjectType;
  objc_msgSendSuper2(&v31, sel_setHostedView_, v27);
  *((_BYTE *)v24 + *(_QWORD *)((*v14 & *v24) + 0xB8)) = 2;
  specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(a4, a5, a6);

  swift_unknownObjectRelease();
  swift_release();
  return v24;
}

id specialized PlatformViewRepresentableAdaptor.makeViewProvider(context:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  id v42;
  id v43;
  Class isa;
  id v45;
  _QWORD v47[2];
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  char v62;
  __int128 v63;
  __int128 v64;
  char v65;
  char v66;
  __int16 v67;
  __int128 v68;
  uint64_t v69;
  _BYTE v70[184];
  id v71;
  char v72;
  __int128 v73;
  uint64_t v74;
  char v75;
  __int128 v76;
  char v77;
  __int128 v78;
  __int128 v79;
  char v80;
  char v81;
  __int16 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v4 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SystemSegmentItem();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  MEMORY[0x1E0C80A78](v11, v12);
  v15 = (void **)((char *)v47 - v14);
  v16 = (void *)a1[5];
  v18 = *a1;
  v17 = a1[1];
  v20 = a1[2];
  v19 = a1[3];
  v21 = *((unsigned __int8 *)a1 + 32);
  v56 = a2;
  v22 = *(_QWORD *)(a2 + 16);
  if (!v22)
  {
    swift_retain();
    v42 = v16;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v20, v19, v21);
    v40 = v20;
    v41 = v21;
    goto LABEL_25;
  }
  v47[1] = v17;
  v53 = v13;
  swift_retain();
  v52 = v16;
  v23 = v16;
  v51 = v18;
  swift_retain();
  v49 = v19;
  v50 = v20;
  v48 = v21;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v20, v19, v21);
  v86 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
  v24 = v56 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v25 = v53;
  v56 = v53 + 64;
  v26 = *(_QWORD *)(v9 + 72);
  v54 = v26;
  v55 = MEMORY[0x1E0DEE9B8] + 8;
  do
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v24, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    v27 = *v15;
    if (*v15)
    {
      *((_QWORD *)&v85 + 1) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      *(_QWORD *)&v84 = v27;
    }
    else
    {
      v85 = 0u;
      v84 = 0u;
    }
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, v25, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    if (*((_QWORD *)&v85 + 1))
    {
      outlined init with take of Any(&v84, &v57);
      v28 = v27;
      goto LABEL_18;
    }
    v29 = MEMORY[0x1E0CE7280];
    outlined init with take of Image.Resolved?(v56, (uint64_t)v70, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
    outlined init with take of Image.Resolved?((uint64_t)v70, (uint64_t)&v71, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v29);
    if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v71) == 1)
    {
      v30 = v27;
      v26 = v54;
    }
    else
    {
      if (v83)
      {
        v31 = v27;
        outlined retain of Image.Resolved?((uint64_t)v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
        swift_unknownObjectRetain();
        objc_opt_self();
        v32 = swift_dynamicCastObjCClassUnconditional();
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v25, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        if (v32)
        {
          outlined retain of Image.Resolved?((uint64_t)v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
          v26 = v54;
LABEL_16:
          v69 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
          *(_QWORD *)&v68 = v32;
          outlined init with take of Any(&v68, &v57);
          goto LABEL_17;
        }
      }
      else
      {
        v33 = v27;
        outlined retain of Image.Resolved?((uint64_t)v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v25, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      }
      v34 = v71;
      v35 = v72;
      *(_QWORD *)&v57 = v71;
      BYTE8(v57) = v72;
      v58 = v73;
      v59 = v74;
      v60 = v75;
      v61 = v76;
      v62 = v77;
      v63 = v78;
      v64 = v79;
      v65 = v80;
      v66 = v81;
      v67 = v82;
      v36 = *((_QWORD *)v7 + 6);
      outlined copy of GraphicsImage.Contents?(v71, v72);
      v25 = v53;
      v32 = GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v36);
      outlined retain of Image.Resolved?((uint64_t)v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
      outlined consume of GraphicsImage.Contents?(v34, v35);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      v26 = v54;
      if (v32)
        goto LABEL_16;
    }
    *((_QWORD *)&v58 + 1) = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v57 = 0;
    *((_QWORD *)&v57 + 1) = 0xE000000000000000;
LABEL_17:
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v84, (unint64_t *)&lazy cache variable for type metadata for Any?, v55, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
LABEL_18:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v25, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    v37 = v86;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v37 + 16) + 1, 1);
      v37 = v86;
    }
    v39 = *(_QWORD *)(v37 + 16);
    v38 = *(_QWORD *)(v37 + 24);
    if (v39 >= v38 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1);
      v37 = v86;
    }
    *(_QWORD *)(v37 + 16) = v39 + 1;
    outlined init with take of Any(&v57, (_OWORD *)(v37 + 32 * v39 + 32));
    v24 += v26;
    --v22;
  }
  while (v22);
  v16 = v52;
  v19 = v49;
  v40 = v50;
  v41 = v48;
LABEL_25:
  v43 = objc_allocWithZone((Class)type metadata accessor for SystemSegmentedControl.UISegmentedControl());
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v45 = objc_msgSend(v43, sel_initWithItems_, isa);

  objc_msgSend(v45, sel_addTarget_action_forControlEvents_, v16, sel_selectionChanged_, 4096);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v40, v19, v41);

  return v45;
}

_QWORD *specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int64x2_t *v21;
  int64x2_t v22;
  char *v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  _QWORD *v27;
  id v28;
  id v29;
  objc_class *ObjectType;
  objc_super v35;

  v12 = v11;
  ObjectType = (objc_class *)swift_getObjectType();
  v17 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v18 = (char *)v11 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v11) + 0x80);
  *((_QWORD *)v18 + 1) = 0;
  swift_unknownObjectWeakInit();
  *((_BYTE *)v11 + *(_QWORD *)((*v17 & *v11) + 0x88)) = 2;
  swift_weakInit();
  v19 = *(_QWORD *)((*v17 & *v11) + 0xA0);
  type metadata accessor for UIView.SafeAreaHelper();
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = 0u;
  *(_OWORD *)(v20 + 32) = 0u;
  *(_BYTE *)(v20 + 48) = 1;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_BYTE *)(v20 + 88) = 1;
  *(_QWORD *)((char *)v11 + v19) = v20;
  v21 = (int64x2_t *)((char *)v12 + *(_QWORD *)((*v17 & *v12) + 0xA8));
  v22 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *v21 = v22;
  v21[1] = v22;
  *((_BYTE *)v11 + *(_QWORD *)((*v17 & *v11) + 0xB0)) = 0;
  *((_BYTE *)v11 + *(_QWORD *)((*v17 & *v11) + 0xB8)) = 2;
  v23 = (char *)v12 + *(_QWORD *)((*v17 & *v12) + 0xC0);
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  v23[16] = 1;
  *((_BYTE *)v11 + *(_QWORD *)((*v17 & *v11) + 0xC8)) = 0;
  v24 = (char *)v12 + *(_QWORD *)((*v17 & *v12) + 0xD0);
  *(_OWORD *)v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  *((_OWORD *)v24 + 2) = 0u;
  v24[48] = 1;
  v25 = (_QWORD *)((char *)v12 + *(_QWORD *)((*v17 & *v12) + 0x68));
  *v25 = a4;
  v25[1] = a5;
  *(_DWORD *)((char *)v11 + *(_QWORD *)((*v17 & *v11) + 0x70)) = a6;
  *(_QWORD *)((char *)v11 + *(_QWORD *)((*v17 & *v11) + 0x78)) = a1;
  *((_QWORD *)v18 + 1) = a3;
  swift_unknownObjectWeakAssign();
  v26 = (char *)v12 + *(_QWORD *)((*v17 & *v12) + 0x90);
  *(_QWORD *)v26 = 0;
  v26[8] = 0;
  *((_DWORD *)v26 + 3) = 0;
  *(_QWORD *)((char *)v11 + *(_QWORD *)((*v17 & *v11) + 0x60)) = a7;
  v35.receiver = v11;
  v35.super_class = ObjectType;
  swift_retain();
  swift_retain();
  swift_retain();
  v27 = objc_msgSendSuper2(&v35, sel_initWithHostedView_, 0);
  static Semantics.v6.getter();
  *((_BYTE *)v27 + *(_QWORD *)((*v17 & *v27) + 0x88)) = (isLinkedOnOrAfter(_:)() & 1) == 0;
  static Semantics.v6.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0)
  {
    v28 = objc_msgSend(v27, sel_layer);
    objc_msgSend(v28, sel_setAllowsGroupOpacity_, 0);

    v29 = objc_msgSend(v27, sel_layer);
    objc_msgSend(v29, sel_setAllowsGroupBlending_, 0);

  }
  specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(a4, a5, a6, a8, a9, a10, a11);

  swift_unknownObjectRelease();
  swift_release();
  return v27;
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, void **a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  __int128 v14;
  __int128 v15;
  char v16;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned __int8 *)(a1 + 32);
  v6 = static RepresentableContextValues.current;
  v7 = xmmword_1ECE02220;
  v8 = byte_1ECE02230;
  v19 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&static RepresentableContextValues.current = *(_QWORD *)a1;
  *((_QWORD *)&static RepresentableContextValues.current + 1) = v19;
  *(_QWORD *)&xmmword_1ECE02220 = v3;
  *((_QWORD *)&xmmword_1ECE02220 + 1) = v4;
  byte_1ECE02230 = v5;
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  outlined copy of RepresentableContextValues?(v6, *((uint64_t *)&v6 + 1), v7, *((uint64_t *)&v7 + 1), v8);
  v9 = outlined consume of RepresentableContextValues?(v6, *((uint64_t *)&v6 + 1), v7, *((uint64_t *)&v7 + 1), v8);
  v11 = *a2;
  if (v5 == 1)
  {
    MEMORY[0x1E0C80A78](v9, v10);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
    swift_retain();
    v12 = v11;
    swift_retain();
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
  }
  else
  {
    swift_retain();
    v13 = v11;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v3, v4, 0);
  }

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v14 = static RepresentableContextValues.current;
  v15 = xmmword_1ECE02220;
  static RepresentableContextValues.current = v6;
  xmmword_1ECE02220 = v7;
  v16 = byte_1ECE02230;
  byte_1ECE02230 = v8;
  outlined consume of RepresentableContextValues?(v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16);
  return outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(a1);
}

uint64_t specialized closure #1 in FixedSizeIncrementalLayout<>.place(children:context:state:in:)(uint64_t a1, BOOL *a2, uint64_t *a3, char a4, uint64_t a5, char **a6, uint64_t a7, void (*a8)(uint64_t), double a9, double a10, double a11)
{
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  int v27;
  char *v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t *v37;
  unsigned __int8 v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __C::CGRect v45;

  if ((a4 & 1) != 0)
    v18 = a10;
  else
    v18 = a9;
  if ((a4 & 1) != 0)
    v19 = a9;
  else
    v19 = a10;
  v20 = _ProposedSize.init(_:)();
  v37 = a3;
  v21 = (a9 + a11) * (double)*a3;
  if ((a4 & 1) != 0)
    v22 = 0.0;
  else
    v22 = (a9 + a11) * (double)*a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  else
    v23 = 0.0;
  v24 = *(_QWORD *)(a5 + 16);
  a8(v20);
  AlignmentGuide.fraction.getter();
  UnitPoint.init(_:in:by:)();
  v45.origin.x = v22;
  v45.origin.y = v23;
  v45.size.width = v18;
  v45.size.height = v19;
  UnitPoint.in(_:)(v45);
  AlignmentGuide.fraction.getter();
  UnitPoint.init(_:in:by:)();
  _Placement.init(proposedSize:anchoring:at:)();
  v25 = IncrementalLayoutViewCache.item(data:)(a1 + 16);
  swift_beginAccess();
  result = swift_unownedRetainStrong();
  if (result)
  {
    v27 = *(_DWORD *)(result + 212);
    swift_release();
    *(_DWORD *)(v25 + 188) = v27;
    *(_DWORD *)(v25 + 196) = 0;
    *(_QWORD *)(v25 + 288) = v24;
    *(_QWORD *)(v25 + 296) = v38;
    *(_QWORD *)(v25 + 304) = v39;
    *(_QWORD *)(v25 + 312) = v40;
    *(_QWORD *)(v25 + 320) = v41;
    *(_QWORD *)(v25 + 328) = v42;
    *(_QWORD *)(v25 + 336) = v43;
    *(_QWORD *)(v25 + 344) = v44;
    *(_BYTE *)(v25 + 352) = 0;
    v28 = *a6;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a6 = v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
      *a6 = v28;
    }
    v31 = *((_QWORD *)v28 + 2);
    v30 = *((_QWORD *)v28 + 3);
    if (v31 >= v30 >> 1)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v28);
    *((_QWORD *)v28 + 2) = v31 + 1;
    v32 = &v28[72 * v31];
    *((_QWORD *)v32 + 4) = v25;
    *((_QWORD *)v32 + 5) = v24;
    v32[48] = v38;
    *((_QWORD *)v32 + 7) = v39;
    v32[64] = v40;
    *((_QWORD *)v32 + 9) = v41;
    *((_QWORD *)v32 + 10) = v42;
    *((_QWORD *)v32 + 11) = v43;
    *((_QWORD *)v32 + 12) = v44;
    *a6 = v28;
    result = swift_release();
    v33 = *v37 + 1;
    if (!__OFADD__(*v37, 1))
    {
      *a2 = v33 == a7;
      *v37 = v33;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1870915AC()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in FixedSizeIncrementalLayout<>.place(children:context:state:in:)(uint64_t a1, BOOL *a2)
{
  return partial apply for specialized closure #1 in FixedSizeIncrementalLayout<>.place(children:context:state:in:)(a1, a2, (void (*)(uint64_t))lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment);
}

{
  return partial apply for specialized closure #1 in FixedSizeIncrementalLayout<>.place(children:context:state:in:)(a1, a2, (void (*)(uint64_t))lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment);
}

unint64_t lazy protocol witness table accessor for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging;
  if (!lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableFixedSizeStackLogging, &type metadata for EnableFixedSizeStackLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging;
  if (!lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableFixedSizeStackLogging, &type metadata for EnableFixedSizeStackLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging;
  if (!lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableFixedSizeStackLogging, &type metadata for EnableFixedSizeStackLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging;
  if (!lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableFixedSizeStackLogging, &type metadata for EnableFixedSizeStackLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging;
  if (!lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableFixedSizeStackLogging, &type metadata for EnableFixedSizeStackLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging;
  if (!lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableFixedSizeStackLogging, &type metadata for EnableFixedSizeStackLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging;
  if (!lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableFixedSizeStackLogging, &type metadata for EnableFixedSizeStackLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging;
  if (!lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableFixedSizeStackLogging, &type metadata for EnableFixedSizeStackLogging);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout;
  if (!lazy protocol witness table cache variable for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyFixedSizeVStackLayout, &type metadata for LazyFixedSizeVStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout;
  if (!lazy protocol witness table cache variable for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyFixedSizeVStackLayout, &type metadata for LazyFixedSizeVStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout;
  if (!lazy protocol witness table cache variable for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyFixedSizeVStackLayout, &type metadata for LazyFixedSizeVStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyFixedSizeVStackLayout> and conformance IncrementalLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyFixedSizeVStackLayout> and conformance IncrementalLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyFixedSizeVStackLayout> and conformance IncrementalLayoutComputer<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyFixedSizeVStackLayout> and conformance IncrementalLayoutComputer<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyFixedSizeVStackLayout> and conformance IncrementalLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyFixedSizeVStackLayout> and conformance IncrementalLayoutComputer<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyFixedSizeVStackLayout> and conformance IncrementalLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyFixedSizeVStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyFixedSizeVStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyFixedSizeVStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyFixedSizeVStackLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer.Engine);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>.Engine, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyFixedSizeVStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine);
  }
  return result;
}

uint64_t specialized closure #1 in IncrementalChildPrefetcher.step(info:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  __int128 *Value;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  char v8;
  void (*v9)(uint64_t, uint64_t);
  int v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16[3];
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;

  v2 = *MEMORY[0x1E0CFED28];
  v3 = *(_DWORD *)(a2 + 28);
  LOBYTE(v20) = 0;
  SizeAndSpacingContext.init(context:owner:environment:)();
  v17 = v20;
  v18 = v21;
  v19 = v3;
  v16[2] = *(_OWORD *)AGGraphGetValue();
  Value = (__int128 *)AGGraphGetValue();
  v5 = Value[1];
  v16[0] = *Value;
  v16[1] = v5;
  v6 = AGGraphGetValue();
  v13 = *(_QWORD *)v6;
  v7 = *(_OWORD *)(v6 + 24);
  v14 = *(_OWORD *)(v6 + 8);
  v15 = v7;
  type metadata accessor for IncrementalLayoutViewCache();
  AGGraphGetValue();
  v12 = *(_BYTE *)AGGraphGetValue();
  v11 = 0;
  AGGraphGetValue();
  v8 = *(_BYTE *)AGGraphGetValue();
  swift_retain();
  _IncrementalLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)(&v17, v16, (uint64_t)&v13, &v12, &v11, v8, (uint64_t)&v20);
  AGGraphGetValue();
  swift_retain();
  IncrementalLayoutViewCache.children(context:)(v2, (uint64_t)&v20);
  swift_release();
  v9 = *(void (**)(uint64_t, uint64_t))(**(_QWORD **)AGGraphGetValue() + 280);
  swift_retain();
  v9(MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEE9C0] + 8);
  swift_release();
  outlined destroy of _IncrementalLayout_Children((uint64_t)&v20);
  return 0;
}

uint64_t specialized IncrementalChildPrefetcher.step(info:)(uint64_t *a1, unint64_t a2)
{
  unsigned int *v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t CurrentAttribute;
  uint64_t v17;
  uint64_t v19;

  v4 = (uint64_t)v2;
  v5 = *((_QWORD *)v2 + 6);
  if (*((_BYTE *)v2 + 56))
  {
    if (*((_BYTE *)v2 + 56) != 1)
      return v5;
    type metadata accessor for IncrementalLayoutViewCache();
    AGGraphGetValue();
    swift_retain();
    v6 = IncrementalLayoutViewCache.prefetchOutputs()();
    swift_release();
    if (v6)
      return v5;
    return v6;
  }
  v8 = *v2;
  lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
    goto LABEL_10;
  if (one-time initialization token for log != -1)
    goto LABEL_18;
  while (1)
  {
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.LazyLayoutPrefetch.log);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v19 = v13;
      *(_DWORD *)v12 = 136446722;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000040, (unint64_t)a1, &v19);
      a1 = &v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2082;
      v14 = MEMORY[0x18D754CF0](v8, a2);
      a2 = v15;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 22) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v10, v11, "%{public}s %{public}s making item %ld", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v13, -1, -1);
      MEMORY[0x18D760108](v12, -1, -1);
    }

LABEL_10:
    CurrentAttribute = AGGraphGetCurrentAttribute();
    if ((_DWORD)CurrentAttribute != *MEMORY[0x1E0CFED28])
      break;
    __break(1u);
LABEL_18:
    swift_once();
  }
  v17 = CurrentAttribute;
  AGGraphClearUpdate();
  v6 = specialized closure #1 in IncrementalChildPrefetcher.step(info:)(v17, v4);
  AGGraphSetUpdate();
  if (!v6)
    return v6;
  if (v6 != 1)
    ++v5;
  return v5;
}

uint64_t sub_187091C14()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in FixedSizeIncrementalLayout<>.place(children:context:state:in:)(uint64_t a1, BOOL *a2, void (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t *v5;
  double v6;
  char v7;
  double v8;
  double v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _OWORD v15[3];
  uint64_t v16;

  v5 = *(uint64_t **)(v3 + 16);
  v6 = *(double *)(v3 + 24);
  v7 = *(_BYTE *)(v3 + 32);
  v8 = *(double *)(v3 + 40);
  v9 = *(double *)(v3 + 48);
  v11 = *(_QWORD *)(v3 + 56);
  v10 = *(char ***)(v3 + 64);
  v12 = *(_QWORD *)(v3 + 80);
  v13 = *(_OWORD *)(v11 + 16);
  v15[0] = *(_OWORD *)v11;
  v15[1] = v13;
  v15[2] = *(_OWORD *)(v11 + 32);
  v16 = *(_QWORD *)(v11 + 48);
  return specialized closure #1 in FixedSizeIncrementalLayout<>.place(children:context:state:in:)(a1, a2, v5, v7, (uint64_t)v15, v10, v12, a3, v6, v8, v9);
}

void type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, type metadata accessor for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, type metadata accessor for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for UIView?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UIView?)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIView?);
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, (uint64_t (*)(uint64_t))type metadata accessor for (NSObject & PlatformAccessibilityElementProtocol)?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
}

void type metadata accessor for (NSObject & PlatformAccessibilityElementProtocol)?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for (NSObject & PlatformAccessibilityElementProtocol)?, (uint64_t (*)(uint64_t))type metadata accessor for NSObject & PlatformAccessibilityElementProtocol, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

unint64_t type metadata accessor for NSObject & PlatformAccessibilityElementProtocol()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSObject & PlatformAccessibilityElementProtocol;
  if (!lazy cache variable for type metadata for NSObject & PlatformAccessibilityElementProtocol)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject & PlatformAccessibilityElementProtocol);
  }
  return result;
}

uint64_t partial apply for specialized implicit closure #1 in PlatformViewChild.updateValue()()
{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD000000000000085, 0x8000000187BD5EA0);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD00000000000005CLL, 0x8000000187BD6090);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD000000000000084, 0x8000000187BD6140);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD00000000000005ALL, 0x8000000187BD61D0);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD000000000000076, 0x8000000187BD6230);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD00000000000007CLL, 0x8000000187BD62B0);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD000000000000082, 0x8000000187BD6330);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD00000000000008CLL, 0x8000000187BD63C0);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD000000000000086, 0x8000000187BD6450);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD000000000000062, 0x8000000187BD64E0);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD00000000000008CLL, 0x8000000187BD6550);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD000000000000083, 0x8000000187BD65E0);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD000000000000034, 0x8000000187BD6670);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD00000000000004ELL, 0x8000000187BD66B0);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD000000000000068, 0x8000000187BD6700);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD00000000000004DLL, 0x8000000187BD6770);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD00000000000008ELL, 0x8000000187BD67C0);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD00000000000005BLL, 0x8000000187BD6850);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD00000000000006FLL, 0x8000000187BD68B0);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD000000000000068, 0x8000000187BD6920);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD00000000000007FLL, 0x8000000187BD6990);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD00000000000007CLL, 0x8000000187BD6A10);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD00000000000005DLL, 0x8000000187BD6A90);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD00000000000005ELL, 0x8000000187BD6AF0);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD000000000000088, 0x8000000187BD6B50);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD00000000000007FLL, 0x8000000187BD6BE0);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD000000000000048, 0x8000000187BD6C60);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16), 0xD000000000000080, 0x8000000187BD6CB0);
}

void partial apply for specialized closure #1 in PlatformViewChild.updateValue()()
{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(__int128 **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(__int128 **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(__int128 **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(__int128 **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(__int128 **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(__int128 **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(__int128 **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(__int128 **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(__int128 **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(__int128 **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(__int128 **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(__int128 **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(__int128 **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(_QWORD *)(v0 + 16));
}

uint64_t outlined init with copy of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, type metadata accessor for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *result;
  _OWORD v14[2];
  char v15;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_DWORD *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = *(_OWORD *)(v5 + 16);
  v14[0] = *(_OWORD *)v5;
  v14[1] = v12;
  v15 = *(_BYTE *)(v5 + 32);
  result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2)
    *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *result;
  _OWORD v14[3];

  v5 = *(_OWORD **)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_DWORD *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = v5[1];
  v14[0] = *v5;
  v14[1] = v12;
  v14[2] = v5[2];
  result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2)
    *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *result;
  _OWORD v14[3];

  v5 = *(_OWORD **)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_DWORD *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = v5[1];
  v14[0] = *v5;
  v14[1] = v12;
  v14[2] = v5[2];
  result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2)
    *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *result;
  _OWORD v14[3];

  v5 = *(_OWORD **)(v1 + 16);
  v4 = *(uint64_t **)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_DWORD *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = v5[1];
  v14[0] = *v5;
  v14[1] = v12;
  v14[2] = v5[2];
  result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2)
    *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *result;
  _OWORD v14[2];
  char v15;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_OWORD **)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_DWORD *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = *(_OWORD *)(v5 + 16);
  v14[0] = *(_OWORD *)v5;
  v14[1] = v12;
  v15 = *(_BYTE *)(v5 + 32);
  result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2)
    *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void **v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *result;
  _OWORD v14[3];

  v5 = *(_OWORD **)(v1 + 16);
  v4 = *(void ***)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_DWORD *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = v5[1];
  v14[0] = *v5;
  v14[1] = v12;
  v14[2] = v5[2];
  result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2)
    *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *result;
  _OWORD v14[2];
  char v15;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(void ***)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_DWORD *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = *(_OWORD *)(v5 + 16);
  v14[0] = *(_OWORD *)v5;
  v14[1] = v12;
  v15 = *(_BYTE *)(v5 + 32);
  result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2)
    *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *result;
  _OWORD v14[2];
  char v15;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_DWORD *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = *(_OWORD *)(v5 + 16);
  v14[0] = *(_OWORD *)v5;
  v14[1] = v12;
  v15 = *(_BYTE *)(v5 + 32);
  result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2)
    *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *result;
  _OWORD v14[3];

  v5 = *(_OWORD **)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_DWORD *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = v5[1];
  v14[0] = *v5;
  v14[1] = v12;
  v14[2] = v5[2];
  result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2)
    *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *result;
  _OWORD v14[2];
  char v15;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_DWORD *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = *(_OWORD *)(v5 + 16);
  v14[0] = *(_OWORD *)v5;
  v14[1] = v12;
  v15 = *(_BYTE *)(v5 + 32);
  result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2)
    *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *result;
  _OWORD v14[3];

  v5 = *(_OWORD **)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_DWORD *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = v5[1];
  v14[0] = *v5;
  v14[1] = v12;
  v14[2] = v5[2];
  result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2)
    *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *result;
  _OWORD v14[3];

  v5 = *(_OWORD **)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_DWORD *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = v5[1];
  v14[0] = *v5;
  v14[1] = v12;
  v14[2] = v5[2];
  result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2)
    *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *result;
  _OWORD v14[2];
  char v15;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_DWORD *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = *(_OWORD *)(v5 + 16);
  v14[0] = *(_OWORD *)v5;
  v14[1] = v12;
  v15 = *(_BYTE *)(v5 + 32);
  result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2)
    *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *result;
  _OWORD v14[3];

  v5 = *(_OWORD **)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_DWORD *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = v5[1];
  v14[0] = *v5;
  v14[1] = v12;
  v14[2] = v5[2];
  result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2)
    *a1 = result;
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, type metadata accessor for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, type metadata accessor for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
  }
}

uint64_t partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD v8[2];
  char v9;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v5 = v0[6];
  v6 = *(_OWORD *)(v4 + 16);
  v8[0] = *(_OWORD *)v4;
  v8[1] = v6;
  v9 = *(_BYTE *)(v4 + 32);
  return specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v3, (uint64_t)v8, v5);
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v8[3];

  v1 = v0[2];
  v2 = v0[3];
  v4 = v0[4];
  v3 = (__int128 *)v0[5];
  v5 = v0[6];
  v6 = v3[1];
  v8[0] = *v3;
  v8[1] = v6;
  v8[2] = v3[2];
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, v8, v5);
  return AGGraphSetUpdate();
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()((void (*)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t))specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t *v5;
  __int128 v6;
  __int128 v8[3];

  v1 = v0[2];
  v2 = v0[3];
  v4 = v0[4];
  v3 = (__int128 *)v0[5];
  v5 = (uint64_t *)v0[6];
  v6 = v3[1];
  v8[0] = *v3;
  v8[1] = v6;
  v8[2] = v3[2];
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, v8, v5);
  return AGGraphSetUpdate();
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()((void (*)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t))specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t *v5;
  __int128 v6;
  __int128 v8[3];

  v1 = v0[2];
  v2 = v0[3];
  v4 = v0[4];
  v3 = (__int128 *)v0[5];
  v5 = (uint64_t *)v0[6];
  v6 = v3[1];
  v8[0] = *v3;
  v8[1] = v6;
  v8[2] = v3[2];
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, v8, v5);
  return AGGraphSetUpdate();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  __int128 v8[3];

  v1 = v0[2];
  v2 = v0[3];
  v4 = v0[4];
  v3 = (__int128 *)v0[5];
  v5 = (__int128 *)v0[6];
  v6 = v3[1];
  v8[0] = *v3;
  v8[1] = v6;
  v8[2] = v3[2];
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, v8, v5);
  return AGGraphSetUpdate();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  _OWORD v8[2];
  char v9;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v5 = (_OWORD *)v0[6];
  v6 = *(_OWORD *)(v4 + 16);
  v8[0] = *(_OWORD *)v4;
  v8[1] = v6;
  v9 = *(_BYTE *)(v4 + 32);
  return specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v3, (uint64_t)v8, v5);
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _OWORD v7[2];
  char v8;

  v1 = v0[2];
  v2 = v0[3];
  v4 = v0[4];
  v3 = v0[5];
  v5 = *(_OWORD *)(v3 + 16);
  v7[0] = *(_OWORD *)v3;
  v7[1] = v5;
  v8 = *(_BYTE *)(v3 + 32);
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, (uint64_t)v7);
  return AGGraphSetUpdate();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  void **v5;
  __int128 v6;
  _OWORD v8[3];

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = (_OWORD *)v0[5];
  v5 = (void **)v0[6];
  v6 = v4[1];
  v8[0] = *v4;
  v8[1] = v6;
  v8[2] = v4[2];
  return specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v3, v8, v5);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  __int128 v6;
  _OWORD v8[2];
  char v9;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v5 = (void **)v0[6];
  v6 = *(_OWORD *)(v4 + 16);
  v8[0] = *(_OWORD *)v4;
  v8[1] = v6;
  v9 = *(_BYTE *)(v4 + 32);
  return specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v3, (uint64_t)v8, v5);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD v8[2];
  char v9;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v5 = v0[6];
  v6 = *(_OWORD *)(v4 + 16);
  v8[0] = *(_OWORD *)v4;
  v8[1] = v6;
  v9 = *(_BYTE *)(v4 + 32);
  return specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v3, (uint64_t)v8, v5);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  __int128 v6;
  _OWORD v8[2];
  char v9;

  v1 = v0[2];
  v2 = v0[3];
  v4 = v0[4];
  v3 = v0[5];
  v5 = (double *)v0[6];
  v6 = *(_OWORD *)(v3 + 16);
  v8[0] = *(_OWORD *)v3;
  v8[1] = v6;
  v9 = *(_BYTE *)(v3 + 32);
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, (uint64_t)v8, v5);
  return AGGraphSetUpdate();
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD v8[2];
  char v9;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v5 = v0[6];
  v6 = *(_OWORD *)(v4 + 16);
  v8[0] = *(_OWORD *)v4;
  v8[1] = v6;
  v9 = *(_BYTE *)(v4 + 32);
  return specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v3, (uint64_t)v8, v5);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v8[3];

  v1 = v0[2];
  v2 = v0[3];
  v4 = v0[4];
  v3 = (__int128 *)v0[5];
  v5 = v0[6];
  v6 = v3[1];
  v8[0] = *v3;
  v8[1] = v6;
  v8[2] = v3[2];
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, v8, v5);
  return AGGraphSetUpdate();
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v8[3];

  v1 = v0[2];
  v2 = v0[3];
  v4 = v0[4];
  v3 = (__int128 *)v0[5];
  v5 = v0[6];
  v6 = v3[1];
  v8[0] = *v3;
  v8[1] = v6;
  v8[2] = v3[2];
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, v8, v5);
  return AGGraphSetUpdate();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t *v5;
  __int128 v6;
  __int128 v8[3];

  v1 = v0[2];
  v2 = v0[3];
  v4 = v0[4];
  v3 = (__int128 *)v0[5];
  v5 = (uint64_t *)v0[6];
  v6 = v3[1];
  v8[0] = *v3;
  v8[1] = v6;
  v8[2] = v3[2];
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, v8, v5);
  return AGGraphSetUpdate();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD v8[2];
  char v9;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v5 = v0[6];
  v6 = *(_OWORD *)(v4 + 16);
  v8[0] = *(_OWORD *)v4;
  v8[1] = v6;
  v9 = *(_BYTE *)(v4 + 32);
  return specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v3, (uint64_t)v8, v5);
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v8[3];

  v1 = v0[2];
  v2 = v0[3];
  v4 = v0[4];
  v3 = (__int128 *)v0[5];
  v5 = v0[6];
  v6 = v3[1];
  v8[0] = *v3;
  v8[1] = v6;
  v8[2] = v3[2];
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, v8, v5);
  return AGGraphSetUpdate();
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

uint64_t outlined init with take of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, type metadata accessor for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, type metadata accessor for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_1870921EC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.UnarySubtreeSequence)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, type metadata accessor for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.UnarySubtreeSequence);
  }
}

uint64_t partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  __int128 v4;
  _OWORD v6[2];
  char v7;

  v2 = v0[2];
  v1 = v0[3];
  v3 = (void **)v0[4];
  v4 = *(_OWORD *)(v2 + 16);
  v6[0] = *(_OWORD *)v2;
  v6[1] = v4;
  v7 = *(_BYTE *)(v2 + 32);
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, _QWORD))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, _QWORD))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  _QWORD *v0;
  uint64_t v1;
  _OWORD *v2;
  void **v3;
  __int128 v4;
  _OWORD v6[3];

  v2 = (_OWORD *)v0[2];
  v1 = v0[3];
  v3 = (void **)v0[4];
  v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  v6[2] = v2[2];
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t *)v6, v1, *v3);
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, _QWORD))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  _QWORD *v0;
  uint64_t *v1;
  _OWORD *v2;
  void **v3;
  __int128 v4;
  _OWORD v6[3];

  v2 = (_OWORD *)v0[2];
  v1 = (uint64_t *)v0[3];
  v3 = (void **)v0[4];
  v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  v6[2] = v2[2];
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t *)v6, v1, *v3);
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, _QWORD))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  _QWORD *v0;
  uint64_t *v1;
  _OWORD *v2;
  void **v3;
  __int128 v4;
  _OWORD v6[3];

  v2 = (_OWORD *)v0[2];
  v1 = (uint64_t *)v0[3];
  v3 = (void **)v0[4];
  v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  v6[2] = v2[2];
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t *)v6, v1, *v3);
}

{
  _QWORD *v0;
  __int128 *v1;
  _OWORD *v2;
  void **v3;
  __int128 v4;
  _OWORD v6[3];

  v2 = (_OWORD *)v0[2];
  v1 = (__int128 *)v0[3];
  v3 = (void **)v0[4];
  v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  v6[2] = v2[2];
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t *)v6, v1, *v3);
}

{
  _QWORD *v0;
  _OWORD *v1;
  uint64_t v2;
  void **v3;
  __int128 v4;
  _OWORD v6[2];
  char v7;

  v2 = v0[2];
  v1 = (_OWORD *)v0[3];
  v3 = (void **)v0[4];
  v4 = *(_OWORD *)(v2 + 16);
  v6[0] = *(_OWORD *)v2;
  v6[1] = v4;
  v7 = *(_BYTE *)(v2 + 32);
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, _QWORD))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  __int128 v4;
  _OWORD v6[2];
  char v7;

  v2 = v0[2];
  v1 = v0[3];
  v3 = (void **)v0[4];
  v4 = *(_OWORD *)(v2 + 16);
  v6[0] = *(_OWORD *)v2;
  v6[1] = v4;
  v7 = *(_BYTE *)(v2 + 32);
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  _QWORD *v0;
  void **v1;
  _OWORD *v2;
  void **v3;
  __int128 v4;
  _OWORD v6[3];

  v2 = (_OWORD *)v0[2];
  v1 = (void **)v0[3];
  v3 = (void **)v0[4];
  v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  v6[2] = v2[2];
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  uint64_t v0;
  void **v1;
  uint64_t v2;
  __int128 v3;
  _OWORD v5[2];
  char v6;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(void ***)(v0 + 24);
  v3 = *(_OWORD *)(v2 + 16);
  v5[0] = *(_OWORD *)v2;
  v5[1] = v3;
  v6 = *(_BYTE *)(v2 + 32);
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v5, v1);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  __int128 v4;
  _OWORD v6[2];
  char v7;

  v2 = v0[2];
  v1 = v0[3];
  v3 = (void **)v0[4];
  v4 = *(_OWORD *)(v2 + 16);
  v6[0] = *(_OWORD *)v2;
  v6[1] = v4;
  v7 = *(_BYTE *)(v2 + 32);
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  _QWORD *v0;
  double *v1;
  uint64_t v2;
  void **v3;
  __int128 v4;
  _OWORD v6[2];
  char v7;

  v2 = v0[2];
  v1 = (double *)v0[3];
  v3 = (void **)v0[4];
  v4 = *(_OWORD *)(v2 + 16);
  v6[0] = *(_OWORD *)v2;
  v6[1] = v4;
  v7 = *(_BYTE *)(v2 + 32);
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, _QWORD))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  __int128 v4;
  _OWORD v6[2];
  char v7;

  v2 = v0[2];
  v1 = v0[3];
  v3 = (uint64_t *)v0[4];
  v4 = *(_OWORD *)(v2 + 16);
  v6[0] = *(_OWORD *)v2;
  v6[1] = v4;
  v7 = *(_BYTE *)(v2 + 32);
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  _QWORD *v0;
  uint64_t v1;
  _OWORD *v2;
  void **v3;
  __int128 v4;
  _OWORD v6[3];

  v2 = (_OWORD *)v0[2];
  v1 = v0[3];
  v3 = (void **)v0[4];
  v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  v6[2] = v2[2];
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, _QWORD))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  _QWORD *v0;
  uint64_t v1;
  _OWORD *v2;
  void **v3;
  __int128 v4;
  _OWORD v6[3];

  v2 = (_OWORD *)v0[2];
  v1 = v0[3];
  v3 = (void **)v0[4];
  v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  v6[2] = v2[2];
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  _QWORD *v0;
  uint64_t *v1;
  _OWORD *v2;
  void **v3;
  __int128 v4;
  _OWORD v6[3];

  v2 = (_OWORD *)v0[2];
  v1 = (uint64_t *)v0[3];
  v3 = (void **)v0[4];
  v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  v6[2] = v2[2];
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  __int128 v4;
  _OWORD v6[2];
  char v7;

  v2 = v0[2];
  v1 = v0[3];
  v3 = (void **)v0[4];
  v4 = *(_OWORD *)(v2 + 16);
  v6[0] = *(_OWORD *)v2;
  v6[1] = v4;
  v7 = *(_BYTE *)(v2 + 32);
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, _QWORD))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, _QWORD))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, _QWORD))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  _QWORD *v0;
  uint64_t v1;
  _OWORD *v2;
  void **v3;
  __int128 v4;
  _OWORD v6[3];

  v2 = (_OWORD *)v0[2];
  v1 = v0[3];
  v3 = (void **)v0[4];
  v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  v6[2] = v2[2];
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, _QWORD))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

uint64_t partial apply for closure #1 in perform #1 <A>(work:) in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()()
{
  return closure #1 in perform #1 <A>(work:) in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()();
}

uint64_t partial apply for closure #1 in RepresentableContextValues.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  return closure #1 in RepresentableContextValues.environment.getter(a1);
}

uint64_t outlined init with take of CGSize?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

__n128 *outlined init with take of RepresentableContextValues.EnvironmentStorage(__n128 *a1, __n128 *a2)
{
  __swift_memcpy17_8(a2, a1);
  return a2;
}

uint64_t outlined retain of RepresentableContextValues.EnvironmentStorage(uint64_t a1)
{
  outlined copy of RepresentableContextValues.EnvironmentStorage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

unint64_t lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyHGridLayout and conformance LazyHGridLayout;
  if (!lazy protocol witness table cache variable for type LazyHGridLayout and conformance LazyHGridLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyHGridLayout, &type metadata for LazyHGridLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyHGridLayout and conformance LazyHGridLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyHGridLayout and conformance LazyHGridLayout;
  if (!lazy protocol witness table cache variable for type LazyHGridLayout and conformance LazyHGridLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyHGridLayout, &type metadata for LazyHGridLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyHGridLayout and conformance LazyHGridLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyHGridLayout and conformance LazyHGridLayout;
  if (!lazy protocol witness table cache variable for type LazyHGridLayout and conformance LazyHGridLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyHGridLayout, &type metadata for LazyHGridLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyHGridLayout and conformance LazyHGridLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyHGridLayout> and conformance IncrementalLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyHGridLayout> and conformance IncrementalLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyHGridLayout> and conformance IncrementalLayoutComputer<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyHGridLayout> and conformance IncrementalLayoutComputer<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyHGridLayout> and conformance IncrementalLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyHGridLayout> and conformance IncrementalLayoutComputer<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyHGridLayout> and conformance IncrementalLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyHGridLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyHGridLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyHGridLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyHGridLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer.Engine);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>.Engine, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyHGridLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine);
  }
  return result;
}

uint64_t outlined release of IncrementalLayoutComputer<LazyHGridLayout>.Engine(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of StackPlacement<LazyHGridLayout>?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for StackPlacement<LazyVGridLayout>?(0, &lazy cache variable for type metadata for StackPlacement<LazyHGridLayout>?, &lazy cache variable for type metadata for StackPlacement<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of StackPlacement<LazyHGridLayout>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for StackPlacement<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1870926F4()
{
  return swift_deallocObject();
}

void type metadata accessor for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>)?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>)?, (uint64_t (*)(uint64_t))type metadata accessor for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>))
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for StackPlacement<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PlacementProperties<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlacementProperties);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>));
  }
}

uint64_t outlined init with copy of StackPlacement<LazyHGridLayout>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for StackPlacement<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyVGridLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyVGridLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyVGridLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyVGridLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer.Engine);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>.Engine, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyVGridLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine);
  }
  return result;
}

uint64_t outlined release of _IncrementalStack_State<LazyHGridLayout>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of StackPlacement<LazyVGridLayout>?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for StackPlacement<LazyVGridLayout>?(0, &lazy cache variable for type metadata for StackPlacement<LazyVGridLayout>?, &lazy cache variable for type metadata for StackPlacement<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in IncrementalStack<>.collectBackwards(from:to:children:style:atEnd:)(uint64_t a1, BOOL *a2)
{
  uint64_t v2;

  return closure #1 in IncrementalStack<>.collectBackwards(from:to:children:style:atEnd:)(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t ***)(v2 + 24), *(_QWORD *)(v2 + 32), *(uint64_t **)(v2 + 40), *(uint64_t **)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t outlined retain of IncrementalChildPlacements<LazyVStackLayout>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of IncrementalChildPlacements<LazyVStackLayout>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_187092BD0()
{
  return swift_deallocObject();
}

void type metadata accessor for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>)?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>)?, (uint64_t (*)(uint64_t))type metadata accessor for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
}

uint64_t outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(uint64_t a1)
{
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
}

uint64_t _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe(uint64_t result)
{
  if (result != 1)
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(result);
  return result;
}

uint64_t sub_187092D6C()
{
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, changed: Bool)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t outlined init with copy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

{
  return partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue(), a1);
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
  }
}

uint64_t outlined init with take of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.UnarySubtreeSequence)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.UnarySubtreeSequence);
  }
}

uint64_t _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(uint64_t *a1)
{
  uint64_t v1;
  int v2;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t outlined assign with copy of PlatformItem.SelectionContent.AuxiliaryContent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t partial apply for implicit closure #2 in ScrollActionDispatcher.updateValue()()
{
  uint64_t v0;

  return implicit closure #6 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1870931F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OnScrollPhaseChangeModifier.PhaseActionProvider.makeAction(oldOutput:newOutput:)()
{
  uint64_t v0;

  return closure #1 in OnScrollPhaseChangeModifier.PhaseActionProvider.makeAction(oldOutput:newOutput:)(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(unsigned __int8 *)(v0 + 33));
}

uint64_t partial apply for closure #4 in ScrollActionDispatcher.updateValue()()
{
  uint64_t v0;

  return closure #4 in ScrollActionDispatcher.updateValue()(*(uint64_t (**)(void))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t objectdestroy_174Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
}

uint64_t outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(uint64_t a1)
{
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
}

uint64_t outlined init with copy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
  }
}

uint64_t outlined init with take of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.UnarySubtreeSequence)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.UnarySubtreeSequence);
  }
}

uint64_t outlined init with copy of PlatformButtonActionTransform(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PlatformButtonActionTransform(a2, a1);
  return a2;
}

uint64_t outlined init with copy of PlatformItem.SelectionContent(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PlatformButtonActionTransform(a2, a1);
  return a2;
}

uint64_t outlined destroy of PlatformButtonActionTransform(uint64_t a1)
{
  destroy for PlatformButtonActionTransform(a1);
  return a1;
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t type metadata accessor for (_:)(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for UIView?();
    type metadata accessor for NSObject(255, a3);
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t result;
  _OWORD v14[3];

  v3 = *(_OWORD **)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v9 = *(_DWORD *)(v1 + 64);
  v10 = *(_QWORD *)(v1 + 72);
  v11 = v3[1];
  v14[0] = *v3;
  v14[1] = v11;
  v14[2] = v3[2];
  AGGraphClearUpdate();
  v12 = specialized closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v5, v6, v7, v8, v9, v10);
  result = AGGraphSetUpdate();
  *a1 = v12;
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t result;
  _OWORD v14[2];
  char v15;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v9 = *(_DWORD *)(v1 + 64);
  v10 = *(_QWORD *)(v1 + 72);
  v11 = *(_OWORD *)(v3 + 16);
  v14[0] = *(_OWORD *)v3;
  v14[1] = v11;
  v15 = *(_BYTE *)(v3 + 32);
  AGGraphClearUpdate();
  v12 = specialized closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v5, v6, v7, v8, v9, v10);
  result = AGGraphSetUpdate();
  *a1 = v12;
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t result;
  _OWORD v14[2];
  char v15;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v9 = *(_DWORD *)(v1 + 64);
  v10 = *(_QWORD *)(v1 + 72);
  v11 = *(_OWORD *)(v3 + 16);
  v14[0] = *(_OWORD *)v3;
  v14[1] = v11;
  v15 = *(_BYTE *)(v3 + 32);
  AGGraphClearUpdate();
  v12 = specialized closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v5, v6, v7, v8, v9, v10);
  result = AGGraphSetUpdate();
  *a1 = v12;
  return result;
}

{
  uint64_t v1;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t result;
  _OWORD v14[3];

  v3 = *(_OWORD **)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v9 = *(_DWORD *)(v1 + 64);
  v10 = *(_QWORD *)(v1 + 72);
  v11 = v3[1];
  v14[0] = *v3;
  v14[1] = v11;
  v14[2] = v3[2];
  AGGraphClearUpdate();
  v12 = specialized closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t *)v14, v4, v5, v6, v7, v8, v9, v10);
  result = AGGraphSetUpdate();
  *a1 = v12;
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.UnarySubtreeSequence)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.UnarySubtreeSequence);
  }
}

uint64_t outlined copy of PasteHelper?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of PasteHelper?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EmptyTuplePhase and conformance EmptyTuplePhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyTuplePhase and conformance EmptyTuplePhase;
  if (!lazy protocol witness table cache variable for type EmptyTuplePhase and conformance EmptyTuplePhase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EmptyTuplePhase, &type metadata for EmptyTuplePhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyTuplePhase and conformance EmptyTuplePhase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyTuplePhase and conformance EmptyTuplePhase;
  if (!lazy protocol witness table cache variable for type EmptyTuplePhase and conformance EmptyTuplePhase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EmptyTuplePhase, &type metadata for EmptyTuplePhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyTuplePhase and conformance EmptyTuplePhase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyTuplePhase and conformance EmptyTuplePhase;
  if (!lazy protocol witness table cache variable for type EmptyTuplePhase and conformance EmptyTuplePhase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EmptyTuplePhase, &type metadata for EmptyTuplePhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyTuplePhase and conformance EmptyTuplePhase);
  }
  return result;
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>.UnarySubtreeSequence)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>.UnarySubtreeSequence);
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>.UnarySubtreeSequence)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>.UnarySubtreeSequence);
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  uint64_t result;
  _OWORD v15[3];

  v6 = *(_OWORD **)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  v8 = *(_QWORD *)(v2 + 40);
  v9 = *(_QWORD *)(v2 + 48);
  v10 = *(_QWORD *)(v2 + 56);
  v11 = *(_DWORD *)(v2 + 64);
  v12 = *(_QWORD *)(v2 + 72);
  v13 = v6[1];
  v15[0] = *v6;
  v15[1] = v13;
  v15[2] = v6[2];
  result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v15, v5, v7, v8, v9, v10, v11, v12, a1);
  if (!v3)
    *a2 = result;
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
  }
}

uint64_t partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(void (*a1)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t))
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _OWORD v10[3];

  v3 = v1[2];
  v4 = v1[3];
  v6 = v1[4];
  v5 = (_OWORD *)v1[5];
  v7 = v1[6];
  v8 = v5[1];
  v10[0] = *v5;
  v10[1] = v8;
  v10[2] = v5[2];
  AGGraphClearUpdate();
  a1(v3, v4, v6, v10, v7);
  return AGGraphSetUpdate();
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.UnarySubtreeSequence)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.UnarySubtreeSequence);
  }
}

uint64_t partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t (*a1)(_OWORD *, uint64_t, _QWORD))
{
  _QWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  _QWORD *v4;
  __int128 v5;
  _OWORD v7[3];

  v3 = (_OWORD *)v1[2];
  v2 = v1[3];
  v4 = (_QWORD *)v1[4];
  v5 = v3[1];
  v7[0] = *v3;
  v7[1] = v5;
  v7[2] = v3[2];
  return a1(v7, v2, *v4);
}

uint64_t outlined retain of String?(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of String?(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for Binding<UIColor>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<UIColor>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    v0 = type metadata accessor for Binding();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<UIColor>);
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.UnarySubtreeSequence)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.UnarySubtreeSequence);
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.UnarySubtreeSequence)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.UnarySubtreeSequence);
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined retain of ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  id v11;
  char v13;
  char v14;
  uint64_t v15;
  void *v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_BYTE *)(a1 + 88);
  v10 = *(_QWORD *)(a1 + 112);
  v13 = *(_BYTE *)(a1 + 120);
  v14 = *(_BYTE *)(a1 + 136);
  v15 = *(_QWORD *)(a1 + 128);
  v16 = *(void **)(a1 + 176);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<Bool>.Content(v4, v5);
  outlined copy of Environment<Bool>.Content(v6, v7);
  outlined copy of Environment<Bool>.Content(v8, v9);
  outlined copy of Environment<Bool>.Content(v10, v13);
  outlined copy of Environment<Bool>.Content(v15, v14);
  swift_retain();
  v11 = v16;
  return a1;
}

uint64_t outlined release of ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_BYTE *)(a1 + 88);
  v10 = *(_QWORD *)(a1 + 112);
  v12 = *(_BYTE *)(a1 + 120);
  v13 = *(_BYTE *)(a1 + 136);
  v14 = *(_QWORD *)(a1 + 128);
  v15 = *(void **)(a1 + 176);
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<Bool>.Content(v4, v5);
  outlined consume of Environment<Bool>.Content(v6, v7);
  outlined consume of Environment<Bool>.Content(v8, v9);
  outlined consume of Environment<Bool>.Content(v10, v12);
  outlined consume of Environment<Bool>.Content(v14, v13);

  swift_release();
  return a1;
}

uint64_t outlined retain of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_BYTE *)(a1 + 88);
  v10 = *(_QWORD *)(a1 + 112);
  v12 = *(_BYTE *)(a1 + 120);
  v13 = *(_BYTE *)(a1 + 136);
  v14 = *(_QWORD *)(a1 + 128);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<Bool>.Content(v4, v5);
  outlined copy of Environment<Bool>.Content(v6, v7);
  outlined copy of Environment<Bool>.Content(v8, v9);
  outlined copy of Environment<Bool>.Content(v10, v12);
  outlined copy of Environment<Bool>.Content(v14, v13);
  swift_retain();
  return a1;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
  }
}

uint64_t outlined release of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_BYTE *)(a1 + 88);
  v10 = *(_QWORD *)(a1 + 112);
  v12 = *(_BYTE *)(a1 + 120);
  v13 = *(_BYTE *)(a1 + 136);
  v14 = *(_QWORD *)(a1 + 128);
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<Bool>.Content(v4, v5);
  outlined consume of Environment<Bool>.Content(v6, v7);
  outlined consume of Environment<Bool>.Content(v8, v9);
  outlined consume of Environment<Bool>.Content(v10, v12);
  outlined consume of Environment<Bool>.Content(v14, v13);
  swift_release();
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.UnarySubtreeSequence)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.UnarySubtreeSequence);
  }
}

unint64_t lazy protocol witness table accessor for type ScrollableItemLayoutComputer._LayoutEngine and conformance ScrollableItemLayoutComputer._LayoutEngine()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollableItemLayoutComputer._LayoutEngine and conformance ScrollableItemLayoutComputer._LayoutEngine;
  if (!lazy protocol witness table cache variable for type ScrollableItemLayoutComputer._LayoutEngine and conformance ScrollableItemLayoutComputer._LayoutEngine)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollableItemLayoutComputer._LayoutEngine, &unk_1E1AF7FD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollableItemLayoutComputer._LayoutEngine and conformance ScrollableItemLayoutComputer._LayoutEngine);
  }
  return result;
}

uint64_t partial apply for closure #1 in ScrollViewResponderFilter.updateValue()(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in ScrollViewResponderFilter.updateValue()(a1, v1);
}

unint64_t lazy protocol witness table accessor for type TemplateViewPhase and conformance TemplateViewPhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TemplateViewPhase and conformance TemplateViewPhase;
  if (!lazy protocol witness table cache variable for type TemplateViewPhase and conformance TemplateViewPhase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TemplateViewPhase, &unk_1E1AC72C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemplateViewPhase and conformance TemplateViewPhase);
  }
  return result;
}

uint64_t sub_18709578C()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of ToolbarItemPlacement.Role(uint64_t a1)
{
  destroy for ToolbarItemPlacement.Role(a1);
  return a1;
}

void *type metadata accessor for TemplateViewPhase()
{
  return &unk_1E1AC72C8;
}

void *type metadata accessor for ScrollableItemLayoutComputer._LayoutEngine()
{
  return &unk_1E1AF7FD0;
}

uint64_t type metadata completion function for AnyViewVisitor()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnyViewVisitor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64) + 7;
  v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
  }
  else
  {
    v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v16 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v15, v16, v5);
    v17 = (v10 + (((unint64_t)v4 + v9) & v15)) & 0xFFFFFFFFFFFFFFF8;
    v18 = (v10 + v16) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v19 = *(_QWORD *)(v18 + 8);
    *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
    *(_QWORD *)(v17 + 8) = v19;
    *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AnyViewVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((*(_QWORD *)(v4 + 64)
                                                                                            + a1
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
  return swift_release();
}

uint64_t initializeWithCopy for AnyViewVisitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v16 = *(_BYTE *)(v15 + 16);
  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
  *(_BYTE *)(v14 + 16) = v16;
  *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnyViewVisitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  swift_retain();
  swift_release();
  v16 = *(_QWORD *)(v15 + 8);
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  *(_QWORD *)(v14 + 8) = v16;
  *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 24);
  return a1;
}

uint64_t initializeWithTake for AnyViewVisitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (_OWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_OWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  return a1;
}

uint64_t assignWithTake for AnyViewVisitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  swift_release();
  v16 = *(_QWORD *)(v15 + 8);
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  *(_QWORD *)(v14 + 8) = v16;
  *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyViewVisitor(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0x7FFFFFFE)
    v9 = 2147483646;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v5 + 64) + v10;
  v12 = *(_QWORD *)(v7 + 64) + 7;
  if (v9 >= a2)
  {
    if (v6 == v9)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
    }
    else
    {
      v17 = (v11 + a1) & ~v10;
      if (v8 == v9)
      {
        return (*(uint64_t (**)(uint64_t))(v7 + 48))(v17);
      }
      else
      {
        v18 = *(_QWORD *)((v12 + v17) & 0xFFFFFFFFFFFFF8);
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        if ((v18 + 1) >= 2)
          return v18;
        else
          return 0;
      }
    }
  }
  else
  {
    if (((((v12 + (v11 & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 32) & 0xFFFFFFF8) != 0)
      v13 = 2;
    else
      v13 = a2 - v9 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187095D70 + 4 * byte_187C053D4[v15]))();
  }
}

void storeEnumTagSinglePayload for AnyViewVisitor(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE)
    v7 = 2147483646;
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_19;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64) + 7 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v9 = a3 - v7 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_19:
      __asm { BR              X0 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7 + ((*(_QWORD *)(v5 + 64) + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 32);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_187095F3C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187095FE0);
}

void sub_187095F44(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187095F4CLL);
  JUMPOUT(0x187095FE0);
}

void sub_187095F90()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187095FE0);
}

void sub_187095F98()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187095FE0);
}

uint64_t sub_187095FA0(uint64_t a1, int a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v12 + v13) = 0;
  if (!a2)
    JUMPOUT(0x187095FE0);
  if (v6 == v9)
  {
    v3 = *(uint64_t (**)(uint64_t))(v10 + 56);
    v4 = v12;
  }
  else
  {
    v4 = (v11 + v12) & v7;
    if (a3 != v9)
      JUMPOUT(0x187095FACLL);
    v3 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }
  return v3(v4);
}

uint64_t getEnumTagSinglePayload for ScrollableItemGeometry(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ScrollableItemGeometry(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

uint64_t destroy for ScrollableLayoutState.TemplateView(uint64_t a1)
{

  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ScrollableLayoutState.TemplateView(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  *a1 = *a2;
  v3 = (void *)a2[1];
  v4 = a2[2];
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = a2[3];
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ScrollableLayoutState.TemplateView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return a1;
}

uint64_t assignWithTake for ScrollableLayoutState.TemplateView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollableLayoutState.TemplateView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollableLayoutState.TemplateView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void base witness table accessor for _AttributeBody in ScrollableItemGeometry<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ScrollableItemIdentifier<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined destroy of NavigationAuthority(uint64_t a1)
{
  destroy for NavigationAuthority();
  return a1;
}

uint64_t sub_18709625C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in _NavigationSplitReader.PreparedColumn.updateValue()(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in _NavigationSplitReader.PreparedColumn.updateValue()(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

uint64_t partial apply for specialized closure #1 in _NavigationSplitReader.PreparedColumn.columnSeeds.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;

  return specialized closure #1 in _NavigationSplitReader.PreparedColumn.columnSeeds.getter(*(_QWORD *)(v1 + 16), a1);
}

{
  return partial apply for specialized closure #1 in _NavigationSplitReader.PreparedColumn.columnSeeds.getter(a1);
}

unint64_t lazy protocol witness table accessor for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail> and conformance _NavigationSplitReader.PreparedColumn<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail> and conformance _NavigationSplitReader.PreparedColumn<A>;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail> and conformance _NavigationSplitReader.PreparedColumn<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Detail, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationSplitReader.PreparedColumn<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail> and conformance _NavigationSplitReader.PreparedColumn<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail> and conformance _NavigationSplitReader.PreparedColumn<A>;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail> and conformance _NavigationSplitReader.PreparedColumn<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Detail, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationSplitReader.PreparedColumn<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail> and conformance _NavigationSplitReader.PreparedColumn<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a3, a4, (uint64_t)&type metadata for InjectKeyModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>();
    v5 = type metadata accessor for ModifiedContent();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t type metadata accessor for StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<Binding<PresentationMode>>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyTransformModifier<Binding<PresentationMode>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Binding<PresentationMode>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationMode>, (uint64_t)&type metadata for PresentationMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Binding<PresentationMode>>);
  }
}

uint64_t outlined copy of NavigationState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t result;

  if (a4)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    outlined copy of NavigationListState?(a5, a6);
    return outlined copy of NavigationSplitViewState?(a11, a12, a13, a14, a15, a16, a17, a18);
  }
  return result;
}

uint64_t outlined copy of NavigationSplitViewState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a3 != 1)
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(a2, a3);
    outlined copy of AppIntentExecutor?(a5);
    return outlined copy of Binding<NavigationSplitViewColumn>?(a7, a8);
  }
  return result;
}

uint64_t outlined retain of NavigationState?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))
{
  __int16 v4;

  v4 = *(_WORD *)(a1 + 144);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), v4);
  return a1;
}

uint64_t outlined consume of NavigationState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    outlined consume of NavigationListState?(a5, a6);
    return outlined consume of NavigationSplitViewState?(a11, a12, a13, a14, a15, a16, a17, a18);
  }
  return result;
}

uint64_t outlined consume of NavigationSplitViewState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a3 != 1)
  {
    outlined consume of Binding<NavigationSplitViewColumn>?(a2, a3);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a5);
    return outlined consume of Binding<NavigationSplitViewColumn>?(a7, a8);
  }
  return result;
}

uint64_t outlined init with take of NavigationAuthority(uint64_t a1, uint64_t a2)
{
  initializeWithTake for NavigationAuthority(a2, a1);
  return a2;
}

void type metadata accessor for LocationBox<_NavigationSplitReader.SplitPresentationModeLocation>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for LocationBox<_NavigationSplitReader.SplitPresentationModeLocation>)
  {
    type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _NavigationSplitReader.SplitPresentationModeLocation and conformance _NavigationSplitReader.SplitPresentationModeLocation, (uint64_t (*)(uint64_t))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation, (uint64_t)&protocol conformance descriptor for _NavigationSplitReader.SplitPresentationModeLocation);
    v0 = type metadata accessor for LocationBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LocationBox<_NavigationSplitReader.SplitPresentationModeLocation>);
  }
}

unint64_t lazy protocol witness table accessor for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content> and conformance _NavigationSplitReader.PreparedColumn<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content> and conformance _NavigationSplitReader.PreparedColumn<A>;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content> and conformance _NavigationSplitReader.PreparedColumn<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationSplitReader.PreparedColumn<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content> and conformance _NavigationSplitReader.PreparedColumn<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content> and conformance _NavigationSplitReader.PreparedColumn<A>;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content> and conformance _NavigationSplitReader.PreparedColumn<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationSplitReader.PreparedColumn<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content> and conformance _NavigationSplitReader.PreparedColumn<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar> and conformance _NavigationSplitReader.PreparedColumn<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar> and conformance _NavigationSplitReader.PreparedColumn<A>;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar> and conformance _NavigationSplitReader.PreparedColumn<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationSplitReader.PreparedColumn<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar> and conformance _NavigationSplitReader.PreparedColumn<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar> and conformance _NavigationSplitReader.PreparedColumn<A>;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar> and conformance _NavigationSplitReader.PreparedColumn<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationSplitReader.PreparedColumn<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar> and conformance _NavigationSplitReader.PreparedColumn<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>(255, a3, a4, a5);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v6 = type metadata accessor for ModifiedContent();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
}

uint64_t outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(uint64_t a1)
{
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
}

uint64_t outlined init with copy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
  }
}

uint64_t outlined init with take of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.UnarySubtreeSequence)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.UnarySubtreeSequence);
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.UnarySubtreeSequence)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.UnarySubtreeSequence);
  }
}

void type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.UnarySubtreeSequence)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.UnarySubtreeSequence);
  }
}

void type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.UnarySubtreeSequence)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.UnarySubtreeSequence);
  }
}

void type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  }
}

uint64_t outlined destroy of PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.UnarySubtreeSequence)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.UnarySubtreeSequence);
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>);
  }
}

uint64_t sub_187097D6C()
{
  uint64_t v0;
  unint64_t v1;

  if (*(unsigned __int8 *)(v0 + 86) != 255)
  {
    v1 = (*(unsigned int *)(v0 + 80) | ((unint64_t)((*(unsigned __int16 *)(v0 + 84) | (*(unsigned __int8 *)(v0 + 86) << 16)) & 0xFFFFFF) << 32)) >> 48;
    switch((_DWORD)v1)
    {
      case 2:
        goto LABEL_5;
      case 1:
LABEL_6:
        swift_release();
        return swift_deallocObject();
      case 0:
LABEL_5:
        __swift_destroy_boxed_opaque_existential_1(v0 + 16);
        goto LABEL_6;
    }
  }
  return swift_deallocObject();
}

void type metadata accessor for (value: AccessibilityScrollableContextModifier, changed: Bool)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (value: AccessibilityScrollableContextModifier, changed: Bool))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (value: AccessibilityScrollableContextModifier, changed: Bool));
  }
}

uint64_t sub_187097E50()
{
  uint64_t v0;

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput;
  if (!lazy protocol witness table cache variable for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsPlatformItemListSourceInput, &type metadata for IsPlatformItemListSourceInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput;
  if (!lazy protocol witness table cache variable for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsPlatformItemListSourceInput, &type metadata for IsPlatformItemListSourceInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.UnarySubtreeSequence)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.UnarySubtreeSequence);
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
}

uint64_t outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(uint64_t a1)
{
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
}

uint64_t outlined init with copy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
  }
}

uint64_t outlined init with take of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.UnarySubtreeSequence)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.UnarySubtreeSequence);
  }
}

void type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  }
}

uint64_t outlined init with take of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.UnarySubtreeSequence)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.UnarySubtreeSequence);
  }
}

void type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  }
}

uint64_t outlined init with take of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.UnarySubtreeSequence)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.UnarySubtreeSequence);
  }
}

uint64_t outlined init with copy of NavigationAuthority(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for NavigationAuthority(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type NavigationStrategy_Phone and conformance NavigationStrategy_Phone()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationStrategy_Phone and conformance NavigationStrategy_Phone;
  if (!lazy protocol witness table cache variable for type NavigationStrategy_Phone and conformance NavigationStrategy_Phone)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStrategy_Phone, &type metadata for NavigationStrategy_Phone);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationStrategy_Phone and conformance NavigationStrategy_Phone);
  }
  return result;
}

void type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
  }
}

uint64_t outlined init with take of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.UnarySubtreeSequence)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.UnarySubtreeSequence);
  }
}

uint64_t outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v2, v3, v4);
  v6 = v5;
  return a1;
}

uint64_t outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v2, v3, v4);

  return a1;
}

void type metadata accessor for Binding<TabViewCustomization>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for Binding<TabViewCustomization>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for Binding<TabViewCustomization>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Binding<TabViewCustomization>, (uint64_t (*)(uint64_t))type metadata accessor for TabViewCustomization, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
}

uint64_t outlined copy of TabSidebarAccessoryViewConfiguration?(uint64_t result)
{
  if (result != 1)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of PlatformViewRepresentableAdaptor<UIKitPagingView>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  }
}

uint64_t outlined destroy of PlatformViewRepresentableAdaptor<UIKitPagingView>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>.UnarySubtreeSequence)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>.UnarySubtreeSequence);
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>.UnarySubtreeSequence)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>.UnarySubtreeSequence);
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.UnarySubtreeSequence)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.UnarySubtreeSequence);
  }
}

uint64_t outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v2, v3, v4);
  return a1;
}

uint64_t outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v2, v3, v4);
  return a1;
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
}

uint64_t outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(uint64_t a1)
{
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
}

uint64_t outlined init with copy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
  }
}

uint64_t outlined init with take of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.UnarySubtreeSequence)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.UnarySubtreeSequence);
  }
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
}

uint64_t outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(uint64_t a1)
{
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
}

uint64_t outlined init with copy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
  }
}

uint64_t outlined init with take of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.UnarySubtreeSequence)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.UnarySubtreeSequence);
  }
}

uint64_t outlined init with take of WeakBox<UITextField>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for WeakBox<UITextField>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for WeakBox<UITextField>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WeakBox<UITextField>)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UITextField);
    v0 = type metadata accessor for WeakBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UITextField>);
  }
}

uint64_t outlined destroy of PlatformTextFieldCoordinator.FieldStorage(uint64_t a1)
{
  destroy for UIKitScenePresentationModeLocation();
  return a1;
}

uint64_t outlined init with take of TextField<_TextFieldStyleLabel>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  return result;
}

uint64_t outlined init with copy of TextField<_TextFieldStyleLabel>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TextField<_TextFieldStyleLabel>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
}

uint64_t outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(uint64_t a1)
{
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
}

void type metadata accessor for ((_:))?(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for (_:)(255, a3, a4);
    v5 = type metadata accessor for Optional();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t outlined init with copy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
  }
}

uint64_t outlined init with take of PlatformViewRepresentableAdaptor<TextViewAdaptor>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.UnarySubtreeSequence)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.UnarySubtreeSequence);
  }
}

void type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  }
}

uint64_t outlined init with take of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t objectdestroy_106Tm()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.UnarySubtreeSequence)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.UnarySubtreeSequence);
  }
}

uint64_t outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v2, v3, v4);
  swift_retain();
  return a1;
}

uint64_t outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v2, v3, v4);
  swift_release();
  return a1;
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewLeafView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>);
}

uint64_t outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>(uint64_t a1)
{
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>);
}

void type metadata accessor for ((_:))?(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for (_:)(255, a3, a4);
    v5 = type metadata accessor for Optional();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?)(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  v5 = *a1;
  v2(&v4, &v5);
  return v4;
}

uint64_t outlined destroy of (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, changed: Bool)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  type metadata accessor for (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, changed: Bool)(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined init with copy of PlatformViewRepresentableAdaptor<KitRepresentable>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()@<X0>(uint64_t (*a1)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t result;
  _OWORD v16[3];

  v4 = *(_OWORD **)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 32);
  v7 = *(_QWORD *)(v2 + 40);
  v8 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v10 = *(unsigned int *)(v2 + 64);
  v11 = *(_QWORD *)(v2 + 72);
  v12 = v4[1];
  v16[0] = *v4;
  v16[1] = v12;
  v16[2] = v4[2];
  AGGraphClearUpdate();
  v13 = a1(v16, v5, v6, v7, v8, v9, v10, v11);
  result = AGGraphSetUpdate();
  *a2 = v13;
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewChild(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>>);
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>);
  }
}

uint64_t outlined init with take of PlatformViewRepresentableAdaptor<KitRepresentable>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformViewRepresentableAdaptor<KitRepresentable>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>.UnarySubtreeSequence)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>.UnarySubtreeSequence);
  }
}

uint64_t closure #1 in perform #1 <A>(work:) in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()partial apply()
{
  return partial apply for closure #1 in perform #1 <A>(work:) in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()();
}

uint64_t closure #1 in RepresentableContextValues.environment.getterpartial apply@<X0>(_QWORD *a1@<X8>)
{
  return partial apply for closure #1 in RepresentableContextValues.environment.getter(a1);
}

uint64_t IntelligenceSupportProviding<>.collectContent(in:remoteContextWrapper:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  uint64_t v16;

  type metadata accessor for IntelligenceCollectionCoordinator();
  static IntelligenceCollectionCoordinator.shared.getter();
  v16 = IntelligenceCollectionCoordinator.createCollector(remoteContextWrapper:)();
  swift_release();
  collect #1 <A>(into:) in IntelligenceSupportProviding<>.collectContent(in:remoteContextWrapper:)(v16, v8, a1, a2, a3, a4, a6, a7, a8);
  return swift_release();
}

uint64_t collect #1 <A>(into:) in IntelligenceSupportProviding<>.collectContent(in:remoteContextWrapper:)(uint64_t a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!CGRectIsEmpty(*(CGRect *)&a3))
    IntelligenceSupportProviding<>.collectContent(in:root:fragmentCollector:)(a2, a8, a9, a1, a3, a4, a5, a6);
  type metadata accessor for IntelligenceCollectionCoordinator();
  static IntelligenceCollectionCoordinator.shared.getter();
  IntelligenceCollectionCoordinator.finishCollection(_:)();
  return swift_release();
}

uint64_t IntelligenceSupportProviding<>.collectContent(in:root:fragmentCollector:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];

  v27 = a3;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for IntelligenceElement?, (void (*)(uint64_t))MEMORY[0x1E0DC16F0]);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v26 - v17;
  v19 = type metadata accessor for IntelligenceElement();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v26 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  ViewRendererHost.scrapeContent()();
  v28[0] = v28[1];
  v24 = a1;
  swift_retain();
  IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)((unint64_t *)v28, v24, a2, v27, a4, v18, a5, a6, a7, a8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
    return outlined destroy of IntelligenceElement?((uint64_t)v18, &lazy cache variable for type metadata for IntelligenceElement?, (void (*)(uint64_t))MEMORY[0x1E0DC16F0]);
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v23, v18, v19);
  IntelligenceFragmentCollector.collect(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
}

uint64_t IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>, CGFloat a7@<D0>, CGFloat a8@<D1>, CGFloat a9@<D2>, CGFloat a10@<D3>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  id v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  id v68;
  void (*v69)(char *, char *, uint64_t);
  char *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t, uint64_t);
  CGFloat v88;
  CGFloat v89;
  CGFloat v90;
  CGFloat v91;
  char *v92;
  char *v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v96;
  void (*v97)(char *, uint64_t, uint64_t);
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  __int128 v116;
  __int128 v117;
  CGRect v118;
  CGRect v119;
  CGRect v120;

  v108 = a5;
  v113 = a3;
  v114 = a4;
  v115 = a2;
  v16 = type metadata accessor for IntelligenceElement.Content();
  v99 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v100 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for IntelligenceElement?, (void (*)(uint64_t))MEMORY[0x1E0DC16F0]);
  MEMORY[0x1E0C80A78](v19, v20);
  v98 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v98 - v24;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v98 - v28;
  v30 = type metadata accessor for IntelligenceElement();
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v32);
  v34 = (char *)&v98 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  v111 = (char *)&v98 - v37;
  MEMORY[0x1E0C80A78](v38, v39);
  v106 = (char *)&v98 - v40;
  MEMORY[0x1E0C80A78](v41, v42);
  *(_QWORD *)&v116 = (char *)&v98 - v43;
  MEMORY[0x1E0C80A78](v44, v45);
  v105 = (char *)&v98 - v46;
  MEMORY[0x1E0C80A78](v47, v48);
  v50 = (char *)&v98 - v49;
  v51 = *a1;
  v112 = a1[1];
  v107 = v51;
  if (v51 >> 62)
  {
    swift_bridgeObjectRetain_n();
    result = _CocoaArrayWrapper.endIndex.getter();
    v52 = result;
  }
  else
  {
    v52 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain_n();
  }
  v103 = a6;
  v102 = v50;
  v101 = v16;
  v104 = v34;
  if (v52)
  {
    if (v52 < 1)
    {
LABEL_44:
      __break(1u);
      return result;
    }
    v54 = 0;
    v56 = v107;
    v55 = v108;
    v109 = v107 & 0xC000000000000001;
    v57 = (char *)MEMORY[0x1E0DEE9D8];
    v110 = v52;
    do
    {
      if (v109)
      {
        v58 = MEMORY[0x18D75E3BC](v54, v56);
      }
      else
      {
        v58 = *(_QWORD *)(v56 + 8 * v54 + 32);
        swift_retain();
      }
      v59 = v115;
      swift_retain();
      IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)(v58, v59, v113, v114, v55, (uint64_t)v29, a7, a8, a9, a10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
      {
        outlined destroy of IntelligenceElement?((uint64_t)v29, &lazy cache variable for type metadata for IntelligenceElement?, (void (*)(uint64_t))MEMORY[0x1E0DC16F0]);
      }
      else
      {
        v60 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
        v61 = v105;
        v60(v105, v29, v30);
        v60((char *)v116, v61, v30);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v57 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v57 + 2) + 1, 1, v57);
        v63 = *((_QWORD *)v57 + 2);
        v62 = *((_QWORD *)v57 + 3);
        if (v63 >= v62 >> 1)
          v57 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1, v57);
        *((_QWORD *)v57 + 2) = v63 + 1;
        v60(&v57[((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(_QWORD *)(v31 + 72) * v63], (char *)v116, v30);
        v56 = v107;
      }
      ++v54;
    }
    while (v110 != v54);
  }
  else
  {
    v57 = (char *)MEMORY[0x1E0DEE9D8];
    v55 = v108;
  }
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v64 = v112;
  v65 = *(_QWORD *)(v112 + 16);
  if (v65)
  {
    swift_bridgeObjectRetain();
    v66 = 0;
    v67 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      v116 = *(_OWORD *)(v64 + 16 * v66 + 32);
      v117 = v116;
      v68 = v115;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)(&v117, v68, v113, v114, v55, a7, a8, a9, a10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v25, 1, v30) == 1)
      {
        outlined destroy of IntelligenceElement?((uint64_t)v25, &lazy cache variable for type metadata for IntelligenceElement?, (void (*)(uint64_t))MEMORY[0x1E0DC16F0]);
      }
      else
      {
        v69 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
        v70 = v106;
        v69(v106, v25, v30);
        v69(v111, v70, v30);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v67 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v67 + 2) + 1, 1, v67);
        v72 = *((_QWORD *)v67 + 2);
        v71 = *((_QWORD *)v67 + 3);
        if (v72 >= v71 >> 1)
          v67 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1, v72 + 1, 1, v67);
        *((_QWORD *)v67 + 2) = v72 + 1;
        v69(&v67[((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(_QWORD *)(v31 + 72) * v72], v111, v30);
        v55 = v108;
      }
      ++v66;
      v64 = v112;
    }
    while (v65 != v66);
    swift_bridgeObjectRelease();
  }
  else
  {
    v67 = (char *)MEMORY[0x1E0DEE9D8];
  }
  result = swift_bridgeObjectRelease();
  v73 = *((_QWORD *)v67 + 2);
  v74 = *((_QWORD *)v57 + 2);
  v75 = __OFADD__(v73, v74);
  v76 = v73 + v74;
  v77 = v104;
  if (v75)
  {
    __break(1u);
    goto LABEL_44;
  }
  *(_QWORD *)&v117 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v76 & ~(v76 >> 63), 0, MEMORY[0x1E0DEE9D8]);
  v78 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v78);
  v79 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v79);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v80 = *(_QWORD *)(v117 + 16);
  if (v80 <= 1)
  {
    if (v80)
    {
      v94 = (uint64_t)v98;
      (*(void (**)(char *, unint64_t, uint64_t))(v31 + 16))(v98, v117 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80)), v30);
      v95 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56);
      v95(v94, 0, 1, v30);
    }
    else
    {
      v95 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56);
      v94 = (uint64_t)v98;
      v95((uint64_t)v98, 1, 1, v30);
    }
    v93 = v103;
    v96 = v102;

    swift_release();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v94, 1, v30) == 1)
    {
      outlined destroy of IntelligenceElement?(v94, &lazy cache variable for type metadata for IntelligenceElement?, (void (*)(uint64_t))MEMORY[0x1E0DC16F0]);
      return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v95)(v93, 1, 1, v30);
    }
    v97 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 32);
    v97(v96, v94, v30);
    v97(v93, (uint64_t)v96, v30);
  }
  else
  {
    x = *MEMORY[0x1E0C9D628];
    y = *(double *)(MEMORY[0x1E0C9D628] + 8);
    width = *(double *)(MEMORY[0x1E0C9D628] + 16);
    height = *(double *)(MEMORY[0x1E0C9D628] + 24);
    v85 = v117 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
    v86 = *(_QWORD *)(v31 + 72);
    v87 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v87(v77, v85, v30);
      IntelligenceElement.boundingBox.getter();
      v120.origin.x = v88;
      v120.origin.y = v89;
      v120.size.width = v90;
      v120.size.height = v91;
      v118.origin.x = x;
      v118.origin.y = y;
      v118.size.width = width;
      v118.size.height = height;
      v119 = CGRectUnion(v118, v120);
      x = v119.origin.x;
      y = v119.origin.y;
      width = v119.size.width;
      height = v119.size.height;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v77, v30);
      v85 += v86;
      --v80;
    }
    while (v80);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, _QWORD, uint64_t))(v99 + 104))(v100, *MEMORY[0x1E0DC16B0], v101);
    v92 = v102;
    IntelligenceElement.init(boundingBox:content:subelements:)();

    swift_release();
    v93 = v103;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v103, v92, v30);
  }
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v93, 0, 1, v30);
}

uint64_t IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, CGFloat a7@<D0>, CGFloat a8@<D1>, CGFloat a9@<D2>, CGFloat a10@<D3>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  char *v62;
  void (*v63)(char *, char *, uint64_t);
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  void (*v80)(_QWORD *, _QWORD);
  double v81;
  CGFloat v82;
  double v83;
  CGFloat v84;
  double v85;
  CGFloat v86;
  double v87;
  CGFloat v88;
  char *v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  char *v92;
  CGFloat v93;
  CGFloat v94;
  CGFloat v95;
  CGFloat v96;
  char *v97;
  void (*v98)(char *, uint64_t);
  unsigned int v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(_QWORD *, _QWORD);
  uint64_t v104;
  double v105;
  CGFloat x;
  double v107;
  CGFloat y;
  double v109;
  CGFloat width;
  double v111;
  CGFloat height;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  CGFloat v118;
  CGFloat v119;
  CGFloat v120;
  CGFloat v121;
  char *v122;
  void (*v123)(uint64_t, char *, uint64_t);
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  void (*v134)(char *, char *, uint64_t);
  id v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  unsigned int (*v139)(char *, uint64_t, uint64_t);
  uint64_t v140;
  char *v141;
  _QWORD v142[2];
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  CGRect v147;
  CGRect v148;
  CGRect v149;
  CGRect v150;
  CGRect v151;
  CGRect v152;

  v140 = a4;
  v131 = a6;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for IntelligenceElement?, (void (*)(uint64_t))MEMORY[0x1E0DC16F0]);
  MEMORY[0x1E0C80A78](v18, v19);
  v129 = (char *)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v125 - v23;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v125 - v27;
  v29 = type metadata accessor for IntelligenceElement();
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v31);
  v141 = (char *)&v125 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v137 = (char *)&v125 - v35;
  MEMORY[0x1E0C80A78](v36, v37);
  v132 = (char *)&v125 - v38;
  MEMORY[0x1E0C80A78](v39, v40);
  v130 = (char *)&v125 - v41;
  MEMORY[0x1E0C80A78](v42, v43);
  v45 = (char *)&v125 - v44;
  MEMORY[0x1E0C80A78](v46, v47);
  v128 = (char *)&v125 - v48;
  v49 = *(_QWORD *)(a1 + 24);
  v50 = *(_QWORD *)(a1 + 48);
  v142[0] = *(_QWORD *)(a1 + 16);
  v142[1] = v49;
  v143 = *(_OWORD *)(a1 + 32);
  v144 = v50;
  v145 = *(_OWORD *)(a1 + 56);
  v146 = *(_OWORD *)(a1 + 72);
  swift_retain();
  v51 = a2;
  swift_retain();
  swift_retain();
  v138 = a3;
  IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)((uint64_t)v142, v51, a3, v140, a5, (uint64_t)v28, a7, a8, a9, a10);
  v139 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  if (v139(v28, 1, v29) != 1)
  {
    v135 = v51;
    v133 = v30;
    v54 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    v127 = v45;
    v134 = v54;
    v54(v45, v28, v29);
    swift_beginAccess();
    v55 = *(_QWORD *)(a1 + 88);
    if (v55 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v56 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      v56 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
    }
    v136 = a5;
    v126 = a1;
    if (v56)
    {
      if (v56 < 1)
      {
        __break(1u);
        JUMPOUT(0x18709D560);
      }
      v57 = 0;
      v58 = (char *)MEMORY[0x1E0DEE9D8];
      v59 = v136;
      do
      {
        if ((v55 & 0xC000000000000001) != 0)
        {
          v60 = MEMORY[0x18D75E3BC](v57, v55);
        }
        else
        {
          v60 = *(_QWORD *)(v55 + 8 * v57 + 32);
          swift_retain();
        }
        v61 = v135;
        swift_retain();
        IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)(v60, v61, v138, v140, v59, a7, a8, a9, a10);
        if (v139(v24, 1, v29) == 1)
        {
          outlined destroy of IntelligenceElement?((uint64_t)v24, &lazy cache variable for type metadata for IntelligenceElement?, (void (*)(uint64_t))MEMORY[0x1E0DC16F0]);
        }
        else
        {
          v62 = v132;
          v63 = v134;
          v134(v132, v24, v29);
          v63(v137, v62, v29);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v58 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v58 + 2) + 1, 1, v58);
          v65 = *((_QWORD *)v58 + 2);
          v64 = *((_QWORD *)v58 + 3);
          if (v65 >= v64 >> 1)
            v58 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1, v58);
          *((_QWORD *)v58 + 2) = v65 + 1;
          v134(&v58[((*(unsigned __int8 *)(v133 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80))+ *(_QWORD *)(v133 + 72) * v65], v137, v29);
        }
        ++v57;
      }
      while (v56 != v57);
    }
    else
    {
      v58 = (char *)MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease_n();
    v66 = *((_QWORD *)v58 + 2);
    v30 = v133;
    if (v66)
    {
      v67 = (*(unsigned __int8 *)(v133 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80);
      v68 = *(void (**)(char *, char *, uint64_t))(v133 + 16);
      v69 = v130;
      v68(v130, &v58[v67], v29);
      if (*((_QWORD *)v58 + 2) == 1)
      {
        switch(*(_QWORD *)(v126 + 24) >> 60)
        {
          case 3:
            swift_retain();
            swift_bridgeObjectRelease();
            IntelligenceElement.appEntityIdentifier.getter();
            v53 = v131;
            if (v70)
            {
              v30 = v133;
              v71 = v127;
            }
            else
            {
              v71 = v127;
              IntelligenceElement.appEntityIdentifier.getter();
              v30 = v133;
            }
            IntelligenceElement.appEntityIdentifier.setter();
            goto LABEL_44;
          case 4:
            swift_retain();
            swift_bridgeObjectRelease();
            IntelligenceElement.appIntentIdentifier.getter();
            v53 = v131;
            if (v72)
            {
              v30 = v133;
              v71 = v127;
            }
            else
            {
              v71 = v127;
              IntelligenceElement.appIntentIdentifier.getter();
              v30 = v133;
            }
            IntelligenceElement.appIntentIdentifier.setter();
LABEL_44:
            swift_release();
            swift_release();
            goto LABEL_52;
          case 5:
            swift_retain();
            IntelligenceElement.accessibilityLabel.getter();
            v74 = v73;
            swift_bridgeObjectRelease();
            if (v74)
              goto LABEL_31;
            swift_bridgeObjectRelease();
            v71 = v127;
            IntelligenceElement.accessibilityLabel.getter();
            IntelligenceElement.accessibilityLabel.setter();
            goto LABEL_51;
          case 6:
            swift_retain();
            v75 = IntelligenceElement.appIntentsPayload.getter();
            v77 = v76;
            outlined consume of Data?(v75, v76);
            if (v77 >> 60 != 15
              || (v78 = *(_QWORD *)(IntelligenceElement.appIntentsPayloadDebugDescription.getter() + 16),
                  swift_bridgeObjectRelease(),
                  v78))
            {
LABEL_31:
              swift_release();
              goto LABEL_32;
            }
            swift_bridgeObjectRelease();
            v102 = IntelligenceElement.subelements.getter();
            v103 = (void (*)(_QWORD *, _QWORD))IntelligenceElement.subelements.modify();
            specialized Array.append<A>(contentsOf:)(v102);
            v103(v142, 0);
            v104 = IntelligenceElement.subelements.getter();
            IntelligenceElement.boundingBox.getter();
            x = v105;
            y = v107;
            width = v109;
            height = v111;
            v113 = *(_QWORD *)(v104 + 16);
            if (v113)
            {
              v114 = v104 + v67;
              v115 = v133;
              v116 = *(_QWORD *)(v133 + 72);
              swift_bridgeObjectRetain();
              v117 = v141;
              do
              {
                v68(v117, (char *)v114, v29);
                IntelligenceElement.boundingBox.getter();
                v117 = v141;
                v152.origin.x = v118;
                v152.origin.y = v119;
                v152.size.width = v120;
                v152.size.height = v121;
                v149.origin.x = x;
                v149.origin.y = y;
                v149.size.width = width;
                v149.size.height = height;
                v150 = CGRectUnion(v149, v152);
                x = v150.origin.x;
                y = v150.origin.y;
                width = v150.size.width;
                height = v150.size.height;
                (*(void (**)(char *, uint64_t))(v115 + 8))(v117, v29);
                v114 += v116;
                --v113;
              }
              while (v113);
              swift_bridgeObjectRelease_n();
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            IntelligenceElement.boundingBox.setter();
            v71 = v127;
            IntelligenceElement.appIntentsPayload.getter();
            IntelligenceElement.appIntentsPayload.setter();
            IntelligenceElement.appIntentsPayloadDebugDescription.getter();
            IntelligenceElement.appIntentsPayloadDebugDescription.setter();
LABEL_51:
            swift_release();
            swift_release();
            v53 = v131;
            v30 = v133;
LABEL_52:

            swift_release();
            (*(void (**)(char *, uint64_t))(v30 + 8))(v71, v29);
            v100 = v130;
            break;
          default:
            goto LABEL_32;
        }
        goto LABEL_53;
      }
LABEL_32:
      v30 = v133;
      (*(void (**)(char *, uint64_t))(v133 + 8))(v69, v29);
    }
    swift_bridgeObjectRetain();
    v79 = v127;
    v80 = (void (*)(_QWORD *, _QWORD))IntelligenceElement.subelements.modify();
    specialized Array.append<A>(contentsOf:)((uint64_t)v58);
    v80(v142, 0);
    IntelligenceElement.boundingBox.getter();
    v82 = v81;
    v84 = v83;
    v86 = v85;
    v88 = v87;
    if (v66)
    {
      v89 = &v58[(*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80)];
      v90 = *(_QWORD *)(v30 + 72);
      v91 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
      swift_bridgeObjectRetain();
      v92 = v141;
      do
      {
        v91(v92, v89, v29);
        IntelligenceElement.boundingBox.getter();
        v92 = v141;
        v151.origin.x = v93;
        v151.origin.y = v94;
        v151.size.width = v95;
        v151.size.height = v96;
        v147.origin.x = v82;
        v147.origin.y = v84;
        v147.size.width = v86;
        v147.size.height = v88;
        v148 = CGRectUnion(v147, v151);
        v82 = v148.origin.x;
        v84 = v148.origin.y;
        v86 = v148.size.width;
        v88 = v148.size.height;
        (*(void (**)(char *, uint64_t))(v30 + 8))(v92, v29);
        v89 += v90;
        --v66;
      }
      while (v66);
      swift_bridgeObjectRelease_n();
      v79 = v127;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    IntelligenceElement.boundingBox.setter();
    v97 = v141;
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v141, v79, v29);
    v52 = (uint64_t)v129;
    IntelligenceElement.pruned()();
    swift_release();

    swift_release();
    v98 = *(void (**)(char *, uint64_t))(v30 + 8);
    v98(v97, v29);
    v98(v79, v29);
    v99 = v139((char *)v52, 1, v29);
    v100 = (char *)v52;
    v53 = v131;
    if (v99 == 1)
      goto LABEL_39;
LABEL_53:
    v122 = v128;
    v123 = (void (*)(uint64_t, char *, uint64_t))v134;
    v134(v128, v100, v29);
    v123(v53, v122, v29);
    v101 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v53, v101, 1, v29);
  }
  swift_release();

  swift_release();
  v52 = (uint64_t)v28;
  v53 = v131;
LABEL_39:
  outlined destroy of IntelligenceElement?(v52, &lazy cache variable for type metadata for IntelligenceElement?, (void (*)(uint64_t))MEMORY[0x1E0DC16F0]);
  v101 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v53, v101, 1, v29);
}

{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t ObjectType;
  id v53;
  void (*v54)(_QWORD, _QWORD, _QWORD);
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, _QWORD, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  _QWORD v62[7];
  char *v63;
  char *v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;

  v62[2] = a3;
  v70 = a6;
  v71 = a2;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for IntelligenceElement.Content?, (void (*)(uint64_t))MEMORY[0x1E0DC16E0]);
  MEMORY[0x1E0C80A78](v17, v18);
  v68 = (_QWORD *)((char *)v62 - v19);
  v69 = type metadata accessor for IntelligenceElement.Content();
  v73 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69, v20);
  v64 = (char *)v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v67 = (char *)v62 - v24;
  v25 = type metadata accessor for IntelligenceCollectionRequest();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v27);
  v62[4] = (char *)v62 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)v62 - v31;
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)v62 - v35;
  v72 = type metadata accessor for IntelligenceElement();
  v75 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72, v37);
  v63 = (char *)v62 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39, v40);
  v66 = (char *)v62 - v41;
  v42 = *(_OWORD *)(a1 + 48);
  v84 = *(_OWORD *)(a1 + 32);
  v85 = v42;
  v86 = *(_QWORD *)(a1 + 64);
  v43 = *(_OWORD *)(a1 + 16);
  v82 = *(_OWORD *)a1;
  v83 = v43;
  v76 = a5;
  IntelligenceFragmentCollector.context.getter();
  __swift_project_boxed_opaque_existential_1(&v77, *((uint64_t *)&v78 + 1));
  dispatch thunk of IntelligenceCollectionContext.request.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v77);
  v79 = v84;
  v80 = v85;
  v81 = v86;
  v77 = v82;
  v78 = v83;
  v44 = v71;
  v62[3] = a4;
  v87.origin.x = ScrapeableContent.Item.boundingBox(in:)(v71, v45, a4);
  v89.origin.x = a7;
  v89.origin.y = a8;
  v89.size.width = a9;
  v89.size.height = a10;
  v88 = CGRectIntersection(v87, v89);
  LOBYTE(a1) = CGRectIsEmpty(v88);
  v46 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  v74 = v36;
  v46(v32, v36, v25);
  if ((a1 & 1) != 0)
  {
    v47 = IntelligenceCollectionRequest.includeVisibleElementsOnly.getter();
    v48 = *(void (**)(char *, uint64_t))(v26 + 8);
    v48(v32, v25);
    v49 = v25;
    if ((v47 & 1) != 0)
    {
      outlined release of ScrapeableContent.Item((uint64_t)&v82);

      swift_release();
      v48(v74, v25);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v70, 1, 1, v72);
    }
    v65 = v48;
  }
  else
  {
    v65 = *(void (**)(char *, uint64_t))(v26 + 8);
    v65(v32, v25);
    v49 = v25;
  }
  v50 = v76;
  v51 = *((_QWORD *)&v82 + 1);
  *(_QWORD *)&v77 = *((_QWORD *)&v82 + 1);
  ObjectType = swift_getObjectType();
  v62[6] = v51 & 0xFFFFFFFFFFFFFFFLL;
  swift_retain();
  v53 = v44;
  swift_retain();
  v54 = (void (*)(_QWORD, _QWORD, _QWORD))v68;
  IntelligenceElement.Content.init(scrapedContent:visibleRect:root:fragmentCollector:)((uint64_t)&v77, (uint64_t)v53, v50, (uint64_t)v68);
  v55 = v73;
  v56 = v69;
  if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(v73 + 48))(v54, 1, v69) != 1)
  {
    v62[1] = ObjectType;
    v71 = v53;
    v57 = *(void (**)(char *, _QWORD, uint64_t))(v55 + 32);
    v58 = v55;
    v59 = v67;
    v57(v67, v54, v56);
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v64, v59, v56);
    v60 = v63;
    IntelligenceElement.init(boundingBox:content:subelements:)();
    v68 = *(_QWORD **)(v75 + 32);
    ((void (*)(char *, char *, uint64_t))v68)(v66, v60, v72);
    __asm { BR              X10 }
  }
  outlined release of ScrapeableContent.Item((uint64_t)&v82);

  swift_release();
  v65(v74, v49);
  outlined destroy of IntelligenceElement?((uint64_t)v54, &lazy cache variable for type metadata for IntelligenceElement.Content?, (void (*)(uint64_t))MEMORY[0x1E0DC16E0]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v70, 1, 1, v72);
}

double ScrapeableContent.Item.boundingBox(in:)(void *a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  double v18;
  double v19;
  uint64_t ObjectType;
  uint64_t v21;
  double v22;
  double v23;
  _DWORD v25[2];
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CGRect v34;
  CGRect v35;

  v6 = *v3;
  v7 = v3[1];
  v8 = *((_QWORD *)v3 + 1);
  v9 = *((_QWORD *)v3 + 2);
  v10 = *((_QWORD *)v3 + 3);
  v11 = *((_QWORD *)v3 + 4);
  v12 = *((_QWORD *)v3 + 5);
  v13 = *((_QWORD *)v3 + 6);
  v14 = *((_QWORD *)v3 + 7);
  v15 = *((_QWORD *)v3 + 8);
  if (v8 >> 60 != 2)
    goto LABEL_5;
  swift_unknownObjectRetain();
  objc_opt_self();
  v16 = (void *)swift_dynamicCastObjCClass();
  if (!v16)
  {
    swift_unknownObjectRelease();
LABEL_5:
    ObjectType = swift_getObjectType();
    ScrapeableContent.Item.size.getter();
    v25[0] = v6;
    v25[1] = v7;
    v26 = v8;
    v27 = v9;
    v28 = v10;
    v29 = v11;
    v30 = v12;
    v31 = v13;
    v32 = v14;
    v33 = v15;
    return IntelligenceSupportProviding<>.convert(_:from:)(0.0, 0.0, v22, v23, (uint64_t)v25, ObjectType, v21, a3);
  }
  v17 = v16;
  objc_msgSend(v16, sel_bounds);
  objc_msgSend(a1, sel_convertPoint_fromCoordinateSpace_, v17);
  v19 = v18;
  objc_msgSend(v17, sel_bounds);
  CGRectGetWidth(v34);
  objc_msgSend(v17, sel_bounds);
  CGRectGetHeight(v35);
  swift_unknownObjectRelease();
  return v19;
}

void IntelligenceElement.Content.init(scrapedContent:visibleRect:root:fragmentCollector:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[8];
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v49 = a2;
  v50 = a3;
  v48 = a4;
  v5 = type metadata accessor for IntelligenceFragment.RemoteContext();
  v43 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  MEMORY[0x1E0C80A78](v7, v8);
  v42 = (char *)v37 - v9;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (void (*)(uint64_t))MEMORY[0x1E0CE6B88]);
  MEMORY[0x1E0C80A78](v10, v11);
  v12 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x1E0C80A78](v12, v13);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for IntelligenceCollectionRequest.TextOptions?, (void (*)(uint64_t))MEMORY[0x1E0DC1720]);
  MEMORY[0x1E0C80A78](v14, v15);
  v37[7] = (char *)v37 - v16;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for IntelligenceElement.Text.Editable?, (void (*)(uint64_t))MEMORY[0x1E0DC1638]);
  MEMORY[0x1E0C80A78](v17, v18);
  v37[6] = (char *)v37 - v19;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, (void (*)(uint64_t))MEMORY[0x1E0CAF240]);
  MEMORY[0x1E0C80A78](v20, v21);
  v38 = type metadata accessor for AttributedString();
  v41 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38, v22);
  v39 = (char *)v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v37[5] = (char *)v37 - v26;
  MEMORY[0x1E0C80A78](v27, v28);
  v40 = (char *)v37 - v29;
  v30 = type metadata accessor for IntelligenceCollectionRequest();
  MEMORY[0x1E0C80A78](v30, v31);
  v32 = type metadata accessor for IntelligenceElement.Content();
  v46 = *(_QWORD *)(v32 - 8);
  v47 = v32;
  MEMORY[0x1E0C80A78](v32, v33);
  MEMORY[0x1E0C80A78](v34, v35);
  v45 = (char *)v37 - v36;
  __asm { BR              X10 }
}

uint64_t sub_18709E7A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  swift_release();
  v2 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v2, *MEMORY[0x1E0DC16B0], v3);
  v4 = *(_QWORD *)(v0 + 144);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v4, v2, v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 56))(v4, 0, 1, v3);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
}

double IntelligenceSupportProviding<>.convert(_:to:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  double v13;
  double v14;
  double v15;
  double v16;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  v12 = 2;
  (*(void (**)(uint64_t, uint64_t))(a8 + 16))(a6, a8);
  ViewGraph.transform.getter();
  swift_release();
  CGRect.convert(to:transform:)();
  swift_release();
  outlined destroy of CoordinateSpace((uint64_t)&v9);
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  v12 = 2;
  CGRect.convert(from:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)&v9);
  return v13;
}

void closure #2 in IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)(double *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  ObjectType = swift_getObjectType();
  *(double *)a4 = IntelligenceSupportProviding<>.convert(_:from:)(v7, v8, v9, v10, a3, ObjectType, v12, a2);
  *(_QWORD *)(a4 + 8) = v13;
  *(_QWORD *)(a4 + 16) = v14;
  *(_QWORD *)(a4 + 24) = v15;
}

double IntelligenceSupportProviding<>.convert(_:from:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  double v15;
  double v16;
  double v17;
  double v18;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  v14 = 2;
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)&v11);
  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  v14 = 2;
  (*(void (**)(uint64_t, uint64_t))(a8 + 16))(a6, a8);
  ViewGraph.transform.getter();
  swift_release();
  CGRect.convert(from:transform:)();
  swift_release();
  outlined destroy of CoordinateSpace((uint64_t)&v11);
  return v15;
}

uint64_t closure #1 in IntelligenceElement.Content.init(scrapedContent:visibleRect:root:fragmentCollector:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t result;
  void *v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void (*v32)(_BYTE *, _QWORD);
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char v36;
  _BYTE v37[24];
  uint64_t v38;

  v33 = a2;
  v34 = a3;
  v7 = type metadata accessor for AttributedString();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for Range<AttributedString.Index>?, type metadata accessor for Range<AttributedString.Index>);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v33 - v14;
  type metadata accessor for Range<AttributedString.Index>(0);
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v19);
  v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v33 - v24;
  outlined init with copy of Any?(a1, (uint64_t)v37);
  if (!v38)
    return outlined destroy of TableRowList?((uint64_t)v37, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  type metadata accessor for UIFont();
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    v27 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a5, v7);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
    Range<>.init<A>(_:in:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17) == 1)
    {

      return outlined destroy of IntelligenceElement?((uint64_t)v15, &lazy cache variable for type metadata for Range<AttributedString.Index>?, type metadata accessor for Range<AttributedString.Index>);
    }
    else
    {
      outlined init with take of Range<AttributedString.Index>((uint64_t)v15, (uint64_t)v25);
      outlined init with copy of Range<AttributedString.Index>((uint64_t)v25, (uint64_t)v21);
      KeyPath = swift_getKeyPath();
      MEMORY[0x1E0C80A78](KeyPath, v29);
      *(&v33 - 2) = v30;
      swift_getKeyPath();
      objc_msgSend(v27, sel_pointSize, v33, v34);
      v35 = v31;
      v36 = 0;
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
      v32 = (void (*)(_BYTE *, _QWORD))AttributedString.subscript.modify();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IntelligenceElement.Text.Attributes.FontSizeAttribute and conformance IntelligenceElement.Text.Attributes.FontSizeAttribute, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC15E8], MEMORY[0x1E0DC15E0]);
      AttributedSubstring.subscript.setter();
      v32(v37, 0);

      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    }
  }
  return result;
}

uint64_t key path index equality operator for (KeyPath<IntelligenceElement.Text.Attributes, IntelligenceElement.Text.Attributes.FontSizeAttribute>)()
{
  type metadata accessor for KeyPath<IntelligenceElement.Text.Attributes, IntelligenceElement.Text.Attributes.FontSizeAttribute>();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined release of ScrapeableContent.Item(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_18709F7E4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = IntelligenceElement.boundingBox.getter();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

uint64_t sub_18709F810()
{
  return IntelligenceElement.boundingBox.setter();
}

void partial apply for closure #2 in IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  closure #2 in IntelligenceElement.init(scrapedContent:visibleRect:root:fragmentCollector:)(a1, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t sub_18709F8B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  AttributeScopes.intelligence.getter();
  result = type metadata accessor for IntelligenceElement.Text.Attributes();
  *a1 = result;
  return result;
}

uint64_t sub_18709F8E0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in IntelligenceElement.Content.init(scrapedContent:visibleRect:root:fragmentCollector:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in IntelligenceElement.Content.init(scrapedContent:visibleRect:root:fragmentCollector:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t sub_18709F8F8()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for UIFont()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIFont;
  if (!lazy cache variable for type metadata for UIFont)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIFont);
  }
  return result;
}

uint64_t outlined init with take of Range<AttributedString.Index>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Range<AttributedString.Index>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Range<AttributedString.Index>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Range<AttributedString.Index>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18709F9CC()
{
  return IntelligenceElement.Text.Attributes.intelligenceFontSize.getter();
}

uint64_t sub_18709F9EC()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IntelligenceElement.Text.Attributes.FontSizeAttribute and conformance IntelligenceElement.Text.Attributes.FontSizeAttribute, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC15E8], MEMORY[0x1E0DC15E0]);
}

uint64_t sub_18709FA18()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IntelligenceElement.Text.Attributes.FontSizeAttribute and conformance IntelligenceElement.Text.Attributes.FontSizeAttribute, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC15E8], MEMORY[0x1E0DC15E0]);
  return AttributeDynamicLookup.subscript.getter();
}

uint64_t sub_18709FA60()
{
  return 8;
}

uint64_t sub_18709FA6C()
{
  return swift_release();
}

uint64_t sub_18709FA74(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_18709FA84()
{
  type metadata accessor for KeyPath<IntelligenceElement.Text.Attributes, IntelligenceElement.Text.Attributes.FontSizeAttribute>();
  return dispatch thunk of Hashable.hashValue.getter();
}

_QWORD *sub_18709FAC4(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void type metadata accessor for KeyPath<IntelligenceElement.Text.Attributes, IntelligenceElement.Text.Attributes.FontSizeAttribute>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyPath<IntelligenceElement.Text.Attributes, IntelligenceElement.Text.Attributes.FontSizeAttribute>)
  {
    type metadata accessor for IntelligenceElement.Text.Attributes();
    type metadata accessor for IntelligenceElement.Text.Attributes.FontSizeAttribute();
    v0 = type metadata accessor for KeyPath();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<IntelligenceElement.Text.Attributes, IntelligenceElement.Text.Attributes.FontSizeAttribute>);
  }
}

void MenuBarExtra.init(isInserted:content:label:)()
{
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void MenuBarExtra.init(content:label:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void MenuBarExtra.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void MenuBarExtra<>.init(_:isInserted:content:)()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void MenuBarExtra<>.init<A>(_:isInserted:content:)()
{
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void MenuBarExtra<>.init(_:content:)()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void MenuBarExtra<>.init<A>(_:content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void MenuBarExtra<>.init(_:image:isInserted:content:)()
{
  MenuBarExtra<>.init(_:image:isInserted:content:)();
}

{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void MenuBarExtra<>.init<A>(_:image:isInserted:content:)()
{
  MenuBarExtra<>.init<A>(_:image:isInserted:content:)();
}

{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void MenuBarExtra<>.init(_:systemImage:isInserted:content:)()
{
  MenuBarExtra<>.init(_:image:isInserted:content:)();
}

void MenuBarExtra<>.init<A>(_:systemImage:isInserted:content:)()
{
  MenuBarExtra<>.init<A>(_:image:isInserted:content:)();
}

void MenuBarExtra<>.init(_:image:content:)()
{
  MenuBarExtra<>.init(_:image:content:)();
}

{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void MenuBarExtra<>.init(_:systemImage:content:)()
{
  MenuBarExtra<>.init(_:image:content:)();
}

void MenuBarExtra<>.init<A>(_:systemImage:content:)()
{
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for Scene.Body : Scene in MenuBarExtra<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for MenuBarExtra()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MenuBarExtra(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (((v9 & ~v8) + v10) & 0xFFFFFFFFFFFFFFF8) + 26 > 0x18)
  {
    v14 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
  }
  else
  {
    v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v16 = ((unint64_t)v4 + v9) & v15;
    v17 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(v16, v17, v5);
    *(_BYTE *)(v16 + v10) = *(_BYTE *)(v17 + v10);
    v18 = (v17 + v10) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(unsigned __int8 *)(v18 + 25);
    if (v19 >= 2)
      v19 = *(_DWORD *)(v18 + 8) + 2;
    v20 = (v16 + v10) & 0xFFFFFFFFFFFFFFF8;
    if (v19 == 1)
    {
      *(_QWORD *)(v20 + 8) = *(_QWORD *)(v18 + 8);
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(v18 + 16);
      *(_BYTE *)(v20 + 24) = *(_BYTE *)(v18 + 24);
      *(_BYTE *)(v20 + 25) = 1;
      swift_retain();
    }
    else
    {
      *(_BYTE *)(v20 + 8) = *(_BYTE *)(v18 + 8);
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(v18 + 16);
      *(_BYTE *)(v20 + 25) = 0;
    }
  }
  swift_retain();
  return v4;
}

uint64_t destroy for MenuBarExtra(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  unsigned int v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = (v7 + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8;
  v9 = (_DWORD *)(v8 + 8);
  v10 = *(unsigned __int8 *)(v8 + 25);
  if (v10 >= 2)
    v10 = *v9 + 2;
  if (v10 == 1)
    swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for MenuBarExtra(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  char v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  *(_BYTE *)v14 = *(_BYTE *)v15;
  v16 = v15 & 0xFFFFFFFFFFFFFFF8;
  v17 = *(unsigned __int8 *)(v16 + 25);
  if (v17 >= 2)
    v17 = *(_DWORD *)(v16 + 8) + 2;
  v18 = v14 & 0xFFFFFFFFFFFFFFF8;
  if (v17 == 1)
  {
    *(_QWORD *)(v18 + 8) = *(_QWORD *)(v16 + 8);
    *(_QWORD *)(v18 + 16) = *(_QWORD *)(v16 + 16);
    *(_BYTE *)(v18 + 24) = *(_BYTE *)(v16 + 24);
    swift_retain();
    v19 = 1;
  }
  else
  {
    v19 = 0;
    *(_BYTE *)(v18 + 8) = *(_BYTE *)(v16 + 8);
    *(_QWORD *)(v18 + 16) = *(_QWORD *)(v16 + 16);
  }
  swift_retain();
  *(_BYTE *)(v18 + 25) = v19;
  return a1;
}

uint64_t assignWithCopy for MenuBarExtra(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  *(_BYTE *)v14 = *(_BYTE *)v15;
  v16 = v14 & 0xFFFFFFFFFFFFFFF8;
  v17 = v15 & 0xFFFFFFFFFFFFFFF8;
  if (v16 != v17)
  {
    v18 = v16 + 8;
    v19 = *(unsigned __int8 *)(v16 + 25);
    if (v19 >= 2)
      v19 = *(_DWORD *)v18 + 2;
    v20 = v17 + 8;
    if (v19 == 1)
      swift_release();
    swift_release();
    v21 = *(unsigned __int8 *)(v20 + 17);
    if (v21 >= 2)
      v21 = *(_DWORD *)v20 + 2;
    if (v21 == 1)
    {
      *(_QWORD *)v18 = *(_QWORD *)v20;
      *(_QWORD *)(v18 + 8) = *(_QWORD *)(v20 + 8);
      *(_BYTE *)(v18 + 16) = *(_BYTE *)(v20 + 16);
      *(_BYTE *)(v18 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(_BYTE *)v18 = *(_BYTE *)v20;
      *(_QWORD *)(v18 + 8) = *(_QWORD *)(v20 + 8);
      *(_BYTE *)(v18 + 17) = 0;
    }
    swift_retain();
  }
  return a1;
}

uint64_t initializeWithTake for MenuBarExtra(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  __int128 v21;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  *(_BYTE *)v14 = *(_BYTE *)v15;
  v16 = v14 & 0xFFFFFFFFFFFFFFF8;
  v17 = v15 & 0xFFFFFFFFFFFFFFF8;
  v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
  v19 = *(unsigned __int8 *)(v17 + 25);
  if (v19 >= 2)
    v19 = *(_DWORD *)v18 + 2;
  v20 = v16 + 8;
  if (v19 == 1)
  {
    v21 = *(_OWORD *)v18;
    *(_BYTE *)(v20 + 16) = *(_BYTE *)(v18 + 16);
  }
  else
  {
    LOBYTE(v19) = 0;
    v21 = *(_OWORD *)v18;
  }
  *(_OWORD *)v20 = v21;
  *(_BYTE *)(v20 + 17) = v19;
  return a1;
}

uint64_t assignWithTake for MenuBarExtra(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  __int128 v22;
  char v23;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  *(_BYTE *)v14 = *(_BYTE *)v15;
  v16 = v14 & 0xFFFFFFFFFFFFFFF8;
  v17 = v15 & 0xFFFFFFFFFFFFFFF8;
  if (v16 != v17)
  {
    v18 = v16 + 8;
    v19 = *(unsigned __int8 *)(v16 + 25);
    if (v19 >= 2)
      v19 = *(_DWORD *)v18 + 2;
    v20 = v17 + 8;
    if (v19 == 1)
      swift_release();
    swift_release();
    v21 = *(unsigned __int8 *)(v20 + 17);
    if (v21 >= 2)
      v21 = *(_DWORD *)v20 + 2;
    if (v21 == 1)
    {
      v22 = *(_OWORD *)v20;
      *(_BYTE *)(v18 + 16) = *(_BYTE *)(v20 + 16);
      *(_OWORD *)v18 = v22;
      v23 = 1;
    }
    else
    {
      v23 = 0;
      *(_OWORD *)v18 = *(_OWORD *)v20;
    }
    *(_BYTE *)(v18 + 17) = v23;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MenuBarExtra(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  unsigned int v20;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0xFE)
    v9 = 254;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v5 + 64) + v10;
  v12 = *(_QWORD *)(v7 + 64);
  if (v9 >= a2)
  {
    if (v6 == v9)
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
    v19 = (v11 + a1) & ~v10;
    if (v8 == v9)
      return (*(uint64_t (**)(uint64_t))(v7 + 48))(v19);
    v20 = *(unsigned __int8 *)(v19 + v12);
    if (v20 >= 2)
      return ((v20 + 2147483646) & 0x7FFFFFFF) + 1;
    return 0;
  }
  v13 = (((v11 & ~(_DWORD)v10) + v12) & 0xFFFFFFF8) + 26;
  v14 = (a2 - v9 + 0xFFFF) >> (8 * v13);
  if (v13 <= 3)
    v15 = v14 + 1;
  else
    v15 = 2;
  if (v15 >= 0x10000)
    v16 = 4;
  else
    v16 = 2;
  if (v15 < 0x100)
    v16 = 1;
  if (v15 >= 2)
    v17 = v16;
  else
    v17 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1870A054C + 4 * byte_187C05C60[v17]))();
}

void storeEnumTagSinglePayload for MenuBarExtra(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE)
    v8 = 254;
  else
    v8 = v7;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = ((((*(_QWORD *)(v5 + 64) + v9) & ~v9) + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8) + 26;
  if (v8 >= a3)
  {
    v13 = 0u;
    if (v8 >= a2)
      goto LABEL_20;
  }
  else
  {
    if (v10 <= 3)
      v11 = ((a3 - v8 + 0xFFFF) >> (8 * v10)) + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    if (v8 >= a2)
LABEL_20:
      __asm { BR              X0 }
  }
  v14 = ~v8 + a2;
  bzero(a1, ((((*(_QWORD *)(v5 + 64) + v9) & ~v9) + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8) + 26);
  if (v10 > 3)
    *a1 = v14;
  else
    *(_WORD *)a1 = v14;
  __asm { BR              X11 }
}

void sub_1870A0730(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x1870A07ACLL);
}

void sub_1870A0738(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1870A0740);
  JUMPOUT(0x1870A07ACLL);
}

void sub_1870A0784(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x1870A07ACLL);
}

void sub_1870A078C(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x1870A07ACLL);
}

uint64_t sub_1870A0794(uint64_t a1, int a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v12 + v13) = 0;
  if (!a2)
    JUMPOUT(0x1870A07ACLL);
  if (v6 == v10)
  {
    v3 = *(uint64_t (**)(uint64_t))(v9 + 56);
    v4 = v12;
  }
  else
  {
    v4 = (v11 + v12) & v7;
    if (a3 != v10)
      JUMPOUT(0x1870A07A0);
    v3 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }
  return v3(v4);
}

void type metadata accessor for MenuBarExtra()
{
  JUMPOUT(0x18D75FF28);
}

_UNKNOWN **sub_1870A07D0()
{
  return &protocol witness table for _EmptyScene;
}

uint64_t destroy for MenuBarExtraConfiguration()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MenuBarExtraConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MenuBarExtraConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v4;
  return a1;
}

uint64_t assignWithTake for MenuBarExtraConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for MenuBarExtraConfiguration(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 81))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MenuBarExtraConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 81) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MenuBarExtraConfiguration()
{
  return &type metadata for MenuBarExtraConfiguration;
}

void MenuBarExtra<>.init<A>(_:image:content:)()
{
  MenuBarExtra<>.init<A>(_:systemImage:content:)();
}

uint64_t PlaybackButton.Configuration.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  __int128 *v12;
  char v13;
  uint64_t v14;
  __int128 v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  char v20;

  v3 = v1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.Configuration.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys, (uint64_t)&unk_1E1AB8CC0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v16 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = 0;
  type metadata accessor for ClosedRange<Date>();
  lazy protocol witness table accessor for type ClosedRange<Date> and conformance <> ClosedRange<A>(&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, &lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E0CB0890], MEMORY[0x1E0DEA4C8]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    v11 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
    LOBYTE(v16) = 1;
    type metadata accessor for PlaybackButton.State(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlaybackButton.State and conformance PlaybackButton.State, type metadata accessor for PlaybackButton.State, (uint64_t)&protocol conformance descriptor for PlaybackButton.State);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v16) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v16) = *(_BYTE *)(v3 + v11[7]);
    v20 = 3;
    lazy protocol witness table accessor for type PlaybackButton.Phase and conformance PlaybackButton.Phase();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v16) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v16 = *(_OWORD *)(v3 + v11[9]);
    v20 = 5;
    lazy protocol witness table accessor for type CodableAlignment and conformance CodableAlignment();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12 = (__int128 *)(v3 + v11[10]);
    v13 = *((_BYTE *)v12 + 16);
    v14 = *((_QWORD *)v12 + 5);
    v16 = *v12;
    v17 = v13;
    v18 = *(__int128 *)((char *)v12 + 24);
    v19 = v14;
    v20 = 6;
    lazy protocol witness table accessor for type AppIntentAction and conformance AppIntentAction();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t PlaybackButton.Configuration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  int *v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  char v53;

  v39 = a2;
  v40 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1E0C80A78](v40, v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v41 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.Configuration.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys, (uint64_t)&unk_1E1AB8CC0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v43 = v9;
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v37 - v12;
  v14 = type metadata accessor for PlaybackButton.Configuration(0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = &v17[v18[6]];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v45 = v18;
  v46 = (uint64_t *)v19;
  v20 = v18[7];
  v17[v20] = 0;
  v21 = v18[8];
  v47 = v17;
  v17[v21] = 0;
  v22 = a1[3];
  v44 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  lazy protocol witness table accessor for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys();
  v42 = v13;
  v23 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v48 = v20;
    v38 = v21;
    type metadata accessor for ClosedRange<Date>();
    LOBYTE(v49) = 0;
    lazy protocol witness table accessor for type ClosedRange<Date> and conformance <> ClosedRange<A>(&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, &lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E0CB08C0], MEMORY[0x1E0DEA4F0]);
    v25 = v41;
    v24 = v42;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v26 = (uint64_t)v25;
    v27 = (uint64_t)v47;
    outlined init with take of TableCellFormula(v26, (uint64_t)v47, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?);
    LOBYTE(v49) = 1;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlaybackButton.State and conformance PlaybackButton.State, type metadata accessor for PlaybackButton.State, (uint64_t)&protocol conformance descriptor for PlaybackButton.State);
    v28 = (uint64_t)v5;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v29 = v45;
    outlined init with take of TableCellFormula(v28, v27 + v45[5], type metadata accessor for PlaybackButton.State);
    LOBYTE(v49) = 2;
    v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v31 = v46;
    *v46 = v30;
    v31[1] = v32;
    v53 = 3;
    lazy protocol witness table accessor for type PlaybackButton.Phase and conformance PlaybackButton.Phase();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_BYTE *)(v27 + v48) = v49;
    LOBYTE(v49) = 4;
    *(_BYTE *)(v27 + v38) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    v53 = 5;
    lazy protocol witness table accessor for type CodableAlignment and conformance CodableAlignment();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)(v27 + v29[9]) = v49;
    v53 = 6;
    lazy protocol witness table accessor for type AppIntentAction and conformance AppIntentAction();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v24, v43);
    v33 = v50;
    v34 = v52;
    v35 = v27 + v29[10];
    *(_OWORD *)v35 = v49;
    *(_BYTE *)(v35 + 16) = v33;
    *(_OWORD *)(v35 + 24) = v51;
    *(_QWORD *)(v35 + 40) = v34;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v27, v39, type metadata accessor for PlaybackButton.Configuration);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v27, type metadata accessor for PlaybackButton.Configuration);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PlaybackButton.Configuration.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1870A12E0
                                                            + 4 * asc_187C05D10[*v0]))(0x6C61767265746E69, 0xE800000000000000);
}

uint64_t sub_1870A12E0()
{
  return 0x6574617473;
}

uint64_t sub_1870A12F4()
{
  return 0x6D496D6574737973;
}

uint64_t sub_1870A1314()
{
  return 0x6573616870;
}

uint64_t sub_1870A1328()
{
  return 0x6573736572507369;
}

uint64_t sub_1870A1344()
{
  return 0x6E656D6E67696C61;
}

uint64_t sub_1870A1364()
{
  return 0x6E6F69746361;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PlaybackButton.Configuration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PlaybackButton.Configuration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PlaybackButton.Configuration.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.Configuration.CodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.Configuration.CodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlaybackButton.Configuration@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PlaybackButton.Configuration.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlaybackButton.Configuration(_QWORD *a1)
{
  return PlaybackButton.Configuration.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PlaybackButton.State.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x676E6979616C70;
  if (*v0 != 1)
    v1 = 0x646573756170;
  if (*v0)
    return v1;
  else
    return 0x646579616C706E75;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PlaybackButton.State.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PlaybackButton.State.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.State.CodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.State.CodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PlaybackButton.State.PausedCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PlaybackButton.State.PausedCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.State.PausedCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.State.PausedCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.State.PlayingCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.State.PlayingCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.State.UnplayedCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.State.UnplayedCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PlaybackButton.State.encode(to:)(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.State.PausedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys, (uint64_t)&unk_1E1AB9100, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v42 = v3;
  v40 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v41 = (char *)&v34 - v5;
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v43 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.State.PlayingCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys, (uint64_t)&unk_1E1AB9190, v2);
  v38 = *(_QWORD *)(v10 - 8);
  v39 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v37 = (char *)&v34 - v12;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.State.UnplayedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys, (uint64_t)&unk_1E1AB91B0, v2);
  v35 = *(_QWORD *)(v13 - 8);
  v36 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v34 - v15;
  v17 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.State.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys, (uint64_t)&unk_1E1AB9070, v2);
  v45 = *(_QWORD *)(v21 - 8);
  v46 = v21;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v34 - v23;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys();
  v25 = v6;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v44, (uint64_t)v20, type metadata accessor for PlaybackButton.State);
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v20, 2, v6);
  if (v26)
  {
    if (v26 == 1)
    {
      v47 = 0;
      lazy protocol witness table accessor for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys();
      v27 = v46;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v16, v36);
    }
    else
    {
      v48 = 1;
      lazy protocol witness table accessor for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys();
      v33 = v37;
      v27 = v46;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v33, v39);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v24, v27);
  }
  else
  {
    v28 = v40;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v43, v20, v6);
    v49 = 2;
    lazy protocol witness table accessor for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys();
    v29 = v41;
    v30 = v46;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
    v31 = v42;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v31);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v43, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v24, v30);
  }
}

uint64_t PlaybackButton.State.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;

  v53 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.State.PausedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys, (uint64_t)&unk_1E1AB9100, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  v52 = v5;
  MEMORY[0x1E0C80A78](v4, v6);
  v58 = (char *)&v44 - v7;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.State.PlayingCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys, (uint64_t)&unk_1E1AB9190, v3);
  v49 = *(_QWORD *)(v8 - 8);
  v50 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v57 = (char *)&v44 - v10;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.State.UnplayedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys, (uint64_t)&unk_1E1AB91B0, v3);
  v47 = *(_QWORD *)(v11 - 8);
  v48 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v55 = (char *)&v44 - v13;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.State.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys, (uint64_t)&unk_1E1AB9070, v3);
  v56 = v14;
  v54 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v44 - v16;
  v18 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v44 - v24;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys();
  v26 = v59;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v26)
  {
    v59 = v18;
    v27 = v55;
    v28 = v56;
    v45 = v21;
    v46 = v25;
    v30 = v57;
    v29 = v58;
    v31 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v31 + 16) == 1)
    {
      if (*(_BYTE *)(v31 + 32))
      {
        if (*(_BYTE *)(v31 + 32) == 1)
        {
          v61 = 1;
          lazy protocol witness table accessor for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v49 + 8))(v30, v50);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v54 + 8))(v17, v28);
          v32 = type metadata accessor for Date();
          v33 = (uint64_t)v46;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v46, 2, 2, v32);
        }
        else
        {
          v59 = v31;
          v62 = 2;
          lazy protocol witness table accessor for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys();
          v39 = v29;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          v40 = type metadata accessor for Date();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
          v41 = (uint64_t)v45;
          v42 = v51;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          v43 = v54;
          (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v42);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v43 + 8))(v17, v28);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v41, 0, 2, v40);
          v33 = (uint64_t)v46;
          outlined init with take of TableCellFormula(v41, (uint64_t)v46, type metadata accessor for PlaybackButton.State);
        }
      }
      else
      {
        v60 = 0;
        lazy protocol witness table accessor for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v47 + 8))(v27, v48);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v54 + 8))(v17, v28);
        v38 = type metadata accessor for Date();
        v33 = (uint64_t)v46;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v46, 1, 2, v38);
      }
      outlined init with take of TableCellFormula(v33, v53, type metadata accessor for PlaybackButton.State);
    }
    else
    {
      v34 = type metadata accessor for DecodingError();
      swift_allocError();
      v36 = v35;
      type metadata accessor for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)(0, (unint64_t *)&lazy cache variable for type metadata for (@thick Any.Type, DecodingError.Context), (void (*)(uint64_t))type metadata accessor for @thick Any.Type, (void (*)(uint64_t))MEMORY[0x1E0DEC488]);
      *v36 = v59;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v36, *MEMORY[0x1E0DEC450], v34);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v17, v28);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlaybackButton.State@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PlaybackButton.State.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlaybackButton.State(_QWORD *a1)
{
  return PlaybackButton.State.encode(to:)(a1);
}

Swift::Void __swiftcall PlaybackButton.Phase.toggle()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = type metadata accessor for Logger();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v0)
  {
    if (*v0 != 2)
      return;
    v6 = 3;
  }
  else
  {
    v6 = 1;
  }
  *v0 = v6;
  LOBYTE(v19) = v6;
  v7 = String.init<A>(describing:)();
  v9 = v8;
  static Log.archivedPlaybackButton.getter();
  swift_bridgeObjectRetain();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v17 = v1;
    v13 = v7;
    v14 = (uint8_t *)v12;
    v15 = swift_slowAlloc();
    v19 = v15;
    *(_DWORD *)v14 = 136315138;
    swift_bridgeObjectRetain();
    v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_186E48000, v10, v11, "Transitioning state to %s from button tap.", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v15, -1, -1);
    MEMORY[0x18D760108](v14, -1, -1);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v17);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
}

void PlaybackButton.Phase.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[10];
  uint64_t v18;

  v18 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.Phase.PendingPauseCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys, (uint64_t)&unk_1E1AB8FC0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v17[7] = *(_QWORD *)(v4 - 8);
  v17[8] = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v17[6] = (char *)v17 - v6;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.Phase.PlayingCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys, (uint64_t)&unk_1E1AB8F80, v3);
  v17[4] = *(_QWORD *)(v7 - 8);
  v17[5] = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v17[3] = (char *)v17 - v9;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.Phase.PendingPlayCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys, (uint64_t)&unk_1E1AB8FA0, v3);
  v17[1] = *(_QWORD *)(v10 - 8);
  v17[2] = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v17[0] = (char *)v17 - v12;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.Phase.PausedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys, (uint64_t)&unk_1E1AB8F60, v3);
  MEMORY[0x1E0C80A78](v13, v14);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton.Phase.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys, (uint64_t)&unk_1E1AB8ED0, v3);
  v17[9] = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X10 }
}

uint64_t sub_1870A245C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v5 - 68) = 0;
  lazy protocol witness table accessor for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 104) + 8))(v4, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PlaybackButton.Phase.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1870A25B8 + 4 * byte_187C05D1B[*v0]))(0x646573756170, 0xE600000000000000);
}

uint64_t sub_1870A25B8()
{
  return 0x50676E69646E6570;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PlaybackButton.Phase.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PlaybackButton.Phase.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.Phase.CodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.Phase.CodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.Phase.PausedCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.Phase.PausedCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.Phase.PendingPauseCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.Phase.PendingPauseCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.Phase.PendingPlayCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.Phase.PendingPlayCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton.Phase.PlayingCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton.Phase.PlayingCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys();
  return CodingKey.debugDescription.getter();
}

char *protocol witness for Decodable.init(from:) in conformance PlaybackButton.Phase@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char *result;

  result = specialized PlaybackButton.Phase.init(from:)(a1);
  if (!v2)
    *a2 = (_BYTE)result;
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance PlaybackButton.Phase(_QWORD *a1)
{
  unsigned __int8 *v1;

  PlaybackButton.Phase.encode(to:)(a1, *v1);
}

uint64_t PlaybackButton.init(interval:state:systemImage:alignment:lnAction:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t KeyPath;
  uint64_t v19;
  int *v20;
  uint64_t result;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  *(_QWORD *)a9 = swift_getKeyPath();
  *(_QWORD *)(a9 + 8) = 0;
  *(_WORD *)(a9 + 16) = 0;
  *(_QWORD *)(a9 + 24) = swift_getKeyPath();
  *(_BYTE *)(a9 + 32) = 0;
  *(_QWORD *)(a9 + 40) = swift_getKeyPath();
  *(_BYTE *)(a9 + 48) = 0;
  KeyPath = swift_getKeyPath();
  v19 = a9 + *(int *)(type metadata accessor for PlaybackButton(0) + 28);
  outlined init with take of TableCellFormula(a1, v19, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?);
  v20 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  result = outlined init with take of TableCellFormula(a2, v19 + v20[5], type metadata accessor for PlaybackButton.State);
  v22 = (_QWORD *)(v19 + v20[6]);
  *v22 = a3;
  v22[1] = a4;
  *(_BYTE *)(v19 + v20[7]) = 0;
  *(_BYTE *)(v19 + v20[8]) = 0;
  v23 = (_QWORD *)(v19 + v20[9]);
  *v23 = a5;
  v23[1] = a6;
  v24 = v19 + v20[10];
  *(_QWORD *)v24 = KeyPath;
  *(_QWORD *)(v24 + 8) = 0;
  *(_BYTE *)(v24 + 16) = 0;
  *(_QWORD *)(v24 + 24) = a7;
  *(_QWORD *)(v24 + 32) = a8;
  *(_QWORD *)(v24 + 40) = a10;
  return result;
}

uint64_t PlaybackButton.init(interval:state:playSystemImage:pauseSystemImage:lnAction:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  int *v26;
  uint64_t result;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a5;
  v36 = a6;
  v33 = a4;
  v34 = a8;
  v12 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease();
  *(_QWORD *)a7 = swift_getKeyPath();
  *(_QWORD *)(a7 + 8) = 0;
  *(_WORD *)(a7 + 16) = 0;
  *(_QWORD *)(a7 + 24) = swift_getKeyPath();
  *(_BYTE *)(a7 + 32) = 0;
  *(_QWORD *)(a7 + 40) = swift_getKeyPath();
  *(_BYTE *)(a7 + 48) = 0;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  type metadata accessor for ClosedRange<Date>();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 0, 1, v20);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v15, type metadata accessor for PlaybackButton.State);
  v21 = static Alignment.center.getter();
  v23 = v22;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a2, type metadata accessor for PlaybackButton.State);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  KeyPath = swift_getKeyPath();
  v25 = a7 + *(int *)(type metadata accessor for PlaybackButton(0) + 28);
  outlined init with take of TableCellFormula((uint64_t)v19, v25, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?);
  v26 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  result = outlined init with take of TableCellFormula((uint64_t)v15, v25 + v26[5], type metadata accessor for PlaybackButton.State);
  v28 = (_QWORD *)(v25 + v26[6]);
  v29 = v33;
  *v28 = a3;
  v28[1] = v29;
  *(_BYTE *)(v25 + v26[7]) = 0;
  *(_BYTE *)(v25 + v26[8]) = 0;
  v30 = (uint64_t *)(v25 + v26[9]);
  *v30 = v21;
  v30[1] = v23;
  v31 = v25 + v26[10];
  *(_QWORD *)v31 = KeyPath;
  *(_QWORD *)(v31 + 8) = 0;
  *(_BYTE *)(v31 + 16) = 0;
  v32 = v36;
  *(_QWORD *)(v31 + 24) = v35;
  *(_QWORD *)(v31 + 32) = v32;
  *(_QWORD *)(v31 + 40) = v34;
  return result;
}

double PlaybackButton.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  double v20;
  int *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  double result;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[4];
  int v32;
  uint64_t v33;
  double v34[3];
  _QWORD v35[2];
  unsigned __int8 v36;

  v3 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = &v31[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for PlaybackButton.Configuration(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v31[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for PlaybackButton(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1 + *(int *)(v11 + 28), (uint64_t)v10, type metadata accessor for PlaybackButton.Configuration);
  v12 = *(_QWORD *)v1;
  v13 = *(_QWORD *)(v1 + 8);
  v14 = *(unsigned __int8 *)(v1 + 16);
  v15 = *(unsigned __int8 *)(v1 + 17);
  outlined copy of Environment<PlaybackButton._StyleStorage>.Content(*(_QWORD *)v1, v13, v14, *(_BYTE *)(v1 + 17));
  specialized Environment.wrappedValue.getter(v12, v13, v14 | (v15 << 8), (uint64_t)v35);
  outlined consume of Environment<PlaybackButton._StyleStorage>.Content(v12, v13, v14, v15);
  v16 = v35[0];
  v33 = v35[1];
  v32 = v36;
  v17 = *(_QWORD *)(v1 + 24);
  LOBYTE(v13) = *(_BYTE *)(v1 + 32);
  outlined copy of Environment<Bool>.Content(v17, v13);
  LOBYTE(v12) = specialized Environment.wrappedValue.getter(v17, v13);
  outlined consume of Environment<Bool>.Content(v17, v13);
  v18 = *(_QWORD *)(v1 + 40);
  v19 = *(_BYTE *)(v1 + 48);
  outlined copy of Environment<Bool>.Content(v18, v19);
  v20 = specialized Environment.wrappedValue.getter(v18, v19);
  outlined consume of Environment<Bool>.Content(v18, v19);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v10[*(int *)(v7 + 20)], (uint64_t)v6, type metadata accessor for PlaybackButton.State);
  *(_BYTE *)a1 = specialized PlaybackButton.Phase.init(_:)((uint64_t)v6);
  *(_QWORD *)(a1 + 8) = 0;
  v21 = (int *)type metadata accessor for ResolvedPlaybackButton(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v10, a1 + v21[5], type metadata accessor for PlaybackButton.Configuration);
  v22 = &v10[*(int *)(v7 + 40)];
  v23 = *(_QWORD *)v22;
  v24 = *((_QWORD *)v22 + 1);
  LOBYTE(v6) = v22[16];
  v25 = *((_QWORD *)v22 + 5);
  *(_OWORD *)v34 = *(_OWORD *)(v22 + 24);
  outlined copy of Environment<AppIntentExecutor?>.Content(v23, v24, (char)v6);
  v26 = *(id *)&v34[0];
  swift_retain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for PlaybackButton.Configuration);
  v27 = a1 + v21[6];
  *(_QWORD *)v27 = v23;
  *(_QWORD *)(v27 + 8) = v24;
  *(_BYTE *)(v27 + 16) = (_BYTE)v6;
  result = v34[0];
  *(_OWORD *)(v27 + 24) = *(_OWORD *)v34;
  *(_QWORD *)(v27 + 40) = v25;
  v29 = a1 + v21[7];
  v30 = v33;
  *(_QWORD *)v29 = v16;
  *(_QWORD *)(v29 + 8) = v30;
  *(_BYTE *)(v29 + 16) = v32;
  *(_BYTE *)(a1 + v21[9]) = v12;
  *(double *)(a1 + v21[8]) = v20;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PlaybackButton()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlaybackButton and conformance PlaybackButton, type metadata accessor for PlaybackButton, (uint64_t)&protocol conformance descriptor for PlaybackButton);
  return static ConditionallyArchivableView._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PlaybackButton()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlaybackButton and conformance PlaybackButton, type metadata accessor for PlaybackButton, (uint64_t)&protocol conformance descriptor for PlaybackButton);
  return static ConditionallyArchivableView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PlaybackButton()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlaybackButton and conformance PlaybackButton, type metadata accessor for PlaybackButton, (uint64_t)&protocol conformance descriptor for PlaybackButton);
  return static ConditionallyArchivableView._viewListCount(inputs:)();
}

int *PlaybackButton.archivedBody.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  double v40;
  int *result;
  uint64_t v42;
  _BYTE v43[12];
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;

  v48 = a1;
  v2 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = &v43[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = (int *)type metadata accessor for ResolvedPlaybackButton(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = &v43[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for PlaybackButton.Configuration(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v43[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v47 = v1 + *(int *)(type metadata accessor for PlaybackButton(0) + 28);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v47, (uint64_t)v13, type metadata accessor for PlaybackButton.Configuration);
  v14 = *(_QWORD *)v1;
  v15 = *(_QWORD *)(v1 + 8);
  v16 = *(unsigned __int8 *)(v1 + 16);
  v17 = *(unsigned __int8 *)(v1 + 17);
  outlined copy of Environment<PlaybackButton._StyleStorage>.Content(*(_QWORD *)v1, v15, v16, *(_BYTE *)(v1 + 17));
  specialized Environment.wrappedValue.getter(v14, v15, v16 | (v17 << 8), (uint64_t)&v50);
  outlined consume of Environment<PlaybackButton._StyleStorage>.Content(v14, v15, v16, v17);
  v45 = v51;
  v46 = v50;
  v44 = v52;
  v18 = *(_QWORD *)(v1 + 24);
  LOBYTE(v15) = *(_BYTE *)(v1 + 32);
  outlined copy of Environment<Bool>.Content(v18, v15);
  LOBYTE(v14) = specialized Environment.wrappedValue.getter(v18, v15);
  outlined consume of Environment<Bool>.Content(v18, v15);
  v19 = *(_QWORD *)(v1 + 40);
  LOBYTE(v15) = *(_BYTE *)(v1 + 48);
  outlined copy of Environment<Bool>.Content(v19, v15);
  v20 = specialized Environment.wrappedValue.getter(v19, v15);
  outlined consume of Environment<Bool>.Content(v19, v15);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v13[*(int *)(v10 + 20)], (uint64_t)v5, type metadata accessor for PlaybackButton.State);
  *v9 = specialized PlaybackButton.Phase.init(_:)((uint64_t)v5);
  *((_QWORD *)v9 + 1) = 0;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, (uint64_t)&v9[v6[5]], type metadata accessor for PlaybackButton.Configuration);
  v21 = &v13[*(int *)(v10 + 40)];
  v22 = *(_QWORD *)v21;
  v23 = *((_QWORD *)v21 + 1);
  LOBYTE(v17) = v21[16];
  v24 = *((_QWORD *)v21 + 5);
  v49 = *(_OWORD *)(v21 + 24);
  outlined copy of Environment<AppIntentExecutor?>.Content(v22, v23, v17);
  v25 = (id)v49;
  swift_retain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, type metadata accessor for PlaybackButton.Configuration);
  v26 = &v9[v6[6]];
  *(_QWORD *)v26 = v22;
  *((_QWORD *)v26 + 1) = v23;
  v26[16] = v17;
  *(_OWORD *)(v26 + 24) = v49;
  *((_QWORD *)v26 + 5) = v24;
  v27 = &v9[v6[7]];
  v28 = v45;
  *(_QWORD *)v27 = v46;
  *((_QWORD *)v27 + 1) = v28;
  v27[16] = v44;
  v9[v6[9]] = v14;
  *(double *)&v9[v6[8]] = v20;
  v29 = v48;
  outlined init with take of TableCellFormula((uint64_t)v9, v48, type metadata accessor for ResolvedPlaybackButton);
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier>, type metadata accessor for ResolvedPlaybackButton, type metadata accessor for ArchivablePlaybackButtonViewModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  v31 = v29 + *(int *)(v30 + 36);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v47, v31, type metadata accessor for PlaybackButton.Configuration);
  v32 = *(_QWORD *)v1;
  v33 = *(_QWORD *)(v1 + 8);
  v34 = *(unsigned __int8 *)(v1 + 16);
  LODWORD(v9) = *(unsigned __int8 *)(v1 + 17);
  outlined copy of Environment<PlaybackButton._StyleStorage>.Content(*(_QWORD *)v1, v33, v34, *(_BYTE *)(v1 + 17));
  specialized Environment.wrappedValue.getter(v32, v33, v34 | ((_DWORD)v9 << 8), (uint64_t)&v50);
  outlined consume of Environment<PlaybackButton._StyleStorage>.Content(v32, v33, v34, (char)v9);
  v35 = v50;
  v36 = v51;
  LOBYTE(v24) = v52;
  v37 = *(_QWORD *)(v1 + 24);
  LOBYTE(v33) = *(_BYTE *)(v1 + 32);
  outlined copy of Environment<Bool>.Content(v37, v33);
  LOBYTE(v34) = specialized Environment.wrappedValue.getter(v37, v33);
  outlined consume of Environment<Bool>.Content(v37, v33);
  v38 = *(_QWORD *)(v1 + 40);
  v39 = *(_BYTE *)(v1 + 48);
  outlined copy of Environment<Bool>.Content(v38, v39);
  v40 = specialized Environment.wrappedValue.getter(v38, v39);
  outlined consume of Environment<Bool>.Content(v38, v39);
  result = (int *)type metadata accessor for ArchivablePlaybackButtonViewModifier(0);
  v42 = v31 + result[5];
  *(_QWORD *)v42 = v35;
  *(_QWORD *)(v42 + 8) = v36;
  *(_BYTE *)(v42 + 16) = v24;
  *(_BYTE *)(v31 + result[6]) = v34;
  *(double *)(v31 + result[7]) = v40;
  return result;
}

double ArchivablePlaybackButtonViewModifier.body(content:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  double result;
  uint64_t v26;
  _BYTE v27[12];
  int v28;
  __int128 v29;

  v2 = v1;
  v4 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for PlaybackButton.Configuration(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)v11, type metadata accessor for PlaybackButton.Configuration);
  v12 = (int *)type metadata accessor for ArchivablePlaybackButtonViewModifier(0);
  v13 = v1 + v12[5];
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  v28 = *(unsigned __int8 *)(v1 + v12[6]);
  v16 = *(_BYTE *)(v13 + 16);
  v17 = *(_QWORD *)(v2 + v12[7]);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v11[*(int *)(v8 + 20)], (uint64_t)v7, type metadata accessor for PlaybackButton.State);
  *(_BYTE *)a1 = specialized PlaybackButton.Phase.init(_:)((uint64_t)v7);
  *(_QWORD *)(a1 + 8) = 0;
  v18 = (int *)type metadata accessor for ResolvedPlaybackButton(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, a1 + v18[5], type metadata accessor for PlaybackButton.Configuration);
  v19 = &v11[*(int *)(v8 + 40)];
  v20 = *(_QWORD *)v19;
  v21 = *((_QWORD *)v19 + 1);
  LOBYTE(v7) = v19[16];
  v22 = *((_QWORD *)v19 + 5);
  v29 = *(_OWORD *)(v19 + 24);
  outlined copy of Environment<AppIntentExecutor?>.Content(v20, v21, (char)v7);
  v23 = (id)v29;
  swift_retain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, type metadata accessor for PlaybackButton.Configuration);
  v24 = a1 + v18[6];
  *(_QWORD *)v24 = v20;
  *(_QWORD *)(v24 + 8) = v21;
  *(_BYTE *)(v24 + 16) = (_BYTE)v7;
  result = *(double *)&v29;
  *(_OWORD *)(v24 + 24) = v29;
  *(_QWORD *)(v24 + 40) = v22;
  v26 = a1 + v18[7];
  *(_QWORD *)v26 = v14;
  *(_QWORD *)(v26 + 8) = v15;
  *(_BYTE *)(v26 + 16) = v16;
  *(_BYTE *)(a1 + v18[9]) = v28;
  *(_QWORD *)(a1 + v18[8]) = v17;
  return result;
}

uint64_t ArchivablePlaybackButtonViewModifier.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  __int128 *v12;
  char v13;
  __int128 v15;
  char v16;
  char v17;

  v3 = v1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ArchivablePlaybackButtonViewModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys, (uint64_t)&unk_1E1B05E30, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v15 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = 0;
  type metadata accessor for PlaybackButton.Configuration(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlaybackButton.Configuration and conformance PlaybackButton.Configuration, type metadata accessor for PlaybackButton.Configuration, (uint64_t)&protocol conformance descriptor for PlaybackButton.Configuration);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v11 = (int *)type metadata accessor for ArchivablePlaybackButtonViewModifier(0);
    v12 = (__int128 *)(v3 + v11[5]);
    v13 = *((_BYTE *)v12 + 16);
    v15 = *v12;
    v16 = v13;
    v17 = 1;
    lazy protocol witness table accessor for type PlaybackButton._StyleStorage and conformance PlaybackButton._StyleStorage();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v15) = *(_BYTE *)(v3 + v11[6]);
    v17 = 2;
    lazy protocol witness table accessor for type CodableVisibility and conformance CodableVisibility();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(_QWORD *)&v15 = *(_QWORD *)(v3 + v11[7]);
    v17 = 3;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t ArchivablePlaybackButtonViewModifier.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  char v30;
  char v31;

  v23 = a2;
  v24 = type metadata accessor for PlaybackButton.Configuration(0);
  MEMORY[0x1E0C80A78](v24, v3);
  v25 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivablePlaybackButtonViewModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys, (uint64_t)&unk_1E1B05E30, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v27 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v23 - v8;
  v10 = (int *)type metadata accessor for ArchivablePlaybackButtonViewModifier(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys();
  v26 = v9;
  v14 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v15 = v6;
  v16 = v23;
  LOBYTE(v29) = 0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlaybackButton.Configuration and conformance PlaybackButton.Configuration, type metadata accessor for PlaybackButton.Configuration, (uint64_t)&protocol conformance descriptor for PlaybackButton.Configuration);
  v17 = (uint64_t)v25;
  v18 = v26;
  v19 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of TableCellFormula(v17, (uint64_t)v13, type metadata accessor for PlaybackButton.Configuration);
  v31 = 1;
  lazy protocol witness table accessor for type PlaybackButton._StyleStorage and conformance PlaybackButton._StyleStorage();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v20 = v30;
  v21 = &v13[v10[5]];
  *(_OWORD *)v21 = v29;
  v21[16] = v20;
  v31 = 2;
  lazy protocol witness table accessor for type CodableVisibility and conformance CodableVisibility();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v13[v10[6]] = v29;
  v31 = 3;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v19);
  *(_QWORD *)&v13[v10[7]] = v29;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, v16, type metadata accessor for ArchivablePlaybackButtonViewModifier);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, type metadata accessor for ArchivablePlaybackButtonViewModifier);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivablePlaybackButtonViewModifier.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1870A3A34 + 4 * byte_187C05D1F[*v0]))(0x72756769666E6F63, 0xED00006E6F697461);
}

uint64_t sub_1870A3A34()
{
  return 0x656C797473;
}

unint64_t sub_1870A3A48()
{
  return 0xD000000000000012;
}

uint64_t sub_1870A3A64()
{
  return 0x61657241706174;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivablePlaybackButtonViewModifier.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ArchivablePlaybackButtonViewModifier.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivablePlaybackButtonViewModifier.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivablePlaybackButtonViewModifier.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ArchivablePlaybackButtonViewModifier@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ArchivablePlaybackButtonViewModifier.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivablePlaybackButtonViewModifier(_QWORD *a1)
{
  return ArchivablePlaybackButtonViewModifier.encode(to:)(a1);
}

uint64_t closure #1 in ResolvedPlaybackButton.body.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34[2];

  v2 = type metadata accessor for ResolvedPlaybackButton(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger();
  v30 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v32 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 8);
  LOBYTE(v34[0]) = *(_BYTE *)a1;
  v34[1] = v9;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<PlaybackButton.Phase>, (uint64_t)&type metadata for PlaybackButton.Phase, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  swift_retain();
  State.wrappedValue.getter();
  PlaybackButton.Phase.toggle()();
  LOBYTE(v34[0]) = v33;
  if (v9)
  {
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
  }
  v29 = v2;
  v10 = a1 + *(int *)(v2 + 24);
  v12 = *(_QWORD *)v10;
  v11 = *(_QWORD *)(v10 + 8);
  v13 = *(_BYTE *)(v10 + 16);
  v15 = *(_QWORD *)(v10 + 24);
  v14 = *(void (**)(uint64_t))(v10 + 32);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v10, v11, v13);
  v16 = (void (*)(uint64_t))specialized Environment.wrappedValue.getter(v12, v11, v13);
  v17 = outlined consume of Environment<AppIntentExecutor?>.Content(v12, v11, v13);
  if (v16)
  {
    v16(v15);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v16);
  }
  else
  {
    v14(v17);
  }
  v18 = v32;
  static Log.archivedPlaybackButton.getter();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v5, type metadata accessor for ResolvedPlaybackButton);
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    v34[0] = v22;
    *(_DWORD *)v21 = 136315138;
    v28 = v21 + 4;
    v23 = objc_msgSend(*(id *)&v5[*(int *)(v29 + 20)+ 24+ (uint64_t)*(int *)(type metadata accessor for PlaybackButton.Configuration(0) + 40)], sel_debugDescription);
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v26 = v25;

    v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, type metadata accessor for ResolvedPlaybackButton);
    _os_log_impl(&dword_186E48000, v19, v20, "Executed LNAction %s from playback button tap.", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v22, -1, -1);
    MEMORY[0x18D760108](v21, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v32, v31);
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, type metadata accessor for ResolvedPlaybackButton);

    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v18, v31);
  }
}

uint64_t closure #2 in ResolvedPlaybackButton.body.getter@<X0>(int a1@<W0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  unsigned __int8 v50;

  v45 = a1;
  v46 = a3;
  v4 = type metadata accessor for ResolvedPlaybackButtonContent(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ResolvedPlaybackButton(0);
  v9 = (uint64_t *)&a2[*(int *)(v8 + 28)];
  v10 = *v9;
  v43 = v9[1];
  v44 = v10;
  v42 = *((unsigned __int8 *)v9 + 16);
  v37 = v8;
  v11 = (uint64_t)&a2[*(int *)(v8 + 20)];
  v12 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v13 = v12[6];
  v40 = v11 + v12[5];
  v14 = *(_QWORD *)(v11 + v13 + 8);
  v41 = *(_QWORD *)(v11 + v13);
  v15 = *((_QWORD *)a2 + 1);
  v48 = *a2;
  v49 = v15;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<PlaybackButton.Phase>, (uint64_t)&type metadata for PlaybackButton.Phase, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  swift_bridgeObjectRetain();
  State.wrappedValue.getter();
  v39 = v50;
  v16 = v12[10];
  v17 = (uint64_t *)(v11 + v12[9]);
  v18 = *v17;
  v38 = v17[1];
  v19 = *(_QWORD *)(v11 + v16);
  v20 = *(_QWORD *)(v11 + v16 + 8);
  v21 = *(_BYTE *)(v11 + v16 + 16);
  v22 = *(_QWORD *)(v11 + v16 + 40);
  v23 = (uint64_t)&v7[*(int *)(v4 + 20)];
  v47 = *(_OWORD *)(v11 + v16 + 24);
  v24 = v11;
  v25 = v19;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v24, v23, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v40, v23 + v12[5], type metadata accessor for PlaybackButton.State);
  v26 = (_QWORD *)(v23 + v12[6]);
  *v26 = v41;
  v26[1] = v14;
  *(_BYTE *)(v23 + v12[7]) = v39;
  *(_BYTE *)(v23 + v12[8]) = v45;
  v27 = (_QWORD *)(v23 + v12[9]);
  v28 = v38;
  *v27 = v18;
  v27[1] = v28;
  v29 = v23 + v12[10];
  *(_QWORD *)v29 = v25;
  *(_QWORD *)(v29 + 8) = v20;
  *(_BYTE *)(v29 + 16) = v21;
  *(_OWORD *)(v29 + 24) = v47;
  *(_QWORD *)(v29 + 40) = v22;
  v30 = v43;
  *(_QWORD *)v7 = v44;
  *((_QWORD *)v7 + 1) = v30;
  LOBYTE(v30) = v42;
  v7[16] = v42;
  v31 = 0.0;
  if ((v30 & 0xFE) == 4)
    v31 = (28.0 - *(double *)&a2[*(int *)(v37 + 32)]) * 0.5;
  v32 = v46;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v7, v46, type metadata accessor for ResolvedPlaybackButtonContent);
  type metadata accessor for ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>();
  v34 = v32 + *(int *)(v33 + 36);
  *(double *)v34 = v31;
  *(_BYTE *)(v34 + 8) = 0;
  *(_QWORD *)(v34 + 16) = 1;
  outlined copy of Environment<AppIntentExecutor?>.Content(v25, v20, v21);
  v35 = (id)v47;
  swift_retain();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for ResolvedPlaybackButtonContent);
}

uint64_t closure #3 in ResolvedPlaybackButton.body.getter()
{
  return static Animation.spring(response:dampingFraction:blendDuration:)();
}

uint64_t EnvironmentValues.playbackButtonProgressVisibility.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey>, (uint64_t)&unk_1E1B05830, (uint64_t)&protocol witness table for PlaybackButtonProgressVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey>, (uint64_t)&unk_1E1B05830, (uint64_t)&protocol witness table for PlaybackButtonProgressVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.playbackButtonProgressVisibility.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey>, (uint64_t)&unk_1E1B05830, (uint64_t)&protocol witness table for PlaybackButtonProgressVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedPlaybackButton()
{
  type metadata accessor for ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>(0);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>, (uint64_t)&type metadata for Visibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>> and conformance ButtonBehavior<A>, (uint64_t (*)(uint64_t))type metadata accessor for ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>, (uint64_t)&protocol conformance descriptor for ButtonBehavior<A>);
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>, (uint64_t)&type metadata for Visibility);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance ResolvedPlaybackButton@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v18 - v11;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)&v18 - v11, type metadata accessor for ResolvedPlaybackButton);
  v13 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v14 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v12, v14 + v13, type metadata accessor for ResolvedPlaybackButton);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v8, type metadata accessor for ResolvedPlaybackButton);
  v15 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v8, v15 + v13, type metadata accessor for ResolvedPlaybackButton);
  result = swift_getKeyPath();
  v17 = *(_BYTE *)(v3 + *(int *)(a1 + 36));
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = partial apply for closure #1 in ResolvedPlaybackButton.body.getter;
  *(_QWORD *)(a3 + 16) = v14;
  *(_QWORD *)(a3 + 24) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = partial apply for closure #2 in ResolvedPlaybackButton.body.getter;
  *(_QWORD *)(a3 + 48) = v15;
  *(_QWORD *)(a3 + 56) = closure #3 in ResolvedPlaybackButton.body.getter;
  *(_QWORD *)(a3 + 64) = 0;
  *(_WORD *)(a3 + 72) = 2;
  *(_BYTE *)(a3 + 74) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = result;
  *(_BYTE *)(a3 + 96) = v17;
  return result;
}

uint64_t ResolvedPlaybackButtonContent.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t (*v25)();
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v32;

  v3 = type metadata accessor for PillPlaybackButtonStyleBody();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v32 - v9;
  v11 = type metadata accessor for PlaybackButton.Configuration(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CirclePlaybackButtonStyleBody();
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v32 - v21;
  v23 = *((_BYTE *)v1 + 16);
  if ((v23 & 0xFE) == 4)
  {
    v24 = type metadata accessor for ResolvedPlaybackButtonContent(0);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v1 + *(int *)(v24 + 20), (uint64_t)v14, type metadata accessor for PlaybackButton.Configuration);
    *(_QWORD *)v18 = swift_getKeyPath();
    v18[8] = 0;
    outlined init with take of TableCellFormula((uint64_t)v14, (uint64_t)&v18[*(int *)(v15 + 20)], type metadata accessor for PlaybackButton.Configuration);
    v25 = type metadata accessor for CirclePlaybackButtonStyleBody;
    outlined init with take of TableCellFormula((uint64_t)v18, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for CirclePlaybackButtonStyleBody);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v22, a1, (uint64_t (*)(_QWORD))type metadata accessor for CirclePlaybackButtonStyleBody);
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<CirclePlaybackButtonStyleBody, PillPlaybackButtonStyleBody>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for CirclePlaybackButtonStyleBody, (uint64_t (*)(uint64_t))type metadata accessor for PillPlaybackButtonStyleBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    v26 = (uint64_t)v22;
  }
  else
  {
    v28 = *v1;
    v27 = v1[1];
    v29 = type metadata accessor for ResolvedPlaybackButtonContent(0);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v1 + *(int *)(v29 + 20), (uint64_t)v14, type metadata accessor for PlaybackButton.Configuration);
    *(_QWORD *)v6 = swift_getKeyPath();
    v6[8] = 0;
    outlined init with take of TableCellFormula((uint64_t)v14, (uint64_t)&v6[*(int *)(v3 + 20)], type metadata accessor for PlaybackButton.Configuration);
    v30 = &v6[*(int *)(v3 + 24)];
    *v30 = v28;
    *((_QWORD *)v30 + 1) = v27;
    v30[16] = v23;
    v25 = type metadata accessor for PillPlaybackButtonStyleBody;
    outlined init with take of TableCellFormula((uint64_t)v6, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PillPlaybackButtonStyleBody);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v10, a1, (uint64_t (*)(_QWORD))type metadata accessor for PillPlaybackButtonStyleBody);
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<CirclePlaybackButtonStyleBody, PillPlaybackButtonStyleBody>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for CirclePlaybackButtonStyleBody, (uint64_t (*)(uint64_t))type metadata accessor for PillPlaybackButtonStyleBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    v26 = (uint64_t)v10;
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v26, (uint64_t (*)(_QWORD))v25);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedPlaybackButtonContent()
{
  uint64_t v0;
  char v1;
  BOOL v2;
  unsigned __int8 v3;

  type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo(0);
  lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent();
  v0 = static ModifiedContent<>._viewListCount(inputs:)();
  if ((v1 & 1) == 0)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedCont();
    v2 = v0 != static ModifiedContent<>._viewListCount(inputs:)();
    if (((v3 | v2) & 1) != 0)
      return 0;
  }
  return v0;
}

uint64_t View.playbackButtonTapArea(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

double EnvironmentValues.playbackButtonTapArea.getter()
{
  uint64_t v0;
  double v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>, (uint64_t)&unk_1E1AE5D30, (uint64_t)&protocol witness table for PlaybackButtonTapAreaKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PlaybackButtonTapAreaKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>, (uint64_t)&unk_1E1AE5D30, (uint64_t)&protocol witness table for PlaybackButtonTapAreaKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PlaybackButtonTapAreaKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.playbackButtonTapArea.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>, (uint64_t)&unk_1E1AE5D30, (uint64_t)&protocol witness table for PlaybackButtonTapAreaKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PlaybackButtonTapAreaKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.playbackButtonProgress(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance PlaybackButtonTapAreaKey(_QWORD *a1@<X8>)
{
  *a1 = 0x4049000000000000;
}

uint64_t key path getter for EnvironmentValues.appIntentExecutor : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.appIntentExecutor.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.appIntentExecutor : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  outlined copy of AppIntentExecutor?(*a1);
  specialized EnvironmentValues.subscript.setter(v1, v2);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PillPlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance PillPlaybackButtonStyleBody(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedCont);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance CirclePlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance PillPlaybackButtonStyleBody(a1, a2, a3, type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PillPlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), void (*a5)(void))
{
  a4(0);
  a5();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

double key path getter for EnvironmentValues.playbackButtonStyle : EnvironmentValues@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  char v5;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>, (uint64_t)&type metadata for EnvironmentValues.PlaybackButtonStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.PlaybackButtonStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>, (uint64_t)&type metadata for EnvironmentValues.PlaybackButtonStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.PlaybackButtonStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_BYTE *)(a2 + 16) = v5;
  return result;
}

uint64_t key path setter for EnvironmentValues.playbackButtonStyle : EnvironmentValues()
{
  return EnvironmentValues.playbackButtonStyle.setter();
}

uint64_t specialized static PlaybackButton.State.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  char v21;
  uint64_t (*v22)(_QWORD);
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (PlaybackButton.State, PlaybackButton.State)();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (uint64_t)&v16[*(int *)(v17 + 48)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v16, type metadata accessor for PlaybackButton.State);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, v18, type metadata accessor for PlaybackButton.State);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  v20 = v19(v16, 2, v4);
  if (v20)
  {
    if (v20 == 1)
    {
      if (v19((char *)v18, 2, v4) != 1)
        goto LABEL_9;
      goto LABEL_8;
    }
    if (v19((char *)v18, 2, v4) == 2)
    {
LABEL_8:
      v21 = 1;
LABEL_11:
      v22 = type metadata accessor for PlaybackButton.State;
      goto LABEL_12;
    }
  }
  else
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v16, (uint64_t)v12, type metadata accessor for PlaybackButton.State);
    if (!v19((char *)v18, 2, v4))
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v8, v18, v4);
      v21 = static Date.== infix(_:_:)();
      v23 = *(void (**)(char *, uint64_t))(v5 + 8);
      v23(v8, v4);
      v23(v12, v4);
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
  }
LABEL_9:
  v21 = 0;
  v22 = (uint64_t (*)(_QWORD))type metadata accessor for (PlaybackButton.State, PlaybackButton.State);
LABEL_12:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, v22);
  return v21 & 1;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.State.PausedCodingKeys, &unk_1E1AB9100);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.State.PausedCodingKeys, &unk_1E1AB9100);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.State.PausedCodingKeys, &unk_1E1AB9100);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.State.PausedCodingKeys, &unk_1E1AB9100);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.PausedCodingKeys and conformance PlaybackButton.State.PausedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.State.PlayingCodingKeys, &unk_1E1AB9190);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.State.PlayingCodingKeys, &unk_1E1AB9190);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.State.PlayingCodingKeys, &unk_1E1AB9190);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.PlayingCodingKeys and conformance PlaybackButton.State.PlayingCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.State.UnplayedCodingKeys, &unk_1E1AB91B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.State.UnplayedCodingKeys, &unk_1E1AB91B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.State.UnplayedCodingKeys, &unk_1E1AB91B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.UnplayedCodingKeys and conformance PlaybackButton.State.UnplayedCodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for PlaybackButton.State(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for PlaybackButton.State);
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.State.CodingKeys, &unk_1E1AB9070);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.State.CodingKeys, &unk_1E1AB9070);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.State.CodingKeys, &unk_1E1AB9070);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.State.CodingKeys, &unk_1E1AB9070);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.State.CodingKeys and conformance PlaybackButton.State.CodingKeys);
  }
  return result;
}

uint64_t sub_1870A516C()
{
  return EnvironmentValues.playbackButtonStyle.setter();
}

uint64_t sub_1870A51A8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.playbackButtonProgressVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1870A51E0()
{
  return EnvironmentValues.playbackButtonProgressVisibility.setter();
}

void sub_1870A5204(double *a1@<X8>)
{
  *a1 = EnvironmentValues.playbackButtonTapArea.getter();
}

uint64_t sub_1870A523C()
{
  return EnvironmentValues.playbackButtonTapArea.setter();
}

uint64_t sub_1870A5260@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.appIntentExecutor.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t type metadata accessor for PlaybackButton(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for PlaybackButton);
}

void type metadata accessor for ClosedRange<Date>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t type metadata accessor for PlaybackButton.Configuration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for PlaybackButton.Configuration);
}

uint64_t outlined copy of Environment<PlaybackButton._StyleStorage>.Content(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if ((a4 & 1) == 0)
    return swift_retain();
  return result;
}

uint64_t outlined consume of Environment<PlaybackButton._StyleStorage>.Content(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if ((a4 & 1) == 0)
    return swift_release();
  return result;
}

uint64_t specialized PlaybackButton.Configuration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D496D6574737973 && a2 == 0xEB00000000656761
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6573616870 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6573736572507369 && a2 == 0xE900000000000064
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E656D6E67696C61 && a2 == 0xE900000000000074
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6E6F69746361 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t specialized PlaybackButton.State.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x646579616C706E75 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E6979616C70 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646573756170 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized PlaybackButton.Phase.init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (PlaybackButton.State, PlaybackButton.State)();
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v28 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v3 + 56))((char *)&v28 - v19, 2, 2, v2, v18);
  v21 = (uint64_t)&v11[*(int *)(v8 + 48)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v11, type metadata accessor for PlaybackButton.State);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v20, v21, type metadata accessor for PlaybackButton.State);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  v23 = v22(v11, 2, v2);
  if (v23)
  {
    if (v23 == 1)
    {
      if (v22((char *)v21, 2, v2) != 1)
        goto LABEL_9;
      goto LABEL_8;
    }
    if (v22((char *)v21, 2, v2) == 2)
    {
LABEL_8:
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, type metadata accessor for PlaybackButton.State);
      v24 = 2;
      goto LABEL_13;
    }
LABEL_9:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for (PlaybackButton.State, PlaybackButton.State));
    v24 = 0;
    goto LABEL_13;
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v15, type metadata accessor for PlaybackButton.State);
  if (v22((char *)v21, 2, v2))
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v15, v2);
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v6, v21, v2);
  v25 = static Date.== infix(_:_:)();
  v26 = *(void (**)(char *, uint64_t))(v3 + 8);
  v26(v6, v2);
  v26(v15, v2);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, type metadata accessor for PlaybackButton.State);
  if ((v25 & 1) != 0)
    v24 = 2;
  else
    v24 = 0;
LABEL_13:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, type metadata accessor for PlaybackButton.State);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, type metadata accessor for PlaybackButton.State);
  return v24;
}

uint64_t type metadata accessor for ResolvedPlaybackButton(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedPlaybackButton);
}

uint64_t type metadata accessor for ArchivablePlaybackButtonViewModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ArchivablePlaybackButtonViewModifier);
}

uint64_t associated type witness table accessor for View.Body : View in PlaybackButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ConditionallyArchivableView.ArchivedBody : View in PlaybackButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for PlaybackButton(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlaybackButton and conformance PlaybackButton, type metadata accessor for PlaybackButton, (uint64_t)&protocol conformance descriptor for PlaybackButton);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PlaybackButton(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  __int128 v41;
  id v42;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 17);
    v10 = *(_BYTE *)(a2 + 16);
    outlined copy of Environment<PlaybackButton._StyleStorage>.Content(*(_QWORD *)a2, v8, v10, v9);
    *v4 = v7;
    v4[1] = v8;
    *((_BYTE *)v4 + 16) = v10;
    *((_BYTE *)v4 + 17) = v9;
    v11 = *(_QWORD *)(a2 + 24);
    LOBYTE(v8) = *(_BYTE *)(a2 + 32);
    outlined copy of Environment<Bool>.Content(v11, v8);
    v4[3] = v11;
    *((_BYTE *)v4 + 32) = v8;
    v12 = *(_QWORD *)(a2 + 40);
    LOBYTE(v8) = *(_BYTE *)(a2 + 48);
    outlined copy of Environment<Bool>.Content(v12, v8);
    v4[5] = v12;
    *((_BYTE *)v4 + 48) = v8;
    v13 = *(int *)(a3 + 28);
    v14 = (char *)v4 + v13;
    v15 = (char *)(a2 + v13);
    type metadata accessor for ClosedRange<Date>();
    v17 = v16;
    v18 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v16))
    {
      type metadata accessor for ClosedRange<Date>?(0);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v21 = type metadata accessor for Date();
      v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
      v22(v14, v15, v21);
      v22(&v14[*(int *)(v17 + 36)], &v15[*(int *)(v17 + 36)], v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v17);
    }
    v23 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
    v24 = v23[5];
    v25 = &v14[v24];
    v26 = &v15[v24];
    v27 = type metadata accessor for Date();
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 2, v27))
    {
      v29 = type metadata accessor for PlaybackButton.State(0);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 2, v27);
    }
    v30 = v23[6];
    v31 = &v14[v30];
    v32 = &v15[v30];
    v33 = *((_QWORD *)v32 + 1);
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *((_QWORD *)v31 + 1) = v33;
    v14[v23[7]] = v15[v23[7]];
    v14[v23[8]] = v15[v23[8]];
    *(_OWORD *)&v14[v23[9]] = *(_OWORD *)&v15[v23[9]];
    v34 = v23[10];
    v35 = &v14[v34];
    v36 = &v15[v34];
    v37 = *(_QWORD *)&v15[v34];
    v38 = *(_QWORD *)&v15[v34 + 8];
    v39 = v36[16];
    swift_bridgeObjectRetain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v37, v38, v39);
    *(_QWORD *)v35 = v37;
    *((_QWORD *)v35 + 1) = v38;
    v35[16] = v39;
    v40 = *((_QWORD *)v36 + 5);
    v41 = *(_OWORD *)(v36 + 24);
    *(_OWORD *)(v35 + 24) = v41;
    *((_QWORD *)v35 + 5) = v40;
    v42 = (id)v41;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for PlaybackButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  outlined consume of Environment<PlaybackButton._StyleStorage>.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_BYTE *)(a1 + 17));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  v4 = a1 + *(int *)(a2 + 28);
  type metadata accessor for ClosedRange<Date>();
  v6 = v5;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v7 = type metadata accessor for Date();
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v8(v4, v7);
    v8(v4 + *(int *)(v6 + 36), v7);
  }
  v9 = type metadata accessor for PlaybackButton.Configuration(0);
  v10 = v4 + *(int *)(v9 + 20);
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 2, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  swift_bridgeObjectRelease();
  v13 = v4 + *(int *)(v9 + 40);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));

  return swift_release();
}

uint64_t initializeWithCopy for PlaybackButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  id v40;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 17);
  v9 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of Environment<PlaybackButton._StyleStorage>.Content(*(_QWORD *)a2, v7, v9, v8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 17) = v8;
  v10 = *(_QWORD *)(a2 + 24);
  LOBYTE(v7) = *(_BYTE *)(a2 + 32);
  outlined copy of Environment<Bool>.Content(v10, v7);
  *(_QWORD *)(a1 + 24) = v10;
  *(_BYTE *)(a1 + 32) = v7;
  v11 = *(_QWORD *)(a2 + 40);
  LOBYTE(v7) = *(_BYTE *)(a2 + 48);
  outlined copy of Environment<Bool>.Content(v11, v7);
  *(_QWORD *)(a1 + 40) = v11;
  *(_BYTE *)(a1 + 48) = v7;
  v12 = *(int *)(a3 + 28);
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  type metadata accessor for ClosedRange<Date>();
  v16 = v15;
  v17 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v15))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = type metadata accessor for Date();
    v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
    v20(v13, v14, v19);
    v20(&v13[*(int *)(v16 + 36)], &v14[*(int *)(v16 + 36)], v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
  }
  v21 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v22 = v21[5];
  v23 = &v13[v22];
  v24 = &v14[v22];
  v25 = type metadata accessor for Date();
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 2, v25))
  {
    v27 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 2, v25);
  }
  v28 = v21[6];
  v29 = &v13[v28];
  v30 = &v14[v28];
  v31 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *((_QWORD *)v29 + 1) = v31;
  v13[v21[7]] = v14[v21[7]];
  v13[v21[8]] = v14[v21[8]];
  *(_OWORD *)&v13[v21[9]] = *(_OWORD *)&v14[v21[9]];
  v32 = v21[10];
  v33 = &v13[v32];
  v34 = &v14[v32];
  v35 = *(_QWORD *)&v14[v32];
  v36 = *(_QWORD *)&v14[v32 + 8];
  v37 = v34[16];
  swift_bridgeObjectRetain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v35, v36, v37);
  *(_QWORD *)v33 = v35;
  *((_QWORD *)v33 + 1) = v36;
  v33[16] = v37;
  v38 = *((_QWORD *)v34 + 5);
  v39 = *(_OWORD *)(v34 + 24);
  *(_OWORD *)(v33 + 24) = v39;
  *((_QWORD *)v33 + 5) = v38;
  v40 = (id)v39;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PlaybackButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 17);
  v9 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of Environment<PlaybackButton._StyleStorage>.Content(*(_QWORD *)a2, v7, v9, v8);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_BYTE *)(a1 + 17);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  v13 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 17) = v8;
  outlined consume of Environment<PlaybackButton._StyleStorage>.Content(v10, v11, v13, v12);
  v14 = *(_QWORD *)(a2 + 24);
  LOBYTE(v7) = *(_BYTE *)(a2 + 32);
  outlined copy of Environment<Bool>.Content(v14, v7);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v14;
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of Environment<Bool>.Content(v15, v16);
  v17 = *(_QWORD *)(a2 + 40);
  LOBYTE(v7) = *(_BYTE *)(a2 + 48);
  outlined copy of Environment<Bool>.Content(v17, v7);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v17;
  *(_BYTE *)(a1 + 48) = v7;
  outlined consume of Environment<Bool>.Content(v18, v19);
  v20 = *(int *)(a3 + 28);
  v21 = (char *)(a1 + v20);
  v22 = (char *)(a2 + v20);
  type metadata accessor for ClosedRange<Date>();
  v24 = v23;
  v25 = *(_QWORD *)(v23 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v7) = v26(v21, 1, v23);
  v27 = v26(v22, 1, v24);
  if ((_DWORD)v7)
  {
    if (!v27)
    {
      v28 = type metadata accessor for Date();
      v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
      v29(v21, v22, v28);
      v29(&v21[*(int *)(v24 + 36)], &v22[*(int *)(v24 + 36)], v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  v61 = type metadata accessor for Date();
  v62 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 24);
  v62(v21, v22, v61);
  v62(&v21[*(int *)(v24 + 36)], &v22[*(int *)(v24 + 36)], v61);
LABEL_7:
  v31 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v32 = v31[5];
  v33 = &v21[v32];
  v34 = &v22[v32];
  v35 = type metadata accessor for Date();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  v38 = v37(v33, 2, v35);
  v39 = v37(v34, 2, v35);
  if (!v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
    goto LABEL_12;
  }
  if (v39)
  {
LABEL_12:
    v40 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 2, v35);
LABEL_13:
  v41 = v31[6];
  v42 = &v21[v41];
  v43 = &v22[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21[v31[7]] = v22[v31[7]];
  v21[v31[8]] = v22[v31[8]];
  v44 = v31[9];
  v45 = &v21[v44];
  v46 = &v22[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
  v47 = v31[10];
  v48 = &v21[v47];
  v49 = &v22[v47];
  v50 = *(_QWORD *)&v22[v47];
  v51 = *(_QWORD *)&v22[v47 + 8];
  v52 = v49[16];
  outlined copy of Environment<AppIntentExecutor?>.Content(v50, v51, v52);
  v53 = *(_QWORD *)v48;
  v54 = *((_QWORD *)v48 + 1);
  v55 = v48[16];
  *(_QWORD *)v48 = v50;
  *((_QWORD *)v48 + 1) = v51;
  v48[16] = v52;
  outlined consume of Environment<AppIntentExecutor?>.Content(v53, v54, v55);
  v56 = (void *)*((_QWORD *)v49 + 3);
  v57 = (void *)*((_QWORD *)v48 + 3);
  *((_QWORD *)v48 + 3) = v56;
  v58 = v56;

  v59 = *((_QWORD *)v49 + 5);
  *((_QWORD *)v48 + 4) = *((_QWORD *)v49 + 4);
  *((_QWORD *)v48 + 5) = v59;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for PlaybackButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(int *)(a3 + 28);
  v5 = (char *)(a2 + v4);
  v6 = (char *)(a1 + v4);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  type metadata accessor for ClosedRange<Date>();
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v7))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v6, v5, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = type metadata accessor for Date();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
    v12(v6, v5, v11);
    v12(&v6[*(int *)(v8 + 36)], &v5[*(int *)(v8 + 36)], v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  v13 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v14 = v13[5];
  v15 = &v6[v14];
  v16 = &v5[v14];
  v17 = type metadata accessor for Date();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 2, v17))
  {
    v19 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 2, v17);
  }
  *(_OWORD *)&v6[v13[6]] = *(_OWORD *)&v5[v13[6]];
  v6[v13[7]] = v5[v13[7]];
  v6[v13[8]] = v5[v13[8]];
  *(_OWORD *)&v6[v13[9]] = *(_OWORD *)&v5[v13[9]];
  v20 = v13[10];
  v21 = &v6[v20];
  v22 = &v5[v20];
  v23 = *((_OWORD *)v22 + 1);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v23;
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  return a1;
}

uint64_t assignWithTake for PlaybackButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  void *v51;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 17);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_BYTE *)(a1 + 17);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v11 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 17) = v7;
  outlined consume of Environment<PlaybackButton._StyleStorage>.Content(v8, v9, v11, v10);
  v12 = *(_BYTE *)(a2 + 32);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v12;
  outlined consume of Environment<Bool>.Content(v13, v14);
  v15 = *(_BYTE *)(a2 + 48);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = v15;
  outlined consume of Environment<Bool>.Content(v16, v17);
  v18 = *(int *)(a3 + 28);
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  type metadata accessor for ClosedRange<Date>();
  v22 = v21;
  v23 = *(_QWORD *)(v21 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v19, 1, v21);
  v26 = v24(v20, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      v27 = type metadata accessor for Date();
      v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
      v28(v19, v20, v27);
      v28(&v19[*(int *)(v22 + 36)], &v20[*(int *)(v22 + 36)], v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  v53 = type metadata accessor for Date();
  v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 40);
  v54(v19, v20, v53);
  v54(&v19[*(int *)(v22 + 36)], &v20[*(int *)(v22 + 36)], v53);
LABEL_7:
  v30 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v31 = v30[5];
  v32 = &v19[v31];
  v33 = &v20[v31];
  v34 = type metadata accessor for Date();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 2, v34);
  v38 = v36(v33, 2, v34);
  if (!v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 40))(v32, v33, v34);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v34);
    goto LABEL_12;
  }
  if (v38)
  {
LABEL_12:
    v39 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 2, v34);
LABEL_13:
  v40 = v30[6];
  v41 = &v19[v40];
  v42 = &v20[v40];
  v44 = *(_QWORD *)v42;
  v43 = *((_QWORD *)v42 + 1);
  *(_QWORD *)v41 = v44;
  *((_QWORD *)v41 + 1) = v43;
  swift_bridgeObjectRelease();
  v19[v30[7]] = v20[v30[7]];
  v19[v30[8]] = v20[v30[8]];
  *(_OWORD *)&v19[v30[9]] = *(_OWORD *)&v20[v30[9]];
  v45 = v30[10];
  v46 = &v19[v45];
  v47 = &v20[v45];
  LOBYTE(v45) = v47[16];
  v48 = *(_QWORD *)v46;
  v49 = *((_QWORD *)v46 + 1);
  v50 = v46[16];
  *(_OWORD *)v46 = *(_OWORD *)v47;
  v46[16] = v45;
  outlined consume of Environment<AppIntentExecutor?>.Content(v48, v49, v50);
  v51 = (void *)*((_QWORD *)v46 + 3);
  *((_QWORD *)v46 + 3) = *((_QWORD *)v47 + 3);

  *((_OWORD *)v46 + 2) = *((_OWORD *)v47 + 2);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaybackButton()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870A68D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 17);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for PlaybackButton.Configuration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PlaybackButton()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870A6950(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 17) = -(char)a2;
  }
  else
  {
    v7 = type metadata accessor for PlaybackButton.Configuration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PlaybackButton()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PlaybackButton.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PlaybackButton.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t destroy for PlaybackButton.State(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 2, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for PlaybackButton.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithCopy for PlaybackButton.State(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *initializeWithTake for PlaybackButton.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithTake for PlaybackButton.State(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaybackButton.State()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870A6EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = type metadata accessor for Date();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PlaybackButton.State()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870A6EFC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t getEnumTag for PlaybackButton.State(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
}

uint64_t destructiveInjectEnumTag for PlaybackButton.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 2, v4);
}

uint64_t type metadata completion function for PlaybackButton.State()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_1870A701C()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedPlaybackButton and conformance ResolvedPlaybackButton, type metadata accessor for ResolvedPlaybackButton, (uint64_t)&protocol conformance descriptor for ResolvedPlaybackButton);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier>, type metadata accessor for ResolvedPlaybackButton, type metadata accessor for ArchivablePlaybackButtonViewModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedPlaybackButton and conformance ResolvedPlaybackButton, type metadata accessor for ResolvedPlaybackButton, (uint64_t)&protocol conformance descriptor for ResolvedPlaybackButton);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, type metadata accessor for ArchivablePlaybackButtonViewModifier, (uint64_t)&protocol conformance descriptor for ArchivablePlaybackButtonViewModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedPlaybackButton, ArchivablePlaybackButtonViewModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1870A710C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVy12CoreGraphics7CGFloatVGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E0DEF040], (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t sub_1870A7128(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVy12CoreGraphics7CGFloatVGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>, (uint64_t)&type metadata for Visibility, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVy12CoreGraphics7CGFloatVGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v7 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v8 = type metadata accessor for ModifiedContent();
  v10[0] = v7;
  v10[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>(a4, a2, a3);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v10);
}

char *initializeBufferWithCopyOfBuffer for ArchivablePlaybackButtonViewModifier(char *a1, uint64_t *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t *, uint64_t);
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  id v37;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = (char *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    type metadata accessor for ClosedRange<Date>();
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
    {
      type metadata accessor for ClosedRange<Date>?(0);
      memcpy(v4, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v12 = type metadata accessor for Date();
      v13 = *(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      v13(v4, a2, v12);
      v13(&v4[*(int *)(v8 + 36)], (uint64_t *)((char *)a2 + *(int *)(v8 + 36)), v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
    }
    v14 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
    v15 = v14[5];
    v16 = &v4[v15];
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for Date();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 2, v18))
    {
      v20 = type metadata accessor for PlaybackButton.State(0);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 2, v18);
    }
    v21 = v14[6];
    v22 = &v4[v21];
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = v23[1];
    *(_QWORD *)v22 = *v23;
    *((_QWORD *)v22 + 1) = v24;
    v4[v14[7]] = *((_BYTE *)a2 + v14[7]);
    v4[v14[8]] = *((_BYTE *)a2 + v14[8]);
    *(_OWORD *)&v4[v14[9]] = *(_OWORD *)((char *)a2 + v14[9]);
    v25 = v14[10];
    v26 = &v4[v25];
    v27 = (char *)a2 + v25;
    v28 = *(uint64_t *)((char *)a2 + v25);
    v29 = *(uint64_t *)((char *)a2 + v25 + 8);
    v30 = *((_BYTE *)a2 + v25 + 16);
    swift_bridgeObjectRetain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v28, v29, v30);
    *(_QWORD *)v26 = v28;
    *((_QWORD *)v26 + 1) = v29;
    v26[16] = v30;
    v31 = *((_QWORD *)v27 + 5);
    v32 = *(_OWORD *)(v27 + 24);
    *(_OWORD *)(v26 + 24) = v32;
    *((_QWORD *)v26 + 5) = v31;
    v33 = a3[5];
    v34 = a3[6];
    v35 = &v4[v33];
    v36 = (char *)a2 + v33;
    *(_OWORD *)v35 = *(_OWORD *)v36;
    v35[16] = v36[16];
    v4[v34] = *((_BYTE *)a2 + v34);
    *(_QWORD *)&v4[a3[7]] = *(uint64_t *)((char *)a2 + a3[7]);
    v37 = (id)v32;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ArchivablePlaybackButtonViewModifier(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  type metadata accessor for ClosedRange<Date>();
  v3 = v2;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2))
  {
    v4 = type metadata accessor for Date();
    v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
    v5(a1, v4);
    v5(a1 + *(int *)(v3 + 36), v4);
  }
  v6 = type metadata accessor for PlaybackButton.Configuration(0);
  v7 = a1 + *(int *)(v6 + 20);
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 2, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease();
  v10 = a1 + *(int *)(v6 + 40);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));

  return swift_release();
}

char *initializeWithCopy for ArchivablePlaybackButtonViewModifier(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  id v35;

  type metadata accessor for ClosedRange<Date>();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for Date();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(a1, a2, v10);
    v11(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  v12 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v13 = v12[5];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for Date();
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 2, v16))
  {
    v18 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 2, v16);
  }
  v19 = v12[6];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = v22;
  a1[v12[7]] = a2[v12[7]];
  a1[v12[8]] = a2[v12[8]];
  *(_OWORD *)&a1[v12[9]] = *(_OWORD *)&a2[v12[9]];
  v23 = v12[10];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = *(_QWORD *)&a2[v23];
  v27 = *(_QWORD *)&a2[v23 + 8];
  v28 = a2[v23 + 16];
  swift_bridgeObjectRetain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v26, v27, v28);
  *(_QWORD *)v24 = v26;
  *((_QWORD *)v24 + 1) = v27;
  v24[16] = v28;
  v29 = *((_QWORD *)v25 + 5);
  v30 = *(_OWORD *)(v25 + 24);
  *(_OWORD *)(v24 + 24) = v30;
  *((_QWORD *)v24 + 5) = v29;
  v31 = a3[5];
  v32 = a3[6];
  v33 = &a1[v31];
  v34 = &a2[v31];
  *(_OWORD *)v33 = *(_OWORD *)v34;
  v33[16] = v34[16];
  a1[v32] = a2[v32];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  v35 = (id)v30;
  swift_retain();
  return a1;
}

char *assignWithCopy for ArchivablePlaybackButtonViewModifier(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);

  type metadata accessor for ClosedRange<Date>();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(a1, 1, v6);
  v11 = v9(a2, 1, v7);
  if (v10)
  {
    if (!v11)
    {
      v12 = type metadata accessor for Date();
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      v13(a1, a2, v12);
      v13(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v11)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v49 = type metadata accessor for Date();
  v50 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 24);
  v50(a1, a2, v49);
  v50(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v49);
LABEL_7:
  v15 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v16 = v15[5];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = type metadata accessor for Date();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 2, v19);
  v23 = v21(v18, 2, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    v24 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 2, v19);
LABEL_13:
  v25 = v15[6];
  v26 = &a1[v25];
  v27 = &a2[v25];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v15[7]] = a2[v15[7]];
  a1[v15[8]] = a2[v15[8]];
  v28 = v15[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);
  v31 = v15[10];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = *(_QWORD *)&a2[v31];
  v35 = *(_QWORD *)&a2[v31 + 8];
  v36 = a2[v31 + 16];
  outlined copy of Environment<AppIntentExecutor?>.Content(v34, v35, v36);
  v37 = *(_QWORD *)v32;
  v38 = *((_QWORD *)v32 + 1);
  v39 = v32[16];
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  v32[16] = v36;
  outlined consume of Environment<AppIntentExecutor?>.Content(v37, v38, v39);
  v40 = (void *)*((_QWORD *)v33 + 3);
  v41 = (void *)*((_QWORD *)v32 + 3);
  *((_QWORD *)v32 + 3) = v40;
  v42 = v40;

  v43 = *((_QWORD *)v33 + 5);
  *((_QWORD *)v32 + 4) = *((_QWORD *)v33 + 4);
  *((_QWORD *)v32 + 5) = v43;
  swift_retain();
  swift_release();
  v44 = a3[5];
  v45 = &a1[v44];
  v46 = &a2[v44];
  v47 = *(_OWORD *)v46;
  v45[16] = v46[16];
  *(_OWORD *)v45 = v47;
  a1[a3[6]] = a2[a3[6]];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

char *initializeWithTake for ArchivablePlaybackButtonViewModifier(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;

  type metadata accessor for ClosedRange<Date>();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for Date();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
    v11(a1, a2, v10);
    v11(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  v12 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v13 = v12[5];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for Date();
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 2, v16))
  {
    v18 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 2, v16);
  }
  *(_OWORD *)&a1[v12[6]] = *(_OWORD *)&a2[v12[6]];
  a1[v12[7]] = a2[v12[7]];
  a1[v12[8]] = a2[v12[8]];
  *(_OWORD *)&a1[v12[9]] = *(_OWORD *)&a2[v12[9]];
  v19 = v12[10];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
  v23 = a3[5];
  v24 = a3[6];
  v25 = &a1[v23];
  v26 = &a2[v23];
  *(_OWORD *)v25 = *(_OWORD *)v26;
  v25[16] = v26[16];
  a1[v24] = a2[v24];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

char *assignWithTake for ArchivablePlaybackButtonViewModifier(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);

  type metadata accessor for ClosedRange<Date>();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(a1, 1, v6);
  v11 = v9(a2, 1, v7);
  if (v10)
  {
    if (!v11)
    {
      v12 = type metadata accessor for Date();
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
      v13(a1, a2, v12);
      v13(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v11)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v42 = type metadata accessor for Date();
  v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 40);
  v43(a1, a2, v42);
  v43(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v42);
LABEL_7:
  v15 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v16 = v15[5];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = type metadata accessor for Date();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 2, v19);
  v23 = v21(v18, 2, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    v24 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 2, v19);
LABEL_13:
  v25 = v15[6];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v29 = *(_QWORD *)v27;
  v28 = *((_QWORD *)v27 + 1);
  *(_QWORD *)v26 = v29;
  *((_QWORD *)v26 + 1) = v28;
  swift_bridgeObjectRelease();
  a1[v15[7]] = a2[v15[7]];
  a1[v15[8]] = a2[v15[8]];
  *(_OWORD *)&a1[v15[9]] = *(_OWORD *)&a2[v15[9]];
  v30 = v15[10];
  v31 = &a1[v30];
  v32 = &a2[v30];
  LOBYTE(v30) = a2[v30 + 16];
  v33 = *(_QWORD *)v31;
  v34 = *((_QWORD *)v31 + 1);
  v35 = v31[16];
  *(_OWORD *)v31 = *(_OWORD *)v32;
  v31[16] = v30;
  outlined consume of Environment<AppIntentExecutor?>.Content(v33, v34, v35);
  v36 = (void *)*((_QWORD *)v31 + 3);
  *((_QWORD *)v31 + 3) = *((_QWORD *)v32 + 3);

  *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
  swift_release();
  v37 = a3[5];
  v38 = a3[6];
  v39 = &a1[v37];
  v40 = &a2[v37];
  *(_OWORD *)v39 = *(_OWORD *)v40;
  v39[16] = v40[16];
  a1[v38] = a2[v38];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivablePlaybackButtonViewModifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870A7EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for PlaybackButton.Configuration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 3)
    return v9 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ArchivablePlaybackButtonViewModifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870A7F80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PlaybackButton.Configuration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 2;
  return result;
}

uint64_t type metadata completion function for ArchivablePlaybackButtonViewModifier()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PlaybackButton.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ResolvedPlaybackButton(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  id v49;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    a1[1] = a2[1];
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    type metadata accessor for ClosedRange<Date>();
    v11 = v10;
    v12 = *(_QWORD *)(v10 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    if (v13(v9, 1, v11))
    {
      type metadata accessor for ClosedRange<Date>?(0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = type metadata accessor for Date();
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      v17(v8, v9, v16);
      v17(&v8[*(int *)(v11 + 36)], &v9[*(int *)(v11 + 36)], v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
    }
    v18 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
    v19 = v18[5];
    v20 = &v8[v19];
    v21 = &v9[v19];
    v22 = type metadata accessor for Date();
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 2, v22))
    {
      v24 = type metadata accessor for PlaybackButton.State(0);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 2, v22);
    }
    v25 = v18[6];
    v26 = &v8[v25];
    v27 = &v9[v25];
    v28 = *((_QWORD *)v27 + 1);
    *(_QWORD *)v26 = *(_QWORD *)v27;
    *((_QWORD *)v26 + 1) = v28;
    v8[v18[7]] = v9[v18[7]];
    v8[v18[8]] = v9[v18[8]];
    *(_OWORD *)&v8[v18[9]] = *(_OWORD *)&v9[v18[9]];
    v29 = v18[10];
    v30 = &v8[v29];
    v31 = &v9[v29];
    v32 = *(_QWORD *)&v9[v29];
    v33 = *(_QWORD *)&v9[v29 + 8];
    v34 = v31[16];
    swift_bridgeObjectRetain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v32, v33, v34);
    *(_QWORD *)v30 = v32;
    *((_QWORD *)v30 + 1) = v33;
    v30[16] = v34;
    v35 = *((_QWORD *)v31 + 5);
    v36 = *(_OWORD *)(v31 + 24);
    *(_OWORD *)(v30 + 24) = v36;
    *((_QWORD *)v30 + 5) = v35;
    v37 = a3[6];
    v38 = (char *)v4 + v37;
    v39 = (char *)a2 + v37;
    v40 = *(_QWORD *)((char *)a2 + v37);
    v41 = *(_QWORD *)((char *)a2 + v37 + 8);
    LOBYTE(v30) = *((_BYTE *)a2 + v37 + 16);
    v42 = (id)v36;
    swift_retain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v40, v41, (char)v30);
    *(_QWORD *)v38 = v40;
    *((_QWORD *)v38 + 1) = v41;
    v38[16] = (char)v30;
    v43 = *((_QWORD *)v39 + 5);
    v44 = *(_OWORD *)(v39 + 24);
    *(_OWORD *)(v38 + 24) = v44;
    *((_QWORD *)v38 + 5) = v43;
    v45 = a3[7];
    v46 = a3[8];
    v47 = (char *)v4 + v45;
    v48 = (char *)a2 + v45;
    *(_OWORD *)v47 = *(_OWORD *)v48;
    v47[16] = v48[16];
    *(_QWORD *)((char *)v4 + v46) = *(_QWORD *)((char *)a2 + v46);
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v49 = (id)v44;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ResolvedPlaybackButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for ClosedRange<Date>();
  v6 = v5;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v7 = type metadata accessor for Date();
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v8(v4, v7);
    v8(v4 + *(int *)(v6 + 36), v7);
  }
  v9 = type metadata accessor for PlaybackButton.Configuration(0);
  v10 = v4 + *(int *)(v9 + 20);
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 2, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  swift_bridgeObjectRelease();
  v13 = v4 + *(int *)(v9 + 40);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));

  swift_release();
  v14 = a1 + *(int *)(a2 + 24);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_BYTE *)(v14 + 16));

  return swift_release();
}

uint64_t initializeWithCopy for ResolvedPlaybackButton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[5];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  type metadata accessor for ClosedRange<Date>();
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  if (v12(v8, 1, v10))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = type metadata accessor for Date();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    v15(v7, v8, v14);
    v15(&v7[*(int *)(v10 + 36)], &v8[*(int *)(v10 + 36)], v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  v16 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v17 = v16[5];
  v18 = &v7[v17];
  v19 = &v8[v17];
  v20 = type metadata accessor for Date();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 2, v20))
  {
    v22 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 2, v20);
  }
  v23 = v16[6];
  v24 = &v7[v23];
  v25 = &v8[v23];
  v26 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *((_QWORD *)v24 + 1) = v26;
  v7[v16[7]] = v8[v16[7]];
  v7[v16[8]] = v8[v16[8]];
  *(_OWORD *)&v7[v16[9]] = *(_OWORD *)&v8[v16[9]];
  v27 = v16[10];
  v28 = &v7[v27];
  v29 = &v8[v27];
  v30 = *(_QWORD *)&v8[v27];
  v31 = *(_QWORD *)&v8[v27 + 8];
  v32 = v29[16];
  swift_bridgeObjectRetain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v30, v31, v32);
  *(_QWORD *)v28 = v30;
  *((_QWORD *)v28 + 1) = v31;
  v28[16] = v32;
  v33 = *((_QWORD *)v29 + 5);
  v34 = *(_OWORD *)(v29 + 24);
  *(_OWORD *)(v28 + 24) = v34;
  *((_QWORD *)v28 + 5) = v33;
  v35 = a3[6];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = *(_QWORD *)(a2 + v35);
  v39 = *(_QWORD *)(a2 + v35 + 8);
  LOBYTE(v28) = *(_BYTE *)(a2 + v35 + 16);
  v40 = (id)v34;
  swift_retain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v38, v39, (char)v28);
  *(_QWORD *)v36 = v38;
  *(_QWORD *)(v36 + 8) = v39;
  *(_BYTE *)(v36 + 16) = (_BYTE)v28;
  v41 = *(_QWORD *)(v37 + 40);
  v42 = *(_OWORD *)(v37 + 24);
  *(_OWORD *)(v36 + 24) = v42;
  *(_QWORD *)(v36 + 40) = v41;
  v43 = a3[7];
  v44 = a3[8];
  v45 = a1 + v43;
  v46 = a2 + v43;
  *(_OWORD *)v45 = *(_OWORD *)v46;
  *(_BYTE *)(v45 + 16) = *(_BYTE *)(v46 + 16);
  *(_QWORD *)(a1 + v44) = *(_QWORD *)(a2 + v44);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v47 = (id)v42;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ResolvedPlaybackButton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 *v62;
  __int128 v63;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  int *v67;
  uint64_t v68;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v67 = a3;
  v68 = a2;
  v6 = a3[5];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  type metadata accessor for ClosedRange<Date>();
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v7, 1, v9);
  v14 = v12(v8, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v15 = type metadata accessor for Date();
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      v16(v7, v8, v15);
      v16(&v7[*(int *)(v10 + 36)], &v8[*(int *)(v10 + 36)], v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  v65 = type metadata accessor for Date();
  v66 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 24);
  v66(v7, v8, v65);
  v66(&v7[*(int *)(v10 + 36)], &v8[*(int *)(v10 + 36)], v65);
LABEL_7:
  v18 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v19 = v18[5];
  v20 = &v7[v19];
  v21 = &v8[v19];
  v22 = type metadata accessor for Date();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 2, v22);
  v26 = v24(v21, 2, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v27 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 2, v22);
LABEL_13:
  v28 = v18[6];
  v29 = &v7[v28];
  v30 = &v8[v28];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[v18[7]] = v8[v18[7]];
  v7[v18[8]] = v8[v18[8]];
  v31 = v18[9];
  v32 = &v7[v31];
  v33 = &v8[v31];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
  v34 = v18[10];
  v35 = &v7[v34];
  v36 = &v8[v34];
  v37 = *(_QWORD *)&v8[v34];
  v38 = *(_QWORD *)&v8[v34 + 8];
  v39 = v36[16];
  outlined copy of Environment<AppIntentExecutor?>.Content(v37, v38, v39);
  v40 = *(_QWORD *)v35;
  v41 = *((_QWORD *)v35 + 1);
  v42 = v35[16];
  *(_QWORD *)v35 = v37;
  *((_QWORD *)v35 + 1) = v38;
  v35[16] = v39;
  outlined consume of Environment<AppIntentExecutor?>.Content(v40, v41, v42);
  v43 = (void *)*((_QWORD *)v36 + 3);
  v44 = (void *)*((_QWORD *)v35 + 3);
  *((_QWORD *)v35 + 3) = v43;
  v45 = v43;

  v46 = *((_QWORD *)v36 + 5);
  *((_QWORD *)v35 + 4) = *((_QWORD *)v36 + 4);
  *((_QWORD *)v35 + 5) = v46;
  swift_retain();
  swift_release();
  v47 = v67[6];
  v48 = a1 + v47;
  v49 = (_QWORD *)(v68 + v47);
  v50 = *(_QWORD *)(v68 + v47);
  v51 = *(_QWORD *)(v68 + v47 + 8);
  v52 = *(_BYTE *)(v68 + v47 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(v50, v51, v52);
  v53 = *(_QWORD *)v48;
  v54 = *(_QWORD *)(v48 + 8);
  v55 = *(_BYTE *)(v48 + 16);
  *(_QWORD *)v48 = v50;
  *(_QWORD *)(v48 + 8) = v51;
  *(_BYTE *)(v48 + 16) = v52;
  outlined consume of Environment<AppIntentExecutor?>.Content(v53, v54, v55);
  v56 = (void *)v49[3];
  v57 = *(void **)(v48 + 24);
  *(_QWORD *)(v48 + 24) = v56;
  v58 = v56;

  v59 = v49[5];
  *(_QWORD *)(v48 + 32) = v49[4];
  *(_QWORD *)(v48 + 40) = v59;
  swift_retain();
  swift_release();
  v60 = v67[7];
  v61 = a1 + v60;
  v62 = (__int128 *)(v68 + v60);
  v63 = *v62;
  *(_BYTE *)(v61 + 16) = *((_BYTE *)v62 + 16);
  *(_OWORD *)v61 = v63;
  *(_QWORD *)(a1 + v67[8]) = *(_QWORD *)(v68 + v67[8]);
  *(_BYTE *)(a1 + v67[9]) = *(_BYTE *)(v68 + v67[9]);
  return a1;
}

_OWORD *initializeWithTake for ResolvedPlaybackButton(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  char *v31;
  char *v32;
  uint64_t v33;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  type metadata accessor for ClosedRange<Date>();
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for Date();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
    v14(v7, v8, v13);
    v14(&v7[*(int *)(v10 + 36)], &v8[*(int *)(v10 + 36)], v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  v15 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v16 = v15[5];
  v17 = &v7[v16];
  v18 = &v8[v16];
  v19 = type metadata accessor for Date();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 2, v19))
  {
    v21 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 2, v19);
  }
  *(_OWORD *)&v7[v15[6]] = *(_OWORD *)&v8[v15[6]];
  v7[v15[7]] = v8[v15[7]];
  v7[v15[8]] = v8[v15[8]];
  *(_OWORD *)&v7[v15[9]] = *(_OWORD *)&v8[v15[9]];
  v22 = v15[10];
  v23 = &v7[v22];
  v24 = &v8[v22];
  v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((_OWORD *)v23 + 2) = *((_OWORD *)v24 + 2);
  v26 = a3[6];
  v27 = a3[7];
  v28 = (_OWORD *)((char *)a1 + v26);
  v29 = (_OWORD *)((char *)a2 + v26);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v28[2] = v29[2];
  v31 = (char *)a1 + v27;
  v32 = (char *)a2 + v27;
  *(_OWORD *)v31 = *(_OWORD *)v32;
  v31[16] = v32[16];
  v33 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + v33) = *((_BYTE *)a2 + v33);
  return a1;
}

uint64_t assignWithTake for ResolvedPlaybackButton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  int *v55;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v54 = a2;
  v55 = a3;
  v6 = a3[5];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  type metadata accessor for ClosedRange<Date>();
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v7, 1, v9);
  v14 = v12(v8, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v15 = type metadata accessor for Date();
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
      v16(v7, v8, v15);
      v16(&v7[*(int *)(v10 + 36)], &v8[*(int *)(v10 + 36)], v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  v52 = type metadata accessor for Date();
  v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 40);
  v53(v7, v8, v52);
  v53(&v7[*(int *)(v10 + 36)], &v8[*(int *)(v10 + 36)], v52);
LABEL_7:
  v18 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v19 = v18[5];
  v20 = &v7[v19];
  v21 = &v8[v19];
  v22 = type metadata accessor for Date();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 2, v22);
  v26 = v24(v21, 2, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v20, v21, v22);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v27 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 2, v22);
LABEL_13:
  v28 = v18[6];
  v29 = &v7[v28];
  v30 = &v8[v28];
  v32 = *(_QWORD *)v30;
  v31 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v29 = v32;
  *((_QWORD *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  v7[v18[7]] = v8[v18[7]];
  v7[v18[8]] = v8[v18[8]];
  *(_OWORD *)&v7[v18[9]] = *(_OWORD *)&v8[v18[9]];
  v33 = v18[10];
  v34 = &v7[v33];
  v35 = &v8[v33];
  LOBYTE(v33) = v8[v33 + 16];
  v36 = *(_QWORD *)v34;
  v37 = *((_QWORD *)v34 + 1);
  v38 = v34[16];
  *(_OWORD *)v34 = *(_OWORD *)v35;
  v34[16] = v33;
  outlined consume of Environment<AppIntentExecutor?>.Content(v36, v37, v38);
  v39 = (void *)*((_QWORD *)v34 + 3);
  *((_QWORD *)v34 + 3) = *((_QWORD *)v35 + 3);

  *((_OWORD *)v34 + 2) = *((_OWORD *)v35 + 2);
  swift_release();
  v40 = v55[6];
  v41 = a1 + v40;
  v42 = v54 + v40;
  LOBYTE(v40) = *(_BYTE *)(v54 + v40 + 16);
  v43 = *(_QWORD *)v41;
  v44 = *(_QWORD *)(v41 + 8);
  v45 = *(_BYTE *)(v41 + 16);
  *(_OWORD *)v41 = *(_OWORD *)v42;
  *(_BYTE *)(v41 + 16) = v40;
  outlined consume of Environment<AppIntentExecutor?>.Content(v43, v44, v45);
  v46 = *(void **)(v41 + 24);
  *(_QWORD *)(v41 + 24) = *(_QWORD *)(v42 + 24);

  *(_OWORD *)(v41 + 32) = *(_OWORD *)(v42 + 32);
  swift_release();
  v47 = v55[7];
  v48 = v55[8];
  v49 = a1 + v47;
  v50 = v54 + v47;
  *(_OWORD *)v49 = *(_OWORD *)v50;
  *(_BYTE *)(v49 + 16) = *(_BYTE *)(v50 + 16);
  *(_QWORD *)(a1 + v48) = *(_QWORD *)(v54 + v48);
  *(_BYTE *)(a1 + v55[9]) = *(_BYTE *)(v54 + v55[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedPlaybackButton()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870A902C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for PlaybackButton.Configuration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedPlaybackButton()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870A90BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PlaybackButton.Configuration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 24) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for ResolvedPlaybackButton()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PlaybackButton.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for PlaybackButton.Configuration(char *a1, uint64_t *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  id v34;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = (char *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    type metadata accessor for ClosedRange<Date>();
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
    {
      type metadata accessor for ClosedRange<Date>?(0);
      memcpy(v4, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v12 = type metadata accessor for Date();
      v13 = *(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      v13(v4, a2, v12);
      v13(&v4[*(int *)(v8 + 36)], (uint64_t *)((char *)a2 + *(int *)(v8 + 36)), v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
    }
    v14 = a3[5];
    v15 = &v4[v14];
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for Date();
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 2, v17))
    {
      v19 = type metadata accessor for PlaybackButton.State(0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 2, v17);
    }
    v20 = a3[6];
    v21 = a3[7];
    v22 = &v4[v20];
    v23 = (uint64_t *)((char *)a2 + v20);
    v24 = v23[1];
    *(_QWORD *)v22 = *v23;
    *((_QWORD *)v22 + 1) = v24;
    v4[v21] = *((_BYTE *)a2 + v21);
    v25 = a3[9];
    v4[a3[8]] = *((_BYTE *)a2 + a3[8]);
    *(_OWORD *)&v4[v25] = *(_OWORD *)((char *)a2 + v25);
    v26 = a3[10];
    v27 = &v4[v26];
    v28 = (char *)a2 + v26;
    v29 = *(uint64_t *)((char *)a2 + v26);
    v30 = *((_QWORD *)v28 + 1);
    v31 = v28[16];
    swift_bridgeObjectRetain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v29, v30, v31);
    *(_QWORD *)v27 = v29;
    *((_QWORD *)v27 + 1) = v30;
    v27[16] = v31;
    v32 = *((_QWORD *)v28 + 5);
    v33 = *(_OWORD *)(v28 + 24);
    *(_OWORD *)(v27 + 24) = v33;
    *((_QWORD *)v27 + 5) = v32;
    v34 = (id)v33;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for PlaybackButton.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for ClosedRange<Date>();
  v5 = v4;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    v6 = type metadata accessor for Date();
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v7(a1, v6);
    v7(a1 + *(int *)(v5 + 36), v6);
  }
  v8 = a1 + *(int *)(a2 + 20);
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 2, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  v11 = a1 + *(int *)(a2 + 40);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));

  return swift_release();
}

char *initializeWithCopy for PlaybackButton.Configuration(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  __int128 v31;
  id v32;

  type metadata accessor for ClosedRange<Date>();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for Date();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(a1, a2, v10);
    v11(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for Date();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 2, v15))
  {
    v17 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 2, v15);
  }
  v18 = a3[6];
  v19 = a3[7];
  v20 = &a1[v18];
  v21 = &a2[v18];
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = v22;
  a1[v19] = a2[v19];
  v23 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  *(_OWORD *)&a1[v23] = *(_OWORD *)&a2[v23];
  v24 = a3[10];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = *(_QWORD *)&a2[v24];
  v28 = *((_QWORD *)v26 + 1);
  v29 = v26[16];
  swift_bridgeObjectRetain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v27, v28, v29);
  *(_QWORD *)v25 = v27;
  *((_QWORD *)v25 + 1) = v28;
  v25[16] = v29;
  v30 = *((_QWORD *)v26 + 5);
  v31 = *(_OWORD *)(v26 + 24);
  *(_OWORD *)(v25 + 24) = v31;
  *((_QWORD *)v25 + 5) = v30;
  v32 = (id)v31;
  swift_retain();
  return a1;
}

char *assignWithCopy for PlaybackButton.Configuration(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);

  type metadata accessor for ClosedRange<Date>();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(a1, 1, v6);
  v11 = v9(a2, 1, v7);
  if (v10)
  {
    if (!v11)
    {
      v12 = type metadata accessor for Date();
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      v13(a1, a2, v12);
      v13(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v11)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v44 = type metadata accessor for Date();
  v45 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 24);
  v45(a1, a2, v44);
  v45(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v44);
LABEL_7:
  v15 = a3[5];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for Date();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 2, v18);
  v22 = v20(v17, 2, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    v23 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 2, v18);
LABEL_13:
  v24 = a3[6];
  v25 = &a1[v24];
  v26 = &a2[v24];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *((_QWORD *)v25 + 1) = *((_QWORD *)v26 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[7]] = a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  v27 = a3[9];
  v28 = &a1[v27];
  v29 = &a2[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
  v30 = a3[10];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = *(_QWORD *)&a2[v30];
  v34 = *((_QWORD *)v32 + 1);
  v35 = v32[16];
  outlined copy of Environment<AppIntentExecutor?>.Content(v33, v34, v35);
  v36 = *(_QWORD *)v31;
  v37 = *((_QWORD *)v31 + 1);
  v38 = v31[16];
  *(_QWORD *)v31 = v33;
  *((_QWORD *)v31 + 1) = v34;
  v31[16] = v35;
  outlined consume of Environment<AppIntentExecutor?>.Content(v36, v37, v38);
  v39 = (void *)*((_QWORD *)v32 + 3);
  v40 = (void *)*((_QWORD *)v31 + 3);
  *((_QWORD *)v31 + 3) = v39;
  v41 = v39;

  v42 = *((_QWORD *)v32 + 5);
  *((_QWORD *)v31 + 4) = *((_QWORD *)v32 + 4);
  *((_QWORD *)v31 + 5) = v42;
  swift_retain();
  swift_release();
  return a1;
}

char *initializeWithTake for PlaybackButton.Configuration(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;

  type metadata accessor for ClosedRange<Date>();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for Date();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
    v11(a1, a2, v10);
    v11(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for Date();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 2, v15))
  {
    v17 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 2, v15);
  }
  v18 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  a1[v18] = a2[v18];
  v19 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  *(_OWORD *)&a1[v19] = *(_OWORD *)&a2[v19];
  v20 = a3[10];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = *((_OWORD *)v22 + 1);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v23;
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  return a1;
}

char *assignWithTake for PlaybackButton.Configuration(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void *v37;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);

  type metadata accessor for ClosedRange<Date>();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(a1, 1, v6);
  v11 = v9(a2, 1, v7);
  if (v10)
  {
    if (!v11)
    {
      v12 = type metadata accessor for Date();
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
      v13(a1, a2, v12);
      v13(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v11)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v39 = type metadata accessor for Date();
  v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 40);
  v40(a1, a2, v39);
  v40(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v39);
LABEL_7:
  v15 = a3[5];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for Date();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 2, v18);
  v22 = v20(v17, 2, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v16, v17, v18);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    v23 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 2, v18);
LABEL_13:
  v24 = a3[6];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v28 = *(_QWORD *)v26;
  v27 = *((_QWORD *)v26 + 1);
  *(_QWORD *)v25 = v28;
  *((_QWORD *)v25 + 1) = v27;
  swift_bridgeObjectRelease();
  v29 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v29] = a2[v29];
  v30 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = v32[16];
  v34 = *(_QWORD *)&a1[v30];
  v35 = *(_QWORD *)&a1[v30 + 8];
  v36 = a1[v30 + 16];
  *(_OWORD *)v31 = *(_OWORD *)v32;
  v31[16] = v33;
  outlined consume of Environment<AppIntentExecutor?>.Content(v34, v35, v36);
  v37 = (void *)*((_QWORD *)v31 + 3);
  *((_QWORD *)v31 + 3) = *((_QWORD *)v32 + 3);

  *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaybackButton.Configuration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870A9DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  type metadata accessor for ClosedRange<Date>?(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for PlaybackButton.State(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 40) + 24);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaybackButton.Configuration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870A9E68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  type metadata accessor for ClosedRange<Date>?(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for PlaybackButton.State(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 40) + 24) = (a2 - 1);
  return result;
}

void type metadata completion function for PlaybackButton.Configuration()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for ClosedRange<Date>?(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PlaybackButton.State(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for PlaybackButton.State.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1870AA010 + 4 * byte_187C05D28[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1870AA044 + 4 * byte_187C05D23[v4]))();
}

uint64_t sub_1870AA044(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870AA04C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1870AA054);
  return result;
}

uint64_t sub_1870AA060(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1870AA068);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1870AA06C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870AA074(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PlaybackButton.State.CodingKeys()
{
  return &unk_1E1AB9070;
}

void *type metadata accessor for PlaybackButton.State.UnplayedCodingKeys()
{
  return &unk_1E1AB91B0;
}

void *type metadata accessor for PlaybackButton.State.PlayingCodingKeys()
{
  return &unk_1E1AB9190;
}

uint64_t storeEnumTagSinglePayload for PlaybackButton.State.PausedCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1870AA0F0 + 4 * byte_187C05D2D[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1870AA110 + 4 * byte_187C05D32[v4]))();
}

_BYTE *sub_1870AA0F0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1870AA110(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1870AA118(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1870AA120(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1870AA128(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1870AA130(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for PlaybackButton.State.PausedCodingKeys()
{
  return &unk_1E1AB9100;
}

uint64_t instantiation function for generic protocol witness table for ArchivablePlaybackButtonViewModifier(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, type metadata accessor for ArchivablePlaybackButtonViewModifier, (uint64_t)&protocol conformance descriptor for ArchivablePlaybackButtonViewModifier);
  a1[2] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, type metadata accessor for ArchivablePlaybackButtonViewModifier, (uint64_t)&protocol conformance descriptor for ArchivablePlaybackButtonViewModifier);
  result = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, type metadata accessor for ArchivablePlaybackButtonViewModifier, (uint64_t)&protocol conformance descriptor for ArchivablePlaybackButtonViewModifier);
  a1[3] = result;
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ArchivablePlaybackButtonViewModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedPlaybackButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in ResolvedPlaybackButton.body.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ResolvedPlaybackButton(0) - 8) + 80);
  return closure #1 in ResolvedPlaybackButton.body.getter(v0 + ((v1 + 16) & ~v1));
}

uint64_t partial apply for closure #2 in ResolvedPlaybackButton.body.getter@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ResolvedPlaybackButton(0) - 8) + 80);
  return closure #2 in ResolvedPlaybackButton.body.getter(a1, (char *)(v2 + ((v5 + 16) & ~v5)), a2);
}

uint64_t type metadata accessor for ResolvedPlaybackButtonContent(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedPlaybackButtonContent);
}

void type metadata accessor for ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>)
  {
    type metadata accessor for ResolvedPlaybackButtonContent(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ContentShapeKindModifier<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, MEMORY[0x1E0CE7E10], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeKindModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>);
  }
}

unint64_t lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset;
  if (!lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7E00], MEMORY[0x1E0CE7E10]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset);
  }
  return result;
}

void type metadata accessor for ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>)
  {
    type metadata accessor for ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for ButtonBehavior(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedPlaybackButtonContent and conformance ResolvedPlaybackButtonContent, type metadata accessor for ResolvedPlaybackButtonContent, (uint64_t)&protocol conformance descriptor for ResolvedPlaybackButtonContent);
    v3[1] = &protocol witness table for _ContentShapeKindModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivablePlaybackButtonViewModifier.CodingKeys, &unk_1E1B05E30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivablePlaybackButtonViewModifier.CodingKeys, &unk_1E1B05E30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivablePlaybackButtonViewModifier.CodingKeys, &unk_1E1B05E30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivablePlaybackButtonViewModifier.CodingKeys, &unk_1E1B05E30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier.CodingKeys and conformance ArchivablePlaybackButtonViewModifier.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton._StyleStorage and conformance PlaybackButton._StyleStorage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage and conformance PlaybackButton._StyleStorage;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage and conformance PlaybackButton._StyleStorage)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton._StyleStorage, &type metadata for PlaybackButton._StyleStorage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage and conformance PlaybackButton._StyleStorage);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage and conformance PlaybackButton._StyleStorage;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage and conformance PlaybackButton._StyleStorage)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton._StyleStorage, &type metadata for PlaybackButton._StyleStorage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage and conformance PlaybackButton._StyleStorage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableVisibility and conformance CodableVisibility()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableVisibility and conformance CodableVisibility;
  if (!lazy protocol witness table cache variable for type CodableVisibility and conformance CodableVisibility)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableVisibility, &type metadata for CodableVisibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableVisibility and conformance CodableVisibility);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableVisibility and conformance CodableVisibility;
  if (!lazy protocol witness table cache variable for type CodableVisibility and conformance CodableVisibility)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableVisibility, &type metadata for CodableVisibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableVisibility and conformance CodableVisibility);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Configuration.CodingKeys, &unk_1E1AB8CC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Configuration.CodingKeys, &unk_1E1AB8CC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Configuration.CodingKeys, &unk_1E1AB8CC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Configuration.CodingKeys, &unk_1E1AB8CC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Configuration.CodingKeys and conformance PlaybackButton.Configuration.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.Phase and conformance PlaybackButton.Phase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase, &type metadata for PlaybackButton.Phase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase, &type metadata for PlaybackButton.Phase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase, &type metadata for PlaybackButton.Phase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase, &type metadata for PlaybackButton.Phase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase and conformance PlaybackButton.Phase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAlignment and conformance CodableAlignment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAlignment and conformance CodableAlignment;
  if (!lazy protocol witness table cache variable for type CodableAlignment and conformance CodableAlignment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAlignment, &type metadata for CodableAlignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment and conformance CodableAlignment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAlignment and conformance CodableAlignment;
  if (!lazy protocol witness table cache variable for type CodableAlignment and conformance CodableAlignment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAlignment, &type metadata for CodableAlignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment and conformance CodableAlignment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AppIntentAction and conformance AppIntentAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AppIntentAction and conformance AppIntentAction;
  if (!lazy protocol witness table cache variable for type AppIntentAction and conformance AppIntentAction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AppIntentAction, &type metadata for AppIntentAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppIntentAction and conformance AppIntentAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AppIntentAction and conformance AppIntentAction;
  if (!lazy protocol witness table cache variable for type AppIntentAction and conformance AppIntentAction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AppIntentAction, &type metadata for AppIntentAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppIntentAction and conformance AppIntentAction);
  }
  return result;
}

void type metadata accessor for (PlaybackButton.State, PlaybackButton.State)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (PlaybackButton.State, PlaybackButton.State))
  {
    type metadata accessor for PlaybackButton.State(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (PlaybackButton.State, PlaybackButton.State));
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PlaybackButtonTapAreaKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlaybackButtonTapAreaKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlaybackButtonTapAreaKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>, (uint64_t)&unk_1E1AE5D30, (uint64_t)&protocol witness table for PlaybackButtonTapAreaKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlaybackButtonTapAreaKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey>, (uint64_t)&unk_1E1B05830, (uint64_t)&protocol witness table for PlaybackButtonProgressVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlaybackButtonProgressVisibilityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>, (uint64_t)&type metadata for EnvironmentValues.PlaybackButtonStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.PlaybackButtonStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void *type metadata accessor for PlaybackButtonProgressVisibilityKey()
{
  return &unk_1E1B05830;
}

void *type metadata accessor for PlaybackButtonTapAreaKey()
{
  return &unk_1E1AE5D30;
}

uint64_t getEnumTagSinglePayload for PlaybackButton.Configuration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaybackButton.Configuration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1870AAD3C + 4 * byte_187C05D3C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1870AAD70 + 4 * byte_187C05D37[v4]))();
}

uint64_t sub_1870AAD70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870AAD78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1870AAD80);
  return result;
}

uint64_t sub_1870AAD8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1870AAD94);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1870AAD98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870AADA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PlaybackButton.Configuration.CodingKeys()
{
  return &unk_1E1AB8CC0;
}

void *type metadata accessor for ArchivablePlaybackButtonViewModifier.CodingKeys()
{
  return &unk_1E1B05E30;
}

uint64_t initializeBufferWithCopyOfBuffer for ResolvedPlaybackButtonContent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  id v34;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    v3 = v12 + ((v4 + 16) & ~(unint64_t)v4);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v5 = *(int *)(a3 + 20);
    v6 = (char *)(a1 + v5);
    v7 = (char *)a2 + v5;
    type metadata accessor for ClosedRange<Date>();
    v9 = v8;
    v10 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v8))
    {
      type metadata accessor for ClosedRange<Date>?(0);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v13 = type metadata accessor for Date();
      v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
      v14(v6, v7, v13);
      v14(&v6[*(int *)(v9 + 36)], &v7[*(int *)(v9 + 36)], v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
    }
    v15 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
    v16 = v15[5];
    v17 = &v6[v16];
    v18 = &v7[v16];
    v19 = type metadata accessor for Date();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 2, v19))
    {
      v21 = type metadata accessor for PlaybackButton.State(0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 2, v19);
    }
    v22 = v15[6];
    v23 = &v6[v22];
    v24 = &v7[v22];
    v25 = *((_QWORD *)v24 + 1);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *((_QWORD *)v23 + 1) = v25;
    v6[v15[7]] = v7[v15[7]];
    v6[v15[8]] = v7[v15[8]];
    *(_OWORD *)&v6[v15[9]] = *(_OWORD *)&v7[v15[9]];
    v26 = v15[10];
    v27 = &v6[v26];
    v28 = &v7[v26];
    v29 = *(_QWORD *)&v7[v26];
    v30 = *(_QWORD *)&v7[v26 + 8];
    v31 = v28[16];
    swift_bridgeObjectRetain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v29, v30, v31);
    *(_QWORD *)v27 = v29;
    *((_QWORD *)v27 + 1) = v30;
    v27[16] = v31;
    v32 = *((_QWORD *)v28 + 5);
    v33 = *(_OWORD *)(v28 + 24);
    *(_OWORD *)(v27 + 24) = v33;
    *((_QWORD *)v27 + 5) = v32;
    v34 = (id)v33;
  }
  swift_retain();
  return v3;
}

uint64_t destroy for ResolvedPlaybackButtonContent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1 + *(int *)(a2 + 20);
  type metadata accessor for ClosedRange<Date>();
  v4 = v3;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3))
  {
    v5 = type metadata accessor for Date();
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v6(v2, v5);
    v6(v2 + *(int *)(v4 + 36), v5);
  }
  v7 = type metadata accessor for PlaybackButton.Configuration(0);
  v8 = v2 + *(int *)(v7 + 20);
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 2, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  v11 = v2 + *(int *)(v7 + 40);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));

  return swift_release();
}

uint64_t initializeWithCopy for ResolvedPlaybackButtonContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  __int128 v31;
  id v32;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(int *)(a3 + 20);
  v5 = (char *)(a1 + v4);
  v6 = (char *)(a2 + v4);
  type metadata accessor for ClosedRange<Date>();
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v7))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = type metadata accessor for Date();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v12(v5, v6, v11);
    v12(&v5[*(int *)(v8 + 36)], &v6[*(int *)(v8 + 36)], v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
  }
  v13 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v14 = v13[5];
  v15 = &v5[v14];
  v16 = &v6[v14];
  v17 = type metadata accessor for Date();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 2, v17))
  {
    v19 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 2, v17);
  }
  v20 = v13[6];
  v21 = &v5[v20];
  v22 = &v6[v20];
  v23 = *((_QWORD *)v22 + 1);
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *((_QWORD *)v21 + 1) = v23;
  v5[v13[7]] = v6[v13[7]];
  v5[v13[8]] = v6[v13[8]];
  *(_OWORD *)&v5[v13[9]] = *(_OWORD *)&v6[v13[9]];
  v24 = v13[10];
  v25 = &v5[v24];
  v26 = &v6[v24];
  v27 = *(_QWORD *)&v6[v24];
  v28 = *(_QWORD *)&v6[v24 + 8];
  v29 = v26[16];
  swift_bridgeObjectRetain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v27, v28, v29);
  *(_QWORD *)v25 = v27;
  *((_QWORD *)v25 + 1) = v28;
  v25[16] = v29;
  v30 = *((_QWORD *)v26 + 5);
  v31 = *(_OWORD *)(v26 + 24);
  *(_OWORD *)(v25 + 24) = v31;
  *((_QWORD *)v25 + 5) = v30;
  v32 = (id)v31;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ResolvedPlaybackButtonContent(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);

  v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)(a1 + v5);
  v7 = (char *)a2 + v5;
  type metadata accessor for ClosedRange<Date>();
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v6, 1, v8);
  v13 = v11(v7, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      v14 = type metadata accessor for Date();
      v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
      v15(v6, v7, v14);
      v15(&v6[*(int *)(v9 + 36)], &v7[*(int *)(v9 + 36)], v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v47 = type metadata accessor for Date();
  v48 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 24);
  v48(v6, v7, v47);
  v48(&v6[*(int *)(v9 + 36)], &v7[*(int *)(v9 + 36)], v47);
LABEL_7:
  v17 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v18 = v17[5];
  v19 = &v6[v18];
  v20 = &v7[v18];
  v21 = type metadata accessor for Date();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 2, v21);
  v25 = v23(v20, 2, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v19, v20, v21);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    v26 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 2, v21);
LABEL_13:
  v27 = v17[6];
  v28 = &v6[v27];
  v29 = &v7[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6[v17[7]] = v7[v17[7]];
  v6[v17[8]] = v7[v17[8]];
  v30 = v17[9];
  v31 = &v6[v30];
  v32 = &v7[v30];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
  v33 = v17[10];
  v34 = &v6[v33];
  v35 = &v7[v33];
  v36 = *(_QWORD *)&v7[v33];
  v37 = *(_QWORD *)&v7[v33 + 8];
  v38 = v35[16];
  outlined copy of Environment<AppIntentExecutor?>.Content(v36, v37, v38);
  v39 = *(_QWORD *)v34;
  v40 = *((_QWORD *)v34 + 1);
  v41 = v34[16];
  *(_QWORD *)v34 = v36;
  *((_QWORD *)v34 + 1) = v37;
  v34[16] = v38;
  outlined consume of Environment<AppIntentExecutor?>.Content(v39, v40, v41);
  v42 = (void *)*((_QWORD *)v35 + 3);
  v43 = (void *)*((_QWORD *)v34 + 3);
  *((_QWORD *)v34 + 3) = v42;
  v44 = v42;

  v45 = *((_QWORD *)v35 + 5);
  *((_QWORD *)v34 + 4) = *((_QWORD *)v35 + 4);
  *((_QWORD *)v34 + 5) = v45;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for ResolvedPlaybackButtonContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(int *)(a3 + 20);
  v5 = (char *)(a1 + v4);
  v6 = (char *)(a2 + v4);
  type metadata accessor for ClosedRange<Date>();
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v7))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = type metadata accessor for Date();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
    v12(v5, v6, v11);
    v12(&v5[*(int *)(v8 + 36)], &v6[*(int *)(v8 + 36)], v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
  }
  v13 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v14 = v13[5];
  v15 = &v5[v14];
  v16 = &v6[v14];
  v17 = type metadata accessor for Date();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 2, v17))
  {
    v19 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 2, v17);
  }
  *(_OWORD *)&v5[v13[6]] = *(_OWORD *)&v6[v13[6]];
  v5[v13[7]] = v6[v13[7]];
  v5[v13[8]] = v6[v13[8]];
  *(_OWORD *)&v5[v13[9]] = *(_OWORD *)&v6[v13[9]];
  v20 = v13[10];
  v21 = &v5[v20];
  v22 = &v6[v20];
  v23 = *((_OWORD *)v22 + 1);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v23;
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  return a1;
}

uint64_t assignWithTake for ResolvedPlaybackButtonContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void *v37;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(int *)(a3 + 20);
  v5 = (char *)(a1 + v4);
  v6 = (char *)(a2 + v4);
  type metadata accessor for ClosedRange<Date>();
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(v5, 1, v7);
  v12 = v10(v6, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      v13 = type metadata accessor for Date();
      v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
      v14(v5, v6, v13);
      v14(&v5[*(int *)(v8 + 36)], &v6[*(int *)(v8 + 36)], v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v39 = type metadata accessor for Date();
  v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 40);
  v40(v5, v6, v39);
  v40(&v5[*(int *)(v8 + 36)], &v6[*(int *)(v8 + 36)], v39);
LABEL_7:
  v16 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v17 = v16[5];
  v18 = &v5[v17];
  v19 = &v6[v17];
  v20 = type metadata accessor for Date();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 2, v20);
  v24 = v22(v19, 2, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v18, v19, v20);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    v25 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 2, v20);
LABEL_13:
  v26 = v16[6];
  v27 = &v5[v26];
  v28 = &v6[v26];
  v30 = *(_QWORD *)v28;
  v29 = *((_QWORD *)v28 + 1);
  *(_QWORD *)v27 = v30;
  *((_QWORD *)v27 + 1) = v29;
  swift_bridgeObjectRelease();
  v5[v16[7]] = v6[v16[7]];
  v5[v16[8]] = v6[v16[8]];
  *(_OWORD *)&v5[v16[9]] = *(_OWORD *)&v6[v16[9]];
  v31 = v16[10];
  v32 = &v5[v31];
  v33 = &v6[v31];
  LOBYTE(v31) = v33[16];
  v34 = *(_QWORD *)v32;
  v35 = *((_QWORD *)v32 + 1);
  v36 = v32[16];
  *(_OWORD *)v32 = *(_OWORD *)v33;
  v32[16] = v31;
  outlined consume of Environment<AppIntentExecutor?>.Content(v34, v35, v36);
  v37 = (void *)*((_QWORD *)v32 + 3);
  *((_QWORD *)v32 + 3) = *((_QWORD *)v33 + 3);

  *((_OWORD *)v32 + 2) = *((_OWORD *)v33 + 2);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedPlaybackButtonContent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870ABA70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 250)
  {
    if (*(unsigned __int8 *)(a1 + 16) <= 5u)
      v4 = 5;
    else
      v4 = *(unsigned __int8 *)(a1 + 16);
    v5 = v4 - 5;
    if (*(unsigned __int8 *)(a1 + 16) >= 3u)
      return v5;
    else
      return 0;
  }
  else
  {
    v9 = type metadata accessor for PlaybackButton.Configuration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for ResolvedPlaybackButtonContent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870ABAFC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 250)
  {
    *(_BYTE *)(result + 16) = a2 + 5;
  }
  else
  {
    v7 = type metadata accessor for PlaybackButton.Configuration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for ResolvedPlaybackButtonContent()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PlaybackButton.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaybackButton.Phase()
{
  return &type metadata for PlaybackButton.Phase;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>, _EnvironmentKeyWritingModifier<Visibility>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>> and conformance ButtonBehavior<A>, (uint64_t (*)(uint64_t))type metadata accessor for ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>, (uint64_t)&protocol conformance descriptor for ButtonBehavior<A>);
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>, (uint64_t)&type metadata for Visibility);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>, _EnvironmentKeyWritingModifier<Visibility>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>, _EnvironmentKeyWritingModifier<Visibility>>)
  {
    type metadata accessor for ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>, (uint64_t)&type metadata for Visibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ButtonBehavior<ModifiedContent<ResolvedPlaybackButtonContent, _ContentShapeKindModifier<Rectangle._Inset>>>, _EnvironmentKeyWritingModifier<Visibility>>);
  }
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedPlaybackButtonContent()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>(a1, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?), type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, type metadata accessor for AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, MEMORY[0x1E0CE35B8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>);
}

void type metadata accessor for ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>)
  {
    type metadata accessor for _ShapeView<Circle, Color>(255, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Circle, Color>, (void (*)(void))lazy protocol witness table accessor for type Circle and conformance Circle);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>);
  }
}

void type metadata accessor for AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?, (uint64_t (*)(uint64_t))type metadata accessor for AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>(255);
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, MEMORY[0x1E0CE2BB8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE35A8]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>();
    v0 = type metadata accessor for AppearanceAnimationView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, MEMORY[0x1E0CE35B8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ShapeView<Capsule, Color> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _ShapeView<Circle, Color> and conformance _ShapeView<A, B>, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Circle, Color>, (void (*)(void))lazy protocol witness table accessor for type Circle and conformance Circle);
    v3[1] = MEMORY[0x1E0CE1BD0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ShapeView<Capsule, Color> and conformance _ShapeView<A, B>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _ShapeView<Circle, Color>(255, a2, a3);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0E50], v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, MEMORY[0x1E0CE2BB8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE35A8]);
    v3[1] = MEMORY[0x1E0CE2BA8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE1BD0]);
    lazy protocol witness table accessor for type PlaybackButton.Phase and conformance PlaybackButton.Phase();
    v0 = type metadata accessor for IDView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, MEMORY[0x1E0CE35B8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>, MEMORY[0x1E0CE4568], MEMORY[0x1E0CE4558], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>);
  }
}

void type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<[AnyFontModifier]> and conformance _EnvironmentKeyTransformModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>, MEMORY[0x1E0CE66D8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>();
    v3[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, MEMORY[0x1E0CE35B8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE35A8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>();
    v2 = v1;
    v3 = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
    v4[0] = MEMORY[0x1E0CE7238];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>, MEMORY[0x1E0CE4568], MEMORY[0x1E0CE4558], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>?)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>?);
  }
}

void type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>(uint64_t a1)
{
  type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>(a1, &lazy cache variable for type metadata for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>);
}

void type metadata accessor for ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>? and conformance <A> A?();
    v0 = type metadata accessor for ZStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>);
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>(a1, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>, &lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>), type metadata accessor for ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>);
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    type metadata accessor for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)(255, a3, a4, a5);
    v6 = type metadata accessor for TupleView();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, MEMORY[0x1E0CE1BE0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, (uint64_t (*)(uint64_t))type metadata accessor for StrokeShapeView<Circle._Inset, Color, EmptyView>, MEMORY[0x1E0CE3020], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for StrokeShapeView<Circle._Inset, Color, EmptyView>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StrokeShapeView<Circle._Inset, Color, EmptyView>)
  {
    lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset();
    v0 = type metadata accessor for StrokeShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StrokeShapeView<Circle._Inset, Color, EmptyView>);
  }
}

unint64_t lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset;
  if (!lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7378], MEMORY[0x1E0CE7388]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, MEMORY[0x1E0CE35B8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _AnimationModifier<PlaybackButton.Phase>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase and conformance PlaybackButton.Phase, (uint64_t)&type metadata for PlaybackButton.Phase, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, MEMORY[0x1E0CE1BE0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, (uint64_t (*)(uint64_t))type metadata accessor for StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, MEMORY[0x1E0CE3020], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _TrimmedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, MEMORY[0x1E0CE7388], MEMORY[0x1E0CE25A8]);
    lazy protocol witness table accessor for type _TrimmedShape<Circle._Inset> and conformance _TrimmedShape<A>();
    v0 = type metadata accessor for StrokeShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>);
  }
}

unint64_t lazy protocol witness table accessor for type _TrimmedShape<Circle._Inset> and conformance _TrimmedShape<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TrimmedShape<Circle._Inset> and conformance _TrimmedShape<A>;
  if (!lazy protocol witness table cache variable for type _TrimmedShape<Circle._Inset> and conformance _TrimmedShape<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _TrimmedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, MEMORY[0x1E0CE7388], MEMORY[0x1E0CE25A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE25B8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TrimmedShape<Circle._Inset> and conformance _TrimmedShape<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>? and conformance <A> A?)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>, MEMORY[0x1E0CE7EB8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, MEMORY[0x1E0CE2BD0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, (uint64_t (*)(uint64_t))type metadata accessor for IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, MEMORY[0x1E0CE1A90], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>, _FrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>, _FrameLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>, MEMORY[0x1E0CE1A90], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, _PaddingLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, MEMORY[0x1E0CE2BD0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, _PaddingLayout>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?, MEMORY[0x1E0CE2BD0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>?);
  }
}

void type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>(uint64_t a1)
{
  type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>(a1, &lazy cache variable for type metadata for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>);
}

void type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v6 = type metadata accessor for ProgressViewSchedule(255);
    v7 = a3(255);
    v8 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ProgressViewSchedule and conformance ProgressViewSchedule, type metadata accessor for ProgressViewSchedule, (uint64_t)&protocol conformance descriptor for ProgressViewSchedule);
    v9 = type metadata accessor for TimelineView(a1, v6, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>, MEMORY[0x1E0CE7EB8]);
    v0 = type metadata accessor for ZStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>);
  }
}

void type metadata accessor for TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)()
{
  uint64_t v0;
  unint64_t TupleTypeMetadata2;
  uint64_t v2;

  if (!lazy cache variable for type metadata for (ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>))
  {
    v0 = MEMORY[0x1E0CE1A90];
    type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>);
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v2)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>));
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    type metadata accessor for _ShapeView<Circle, Color>(255, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Capsule, Color>, (void (*)(void))lazy protocol witness table accessor for type Capsule and conformance Capsule);
    v3 = type metadata accessor for ModifiedContent();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void type metadata accessor for _ShapeView<Circle, Color>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3();
    v4 = type metadata accessor for _ShapeView();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _AnimationModifier<PlaybackButton.Phase>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase and conformance PlaybackButton.Phase, (uint64_t)&type metadata for PlaybackButton.Phase, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ForegroundStyleModifier<Color>>, _EnvironmentKeyWritingModifier<Int?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ForegroundStyleModifier<Color>>, _EnvironmentKeyWritingModifier<Int?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ForegroundStyleModifier<Color>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ForegroundStyleModifier<Color>>, _EnvironmentKeyWritingModifier<Int?>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ForegroundStyleModifier<Color>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ForegroundStyleModifier<Color>>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ForegroundStyleModifier<Color>, MEMORY[0x1E0CE7170], MEMORY[0x1E0CE7138], MEMORY[0x1E0CE5D58]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ForegroundStyleModifier<Color>>);
  }
}

void type metadata accessor for ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<_ConditionalContent<Text, Text>, Text>, MEMORY[0x1E0CE6CF8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

void type metadata accessor for _ConditionalContent<_ConditionalContent<Text, Text>, Text>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<Text, Text>, Text>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ConditionalContent<Text, Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<Text, Text>, Text>);
  }
}

void type metadata accessor for _BackgroundModifier<TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _BackgroundModifier<TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)>(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)>, MEMORY[0x1E0CE7EB8]);
    v0 = type metadata accessor for _BackgroundModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)>>);
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>(a1, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)>, &lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?), type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, type metadata accessor for AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, MEMORY[0x1E0CE35B8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>)
  {
    type metadata accessor for _ShapeView<Circle, Color>(255, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Capsule, Color>, (void (*)(void))lazy protocol witness table accessor for type Capsule and conformance Capsule);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>);
  }
}

void type metadata accessor for AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?, (uint64_t (*)(uint64_t))type metadata accessor for AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>);
    type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>();
    lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE2BA8]);
    v0 = type metadata accessor for AppearanceAnimationView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ShapeView<Capsule, Color> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _ShapeView<Capsule, Color> and conformance _ShapeView<A, B>, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Capsule, Color>, (void (*)(void))lazy protocol witness table accessor for type Capsule and conformance Capsule);
    v3[1] = MEMORY[0x1E0CE35A8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t specialized PlaybackButton.Phase.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x646573756170 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x50676E69646E6570 && a2 == 0xEB0000000079616CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x676E6979616C70 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x50676E69646E6570 && a2 == 0xEC00000065737561)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

char *specialized PlaybackButton.Phase.init(from:)(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD v27[13];
  uint64_t v28;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.Phase.PendingPauseCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys, (uint64_t)&unk_1E1AB8FC0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v27[11] = *(_QWORD *)(v3 - 8);
  v27[12] = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v27[9] = (char *)v27 - v5;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.Phase.PlayingCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys, (uint64_t)&unk_1E1AB8F80, v2);
  v27[10] = v6;
  v27[6] = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v27[8] = (char *)v27 - v8;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.Phase.PendingPlayCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys, (uint64_t)&unk_1E1AB8FA0, v2);
  v27[4] = *(_QWORD *)(v9 - 8);
  v27[5] = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v27[7] = (char *)v27 - v11;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.Phase.PausedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys, (uint64_t)&unk_1E1AB8F60, v2);
  v27[2] = *(_QWORD *)(v12 - 8);
  v27[3] = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v27 - v14;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton.Phase.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys, (uint64_t)&unk_1E1AB8ED0, v2);
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v19);
  v21 = (char *)v27 - v20;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys();
  v22 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v22)
  {
    v27[1] = v15;
    v28 = v18;
    v23 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v23 + 16) == 1)
    {
      v27[0] = *(unsigned __int8 *)(v23 + 32);
      __asm { BR              X9 }
    }
    v15 = (char *)type metadata accessor for DecodingError();
    swift_allocError();
    v25 = v24;
    type metadata accessor for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)(0, (unint64_t *)&lazy cache variable for type metadata for (@thick Any.Type, DecodingError.Context), (void (*)(uint64_t))type metadata accessor for @thick Any.Type, (void (*)(uint64_t))MEMORY[0x1E0DEC488]);
    *v25 = &type metadata for PlaybackButton.Phase;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, char *))(*((_QWORD *)v15 - 1) + 104))(v25, *MEMORY[0x1E0DEC450], v15);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v21, v17);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v15;
}

void sub_1870AE2E8()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 67) = 1;
  lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v0)
    JUMPOUT(0x1870AE32CLL);
  swift_bridgeObjectRelease();
  JUMPOUT(0x1870AE2ACLL);
}

void sub_1870AE338()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 66) = 2;
  lazy protocol witness table accessor for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v0)
    JUMPOUT(0x1870AE378);
  JUMPOUT(0x1870AE3E8);
}

void sub_1870AE388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 - 65) = 3;
  lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys();
  v4 = *(_QWORD *)(v3 - 120);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v2)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x1870AE2ACLL);
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  swift_bridgeObjectRelease();
  JUMPOUT(0x1870AE418);
}

uint64_t specialized ArchivablePlaybackButtonViewModifier.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x72756769666E6F63 && a2 == 0xED00006E6F697461;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000187BD6D60
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x61657241706174 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase.PendingPauseCodingKeys, &unk_1E1AB8FC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase.PendingPauseCodingKeys, &unk_1E1AB8FC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase.PendingPauseCodingKeys, &unk_1E1AB8FC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPauseCodingKeys and conformance PlaybackButton.Phase.PendingPauseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase.PlayingCodingKeys, &unk_1E1AB8F80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase.PlayingCodingKeys, &unk_1E1AB8F80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase.PlayingCodingKeys, &unk_1E1AB8F80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PlayingCodingKeys and conformance PlaybackButton.Phase.PlayingCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase.PendingPlayCodingKeys, &unk_1E1AB8FA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase.PendingPlayCodingKeys, &unk_1E1AB8FA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase.PendingPlayCodingKeys, &unk_1E1AB8FA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PendingPlayCodingKeys and conformance PlaybackButton.Phase.PendingPlayCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase.PausedCodingKeys, &unk_1E1AB8F60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase.PausedCodingKeys, &unk_1E1AB8F60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase.PausedCodingKeys, &unk_1E1AB8F60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.PausedCodingKeys and conformance PlaybackButton.Phase.PausedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase.CodingKeys, &unk_1E1AB8ED0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase.CodingKeys, &unk_1E1AB8ED0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase.CodingKeys, &unk_1E1AB8ED0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton.Phase.CodingKeys, &unk_1E1AB8ED0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton.Phase.CodingKeys and conformance PlaybackButton.Phase.CodingKeys);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ArchivablePlaybackButtonViewModifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1870AE7A0 + 4 * byte_187C05D4A[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1870AE7D4 + 4 * byte_187C05D45[v4]))();
}

uint64_t sub_1870AE7D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870AE7DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1870AE7E4);
  return result;
}

uint64_t sub_1870AE7F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1870AE7F8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1870AE7FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870AE804(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PlaybackButton.Phase.CodingKeys()
{
  return &unk_1E1AB8ED0;
}

void *type metadata accessor for PlaybackButton.Phase.PausedCodingKeys()
{
  return &unk_1E1AB8F60;
}

void *type metadata accessor for PlaybackButton.Phase.PendingPlayCodingKeys()
{
  return &unk_1E1AB8FA0;
}

void *type metadata accessor for PlaybackButton.Phase.PlayingCodingKeys()
{
  return &unk_1E1AB8F80;
}

void *type metadata accessor for PlaybackButton.Phase.PendingPauseCodingKeys()
{
  return &unk_1E1AB8FC0;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<CirclePlaybackButtonStyleBody, PillPlaybackButtonStyleBody> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<CirclePlaybackButtonStyleBody, PillPlaybackButtonStyleBody> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<CirclePlaybackButtonStyleBody, PillPlaybackButtonStyleBody> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<CirclePlaybackButtonStyleBody, PillPlaybackButtonStyleBody>, (uint64_t (*)(uint64_t))type metadata accessor for CirclePlaybackButtonStyleBody, (uint64_t (*)(uint64_t))type metadata accessor for PillPlaybackButtonStyleBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CirclePlaybackButtonStyleBody and conformance CirclePlaybackButtonStyleBody, (uint64_t (*)(uint64_t))type metadata accessor for CirclePlaybackButtonStyleBody, (uint64_t)&protocol conformance descriptor for CirclePlaybackButtonStyleBody);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PillPlaybackButtonStyleBody and conformance PillPlaybackButtonStyleBody, (uint64_t (*)(uint64_t))type metadata accessor for PillPlaybackButtonStyleBody, (uint64_t)&protocol conformance descriptor for PillPlaybackButtonStyleBody);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<CirclePlaybackButtonStyleBody, PillPlaybackButtonStyleBody> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void static ListRowPlatterColorTraitKey.defaultValue.getter()
{
  _diagnoseUnavailableCodeReached()();
}

void View.listRowPlatterColor(_:)()
{
  _diagnoseUnavailableCodeReached()();
}

ValueMetadata *type metadata accessor for ListRowPlatterColorTraitKey()
{
  return &type metadata for ListRowPlatterColorTraitKey;
}

uint64_t sub_1870AEC6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingModifier<ListRowPlatterColorTraitKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<ListRowPlatterColorTraitKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _TraitWritingModifier<ListRowPlatterColorTraitKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<ListRowPlatterColorTraitKey>)
  {
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<ListRowPlatterColorTraitKey>);
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<ListRowPlatterColorTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<ListRowPlatterColorTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<ListRowPlatterColorTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<ListRowPlatterColorTraitKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<ListRowPlatterColorTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t BalancedNavigationSplitViewStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_DWORD *)a1 + 4);
  v6 = a1[3];
  v5 = a1[4];
  v7 = a1[5];
  v8 = *((_BYTE *)a1 + 48);
  *(_QWORD *)a2 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = v2;
  *(_QWORD *)(a2 + 40) = v3;
  *(_DWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v6;
  *(_QWORD *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 72) = v7;
  *(_WORD *)(a2 + 80) = v8;
  swift_retain();
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t protocol witness for NavigationSplitViewStyle.makeBody(configuration:) in conformance BalancedNavigationSplitViewStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_DWORD *)a1 + 4);
  v6 = a1[3];
  v5 = a1[4];
  v7 = a1[5];
  v8 = *((_BYTE *)a1 + 48);
  *(_QWORD *)a2 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = v2;
  *(_QWORD *)(a2 + 40) = v3;
  *(_DWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v6;
  *(_QWORD *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 72) = v7;
  *(_WORD *)(a2 + 80) = v8;
  swift_retain();
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t associated type witness table accessor for NavigationSplitViewStyle.Body : View in BalancedNavigationSplitViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type NavigationSplitReader and conformance NavigationSplitReader()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitReader and conformance NavigationSplitReader;
  if (!lazy protocol witness table cache variable for type NavigationSplitReader and conformance NavigationSplitReader)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitReader, &type metadata for NavigationSplitReader);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitReader and conformance NavigationSplitReader);
  }
  return result;
}

uint64_t ColumnsFormStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for formDetailLeading != -1)
    result = swift_once();
  *(_QWORD *)a1 = static HorizontalAlignment.formDetailLeading;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t protocol witness for FormStyle.makeBody(configuration:) in conformance ColumnsFormStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for formDetailLeading != -1)
    result = swift_once();
  *(_QWORD *)a1 = static HorizontalAlignment.formDetailLeading;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t one-time initialization function for formDetailLeading()
{
  uint64_t result;

  result = AlignmentKey.init(id:axis:)();
  static HorizontalAlignment.formDetailLeading = result;
  return result;
}

uint64_t static HorizontalAlignment.formDetailLeading.getter()
{
  if (one-time initialization token for formDetailLeading != -1)
    swift_once();
  return static HorizontalAlignment.formDetailLeading;
}

uint64_t associated type witness table accessor for FormStyle.Body : View in ColumnsFormStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ColumnsFormStyle()
{
  return &type metadata for ColumnsFormStyle;
}

_UNKNOWN **sub_1870AF014()
{
  return &protocol witness table for FormVStack<A>;
}

ValueMetadata *type metadata accessor for ColumnarLabeledContentStyle()
{
  return &type metadata for ColumnarLabeledContentStyle;
}

ValueMetadata *type metadata accessor for ColumnsFormStyleContext()
{
  return &type metadata for ColumnsFormStyleContext;
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance ColumnsFormStyleContext(uint64_t a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4)
{
  lazy protocol witness table accessor for type ColumnsFormStyleContext and conformance ColumnsFormStyleContext();
  return specialized static FormStyleContext.accepts<A>(_:at:)(a4, a3);
}

unint64_t instantiation function for generic protocol witness table for ColumnsFormStyleContext(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ColumnsFormStyleContext and conformance ColumnsFormStyleContext();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ColumnsFormStyleContext and conformance ColumnsFormStyleContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnsFormStyleContext and conformance ColumnsFormStyleContext;
  if (!lazy protocol witness table cache variable for type ColumnsFormStyleContext and conformance ColumnsFormStyleContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ColumnsFormStyleContext, &type metadata for ColumnsFormStyleContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnsFormStyleContext and conformance ColumnsFormStyleContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnsFormStyleContext and conformance ColumnsFormStyleContext;
  if (!lazy protocol witness table cache variable for type ColumnsFormStyleContext and conformance ColumnsFormStyleContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ColumnsFormStyleContext, &type metadata for ColumnsFormStyleContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnsFormStyleContext and conformance ColumnsFormStyleContext);
  }
  return result;
}

uint64_t associated type witness table accessor for LabeledContentStyle.Body : View in ColumnarLabeledContentStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in ColumnarLabeledContentStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  static Alignment.center.getter();
  result = _FrameLayout.init(width:height:alignment:)();
  v3 = v9;
  if (one-time initialization token for formDetailLeading != -1)
  {
    result = swift_once();
    v3 = v9;
  }
  v4 = static HorizontalAlignment.formDetailLeading;
  *(_QWORD *)a1 = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 80) = closure #3 in closure #1 in ColumnarLabeledContentStyle.makeBody(configuration:);
  *(_QWORD *)(a1 + 88) = 0;
  return result;
}

uint64_t closure #3 in closure #1 in ColumnarLabeledContentStyle.makeBody(configuration:)()
{
  uint64_t v0;

  v0 = static HorizontalAlignment.trailing.getter();
  return MEMORY[0x18D757CA8](v0);
}

double protocol witness for LabeledContentStyle.makeBody(configuration:) in conformance ColumnarLabeledContentStyle@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;

  v2 = static VerticalAlignment.firstTextBaseline.getter();
  closure #1 in ColumnarLabeledContentStyle.makeBody(configuration:)((uint64_t)v13);
  result = *(double *)v13;
  v4 = v13[1];
  v5 = v14;
  v6 = v15;
  v7 = v16;
  v8 = v17;
  v9 = v18;
  v10 = v20;
  v11 = v21;
  v12 = v19;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(double *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 104) = v11;
  return result;
}

void *type metadata accessor for HorizontalAlignment.FormDetailLeading()
{
  return &unk_1E1ACE270;
}

uint64_t sub_1870AF304()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>>, MEMORY[0x1E0CE73D0]);
}

void type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>>)
  {
    type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>, MEMORY[0x1E0CE7EB8]);
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>>);
  }
}

void type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>)
  {
    type metadata accessor for (StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)();
    v0 = type metadata accessor for TupleView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)>);
  }
}

void type metadata accessor for (StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content))
  {
    type metadata accessor for StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>();
    type metadata accessor for ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>, LabeledContentStyleConfiguration.Content));
  }
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>, LabeledContentStyleConfiguration.Label>)
  {
    type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<LayoutPriorityTraitKey>, MEMORY[0x1E0CE5460], MEMORY[0x1E0CE5450], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Label, _TraitWritingModifier<LayoutPriorityTraitKey>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<Spacer, _FrameLayout>, MEMORY[0x1E0CE7430], MEMORY[0x1E0CE1A90], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Spacer, _FrameLayout>, _AlignmentWritingModifier>);
  }
}

void View.textSelection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for TextSelectabilityModifier(0, a3, a5, a4);
  JUMPOUT(0x18D75B4ACLL);
}

uint64_t type metadata accessor for TextSelectabilityModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TextSelectabilityModifier);
}

uint64_t sub_1870AF63C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for TextSelectabilityModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for TextSelectabilityModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance TextSelectabilityModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static TextSelectabilityModifier._makeInputs(modifier:inputs:)(a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

_UNKNOWN **base witness table accessor for ViewModifier in TextSelectabilityModifier<A>()
{
  return &protocol witness table for TextSelectabilityModifier<A>;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TextSelectabilityModifier<A>()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TextSelectabilityModifier<A>()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance TextSelectabilityModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t specialized static TextSelectabilityModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type UIKitTextSelectionRepresentation and conformance UIKitTextSelectionRepresentation();
  return _GraphInputs.textSelectionRepresentation.setter();
}

unint64_t lazy protocol witness table accessor for type UIKitTextSelectionRepresentation and conformance UIKitTextSelectionRepresentation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UIKitTextSelectionRepresentation and conformance UIKitTextSelectionRepresentation;
  if (!lazy protocol witness table cache variable for type UIKitTextSelectionRepresentation and conformance UIKitTextSelectionRepresentation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitTextSelectionRepresentation, &type metadata for UIKitTextSelectionRepresentation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitTextSelectionRepresentation and conformance UIKitTextSelectionRepresentation);
  }
  return result;
}

void static LazyPageTabViewStyle._makeView<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TabViewStyleConfiguration.Content(255, a3, a4, a4);
  type metadata accessor for LazyPageTabView();
}

void sub_1870AF820()
{
  type metadata accessor for _TabViewValue();
}

uint64_t sub_1870AF84C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v4 = type metadata accessor for LazyPageTabViewStyle.Body(0, v2, v1, v3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyPageTabViewStyle.Body<A>, v4);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyPageTabView<A, B>, v0);
  return static View._makeView(view:inputs:)();
}

void protocol witness for static Rule.initialValue.getter in conformance LazyPageTabViewStyle.Body<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TabViewStyleConfiguration.Content(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  type metadata accessor for LazyPageTabView();
}

uint64_t sub_1870AF978(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for LazyPageTabView(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v8 + v10;
  if ((v10 | v7) <= 7
    && ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0
    && ((v8 + v10) & ~v10) + *(_QWORD *)(v9 + 64) <= 0x18)
  {
    v15 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
    v24 = ~v7;
    v25 = *(_QWORD *)(a3 + 24);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      v17 = ~v10;
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v15 + v7 + 8) & ~v7))
      {
LABEL_14:
        memcpy(__dst, __src, v8);
LABEL_17:
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)__dst + v11) & v17, ((unint64_t)__src + v11) & v17, v25);
        return __dst;
      }
    }
    else
    {
      v16 = *v15;
      if ((unint64_t)*v15 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      v17 = ~v10;
      if ((_DWORD)v16 != -1)
        goto LABEL_14;
    }
    *__dst = *__src;
    v18 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v18 = *v15;
    v19 = (char *)v15 + v7;
    v20 = ((unint64_t)v18 + v7 + 8) & v24;
    v21 = (unint64_t)(v19 + 8) & v24;
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v22(v20, v21, v5);
    goto LABEL_17;
  }
  v14 = *__src;
  *__dst = *__src;
  __dst = (_QWORD *)(v14 + (((v10 | v7) & 0xF8 ^ 0x1F8) & ((v10 | v7) + 16)));
  swift_retain();
  return __dst;
}

_QWORD *initializeWithTake for LazyPageTabView(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  size_t v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ~v8;
  v10 = (v8 + 16) & ~v8;
  v11 = *(_QWORD *)(v7 + 64);
  v12 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF)
      LODWORD(v13) = -1;
    v14 = v10 + v11;
    if ((_DWORD)v13 != -1)
      goto LABEL_5;
LABEL_7:
    *__dst = *__src;
    v15 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v15 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v6);
    goto LABEL_8;
  }
  v14 = v10 + v11;
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v9))
    goto LABEL_7;
LABEL_5:
  memcpy(__dst, __src, v14);
LABEL_8:
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 32))(((unint64_t)__dst + v14 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), ((unint64_t)__src + v14 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return __dst;
}

_QWORD *assignWithTake for LazyPageTabView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t (*v15)(unint64_t, uint64_t, uint64_t);
  uint64_t v16;
  int v18;
  uint64_t v20;

  v3 = a3;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v7 + 64);
  v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v20 = ~v9;
  if ((v8 & 0x80000000) != 0)
  {
    v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    v18 = v15(((unint64_t)v11 + v9 + 8) & ~v9, v8, v6);
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = v15(((unint64_t)v12 + v9 + 8) & ~v9, v8, v6);
    v3 = a3;
    if (!v18)
    {
LABEL_5:
      if (!v14)
      {
        *a1 = *a2;
        swift_release();
        *v11 = *v12;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 40))(((unint64_t)v11 + v9 + 8) & v20, ((unint64_t)v12 + v9 + 8) & v20, v6);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v11 + v9 + 8) & v20, v6);
      goto LABEL_9;
    }
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v13) = -1;
    v14 = v13 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v14)
  {
    *a1 = *a2;
    *v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v11 + v9 + 8) & v20, ((unint64_t)v12 + v9 + 8) & v20, v6);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(a1, a2, v10);
LABEL_12:
  v16 = *(_QWORD *)(*(_QWORD *)(v3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 40))(((unint64_t)a1 + v10 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), ((unint64_t)a2 + v10 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyPageTabView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v20;
  int v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int v25;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  v8 = v7 - 1;
  v9 = *(_QWORD *)(v4 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v8)
    v11 = v8;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = ((v12 + 16) & ~v12) + *(_QWORD *)(v5 + 64) + v13;
  v15 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_27;
  v16 = (v14 & ~v13) + *(_QWORD *)(v9 + 64);
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v20 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v20))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v20 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v20 < 2)
    {
LABEL_27:
      if (v8 < v10)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v9 + 48))((v14 + a1) & ~v13, *(unsigned int *)(v9 + 84), v4);
      v23 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0x80000000) != 0)
      {
        v25 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v23 + v12 + 8) & ~v12);
      }
      else
      {
        v24 = *v23;
        if (v24 >= 0xFFFFFFFF)
          LODWORD(v24) = -1;
        v25 = v24 + 1;
      }
      if (v25 >= 2)
        return v25 - 1;
      else
        return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_27;
LABEL_18:
  v21 = (v18 - 1) << v17;
  if (v16 > 3)
    v21 = 0;
  if ((_DWORD)v16)
  {
    if (v16 <= 3)
      v22 = (v14 & ~(_DWORD)v13) + *(_DWORD *)(v9 + 64);
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  return v11 + v21 + 1;
}

void storeEnumTagSinglePayload for LazyPageTabView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v7 + 84) <= (v6 - 1))
    v8 = v6 - 1;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = ((((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + *(_QWORD *)(v5 + 64)
       + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
     + *(_QWORD *)(v7 + 64);
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

void closure #1 in LazyPageTabView.body.getter(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[16];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[4];
  _QWORD v55[2];
  _QWORD v56[2];
  _QWORD v57[2];

  v42 = a4;
  v43 = a1;
  v47 = a6;
  v35 = a2;
  type metadata accessor for Optional();
  v46 = type metadata accessor for Binding();
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46, v9);
  v44 = (char *)&v34 - v10;
  v11 = type metadata accessor for ModifiedContent();
  v12 = type metadata accessor for ModifiedContent();
  v57[0] = a5;
  v57[1] = &protocol witness table for ContainerRelativeFrameModifier;
  v36 = a5;
  v13 = MEMORY[0x1E0CE2E70];
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v57);
  v15 = lazy protocol witness table accessor for type LazyPageTabModifier and conformance LazyPageTabModifier();
  v56[0] = v14;
  v56[1] = v15;
  v16 = MEMORY[0x18D75FFDC](v13, v12, v56);
  type metadata accessor for LazyHStack(255, v12, v16, v17);
  v18 = type metadata accessor for ModifiedContent();
  v55[0] = &protocol witness table for LazyHStack<A>;
  v55[1] = &protocol witness table for TransformScrollIndicators;
  v19 = MEMORY[0x18D75FFDC](v13, v18, v55);
  v21 = type metadata accessor for PagingScrollView(0, v18, v19, v20);
  v38 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v34 - v23;
  v25 = type metadata accessor for ModifiedContent();
  v40 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v27 = type metadata accessor for ModifiedContent();
  v41 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v28);
  v37 = (char *)&v34 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v39 = (char *)&v34 - v32;
  LOBYTE(v54[0]) = 1;
  v49 = a2;
  v50 = a3;
  v33 = v42;
  v51 = v42;
  v52 = a5;
  v53 = v43;
  PagingScrollView.init(behavior:axis:content:)(v54, 0, partial apply for closure #1 in closure #1 in LazyPageTabView.body.getter, (uint64_t)v48, v18, v19, v24);
  LOBYTE(v54[0]) = 3;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PagingScrollView<A>, v21);
  View.scrollIndicators(_:axes:)(v54, 1, v21);
  (*(void (**)(_BYTE *, uint64_t))(v38 + 8))(v24, v21);
  v54[0] = v35;
  v54[1] = a3;
  v54[2] = v33;
  v54[3] = v36;
  type metadata accessor for LazyPageTabView();
}

uint64_t sub_1870B06B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);

  v7 = *(_QWORD *)(v6 - 288);
  LazyPageTabView.scrollStateBinding.getter(a1, v7);
  *(_QWORD *)(v6 - 184) = v3;
  *(_QWORD *)(v6 - 176) = &protocol witness table for TransformScrollIndicators;
  v8 = MEMORY[0x1E0CE2E70];
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v6 - 184);
  v10 = *(_QWORD *)(v6 - 344);
  View.scrollPosition<A>(id:anchor:)(v7, 0, 0, 1, v4, v5, v9);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 280) + 8))(v7, *(_QWORD *)(v6 - 272));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 320) + 8))(v2, v4);
  v11 = MEMORY[0x1E0CE6460];
  *(_QWORD *)(v6 - 200) = v9;
  *(_QWORD *)(v6 - 192) = v11;
  v12 = MEMORY[0x18D75FFDC](v8, v1, v6 - 200);
  v13 = *(_QWORD *)(v6 - 328);
  static ViewBuilder.buildExpression<A>(_:)(v10, v1, v12);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 312) + 8);
  v14(v10, v1);
  static ViewBuilder.buildBlock<A>(_:)(v13, v1, *(_QWORD *)(v6 - 264));
  return v14(v13, v1);
}

uint64_t closure #1 in closure #1 in LazyPageTabView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  int v43;
  _QWORD v44[2];
  _QWORD v45[3];

  v32 = a5;
  v33 = a2;
  v34 = a1;
  v35 = a4;
  v36 = a6;
  v8 = type metadata accessor for ModifiedContent();
  v9 = type metadata accessor for ModifiedContent();
  v45[0] = a5;
  v45[1] = &protocol witness table for ContainerRelativeFrameModifier;
  v10 = MEMORY[0x1E0CE2E70];
  v44[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v45);
  v44[1] = lazy protocol witness table accessor for type LazyPageTabModifier and conformance LazyPageTabModifier();
  v11 = MEMORY[0x18D75FFDC](v10, v9, v44);
  v13 = type metadata accessor for LazyHStack(0, v9, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v31 - v16;
  v18 = type metadata accessor for ModifiedContent();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v31 - v25;
  v37 = v33;
  v38 = a3;
  v39 = v35;
  v40 = v32;
  v41 = v34;
  v27 = static VerticalAlignment.center.getter();
  v43 = 0;
  LazyHStack.init(alignment:spacing:pinnedViews:content:)(v27, 0);
  LOBYTE(v43) = 0;
  View.scrollIndicators(_:axes:)(&v43, 1, v13);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v42[0] = &protocol witness table for LazyHStack<A>;
  v42[1] = &protocol witness table for TransformScrollIndicators;
  v28 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v18, v42);
  static ViewBuilder.buildExpression<A>(_:)(v22, v18, v28);
  v29 = *(void (**)(char *, uint64_t))(v19 + 8);
  v29(v22, v18);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v26, v18, v36);
  return ((uint64_t (*)(char *, uint64_t))v29)(v26, v18);
}

void closure #1 in closure #1 in closure #1 in LazyPageTabView.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v0, v1);
  v2 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v2, v3);
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for LazyPageTabView();
}

uint64_t sub_1870B0B2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);

  v8 = static Alignment.center.getter();
  View.containerRelativeFrame(_:alignment:)(3, v8, v9, v6, v4);
  *(_BYTE *)(v7 - 112) = 1;
  *(_QWORD *)(v7 - 104) = 0;
  *(_QWORD *)(v7 - 128) = v4;
  *(_QWORD *)(v7 - 120) = &protocol witness table for ContainerRelativeFrameModifier;
  v10 = MEMORY[0x1E0CE2E70];
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7 - 128);
  MEMORY[0x18D75B4AC](v7 - 112, v2, &unk_1E1ACE6A8, v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 168) + 8))(v5, v2);
  v12 = lazy protocol witness table accessor for type LazyPageTabModifier and conformance LazyPageTabModifier();
  *(_QWORD *)(v7 - 144) = v11;
  *(_QWORD *)(v7 - 136) = v12;
  v13 = MEMORY[0x18D75FFDC](v10, v0, v7 - 144);
  static ViewBuilder.buildExpression<A>(_:)(v3, v0, v13);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 160) + 8);
  v14(v3, v0);
  static ViewBuilder.buildBlock<A>(_:)(v1, v0, *(_QWORD *)(v7 - 152));
  return v14(v1, v0);
}

void sub_1870B0C48()
{
  type metadata accessor for LazyPageTabView();
}

uint64_t sub_1870B0C8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v5 = v2 + ((v4 + 48) & ~v4);
  v6 = type metadata accessor for Binding();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v5 + *(int *)(v6 + 32), v1);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v5 + *(int *)(a1 + 52));
  return swift_deallocObject();
}

void partial apply for closure #1 in LazyPageTabView.body.getter()
{
  type metadata accessor for LazyPageTabView();
}

void sub_1870B0D8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  closure #1 in LazyPageTabView.body.getter(v1 + ((v7 + 48) & ~v7), v3, v4, v5, v6, v2);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TabBarPlacement?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TabBarPlacement?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for TabBarPlacement?, (uint64_t)&type metadata for TabBarPlacement, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TabBarPlacement?>);
  }
}

uint64_t partial apply for closure #1 in closure #1 in LazyPageTabView.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in LazyPageTabView.body.getter);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in LazyPageTabView.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in closure #1 in LazyPageTabView.body.getter);
}

uint64_t initializeBufferWithCopyOfBuffer for LazyPageTabModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LazyPageTabModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for LazyPageTabModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t sub_1870B0F0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];

  v1 = *(_QWORD *)(a1 + 24);
  v2 = type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for ModifiedContent();
  v23[0] = v1;
  v23[1] = &protocol witness table for ContainerRelativeFrameModifier;
  v4 = MEMORY[0x1E0CE2E70];
  v22[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v23);
  v22[1] = lazy protocol witness table accessor for type LazyPageTabModifier and conformance LazyPageTabModifier();
  v5 = MEMORY[0x18D75FFDC](v4, v3, v22);
  type metadata accessor for LazyHStack(255, v3, v5, v6);
  v7 = type metadata accessor for ModifiedContent();
  v21[0] = &protocol witness table for LazyHStack<A>;
  v21[1] = &protocol witness table for TransformScrollIndicators;
  v8 = MEMORY[0x18D75FFDC](v4, v7, v21);
  v10 = type metadata accessor for PagingScrollView(255, v7, v8, v9);
  v11 = type metadata accessor for ModifiedContent();
  v12 = type metadata accessor for ModifiedContent();
  v20[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PagingScrollView<A>, v10);
  v20[1] = &protocol witness table for TransformScrollIndicators;
  v19[0] = MEMORY[0x18D75FFDC](v4, v11, v20);
  v19[1] = MEMORY[0x1E0CE6460];
  v13 = MEMORY[0x18D75FFDC](v4, v12, v19);
  v15 = type metadata accessor for ScrollViewReader(255, v12, v13, v14);
  type metadata accessor for _EnvironmentKeyWritingModifier<TabBarPlacement?>();
  v16 = type metadata accessor for ModifiedContent();
  v18[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewReader<A>, v15);
  v18[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TabBarPlacement?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<TabBarPlacement?>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](v4, v16, v18);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in LazyPageTabModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t LazyPageTabModifier.body(content:)@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  char v14;

  if (one-time initialization token for contain != -1)
    swift_once();
  v6 = static AccessibilityChildBehavior.contain;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain_n();
  v14 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v12;
  *(_QWORD *)(v7 + 24) = v13;
  swift_release();
  v8 = a1 & 1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  swift_beginAccess();
  if (v14)
    v9 = 0;
  else
    v9 = 4;
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v7 + 16, v9);
  swift_endAccess();
  swift_release();
  swift_release();
  v10 = swift_allocObject();
  *(_BYTE *)(v10 + 16) = v8;
  *(_QWORD *)(v10 + 24) = a2;
  *a3 = v7;
  a3[1] = v6;
  a3[2] = (uint64_t)closure #1 in LazyPageTabModifier.body(content:);
  a3[3] = 0;
  a3[4] = (uint64_t)partial apply for closure #2 in LazyPageTabModifier.body(content:);
  a3[5] = v10;
  return swift_retain();
}

uint64_t closure #1 in LazyPageTabModifier.body(content:)@<X0>(__int128 *a1@<X0>, BOOL *a2@<X8>)
{
  int v3;
  __int128 v4;
  uint64_t result;
  BOOL v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  _BYTE v12[40];

  v3 = *((_DWORD *)a1 + 12);
  v4 = a1[1];
  v8 = *a1;
  v9 = v4;
  v10 = a1[2];
  v11 = v3;
  static CoordinateSpaceProtocol<>.scrollView.getter();
  GeometryProxy.bounds(of:)();
  outlined destroy of NamedCoordinateSpace((uint64_t)&v7);
  result = outlined init with take of CGRect?((uint64_t)v12, (uint64_t)&v8);
  v6 = (v10 & 1) != 0 || fabs(*(double *)&v8) <= *(double *)&v9 * 0.5;
  *a2 = v6;
  return result;
}

uint64_t closure #2 in LazyPageTabModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance LazyPageTabModifier@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return LazyPageTabModifier.body(content:)(*(_BYTE *)v1, *(_QWORD *)(v1 + 8), a1);
}

uint64_t sub_1870B13E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in LazyPageTabModifier.body(content:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in LazyPageTabModifier.body(content:)(a1, *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t outlined destroy of NamedCoordinateSpace(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE4DD8] - 8) + 8))();
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>, _GeometryActionModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>, _GeometryActionModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>, _GeometryActionModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>, _GeometryActionModifier<Bool>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for _GeometryActionModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>, _GeometryActionModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>, _GeometryActionModifier<Bool>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>, _GeometryActionModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>();
    type metadata accessor for _GeometryActionModifier<Bool>(255, v0, v1, v2);
    v3 = type metadata accessor for ModifiedContent();
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>, _GeometryActionModifier<Bool>>);
  }
}

void type metadata accessor for _ViewModifier_Content<LazyPageTabModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<LazyPageTabModifier>)
  {
    lazy protocol witness table accessor for type LazyPageTabModifier and conformance LazyPageTabModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<LazyPageTabModifier>);
  }
}

void type metadata accessor for _GeometryActionModifier<Bool>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _GeometryActionModifier<Bool>)
  {
    v4 = type metadata accessor for _GeometryActionModifier(0, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _GeometryActionModifier<Bool>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<LazyPageTabModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<LazyPageTabModifier>, MEMORY[0x1E0CE5318]);
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

BOOL static AccessibilityAdjustmentDirection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AccessibilityAdjustmentDirection.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int AccessibilityAdjustmentDirection.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for AccessibilityAction.impliedRole(for:) in conformance AccessibilityAdjustableAction()
{
  return 4096;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityAdjustableAction(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  _BOOL4 v4;

  v2 = *a1;
  v3 = *a2;
  if (v2 != 2)
  {
    v4 = (v2 & 1) == 0;
    return v3 != 2 && ((v4 ^ v3) & 1) != 0;
  }
  return v3 == 2;
}

uint64_t View.accessibilityAdjustableAction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v10;
  char v12;

  v12 = 2;
  v10 = lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction();
  return View.accessibilityAction<A>(_:label:image:_:)((uint64_t)&v12, 0, 0, 0, 0, 0, a1, a2, a5, a3, (uint64_t)&type metadata for AccessibilityAdjustableAction, a4, v10);
}

unint64_t lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction;
  if (!lazy protocol witness table cache variable for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityAdjustableAction, &type metadata for AccessibilityAdjustableAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction;
  if (!lazy protocol witness table cache variable for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityAdjustableAction, &type metadata for AccessibilityAdjustableAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction);
  }
  return result;
}

uint64_t ModifiedContent<>.accessibilityAdjustableAction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  char v10;

  v10 = 2;
  v8 = lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction();
  return ModifiedContent<>.accessibilityAction<A>(_:label:image:_:)((uint64_t)&v10, 0, 0, 0, 0, 0, a1, a2, a4, a3, (uint64_t)&type metadata for AccessibilityAdjustableAction, v8);
}

unint64_t lazy protocol witness table accessor for type AccessibilityAdjustmentDirection and conformance AccessibilityAdjustmentDirection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityAdjustmentDirection and conformance AccessibilityAdjustmentDirection;
  if (!lazy protocol witness table cache variable for type AccessibilityAdjustmentDirection and conformance AccessibilityAdjustmentDirection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityAdjustmentDirection, &type metadata for AccessibilityAdjustmentDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAdjustmentDirection and conformance AccessibilityAdjustmentDirection);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessibilityAdjustmentDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1870B1934 + 4 * byte_187C06FE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1870B1968 + 4 * byte_187C06FE0[v4]))();
}

uint64_t sub_1870B1968(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870B1970(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1870B1978);
  return result;
}

uint64_t sub_1870B1984(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1870B198CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1870B1990(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870B1998(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityAdjustmentDirection()
{
  return &type metadata for AccessibilityAdjustmentDirection;
}

uint64_t getEnumTagSinglePayload for AccessibilityAdjustableAction(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  if (v6 >= 2)
    v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v7 = -2;
  if (v7 < 0)
    v7 = -1;
  return (v7 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityAdjustableAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1870B1AAC + 4 * byte_187C06FEF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1870B1AE0 + 4 * byte_187C06FEA[v4]))();
}

uint64_t sub_1870B1AE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870B1AE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1870B1AF0);
  return result;
}

uint64_t sub_1870B1AFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1870B1B04);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1870B1B08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870B1B10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityAdjustableAction()
{
  return &type metadata for AccessibilityAdjustableAction;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityAdjustableAction(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t specialized AccessibilityAdjustableAction.matches<A>(_:)(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return swift_dynamicCast();
}

void AccessibilityTextContentType.platformValue.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_1870B1C44()
{
  uint64_t v0;
  id v1;

  v0 = *MEMORY[0x1E0DC4620];
  v1 = (id)*MEMORY[0x1E0DC4620];
  return v0;
}

uint64_t Text.accessibilityTextContentType(_:)(char *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  type metadata accessor for AccessibilityTextModifier();
  v2 = swift_allocObject();
  *(_BYTE *)(v2 + 16) = v1;
  *(_WORD *)(v2 + 17) = 519;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  v3 = Text.modified(with:)();
  swift_release();
  return v3;
}

uint64_t Text.accessibilityHeading(_:)(char a1)
{
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for AccessibilityTextModifier();
  v2 = swift_allocObject();
  *(_BYTE *)(v2 + 16) = 8;
  *(_BYTE *)(v2 + 17) = a1;
  *(_BYTE *)(v2 + 18) = 2;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  v3 = Text.modified(with:)();
  swift_release();
  return v3;
}

uint64_t Text.accessibilityLabel(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  char v8;
  uint64_t v9;
  uint64_t v10;

  v8 = a3 & 1;
  Text.assertUnstyled(_:options:)();
  type metadata accessor for AccessibilityTextModifier();
  v9 = swift_allocObject();
  *(_WORD *)(v9 + 16) = 1800;
  *(_BYTE *)(v9 + 18) = 2;
  *(_QWORD *)(v9 + 24) = a1;
  *(_QWORD *)(v9 + 32) = a2;
  *(_QWORD *)(v9 + 40) = a3 & 1;
  *(_QWORD *)(v9 + 48) = a4;
  outlined copy of Text.Storage(a1, a2, v8);
  swift_bridgeObjectRetain();
  v10 = Text.modified(with:)();
  swift_release();
  return v10;
}

uint64_t Text.accessibilityLabel(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0 = Text.init(_:tableName:bundle:comment:)();
  v2 = v1;
  v4 = v3 & 1;
  v6 = Text.accessibilityLabel(_:)(v0, v1, v3 & 1, v5);
  outlined consume of Text.Storage(v0, v2, v4);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t Text.accessibilityLabel<A>(_:)(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  v4 = Text.init<A>(_:)();
  v6 = v5;
  v8 = v7 & 1;
  v10 = Text.accessibilityLabel(_:)(v4, v5, v7 & 1, v9);
  outlined consume of Text.Storage(v4, v6, v8);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t View.accessibilityTextContentType(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = *a1;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE57C0], (uint64_t)&v4, 1, a2, MEMORY[0x1E0CE57C0], a3);
}

uint64_t View.accessibilityHeading(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = a1;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE57E0], (uint64_t)&v4, 1, a2, MEMORY[0x1E0CE57E0], a3);
}

uint64_t ModifiedContent<>.accessibilityTextContentType(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4;

  v4 = *a1;
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E0CE57C0], (uint64_t)&v4, 1, a2, a3);
}

uint64_t ModifiedContent<>.accessibilityHeading(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4;

  v4 = a1;
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E0CE57E0], (uint64_t)&v4, 1, a2, a3);
}

uint64_t destroy for AccessibilityTextLayoutProperties()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityTextLayoutProperties(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityTextLayoutProperties(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 25) = *((_BYTE *)a2 + 25);
  *(_BYTE *)(a1 + 26) = *((_BYTE *)a2 + 26);
  *(_BYTE *)(a1 + 27) = *((_BYTE *)a2 + 27);
  *(_BYTE *)(a1 + 28) = *((_BYTE *)a2 + 28);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = a2[9];
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_QWORD *)(a1 + 88) = a2[11];
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  *(_QWORD *)(a1 + 112) = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  return a1;
}

__n128 __swift_memcpy121_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_OWORD *)(a1 + 105) = *(__int128 *)((char *)a2 + 105);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for AccessibilityTextLayoutProperties(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityTextLayoutProperties(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 121))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 112);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AccessibilityTextLayoutProperties(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 105) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 121) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 121) = 0;
    if (a2)
      *(_QWORD *)(result + 112) = a2;
  }
  return result;
}

uint64_t getEnumTag for AccessibilityTextLayoutProperties(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 112);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double destructiveInjectEnumTag for AccessibilityTextLayoutProperties(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 120) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 112) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityTextLayoutProperties()
{
  return &type metadata for AccessibilityTextLayoutProperties;
}

void *PlatformItemList.Item.accessibilityEffectiveText.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 528);
  if (!v1)
  {
    if (one-time initialization token for configuredForPlatform != -1)
      swift_once();
    v2 = static EnvironmentValues.configuredForPlatform;
    v3 = unk_1ECE20280;
    v5 = *(void **)v0;
    swift_retain();
    swift_retain();
    if (!v5)
      goto LABEL_17;
LABEL_11:
    v12 = v2;
    v13 = v3;
    v7 = v5;
    if ((static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:)() & 1) != 0)

    else
    goto LABEL_7;
  }
  v2 = *(_QWORD *)(v0 + 536);
  v3 = *(_QWORD *)(v0 + 544);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized AccessibilityProperties.subscript.getter(v1, (uint64_t)&v12);
  swift_bridgeObjectRelease();
  if (!v12 || (v4 = v13, swift_bridgeObjectRelease(), v4 == 3))
  {
    v5 = *(void **)v0;
    if (*(_QWORD *)v0)
      goto LABEL_11;
  }
  v6 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v6, (uint64_t)&v12);
  swift_bridgeObjectRelease();
  if (!v12)
    goto LABEL_14;
  v12 = v2;
  v13 = v3;
  swift_retain();
  swift_retain();
  v5 = (void *)static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (!v5)
  {
LABEL_14:
    v8 = *(void **)v0;
    if (*(_QWORD *)v0)
    {
      v11 = *(void **)v0;
      v12 = v2;
      v13 = v3;
      v9 = v8;
      if ((static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:)() & 1) != 0)
      {
        swift_release();
        swift_release();

        return v11;
      }
      swift_release();
      swift_release();

      return 0;
    }
LABEL_17:
    swift_release();
    swift_release();
    return 0;
  }
LABEL_7:
  swift_release();
  swift_release();
  return v5;
}

uint64_t PlatformItem.accessibilityResolvedAttributedLabel.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t result;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  _BYTE v11[216];
  id v12[27];

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(void **)(v0 + 328);
  if (!v1
    || (v12[0] = *(id *)(v0 + 320),
        v12[1] = v2,
        (result = PlatformItem.AccessibilityContent.resolvedAttributedLabel.getter()) == 0))
  {
    outlined init with take of PlatformItem.PrimaryContent?(v0 + 24, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v11, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)v12) != 1)
    {
      v4 = v12[0];
      if (v12[0])
      {
        if (v1)
        {
          v5 = v12[0];
          swift_bridgeObjectRetain();
          v6 = AGGraphClearUpdate();
          MEMORY[0x1E0C80A78](v6, v7);
          static Update.ensure<A>(_:)();
          AGGraphSetUpdate();
          swift_bridgeObjectRelease();
        }
        else
        {
          v8 = one-time initialization token for configuredForPlatform;
          v9 = v12[0];
          if (v8 != -1)
            swift_once();
          swift_retain();
          swift_retain();
        }
        v10 = v4;
        if ((static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:)() & 1) != 0)
        {

          swift_release();
          swift_release();
          return (uint64_t)v4;
        }

        swift_release();
        swift_release();
      }
    }
    return 0;
  }
  return result;
}

id PlatformItem.accessibilityEffectiveText.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  id v5;
  id v6;
  _BYTE v8[216];
  id v9;
  unsigned __int8 v10;

  if (*(_QWORD *)(v0 + 320))
  {
    swift_bridgeObjectRetain();
    v1 = AGGraphClearUpdate();
    MEMORY[0x1E0C80A78](v1, v2);
    static Update.ensure<A>(_:)();
    AGGraphSetUpdate();
    swift_bridgeObjectRelease();
    v3 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v3, (uint64_t)&v9);
    swift_bridgeObjectRelease();
    if (v9)
    {
      v4 = v10;
      swift_bridgeObjectRelease();
      if (v4 != 3)
        goto LABEL_12;
    }
  }
  else
  {
    if (one-time initialization token for configuredForPlatform != -1)
      swift_once();
    swift_retain();
    swift_retain();
  }
  outlined init with take of PlatformItem.PrimaryContent?(v0 + 24, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v8, (uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)&v9) == 1 || (v5 = v9) == 0)
  {
LABEL_12:
    v5 = (id)PlatformItem.accessibilityResolvedAttributedLabel.getter();
LABEL_13:
    swift_release();
    swift_release();
    return v5;
  }
  v6 = v9;
  if ((static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:)() & 1) == 0)
  {

    goto LABEL_13;
  }

  swift_release();
  swift_release();
  return v5;
}

uint64_t one-time initialization function for sidebar()
{
  uint64_t ObjCClassFromMetadata;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for SwiftUIClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v2 = objc_msgSend(v1, sel_bundleForClass_, ObjCClassFromMetadata);
  v3 = Text.init(_:tableName:bundle:comment:)();
  v5 = v4;
  LOBYTE(ObjCClassFromMetadata) = v6;
  v8 = v7;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  static Text.Accessibility.sidebar = v3;
  unk_1EDEFFCC0 = v5;
  byte_1EDEFFCC8 = ObjCClassFromMetadata & 1;
  qword_1EDEFFCD0 = v8;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.sidebar);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.sidebar);
  v2 = MEMORY[0x1E0DEE9D8];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)v1 = xmmword_187C82900;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t specialized AccessibilityNode.withLayoutManager<A>(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;
  __int128 v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;
  char v32;
  _OWORD v33[6];
  _OWORD v34[2];
  _BYTE v35[128];
  uint64_t v36[16];
  __int128 v37[8];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];
  _OWORD v45[2];
  char v46;
  _QWORD v47[5];

  result = specialized AccessibilityNode.viewResponder<A>(ofType:)();
  v9 = 0uLL;
  if (result)
  {
    AccessibilityNode.attachment.getter((uint64_t *)&v38);

    v10 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v10, (uint64_t)v35);
    swift_bridgeObjectRelease_n();
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v35, (uint64_t)v36, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v36, (uint64_t)v37, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
    if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v37) == 1
      || (outlined init with take of AccessibilityTextLayoutProperties(v37, v33),
          getEnumTag for AccessibilityTextLayoutProperties((uint64_t)v33) == 1))
    {
      result = swift_release();
      v11 = 1;
      v12 = 0uLL;
      v9 = 0uLL;
    }
    else
    {
      v42 = v33[4];
      v43 = v33[5];
      v44[0] = v34[0];
      *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)((char *)v34 + 9);
      v38 = v33[0];
      v39 = v33[1];
      v40 = v33[2];
      v41 = v33[3];
      v30 = 0u;
      v31 = 0u;
      v32 = 6;
      v47[0] = 1;
      *(_QWORD *)&v25 = 0;
      v23 = 0u;
      v24 = 0u;
      BYTE8(v25) = 2;
      StyledTextResponder.addContentPath(to:kind:in:observer:)();
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      v45[0] = v30;
      v45[1] = v31;
      v46 = v32;
      outlined init with take of Path.Storage((uint64_t)v45, (uint64_t)v47);
      outlined retain of TableColumnCustomizationID.Base((uint64_t)v47, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
      Path.boundingRect.getter();
      v14 = v13;
      v16 = v15;
      v18 = v17;
      v20 = v19;
      outlined retain of TableColumnCustomizationID.Base((uint64_t)v45, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      v27 = v42;
      v28 = v43;
      v29[0] = v44[0];
      *(_OWORD *)((char *)v29 + 9) = *(_OWORD *)((char *)v44 + 9);
      v23 = v38;
      v24 = v39;
      v25 = v40;
      v26 = v41;
      TextLayoutProperties.minScaleFactor.getter();
      _sSo15NSLayoutManagerC7SwiftUIE4with_12drawingScale4size16layoutProperties_xSo18NSAttributedStringC_12CoreGraphics7CGFloatVSo6CGSizeVAC010TextLayoutJ0VxAB_So15NSTextContainerCtXEtlFZSo6CGRectVSg_TBm503_s7c28UI17AccessibilityNodeC17withr15ManageryxSgSo18kl8C_AESo08a8G0C_So15st4CSo6U25VtXEtlFAeI_AKtXEfU_AM_TG5AbrTxSgRi_zRi0_zlyATIsgggyr_ATTf1nnnnc_n0vcwxy27C14resolvedBounds2in3forSo6u7VSgSo18kl22C_So8_NSRangeVtFAISo15ab6C_So15sT9CAHtXEfU_So8_NSRangeVTf1nnnncn_nTf4nnnnxn_n(a1, (uint64_t)&v38, a2, a3, (uint64_t)&v23, v18, v20, v14, v16);
      v21 = v24;
      v22 = v23;
      v11 = v25;
      swift_release();
      outlined retain of TableColumnCustomizationID.Base((uint64_t)v45, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      result = (uint64_t)outlined release of AccessibilityTextLayoutProperties?(v36);
      v12 = v21;
      v9 = v22;
    }
  }
  else
  {
    v11 = 1;
    v12 = 0uLL;
  }
  *(_OWORD *)a4 = v9;
  *(_OWORD *)(a4 + 16) = v12;
  *(_BYTE *)(a4 + 32) = v11;
  return result;
}

uint64_t closure #1 in NSAttributedString.hasAccessibilityLinks.getter(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4, _BYTE *a5)
{
  if (*(_QWORD *)(result + 24))
  {
    *a5 = 1;
    *a4 = 1;
  }
  return result;
}

uint64_t specialized AccessibilityGeometryStorage.viewResponder<A>(ofType:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[8];

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  v3 = v1 + 32;
  swift_bridgeObjectRetain();
  v4 = 0;
  while (1)
  {
    outlined init with copy of WeakBox<ViewResponder>(v3, (uint64_t)v8);
    if (swift_weakLoadStrong())
      break;
    swift_bridgeObjectRetain();
LABEL_4:
    outlined destroy of WeakBox<ViewResponder>((uint64_t)v8);
    swift_bridgeObjectRelease();
    ++v4;
    v3 += 8;
    if (v2 == v4)
      goto LABEL_9;
  }
  type metadata accessor for StyledTextResponder();
  if (!swift_dynamicCastClass())
  {
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_4;
  }
  outlined destroy of WeakBox<ViewResponder>((uint64_t)v8);
  swift_release();
  if (v2 == v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v4 >= *(_QWORD *)(v1 + 16))
  {
    __break(1u);
    goto LABEL_17;
  }
  outlined init with copy of WeakBox<ViewResponder>(v3, (uint64_t)v8);
  if (!swift_weakLoadStrong())
  {
LABEL_18:
    result = outlined destroy of WeakBox<ViewResponder>((uint64_t)v8);
    __break(1u);
    return result;
  }
  v7 = swift_dynamicCastClass();
  if (!v7)
  {
LABEL_17:
    swift_release();
    goto LABEL_18;
  }
  v5 = v7;
  outlined destroy of WeakBox<ViewResponder>((uint64_t)v8);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t specialized AccessibilityNode.viewResponder<A>(ofType:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _BYTE v18[8];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  v2 = *v1;
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
    swift_bridgeObjectRetain();
    goto LABEL_16;
  }
  v4 = v2 + 32;
  swift_bridgeObjectRetain();
  v15 = v2 + 32;
  v16 = v2;
  while (1)
  {
    v5 = v3 - 1;
    if (v3 - 1 >= *(_QWORD *)(v2 + 16))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v6 = v4 + 40 * v5;
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 128);
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
        break;
    }
LABEL_5:
    --v3;
    if (!v5)
      goto LABEL_16;
  }
  v10 = v8 + 32;
  v17 = *(id *)(v6 + 8);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = 0;
  while (1)
  {
    outlined init with copy of WeakBox<ViewResponder>(v10, (uint64_t)v18);
    if (swift_weakLoadStrong())
      break;
    swift_bridgeObjectRetain();
LABEL_11:
    outlined destroy of WeakBox<ViewResponder>((uint64_t)v18);
    swift_bridgeObjectRelease();
    ++v11;
    v10 += 8;
    if (v9 == v11)
      goto LABEL_4;
  }
  type metadata accessor for StyledTextResponder();
  if (!swift_dynamicCastClass())
  {
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_11;
  }
  outlined destroy of WeakBox<ViewResponder>((uint64_t)v18);
  swift_release();
  if (v9 == v11)
  {
LABEL_4:
    v2 = v16;
    swift_bridgeObjectRelease();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v15;
    goto LABEL_5;
  }
  if (v11 >= *(_QWORD *)(v8 + 16))
    goto LABEL_27;
  outlined init with copy of WeakBox<ViewResponder>(v10, (uint64_t)v18);
  if (!swift_weakLoadStrong())
  {
LABEL_31:
    result = outlined destroy of WeakBox<ViewResponder>((uint64_t)v18);
    __break(1u);
    return result;
  }
  if (!swift_dynamicCastClass())
  {
LABEL_30:
    swift_release();
    goto LABEL_31;
  }
  outlined destroy of WeakBox<ViewResponder>((uint64_t)v18);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v3)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v5 >= *(_QWORD *)(v16 + 16))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_29;
  v14 = *(id *)(v6 + 8);
  swift_retain();
  swift_bridgeObjectRetain();
  v12 = specialized AccessibilityGeometryStorage.viewResponder<A>(ofType:)();
  swift_release();

  swift_bridgeObjectRelease();
  if (!v12)
    goto LABEL_29;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t partial apply for closure #1 in closure #1 in PlatformItem.AccessibilityContent.environment.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in closure #1 in PlatformItem.AccessibilityContent.environment.getter(a1);
}

uint64_t _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 112);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_OWORD *outlined init with take of AccessibilityTextLayoutProperties(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  a2[2] = a1[2];
  a2[3] = v4;
  *a2 = v2;
  a2[1] = v3;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  *(_OWORD *)((char *)a2 + 105) = *(__int128 *)((char *)a1 + 105);
  a2[5] = v6;
  a2[6] = v7;
  a2[4] = v5;
  return a2;
}

uint64_t *outlined release of AccessibilityTextLayoutProperties?(uint64_t *a1)
{
  outlined consume of AccessibilityTextLayoutProperties?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14]);
  return a1;
}

uint64_t outlined consume of AccessibilityTextLayoutProperties?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t result;

  result = a15;
  if (a15 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined init with copy of WeakBox<ViewResponder>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for WeakBox<ViewResponder>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WeakBox<ViewResponder>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for WeakBox<ViewResponder>(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t closure #1 in closure #1 in PlatformItem.AccessibilityContent.environment.getterpartial apply@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in closure #1 in PlatformItem.AccessibilityContent.environment.getter(a1);
}

void UIKitSearchBarCoordinator.setupSearchBar(_:)(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;

  swift_unknownObjectWeakAssign();
  objc_msgSend(a1, sel_setDelegate_, v1);
  v3 = objc_msgSend(a1, sel_searchTextField);
  objc_msgSend(v3, sel_setDelegate_, v1);

  v4 = objc_msgSend(a1, sel_searchTextField);
  objc_msgSend(v4, sel_addTarget_action_forControlEvents_, v1, sel_primaryActionTriggered_, 0x2000);

}

void UIKitSearchBarAdaptor.updateUIView(_:context:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21[3];
  uint64_t v22;
  uint64_t v23;

  v3 = v2;
  v6 = type metadata accessor for SearchFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v21[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v12 = *(unsigned __int8 *)(a2 + 32);
  v13 = *(void **)(a2 + 40);
  v15 = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v9, v14);
  if (v12 == 1)
  {
    v20 = (uint64_t)&v20;
    MEMORY[0x1E0C80A78](v15, v16);
    *(&v20 - 2) = __ROR8__(v11, 32);
    swift_retain();
    v17 = v13;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v10, 1);
    v18 = v17;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v10, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v11, v10, 1);
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v11, v10, 1);

    v11 = v22;
    v10 = v23;
  }
  else
  {
    v22 = v11;
    v23 = v10;
    v19 = v13;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v10, 0);
  }
  v21[0] = v11;
  v21[1] = v10;
  UIKitSearchBarCoordinator.updateSearchBar(_:to:in:)(a1, (uint64_t)v9, v21);
  swift_release();
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for SearchFieldConfiguration);
  UIKitSearchBarCoordinator.updateIsFirstResponder(_:to:)((uint64_t)a1, v3);

}

uint64_t UIKitSearchBarCoordinator.updateSearchBar(_:to:in:)(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 v41;
  id v42;
  Class isa;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  uint64_t v48;
  void *v49;
  id v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  char v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD v73[2];
  uint64_t v74;
  uint64_t v75;
  Swift::tuple_OpaquePointer_String v76;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v68 = (char *)&v66 - v9;
  v10 = type metadata accessor for SearchAttributedString();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SearchFieldState();
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a3;
  v20 = a3[1];
  v71 = OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_isViewUpdating;
  v69 = v3;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_isViewUpdating) = 1;
  v21 = objc_msgSend(a1, sel_searchTextField, v16);
  specialized UIKitTextInput.update(in:)(v19, v20);
  specialized UIKitTextInputTraits.updateTraits(in:)(v19, v20);
  specialized UITextInputTraits_Private.updatePrivateTraits(in:)(v19, v20);
  *(_QWORD *)&v73[0] = v19;
  *((_QWORD *)&v73[0] + 1) = v20;
  EnvironmentValues.effectiveFont.getter();
  *(_QWORD *)&v73[0] = v19;
  *((_QWORD *)&v73[0] + 1) = v20;
  v22 = (void *)Font.platformFont(in:)();
  swift_release();
  objc_msgSend(v21, sel_setFont_, v22);

  *(_QWORD *)&v73[0] = v19;
  *((_QWORD *)&v73[0] + 1) = v20;
  swift_retain();
  swift_retain();
  v23 = specialized NSTextAlignment.init(in:)();
  v70 = v21;
  objc_msgSend(v21, sel_setTextAlignment_, v23);
  *(_QWORD *)&v73[0] = v19;
  *((_QWORD *)&v73[0] + 1) = v20;
  specialized UIKitSearchBarCoordinator.updateTextColor(_:in:)(a1, v73);
  LODWORD(v22) = objc_msgSend(a1, sel__isEnabled);
  *(_QWORD *)&v73[0] = v19;
  *((_QWORD *)&v73[0] + 1) = v20;
  if ((_DWORD)v22 != (EnvironmentValues.isEnabled.getter() & 1))
  {
    *(_QWORD *)&v73[0] = v19;
    *((_QWORD *)&v73[0] + 1) = v20;
    objc_msgSend(a1, sel__setEnabled_, EnvironmentValues.isEnabled.getter() & 1);
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8]();
  v24 = &v18[*(int *)(v14 + 36)];
  v25 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v13, v24, v25);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  v76 = SearchAttributedString.splitIntoTokensAndText()();
  countAndFlagsBits = v76._1._countAndFlagsBits;
  object = v76._1._object;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SearchAttributedString);
  *(_QWORD *)&v73[0] = v19;
  *((_QWORD *)&v73[0] + 1) = v20;
  v28 = countAndFlagsBits;
  v29 = v69;
  UIKitSearchBarCoordinator.updateTextIfNeeded(_:text:in:)(a1, v28, (uint64_t)object, (void **)v73);
  swift_bridgeObjectRelease();
  v30 = type metadata accessor for SearchFieldConfiguration(0);
  v32 = *(unsigned __int8 *)(a2 + *(int *)(v30 + 24) + 8);
  v33 = a2;
  v34 = v29;
  v72 = v30;
  if (v32 != 255)
  {
    v67 = v33;
    MEMORY[0x1E0C80A78](v30, v31);
    *(&v66 - 2) = v35;
    *((_BYTE *)&v66 - 8) = v36 & 1;
    v37 = swift_bridgeObjectRetain();
    v38 = specialized Sequence.compactMap<A>(_:)(v37, (uint64_t (*)(uint64_t, _OWORD *))partial apply for closure #1 in UIKitSearchBarCoordinator.updateTokensIfNeeded(_:tokens:platformTokens:));
    swift_bridgeObjectRelease();
    v39 = OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldTokens;
    v40 = swift_bridgeObjectRetain();
    v41 = specialized static Array<A>.== infix(_:_:)(v40, v38);
    swift_bridgeObjectRelease();
    if ((v41 & 1) == 0)
    {
      v42 = objc_msgSend(a1, sel_searchTextField);
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISearchToken);
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v42, sel_setTokens_, isa);

    }
    *(_QWORD *)(v34 + v39) = v38;
    swift_bridgeObjectRelease();
    v33 = v67;
  }
  swift_bridgeObjectRelease();
  v44 = v33;
  *(_QWORD *)&v73[0] = v19;
  *((_QWORD *)&v73[0] + 1) = v20;
  v74 = 0;
  v75 = 0;
  default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  v45 = (void *)Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  v46 = v45;
  if (v45)
  {
    v47 = objc_msgSend(v45, sel_string);

    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v46 = v49;

  }
  else
  {
    v48 = 0;
  }
  v50 = objc_msgSend(a1, sel_placeholder);
  if (v50)
  {
    v51 = v50;
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v54 = v53;

    if (!v46)
    {
      v56 = 0;
      v55 = (uint64_t)v68;
LABEL_21:
      swift_bridgeObjectRelease();
      objc_msgSend(a1, sel_setPlaceholder_, v56);

      goto LABEL_22;
    }
    v55 = (uint64_t)v68;
    if (v52 == v48 && v46 == v54)
    {
      swift_bridgeObjectRelease();
LABEL_19:
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v57 & 1) != 0)
      goto LABEL_19;
LABEL_20:
    v56 = (void *)MEMORY[0x18D75CC88](v48, v46);
    goto LABEL_21;
  }
  v55 = (uint64_t)v68;
  if (v46)
    goto LABEL_20;
LABEL_22:
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>);
  swift_retain();
  if (v20)
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    swift_retain();
    PropertyList.subscript.getter();
    swift_release();
  }
  swift_release_n();
  v58 = *(_QWORD *)(v34 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_triggerSubmission);
  *(_OWORD *)(v34 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_triggerSubmission) = v73[0];
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v58);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
  swift_retain();
  if (v20)
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    *(_BYTE *)(v34 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_placement) = v73[0];
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    swift_retain();
    PropertyList.subscript.getter();
    swift_release();
    swift_release_n();
    *(_BYTE *)(v34 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_placement) = v73[0];
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey>);
    swift_retain_n();
    swift_retain();
    PropertyList.subscript.getter();
    swift_release();
  }
  swift_release_n();
  v59 = LOBYTE(v73[0]);
  v60 = OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_ensureVibrancy;
  v61 = a1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_ensureVibrancy];
  a1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_ensureVibrancy] = v73[0];
  if (v59 != v61)
  {
    if (v59)
      v62 = 2;
    else
      v62 = 0;
    objc_msgSend(a1, sel__setOverrideUserInterfaceRenderingMode_, v62);
    if (a1[v60])
      v63 = 1;
    else
      v63 = -1;
    objc_msgSend(a1, sel__setOverrideVibrancyTrait_, v63);
  }
  UIKitSearchBarCoordinator.updateIsFirstResponder(_:to:)((uint64_t)a1, v44);

  *(_BYTE *)(v34 + v71) = 0;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v44, v55, type metadata accessor for SearchFieldConfiguration);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v55, 0, 1);
  v64 = v34 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_configuration;
  swift_beginAccess();
  outlined assign with take of SearchFieldConfiguration?(v55, v64);
  return swift_endAccess();
}

void UIKitSearchBarCoordinator.updateIsFirstResponder(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = a2;
  v45 = a1;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v42 - v5;
  v47 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v47, v7);
  v44 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v43 = (char *)&v42 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (unsigned __int8 *)&v42 - v14;
  v16 = type metadata accessor for SearchFieldConfiguration(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v42 - v23;
  v25 = v2 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_configuration;
  swift_beginAccess();
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v26(v25, 1, v16))
  {
    v46 = 0;
  }
  else
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v25, (uint64_t)v24, type metadata accessor for SearchFieldConfiguration);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8]();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, type metadata accessor for SearchFieldConfiguration);
    v46 = *v15 != 2;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v28 = v27;
  MEMORY[0x18D75B9C8]();
  v29 = *v15;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  outlined init with copy of SearchFieldConfiguration.Data?(v25, (uint64_t)v6, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v26((uint64_t)v6, 1, v16) == 1)
  {
    outlined destroy of TableRowList?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    v30 = v29;
    MEMORY[0x18D75B9C8](v28);
    v31 = v15[*(int *)(v47 + 44) + 4];
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v6, (uint64_t)v20, type metadata accessor for SearchFieldConfiguration);
    v32 = (uint64_t)v43;
    v30 = v29;
    MEMORY[0x18D75B9C8](v28);
    v33 = v47;
    v34 = *(_DWORD *)(v32 + *(int *)(v47 + 44));
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v32, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    v35 = (uint64_t)v44;
    MEMORY[0x18D75B9C8](v28);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, type metadata accessor for SearchFieldConfiguration);
    v36 = v35 + *(int *)(v33 + 44);
    v37 = *(_DWORD *)v36;
    v38 = *(unsigned __int8 *)(v36 + 4);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v35, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    if (v34 == v37)
      v39 = 2;
    else
      v39 = v38;
    if (v37 == -1)
      v39 = v38;
    if (v34 == -1)
      v31 = v38;
    else
      v31 = v39;
  }
  v40 = v46;
  v41 = v30 == 2 || v46;
  if ((v31 & 1) != 0)
    v41 = 0;
  if (v41 != 1)
    goto LABEL_24;
  if (v30 != 2)
    v40 = 0;
  if (v40 || v31 != 2)
LABEL_24:
    UIKitSearchBar.enqueueFirstResponderUpdate(_:)(v41 != 1);
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance UIKitSearchBarAdaptor()
{
  id v0;

  type metadata accessor for UIKitSearchBar();
  v0 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  UIKitSearchBarCoordinator.setupSearchBar(_:)(v0);
  return v0;
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitSearchBarAdaptor@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitSearchBarCoordinator(0)), sel_init);
  *a1 = result;
  return result;
}

void protocol witness for UIViewRepresentable._overrideLayoutTraits(_:for:) in conformance UIKitSearchBarAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void (*v4)(uint64_t *, _QWORD);
  _QWORD *v5;
  uint64_t v6;

  if ((*(_BYTE *)(v3 + *(int *)(a3 + 20)) & 1) == 0)
  {
    v4 = (void (*)(uint64_t *, _QWORD))_LayoutTraits.idealSize.modify();
    *v5 = 0x4070000000000000;
    v4(&v6, 0);
  }
}

uint64_t UIKitSearchBarCoordinator.RepresentedToken.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of AnyToken(v0 + 16);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0+ OBJC_IVAR____TtCC7SwiftUI25UIKitSearchBarCoordinatorP33_9E78780A6F2626BA9019200B48F4A36B16RepresentedToken_platformItem, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UIKitSearchBarCoordinator.RepresentedToken()
{
  _QWORD *v0;
  uint64_t v1;
  _BYTE v3[40];

  outlined init with copy of AnyHashable(*v0 + 48, (uint64_t)v3);
  v1 = AnyHashable.description.getter();
  outlined destroy of AnyHashable((uint64_t)v3);
  return v1;
}

uint64_t UIKitSearchBarCoordinator.resolvedScopes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  __int128 v13[4];
  char v14;
  _BYTE v15[184];
  _BYTE v16[184];

  v1 = type metadata accessor for PlatformItemList.Item();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_scopes);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v16);
  outlined init with take of Image.Resolved?((uint64_t)v16, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  v13[0] = xmmword_187BF9840;
  memset(&v13[1], 0, 48);
  v14 = 0;
  v11 = 0uLL;
  v12 = 0;
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v15, v13, &v11, 0, 0, (uint64_t)v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v5 + 77) = v6;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v7 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_187BF9830;
  outlined init with take of TableCellFormula((uint64_t)v5, v8 + v7, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  return v8;
}

void UIKitSearchBarCoordinator.resolvedTokenScopes.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  unint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  _BYTE v18[24];
  uint64_t v19;

  v1 = (void *)MEMORY[0x18D760234](v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_searchBar);
  if (!v1)
    return;
  v2 = v1;
  v3 = objc_msgSend(v1, sel_searchTextField);

  if (!v3)
    return;
  v4 = objc_msgSend(v3, sel_selectedTextRange);
  if (!v4)
  {
LABEL_24:

    return;
  }
  v5 = v4;
  if ((objc_msgSend(v4, sel_isEmpty) & 1) != 0)
  {

LABEL_6:
    return;
  }
  v6 = objc_msgSend(v3, sel_tokensInRange_, v5);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISearchToken);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v14 == 1)
    {
      swift_bridgeObjectRetain();
      v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v15)
      {

        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) != 1)
  {
LABEL_23:
    swift_bridgeObjectRelease();

    goto LABEL_24;
  }
LABEL_9:
  if ((v7 & 0xC000000000000001) != 0)
  {
    v8 = (id)MEMORY[0x18D75E3BC](0, v7);
  }
  else
  {
    if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v8 = *(id *)(v7 + 32);
  }
  v9 = v8;
  swift_bridgeObjectRelease();
  if (objc_msgSend(v9, sel_representedObject))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  v10 = MEMORY[0x1E0DEE9B8] + 8;
  outlined init with take of Image.Resolved?((uint64_t)v17, (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
  if (v19)
  {
    type metadata accessor for UIKitSearchBarCoordinator.RepresentedToken(0);
    if ((swift_dynamicCast() & 1) == 0)
    {

      goto LABEL_6;
    }
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlatformItemList.Item() - 8) + 80);
    v12 = (v11 + 32) & ~v11;
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_187BF9830;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v16+ OBJC_IVAR____TtCC7SwiftUI25UIKitSearchBarCoordinatorP33_9E78780A6F2626BA9019200B48F4A36B16RepresentedToken_platformItem, v13 + v12, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);

    swift_release();
  }
  else
  {

    outlined destroy of TableRowList?((uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for Any?, v10, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  }
}

id specialized UIKitTextInput.update(in:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  id result;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  swift_retain();
  swift_retain();
  objc_msgSend(v2, sel_setTextAlignment_, specialized NSTextAlignment.init(in:)(), a1, a2);
  v14 = a1;
  v16 = a2;
  EnvironmentValues.minimumScaleFactor.getter();
  v6 = v5;
  static MinimumScaleFactorKey.defaultValue.getter();
  v8 = v7;
  if (v6 < v7)
  {
    EnvironmentValues.effectiveFont.getter();
    v17 = a2;
    v9 = (void *)Font.platformFont(in:)();
    swift_release();
    CTFontRef.pointSize.getter();
    v11 = v10;

    objc_msgSend(v2, sel_setMinimumFontSize_, v6 * v11, a1, v17);
  }
  result = objc_msgSend(v2, sel_adjustsFontSizeToFitWidth, v14, v16);
  if (v6 < v8 != (_DWORD)result)
    return objc_msgSend(v2, sel_setAdjustsFontSizeToFitWidth_, v6 < v8);
  return result;
}

void UIKitSearchBarCoordinator.updateTextIfNeeded(_:text:in:)(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  id v18;
  id v19;
  void *v20;
  void *v21;
  _BOOL8 v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  _OWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v5 = v4;
  v8 = *a4;
  v7 = (uint64_t)a4[1];
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>);
  swift_retain_n();
  if (v7)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v9 = v39;
  v10 = v40;
  v11 = v41;
  v12 = (uint64_t *)(v5 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldSuffix);
  v35 = v38;
  v13 = *(_OWORD *)(v5 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldSuffix + 16);
  v37[0] = *(_OWORD *)(v5 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldSuffix);
  v37[1] = v13;
  v14 = MEMORY[0x18D75AFA8](&v38, v37);
  v15 = (_QWORD *)(v5 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldText);
  v16 = *(_QWORD *)(v5 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldText + 8);
  if (v16)
  {
    if (*v15 == a2 && v16 == a3)
    {
      if ((v14 & 1) != 0)
        goto LABEL_10;
    }
    else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & v14 & 1) != 0)
    {
LABEL_10:
      v18 = 0;
      goto LABEL_13;
    }
  }
  v19 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
  swift_bridgeObjectRetain();
  v20 = (void *)MEMORY[0x18D75CC88](a2, a3);
  swift_bridgeObjectRelease();
  v18 = objc_msgSend(v19, sel_initWithString_, v20);

LABEL_13:
  v34 = a3;
  if (v10 < 0)
  {
    v22 = v10 != 0x8000000000000000 || v11 | v9 | v35;
    outlined consume of Text.Suffix.Storage(v22, 0, 0x8000000000000000);
    v21 = 0;
    if (!v18)
      goto LABEL_27;
  }
  else
  {
    v38 = (uint64_t)v8;
    v39 = v7;
    v37[0] = 0uLL;
    outlined copy of Text.Suffix.Storage(v35, v9, v10);
    default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
    v21 = (void *)Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
    outlined consume of Text.Storage(v35, v9, v10 & 1);
    swift_bridgeObjectRelease();
    if (!v18)
      goto LABEL_27;
  }
  v38 = (uint64_t)v8;
  v39 = v7;
  v23 = v18;
  if (EnvironmentValues.foregroundColor.getter())
  {
    v24 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    v25 = swift_retain();
    v26 = UIColor.init(_:)(v25);
    v41 = v24;
    v38 = (uint64_t)v26;
    NSMutableAttributedString.addUniformAttribute(_:value:)();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
  }
  if (v21)
    objc_msgSend(v23, sel_appendAttributedString_, v21);
  v27 = objc_msgSend(a1, sel_searchField);
  if (v27)
  {
    v28 = v27;
    v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3498]), sel_initWithAttributedString_, v23);
    objc_msgSend(v28, sel_setAttributedText_, v29);

    a3 = v34;
LABEL_27:

    *v15 = a2;
    v15[1] = a3;
    swift_bridgeObjectRelease();
    v30 = *v12;
    v31 = v12[1];
    v32 = v12[2];
    *v12 = v35;
    v12[1] = v9;
    v12[2] = v10;
    v12[3] = v11;
    swift_bridgeObjectRetain();
    outlined consume of Text.Suffix.Storage(v30, v31, v32);
    return;
  }

  __break(1u);
}

id closure #1 in UIKitSearchBarCoordinator.updateTokensIfNeeded(_:tokens:platformTokens:)(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v27;
  _OWORD v28[4];
  uint64_t v29;

  v7 = a4 & 1;
  v8 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (id *)((char *)&v27 - v14);
  PlatformItemCollection.subscript.getter(a1, a3, v7, (uint64_t)&v27 - v14);
  if (*v15)
  {
    v16 = objc_msgSend(*v15, sel_string);
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v18;

    v20 = (id)PlatformItemList.Item.image.getter();
    v21 = (void *)MEMORY[0x18D75CC88](v17, v19);
    swift_bridgeObjectRelease();
    v22 = objc_msgSend((id)objc_opt_self(), sel_tokenWithIcon_text_, v20, v21);

    outlined init with copy of AnyToken(a2, (uint64_t)v28);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    type metadata accessor for UIKitSearchBarCoordinator.RepresentedToken(0);
    v23 = swift_allocObject();
    v24 = v28[3];
    *(_OWORD *)(v23 + 48) = v28[2];
    *(_OWORD *)(v23 + 64) = v24;
    *(_QWORD *)(v23 + 80) = v29;
    v25 = v28[1];
    *(_OWORD *)(v23 + 16) = v28[0];
    *(_OWORD *)(v23 + 32) = v25;
    outlined init with take of TableCellFormula((uint64_t)v11, v23+ OBJC_IVAR____TtCC7SwiftUI25UIKitSearchBarCoordinatorP33_9E78780A6F2626BA9019200B48F4A36B16RepresentedToken_platformItem, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    objc_msgSend(v22, sel_setRepresentedObject_, v23);

    swift_release();
  }
  else
  {
    v22 = 0;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  return v22;
}

uint64_t closure #1 in UIKitSearchBarCoordinator.primaryActionTriggered(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v2 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (unsigned __int8 *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (unsigned __int8 *)&v17 - v8;
  v10 = type metadata accessor for SearchFieldConfiguration(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_configuration;
  swift_beginAccess();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v15, 1, v10);
  if (!(_DWORD)result)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v15, (uint64_t)v14, type metadata accessor for SearchFieldConfiguration);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8]();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v9, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    if (*v5 != 2)
      *v5 = 0;
    if ((specialized static SearchFieldState.== infix(_:_:)(v9, v5) & 1) == 0)
      dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, type metadata accessor for SearchFieldConfiguration);
  }
  return result;
}

uint64_t closure #1 in UIKitSearchBarCoordinator.searchBar(_:textDidChange:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  id v29;
  id v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  id v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  uint64_t v53;
  char *v54;
  Swift::String v55;
  void (*v56)(char *, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  void *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  _OWORD v79[2];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;

  v8 = type metadata accessor for SearchAttributedString();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AttributedString();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v62 = (char *)&v58 - v19;
  v59 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v59, v20);
  v65 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, v22, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v58 = v23;
  MEMORY[0x1E0C80A78](v23, v24);
  v60 = (uint64_t)&v58 - v25;
  v71 = type metadata accessor for SearchFieldConfiguration(0);
  v70 = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71, v26);
  v69 = (uint64_t)&v58 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = a1;
  v28 = (uint64_t *)(a1 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldText);
  *v28 = a2;
  v28[1] = (uint64_t)a3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v29 = objc_msgSend(a4, sel_searchTextField);
  v30 = objc_msgSend(v29, sel_tokens);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISearchToken);
  v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v31 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v32 = result;
  }
  else
  {
    v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v68 = v12;
  v67 = v16;
  v66 = v13;
  v64 = a3;
  v63 = v11;
  v61 = a2;
  if (v32)
  {
    if (v32 >= 1)
    {
      v34 = 0;
      v35 = (char *)MEMORY[0x1E0DEE9D8];
      v36 = MEMORY[0x1E0DEE9B8] + 8;
      while (1)
      {
        if ((v31 & 0xC000000000000001) != 0)
          v37 = (id)MEMORY[0x18D75E3BC](v34, v31);
        else
          v37 = *(id *)(v31 + 8 * v34 + 32);
        v38 = v37;
        if (objc_msgSend(v37, sel_representedObject))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v79, 0, sizeof(v79));
        }
        outlined init with take of Image.Resolved?((uint64_t)v79, (uint64_t)&v74, (unint64_t *)&lazy cache variable for type metadata for Any?, v36);
        if (*((_QWORD *)&v75 + 1))
        {
          type metadata accessor for UIKitSearchBarCoordinator.RepresentedToken(0);
          if ((swift_dynamicCast() & 1) != 0)
          {
            outlined init with copy of AnyToken(v73 + 16, (uint64_t)&v80);

            swift_release();
            if (*((_QWORD *)&v81 + 1))
              goto LABEL_20;
            goto LABEL_6;
          }
        }
        else
        {
          outlined destroy of TableRowList?((uint64_t)&v74, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
        }
        v80 = 0u;
        v81 = 0u;
        v82 = 0u;
        v83 = 0u;
        v84 = 0;

        if (*((_QWORD *)&v81 + 1))
        {
LABEL_20:
          v76 = v82;
          v77 = v83;
          v78 = v84;
          v75 = v81;
          v74 = v80;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v35 + 2) + 1, 1, v35);
          v40 = *((_QWORD *)v35 + 2);
          v39 = *((_QWORD *)v35 + 3);
          if (v40 >= v39 >> 1)
            v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v35);
          *((_QWORD *)v35 + 2) = v40 + 1;
          v41 = &v35[72 * v40];
          *((_OWORD *)v41 + 2) = v74;
          v42 = v75;
          v43 = v76;
          v44 = v77;
          *((_QWORD *)v41 + 12) = v78;
          *((_OWORD *)v41 + 4) = v43;
          *((_OWORD *)v41 + 5) = v44;
          *((_OWORD *)v41 + 3) = v42;
          goto LABEL_7;
        }
LABEL_6:
        outlined destroy of TableRowList?((uint64_t)&v80, (uint64_t)&lazy cache variable for type metadata for AnyToken?, (uint64_t)&type metadata for AnyToken, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
LABEL_7:
        if (v32 == ++v34)
          goto LABEL_26;
      }
    }
    __break(1u);
  }
  else
  {
    v35 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_26:
    swift_bridgeObjectRelease_n();
    v45 = v72 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_configuration;
    swift_beginAccess();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v45, 1, v71))
    {
      return swift_bridgeObjectRelease();
    }
    else
    {
      v46 = v69;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v45, v69, type metadata accessor for SearchFieldConfiguration);
      v47 = v60;
      outlined init with copy of SearchFieldConfiguration.Data?(v46, v60, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
      v48 = (uint64_t)v65;
      MEMORY[0x18D75B9C8](v58);
      v49 = v48 + *(int *)(v59 + 36);
      v50 = v66;
      v51 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
      v52 = v62;
      v53 = v68;
      v51(v62, v49, v68);
      v54 = v63;
      v51(v63, (uint64_t)v52, v53);
      v55._countAndFlagsBits = v61;
      v55._object = v64;
      SearchAttributedString.update(tokens:text:)((Swift::OpaquePointer)v35, v55);
      swift_bridgeObjectRelease();
      v56 = *(void (**)(char *, uint64_t))(v50 + 8);
      v56(v52, v53);
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v52, v54, v53);
      v57 = v67;
      v51(v67, v49, v53);
      (*(void (**)(uint64_t, char *, uint64_t))(v50 + 24))(v49, v52, v53);
      SearchFieldState.textDidChange(from:)();
      v56(v52, v53);
      v56(v57, v53);
      dispatch thunk of AnyLocation.set(_:transaction:)();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v48, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
      outlined destroy of TableRowList?(v47, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t)type metadata accessor for SearchFieldState, (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v69, type metadata accessor for SearchFieldConfiguration);
    }
  }
  return result;
}

Swift::Void __swiftcall UIKitSearchBarCoordinator.searchBarTextDidBeginEditing(_:)(UISearchBar *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  char v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1;
  v4 = v1 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_delegate;
  if (MEMORY[0x18D760234](v4))
  {
    v5 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(v2, ObjectType, v5);
    swift_unknownObjectRelease();
  }
  else
  {
    v7 = 1;
  }
  v8 = -[UISearchBar traitCollection](a1, sel_traitCollection);
  v9 = objc_msgSend(v8, sel_horizontalSizeClass);

  v10 = -[UISearchBar traitCollection](a1, sel_traitCollection);
  v11 = objc_msgSend(v10, sel_userInterfaceIdiom);

  v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v9;
  *(_QWORD *)(v13 + 32) = v11;
  *(_BYTE *)(v13 + 40) = v7 & 1;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  swift_release();
}

uint64_t closure #1 in UIKitSearchBarCoordinator.searchBarTextDidBeginEditing(_:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _BYTE *v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v33[4];
  int v34;
  uint64_t v35;

  v35 = a2;
  v7 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v33[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v33[-v13];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = &v33[-v17];
  v19 = type metadata accessor for SearchFieldConfiguration(0);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = &v33[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = a1 + 16;
  swift_beginAccess();
  v25 = MEMORY[0x18D760234](v24);
  if (!v25)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, 1, 1, v19);
    return outlined destroy of TableRowList?((uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  }
  v26 = (void *)v25;
  v34 = a4;
  v27 = v25 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_configuration;
  swift_beginAccess();
  outlined init with copy of SearchFieldConfiguration.Data?(v27, (uint64_t)v18, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);

  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
    return outlined destroy of TableRowList?((uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined init with take of TableCellFormula((uint64_t)v18, (uint64_t)v23, type metadata accessor for SearchFieldConfiguration);
  swift_beginAccess();
  v28 = (_BYTE *)MEMORY[0x18D760234](v24);
  if (v28)
  {
    v29 = v28[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_placement];

    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8]();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    v30 = specialized SearchSuggestionsPlacement.Role.init(sizeClass:idiom:placement:)(v35, a3, v29);
    if (v30 != 2)
      v10[1] = v30 & 1;
    if ((v34 & 1) != 0)
      v30 = static Animation.default.getter();
    MEMORY[0x1E0C80A78](v30, v31);
    *(_QWORD *)&v33[-16] = v10;
    withAnimation<A>(_:_:)();
    swift_release();
    if ((specialized static SearchFieldState.== infix(_:_:)(v14, v10) & 1) == 0)
      dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v23, type metadata accessor for SearchFieldConfiguration);
}

void closure #1 in closure #1 in closure #1 in UIKitSearchBarCoordinator.searchBarTextDidBeginEditing(_:)(_BYTE *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  char v7;
  uint64_t v8;

  v2 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*a1 & 1) == 0)
  {
    v6 = a1[2];
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)a1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    if (v6 == 2)
    {
      v6 = v5[3];
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
      if (v6 == 2)
      {
        v7 = 0;
LABEL_7:
        *a1 = v7;
        a1[*(int *)(v2 + 40)] = 1;
        return;
      }
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    }
    v7 = v6 & 1;
    goto LABEL_7;
  }
}

uint64_t closure #1 in UIKitSearchBarCoordinator.searchBarTextDidEndEditing(_:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[16];

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v19[-v6];
  v8 = type metadata accessor for SearchFieldConfiguration(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  v13 = MEMORY[0x18D760234](a1 + 16);
  if (!v13)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    return outlined destroy of TableRowList?((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  }
  v14 = (void *)v13;
  v15 = v13 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_configuration;
  swift_beginAccess();
  outlined init with copy of SearchFieldConfiguration.Data?(v15, (uint64_t)v7, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);

  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of TableRowList?((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v16 = outlined init with take of TableCellFormula((uint64_t)v7, (uint64_t)v12, type metadata accessor for SearchFieldConfiguration);
  if ((a2 & 1) != 0)
    v16 = static Animation.default.getter();
  MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)&v19[-16] = v12;
  withAnimation<A>(_:_:)();
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, type metadata accessor for SearchFieldConfiguration);
}

uint64_t closure #1 in closure #1 in UIKitSearchBarCoordinator.searchBarTextDidEndEditing(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v9;

  v0 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (unsigned __int8 *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (unsigned __int8 *)&v9 - v6;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8]();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v7, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  SearchFieldState.endEditing()();
  if ((specialized static SearchFieldState.== infix(_:_:)(v7, v3) & 1) == 0)
    dispatch thunk of AnyLocation.set(_:transaction:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
}

uint64_t closure #1 in UIKitSearchBarCoordinator.searchBarCancelButtonClicked(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = &v17[-v4];
  v6 = type metadata accessor for SearchFieldConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  v11 = MEMORY[0x18D760234](a1 + 16);
  if (v11)
  {
    v12 = (void *)v11;
    v13 = v11 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_configuration;
    swift_beginAccess();
    outlined init with copy of SearchFieldConfiguration.Data?(v13, (uint64_t)v5, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);

    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      v14 = outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)v10, type metadata accessor for SearchFieldConfiguration);
      MEMORY[0x1E0C80A78](v14, v15);
      *(_QWORD *)&v17[-16] = v10;
      static Animation.default.getter();
      withAnimation<A>(_:_:)();
      swift_release();
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for SearchFieldConfiguration);
    }
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }
  return outlined destroy of TableRowList?((uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
}

uint64_t closure #1 in closure #1 in UIKitSearchBarCoordinator.searchBarCancelButtonClicked(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t (*v25)(uint64_t);
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  int v37;
  void (*v38)(char *, uint64_t);
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = type metadata accessor for AttributedString.CharacterView();
  v48 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49, v2);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttributedString();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v40 - v12;
  v14 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v14, v15);
  v41 = (uint64_t)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v40 - v19;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (unsigned __int8 *)&v40 - v23;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, v25, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v42 = a1;
  MEMORY[0x18D75B9C8]();
  v43 = v24;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v24, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  *v20 = 2;
  AttributedString.init(stringLiteral:)();
  v45 = v14;
  v26 = &v20[*(int *)(v14 + 36)];
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v26, v5);
  v47 = v6;
  v27 = *(void (**)(char *, char *, uint64_t))(v6 + 24);
  v44 = v13;
  v27(v26, v13, v5);
  v46 = v9;
  AttributedString.characters.getter();
  v28 = AttributedString.CharacterView._count.getter();
  v29 = *(void (**)(char *, uint64_t))(v48 + 8);
  v30 = v49;
  v29(v4, v49);
  AttributedString.characters.getter();
  v31 = AttributedString.CharacterView._count.getter();
  result = ((uint64_t (*)(char *, uint64_t))v29)(v4, v30);
  v33 = v31 - v28;
  if (__OFSUB__(v31, v28))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  if (v33 < 0)
  {
    v34 = __OFSUB__(0, v33);
    v33 = v28 - v31;
    if (v34)
      goto LABEL_19;
  }
  if (v33 != 1 || v31 < 1 || *v20 == 2)
    goto LABEL_11;
  v35 = v20[2];
  v36 = v41;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v20, v41, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  if (v35 == 2)
  {
    v37 = *(unsigned __int8 *)(v36 + 3);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v36, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    if (v37 == 2 || (v37 & 1) == 0)
      goto LABEL_11;
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v36, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    if ((v35 & 1) == 0)
      goto LABEL_11;
  }
  *v20 = 1;
LABEL_11:
  v38 = *(void (**)(char *, uint64_t))(v47 + 8);
  v38(v44, v5);
  v38(v46, v5);
  if ((v20[8] & 1) == 0)
  {
    *((_DWORD *)v20 + 1) = 0;
    v20[8] = 1;
  }
  v20[*(int *)(v45 + 40)] = 0;
  v39 = v43;
  if ((specialized static SearchFieldState.== infix(_:_:)(v43, (unsigned __int8 *)v20) & 1) == 0)
    dispatch thunk of AnyLocation.set(_:transaction:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
}

uint64_t specialized UIKitSearchScopeCoordinating<>.onChange(selectedScope:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];

  v2 = result;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_tokenScopes);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_scopes);
    v4 = *(_QWORD *)(v3 + 16);
  }
  if ((result & 0x8000000000000000) == 0 && v4 > result)
  {
    result = type metadata accessor for PlatformItemList.Item();
    v6 = v3
       + ((*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * v2;
    v7 = *(_QWORD *)(v6 + 408);
    if (v7 >= 2)
    {
      v20[1] = v20;
      v8 = *(_BYTE *)(v6 + 464);
      v10 = *(_QWORD *)(v6 + 448);
      v9 = *(_QWORD *)(v6 + 456);
      v12 = *(_QWORD *)(v6 + 432);
      v11 = *(_QWORD *)(v6 + 440);
      v14 = *(_QWORD *)(v6 + 416);
      v13 = *(_QWORD *)(v6 + 424);
      v15 = *(_QWORD *)(v6 + 400);
      MEMORY[0x1E0C80A78](result, v5);
      MEMORY[0x1E0C80A78](v16, v17);
      LOBYTE(v18) = v8;
      outlined consume of PlatformItemList.Item.SelectionBehavior?(v15, v7, v14, v13, v12, v11, v10, v9, v18, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
      outlined copy of AppIntentExecutor?(v7);
      static Update.dispatchImmediately<A>(_:)();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
      LOBYTE(v19) = v8;
      return outlined consume of PlatformItemList.Item.SelectionBehavior?(v15, v7, v14, v13, v12, v11, v10, v9, v19, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    }
  }
  return result;
}

id UIKitSearchBarCoordinator.init()()
{
  _BYTE *v0;
  objc_class *ObjectType;
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  objc_super v10;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = &v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_triggerSubmission];
  *v2 = 0;
  v2[1] = 0;
  v3 = &v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_configuration];
  v4 = type metadata accessor for SearchFieldConfiguration(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_scopes] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_tokenScopes] = v5;
  v6 = &v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar];
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_QWORD *)v6 + 10) = 0;
  v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_placement] = 2;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_isViewUpdating] = 0;
  v7 = &v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldText];
  *v7 = 0;
  v7[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldTokens] = v5;
  v8 = &v0[OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldSuffix];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_OWORD *)v8 + 1) = xmmword_187BF9FB0;
  v10.receiver = v0;
  v10.super_class = ObjectType;
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t UIKitSearchBarCoordinator.__ivar_destroyer()
{
  uint64_t v0;

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_triggerSubmission));
  outlined destroy of TableRowList?(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_configuration, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of BoundInputsView?(*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar), *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 16), *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 24), *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 32));
  outlined destroy of weak FallbackResponderProvider?(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_delegate);
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined consume of Text.Suffix.Storage(*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldSuffix), *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldSuffix + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldSuffix + 16));
}

uint64_t ObjC metadata update function for UIKitSearchBarCoordinator()
{
  return type metadata accessor for UIKitSearchBarCoordinator(0);
}

uint64_t type metadata accessor for UIKitSearchBarCoordinator(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitSearchBarCoordinator);
}

void type metadata completion function for UIKitSearchBarCoordinator()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t ObjC metadata update function for UIKitSearchBarCoordinator.RepresentedToken()
{
  return type metadata accessor for UIKitSearchBarCoordinator.RepresentedToken(0);
}

uint64_t type metadata accessor for UIKitSearchBarCoordinator.RepresentedToken(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitSearchBarCoordinator.RepresentedToken);
}

uint64_t type metadata completion function for UIKitSearchBarCoordinator.RepresentedToken()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PlatformItemList.Item();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void static LazyPlatformItemWriter._makeView(modifier:inputs:body:)()
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(2u);
  type metadata accessor for LazyPlatformItemWriter();
}

void sub_1870B740C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int OffsetAttribute2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v7 = *(_QWORD *)(*(_QWORD *)(v1 - 8) + 64);
  *(_QWORD *)(v0 + 152) = v4;
  *(_QWORD *)(v0 + 160) = v3;
  if (v7)
    closure #1 in static LazyPlatformItemWriter._makeView(modifier:inputs:body:)();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v9 = *(_QWORD *)(v5 + 128);
  v11 = *(_QWORD *)(v5 + 152);
  v10 = *(_QWORD *)(v5 + 160);
  v12 = *(_DWORD *)(v6 - 208);
  v13 = *(_DWORD *)(v6 - 136);
  *(_QWORD *)(v0 + 272) = *(_QWORD *)(v5 + 112);
  *(_DWORD *)(v0 + 280) = v12;
  *(_QWORD *)(v0 + 288) = v9;
  *(_OWORD *)(v0 + 296) = *(_OWORD *)(v5 + 136);
  *(_QWORD *)(v0 + 312) = v11;
  *(_QWORD *)(v0 + 320) = v10;
  *(_OWORD *)(v0 + 328) = *(_OWORD *)(v5 + 168);
  *(_QWORD *)(v0 + 344) = *(_QWORD *)(v5 + 184);
  *(_DWORD *)(v0 + 352) = v13;
  PlatformItemListGenerator.init(flags:content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)(v0 + 272), 1, v0 + 360);
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v0 + 360);
  v14 = *(_DWORD *)(v0 + 368);
  v15 = *(_QWORD *)(v0 + 376);
  *(_QWORD *)(v0 + 136) = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v0 + 144) = v15;
  v16 = *(_QWORD *)(v5 + 56);
  *(_QWORD *)(v0 + 120) = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v0 + 128) = v16;
  LODWORD(v16) = *(_DWORD *)(v0 + 384);
  *(_DWORD *)(v0 + 36) = *(_DWORD *)(v0 + 456);
  *(_DWORD *)(v0 + 40) = v16;
  *(_DWORD *)(v0 + 32) = *(unsigned __int8 *)(v0 + 460);
  v17 = *(_DWORD *)(v0 + 464);
  *(_DWORD *)(v0 + 24) = v14;
  *(_DWORD *)(v0 + 28) = v17;
  *(_OWORD *)v0 = *(_OWORD *)(v5 + 72);
  *(_DWORD *)(v0 + 360) = *(_DWORD *)(v0 + 88);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  *(_QWORD *)(v0 + 64) = v1;
  *(_QWORD *)(v0 + 72) = v2;
  closure #2 in static LazyPlatformItemWriter._makeView(modifier:inputs:body:)();
}

void sub_1870B7588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_DWORD *)(v9 + 84) = AGGraphCreateOffsetAttribute2();
  *(_QWORD *)(v9 + 360) = *(_QWORD *)(v9 + 240);
  *(_DWORD *)(v9 + 368) = *(_DWORD *)(v9 + 212);
  *(_QWORD *)(v9 + 376) = *(_QWORD *)(v9 + 232);
  *(_DWORD *)(v9 + 384) = *(_DWORD *)(v9 + 208);
  *(_DWORD *)(v9 + 388) = *(_DWORD *)(v9 + 204);
  *(_DWORD *)(v9 + 392) = *(_DWORD *)(v9 + 200);
  *(_DWORD *)(v9 + 396) = *(_DWORD *)(v9 + 196);
  v16 = *(_QWORD *)(v9 + 224);
  *(_QWORD *)(v12 + 40) = *(_QWORD *)(v9 + 216);
  *(_QWORD *)(v12 + 48) = v16;
  *(_DWORD *)(v9 + 416) = *(_DWORD *)(v9 + 192);
  *(_DWORD *)(v9 + 420) = *(_DWORD *)(v9 + 188);
  *(_DWORD *)(v9 + 424) = *(_DWORD *)(v9 + 184);
  *(_DWORD *)(v9 + 428) = *(_DWORD *)(v9 + 180);
  *(_DWORD *)(v9 + 432) = *(_DWORD *)(v9 + 176);
  *(_DWORD *)(v9 + 436) = *(_DWORD *)(v9 + 172);
  *(_DWORD *)(v9 + 440) = *(_DWORD *)(v9 + 168);
  v17 = _ViewInputs.environment.getter();
  *(_DWORD *)(v9 + 80) = v17;
  *(_QWORD *)(v9 + 56) = &a9;
  *(_DWORD *)(v9 + 368) = *(_DWORD *)(v9 + 24);
  *(_QWORD *)(v9 + 360) = *(_QWORD *)(v9 + 48);
  v18 = *(_QWORD *)(v9 + 136);
  *(_QWORD *)(v9 + 376) = *(_QWORD *)(v9 + 144);
  *(_QWORD *)(v12 + 32) = v18;
  *(_QWORD *)(v12 + 40) = v14;
  *(_QWORD *)(v12 + 48) = v15;
  v19 = *(_QWORD *)(v9 + 120);
  *(_QWORD *)(v12 + 56) = *(_QWORD *)(v9 + 128);
  *(_QWORD *)(v12 + 64) = v19;
  *(_OWORD *)(v12 + 72) = *(_OWORD *)v9;
  *(_QWORD *)(v12 + 88) = v13;
  *(_DWORD *)(v9 + 384) = *(_DWORD *)(v9 + 40);
  *(_DWORD *)(v9 + 456) = *(_DWORD *)(v9 + 36);
  *(_BYTE *)(v9 + 460) = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 464) = *(_DWORD *)(v9 + 28);
  MEMORY[0x1E0C80A78](v17, v20);
  *(_QWORD *)(v9 + 40) = &v21;
  *(_QWORD *)(v9 + 272) = &type metadata for ActionPlatformItemListFlags;
  *(_QWORD *)(v9 + 280) = v10;
  *(_QWORD *)(v9 + 288) = &protocol witness table for ActionPlatformItemListFlags;
  *(_QWORD *)(v9 + 296) = v11;
  type metadata accessor for PlatformItemListGenerator();
}

void sub_1870B76C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v10 - 16) = a1;
  *(_QWORD *)(v10 - 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListGenerator<A, B>, a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  v15 = v14;
  *(_QWORD *)(v9 + 88) = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9 + 360, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_1, *(_QWORD *)(v9 + 40), a1, MEMORY[0x1E0DEDCE8], v15, MEMORY[0x1E0DEDD18], v16);
  v17 = *(void **)(v9 + 360);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  v18 = swift_release();
  *(_QWORD *)(v9 + 56) = &a9;
  v19 = *(_DWORD *)(v9 + 208);
  *(_DWORD *)(v9 + 368) = *(_DWORD *)(v9 + 212);
  v20 = *(_DWORD *)(v9 + 272);
  v21 = *(_QWORD *)(v9 + 232);
  *(_QWORD *)(v9 + 360) = *(_QWORD *)(v9 + 240);
  *(_QWORD *)(v9 + 376) = v21;
  *(_DWORD *)(v9 + 384) = v19;
  *(_DWORD *)(v9 + 388) = *(_DWORD *)(v9 + 204);
  *(_DWORD *)(v9 + 392) = *(_DWORD *)(v9 + 200);
  *(_DWORD *)(v9 + 396) = *(_DWORD *)(v9 + 196);
  v22 = *(_QWORD *)(v9 + 224);
  *(_QWORD *)(v12 + 40) = *(_QWORD *)(v9 + 216);
  *(_QWORD *)(v12 + 48) = v22;
  *(_DWORD *)(v9 + 416) = *(_DWORD *)(v9 + 192);
  *(_DWORD *)(v9 + 420) = *(_DWORD *)(v9 + 188);
  *(_DWORD *)(v9 + 424) = *(_DWORD *)(v9 + 184);
  *(_DWORD *)(v9 + 428) = *(_DWORD *)(v9 + 180);
  *(_DWORD *)(v9 + 432) = *(_DWORD *)(v9 + 176);
  *(_DWORD *)(v9 + 436) = *(_DWORD *)(v9 + 172);
  *(_DWORD *)(v9 + 440) = *(_DWORD *)(v9 + 168);
  *(_DWORD *)(v9 + 252) = *(_DWORD *)(v9 + 80);
  *(_DWORD *)(v9 + 256) = v20;
  *(_DWORD *)(v9 + 260) = *(_DWORD *)(v9 + 84);
  MEMORY[0x1E0C80A78](v18, v23);
  v24 = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v9 + 272) = *(_QWORD *)(v9 + 152);
  *(_QWORD *)(v9 + 280) = v24;
  v25 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v9 + 288) = *(_QWORD *)(v9 + 160);
  *(_QWORD *)(v9 + 296) = v25;
  type metadata accessor for LazyPlatformItemWriter.UpdateEnvironment();
}

uint64_t sub_1870B7864(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)(v3 - 16) = a1;
  *(_QWORD *)(v3 - 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyPlatformItemWriter<A, B>.UpdateEnvironment, a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<EnvironmentValues>, MEMORY[0x1E0CE3E78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  v7 = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 252, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), v2, a1, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  _ViewInputs.environment.setter();
  v9 = *(_DWORD *)(v1 + 368);
  v10 = *(_QWORD *)(v1 + 376);
  v11 = *(_QWORD *)(v4 + 40);
  v12 = *(_QWORD *)(v4 + 48);
  v13 = *(_DWORD *)(v1 + 440);
  *(_QWORD *)(v1 + 272) = *(_QWORD *)(v1 + 360);
  *(_DWORD *)(v1 + 280) = v9;
  *(_QWORD *)(v1 + 288) = v10;
  *(_OWORD *)(v1 + 296) = *(_OWORD *)(v4 + 24);
  *(_QWORD *)(v1 + 312) = v11;
  *(_QWORD *)(v1 + 320) = v12;
  *(_OWORD *)(v1 + 328) = *(_OWORD *)(v4 + 56);
  *(_QWORD *)(v1 + 344) = *(_QWORD *)(v4 + 72);
  *(_DWORD *)(v1 + 352) = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v14 = swift_bridgeObjectRetain();
  (*(void (**)(uint64_t, uint64_t))(v1 + 112))(v14, v1 + 272);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void closure #1 in static LazyPlatformItemWriter._makeView(modifier:inputs:body:)()
{
  type metadata accessor for LazyPlatformItemWriter();
}

uint64_t sub_1870B7A74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = v2 + *(int *)(a1 + 56);
  v7[2] = a1;
  v8 = v1;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v1, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v9;
}

void closure #2 in static LazyPlatformItemWriter._makeView(modifier:inputs:body:)()
{
  type metadata accessor for LazyPlatformItemWriter();
}

uint64_t sub_1870B7B08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[14];

  v6[2] = a1;
  v2 = MEMORY[0x1E0DEAFA0];
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v6, v2, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v6[4];
}

_BYTE *LazyPlatformItemWriter.UpdateEnvironment.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X4>, _QWORD *a3@<X8>)
{
  uint64_t *Value;
  uint64_t v7;
  uint64_t v8;
  _BYTE *result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  Value = (uint64_t *)AGGraphGetValue();
  v7 = *Value;
  v8 = Value[1];
  v12 = *Value;
  v13 = v8;
  swift_retain();
  swift_retain();
  result = (_BYTE *)AGGraphGetValue();
  if (*result == 1)
  {
    v10 = AGCreateWeakAttribute();
    v11 = 0;
    result = (_BYTE *)specialized EnvironmentValues.subscript.setter(&v10, a1, a1, a2);
    v7 = v12;
    v8 = v13;
  }
  *a3 = v7;
  a3[1] = v8;
  return result;
}

_BYTE *protocol witness for Rule.value.getter in conformance LazyPlatformItemWriter<A, B>.UpdateEnvironment@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return LazyPlatformItemWriter.UpdateEnvironment.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), a2);
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LazyPlatformItemWriter<A, B>()
{
  static LazyPlatformItemWriter._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LazyPlatformItemWriter<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyPlatformItemWriter<A, B>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance LazySearchScopesKey(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = -1;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, _OWORD *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[4];
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[4];
  uint64_t v15;
  uint64_t v16;

  v3 = MEMORY[0x1E0DEE9D8];
  v16 = MEMORY[0x1E0DEE9D8];
  v4 = *(_QWORD *)(a1 + 16);
  v5 = swift_bridgeObjectRetain();
  if (v4)
  {
    v6 = 0;
    v7 = v5 + 32;
    do
    {
      outlined init with copy of AnyToken(v7, (uint64_t)v11);
      v13 = v6;
      v14[2] = v11[2];
      v14[3] = v11[3];
      v15 = v12;
      v14[0] = v11[0];
      v14[1] = v11[1];
      v8 = a2(v6, v14);
      v9 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v13, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: AnyToken));
      if (v8)
      {
        MEMORY[0x18D75CF58](v9);
        if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v6;
      v7 += 72;
    }
    while (v4 != v6);
    v3 = v16;
  }
  swift_bridgeObjectRelease();
  return v3;
}

void specialized UIKitSearchBarCoordinator.updateTextColor(_:in:)(void *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  _BOOL8 v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  char v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  Class isa;
  _OWORD v28[2];
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  v3 = a2[1];
  *(_QWORD *)&v30 = *a2;
  *((_QWORD *)&v30 + 1) = v3;
  v4 = EnvironmentValues.foregroundColor.getter();
  if (v4)
  {
    v5 = v4;
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>);
    swift_retain_n();
    if (v3)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    if ((v31 & 0x8000000000000000) != 0)
    {
      v8 = (_QWORD)v31 != 0x8000000000000000
        || (*((_QWORD *)&v31 + 1) | *((_QWORD *)&v30 + 1) | (unint64_t)v30) != 0;
      outlined consume of Text.Suffix.Storage(v8, 0, 0x8000000000000000);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      v6 = UIColor.init(_:)(v5);
      goto LABEL_15;
    }
    outlined consume of Text.Storage(v30, *((uint64_t *)&v30 + 1), v31 & 1);
    swift_release();
    swift_bridgeObjectRelease();
  }
  v6 = 0;
LABEL_15:
  v9 = objc_msgSend(a1, sel_searchTextField);
  v10 = (id)*MEMORY[0x1E0DC1140];
  v11 = objc_msgSend(v9, sel_defaultTextAttributes);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  v12 = MEMORY[0x1E0DEE9B8];
  v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(_QWORD *)(v13 + 16) && (v14 = specialized __RawDictionaryStorage.find<A>(_:)(v10), (v15 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v13 + 56) + 32 * v14, (uint64_t)&v30);
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
  }

  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v31 + 1))
  {
    outlined destroy of TableRowList?((uint64_t)&v30, (uint64_t)&lazy cache variable for type metadata for Any?, v12 + 8, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    if (v6)
      goto LABEL_28;
    v17 = 0;
LABEL_34:

    return;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  v16 = *(void **)&v28[0];
  if (swift_dynamicCast())
    v17 = *(void **)&v28[0];
  else
    v17 = 0;
  if (!v6)
    goto LABEL_34;
  if (v17)
  {
    v18 = v6;
    v19 = v17;
    v20 = static NSObject.== infix(_:_:)();

    if ((v20 & 1) != 0)
    {

      return;
    }
    goto LABEL_29;
  }
LABEL_28:
  v18 = v6;
  v16 = 0;
LABEL_29:
  *((_QWORD *)&v31 + 1) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  *(_QWORD *)&v30 = v18;
  v21 = v18;
  v22 = v9;
  v23 = v10;
  v24 = objc_msgSend(v22, sel_defaultTextAttributes);
  v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v29 = v25;
  if (*((_QWORD *)&v31 + 1))
  {
    outlined init with take of Any(&v30, v28);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v23, isUniquelyReferenced_nonNull_native);
    v29 = v25;

    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of TableRowList?((uint64_t)&v30, (uint64_t)&lazy cache variable for type metadata for Any?, v12 + 8, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v23, v28);

    outlined destroy of TableRowList?((uint64_t)v28, (uint64_t)&lazy cache variable for type metadata for Any?, v12 + 8, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  }
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v22, sel_setDefaultTextAttributes_, isa);

}

uint64_t specialized UIKitSearchBarCoordinator.primaryActionTriggered(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_isViewUpdating) & 1) == 0)
  {
    MEMORY[0x1E0C80A78](result, a2);
    MEMORY[0x1E0C80A78](v3, v4);
    result = static Update.dispatchImmediately<A>(_:)();
    v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_triggerSubmission);
    if (v6)
    {
      MEMORY[0x1E0C80A78](result, v5);
      MEMORY[0x1E0C80A78](v7, v8);
      swift_retain();
      static Update.dispatchImmediately<A>(_:)();
      return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v6);
    }
  }
  return result;
}

uint64_t specialized UIKitSearchBarCoordinator.searchBarTextDidEndEditing(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_delegate;
  if (MEMORY[0x18D760234](v2))
  {
    v3 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType();
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 8))(v1, ObjectType, v3);
    swift_unknownObjectRelease();
  }
  else
  {
    v5 = 1;
  }
  v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  *(_BYTE *)(v7 + 24) = v5 & 1;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  return swift_release();
}

uint64_t specialized UIKitSearchScopeCoordinating<>.updateScopes(_:newScopes:newTokenScopes:customScopeBar:customScopeBarUpdate:)(void *a1, uint64_t a2, int a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id *v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t result;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  id *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  id v78;
  void *v79;
  _QWORD *v80;
  Class isa;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  _QWORD v93[4];
  id v94;
  uint64_t v95;
  id *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  id *v105;
  char *v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  _BYTE v110[88];
  _QWORD v111[11];
  uint64_t v112[11];
  uint64_t v113[12];

  v95 = a8;
  v103 = a7;
  LODWORD(v100) = a3;
  v99 = a2;
  v101 = a1;
  v10 = ~a5;
  v102 = (_QWORD *)a6;
  outlined init with take of Image.Resolved?(a6, (uint64_t)v111, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView);
  v93[1] = v111[5];
  v93[2] = v111[7];
  v93[3] = v111[10];
  v94 = (id)v111[4];
  v11 = type metadata accessor for PlatformItemList.Item();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  *(_QWORD *)&v108 = (char *)v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v107 = (uint64_t)v93 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (id *)((char *)v93 - v20);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)v93 - v24;
  MEMORY[0x1E0C80A78](v26, v27);
  v105 = (id *)((char *)v93 - v28);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (id *)((char *)v93 - v31);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, v33, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v34, v35);
  v97 = (uint64_t)v93 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v40 = (char *)v93 - v39;
  v106 = v25;
  v109 = v12;
  v98 = v11;
  if (v10)
  {
    v96 = v21;
    outlined copy of PlatformItemCollection.Storage(a4, a5 & 1);
    specialized Collection.first.getter(a4, a5 & 1, (uint64_t)v40);
    outlined consume of PlatformItemCollection?(a4, a5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v40, 1, v11) == 1)
    {
      outlined destroy of TableRowList?((uint64_t)v40, (uint64_t)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t)type metadata accessor for PlatformItemList.Item, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    }
    else
    {
      v43 = *((_QWORD *)v40 + 77);
      swift_bridgeObjectRetain();
      result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      if (v43)
      {
        v41 = MEMORY[0x1E0DEE9D8];
        v113[0] = MEMORY[0x1E0DEE9D8];
        v104 = *(_QWORD *)(v43 + 16);
        if (v104)
        {
          v45 = 0;
          while (v45 < *(_QWORD *)(v43 + 16))
          {
            v46 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
            v47 = *(_QWORD *)(v12 + 72);
            outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v43 + v46 + v47 * v45, (uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
            if (*v32)
            {

              outlined init with take of TableCellFormula((uint64_t)v32, v108, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v41 + 16) + 1, 1);
              v41 = v113[0];
              v49 = *(_QWORD *)(v113[0] + 16);
              v48 = *(_QWORD *)(v113[0] + 24);
              if (v49 >= v48 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
                v41 = v113[0];
              }
              *(_QWORD *)(v41 + 16) = v49 + 1;
              result = outlined init with take of TableCellFormula(v108, v41 + v46 + v49 * v47, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
              v25 = v106;
              v12 = v109;
            }
            else
            {
              result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
              v25 = v106;
            }
            if (v104 == ++v45)
            {
              v41 = v113[0];
              goto LABEL_35;
            }
          }
          __break(1u);
          goto LABEL_85;
        }
LABEL_35:
        v42 = v102;
        v50 = v100;
        swift_bridgeObjectRelease();
        if (!*(_QWORD *)(v41 + 16))
        {
          swift_release();
          v41 = 0;
        }
        v21 = v96;
        if (v50 == 0xFF)
          goto LABEL_43;
        goto LABEL_19;
      }
    }
    v41 = 0;
    v42 = v102;
    v21 = v96;
  }
  else
  {
    v41 = 0;
    v42 = v102;
  }
  v50 = v100;
  if ((_BYTE)v100 == 0xFF)
    goto LABEL_43;
LABEL_19:
  v104 = v41;
  v51 = v99;
  outlined copy of PlatformItemCollection.Storage(v99, v50 & 1);
  v52 = v97;
  specialized Collection.first.getter(v51, v50 & 1, v97);
  outlined consume of PlatformItemCollection?(v51, v50);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v52, 1, v98) == 1)
  {
    outlined destroy of TableRowList?(v52, (uint64_t)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t)type metadata accessor for PlatformItemList.Item, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
LABEL_33:
    v54 = 0;
    v41 = v104;
    goto LABEL_44;
  }
  v53 = *(_QWORD *)(v52 + 616);
  swift_bridgeObjectRetain();
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v52, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  if (!v53)
    goto LABEL_33;
  v54 = MEMORY[0x1E0DEE9D8];
  v113[0] = MEMORY[0x1E0DEE9D8];
  v55 = *(_QWORD *)(v53 + 16);
  if (!v55)
  {
    v25 = v106;
LABEL_41:
    v41 = v104;
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v54 + 16))
    {
LABEL_44:
      v63 = v103;
      outlined init with take of Image.Resolved?((uint64_t)v42, (uint64_t)v113, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView);
      if (v113[0])
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_46:
        v64 = OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_scopes;
        if (*(_QWORD *)(*(_QWORD *)(v63 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_scopes) + 16))
        {
          objc_msgSend(v101, sel_setScopeButtonTitles_, 0);
          *(_QWORD *)(v63 + v64) = MEMORY[0x1E0DEE9D8];
          swift_bridgeObjectRelease();
        }
        outlined init with take of Image.Resolved?((uint64_t)v42, (uint64_t)v112, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView);
        if (v112[0])
        {
          outlined init with take of Image.Resolved?((uint64_t)v42, (uint64_t)v110, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView);
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          v65 = v94;
          UIKitSearchBar.updateCustomScopeBarView(_:)((uint64_t)v110);
          outlined retain of BoundInputsView?(v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of BoundInputsView?);
        }
LABEL_83:
        v88 = v63 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar;
        v89 = *(_QWORD *)(v63 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar);
        v109 = *(_QWORD *)(v63 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 8);
        v90 = *(_QWORD *)(v63 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 16);
        v91 = *(_QWORD *)(v88 + 24);
        v92 = *(void **)(v88 + 32);
        v108 = *(_OWORD *)(v88 + 64);
        outlined init with take of Image.Resolved?((uint64_t)v42, v88, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView);
        outlined retain of BoundInputsView?(v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of BoundInputsView?);
        return outlined consume of BoundInputsView?(v89, v109, v90, v91, v92);
      }
      if (v41)
      {
        v66 = v41;
        v105 = (id *)v41;
      }
      else
      {
        if (!v54)
          goto LABEL_46;
        swift_bridgeObjectRetain();
        v66 = v54;
        v105 = (id *)v54;
      }
      v67 = *(_QWORD *)(v66 + 16);
      v100 = v66;
      if (v67)
      {
        v99 = v54;
        v68 = v66 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
        *(_QWORD *)&v108 = *(_QWORD *)(v12 + 72);
        v104 = v41;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v69 = (char *)MEMORY[0x1E0DEE9D8];
        v70 = v67;
        v107 = v67;
        do
        {
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v68, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
          if (*v21)
          {
            v71 = objc_msgSend(*v21, sel_string);
            v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v74 = v73;

            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v69 + 2) + 1, 1, v69);
            v76 = *((_QWORD *)v69 + 2);
            v75 = *((_QWORD *)v69 + 3);
            if (v76 >= v75 >> 1)
              v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v76 + 1, 1, v69);
            *((_QWORD *)v69 + 2) = v76 + 1;
            v77 = &v69[16 * v76];
            *((_QWORD *)v77 + 4) = v72;
            *((_QWORD *)v77 + 5) = v74;
            v12 = v109;
            v67 = v107;
          }
          else
          {
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
          }
          v68 += v108;
          --v70;
        }
        while (v70);
        swift_bridgeObjectRelease();
        v25 = v106;
        v41 = v104;
        v54 = v99;
      }
      else
      {
        swift_bridgeObjectRetain();
        v69 = (char *)MEMORY[0x1E0DEE9D8];
      }
      v78 = objc_msgSend(v101, sel_scopeButtonTitles);
      if (v78
        && (v79 = v78,
            v80 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(),
            v79,
            LOBYTE(v79) = specialized static Array<A>.== infix(_:_:)(v69, v80),
            swift_bridgeObjectRelease(),
            (v79 & 1) != 0))
      {
        swift_bridgeObjectRelease();
        v63 = v103;
        if (!v67)
          goto LABEL_69;
      }
      else
      {
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v101, sel_setScopeButtonTitles_, isa);

        v63 = v103;
        if (!v67)
        {
LABEL_69:
          swift_bridgeObjectRelease();
          v42 = v102;
          if (!v54)
          {
LABEL_81:
            if (v41)
            {
              *(_QWORD *)(v63 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_tokenScopes) = v41;
              swift_bridgeObjectRelease();
            }
            goto LABEL_83;
          }
LABEL_80:
          *(_QWORD *)(v63 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_scopes) = v54;
          swift_bridgeObjectRelease();
          goto LABEL_81;
        }
      }
      v82 = v54;
      v83 = v41;
      v84 = 0;
      v85 = v100 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
      v86 = *(_QWORD *)(v12 + 72);
      do
      {
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v85, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        v87 = v25[634];
        if (v87 == 3)
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        }
        else
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
          if (!v87)
          {
            swift_bridgeObjectRelease();
            objc_msgSend(v101, sel_setSelectedScopeButtonIndex_, v84);
            goto LABEL_79;
          }
        }
        ++v84;
        v85 += v86;
      }
      while (v67 != v84);
      swift_bridgeObjectRelease();
LABEL_79:
      v63 = v103;
      v41 = v83;
      v54 = v82;
      v42 = v102;
      if (!v82)
        goto LABEL_81;
      goto LABEL_80;
    }
    swift_release();
LABEL_43:
    v54 = 0;
    goto LABEL_44;
  }
  v96 = v21;
  v56 = 0;
  v57 = MEMORY[0x1E0DEE9D8];
  while (v56 < *(_QWORD *)(v53 + 16))
  {
    v58 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v59 = *(_QWORD *)(v12 + 72);
    v60 = v105;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v53 + v58 + v59 * v56, (uint64_t)v105, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    if (*v60)
    {

      outlined init with take of TableCellFormula((uint64_t)v60, v107, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v57 + 16) + 1, 1);
      v57 = v113[0];
      v62 = *(_QWORD *)(v113[0] + 16);
      v61 = *(_QWORD *)(v113[0] + 24);
      if (v62 >= v61 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
        v57 = v113[0];
      }
      *(_QWORD *)(v57 + 16) = v62 + 1;
      result = outlined init with take of TableCellFormula(v107, v57 + v58 + v62 * v59, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      v12 = v109;
    }
    else
    {
      result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v60, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    }
    if (v55 == ++v56)
    {
      v54 = v113[0];
      v42 = v102;
      v25 = v106;
      v21 = v96;
      goto LABEL_41;
    }
  }
LABEL_85:
  __break(1u);
  return result;
}

void specialized UIKitSearchBarCoordinator.textFieldDidChangeSelection(_:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  id v8;
  _QWORD v9[11];

  v1 = MEMORY[0x18D760234](v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_searchBar);
  if (v1)
  {
    v2 = (void *)v1;
    v3 = UIKitSearchBarCoordinator.resolvedScopes.getter();
    UIKitSearchBarCoordinator.resolvedTokenScopes.getter();
    v5 = v4;
    v7 = v6;
    outlined init with take of Image.Resolved?(v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView);
    v8 = v2;
    outlined retain of BoundInputsView?(v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of BoundInputsView?);
    specialized UIKitSearchScopeCoordinating<>.updateScopes(_:newScopes:newTokenScopes:customScopeBar:customScopeBarUpdate:)(v8, v3, 1, v5, v7, (uint64_t)v9, v0, (uint64_t)v8);

    outlined consume of PlatformItemCollection?(v5, v7);
    outlined consume of PlatformItemCollection?(v3, 1u);
    outlined retain of BoundInputsView?(v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of BoundInputsView?);

  }
}

uint64_t specialized UIKitSearchScopeCoordinating<>.updateScopes(_:newScopes:newTokenScopes:customScopeBar:customScopeBarUpdate:)(void *a1, uint64_t a2, int a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id *v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  id *v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  id *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  id v84;
  void *v85;
  _QWORD *v86;
  Class isa;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  _QWORD v99[4];
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  char *v105;
  id v106;
  _QWORD *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  id *v111;
  char *v112;
  id *v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116[5];
  uint64_t v117;
  _QWORD v118[11];
  _OWORD v119[5];
  uint64_t v120;
  uint64_t v121[12];

  v101 = a8;
  v108 = a7;
  v104 = a3;
  v103 = a2;
  v106 = a1;
  v11 = ~a5;
  v107 = (_QWORD *)a6;
  outlined init with take of Image.Resolved?(a6, (uint64_t)v118, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView);
  v99[1] = v118[5];
  v99[2] = v118[7];
  v99[3] = v118[10];
  v100 = (id)v118[4];
  v12 = type metadata accessor for PlatformItemList.Item();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  *(_QWORD *)&v114 = (char *)v99 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v113 = (id *)((char *)v99 - v22);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v99 - v25;
  MEMORY[0x1E0C80A78](v27, v28);
  v111 = (id *)((char *)v99 - v29);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (id *)((char *)v99 - v32);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, v34, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v35, v36);
  v105 = (char *)v99 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)v99 - v40;
  v112 = v26;
  v115 = v13;
  v102 = v12;
  if (!v11)
    goto LABEL_16;
  v109 = v16;
  outlined copy of PlatformItemCollection.Storage(a4, a5 & 1);
  specialized Collection.first.getter(a4, a5 & 1, (uint64_t)v41);
  outlined consume of PlatformItemCollection?(a4, a5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v41, 1, v12) == 1)
  {
    outlined destroy of TableRowList?((uint64_t)v41, (uint64_t)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t)type metadata accessor for PlatformItemList.Item, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
LABEL_16:
    v44 = 0;
    v52 = v107;
    v51 = v108;
    v53 = v113;
    v54 = v104;
    goto LABEL_17;
  }
  v42 = *((_QWORD *)v41 + 77);
  swift_bridgeObjectRetain();
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  if (!v42)
    goto LABEL_16;
  v44 = MEMORY[0x1E0DEE9D8];
  v121[0] = MEMORY[0x1E0DEE9D8];
  v110 = *(_QWORD *)(v42 + 16);
  if (v110)
  {
    v45 = 0;
    v46 = (uint64_t)v109;
    while (v45 < *(_QWORD *)(v42 + 16))
    {
      v47 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      v48 = *(_QWORD *)(v13 + 72);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v42 + v47 + v48 * v45, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      if (*v33)
      {

        outlined init with take of TableCellFormula((uint64_t)v33, v46, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v44 + 16) + 1, 1);
        v44 = v121[0];
        v50 = *(_QWORD *)(v121[0] + 16);
        v49 = *(_QWORD *)(v121[0] + 24);
        if (v50 >= v49 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
          v44 = v121[0];
        }
        *(_QWORD *)(v44 + 16) = v50 + 1;
        v46 = (uint64_t)v109;
        result = outlined init with take of TableCellFormula((uint64_t)v109, v44 + v47 + v50 * v48, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        v26 = v112;
        v13 = v115;
      }
      else
      {
        result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        v26 = v112;
      }
      if (v110 == ++v45)
      {
        v44 = v121[0];
        goto LABEL_35;
      }
    }
    __break(1u);
    goto LABEL_84;
  }
LABEL_35:
  v52 = v107;
  v67 = v108;
  v53 = v113;
  v54 = v104;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v44 + 16))
  {
    swift_release();
    v44 = 0;
  }
  v51 = v67;
LABEL_17:
  v55 = (uint64_t)v105;
  if (v54 == 0xFF)
  {
    v57 = 0;
    goto LABEL_43;
  }
  v110 = v44;
  v56 = v103;
  outlined copy of PlatformItemCollection.Storage(v103, v54 & 1);
  specialized Collection.first.getter(v56, v54 & 1, v55);
  outlined consume of PlatformItemCollection?(v56, v54);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v55, 1, v102) == 1)
  {
    outlined destroy of TableRowList?(v55, (uint64_t)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t)type metadata accessor for PlatformItemList.Item, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
LABEL_33:
    v57 = 0;
    v44 = v110;
LABEL_42:
    v51 = v108;
LABEL_43:
    outlined init with take of Image.Resolved?((uint64_t)v52, (uint64_t)v121, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView);
    if (v121[0])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_45:
      v68 = OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_scopes;
      if (*(_QWORD *)(*(_QWORD *)(v51 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_scopes) + 16))
      {
        objc_msgSend(v106, sel_setScopeButtonTitles_, 0);
        *(_QWORD *)(v51 + v68) = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRelease();
      }
      outlined init with take of Image.Resolved?((uint64_t)v52, (uint64_t)v119, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView);
      if (*(_QWORD *)&v119[0])
      {
        v116[2] = v119[2];
        v116[3] = v119[3];
        v116[4] = v119[4];
        v117 = v120;
        v116[0] = v119[0];
        v116[1] = v119[1];
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        v69 = v100;
        closure #1 in SwiftUISearchController.update(to:)(v116, v101, a9);
        outlined retain of BoundInputsView?(v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of BoundInputsView?);
      }
LABEL_82:
      v94 = v51 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar;
      v95 = *(_QWORD *)(v51 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar);
      v96 = *(_QWORD *)(v51 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 8);
      v97 = *(_QWORD *)(v94 + 24);
      v115 = *(_QWORD *)(v94 + 16);
      v98 = *(void **)(v94 + 32);
      v114 = *(_OWORD *)(v94 + 64);
      outlined init with take of Image.Resolved?((uint64_t)v52, v94, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView);
      outlined retain of BoundInputsView?(v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of BoundInputsView?);
      return outlined consume of BoundInputsView?(v95, v96, v115, v97, v98);
    }
    if (v44)
    {
      v70 = v44;
      v111 = (id *)v44;
    }
    else
    {
      if (!v57)
        goto LABEL_45;
      swift_bridgeObjectRetain();
      v70 = v57;
      v111 = (id *)v57;
    }
    v71 = *(_QWORD *)(v70 + 16);
    v109 = (char *)v70;
    if (v71)
    {
      v105 = (char *)v57;
      v72 = v70 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      *(_QWORD *)&v114 = *(_QWORD *)(v13 + 72);
      v110 = v44;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v73 = (char *)MEMORY[0x1E0DEE9D8];
      v74 = v71;
      do
      {
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v72, (uint64_t)v53, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        if (*v53)
        {
          v75 = v71;
          v76 = objc_msgSend(*v53, sel_string);
          v77 = (uint64_t)v53;
          v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v80 = v79;

          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v77, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v73 + 2) + 1, 1, v73);
          v82 = *((_QWORD *)v73 + 2);
          v81 = *((_QWORD *)v73 + 3);
          if (v82 >= v81 >> 1)
            v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v81 > 1), v82 + 1, 1, v73);
          *((_QWORD *)v73 + 2) = v82 + 1;
          v83 = &v73[16 * v82];
          *((_QWORD *)v83 + 4) = v78;
          *((_QWORD *)v83 + 5) = v80;
          v13 = v115;
          v53 = v113;
          v71 = v75;
        }
        else
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v53, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        }
        v72 += v114;
        --v74;
      }
      while (v74);
      swift_bridgeObjectRelease();
      v26 = v112;
      v44 = v110;
      v57 = (uint64_t)v105;
    }
    else
    {
      swift_bridgeObjectRetain();
      v73 = (char *)MEMORY[0x1E0DEE9D8];
    }
    v84 = objc_msgSend(v106, sel_scopeButtonTitles);
    if (v84
      && (v85 = v84,
          v86 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(),
          v85,
          LOBYTE(v85) = specialized static Array<A>.== infix(_:_:)(v73, v86),
          swift_bridgeObjectRelease(),
          (v85 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      v51 = v108;
      if (!v71)
        goto LABEL_68;
    }
    else
    {
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v106, sel_setScopeButtonTitles_, isa);

      v51 = v108;
      if (!v71)
      {
LABEL_68:
        swift_bridgeObjectRelease();
        v52 = v107;
        if (!v57)
        {
LABEL_80:
          if (v44)
          {
            *(_QWORD *)(v51 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_tokenScopes) = v44;
            swift_bridgeObjectRelease();
          }
          goto LABEL_82;
        }
LABEL_79:
        *(_QWORD *)(v51 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_scopes) = v57;
        swift_bridgeObjectRelease();
        goto LABEL_80;
      }
    }
    v88 = v57;
    v89 = v44;
    v90 = 0;
    v91 = (uint64_t)&v109[(*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)];
    v92 = *(_QWORD *)(v13 + 72);
    do
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v91, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      v93 = v26[634];
      if (v93 == 3)
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      }
      else
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        if (!v93)
        {
          swift_bridgeObjectRelease();
          objc_msgSend(v106, sel_setSelectedScopeButtonIndex_, v90);
          goto LABEL_78;
        }
      }
      ++v90;
      v91 += v92;
    }
    while (v71 != v90);
    swift_bridgeObjectRelease();
LABEL_78:
    v51 = v108;
    v44 = v89;
    v57 = v88;
    v52 = v107;
    if (!v88)
      goto LABEL_80;
    goto LABEL_79;
  }
  v58 = *(_QWORD *)(v55 + 616);
  swift_bridgeObjectRetain();
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v55, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  if (!v58)
    goto LABEL_33;
  v57 = MEMORY[0x1E0DEE9D8];
  v121[0] = MEMORY[0x1E0DEE9D8];
  v59 = *(_QWORD *)(v58 + 16);
  if (!v59)
  {
    v26 = v112;
LABEL_40:
    v44 = v110;
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(v57 + 16))
    {
      swift_release();
      v57 = 0;
    }
    goto LABEL_42;
  }
  v60 = 0;
  v61 = MEMORY[0x1E0DEE9D8];
  while (v60 < *(_QWORD *)(v58 + 16))
  {
    v62 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v63 = *(_QWORD *)(v13 + 72);
    v64 = v111;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v58 + v62 + v63 * v60, (uint64_t)v111, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    if (*v64)
    {

      outlined init with take of TableCellFormula((uint64_t)v64, v114, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v61 + 16) + 1, 1);
      v61 = v121[0];
      v66 = *(_QWORD *)(v121[0] + 16);
      v65 = *(_QWORD *)(v121[0] + 24);
      if (v66 >= v65 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v65 > 1, v66 + 1, 1);
        v61 = v121[0];
      }
      *(_QWORD *)(v61 + 16) = v66 + 1;
      result = outlined init with take of TableCellFormula(v114, v61 + v62 + v66 * v63, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      v13 = v115;
    }
    else
    {
      result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v64, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    }
    if (v59 == ++v60)
    {
      v57 = v121[0];
      v52 = v107;
      v26 = v112;
      v53 = v113;
      goto LABEL_40;
    }
  }
LABEL_84:
  __break(1u);
  return result;
}

id outlined copy of BoundInputsView?(id result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    return a5;
  }
  return result;
}

uint64_t outlined consume of BoundInputsView?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (result)
  {

    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

_QWORD *outlined retain of BoundInputsView?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  return a1;
}

uint64_t outlined consume of PlatformItemCollection?(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return outlined consume of PlatformItemCollection.Storage(result, a2 & 1);
  return result;
}

uint64_t outlined assign with take of SearchFieldConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id partial apply for closure #1 in UIKitSearchBarCoordinator.updateTokensIfNeeded(_:tokens:platformTokens:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in UIKitSearchBarCoordinator.updateTokensIfNeeded(_:tokens:platformTokens:)(a1, a2, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24));
}

uint64_t outlined init with copy of AnyToken(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyToken(a2, a1);
  return a2;
}

void type metadata accessor for (offset: Int, element: AnyToken)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (offset: Int, element: AnyToken))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: AnyToken));
  }
}

uint64_t outlined copy of Text.Suffix.Storage(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of Text.Suffix.Storage(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined destroy of AnyToken(uint64_t a1)
{
  destroy for AnyToken(a1);
  return a1;
}

uint64_t sub_1870B9E28()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitSearchBarCoordinator.searchBarCancelButtonClicked(_:)()
{
  uint64_t v0;

  return closure #1 in UIKitSearchBarCoordinator.searchBarCancelButtonClicked(_:)(v0);
}

uint64_t partial apply for closure #1 in closure #1 in UIKitSearchBarCoordinator.searchBarCancelButtonClicked(_:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in UIKitSearchBarCoordinator.searchBarCancelButtonClicked(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1870B9E6C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitSearchBarCoordinator.searchBarTextDidEndEditing(_:)()
{
  uint64_t v0;

  return closure #1 in UIKitSearchBarCoordinator.searchBarTextDidEndEditing(_:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in UIKitSearchBarCoordinator.searchBarTextDidEndEditing(_:)()
{
  return closure #1 in closure #1 in UIKitSearchBarCoordinator.searchBarTextDidEndEditing(_:)();
}

uint64_t sub_1870B9EB4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitSearchBarCoordinator.searchBarTextDidBeginEditing(_:)()
{
  uint64_t v0;

  return closure #1 in UIKitSearchBarCoordinator.searchBarTextDidBeginEditing(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

void partial apply for closure #1 in closure #1 in closure #1 in UIKitSearchBarCoordinator.searchBarTextDidBeginEditing(_:)()
{
  uint64_t v0;

  closure #1 in closure #1 in closure #1 in UIKitSearchBarCoordinator.searchBarTextDidBeginEditing(_:)(*(_BYTE **)(v0 + 16));
}

uint64_t partial apply for closure #1 in UIKitSearchBarCoordinator.searchBar(_:textDidChange:)()
{
  uint64_t v0;

  return closure #1 in UIKitSearchBarCoordinator.searchBar(_:textDidChange:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t partial apply for closure #1 in UIKitSearchBarCoordinator.primaryActionTriggered(_:)()
{
  uint64_t v0;

  return closure #1 in UIKitSearchBarCoordinator.primaryActionTriggered(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t partial apply for specialized closure #1 in SubmitTriggerSource.updateTriggersIfNeeded()()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t *);
  uint64_t v3;

  v1 = *(uint64_t (**)(uint64_t *))(v0 + 16);
  v3 = 4;
  return v1(&v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t *);
  uint64_t v3;

  v1 = *(uint64_t (**)(uint64_t *))(v0 + 16);
  v3 = 1;
  return v1(&v3);
}

ValueMetadata *type metadata accessor for LazySearchSuggestionsKey()
{
  return &type metadata for LazySearchSuggestionsKey;
}

ValueMetadata *type metadata accessor for LazySearchScopesKey()
{
  return &type metadata for LazySearchScopesKey;
}

uint64_t type metadata completion function for LazyPlatformItemWriter()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for LazyPlatformItemWriter(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 16) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *(_QWORD *)a2;
    *v3 = *(_QWORD *)a2;
    v3 = (_QWORD *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((a1 & 0xFFFFFFFFFFFFFFF8) + v5 + 16) & ~v5, ((a2 & 0xFFFFFFFFFFFFFFF8) + v5 + 16) & ~v5);
  }
  return v3;
}

uint64_t destroy for LazyPlatformItemWriter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))(((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

unint64_t initializeWithCopy for LazyPlatformItemWriter(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((*(unsigned __int8 *)(v4 + 80) + 16 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 16 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

unint64_t assignWithCopy for LazyPlatformItemWriter(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((*(unsigned __int8 *)(v4 + 80) + 16 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 16 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

unint64_t initializeWithTake for LazyPlatformItemWriter(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 16 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 16 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

unint64_t assignWithTake for LazyPlatformItemWriter(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((*(unsigned __int8 *)(v4 + 80) + 16 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 16 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyPlatformItemWriter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = a1 & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((v15 + v7 + 16) & ~v7);
      v16 = *(_QWORD *)(v15 + 8);
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1870BA314 + 4 * byte_187C07140[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for LazyPlatformItemWriter(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void type metadata accessor for LazyPlatformItemWriter()
{
  JUMPOUT(0x18D75FF28);
}

_QWORD *initializeBufferWithCopyOfBuffer for UIKitSearchBarAdaptor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v6 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v6 = a1;
    a1[1] = a2[1];
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v8 = *(int *)(v7 + 32);
    v9 = (char *)v6 + v8;
    v10 = (char *)a2 + v8;
    *v9 = *((_BYTE *)a2 + v8);
    v9[1] = *((_BYTE *)a2 + v8 + 1);
    *((_WORD *)v9 + 1) = *(_WORD *)((char *)a2 + v8 + 2);
    v9[8] = *((_BYTE *)a2 + v8 + 8);
    *((_DWORD *)v9 + 1) = *(_DWORD *)((char *)a2 + v8 + 4);
    v11 = (int *)type metadata accessor for SearchFieldState();
    v12 = v11[9];
    v13 = &v9[v12];
    v14 = &v10[v12];
    v15 = type metadata accessor for AttributedString();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_retain();
    swift_retain();
    v16(v13, v14, v15);
    v9[v11[10]] = v10[v11[10]];
    v17 = v11[11];
    v18 = &v9[v17];
    v19 = &v10[v17];
    v18[4] = v19[4];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v20 = (int *)type metadata accessor for SearchFieldConfiguration(0);
    v21 = v20[6];
    v22 = (char *)v6 + v21;
    v23 = (char *)a2 + v21;
    v24 = v23[8];
    if (v24 == 255)
    {
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
    }
    else
    {
      v25 = v24 & 1;
      v26 = *(_QWORD *)v23;
      outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v23, v24 & 1);
      *(_QWORD *)v22 = v26;
      v22[8] = v25;
    }
    *((_BYTE *)v6 + v20[7]) = *((_BYTE *)a2 + v20[7]);
    v27 = v20[8];
    v28 = (char *)v6 + v27;
    v29 = (char *)a2 + v27;
    v30 = *(_QWORD *)((char *)a2 + v27);
    v31 = *(_QWORD *)((char *)a2 + v27 + 8);
    v32 = *((_BYTE *)a2 + v27 + 16);
    outlined copy of Text.Storage(v30, v31, v32);
    *(_QWORD *)v28 = v30;
    *((_QWORD *)v28 + 1) = v31;
    v28[16] = v32;
    *((_QWORD *)v28 + 3) = *((_QWORD *)v29 + 3);
    *((_BYTE *)v6 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return v6;
}

uint64_t destroy for UIKitSearchBarAdaptor(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  swift_release();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v3 = *(int *)(v2 + 32);
  v4 = a1 + *(int *)(type metadata accessor for SearchFieldState() + 36) + v3;
  v5 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = type metadata accessor for SearchFieldConfiguration(0);
  v7 = a1 + *(int *)(v6 + 24);
  v8 = *(unsigned __int8 *)(v7 + 8);
  if (v8 != 255)
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v7, v8 & 1);
  outlined consume of Text.Storage(*(_QWORD *)(a1 + *(int *)(v6 + 32)), *(_QWORD *)(a1 + *(int *)(v6 + 32) + 8), *(_BYTE *)(a1 + *(int *)(v6 + 32) + 16));
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for UIKitSearchBarAdaptor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *((_BYTE *)a2 + v7);
  v8[1] = *((_BYTE *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  v8[8] = *((_BYTE *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  v10 = (int *)type metadata accessor for SearchFieldState();
  v11 = v10[9];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for AttributedString();
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_retain();
  swift_retain();
  v15(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  v16 = v10[11];
  v17 = &v8[v16];
  v18 = &v9[v16];
  v17[4] = v18[4];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v19 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v20 = v19[6];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = v22[8];
  if (v23 == 255)
  {
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
  }
  else
  {
    v24 = v23 & 1;
    v25 = *(_QWORD *)v22;
    outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v22, v23 & 1);
    *(_QWORD *)v21 = v25;
    v21[8] = v24;
  }
  *((_BYTE *)a1 + v19[7]) = *((_BYTE *)a2 + v19[7]);
  v26 = v19[8];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = *(_QWORD *)((char *)a2 + v26);
  v30 = *(_QWORD *)((char *)a2 + v26 + 8);
  v31 = *((_BYTE *)a2 + v26 + 16);
  outlined copy of Text.Storage(v29, v30, v31);
  *(_QWORD *)v27 = v29;
  *((_QWORD *)v27 + 1) = v30;
  v27[16] = v31;
  *((_QWORD *)v27 + 3) = *((_QWORD *)v28 + 3);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for UIKitSearchBarAdaptor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *((_BYTE *)a2 + v7);
  v8[1] = *((_BYTE *)a2 + v7 + 1);
  v8[2] = *((_BYTE *)a2 + v7 + 2);
  v8[3] = *((_BYTE *)a2 + v7 + 3);
  LODWORD(v7) = *(_DWORD *)((char *)a2 + v7 + 4);
  v8[8] = v9[8];
  *((_DWORD *)v8 + 1) = v7;
  v10 = (int *)type metadata accessor for SearchFieldState();
  v11 = v10[9];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  v15 = v10[11];
  v16 = &v8[v15];
  v17 = &v9[v15];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  v18 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v19 = v18[6];
  v20 = (uint64_t)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *((unsigned __int8 *)a1 + v19 + 8);
  v23 = *((unsigned __int8 *)a2 + v19 + 8);
  if (v22 == 255)
  {
    if (v23 == 255)
    {
      v25 = *(_QWORD *)v21;
      *(_BYTE *)(v20 + 8) = v21[8];
      *(_QWORD *)v20 = v25;
    }
    else
    {
      v30 = v23 & 1;
      v31 = *(_QWORD *)v21;
      outlined copy of PlatformItemCollection.Storage(v31, v23 & 1);
      *(_QWORD *)v20 = v31;
      *(_BYTE *)(v20 + 8) = v30;
    }
  }
  else if (v23 == 255)
  {
    outlined destroy of PlatformItemCollection(v20);
    v24 = v21[8];
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *(_BYTE *)(v20 + 8) = v24;
  }
  else
  {
    v26 = v23 & 1;
    v27 = *(_QWORD *)v21;
    outlined copy of PlatformItemCollection.Storage(v27, v23 & 1);
    v28 = *(_QWORD *)v20;
    v29 = *(_BYTE *)(v20 + 8);
    *(_QWORD *)v20 = v27;
    *(_BYTE *)(v20 + 8) = v26;
    outlined consume of PlatformItemCollection.Storage(v28, v29);
  }
  *((_BYTE *)a1 + v18[7]) = *((_BYTE *)a2 + v18[7]);
  v32 = v18[8];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = *(_QWORD *)((char *)a2 + v32);
  v36 = *(_QWORD *)((char *)a2 + v32 + 8);
  v37 = *((_BYTE *)a2 + v32 + 16);
  outlined copy of Text.Storage(v35, v36, v37);
  v38 = *(_QWORD *)v33;
  v39 = *((_QWORD *)v33 + 1);
  v40 = v33[16];
  *(_QWORD *)v33 = v35;
  *((_QWORD *)v33 + 1) = v36;
  v33[16] = v37;
  outlined consume of Text.Storage(v38, v39, v40);
  *((_QWORD *)v33 + 3) = *((_QWORD *)v34 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t outlined destroy of PlatformItemCollection(uint64_t a1)
{
  destroy for PlatformItemCollection();
  return a1;
}

_QWORD *initializeWithTake for UIKitSearchBarAdaptor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v8 = *(int *)(v7 + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  *v9 = *((_BYTE *)a2 + v8);
  v9[1] = *((_BYTE *)a2 + v8 + 1);
  *((_WORD *)v9 + 1) = *(_WORD *)((char *)a2 + v8 + 2);
  v9[8] = *((_BYTE *)a2 + v8 + 8);
  *((_DWORD *)v9 + 1) = *(_DWORD *)((char *)a2 + v8 + 4);
  v11 = (int *)type metadata accessor for SearchFieldState();
  v12 = v11[9];
  v13 = &v9[v12];
  v14 = &v10[v12];
  v15 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v9[v11[10]] = v10[v11[10]];
  v16 = v11[11];
  v17 = &v9[v16];
  v18 = &v10[v16];
  v17[4] = v18[4];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v19 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v20 = v19[6];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  *((_BYTE *)a1 + v19[7]) = *((_BYTE *)a2 + v19[7]);
  v23 = v19[8];
  v24 = (_OWORD *)((char *)a1 + v23);
  v25 = (_OWORD *)((char *)a2 + v23);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *assignWithTake for UIKitSearchBarAdaptor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *((_BYTE *)a2 + v7);
  v8[1] = *((_BYTE *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  v8[8] = *((_BYTE *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  v10 = (int *)type metadata accessor for SearchFieldState();
  v11 = v10[9];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  v15 = v10[11];
  v16 = &v8[v15];
  v17 = &v9[v15];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  v18 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v19 = v18[6];
  v20 = (uint64_t)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *((unsigned __int8 *)a1 + v19 + 8);
  if (v22 != 255)
  {
    v23 = v21[8];
    if (v23 != 255)
    {
      v24 = *(_QWORD *)v20;
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *(_BYTE *)(v20 + 8) = v23 & 1;
      outlined consume of PlatformItemCollection.Storage(v24, v22 & 1);
      goto LABEL_6;
    }
    outlined destroy of PlatformItemCollection(v20);
  }
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = v21[8];
LABEL_6:
  *((_BYTE *)a1 + v18[7]) = *((_BYTE *)a2 + v18[7]);
  v25 = v18[8];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  LOBYTE(v25) = *((_BYTE *)a2 + v25 + 16);
  v28 = *(_QWORD *)v26;
  v29 = *((_QWORD *)v26 + 1);
  v30 = v26[16];
  *(_OWORD *)v26 = *(_OWORD *)v27;
  v26[16] = v25;
  outlined consume of Text.Storage(v28, v29, v30);
  *((_QWORD *)v26 + 3) = *((_QWORD *)v27 + 3);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitSearchBarAdaptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870BAFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for SearchFieldConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return v9 - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for UIKitSearchBarAdaptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870BB030(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SearchFieldConfiguration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for UIKitSearchBarAdaptor(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitSearchBarAdaptor);
}

uint64_t type metadata completion function for UIKitSearchBarAdaptor()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SearchFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in LazyPlatformItemWriter<A, B>()
{
  return &protocol witness table for LazyPlatformItemWriter<A, B>;
}

void type metadata accessor for LazyPlatformItemWriter.UpdateEnvironment()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t storeEnumTagSinglePayload for UIKitSearchBarAdaptor.Location(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1870BB190 + 4 * byte_187C07153[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1870BB1C4 + 4 * byte_187C0714E[v4]))();
}

uint64_t sub_1870BB1C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870BB1CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1870BB1D4);
  return result;
}

uint64_t sub_1870BB1E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1870BB1E8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1870BB1EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870BB1F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UIKitSearchBarAdaptor.Location()
{
  return &type metadata for UIKitSearchBarAdaptor.Location;
}

unint64_t lazy protocol witness table accessor for type UIKitSearchBarAdaptor.Location and conformance UIKitSearchBarAdaptor.Location()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UIKitSearchBarAdaptor.Location and conformance UIKitSearchBarAdaptor.Location;
  if (!lazy protocol witness table cache variable for type UIKitSearchBarAdaptor.Location and conformance UIKitSearchBarAdaptor.Location)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitSearchBarAdaptor.Location, &type metadata for UIKitSearchBarAdaptor.Location);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitSearchBarAdaptor.Location and conformance UIKitSearchBarAdaptor.Location);
  }
  return result;
}

void base witness table accessor for _AttributeBody in LazyPlatformItemWriter<A, B>.UpdateEnvironment()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t PickerContent.disabled(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v7;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v7 = a1;
  v9 = *(_QWORD *)(a2 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v4, a2, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v12, a2);
  result = type metadata accessor for _DisabledPickerContent(0, a2, a3, v13);
  *(_BYTE *)(a4 + *(int *)(result + 36)) = v7;
  return result;
}

uint64_t _DisabledPickerContent._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v19[1] = a3;
  v5 = *(_QWORD *)(a1 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = *(_QWORD *)(v7 + 16);
  v8 = *(_QWORD *)(v7 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v15 = (char *)v19 - v14;
  (*(void (**)(uint64_t, uint64_t, double))(v8 + 56))(v9, v8, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a1);
  v16 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v9;
  *(_QWORD *)(v17 + 24) = v8;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v17 + v16, (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  swift_getAssociatedConformanceWitness();
  View.transformTrait<A>(_:transform:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, AssociatedTypeWitness);
}

uint64_t closure #1 in _DisabledPickerContent._identifiedView.getter(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  int v12;
  char v13;
  uint64_t result;
  uint64_t v15;

  v6 = type metadata accessor for _DisabledPickerContent(0, a3, a4, a4);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v15 - v10;
  v12 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v15 - v10, a2, v6, v9);
  if (v12 == 1)
    v13 = v11[*(int *)(v6 + 36)] ^ 1;
  else
    v13 = 0;
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  *a1 = v13 & 1;
  return result;
}

uint64_t sub_1870BB570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for _DisabledPickerContent(0, v5, *(_QWORD *)(v4 + 24), a4)- 8)+ 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + ((v6 + 32) & ~v6), v5);
  return swift_deallocObject();
}

uint64_t type metadata accessor for _DisabledPickerContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _DisabledPickerContent);
}

uint64_t partial apply for closure #1 in _DisabledPickerContent._identifiedView.getter(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for _DisabledPickerContent(0, v6, v7, a4) - 8) + 80);
  return closure #1 in _DisabledPickerContent._identifiedView.getter(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

void associated type witness table accessor for PickerContent.Body : PickerContent in _DisabledPickerContent<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for PickerContent._IdentifiedView : View in _DisabledPickerContent<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for _DisabledPickerContent<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _DisabledPickerContent<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for _DisabledPickerContent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for _DisabledPickerContent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
  }
  else
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t initializeWithCopy for _DisabledPickerContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithCopy for _DisabledPickerContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t initializeWithTake for _DisabledPickerContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithTake for _DisabledPickerContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for _DisabledPickerContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_21;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) > 3)
    goto LABEL_7;
  v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_14;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_21;
LABEL_7:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_21;
LABEL_14:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if ((_DWORD)v7 == -1)
        return v6 + v13 + 1;
      if (v9 > 3)
        LODWORD(v9) = 4;
      return ((uint64_t (*)(void))((char *)&loc_1870BB994 + 4 * byte_187C07570[(v9 - 1)]))();
    }
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_14;
  }
LABEL_21:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2)
    return 0;
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for _DisabledPickerContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t sub_1870BBBE0()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return swift_getOpaqueTypeConformance2();
}

uint64_t _RowVisitationContext.wantsClippedBackground.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for MoveInteraction?, (void (*)(uint64_t))type metadata accessor for MoveInteraction);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v7 - v2;
  _RowVisitationContext.moveInteraction.getter((uint64_t)&v7 - v2);
  v4 = type metadata accessor for MoveInteraction();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of IntelligenceElement?((uint64_t)v3, &lazy cache variable for type metadata for MoveInteraction?, (void (*)(uint64_t))type metadata accessor for MoveInteraction);
    return 0;
  }
  else
  {
    v5 = v3[16];
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
  }
  return v5;
}

Swift::Bool __swiftcall _RowVisitationContext.canHandleDropInsert(items:)(Swift::OpaquePointer items)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;

  v2 = ViewTraitCollection.insertInteraction(for:)(0);
  v3 = v2;
  v4 = 0;
  if (!v2)
    goto LABEL_20;
  if (v2 == 1)
  {
LABEL_21:
    LOBYTE(v8) = v4;
    return (char)v8;
  }
  v16 = *(_QWORD *)(v2 + 16);
  if (!v16)
  {
    v4 = 0;
LABEL_20:
    outlined consume of OnInsertInteraction?(v3);
    goto LABEL_21;
  }
  type metadata accessor for UTType();
  v15 = v3;
  swift_bridgeObjectRetain();
  v5 = 0;
  while (!((unint64_t)items._rawValue >> 62))
  {
    v6 = *(_QWORD *)(((unint64_t)items._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_10;
LABEL_5:
    ++v5;
    swift_bridgeObjectRelease();
    if (v5 == v16)
    {
      v3 = v15;
      swift_bridgeObjectRelease();
      v4 = 0;
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6)
    goto LABEL_5;
LABEL_10:
  v7 = 4;
  while (1)
  {
    v8 = ((unint64_t)items._rawValue & 0xC000000000000001) != 0
       ? (id)MEMORY[0x18D75E3BC](v7 - 4, items._rawValue)
       : *((id *)items._rawValue + v7);
    v9 = v8;
    v10 = v7 - 3;
    if (__OFADD__(v7 - 4, 1))
      break;
    v11 = UTType.identifier.getter();
    v12 = (void *)MEMORY[0x18D75CC88](v11);
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v9, sel_hasItemConformingToTypeIdentifier_, v12);

    if (v13)
    {
      v3 = v15;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 = 1;
      goto LABEL_20;
    }
    ++v7;
    if (v10 == v6)
      goto LABEL_5;
  }
  __break(1u);
  return (char)v8;
}

uint64_t _RowVisitationContext.dynamicContentOffset.getter()
{
  uint64_t v1;

  ViewTraitCollection.value<A>(for:defaultValue:)();
  return v1;
}

uint64_t _RowVisitationContext.selectionValue(respectSelectionDisabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;

  v5 = a1;
  v22 = a3;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 24);
  v21[0] = *(_QWORD *)(a2 + 16);
  v21[1] = v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v21 - v15;
  v24 = *(_QWORD *)(v3 + *(int *)(a2 + 40));
  v23 = 1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((v25 & 1) == 0 && (v5 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v22, 1, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v3 + *(int *)(a2 + 44), v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a2);
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, AssociatedTypeWitness);
  v20 = v22;
  if (v19 == 1)
  {
    v24 = *(_QWORD *)&v8[*(int *)(a2 + 40)];
    swift_getAssociatedConformanceWitness();
    ViewTraitCollection.listSelectionIdentityValue<A>(for:respectSelectionDisabled:)(1, AssociatedTypeWitness, v20);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v20, v16, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, AssociatedTypeWitness);
  }
}

uint64_t _RowVisitationContext.hasSwipeActions.getter()
{
  unsigned __int8 v1;

  ViewTraitCollection.value<A>(for:defaultValue:)();
  return v1;
}

uint64_t _RowVisitationContext.init(index:view:traits:explicitSelectionValue:hasMultipleSelection:deleteControlVisibility:reorderControlVisibility:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v24;
  char v26;
  char v27;

  v24 = *a4;
  v26 = *a7;
  v27 = *a8;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v14 = swift_getAssociatedTypeWitness();
  v15 = a9 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a9, a1, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v15, a2, v14);
  v17 = (int *)type metadata accessor for _RowVisitationContext(0, a10, a11, v16);
  v18 = a9 + v17[9];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v19 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a3, v19);
  *(_QWORD *)(a9 + v17[10]) = v24;
  v20 = a9 + v17[11];
  swift_getAssociatedTypeWitness();
  v21 = type metadata accessor for Optional();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20, a5, v21);
  *(_BYTE *)(a9 + v17[12]) = a6;
  *(_BYTE *)(a9 + v17[13]) = v26;
  *(_BYTE *)(a9 + v17[14]) = v27;
  return result;
}

uint64_t sub_1870BC4C8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ()(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ()(a1, a2, *(uint64_t (**)(uint64_t, _QWORD))(v2 + 16));
}

uint64_t outlined consume of OnInsertInteraction?(uint64_t result)
{
  if (result != 1)
    return outlined consume of PasteHelper?(result);
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _RowVisitationContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  int v14;
  unsigned int v15;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  const void *v26;
  unsigned int (*v27)(const void *, uint64_t, uint64_t);
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t AssociatedTypeWitness;
  uint64_t v37;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v2 = *(_QWORD *)(v37 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v3 = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v32 = v2 + v5;
  v34 = v4;
  v35 = v3;
  v6 = *(_QWORD *)(v4 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = (v32 & ~(unint64_t)v5) + v6 + v9;
  v30 = *(_QWORD *)(v8 + 64) + 7;
  v31 = v7;
  v33 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v33 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  if (*(_DWORD *)(v11 + 84))
    v13 = *(_QWORD *)(v11 + 64);
  else
    v13 = *(_QWORD *)(v11 + 64) + 1;
  v14 = *(_DWORD *)(v37 + 80) | v5;
  v15 = v12 | v9 | v14 & 0xF8;
  if (v13 + ((v12 + ((v30 + (v10 & ~(unint64_t)v9)) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v12) + 3 > 0x18
    || ((*(_DWORD *)(v11 + 80) | v9 | v14) & 0x100000) != 0
    || v15 > 7)
  {
    v18 = *a2;
    *a1 = *a2;
    v20 = (uint64_t *)(v18 + (((v15 | 7) + 16) & ~(unint64_t)(v15 | 7)));
    swift_retain();
  }
  else
  {
    v19 = ~(unint64_t)v9;
    v20 = a1;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v37 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v34 + 16))(((unint64_t)a1 + v32) & ~(unint64_t)v5, ((unint64_t)a2 + v32) & ~(unint64_t)v5, v35);
    v21 = ((unint64_t)a1 + v10) & v19;
    v22 = ((unint64_t)a2 + v10) & v19;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v21, v22, v31);
    v23 = (_QWORD *)((v30 + v21) & 0xFFFFFFFFFFFFFFF8);
    v24 = (_QWORD *)((v30 + v22) & 0xFFFFFFFFFFFFFFF8);
    *v23 = *v24;
    v25 = (char *)(((unint64_t)v23 + v12 + 8) & ~v12);
    v26 = (const void *)(((unint64_t)v24 + v12 + 8) & ~v12);
    v27 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    if (v27(v26, 1, v33))
    {
      memcpy(v25, v26, v13);
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v11 + 16))(v25, v26, v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v25, 0, 1, v33);
    }
    v28 = &v25[v13];
    *v28 = *((_BYTE *)v26 + v13);
    v28[1] = *((_BYTE *)v26 + v13 + 1);
    v28[2] = *((_BYTE *)v26 + v13 + 2);
  }
  return v20;
}

uint64_t assignWithCopy for _RowVisitationContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  size_t v27;
  uint64_t v28;
  char *v29;
  char *v30;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))((v6 + v9 + a1) & ~v9, (v6 + v9 + a2) & ~v9, v7);
  v10 = *(_QWORD *)(v8 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = ((v6 + v9) & ~v9) + v10 + v13;
  v15 = (v14 + a1) & ~v13;
  v16 = (v14 + a2) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(v15, v16, v11);
  v17 = *(_QWORD *)(v12 + 64) + 7;
  v18 = (_QWORD *)((v17 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v17 + v16) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = (char *)(((unint64_t)v18 + v22 + 8) & ~v22);
  v24 = (char *)(((unint64_t)v19 + v22 + 8) & ~v22);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  LODWORD(v8) = v25(v23, 1, v20);
  v26 = v25(v24, 1, v20);
  if ((_DWORD)v8)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v23, v24, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v23, 0, 1, v20);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v23, v24, v20);
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  }
  if (*(_DWORD *)(v21 + 84))
    v27 = *(_QWORD *)(v21 + 64);
  else
    v27 = *(_QWORD *)(v21 + 64) + 1;
  memcpy(v23, v24, v27);
LABEL_10:
  if (*(_DWORD *)(v21 + 84))
    v28 = *(_QWORD *)(v21 + 64);
  else
    v28 = *(_QWORD *)(v21 + 64) + 1;
  v29 = &v23[v28];
  v30 = &v24[v28];
  *v29 = *v30;
  v29[1] = v30[1];
  v29[2] = v30[2];
  return a1;
}

uint64_t initializeWithTake for _RowVisitationContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  size_t v26;
  size_t v27;
  size_t v28;
  char *v29;
  char *v30;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))((v6 + v9 + a1) & ~v9, (v6 + v9 + a2) & ~v9, v7);
  v10 = *(_QWORD *)(v8 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = ((v6 + v9) & ~v9) + v10 + v13;
  v15 = (v14 + a1) & ~v13;
  v16 = (v14 + a2) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v15, v16, v11);
  v17 = *(_QWORD *)(v12 + 64) + 7;
  v18 = (_QWORD *)((v17 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v17 + v16) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = (char *)(((unint64_t)v18 + v22 + 8) & ~v22);
  v24 = (char *)(((unint64_t)v19 + v22 + 8) & ~v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v24, 1, v20))
  {
    v25 = *(_DWORD *)(v21 + 84);
    v26 = *(_QWORD *)(v21 + 64);
    if (v25)
      v27 = v26;
    else
      v27 = v26 + 1;
    memcpy(v23, v24, v27);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v24, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v23, 0, 1, v20);
    v25 = *(_DWORD *)(v21 + 84);
    v26 = *(_QWORD *)(v21 + 64);
  }
  if (v25)
    v28 = v26;
  else
    v28 = v26 + 1;
  v29 = &v23[v28];
  v30 = &v24[v28];
  *v29 = *v30;
  v29[1] = v30[1];
  v29[2] = v30[2];
  return a1;
}

uint64_t assignWithTake for _RowVisitationContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  size_t v27;
  uint64_t v28;
  char *v29;
  char *v30;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))((v6 + v9 + a1) & ~v9, (v6 + v9 + a2) & ~v9, v7);
  v10 = *(_QWORD *)(v8 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = ((v6 + v9) & ~v9) + v10 + v13;
  v15 = (v14 + a1) & ~v13;
  v16 = (v14 + a2) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(v15, v16, v11);
  v17 = *(_QWORD *)(v12 + 64) + 7;
  v18 = (_QWORD *)((v17 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v17 + v16) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  swift_bridgeObjectRelease();
  v20 = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = (char *)(((unint64_t)v18 + v22 + 8) & ~v22);
  v24 = (char *)(((unint64_t)v19 + v22 + 8) & ~v22);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  LODWORD(v8) = v25(v23, 1, v20);
  v26 = v25(v24, 1, v20);
  if ((_DWORD)v8)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v24, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v23, 0, 1, v20);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v23, v24, v20);
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  }
  if (*(_DWORD *)(v21 + 84))
    v27 = *(_QWORD *)(v21 + 64);
  else
    v27 = *(_QWORD *)(v21 + 64) + 1;
  memcpy(v23, v24, v27);
LABEL_10:
  if (*(_DWORD *)(v21 + 84))
    v28 = *(_QWORD *)(v21 + 64);
  else
    v28 = *(_QWORD *)(v21 + 64) + 1;
  v29 = &v23[v28];
  v30 = &v24[v28];
  *v29 = *v30;
  v29[1] = v30[1];
  v29[2] = v30[2];
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for ListContentVisitor(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t (*v32)(_QWORD *, uint64_t, uint64_t);
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  void *v40;
  const void *v41;
  size_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  _QWORD *v53;
  char *v54;
  const void *v55;
  unsigned int (*v56)(const void *, uint64_t, uint64_t);
  id v57;
  size_t v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v63;
  size_t __n;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(unsigned int *)(v3 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= v4)
    v8 = v4;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 84);
  v12 = v11 - 1;
  if (!v11)
    v12 = 0;
  if (v8 > v12)
    v12 = v8;
  if (v12 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = v12;
  v14 = *(_DWORD *)(v6 + 80);
  v15 = *(_QWORD *)(v3 + 64) + v14;
  v16 = (v15 & ~(unint64_t)v14) + *(_QWORD *)(v6 + 64);
  v17 = *(_DWORD *)(v10 + 80);
  v18 = v17 + 8;
  if (v11)
    v19 = *(_QWORD *)(v10 + 64);
  else
    v19 = *(_QWORD *)(v10 + 64) + 1;
  v20 = ((v18 + ((((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(_DWORD *)(v10 + 80))
      + v19
      + 3;
  v21 = (*(_BYTE *)(v3 + 80) | v14);
  if ((v21 | v17) <= 7
    && ((*(_DWORD *)(v3 + 80) | v14 | *(_DWORD *)(v10 + 80)) & 0x100000) == 0
    && ((v20 + v21) & ~v21) + v16 <= 0x18)
  {
    v67 = v6;
    v68 = v5;
    v69 = AssociatedTypeWitness;
    v70 = ~(unint64_t)v14;
    v26 = ~v17;
    v66 = *(_QWORD *)(v3 + 64) + v14;
    __n = v19;
    v65 = v9;
    if (v8 == v13)
    {
      v27 = a2;
      v28 = v3;
      v29 = v26;
      if (v4 >= v7)
      {
        v32 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v3 + 48);
        v30 = a2;
        v33 = v4;
        v31 = v69;
      }
      else
      {
        v30 = (_QWORD *)(((unint64_t)a2 + v15) & v70);
        v31 = v68;
        v32 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48);
        v33 = v7;
      }
      v37 = v20;
      v38 = *(_DWORD *)(v10 + 80) + 8;
      v39 = v32(v30, v33, v31);
      v18 = v38;
      v20 = v37;
      v25 = a1;
      if (v39)
      {
LABEL_33:
        v40 = v25;
        v41 = v27;
        v42 = v20;
        v43 = v20;
LABEL_34:
        memcpy(v40, v41, v42);
        v44 = v43;
        v46 = v68;
        v45 = v69;
        v47 = v6;
        v48 = ~v21;
LABEL_42:
        v60 = ((unint64_t)v25 + v21 + v44) & v48;
        v61 = ((unint64_t)v27 + v21 + v44) & v48;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v28 + 16))(v60, v61, v45);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v47 + 16))((v66 + v60) & v70, (v66 + v61) & v70, v46);
        return v25;
      }
    }
    else
    {
      v27 = a2;
      v34 = ((unint64_t)a2 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
      v28 = v3;
      if ((v12 & 0x80000000) != 0)
      {
        v63 = ((v18 + ((((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(_DWORD *)(v10 + 80))
            + v19
            + 3;
        v25 = a1;
        if (v11 >= 2)
        {
          v36 = *(_DWORD *)(v10 + 80) + 8;
          v29 = v26;
          if ((*(unsigned int (**)(unint64_t))(v10 + 48))((v18 + ((v34 + 95) & 0xFFFFFFFFFFFFFFF8)) & v26) >= 2)
          {
            v40 = a1;
            v41 = a2;
            v43 = v63;
            v42 = v63;
            goto LABEL_34;
          }
        }
        else
        {
          v29 = v26;
          v36 = *(_DWORD *)(v10 + 80) + 8;
        }
LABEL_38:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v28 + 16))(v25, v27, v69);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v25 + v66) & v70, ((unint64_t)v27 + v66) & v70, v68);
        v49 = ((unint64_t)v25 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
        v50 = *(_QWORD *)(v34 + 24);
        *(_QWORD *)(v49 + 24) = v50;
        *(_QWORD *)(v49 + 32) = *(_QWORD *)(v34 + 32);
        (**(void (***)(unint64_t, unint64_t))(v50 - 8))(v49, v34);
        *(_QWORD *)(v49 + 40) = *(_QWORD *)(v34 + 40);
        *(_DWORD *)(v49 + 48) = *(_DWORD *)(v34 + 48);
        *(_DWORD *)(v49 + 52) = *(_DWORD *)(v34 + 52);
        *(_QWORD *)(v49 + 56) = *(_QWORD *)(v34 + 56);
        *(_QWORD *)(v49 + 64) = *(_QWORD *)(v34 + 64);
        *(_QWORD *)(v49 + 72) = *(_QWORD *)(v34 + 72);
        v51 = *(void **)(v34 + 80);
        *(_QWORD *)(v49 + 80) = v51;
        v52 = (_QWORD *)((v49 + 95) & 0xFFFFFFFFFFFFFFF8);
        v53 = (_QWORD *)((v34 + 95) & 0xFFFFFFFFFFFFFFF8);
        *v52 = *v53;
        v54 = (char *)(((unint64_t)v52 + v36) & v29);
        v55 = (const void *)(((unint64_t)v53 + v36) & v29);
        v56 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
        swift_retain();
        swift_bridgeObjectRetain();
        v57 = v51;
        swift_bridgeObjectRetain();
        if (v56(v55, 1, v65))
        {
          v58 = __n;
          memcpy(v54, v55, __n);
          v25 = a1;
          v27 = a2;
          v46 = v68;
          v45 = v69;
          v47 = v67;
          v44 = v63;
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(v10 + 16))(v54, v55, v65);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v54, 0, 1, v65);
          v25 = a1;
          v27 = a2;
          v46 = v68;
          v45 = v69;
          v47 = v67;
          v44 = v63;
          v58 = __n;
        }
        v48 = ~v21;
        v59 = &v54[v58];
        *v59 = *((_BYTE *)v55 + v58);
        v59[1] = *((_BYTE *)v55 + v58 + 1);
        v59[2] = *((_BYTE *)v55 + v58 + 2);
        goto LABEL_42;
      }
      v29 = v26;
      v35 = *(_QWORD *)(v34 + 24);
      if (v35 >= 0xFFFFFFFF)
        LODWORD(v35) = -1;
      v25 = a1;
      if ((_DWORD)v35 != -1)
        goto LABEL_33;
    }
    v36 = v18;
    v63 = v20;
    v34 = ((unint64_t)v27 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
    goto LABEL_38;
  }
  v24 = *a2;
  *a1 = *a2;
  v25 = (_QWORD *)(v24 + (((v21 | v17) & 0xF8 ^ 0x1F8) & ((v21 | v17) + 16)));
  swift_retain();
  return v25;
}

uint64_t destroy for ListContentVisitor(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t AssociatedTypeWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v2 = *(unsigned int *)(v1 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v30 = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(v30 - 8);
  v4 = *(unsigned int *)(v3 + 84);
  if (v4 <= v2)
    v5 = v2;
  else
    v5 = *(_DWORD *)(v3 + 84);
  v24 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v24 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = v7 - 1;
  if (!(_DWORD)v7)
    v8 = 0;
  if (v5 > v8)
    v8 = v5;
  if (v8 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  else
    v9 = v8;
  v10 = *(_DWORD *)(v3 + 80);
  v11 = *(_QWORD *)(v1 + 64) + v10;
  v12 = (v11 & ~v10) + *(_QWORD *)(v3 + 64);
  v13 = *(unsigned __int8 *)(v6 + 80);
  v28 = ~v13;
  v29 = ~v10;
  v25 = *(_QWORD *)(v6 + 64);
  v26 = *(_DWORD *)(v3 + 80);
  if (v5 == v9)
  {
    v14 = a1;
    if (v2 >= v4)
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(a1, v2, AssociatedTypeWitness);
    else
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))((v11 + a1) & v29, v4, v30);
    if (v15)
    {
LABEL_21:
      v18 = v13 + 8;
      goto LABEL_27;
    }
  }
  else
  {
    v14 = a1;
    v16 = (a1 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 0x80000000) != 0)
    {
      if (v7 >= 2)
      {
        v18 = v13 + 8;
        if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))((v13 + 8 + ((v16 + 95) & 0xFFFFFFFFFFFFFFF8)) & v28, v7, v24) >= 2)goto LABEL_27;
      }
      goto LABEL_24;
    }
    v17 = *(_QWORD *)(v16 + 24);
    if (v17 >= 0xFFFFFFFF)
      LODWORD(v17) = -1;
    if ((_DWORD)v17 != -1)
      goto LABEL_21;
  }
  v16 = (v14 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
LABEL_24:
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v14, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))((v11 + v14) & v29, v30);
  __swift_destroy_boxed_opaque_existential_1(v16);
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v18 = v13 + 8;
  v19 = (v13 + 8 + ((v16 + 95) & 0xFFFFFFFFFFFFFFF8)) & v28;
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v19, 1, v24))
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v19, v24);
  v14 = a1;
LABEL_27:
  if ((_DWORD)v7)
    v21 = v14;
  else
    v21 = v14 + 1;
  v20 = *(unsigned __int8 *)(v1 + 80) | v26;
  v22 = (v21 + v25 + v20 + ((v18 + ((((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & v28) + 3) & ~v20;
  (*(void (**)(unint64_t, uint64_t))(v1 + 8))(v22, AssociatedTypeWitness);
  return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))((v11 + v22) & v29, v30);
}

void *initializeWithCopy for ListContentVisitor(void *a1, const void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  unsigned int v22;
  uint64_t v23;
  size_t v24;
  unint64_t v25;
  unsigned __int8 v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  const void *v33;
  unsigned int (*v34)(const void *, uint64_t, uint64_t);
  id v35;
  size_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t AssociatedTypeWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(unsigned int *)(v3 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v52 = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(v52 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= v4)
    v7 = v4;
  else
    v7 = *(_DWORD *)(v5 + 84);
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  v48 = *(_DWORD *)(v9 + 84);
  v10 = v48 - 1;
  if (!v48)
    v10 = 0;
  if (v7 > v10)
    v10 = v7;
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  v53 = v3;
  v12 = *(_QWORD *)(v3 + 64);
  v13 = *(_DWORD *)(v5 + 80);
  v51 = ~v13;
  v14 = v12 + v13;
  v15 = ((v12 + v13) & ~v13) + *(_QWORD *)(v5 + 64);
  v16 = *(unsigned __int8 *)(v9 + 80);
  v17 = v16 + 8;
  v46 = (v16 + 8 + ((((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & ~v16;
  v47 = *(_DWORD *)(v5 + 80);
  v50 = *(_QWORD *)(v9 + 64);
  v44 = ~v16;
  v45 = v8;
  if (v7 == v11)
  {
    if (v4 >= v6)
      v18 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v53 + 48))(a2, v4, AssociatedTypeWitness);
    else
      v18 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a2 + v14) & v51, v6, v52);
    v21 = a1;
    if (v18)
    {
LABEL_21:
      v22 = v48;
      v23 = 3;
      if (!v48)
        v23 = 4;
      v24 = v50;
      v25 = v46;
      memcpy(v21, a2, v23 + v50 + v46);
      goto LABEL_24;
    }
    goto LABEL_18;
  }
  v19 = ((unint64_t)a2 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((v10 & 0x80000000) == 0)
  {
    v20 = *(_QWORD *)(v19 + 24);
    if (v20 >= 0xFFFFFFFF)
      LODWORD(v20) = -1;
    v21 = a1;
    if ((_DWORD)v20 != -1)
      goto LABEL_21;
LABEL_18:
    v19 = ((unint64_t)a2 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    goto LABEL_27;
  }
  v21 = a1;
  if (v48 >= 2
    && (*(unsigned int (**)(unint64_t))(v9 + 48))((v17 + ((v19 + 95) & 0xFFFFFFFFFFFFFFF8)) & ~v16) >= 2)
  {
    v25 = v46;
    v24 = v50;
    memcpy(a1, a2, v50 + v46 + 3);
    v22 = v48;
LABEL_24:
    v26 = v47;
    goto LABEL_36;
  }
LABEL_27:
  (*(void (**)(void *, const void *, uint64_t))(v53 + 16))(v21, a2, AssociatedTypeWitness);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)v21 + v14) & v51, ((unint64_t)a2 + v14) & v51, v52);
  v27 = ((unint64_t)v21 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)(v19 + 24);
  *(_QWORD *)(v27 + 24) = v28;
  *(_QWORD *)(v27 + 32) = *(_QWORD *)(v19 + 32);
  (**(void (***)(unint64_t, unint64_t))(v28 - 8))(v27, v19);
  *(_QWORD *)(v27 + 40) = *(_QWORD *)(v19 + 40);
  *(_DWORD *)(v27 + 48) = *(_DWORD *)(v19 + 48);
  *(_DWORD *)(v27 + 52) = *(_DWORD *)(v19 + 52);
  *(_QWORD *)(v27 + 56) = *(_QWORD *)(v19 + 56);
  *(_QWORD *)(v27 + 64) = *(_QWORD *)(v19 + 64);
  *(_QWORD *)(v27 + 72) = *(_QWORD *)(v19 + 72);
  v29 = *(void **)(v19 + 80);
  *(_QWORD *)(v27 + 80) = v29;
  v30 = (_QWORD *)((v27 + 95) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_QWORD *)((v19 + 95) & 0xFFFFFFFFFFFFFFF8);
  *v30 = *v31;
  v32 = (char *)(((unint64_t)v30 + v17) & v44);
  v33 = (const void *)(((unint64_t)v31 + v17) & v44);
  v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  v35 = v29;
  swift_bridgeObjectRetain();
  if (v34(v33, 1, v45))
  {
    v22 = v48;
    if (v48)
      v36 = v50;
    else
      v36 = v50 + 1;
    memcpy(v32, v33, v36);
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v9 + 16))(v32, v33, v45);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v32, 0, 1, v45);
    v22 = v48;
    if (v48)
      v36 = v50;
    else
      v36 = v50 + 1;
  }
  v25 = v46;
  v26 = v47;
  v37 = &v32[v36];
  *v37 = *((_BYTE *)v33 + v36);
  v37[1] = *((_BYTE *)v33 + v36 + 1);
  v37[2] = *((_BYTE *)v33 + v36 + 2);
  v21 = a1;
  v24 = v50;
LABEL_36:
  v38 = 3;
  if (!v22)
    v38 = 4;
  v39 = *(unsigned __int8 *)(v53 + 80) | v26;
  v40 = v38 + v24 + v39 + v25;
  v41 = ((unint64_t)v21 + v40) & ~v39;
  v42 = ((unint64_t)a2 + v40) & ~v39;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v53 + 16))(v41, v42, AssociatedTypeWitness);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))((v14 + v41) & v51, (v14 + v42) & v51, v52);
  return v21;
}

void *assignWithCopy for ListContentVisitor(void *a1, const void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  const void *v21;
  unint64_t v22;
  int v23;
  uint64_t (*v24)(unint64_t, _QWORD, uint64_t);
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  id v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  unsigned int v38;
  size_t v39;
  size_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 v45;
  const void *v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  _QWORD *v53;
  char *v54;
  const void *v55;
  unsigned int (*v56)(const void *, uint64_t, uint64_t);
  id v57;
  size_t v58;
  char *v59;
  size_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  size_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t AssociatedTypeWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(unsigned int *)(v3 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v79 = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(v79 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= v4)
    v7 = v4;
  else
    v7 = *(_DWORD *)(v5 + 84);
  v70 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v70 - 8);
  v77 = *(_DWORD *)(v8 + 84);
  v9 = v77 - 1;
  if (!v77)
    v9 = 0;
  if (v7 > v9)
    v9 = v7;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v80 = v3;
  v11 = *(_QWORD *)(v3 + 64);
  v12 = *(_DWORD *)(v5 + 80);
  v13 = ~v12;
  v78 = v11 + v12;
  v14 = ((v11 + v12) & ~v12) + *(_QWORD *)(v5 + 64);
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = v15 + 8;
  v73 = (v15 + 8 + ((((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & ~v15;
  v74 = *(_DWORD *)(v5 + 80);
  v71 = ~v15;
  v72 = *(_QWORD *)(v8 + 64);
  v75 = v13;
  if (v7 == v10)
  {
    v17 = a1;
    if (v4 >= v6)
      v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v80 + 48))(a1, v4, AssociatedTypeWitness);
    else
      v18 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a1 + v78) & v13, v6, v79);
    v21 = a2;
    if (v18)
    {
      if (v4 >= v6)
      {
        if (!(*(unsigned int (**)(const void *, uint64_t, uint64_t))(v80 + 48))(a2, v4, AssociatedTypeWitness))
          goto LABEL_50;
        goto LABEL_46;
      }
      v23 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a2 + v78) & v13, v6, v79);
      goto LABEL_24;
    }
    if (v4 >= v6)
      v37 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v80 + 48))(a2, v4, AssociatedTypeWitness);
    else
      v37 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a2 + v78) & v13, v6, v79);
    if (v37)
      goto LABEL_44;
    goto LABEL_29;
  }
  v19 = ((unint64_t)a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = a1;
  if ((v9 & 0x80000000) == 0)
  {
    v20 = *(_QWORD *)(v19 + 24);
    v21 = a2;
    v22 = *(_QWORD *)((((unint64_t)a2 + v14 + 7) & 0xFFFFFFFFFFFFF8) + 0x18);
    if (v22 >= 0xFFFFFFFF)
      LODWORD(v22) = -1;
    v23 = v22 + 1;
    if (v20 <= 0xFFFFFFFE)
    {
LABEL_24:
      if (!v23)
        goto LABEL_50;
      goto LABEL_46;
    }
    if ((_DWORD)v22 != -1)
    {
LABEL_44:
      (*(void (**)(void *, uint64_t))(v80 + 8))(v17, AssociatedTypeWitness);
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v17 + v78) & v13, v79);
      v41 = ((unint64_t)v17 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
      __swift_destroy_boxed_opaque_existential_1(v41);
      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      v42 = (v16 + ((v41 + 95) & 0xFFFFFFFFFFFFFFF8)) & v71;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v42, 1, v70))
        (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v42, v70);
      goto LABEL_46;
    }
LABEL_29:
    (*(void (**)(void *, const void *, uint64_t))(v80 + 24))(v17, v21, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24))(((unint64_t)v17 + v78) & v13, ((unint64_t)v21 + v78) & v13, v79);
    v26 = ((unint64_t)v17 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    v27 = ((unint64_t)v21 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    __swift_assign_boxed_opaque_existential_1((uint64_t *)v26, (uint64_t *)v27);
    *(_QWORD *)(v26 + 40) = *(_QWORD *)(v27 + 40);
    swift_retain();
    swift_release();
    *(_DWORD *)(v26 + 48) = *(_DWORD *)(v27 + 48);
    *(_DWORD *)(v26 + 52) = *(_DWORD *)(v27 + 52);
    *(_QWORD *)(v26 + 56) = *(_QWORD *)(v27 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v26 + 64) = *(_QWORD *)(v27 + 64);
    *(_QWORD *)(v26 + 72) = *(_QWORD *)(v27 + 72);
    v28 = *(void **)(v26 + 80);
    v29 = *(void **)(v27 + 80);
    *(_QWORD *)(v26 + 80) = v29;
    v30 = v29;

    v31 = (_QWORD *)((v26 + 95) & 0xFFFFFFFFFFFFFFF8);
    v32 = (_QWORD *)((v27 + 95) & 0xFFFFFFFFFFFFFFF8);
    *v31 = *v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v33 = (char *)(((unint64_t)v31 + v16) & v71);
    v34 = (char *)(((unint64_t)v32 + v16) & v71);
    v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
    LODWORD(v26) = v35(v33, 1, v70);
    v36 = v35(v34, 1, v70);
    if ((_DWORD)v26)
    {
      if (!v36)
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v33, v34, v70);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v33, 0, 1, v70);
LABEL_60:
        v38 = v77;
        v39 = v72;
LABEL_61:
        if (v38)
          v60 = v39;
        else
          v60 = v39 + 1;
        v61 = &v33[v60];
        v62 = &v34[v60];
        *v61 = *v62;
        v61[1] = v62[1];
        v61[2] = v62[2];
        v44 = v73;
        v45 = v74;
        goto LABEL_65;
      }
    }
    else
    {
      if (!v36)
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 24))(v33, v34, v70);
        goto LABEL_60;
      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v33, v70);
    }
    v38 = v77;
    v39 = v72;
    if (v77)
      v40 = v72;
    else
      v40 = v72 + 1;
    memcpy(v33, v34, v40);
    goto LABEL_61;
  }
  v21 = a2;
  if (v77 < 2)
    goto LABEL_29;
  v24 = *(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v8 + 48);
  v69 = v24((v16 + ((v19 + 95) & 0xFFFFFFFFFFFFFFF8)) & v71, v77, v70);
  v25 = v24((v16 + (((((unint64_t)a2 + v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & v71, v77, v70);
  if (v69 < 2)
  {
    if (v25 >= 2)
      goto LABEL_44;
    goto LABEL_29;
  }
  if (v25 < 2)
  {
LABEL_50:
    (*(void (**)(void *, const void *, uint64_t))(v80 + 16))(v17, v21, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)v17 + v78) & v13, ((unint64_t)v21 + v78) & v13, v79);
    v46 = v21;
    v47 = v17;
    v48 = ((unint64_t)v17 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    v49 = ((unint64_t)v46 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    v50 = *(_QWORD *)(v49 + 24);
    *(_QWORD *)(v48 + 24) = v50;
    *(_QWORD *)(v48 + 32) = *(_QWORD *)(v49 + 32);
    (**(void (***)(unint64_t, unint64_t))(v50 - 8))(v48, v49);
    *(_QWORD *)(v48 + 40) = *(_QWORD *)(v49 + 40);
    *(_DWORD *)(v48 + 48) = *(_DWORD *)(v49 + 48);
    *(_DWORD *)(v48 + 52) = *(_DWORD *)(v49 + 52);
    *(_QWORD *)(v48 + 56) = *(_QWORD *)(v49 + 56);
    *(_QWORD *)(v48 + 64) = *(_QWORD *)(v49 + 64);
    *(_QWORD *)(v48 + 72) = *(_QWORD *)(v49 + 72);
    v51 = *(void **)(v49 + 80);
    *(_QWORD *)(v48 + 80) = v51;
    v52 = (_QWORD *)((v48 + 95) & 0xFFFFFFFFFFFFFFF8);
    v53 = (_QWORD *)((v49 + 95) & 0xFFFFFFFFFFFFFFF8);
    *v52 = *v53;
    v54 = (char *)(((unint64_t)v52 + v16) & v71);
    v55 = (const void *)(((unint64_t)v53 + v16) & v71);
    v56 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    v57 = v51;
    swift_bridgeObjectRetain();
    if (v56(v55, 1, v70))
    {
      v38 = v77;
      v39 = v72;
      if (v77)
        v58 = v72;
      else
        v58 = v72 + 1;
      memcpy(v54, v55, v58);
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v8 + 16))(v54, v55, v70);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v54, 0, 1, v70);
      v38 = v77;
      v39 = v72;
      if (v77)
        v58 = v72;
      else
        v58 = v72 + 1;
    }
    v17 = v47;
    v21 = a2;
    v44 = v73;
    v45 = v74;
    v59 = &v54[v58];
    *v59 = *((_BYTE *)v55 + v58);
    v59[1] = *((_BYTE *)v55 + v58 + 1);
    v59[2] = *((_BYTE *)v55 + v58 + 2);
    goto LABEL_65;
  }
LABEL_46:
  v38 = v77;
  v43 = 3;
  if (!v77)
    v43 = 4;
  v39 = v72;
  v44 = v73;
  memcpy(v17, v21, v43 + v72 + v73);
  v45 = v74;
LABEL_65:
  v63 = 3;
  if (!v38)
    v63 = 4;
  v64 = *(unsigned __int8 *)(v80 + 80) | v45;
  v65 = v63 + v39 + v64 + v44;
  v66 = ((unint64_t)v17 + v65) & ~v64;
  v67 = ((unint64_t)v21 + v65) & ~v64;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v80 + 24))(v66, v67, AssociatedTypeWitness);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24))((v78 + v66) & v75, (v78 + v67) & v75, v79);
  return v17;
}

void *initializeWithTake for ListContentVisitor(void *a1, const void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  size_t v25;
  size_t v26;
  unsigned __int8 v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  const void *v36;
  size_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  unint64_t v48;
  int v49;
  uint64_t v52;
  uint64_t v53;
  uint64_t AssociatedTypeWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = *(unsigned int *)(v2 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v53 = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(v53 - 8);
  v5 = *(unsigned int *)(v4 + 84);
  if (v5 <= v3)
    v6 = v3;
  else
    v6 = *(_DWORD *)(v4 + 84);
  v46 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v46 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = v8 - 1;
  if (!(_DWORD)v8)
    v9 = 0;
  if (v6 > v9)
    v9 = v6;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v2 + 64);
  v12 = *(_DWORD *)(v4 + 80);
  v52 = ~v12;
  v13 = v11 + v12;
  v14 = ((v11 + v12) & ~v12) + *(_QWORD *)(v4 + 64);
  v15 = *(unsigned __int8 *)(v7 + 80);
  v16 = v15 + 8;
  v48 = (v15 + 8 + ((((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & ~v15;
  v49 = *(_DWORD *)(v4 + 80);
  v47 = *(_QWORD *)(v7 + 64);
  v45 = ~v15;
  if (v6 == v10)
  {
    if (v3 >= v5)
    {
      v18 = a2;
      v19 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v2 + 48))(a2, v3, AssociatedTypeWitness);
    }
    else
    {
      v17 = v5;
      v18 = a2;
      v19 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(((unint64_t)a2 + v13) & v52, v17, v53);
    }
    v22 = a1;
    if (v19)
    {
LABEL_21:
      v23 = 3;
      if (!(_DWORD)v8)
        v23 = 4;
      v25 = v47;
      v24 = v48;
      v26 = v23 + v47 + v48;
      goto LABEL_24;
    }
    goto LABEL_18;
  }
  v18 = a2;
  v20 = ((unint64_t)a2 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((v9 & 0x80000000) == 0)
  {
    v21 = *(_QWORD *)(v20 + 24);
    if (v21 >= 0xFFFFFFFF)
      LODWORD(v21) = -1;
    v22 = a1;
    if ((_DWORD)v21 != -1)
      goto LABEL_21;
LABEL_18:
    v20 = ((unint64_t)v18 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    goto LABEL_27;
  }
  v22 = a1;
  if (v8 >= 2
    && (*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))((v16 + ((v20 + 95) & 0xFFFFFFFFFFFFFFF8)) & ~v15, v8, v46) >= 2)
  {
    v25 = v47;
    v24 = v48;
    v26 = v47 + v48 + 3;
LABEL_24:
    memcpy(v22, v18, v26);
    v27 = v49;
    goto LABEL_36;
  }
LABEL_27:
  (*(void (**)(void *, const void *, uint64_t))(v2 + 32))(v22, v18, AssociatedTypeWitness);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 32))(((unint64_t)v22 + v13) & v52, ((unint64_t)v18 + v13) & v52, v53);
  v28 = ((unint64_t)v22 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)v28 = *(_OWORD *)v20;
  *(_OWORD *)(v28 + 16) = v29;
  v31 = *(_OWORD *)(v20 + 48);
  v30 = *(_OWORD *)(v20 + 64);
  v32 = *(_OWORD *)(v20 + 32);
  *(_QWORD *)(v28 + 80) = *(_QWORD *)(v20 + 80);
  *(_OWORD *)(v28 + 48) = v31;
  *(_OWORD *)(v28 + 64) = v30;
  *(_OWORD *)(v28 + 32) = v32;
  v33 = (_QWORD *)((v28 + 95) & 0xFFFFFFFFFFFFFFF8);
  v34 = (_QWORD *)((v20 + 95) & 0xFFFFFFFFFFFFFFF8);
  *v33 = *v34;
  v35 = (char *)(((unint64_t)v33 + v16) & v45);
  v36 = (const void *)(((unint64_t)v34 + v16) & v45);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v36, 1, v46))
  {
    v25 = v47;
    if ((_DWORD)v8)
      v37 = v47;
    else
      v37 = v47 + 1;
    memcpy(v35, v36, v37);
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v7 + 32))(v35, v36, v46);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v35, 0, 1, v46);
    v25 = v47;
    if ((_DWORD)v8)
      v37 = v47;
    else
      v37 = v47 + 1;
  }
  v24 = v48;
  v27 = v49;
  v38 = &v35[v37];
  *v38 = *((_BYTE *)v36 + v37);
  v38[1] = *((_BYTE *)v36 + v37 + 1);
  v38[2] = *((_BYTE *)v36 + v37 + 2);
  v18 = a2;
LABEL_36:
  v39 = 3;
  if (!(_DWORD)v8)
    v39 = 4;
  v40 = *(unsigned __int8 *)(v2 + 80) | v27;
  v41 = v39 + v25 + v40 + v24;
  v42 = ((unint64_t)v22 + v41) & ~v40;
  v43 = ((unint64_t)v18 + v41) & ~v40;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v2 + 32))(v42, v43, AssociatedTypeWitness);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 32))((v13 + v42) & v52, (v13 + v43) & v52, v53);
  return v22;
}

void *assignWithTake for ListContentVisitor(void *a1, const void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  const void *v22;
  unint64_t v23;
  int v24;
  uint64_t (*v25)(unint64_t, _QWORD, uint64_t);
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  char *v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  size_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  size_t v45;
  void *v46;
  size_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  void *v53;
  unint64_t v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _QWORD *v60;
  _QWORD *v61;
  char *v62;
  const void *v63;
  size_t v64;
  char *v65;
  size_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  size_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  size_t v79;
  unint64_t v80;
  int v81;
  unsigned int v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t AssociatedTypeWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(unsigned int *)(v3 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v84 = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(v84 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= v4)
    v7 = v4;
  else
    v7 = *(_DWORD *)(v5 + 84);
  v78 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v78 - 8);
  v82 = *(_DWORD *)(v8 + 84);
  v9 = v82 - 1;
  if (!v82)
    v9 = 0;
  if (v7 > v9)
    v9 = v7;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v85 = v3;
  v11 = *(_QWORD *)(v3 + 64);
  v12 = *(_DWORD *)(v5 + 80);
  v13 = ~v12;
  v14 = v11 + v12;
  v15 = ((v11 + v12) & ~v12) + *(_QWORD *)(v5 + 64);
  v16 = *(unsigned __int8 *)(v8 + 80);
  v77 = ~v16;
  v17 = v16 + 8;
  v80 = (v16 + 8 + ((((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & ~v16;
  v81 = *(_DWORD *)(v5 + 80);
  v79 = *(_QWORD *)(v8 + 64);
  if (v7 == v10)
  {
    if (v4 >= v6)
      v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v85 + 48))(a1, v4, AssociatedTypeWitness);
    else
      v18 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a1 + v14) & v13, v6, v84);
    if (v18)
    {
      if (v4 >= v6)
      {
        v41 = v4;
        v22 = a2;
        v24 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v85 + 48))(a2, v41, AssociatedTypeWitness);
      }
      else
      {
        v22 = a2;
        v24 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a2 + v14) & v13, v6, v84);
      }
      v20 = a1;
      goto LABEL_34;
    }
    if (v4 >= v6)
    {
      v48 = v4;
      v22 = a2;
      v40 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v85 + 48))(a2, v48, AssociatedTypeWitness);
    }
    else
    {
      v22 = a2;
      v40 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a2 + v14) & v13, v6, v84);
    }
    v20 = a1;
    if (v40)
    {
LABEL_46:
      (*(void (**)(void *, uint64_t))(v85 + 8))(v20, AssociatedTypeWitness);
      v39 = v13;
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v20 + v14) & v13, v84);
      v49 = ((unint64_t)v20 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
      __swift_destroy_boxed_opaque_existential_1(v49);
      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      v50 = (v17 + ((v49 + 95) & 0xFFFFFFFFFFFFFFF8)) & v77;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v50, 1, v78))
        (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v50, v78);
      v42 = v82;
      v51 = 3;
      if (!v82)
        v51 = 4;
      v38 = v79;
      v44 = v80;
      v45 = v51 + v79 + v80;
      v46 = v20;
      v22 = a2;
      goto LABEL_51;
    }
LABEL_27:
    (*(void (**)(void *, const void *, uint64_t))(v85 + 40))(v20, v22, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40))(((unint64_t)v20 + v14) & v13, ((unint64_t)v22 + v14) & v13, v84);
    v76 = v20;
    v27 = ((unint64_t)v20 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    v28 = ((unint64_t)v22 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    __swift_destroy_boxed_opaque_existential_1(v27);
    v29 = *(_OWORD *)v28;
    v30 = *(_OWORD *)(v28 + 16);
    *(_QWORD *)(v27 + 32) = *(_QWORD *)(v28 + 32);
    *(_OWORD *)v27 = v29;
    *(_OWORD *)(v27 + 16) = v30;
    *(_QWORD *)(v27 + 40) = *(_QWORD *)(v28 + 40);
    swift_release();
    *(_DWORD *)(v27 + 48) = *(_DWORD *)(v28 + 48);
    *(_DWORD *)(v27 + 52) = *(_DWORD *)(v28 + 52);
    *(_QWORD *)(v27 + 56) = *(_QWORD *)(v28 + 56);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v27 + 64) = *(_QWORD *)(v28 + 64);
    *(_QWORD *)(v27 + 72) = *(_QWORD *)(v28 + 72);
    v31 = *(void **)(v27 + 80);
    *(_QWORD *)(v27 + 80) = *(_QWORD *)(v28 + 80);

    v32 = (_QWORD *)((v27 + 95) & 0xFFFFFFFFFFFFFFF8);
    v33 = (_QWORD *)((v28 + 95) & 0xFFFFFFFFFFFFFFF8);
    *v32 = *v33;
    swift_bridgeObjectRelease();
    v34 = (char *)(((unint64_t)v32 + v17) & v77);
    v35 = (char *)(((unint64_t)v33 + v17) & v77);
    v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
    LODWORD(v32) = v36(v34, 1, v78);
    v37 = v36(v35, 1, v78);
    if ((_DWORD)v32)
    {
      v38 = v79;
      v39 = v13;
      if (!v37)
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v34, v35, v78);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v34, 0, 1, v78);
LABEL_63:
        v42 = v82;
LABEL_64:
        if (v42)
          v66 = v38;
        else
          v66 = v38 + 1;
        v67 = &v34[v66];
        v68 = &v35[v66];
        *v67 = *v68;
        v67[1] = v68[1];
        v67[2] = v68[2];
        v20 = v76;
        v22 = a2;
        v44 = v80;
        v52 = v81;
        goto LABEL_68;
      }
    }
    else
    {
      v38 = v79;
      v39 = v13;
      if (!v37)
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 40))(v34, v35, v78);
        goto LABEL_63;
      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v34, v78);
    }
    v42 = v82;
    if (v82)
      v47 = v38;
    else
      v47 = v38 + 1;
    memcpy(v34, v35, v47);
    goto LABEL_64;
  }
  v19 = ((unint64_t)a1 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = a1;
  if ((v9 & 0x80000000) != 0)
  {
    v22 = a2;
    if (v82 >= 2)
    {
      v25 = *(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v8 + 48);
      v75 = v25((v17 + ((v19 + 95) & 0xFFFFFFFFFFFFFFF8)) & v77, v82, v78);
      v26 = v25((v17 + (((((unint64_t)a2 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & v77, v82, v78);
      if (v75 >= 2)
      {
        v22 = a2;
        if (v26 >= 2)
          goto LABEL_35;
        goto LABEL_53;
      }
      v22 = a2;
      if (v26 >= 2)
        goto LABEL_46;
    }
    goto LABEL_27;
  }
  v21 = *(_QWORD *)(v19 + 24);
  v22 = a2;
  v23 = *(_QWORD *)((((unint64_t)a2 + v15 + 7) & 0xFFFFFFFFFFFFF8) + 0x18);
  if (v23 >= 0xFFFFFFFF)
    LODWORD(v23) = -1;
  v24 = v23 + 1;
  if (v21 > 0xFFFFFFFE)
  {
    if ((_DWORD)v23 != -1)
      goto LABEL_46;
    goto LABEL_27;
  }
LABEL_34:
  if (v24)
  {
LABEL_35:
    v39 = v13;
    v42 = v82;
    v43 = 3;
    if (!v82)
      v43 = 4;
    v38 = v79;
    v44 = v80;
    v45 = v43 + v79 + v80;
    v46 = v20;
LABEL_51:
    memcpy(v46, v22, v45);
    v52 = v81;
    goto LABEL_68;
  }
LABEL_53:
  (*(void (**)(void *, const void *, uint64_t))(v85 + 32))(v20, v22, AssociatedTypeWitness);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)v20 + v14) & v13, ((unint64_t)v22 + v14) & v13, v84);
  v53 = v20;
  v54 = ((unint64_t)v20 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v55 = ((unint64_t)v22 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v56 = *(_OWORD *)(v55 + 16);
  *(_OWORD *)v54 = *(_OWORD *)v55;
  *(_OWORD *)(v54 + 16) = v56;
  v58 = *(_OWORD *)(v55 + 48);
  v57 = *(_OWORD *)(v55 + 64);
  v59 = *(_OWORD *)(v55 + 32);
  *(_QWORD *)(v54 + 80) = *(_QWORD *)(v55 + 80);
  *(_OWORD *)(v54 + 48) = v58;
  *(_OWORD *)(v54 + 64) = v57;
  *(_OWORD *)(v54 + 32) = v59;
  v60 = (_QWORD *)((v54 + 95) & 0xFFFFFFFFFFFFFFF8);
  v61 = (_QWORD *)((v55 + 95) & 0xFFFFFFFFFFFFFFF8);
  *v60 = *v61;
  v62 = (char *)(((unint64_t)v60 + v17) & v77);
  v63 = (const void *)(((unint64_t)v61 + v17) & v77);
  v39 = v13;
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v63, 1, v78))
  {
    v42 = v82;
    v38 = v79;
    if (v82)
      v64 = v79;
    else
      v64 = v79 + 1;
    memcpy(v62, v63, v64);
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v8 + 32))(v62, v63, v78);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v62, 0, 1, v78);
    v42 = v82;
    v38 = v79;
    if (v82)
      v64 = v79;
    else
      v64 = v79 + 1;
  }
  v44 = v80;
  v52 = v81;
  v65 = &v62[v64];
  *v65 = *((_BYTE *)v63 + v64);
  v65[1] = *((_BYTE *)v63 + v64 + 1);
  v65[2] = *((_BYTE *)v63 + v64 + 2);
  v20 = v53;
  v22 = a2;
LABEL_68:
  v69 = 3;
  if (!v42)
    v69 = 4;
  v70 = *(unsigned __int8 *)(v85 + 80) | v52;
  v71 = v69 + v38 + v70 + v44;
  v72 = ((unint64_t)v20 + v71) & ~v70;
  v73 = ((unint64_t)v22 + v71) & ~v70;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v85 + 40))(v72, v73, AssociatedTypeWitness);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40))((v14 + v72) & v39, (v14 + v73) & v39, v84);
  return v20;
}

uint64_t getEnumTagSinglePayload for ListContentVisitor(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t (*v30)(unint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  uint64_t result;
  uint64_t AssociatedTypeWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(unsigned int *)(v3 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= v4)
    v8 = v4;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v10 = *(_DWORD *)(v9 + 84);
  v11 = v10 - 1;
  if (!v10)
    v11 = 0;
  if (v8 <= v11)
    v12 = v11;
  else
    v12 = v8;
  if (v12 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = v12;
  if (v8 <= v13 - 1)
    v14 = v13 - 1;
  else
    v14 = v8;
  if (v10)
    v15 = 3;
  else
    v15 = 4;
  if (!a2)
    return 0;
  v16 = *(_DWORD *)(v6 + 80);
  v17 = *(_QWORD *)(v3 + 64) + v16;
  v18 = (v17 & ~v16) + *(_QWORD *)(v6 + 64);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = v15 + *(_QWORD *)(v9 + 64);
  v21 = *(unsigned __int8 *)(v3 + 80) | *(_DWORD *)(v6 + 80);
  v22 = v20 + v21 + ((v19 + 8 + ((((v18 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & ~v19);
  if (a2 <= v14)
    goto LABEL_37;
  v23 = (v22 & ~v21) + v18;
  v24 = 8 * v23;
  if (v23 <= 3)
  {
    v26 = ((a2 - v14 + ~(-1 << v24)) >> v24) + 1;
    if (HIWORD(v26))
    {
      v25 = *(_DWORD *)(a1 + v23);
      if (!v25)
        goto LABEL_37;
      goto LABEL_28;
    }
    if (v26 > 0xFF)
    {
      v25 = *(unsigned __int16 *)(a1 + v23);
      if (!*(_WORD *)(a1 + v23))
        goto LABEL_37;
      goto LABEL_28;
    }
    if (v26 < 2)
    {
LABEL_37:
      if (v13 - 1 < v8)
      {
        v29 = (v22 + a1) & ~v21;
        if (v4 >= v7)
        {
          v30 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48);
          v31 = v4;
          v32 = AssociatedTypeWitness;
        }
        else
        {
          v29 = (v17 + v29) & ~v16;
          v30 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
          v31 = v7;
          v32 = v5;
        }
        return v30(v29, v31, v32);
      }
      if (v8 != v13)
      {
        v33 = (a1 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
        if ((v12 & 0x80000000) != 0)
        {
          if (v10 >= 2)
          {
            v36 = (*(uint64_t (**)(unint64_t))(v9 + 48))((v19 + 8 + ((v33 + 95) & 0xFFFFFFFFFFFFFFF8)) & ~v19);
            if (v36 >= 2)
            {
              v37 = v36 != 1;
              result = v36 - 2;
              if ((_DWORD)result != 0 && v37)
                return result;
            }
          }
        }
        else
        {
          v34 = *(_QWORD *)(v33 + 24);
          if (v34 >= 0xFFFFFFFF)
            LODWORD(v34) = -1;
          v35 = v34 + 1;
          result = v35 - 1;
          if (v35 > 1)
            return result;
        }
      }
      return 0;
    }
  }
  v25 = *(unsigned __int8 *)(a1 + v23);
  if (!*(_BYTE *)(a1 + v23))
    goto LABEL_37;
LABEL_28:
  v27 = (v25 - 1) << v24;
  if (v23 > 3)
    v27 = 0;
  if ((_DWORD)v23)
  {
    if (v23 <= 3)
      v28 = (v22 & ~(_DWORD)v21) + v18;
    else
      v28 = 4;
    __asm { BR              X12 }
  }
  return v14 + v27 + 1;
}

void storeEnumTagSinglePayload for ListContentVisitor(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= v5)
    v7 = v5;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = 0u;
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v10 = *(_DWORD *)(v9 + 84);
  v11 = v10 - 1;
  if (!v10)
    v11 = 0;
  if (v7 <= v11)
    v12 = v11;
  else
    v12 = v7;
  if (v12 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = v12;
  if (v7 <= v13 - 1)
    v14 = v13 - 1;
  else
    v14 = v7;
  v15 = ((*(_QWORD *)(v4 + 64) + *(_DWORD *)(v6 + 80)) & ~(unint64_t)*(_DWORD *)(v6 + 80))
      + *(_QWORD *)(v6 + 64);
  v16 = *(_QWORD *)(v9 + 64);
  if (!v10)
    ++v16;
  v17 = v16
      + ((*(unsigned __int8 *)(v9 + 80) + 8 + ((((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v18 = *(unsigned __int8 *)(v4 + 80) | *(_DWORD *)(v6 + 80);
  v19 = ((v17 + v18 + 3) & ~(_DWORD)v18) + v15;
  if (a3 > v14)
  {
    if (v19 <= 3)
    {
      v20 = ((a3 - v14 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
      if (HIWORD(v20))
      {
        v8 = 4u;
      }
      else if (v20 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v20 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  if (v14 < a2)
  {
    v21 = ~v14 + a2;
    if (v19 < 4)
    {
      if (v19)
      {
        v22 = v21 & ~(-1 << (8 * v19));
        bzero(a1, ((v17 + v18 + 3) & ~v18) + v15);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v22;
          a1[2] = BYTE2(v22);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, ((v17 + v18 + 3) & ~v18) + v15);
      *(_DWORD *)a1 = v21;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

void sub_1870BFBF0()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = v0;
}

void sub_1870BFBF8()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = v0;
}

void sub_1870BFC94()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
}

void sub_1870BFC9C()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_1870BFCAC()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

void sub_1870BFCB4()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1870BFCC4()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1870BFCCC()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(__int16 a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1870BFD90@<X0>(char a1@<W8>)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (a1)
  {
    if (a1 == 1)
      v1 = 0x6F43656C62756F64;
    else
      v1 = 7105633;
    if (a1 == 1)
      v2 = 0xEC0000006E6D756CLL;
    else
      v2 = 0xE300000000000000;
  }
  else
  {
    v1 = 0x6E4F6C6961746564;
    v2 = 0xEA0000000000796CLL;
  }
  v3 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  return swift_bridgeObjectRelease();
}

void UISplitViewControllerVisibilityEngine.visibility.getter(__int16 *a1@<X8>)
{
  uint64_t v1;
  __int16 v3;
  uint64_t v4;

  if (*(_QWORD *)(v1 + 24) > 1uLL)
  {
    v3 = 512;
  }
  else
  {
    v3 = *(_WORD *)(v1 + 18);
    if ((v3 & 0xFF00) == 0x200)
    {
      type metadata accessor for Binding<AnyNavigationSplitVisibility>();
      MEMORY[0x18D75B9C8](&v4);
      __asm { BR              X12 }
    }
  }
  *a1 = v3;
}

void sub_1870BFEBC()
{
  JUMPOUT(0x1870BFEA8);
}

uint64_t UISplitViewControllerVisibilityEngine.initialDisplayMode.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  __int16 v4;
  uint64_t v5;
  void (*v6)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v7;
  void *v8;
  id v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double Width;
  double v19;
  __int16 v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  __int16 v24;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;

  v1 = *v0;
  v2 = v0[1];
  v3 = *((_WORD *)v0 + 8);
  v4 = *((_WORD *)v0 + 9);
  v6 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[3];
  v5 = v0[4];
  v7 = v0[5];
  if ((unint64_t)v6 >= 2)
  {
    v8 = (void *)objc_opt_self();
    swift_retain();
    v9 = objc_msgSend(v8, sel_mainScreen);
    objc_msgSend(v9, sel_bounds);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    v17 = v16;

    v30.origin.x = v11;
    v30.origin.y = v13;
    v30.size.width = v15;
    v30.size.height = v17;
    Width = CGRectGetWidth(v30);
    v31.origin.x = v11;
    v31.origin.y = v13;
    v31.size.width = v15;
    v31.size.height = v17;
    if (CGRectGetHeight(v31) >= Width)
      v19 = 1194.0;
    else
      v19 = 1024.0;
    v32.origin.x = v11;
    v32.origin.y = v13;
    v32.size.width = v15;
    v32.size.height = v17;
    LOBYTE(v29) = CGRectGetWidth(v32) >= v19;
    BYTE1(v29) = 1;
    v6(&v26, &v29);
    v20 = v26;
    if ((v26 & 0xFF00) != 0x200)
    {
      v26 = v1;
      v27 = v2;
      v28 = v3;
      swift_retain();
      swift_retain();
      outlined copy of NavigationEventHandlers?((uint64_t)v6, v5, v7);
      type metadata accessor for Binding<AnyNavigationSplitVisibility>();
      MEMORY[0x18D75B9C8](&v29);
      v23 = (unsigned __int16)v29 >> 14;
      if (v23 < 2 || v23 == 3 && (unsigned __int16)v29 == 49152)
      {
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v6);
        swift_release();
        swift_release();
        outlined consume of NavigationEventHandlers?((uint64_t)v6, v5, v7);
        v24 = 0x4000;
      }
      else
      {
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v6);
        swift_release();
        swift_release();
        outlined consume of NavigationEventHandlers?((uint64_t)v6, v5, v7);
        v24 = 0x8000;
      }
      LOWORD(v26) = v20 & 0x1FF | v24;
      return AnyNavigationSplitVisibility.Kind.displayMode(proposed:behavior:)();
    }
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v6);
  }
  if ((v4 & 0xFF00) == 0x200)
  {
    v26 = v1;
    v27 = v2;
    v28 = v3;
    type metadata accessor for Binding<AnyNavigationSplitVisibility>();
    MEMORY[0x18D75B9C8](&v29);
    LOWORD(v26) = v29;
    return AnyNavigationSplitVisibility.Kind.displayMode(proposed:behavior:)();
  }
  v26 = v1;
  v27 = v2;
  v28 = v3;
  swift_retain();
  swift_retain();
  outlined copy of NavigationEventHandlers?((uint64_t)v6, v5, v7);
  type metadata accessor for Binding<AnyNavigationSplitVisibility>();
  MEMORY[0x18D75B9C8](&v29);
  v21 = (unsigned __int16)v29 >> 14;
  if (v21 < 2 || v21 == 3 && (unsigned __int16)v29 == 49152)
    v22 = 2;
  else
    v22 = 4;
  swift_release();
  swift_release();
  outlined consume of NavigationEventHandlers?((uint64_t)v6, v5, v7);
  if (!(_BYTE)v4)
    return 1;
  if (v4 == 1)
    return 2;
  return v22;
}

uint64_t AnyNavigationSplitVisibility.Kind.displayMode(proposed:behavior:)()
{
  unsigned __int16 *v0;

  return ((uint64_t (*)(void))((char *)sub_1870C0248 + 4 * byte_187C076F8[*v0 >> 14]))();
}

uint64_t sub_1870C0248@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (a4)
  {
    if (a4 == 1)
    {
      if (a3)
      {
        v4 = 2;
        v5 = 2;
        if (((a1 - 3) & 0xFFFFFFFFFFFFFFFDLL) == 0)
          v5 = 3;
        if ((a2 & 1) == 0)
          v4 = v5;
        if (a3 == 1)
          return 3;
        else
          return v4;
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  else if (a3)
  {
    v7 = 3;
    if (!(a2 & 1 | ((unint64_t)(a1 - 2) < 5)))
      v7 = 1;
    if (a3 == 1)
      return v7;
    else
      return 0;
  }
  else if (a2 & 1 | ((unint64_t)(a1 - 2) < 5))
  {
    return 2;
  }
  else
  {
    return 1;
  }
}

UISplitViewControllerDisplayMode __swiftcall UISplitViewControllerVisibilityEngine.displayModeForExpanding(proposed:)(UISplitViewControllerDisplayMode proposed)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  __int16 v5;
  uint64_t v6;
  void (*v7)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v8;
  void *v9;
  id v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double Width;
  double v20;
  double v21;
  uint64_t v22;
  unsigned int v23;
  __int16 v24;
  int v25;
  BOOL v26;
  int v27;
  id v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  double v37;
  double v38;
  __int16 v39;
  unsigned int v40;
  UISplitViewControllerDisplayMode v41;
  unsigned int v42;
  __int16 v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;

  v2 = *v1;
  v3 = v1[1];
  v4 = *((_WORD *)v1 + 8);
  v5 = *((_WORD *)v1 + 9);
  v7 = (void (*)(uint64_t *__return_ptr, uint64_t *))v1[3];
  v6 = v1[4];
  v8 = v1[5];
  if ((unint64_t)v7 >= 2)
  {
    v9 = (void *)objc_opt_self();
    swift_retain();
    v10 = objc_msgSend(v9, sel_mainScreen);
    objc_msgSend(v10, sel_bounds);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;

    v50.origin.x = v12;
    v50.origin.y = v14;
    v50.size.width = v16;
    v50.size.height = v18;
    Width = CGRectGetWidth(v50);
    v51.origin.x = v12;
    v51.origin.y = v14;
    v51.size.width = v16;
    v51.size.height = v18;
    if (CGRectGetHeight(v51) >= Width)
      v20 = 1194.0;
    else
      v20 = 1024.0;
    v52.origin.x = v12;
    v52.origin.y = v14;
    v52.size.width = v16;
    v52.size.height = v18;
    v21 = CGRectGetWidth(v52);
    v46 = v2;
    v47 = v3;
    v48 = v4;
    swift_retain();
    swift_retain();
    outlined copy of NavigationEventHandlers?((uint64_t)v7, v6, v8);
    type metadata accessor for Binding<AnyNavigationSplitVisibility>();
    v45 = v22;
    MEMORY[0x18D75B9C8](&v49);
    v23 = (unsigned __int16)v49 >> 14;
    if (v23 < 2 || v23 == 3 && (unsigned __int16)v49 == 49152)
    {
      swift_release();
      swift_release();
      outlined consume of NavigationEventHandlers?((uint64_t)v7, v6, v8);
      v24 = 16640;
    }
    else
    {
      swift_release();
      swift_release();
      outlined consume of NavigationEventHandlers?((uint64_t)v7, v6, v8);
      v24 = -32512;
    }
    LOWORD(v49) = v24 | (v21 >= v20);
    AnyNavigationSplitVisibility.Kind.adoptingVisibleLeadingColumnCount(_:)();
    v25 = (unsigned __int16)v46 >> 14;
    if (v25 == 2 || v25 == 1)
    {
      v26 = v46;
      v27 = BYTE1(v46) & 1;
    }
    else
    {
      v28 = objc_msgSend(v9, sel_mainScreen);
      objc_msgSend(v28, sel_bounds);
      v30 = v29;
      v32 = v31;
      v34 = v33;
      v36 = v35;

      v53.origin.x = v30;
      v53.origin.y = v32;
      v53.size.width = v34;
      v53.size.height = v36;
      v37 = CGRectGetWidth(v53);
      v54.origin.x = v30;
      v54.origin.y = v32;
      v54.size.width = v34;
      v54.size.height = v36;
      if (CGRectGetHeight(v54) >= v37)
        v38 = 1194.0;
      else
        v38 = 1024.0;
      v55.origin.x = v30;
      v55.origin.y = v32;
      v55.size.width = v34;
      v55.size.height = v36;
      v26 = CGRectGetWidth(v55) >= v38;
      LOBYTE(v27) = 1;
    }
    LOBYTE(v49) = v26;
    BYTE1(v49) = v27;
    v7(&v46, &v49);
    v39 = v46;
    if ((v46 & 0xFF00) != 0x200)
    {
      v46 = v2;
      v47 = v3;
      v48 = v4;
      swift_retain();
      swift_retain();
      outlined copy of NavigationEventHandlers?((uint64_t)v7, v6, v8);
      MEMORY[0x18D75B9C8](&v49, v45);
      v42 = (unsigned __int16)v49 >> 14;
      if (v42 < 2 || v42 == 3 && (unsigned __int16)v49 == 49152)
      {
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v7);
        swift_release();
        swift_release();
        outlined consume of NavigationEventHandlers?((uint64_t)v7, v6, v8);
        v43 = 0x4000;
      }
      else
      {
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v7);
        swift_release();
        swift_release();
        outlined consume of NavigationEventHandlers?((uint64_t)v7, v6, v8);
        v43 = 0x8000;
      }
      LOWORD(v46) = v39 & 0x1FF | v43;
      return AnyNavigationSplitVisibility.Kind.displayMode(proposed:behavior:)();
    }
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v7);
  }
  if ((v5 & 0xFF00) == 0x200)
  {
    v46 = v2;
    v47 = v3;
    v48 = v4;
    type metadata accessor for Binding<AnyNavigationSplitVisibility>();
    MEMORY[0x18D75B9C8](&v49);
    LOWORD(v46) = v49;
    return AnyNavigationSplitVisibility.Kind.displayMode(proposed:behavior:)();
  }
  v46 = v2;
  v47 = v3;
  v48 = v4;
  swift_retain();
  swift_retain();
  outlined copy of NavigationEventHandlers?((uint64_t)v7, v6, v8);
  type metadata accessor for Binding<AnyNavigationSplitVisibility>();
  MEMORY[0x18D75B9C8](&v49);
  v40 = (unsigned __int16)v49 >> 14;
  if (v40 < 2 || v40 == 3 && (unsigned __int16)v49 == 49152)
    v41 = UISplitViewControllerDisplayModeOneBesideSecondary;
  else
    v41 = UISplitViewControllerDisplayModeTwoBesideSecondary;
  swift_release();
  swift_release();
  outlined consume of NavigationEventHandlers?((uint64_t)v7, v6, v8);
  if (!(_BYTE)v5)
    return 1;
  if (v5 == 1)
    return 2;
  return v41;
}

SwiftUI::NavigationSplitViewVisibility_optional __swiftcall UISplitViewControllerVisibilityEngine.updateSplitViewController(_:isAnimated:)(UISplitViewController *_, Swift::Bool isAnimated)
{
  __int16 *v2;
  uint64_t v3;
  _BOOL4 v4;
  __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _DWORD *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  __int16 *v48;
  SwiftUI::NavigationSplitViewVisibility_optional v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  UISplitViewController *v53;
  uint64_t v54;
  uint64_t v55;
  __int16 *v56;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unsigned __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;

  v4 = isAnimated;
  v6 = v2;
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v51 - v13;
  v15 = *(_QWORD *)(v3 + 8);
  v63 = *(_QWORD *)v3;
  v62 = *(unsigned __int16 *)(v3 + 16);
  v16 = *(_WORD *)(v3 + 18);
  v18 = *(_QWORD *)(v3 + 24);
  v17 = *(_QWORD *)(v3 + 32);
  v58 = *(_QWORD *)(v3 + 40);
  v59 = v17;
  v60 = *(_QWORD *)(v3 + 48);
  if ((v16 & 0xFF00) == 0x200)
  {
    static Log.splitViewVisibility.getter();
    v19 = type metadata accessor for Logger();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v10, 1, v19);
    v55 = v15;
    if (v21 == 1)
    {
      outlined destroy of Logger?((uint64_t)v10);
      v22 = v63;
    }
    else
    {
      v52 = v20;
      v53 = _;
      v54 = v19;
      v31 = v63;
      swift_retain();
      swift_retain();
      v33 = v58;
      v32 = v59;
      outlined copy of NavigationEventHandlers?(v18, v59, v58);
      swift_retain();
      swift_retain();
      v61 = v18;
      outlined copy of NavigationEventHandlers?(v18, v32, v33);
      v34 = Logger.logObject.getter();
      v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v51 = v34;
        v57 = v4;
        v56 = v6;
        v36 = (_DWORD *)swift_slowAlloc();
        v65 = swift_slowAlloc();
        v66 = v31;
        *v36 = 136315138;
        v67 = v15;
        v68 = v62;
        type metadata accessor for Binding<AnyNavigationSplitVisibility>();
        MEMORY[0x18D75B9C8](&v64);
        __asm { BR              X11 }
      }
      swift_release();
      swift_release();

      v50 = v61;
      outlined consume of NavigationEventHandlers?(v61, v32, v33);
      swift_release();
      swift_release();
      outlined consume of NavigationEventHandlers?(v50, v32, v33);
      v22 = v31;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v10, v54);
    }
    v66 = v22;
    v67 = v55;
    v68 = v62;
    type metadata accessor for Binding<AnyNavigationSplitVisibility>();
    MEMORY[0x18D75B9C8](&v65);
    LOWORD(v66) = v65;
    AnyNavigationSplitVisibility.Kind.updateSplitViewController(_:isAnimated:)();
  }
  else
  {
    v61 = v18;
    v57 = v4;
    v56 = v6;
    v23 = *(unsigned __int8 *)(v3 + 56);
    static Log.splitViewVisibility.getter();
    v24 = type metadata accessor for Logger();
    v25 = *(_QWORD *)(v24 - 8);
    v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v14, 1, v24);
    LODWORD(v54) = v23;
    if (v26 == 1)
    {
      outlined destroy of Logger?((uint64_t)v14);
      v27 = v57;
      v28 = v58;
      v29 = v61;
      v30 = v63;
    }
    else
    {
      v53 = _;
      v37 = Logger.logObject.getter();
      v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc();
        v52 = swift_slowAlloc();
        v66 = v52;
        *(_DWORD *)v39 = 136315138;
        v40 = 0x6F43656C62756F64;
        v41 = 0xEC0000006E6D756CLL;
        if (v16 != 1)
        {
          v40 = 7105633;
          v41 = 0xE300000000000000;
        }
        if ((_BYTE)v16)
          v42 = v40;
        else
          v42 = 0x6E4F6C6961746564;
        if ((_BYTE)v16)
          v43 = v41;
        else
          v43 = 0xEA0000000000796CLL;
        v51 = (v39 + 4);
        v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_186E48000, v37, v38, "updating SVC to %s", v39, 0xCu);
        v44 = v52;
        swift_arrayDestroy();
        MEMORY[0x18D760108](v44, -1, -1);
        MEMORY[0x18D760108](v39, -1, -1);
      }

      _ = v53;
      v30 = v63;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v24);
      v27 = v57;
      v28 = v58;
      v29 = v61;
    }
    LOWORD(v65) = v16 & 0x1FF;
    v66 = v30;
    v67 = v15;
    v68 = v62;
    swift_retain();
    swift_retain();
    v45 = v59;
    outlined copy of NavigationEventHandlers?(v29, v59, v28);
    type metadata accessor for Binding<AnyNavigationSplitVisibility>();
    MEMORY[0x18D75B9C8](&v64);
    v46 = v64 >> 14;
    v47 = v46 >= 2 && (v46 != 3 || v64 != 49152);
    v48 = v56;
    swift_release();
    swift_release();
    outlined consume of NavigationEventHandlers?(v61, v45, v28);
    return (SwiftUI::NavigationSplitViewVisibility_optional)NavigationSplitViewVisibility.updateSplitViewController(_:isAnimated:behavior:isThreeColumn:)(_, v27, v54, v47, v48);
  }
  return v49;
}

uint64_t NavigationSplitViewVisibility.updateSplitViewController(_:isAnimated:behavior:isThreeColumn:)@<X0>(void *a1@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, __int16 *a5@<X8>)
{
  unsigned __int8 *v5;
  __int16 v11;
  int v12;
  id v13;
  void *v14;
  char v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t (*v19)();
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  id v26;
  __int16 v27;
  __int16 v28;
  uint64_t aBlock;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  void *v32;
  uint64_t (*v33)();
  uint64_t v34;

  v11 = *v5;
  v12 = v5[1];
  v13 = objc_msgSend(a1, sel_preferredDisplayMode);
  v14 = (void *)objc_opt_self();
  v15 = a4 & 1;
  if ((a2 & 1) != 0)
  {
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = a1;
    *(_BYTE *)(v16 + 24) = v11;
    *(_BYTE *)(v16 + 25) = v12;
    *(_BYTE *)(v16 + 26) = a3;
    *(_BYTE *)(v16 + 27) = v15;
    v33 = partial apply for closure #2 in NavigationSplitViewVisibility.updateSplitViewController(_:isAnimated:behavior:isThreeColumn:);
    v34 = v16;
    aBlock = MEMORY[0x1E0C809B0];
    v30 = 1107296256;
    v31 = thunk for @escaping @callee_guaranteed () -> ();
    v32 = &block_descriptor_9_0;
    v17 = _Block_copy(&aBlock);
    v18 = a1;
    swift_release();
    objc_msgSend(v14, sel_animateWithDuration_animations_, v17, 0.5);
    _Block_release(v17);
    v19 = 0;
  }
  else
  {
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = a1;
    *(_BYTE *)(v20 + 24) = v11;
    *(_BYTE *)(v20 + 25) = v12;
    *(_BYTE *)(v20 + 26) = a3;
    *(_BYTE *)(v20 + 27) = v15;
    v21 = swift_allocObject();
    v19 = partial apply for closure #2 in NavigationSplitViewVisibility.updateSplitViewController(_:isAnimated:behavior:isThreeColumn:);
    *(_QWORD *)(v21 + 16) = partial apply for closure #2 in NavigationSplitViewVisibility.updateSplitViewController(_:isAnimated:behavior:isThreeColumn:);
    *(_QWORD *)(v21 + 24) = v20;
    v33 = partial apply for thunk for @callee_guaranteed () -> ();
    v34 = v21;
    aBlock = MEMORY[0x1E0C809B0];
    v30 = 1107296256;
    v31 = thunk for @escaping @callee_guaranteed () -> ();
    v32 = &block_descriptor_3;
    v22 = _Block_copy(&aBlock);
    v23 = a1;
    swift_retain();
    swift_release();
    objc_msgSend(v14, sel_performWithoutAnimation_, v22);
    _Block_release(v22);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
      return result;
    }
  }
  v26 = objc_msgSend(a1, sel_preferredDisplayMode);
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v19);
  if (v12)
    v27 = 256;
  else
    v27 = 0;
  v28 = v27 | v11;
  if (v26 == v13)
    v28 = 512;
  *a5 = v28;
  return result;
}

unint64_t UISplitViewControllerVisibilityEngine.description.getter()
{
  uint64_t v0;
  unint64_t v1;
  __int16 v2;
  Swift::String v3;
  Swift::String v4;
  __int16 v6;
  uint64_t v7;
  unint64_t v8;

  v1 = 0xD00000000000001DLL;
  if (*(_QWORD *)(v0 + 24) <= 1uLL)
  {
    v2 = *(_WORD *)(v0 + 18);
    if ((v2 & 0xFF00) == 0x200)
    {
      _StringGuts.grow(_:)(32);
      v7 = 0;
      v8 = 0xE000000000000000;
      v3._countAndFlagsBits = 0xD00000000000001ELL;
      v3._object = (void *)0x8000000187BD6EB0;
      String.append(_:)(v3);
      type metadata accessor for Binding<AnyNavigationSplitVisibility>();
      MEMORY[0x18D75B9C8](&v6);
      specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v6);
      return v7;
    }
    else
    {
      _StringGuts.grow(_:)(31);
      v4._object = (void *)0x8000000187BD6ED0;
      v4._countAndFlagsBits = 0xD00000000000001DLL;
      String.append(_:)(v4);
      LOWORD(v7) = v2 & 0x1FF;
      _print_unlocked<A, B>(_:_:)();
      return 0;
    }
  }
  return v1;
}

void AnyNavigationSplitVisibility.Kind.updateSplitViewController(_:isAnimated:)()
{
  __asm { BR              X11 }
}

void sub_1870C1418(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  __int16 *v18;
  void *v19;
  char v20;
  char v21;
  char *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  char *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;

  if (!v21)
    goto LABEL_13;
  if (v21 != 1)
  {
    v27 = (char *)objc_msgSend(v19, sel_displayMode);
    v28 = objc_msgSend(v19, sel_style);
    if ((unint64_t)(v27 - 4) < 3 || (v27 == (char *)3 || v27 == (char *)2) && v28 == (id)1)
    {
      v29 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v30 = swift_allocObject();
      *(_QWORD *)(v30 + 16) = v29;
      *(_BYTE *)(v30 + 24) = v20 & 1;
      *(_QWORD *)(v30 + 32) = 0;
      swift_retain();
      specialized static UIKitUpdateCycle.addPreCommitObserverOrAsyncMain(_:)((uint64_t)closure #1 in UISplitViewController.hideIfNeeded(_:isAnimated:)partial apply, v30);
      swift_release();
      swift_release();
      v26 = 0;
      goto LABEL_14;
    }
LABEL_13:
    v26 = 512;
    goto LABEL_14;
  }
  v22 = (char *)objc_msgSend(v19, sel_displayMode);
  v23 = objc_msgSend(v19, sel_style);
  if ((unint64_t)(v22 - 4) < 3 || (v22 == (char *)3 || v22 == (char *)2) && v23 == (id)1)
    goto LABEL_13;
  v24 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v24;
  *(_BYTE *)(v25 + 24) = v20 & 1;
  *(_QWORD *)(v25 + 32) = 0;
  swift_retain();
  specialized static UIKitUpdateCycle.addPreCommitObserverOrAsyncMain(_:)((uint64_t)closure #1 in UISplitViewController.showIfNeeded(_:isAnimated:)partial apply, v25);
  swift_release();
  swift_release();
  v26 = 1;
LABEL_14:
  *v18 = v26;
}

uint64_t AnyNavigationSplitVisibility.Kind.adoptingVisibleLeadingColumnCount(_:)()
{
  unsigned __int16 *v0;

  return ((uint64_t (*)(void))((char *)sub_1870C1B94 + 4 * byte_187C07708[*v0 >> 14]))();
}

uint64_t sub_1870C1B94@<X0>(uint64_t result@<X0>, __int16 *a2@<X8>)
{
  __int16 v2;

  if (result)
    v2 = 1;
  else
    v2 = 2;
  *a2 = v2;
  return result;
}

uint64_t sub_1870C1BA8@<X0>(uint64_t result@<X0>, __int16 *a2@<X8>)
{
  __int16 v2;

  if (result == 1)
    v2 = -32767;
  else
    v2 = -32766;
  if (!result)
    v2 = 0x8000;
  *a2 = v2;
  return result;
}

void AnyNavigationSplitVisibility.description.getter()
{
  __asm { BR              X11 }
}

uint64_t sub_1870C1C2C@<X0>(char a1@<W8>)
{
  if (!a1)
    return 0x6E4F6C6961746564;
  if (a1 == 1)
    return 0x6F43656C62756F64;
  return 7105633;
}

void type metadata accessor for Binding<AnyNavigationSplitVisibility>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<AnyNavigationSplitVisibility>)
  {
    v0 = type metadata accessor for Binding();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationSplitVisibility>);
  }
}

uint64_t outlined copy of NavigationEventHandlers?(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != 1)
  {
    outlined copy of AppIntentExecutor?(result);
    return outlined copy of AppIntentExecutor?(a3);
  }
  return result;
}

uint64_t outlined destroy of Logger?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for Logger?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1870C1D74()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1870C1D9C()
{
  return swift_deallocObject();
}

id partial apply for closure #2 in NavigationSplitViewVisibility.updateSplitViewController(_:isAnimated:behavior:isThreeColumn:)()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_BYTE *)(v0 + 24))
  {
    if (*(_BYTE *)(v0 + 24) == 1)
    {
      v1 = 2;
    }
    else if (*(_BYTE *)(v0 + 27))
    {
      v1 = 4;
    }
    else
    {
      v1 = 2;
    }
  }
  else
  {
    v1 = 1;
  }
  return objc_msgSend(*(id *)(v0 + 16), sel_setPreferredDisplayMode_, v1);
}

uint64_t sub_1870C1DF0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1870C1E14()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in UISplitViewController.hideIfNeeded(_:isAnimated:)()
{
  uint64_t v0;

  closure #1 in UISplitViewController.hideIfNeeded(_:isAnimated:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void partial apply for closure #1 in UISplitViewController.showIfNeeded(_:isAnimated:)()
{
  uint64_t v0;

  closure #1 in UISplitViewController.showIfNeeded(_:isAnimated:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t destroy for UISplitViewControllerVisibilityEngine(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  swift_release();
  result = swift_release();
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    if (v3 == 1)
      return result;
    result = swift_release();
  }
  if (*(_QWORD *)(a1 + 40))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for UISplitViewControllerVisibilityEngine(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v5 = (_OWORD *)(a1 + 24);
  v6 = (_OWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  if (v7)
  {
    if (v7 == 1)
    {
      v8 = v6[1];
      *v5 = *v6;
      *(_OWORD *)(a1 + 40) = v8;
      goto LABEL_9;
    }
    v9 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v9;
    swift_retain();
  }
  else
  {
    *v5 = *v6;
  }
  v10 = *(_QWORD *)(a2 + 40);
  if (v10)
  {
    v11 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v11;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
LABEL_9:
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for UISplitViewControllerVisibilityEngine(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v5 = (__int128 *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 24);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18);
  v7 = (__int128 *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 24);
  if (v4 == 1)
  {
    if (v6)
    {
      if (v6 == 1)
      {
        v8 = *v7;
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_25:
        *v5 = v8;
        goto LABEL_26;
      }
      v11 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = v11;
      swift_retain();
    }
    else
    {
      *v5 = *v7;
    }
    v12 = *(_QWORD *)(a2 + 40);
    if (!v12)
    {
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      goto LABEL_26;
    }
LABEL_22:
    v15 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v15;
    swift_retain();
    goto LABEL_26;
  }
  if (v6 != 1)
  {
    if (v4)
    {
      if (v6)
      {
        v10 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 24) = v6;
        *(_QWORD *)(a1 + 32) = v10;
        swift_retain();
        swift_release();
        goto LABEL_18;
      }
      swift_release();
    }
    else if (v6)
    {
      v13 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = v13;
      swift_retain();
      goto LABEL_18;
    }
    *v5 = *v7;
LABEL_18:
    v5 = (__int128 *)(a1 + 40);
    v12 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a1 + 40))
    {
      if (v12)
      {
        v14 = *(_QWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 40) = v12;
        *(_QWORD *)(a1 + 48) = v14;
        swift_retain();
        swift_release();
        goto LABEL_26;
      }
      swift_release();
    }
    else if (v12)
    {
      goto LABEL_22;
    }
    v8 = *(_OWORD *)(a2 + 40);
    goto LABEL_25;
  }
  outlined destroy of NavigationEventHandlers((_QWORD *)(a1 + 24));
  v9 = *(_OWORD *)(a2 + 40);
  *v5 = *v7;
  *(_OWORD *)(a1 + 40) = v9;
LABEL_26:
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

_QWORD *outlined destroy of NavigationEventHandlers(_QWORD *a1)
{
  destroy for MenuStyleConfiguration(a1);
  return a1;
}

uint64_t assignWithTake for UISplitViewControllerVisibilityEngine(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v5 = (_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  v7 = (_OWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  if (v6 == 1)
    goto LABEL_4;
  if (v4 != 1)
  {
    if (v6)
    {
      if (v4)
      {
        v10 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 24) = v4;
        *(_QWORD *)(a1 + 32) = v10;
        swift_release();
        goto LABEL_13;
      }
      swift_release();
    }
    else if (v4)
    {
      v11 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = v11;
      goto LABEL_13;
    }
    *v7 = *v5;
LABEL_13:
    v12 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a1 + 40))
    {
      if (v12)
      {
        v13 = *(_QWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 40) = v12;
        *(_QWORD *)(a1 + 48) = v13;
        swift_release();
        goto LABEL_5;
      }
      swift_release();
    }
    else if (v12)
    {
      v14 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v12;
      *(_QWORD *)(a1 + 48) = v14;
      goto LABEL_5;
    }
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_5;
  }
  outlined destroy of NavigationEventHandlers((_QWORD *)(a1 + 24));
LABEL_4:
  v8 = *(_OWORD *)(a2 + 40);
  *v7 = *v5;
  *(_OWORD *)(a1 + 40) = v8;
LABEL_5:
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for UISplitViewControllerVisibilityEngine(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UISplitViewControllerVisibilityEngine(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UISplitViewControllerVisibilityEngine()
{
  return &type metadata for UISplitViewControllerVisibilityEngine;
}

void type metadata completion function for TabViewCoordinator_Phone()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Binding<TabViewCustomization>?(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Binding<SearchFieldState>?(319);
    if (v1 <= 0x3F)
      swift_initClassMetadata2();
  }
}

uint64_t TabViewCoordinator_Phone.updateSearchIndex<A>(tabs:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  __int128 v30;
  __int16 v31;
  char v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  _OWORD v36[6];
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  char v49;

  v28 = a1;
  v26 = type metadata accessor for EnumeratedSequence();
  MEMORY[0x1E0C80A78](v26, v2);
  v3 = type metadata accessor for EnumeratedSequence.Iterator();
  v25 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v24 - v5;
  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 1;
  v49 = 1;
  v27 = v1;
  v12 = v1 + direct field offset for TabViewCoordinator_Phone.searchState;
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v12, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
  type metadata accessor for Binding<SearchFieldState>(0);
  LODWORD(v12) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v10, 1, v13);
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
  if ((_DWORD)v12 == 1)
  {
    v15 = 0;
  }
  else
  {
    Sequence.enumerated()();
    EnumeratedSequence.makeIterator()();
    EnumeratedSequence.Iterator.next()();
    outlined init with take of TableCellFormula((uint64_t)&v38, (uint64_t)&v46, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TabEntry)?);
    if (v48 != 255)
    {
      v16 = type metadata accessor for (offset: Int, element: TabEntry)?;
      do
      {
        v17 = v46;
        outlined init with take of TabEntry(&v47, &v38);
        if (v45 == 1)
        {
          outlined destroy of TabEntry((uint64_t)&v38);
        }
        else
        {
          v28 = v17;
          v18 = v3;
          v19 = v16;
          v36[5] = v43;
          v37 = v44;
          v36[0] = v38;
          v36[1] = v39;
          v36[3] = v41;
          v36[4] = v42;
          v36[2] = v40;
          v35 = *((_QWORD *)&v43 + 1);
          v20 = one-time initialization token for defaultValue;
          swift_bridgeObjectRetain();
          if (v20 != -1)
            swift_once();
          v29 = static TabOptions.TraitKey.defaultValue;
          v30 = *(_OWORD *)&qword_1EDF00118;
          v31 = word_1EDF00128;
          v32 = byte_1EDF0012A;
          v33 = qword_1EDF00130;
          v34 = word_1EDF00138;
          ViewTraitCollection.value<A>(for:defaultValue:)();
          swift_bridgeObjectRelease();
          v21 = BYTE9(v40);
          outlined consume of TabCustomizationID?(*((uint64_t *)&v38 + 1), v39, BYTE8(v39));
          swift_bridgeObjectRelease();
          outlined destroy of TabItem((uint64_t)v36);
          if ((v21 & 1) == 0)
          {
            result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v6, v18);
            v11 = 0;
            v22 = v27;
            v15 = v28;
            goto LABEL_14;
          }
          v16 = v19;
          v3 = v18;
        }
        EnumeratedSequence.Iterator.next()();
        outlined init with take of TableCellFormula((uint64_t)&v38, (uint64_t)&v46, (uint64_t (*)(_QWORD))v16);
      }
      while (v48 != 255);
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v6, v3);
    v15 = 0;
    v11 = v49;
  }
  v22 = v27;
LABEL_14:
  v23 = v22 + direct field offset for TabViewCoordinator_Phone.searchIndex;
  *(_QWORD *)v23 = v15;
  *(_BYTE *)(v23 + 8) = v11;
  return result;
}

SwiftUI::SearchAdjustment __swiftcall TabViewCoordinator_Phone.searchAdjustment(index:)(Swift::Int index)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  SwiftUI::SearchAdjustment v9;
  int v10;
  uint64_t v12;

  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1 + direct field offset for TabViewCoordinator_Phone.searchState;
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v7, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
  type metadata accessor for Binding<SearchFieldState>(0);
  v9 = SwiftUI_SearchAdjustment_disabled;
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
  if (v10 != 1)
  {
    if ((*(_BYTE *)(v1 + direct field offset for TabViewCoordinator_Phone.searchIndex + 8) & 1) != 0)
    {
      return 2;
    }
    else if (*(_QWORD *)(v1 + direct field offset for TabViewCoordinator_Phone.searchIndex) == index)
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
  return v9;
}

uint64_t @objc TabViewCoordinator_Phone.tabBarController(_:shouldSelect:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  char v9;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  v9 = specialized TabViewCoordinator_Phone.tabBarController(_:shouldSelect:)(v6);

  return v9 & 1;
}

Swift::Void __swiftcall TabViewCoordinator_Phone.tabBarController(_:didSelect:)(UITabBarController *_, UIViewController *didSelect)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  char *v17;
  UIViewController *v18;
  UIViewController *v19;
  uint64_t v20;
  void *v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  UIViewController *v25;
  uint64_t v26;
  UIViewController *v27;
  void *v28;
  id v29;
  UIViewController *v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  UIViewController *v35;
  UIViewController *v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(UITabBarController *, UIViewController *, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  id v59;
  uint64_t v60;
  UIViewController *v61;
  id v62;
  uint64_t v63;
  UITabBarController *v64;

  v3 = v2;
  v63 = *v3;
  v64 = _;
  v5 = *MEMORY[0x1E0DEEDD8];
  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<SearchFieldState>(0);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  v14 = MEMORY[0x1E0C80A78](v10, v13);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (char *)v3 + direct field offset for TabViewCoordinator_Phone.lastSelection;
  v18 = (UIViewController *)MEMORY[0x18D760234]((char *)v3 + direct field offset for TabViewCoordinator_Phone.lastSelection, v14);
  if (v18)
  {
    v19 = v18;

    if (v19 == didSelect)
    {
      type metadata accessor for UIHostingController<TabItem.RootView>(0);
      v20 = swift_dynamicCastClass();
      if (v20)
      {
        v21 = (void *)v20;
        v61 = didSelect;
        v62 = v21;
        v22 = objc_msgSend(v21, sel_childViewControllers);
        v60 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
        v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v23 >> 62)
        {
          swift_bridgeObjectRetain();
          v24 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        if (v24 != 1)
          goto LABEL_16;
        v25 = (UIViewController *)objc_msgSend(v62, sel_childViewControllers);
        v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v26 & 0xC000000000000001) != 0)
        {
          v27 = (UIViewController *)MEMORY[0x18D75E3BC](0, v26);
        }
        else
        {
          if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_34;
          }
          v27 = (UIViewController *)*(id *)(v26 + 32);
        }
        v25 = v27;
        swift_bridgeObjectRelease();
        objc_opt_self();
        v28 = (void *)swift_dynamicCastObjCClass();
        if (!v28)
        {
LABEL_15:

LABEL_16:
          v30 = (UIViewController *)objc_msgSend(v62, sel_contentScrollView);
          if (!v30)
          {
            v25 = v61;
            goto LABEL_20;
          }
          v25 = v30;
          -[UIViewController contentOffset](v30, sel_contentOffset);
          v32 = v31;
          -[UIViewController adjustedContentInset](v25, sel_adjustedContentInset);
          -[UIViewController setContentOffset:animated:](v25, sel_setContentOffset_animated_, 1, v32, -v33);
LABEL_18:

LABEL_20:
          goto LABEL_21;
        }
        v59 = v28;
        v29 = objc_msgSend(v28, sel_viewControllers);
        v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v26 = v58;
        if (!(v58 >> 62))
        {
          v60 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_13;
        }
LABEL_34:
        v56 = v26 & 0xFFFFFFFFFFFFFF8;
        if (v26 < 0)
          v56 = v26;
        v60 = v56;
        swift_bridgeObjectRetain();
        v60 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
LABEL_13:
        swift_bridgeObjectRelease();
        if (v60 >= 2)
        {

          goto LABEL_18;
        }
        goto LABEL_15;
      }
    }
  }
LABEL_21:
  v34 = v5 & v63;
  if (*((_BYTE *)v3 + direct field offset for TabViewCoordinator_Phone.searchIndex + 8) == 1)
  {
    v35 = (UIViewController *)MEMORY[0x18D760234](v17);
    if (!v35 || (v36 = v35, v35, v36 != didSelect))
    {
      v37 = (uint64_t)v3 + direct field offset for TabViewCoordinator_Phone.searchState;
      swift_beginAccess();
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v37, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11) == 1)
      {
        v38 = type metadata accessor for Binding<SearchFieldState>?;
        v39 = (uint64_t)v9;
      }
      else
      {
        v40 = outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
        MEMORY[0x1E0C80A78](v40, v41);
        *(&v57 - 2) = (uint64_t)v16;
        MEMORY[0x1E0C80A78](v42, v43);
        *(&v57 - 2) = (uint64_t)partial apply for closure #1 in TabViewCoordinator_Phone.tabBarController(_:didSelect:);
        *(&v57 - 1) = v44;
        static Update.dispatchImmediately<A>(_:)();
        v39 = (uint64_t)v16;
        v38 = type metadata accessor for Binding<SearchFieldState>;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v39, (uint64_t (*)(_QWORD))v38);
    }
  }
  v45 = *(_QWORD *)(v34 + 80);
  v46 = (_QWORD *)((char *)v3 + direct field offset for TabViewCoordinator_Phone.selectionCache);
  swift_beginAccess();
  v47 = *v46;
  v48 = *(_QWORD *)(v34 + 88);
  v49 = *(uint64_t (**)(UITabBarController *, UIViewController *, uint64_t, uint64_t, uint64_t))(v48 + 48);
  swift_bridgeObjectRetain();
  v50 = v49(v64, didSelect, v47, v45, v48);
  LOBYTE(v49) = v51;
  swift_bridgeObjectRelease();
  if ((v49 & 1) == 0)
  {
    v52 = *(_QWORD *)((char *)v3 + direct field offset for TabViewCoordinator_Phone.selected);
    v53 = *(_QWORD *)((char *)v3 + direct field offset for TabViewCoordinator_Phone.selected + 8);
    v54 = *(_QWORD *)((char *)v3 + direct field offset for TabViewCoordinator_Phone.selected + 16);
    v55 = (_QWORD *)swift_allocObject();
    v55[2] = v52;
    v55[3] = v53;
    v55[4] = v54;
    v55[5] = v50;
    swift_retain_n();
    swift_retain_n();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_unknownObjectWeakAssign();
}

uint64_t closure #1 in TabViewCoordinator_Phone.tabBarController(_:didSelect:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  char v11;
  char *v12;
  uint64_t v14;

  v0 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<SearchFieldState>(0);
  MEMORY[0x18D75B9C8]();
  v4 = v3[2];
  v5 = v3[3];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  *v3 = 2;
  v6 = (void *)objc_opt_self();
  v7 = objc_msgSend(v6, sel_currentTraitCollection);
  v8 = objc_msgSend(v7, sel_horizontalSizeClass);

  v9 = objc_msgSend(v6, sel_currentTraitCollection);
  v10 = objc_msgSend(v9, sel_userInterfaceIdiom);

  v11 = specialized SearchSuggestionsPlacement.Role.init(sizeClass:idiom:placement:)((uint64_t)v8, (uint64_t)v10, 2u);
  v3[1] = (v11 == 2) | v11 & 1;
  *((_WORD *)v3 + 1) = 2;
  *((_DWORD *)v3 + 1) = 0;
  v3[8] = 1;
  AttributedString.init()();
  v3[*(int *)(v0 + 40)] = 0;
  v12 = &v3[*(int *)(v0 + 44)];
  *(_DWORD *)v12 = 0;
  v12[4] = 0;
  SearchFieldState.hasSuggestions.setter(v4);
  SearchFieldState.hasCustomAccessory.setter(v5);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
}

void @objc TabViewCoordinator_Phone.tabBarController(_:didSelect:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  UITabBarController *v6;
  UIViewController *v7;
  id v8;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  TabViewCoordinator_Phone.tabBarController(_:didSelect:)(v6, v7);

}

uint64_t @objc TabViewCoordinator_Phone._uip_tabBarController(_:tab:operationForAcceptingItemsFrom:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;

  v8 = a3;
  v9 = a4;
  swift_unknownObjectRetain();
  v10 = a1;
  v11 = specialized TabViewCoordinator_Phone._uip_tabBarController(_:tab:operationForAcceptingItemsFrom:)((uint64_t)v9, a5);

  swift_unknownObjectRelease();
  return v11;
}

void @objc TabViewCoordinator_Phone._uip_tabBarController(_:tab:acceptItemsFrom:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a3;
  v9 = a4;
  swift_unknownObjectRetain();
  v10 = a1;
  specialized TabViewCoordinator_Phone._uip_tabBarController(_:tab:acceptItemsFrom:)((uint64_t)v9, a5);

  swift_unknownObjectRelease();
}

void @objc TabViewCoordinator_Phone._uip_tabBarController(_:dropSessionDidEnter:withDestination:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a3;
  swift_unknownObjectRetain();
  v9 = a5;
  v10 = a1;
  specialized TabViewCoordinator_Phone._uip_tabBarController(_:dropSessionDidEnter:withDestination:)(a4, a5);

  swift_unknownObjectRelease();
}

uint64_t TabViewCoordinator_Phone._tabElementGroup(_:didSelect:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  char v13;
  uint64_t result;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = v2;
  v6 = *MEMORY[0x1E0DEEDD8] & *v3;
  v7 = *(_QWORD *)(v6 + 0x50);
  v8 = (_QWORD *)((char *)v3 + direct field offset for TabViewCoordinator_Phone.selectionCache);
  swift_beginAccess();
  v9 = *v8;
  v10 = *(_QWORD *)(v6 + 88);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  swift_bridgeObjectRetain();
  v12 = v11(a1, a2, v9, v7, v10);
  LOBYTE(a1) = v13;
  result = swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
  {
    v15 = (char *)v3 + direct field offset for TabViewCoordinator_Phone.selected;
    v16 = *(_QWORD *)((char *)v3 + direct field offset for TabViewCoordinator_Phone.selected);
    v17 = *((_QWORD *)v15 + 1);
    v18 = *((_QWORD *)v15 + 2);
    v19 = (_QWORD *)swift_allocObject();
    v19[2] = v16;
    v19[3] = v17;
    v19[4] = v18;
    v19[5] = v12;
    swift_retain_n();
    swift_retain_n();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in TabViewCoordinator_Phone.tabBarController(_:didSelect:)()
{
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

void @objc TabViewCoordinator_Phone._tabElementGroup(_:didSelect:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  TabViewCoordinator_Phone._tabElementGroup(_:didSelect:)((uint64_t)v6, (uint64_t)v7);

}

uint64_t TabViewCoordinator_Phone._tabElementGroup(_:didCustomizeDisplayOrder:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  v5 = *MEMORY[0x1E0DEEDD8] & *v2;
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v5 + 80);
  v11 = (uint64_t)v2 + direct field offset for TabViewCoordinator_Phone.customization;
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v11, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
  v12 = *(_QWORD *)((char *)v2 + direct field offset for TabViewCoordinator_Phone.tabCache);
  v13 = *(_QWORD *)(v5 + 88);
  v14 = *(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t))(v13 + 112);
  swift_bridgeObjectRetain();
  v14(a1, a2, v9, v12, v10, v13);
  swift_bridgeObjectRelease();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
}

uint64_t @objc TabViewCoordinator_Phone._tabElementGroup(_:didCustomizeDisplayOrder:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  id v6;
  id v7;

  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = a3;
  v7 = a1;
  TabViewCoordinator_Phone._tabElementGroup(_:didCustomizeDisplayOrder:)((uint64_t)v6, v5);

  return swift_bridgeObjectRelease();
}

void @objc TabViewCoordinator_Phone._tabBarController(_:sidebarVisibilityDidChange:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  specialized TabViewCoordinator_Phone._tabBarController(_:sidebarVisibilityDidChange:)(v7);

}

uint64_t @objc TabViewCoordinator_Phone._tabBarController(_:sidebar:visibilityDidChangeFor:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  id v8;
  id v9;
  id v10;

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITab);
  lazy protocol witness table accessor for type _UITab and conformance NSObject();
  v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = a3;
  v9 = a4;
  v10 = a1;
  specialized TabViewCoordinator_Phone._tabBarController(_:sidebar:visibilityDidChangeFor:)(v7);

  return swift_bridgeObjectRelease();
}

id @objc TabViewCoordinator_Phone._tabBarController(_:sidebar:leadingSwipeActionsConfigurationFor:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  return @objc TabViewCoordinator_Phone._tabBarController(_:sidebar:leadingSwipeActionsConfigurationFor:)(a1, a2, a3, a4, a5, 0);
}

id @objc TabViewCoordinator_Phone._tabBarController(_:sidebar:trailingSwipeActionsConfigurationFor:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  return @objc TabViewCoordinator_Phone._tabBarController(_:sidebar:leadingSwipeActionsConfigurationFor:)(a1, a2, a3, a4, a5, 1);
}

id @objc TabViewCoordinator_Phone._tabBarController(_:sidebar:leadingSwipeActionsConfigurationFor:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a1;
  v14 = (void *)specialized TabViewCoordinator_Phone._tabBarController(_:sidebar:leadingSwipeActionsConfigurationFor:)((uint64_t)v12, a6);

  return v14;
}

id @objc TabViewCoordinator_Phone._tabBarController(_:sidebar:contextMenuConfigurationFor:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = a1;
  v12 = (void *)specialized TabViewCoordinator_Phone._tabBarController(_:sidebar:contextMenuConfigurationFor:)((uint64_t)v10);

  return v12;
}

uint64_t closure #1 in TabViewCoordinator_Phone.updatePopoverPresentation(presentations:presenter:host:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  return specialized Array.append<A>(contentsOf:)(a2);
}

void @objc TabViewCoordinator_Phone.init()()
{
  specialized TabViewCoordinator_Phone.init()();
}

void TabViewCoordinator_Phone.__ivar_destroyer()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectWeakDestroy();
  outlined consume of TabSidebarConfiguration?(*(_QWORD *)(v0 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration), *(_QWORD *)(v0 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration + 8), *(_QWORD *)(v0 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration + 16), *(_QWORD *)(v0 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration + 24), *(_QWORD *)(v0 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration + 32));
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0 + direct field offset for TabViewCoordinator_Phone.customization, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
  swift_unknownObjectWeakDestroy();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0 + direct field offset for TabViewCoordinator_Phone.searchState, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);

}

void @objc TabViewCoordinator_Phone.__ivar_destroyer(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectWeakDestroy();
  outlined consume of TabSidebarConfiguration?(*(_QWORD *)(a1 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration), *(_QWORD *)(a1 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration + 8), *(_QWORD *)(a1 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration + 16), *(_QWORD *)(a1 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration + 24), *(_QWORD *)(a1 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration + 32));
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + direct field offset for TabViewCoordinator_Phone.customization, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
  swift_unknownObjectWeakDestroy();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + direct field offset for TabViewCoordinator_Phone.searchState, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);

}

uint64_t type metadata accessor for TabViewCoordinator_Phone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TabViewCoordinator_Phone);
}

uint64_t closure #1 in static TabViewCoordinatorStrategy.rebuildTabs<A>(tabBarController:tabs:selected:environment:transaction:coordinator:)(uint64_t a1)
{
  _OWORD __dst[17];
  _BYTE __src[264];
  char v4;

  outlined init with copy of TabEntry(a1, (uint64_t)__src);
  if ((v4 & 1) != 0)
  {
    memcpy(__dst, __src, 0x108uLL);
    outlined copy of TabCustomizationID.Base();
    AnyHashable.init<A>(_:)();
    return outlined destroy of TabItemGroup((uint64_t)__dst);
  }
  else
  {
    __dst[4] = *(_OWORD *)&__src[64];
    __dst[5] = *(_OWORD *)&__src[80];
    *(_QWORD *)&__dst[6] = *(_QWORD *)&__src[96];
    __dst[0] = *(_OWORD *)__src;
    __dst[1] = *(_OWORD *)&__src[16];
    __dst[2] = *(_OWORD *)&__src[32];
    __dst[3] = *(_OWORD *)&__src[48];
    _ViewList_View.viewID.getter();
    return outlined destroy of TabItem((uint64_t)__dst);
  }
}

uint64_t protocol witness for static TabViewCoordinatorStrategy.rebuildTabs<A>(tabBarController:tabs:selected:environment:transaction:coordinator:) in conformance AdaptiveTabViewStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  return specialized static TabViewCoordinatorStrategy.rebuildTabs<A>(tabBarController:tabs:selected:environment:transaction:coordinator:)(a2, a3, a4, a5, a6, a7, a8);
}

uint64_t protocol witness for static TabViewCoordinatorStrategy.badgeValue(environment:badgeLabel:) in conformance AdaptiveTabViewStrategy(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized static TabViewCoordinatorStrategy.badgeValue(environment:badgeLabel:)(*a1, a1[1], a2, a3, a4);
}

uint64_t specialized static TabViewCoordinatorStrategy.rebuildTabs<A>(tabBarController:tabs:selected:environment:transaction:coordinator:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t AssociatedConformanceWitness;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(int64_t *, _QWORD);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  unint64_t v58;
  uint64_t v59;
  int64_t v60;
  unint64_t v61;
  uint64_t v62;
  Swift::Int v63;
  Swift::Int v64;
  uint64_t v65;
  uint64_t v66;
  Swift::Int v67;
  Swift::Int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t *, _QWORD *, uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  Swift::Int v90;
  Swift::Int v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  __int128 v97;
  __int128 v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t i;
  void *v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  int64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _OWORD v143[17];
  _BYTE v144[264];
  char v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  int64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned __int8 v155;
  char *v156;

  v113 = a4;
  v135 = a2;
  v140 = *MEMORY[0x1E0DEEDD8] & *a5;
  v12 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v111 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v112 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v14);
  v110 = (char *)&v106 - v15;
  v132 = v12;
  v130 = type metadata accessor for EnumeratedSequence();
  MEMORY[0x1E0C80A78](v130, v16);
  v17 = type metadata accessor for EnumeratedSequence.Iterator();
  v131 = *(char **)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (uint64_t)&v106 - v19;
  v21 = *a3;
  v133 = (char *)a3[1];
  v134 = v21;
  v137 = a1;
  v138 = a6;
  v136 = a7;
  TabViewCoordinator_Phone.updateSearchIndex<A>(tabs:)(a1);
  v139 = a5;
  v22 = (_QWORD *)((char *)a5 + direct field offset for TabViewCoordinator_Phone.viewControllers);
  swift_beginAccess();
  v108 = v22;
  v24 = *v22;
  if (v24 >> 62)
  {
LABEL_130:
    swift_bridgeObjectRetain();
    v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v26 = (char *)MEMORY[0x1E0DEE9D8];
  if (!v25)
  {
LABEL_84:
    v156 = v26;
    Sequence.enumerated()();
    EnumeratedSequence.makeIterator()();
    EnumeratedSequence.Iterator.next()();
    outlined init with take of TableCellFormula((uint64_t)&v149, (uint64_t)&v151, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TabEntry)?);
    while (v155 != 255)
    {
      v90 = v151;
      outlined init with take of TabEntry(&v152, &v149);
      v91 = v90;
      v92 = v139;
      v93 = TabViewCoordinator_Phone.searchAdjustment(index:)(v91);
      *(_QWORD *)v144 = v134;
      *(_QWORD *)&v144[8] = v133;
      (*(void (**)(int64_t *, uint64_t, uint64_t, uint64_t, _BYTE *, _QWORD *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v140 + 88) + 32))(&v149, v137, v93, v135, v144, v92, v138, v136, *(_QWORD *)(v140 + 80), *(_QWORD *)(v140 + 88));
      MEMORY[0x18D75CF58]();
      if (*(_QWORD *)(((unint64_t)v156 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v156 & 0xFFFFFFFFFFFFFF8)
                                                                                           + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      outlined init with copy of TabEntry((uint64_t)&v149, (uint64_t)v144);
      if ((v145 & 1) != 0)
      {
        memcpy(v143, v144, 0x108uLL);
        v141 = *((_QWORD *)&v143[1] + 1);
        v142 = *(_QWORD *)&v143[2];
        outlined copy of TabCustomizationID.Base();
        AnyHashable.init<A>(_:)();
        outlined destroy of TabItemGroup((uint64_t)v143);
      }
      else
      {
        v143[4] = *(_OWORD *)&v144[64];
        v143[5] = *(_OWORD *)&v144[80];
        *(_QWORD *)&v143[6] = *(_QWORD *)&v144[96];
        v143[0] = *(_OWORD *)v144;
        v143[1] = *(_OWORD *)&v144[16];
        v143[2] = *(_OWORD *)&v144[32];
        v143[3] = *(_OWORD *)&v144[48];
        _ViewList_View.viewID.getter();
        outlined destroy of TabItem((uint64_t)v143);
      }
      *(_OWORD *)v144 = v146;
      *(_OWORD *)&v144[16] = v147;
      *(_QWORD *)&v144[32] = v148;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
      v95 = *((_QWORD *)v26 + 2);
      v94 = *((_QWORD *)v26 + 3);
      if (v95 >= v94 >> 1)
        v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v94 > 1), v95 + 1, 1, v26);
      *((_QWORD *)v26 + 2) = v95 + 1;
      v96 = &v26[40 * v95];
      v97 = *(_OWORD *)v144;
      v98 = *(_OWORD *)&v144[16];
      *((_QWORD *)v96 + 8) = *(_QWORD *)&v144[32];
      *((_OWORD *)v96 + 2) = v97;
      *((_OWORD *)v96 + 3) = v98;
      outlined destroy of TabEntry((uint64_t)&v149);
      EnumeratedSequence.Iterator.next()();
      outlined init with take of TableCellFormula((uint64_t)&v149, (uint64_t)&v151, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TabEntry)?);
    }
    (*((void (**)(uint64_t, uint64_t))v131 + 1))(v20, v17);
    v99 = v156;
    v100 = (_QWORD *)&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance PlatformViewChild<A>;
LABEL_108:
    *v108 = (uint64_t)v99;
    swift_bridgeObjectRelease();
    *(_QWORD *)((char *)v139 + v100[219]) = v26;
    return swift_bridgeObjectRelease();
  }
  v20 = v132;
  v27 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in static TabViewCoordinatorStrategy.rebuildTabs<A>(tabBarController:tabs:selected:environment:transaction:coordinator:), 0, v138, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEDCE8], v132, MEMORY[0x1E0DEDD18], v23);
  v28 = v26;
  v26 = (char *)v27;
  v29 = *(_QWORD *)((char *)v139 + direct field offset for TabViewCoordinator_Phone.currentTabIdentifiers);
  v151 = (uint64_t)v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized CollectionChanges.formChanges<A, B>(from:to:)(v29, (uint64_t)v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = v151;
  v30 = *v108;
  swift_bridgeObjectRetain();
  v31 = dispatch thunk of Collection.count.getter();
  result = specialized Array.init(repeating:count:)(0, v31);
  *(_QWORD *)v144 = result;
  v124 = *(_QWORD *)(v17 + 16);
  if (!v124)
  {
    v101 = result;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_98:
    v151 = MEMORY[0x1E0DEE9D8];
    v102 = *(_QWORD *)(v101 + 16);
    v100 = &lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance PlatformViewChild<A>;
    if (v102)
    {
      swift_bridgeObjectRetain_n();
      for (i = 0; i != v102; ++i)
      {
        v104 = *(void **)(v101 + 8 * i + 32);
        if (v104)
        {
          v105 = v104;
          MEMORY[0x18D75CF58]();
          if (*(_QWORD *)((v151 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v151 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          v100 = (_QWORD *)&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance PlatformViewChild<A>;
        }
      }
      swift_bridgeObjectRelease();
      v99 = (char *)v151;
    }
    else
    {
      swift_bridgeObjectRetain();
      v99 = (char *)MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_108;
  }
  v33 = 0;
  v122 = v26;
  v123 = v17 + 32;
  if (v30 < 0)
    v34 = v30;
  else
    v34 = v30 & 0xFFFFFFFFFFFFFF8;
  v119 = v34;
  v120 = v30;
  v130 = v30 & 0xC000000000000001;
  v128 = v30 & 0xFFFFFFFFFFFFFF8;
  v109 = (v30 & 0xFFFFFFFFFFFFFF8) + 32;
  v107 = v30 + 32;
  v121 = v17;
  while (1)
  {
    if (v33 >= *(_QWORD *)(v17 + 16))
      goto LABEL_115;
    v43 = v123 + 40 * v33;
    v44 = *(_QWORD *)v43;
    v20 = *(_QWORD *)(v43 + 8);
    v45 = *(unsigned __int8 *)(v43 + 32);
    v129 = v33;
    if (!v45)
    {
      v17 = v120;
      v58 = v120 >> 62;
      if (v120 >> 62)
      {
        swift_bridgeObjectRetain();
        v88 = _CocoaArrayWrapper.endIndex.getter();
        result = swift_bridgeObjectRelease();
        if (v88 < v44)
          goto LABEL_123;
      }
      else if (*(_QWORD *)(v128 + 16) < v44)
      {
        goto LABEL_123;
      }
      if (v44 < 0)
        goto LABEL_117;
      if (v58)
      {
        swift_bridgeObjectRetain();
        v59 = _CocoaArrayWrapper.endIndex.getter();
        result = swift_bridgeObjectRelease();
      }
      else
      {
        v59 = *(_QWORD *)(v128 + 16);
      }
      if (v59 < v20)
        goto LABEL_119;
      if (v20 < 0)
        goto LABEL_120;
      if (v130)
      {
        if (v20 < (unint64_t)v44)
          goto LABEL_124;
        if (v44 != v20)
        {
          if (v44 >= (unint64_t)v20)
          {
            __break(1u);
LABEL_132:
            __break(1u);
            goto LABEL_133;
          }
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
          v63 = v44;
          do
          {
            v64 = v63 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v63);
            v63 = v64;
          }
          while (v20 != v64);
        }
      }
      if (v58)
      {
        swift_bridgeObjectRetain();
        v20 = _CocoaArrayWrapper.subscript.getter();
        v66 = v69;
        v44 = v70;
        v65 = v71;
        swift_bridgeObjectRelease();
      }
      else
      {
        v65 = (2 * v20) | 1;
        swift_bridgeObjectRetain();
        v20 = v128;
        v66 = v109;
      }
      v151 = v20;
      v152 = v66;
      v153 = v44;
      v154 = v65;
      v73 = *(_QWORD *)(v140 + 80);
      v72 = *(_QWORD *)(v140 + 88);
      v74 = *(void (**)(uint64_t *, _QWORD *, uint64_t, unint64_t, uint64_t, uint64_t))(v72 + 16);
      type metadata accessor for ArraySlice<UIViewController>();
      v76 = v75;
      v77 = lazy protocol witness table accessor for type ArraySlice<UIViewController> and conformance ArraySlice<A>();
      v74(&v151, v139, v76, v77, v73, v72);
      goto LABEL_10;
    }
    if (v45 != 1)
      break;
    if (v44 != v20)
    {
      if (v20 >= v44)
      {
        if (v44 >= v20)
          goto LABEL_127;
        v46 = *(_QWORD *)(v140 + 88);
        v131 = *(char **)(v46 + 32);
        v47 = v44;
        while (1)
        {
          v48 = v20;
          v20 = v44;
          v49 = v139;
          v50 = TabViewCoordinator_Phone.searchAdjustment(index:)(v47);
          *(_QWORD *)&v143[0] = v47;
          v51 = v137;
          v17 = v138;
          v52 = (void (*)(int64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
          outlined init with copy of TabEntry(v53, (uint64_t)&v151);
          v52(&v149, 0);
          v149 = v134;
          v150 = v133;
          v54 = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, int64_t *, _QWORD *, uint64_t, uint64_t, _QWORD, uint64_t))v131)(&v151, v51, v50, v135, &v149, v49, v17, v136, *(_QWORD *)(v140 + 80), v46);
          outlined destroy of TabEntry((uint64_t)&v151);
          v55 = *(_QWORD *)v144;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            specialized _ArrayBuffer._consumeAndCreateNew()();
          v44 = v20;
          if (v20 < 0)
            break;
          if (v47 >= *(_QWORD *)(v55 + 16))
          {
            __break(1u);
            break;
          }
          v20 = v48;
          v56 = v55 + 8 * v47;
          v57 = *(void **)(v56 + 32);
          *(_QWORD *)(v56 + 32) = v54;

          result = specialized Array._endMutation()();
          if (v48 == ++v47)
            goto LABEL_11;
        }
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
      }
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
      goto LABEL_130;
    }
LABEL_11:
    v33 = v129 + 1;
    v17 = v121;
    v26 = v122;
    if (v129 + 1 == v124)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v101 = *(_QWORD *)v144;
      goto LABEL_98;
    }
  }
  v60 = *(_QWORD *)(v43 + 16);
  v26 = *(char **)(v43 + 24);
  v17 = v120;
  v61 = v120 >> 62;
  if (v120 >> 62)
  {
    swift_bridgeObjectRetain();
    v89 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v89 < v44)
    {
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
  }
  else if (*(_QWORD *)(v128 + 16) < v44)
  {
    goto LABEL_83;
  }
  if (v44 < 0)
    goto LABEL_118;
  if (v61)
  {
    swift_bridgeObjectRetain();
    v62 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v62 = *(_QWORD *)(v128 + 16);
  }
  if (v62 < v20)
    goto LABEL_121;
  if (v20 < 0)
    goto LABEL_122;
  if (v130)
  {
    if (v20 < (unint64_t)v44)
      goto LABEL_125;
    if (v44 != v20)
    {
      if (v44 >= (unint64_t)v20)
        goto LABEL_132;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      v67 = v44;
      do
      {
        v68 = v67 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v67);
        v67 = v68;
      }
      while (v20 != v68);
    }
  }
  if (v61)
  {
    swift_bridgeObjectRetain();
    v78 = _CocoaArrayWrapper.subscript.getter();
    v117 = v79;
    v118 = v78;
    v115 = v81;
    v116 = v80;
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v117 = (2 * v20) | 1;
    result = swift_bridgeObjectRetain();
    v118 = v128;
    v115 = v44;
    v116 = v109;
  }
  if (v44 == v20)
    goto LABEL_9;
  if (v20 < v44)
    goto LABEL_128;
  if (v44 >= v20)
    goto LABEL_129;
  v131 = &v26[-v60];
  if (v26 == (char *)v60)
  {
LABEL_9:
    v151 = v118;
    v152 = v116;
    v153 = v115;
    v154 = v117;
    v149 = v60;
    v150 = v26;
    v35 = v110;
    dispatch thunk of Collection.subscript.getter();
    v149 = v134;
    v150 = v133;
    v37 = *(_QWORD *)(v140 + 80);
    v36 = *(_QWORD *)(v140 + 88);
    v20 = *(_QWORD *)(v36 + 24);
    type metadata accessor for ArraySlice<UIViewController>();
    v39 = v38;
    v40 = lazy protocol witness table accessor for type ArraySlice<UIViewController> and conformance ArraySlice<A>();
    v41 = v112;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    ((void (*)(uint64_t *, char *, uint64_t, int64_t *, uint64_t, _QWORD *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))v20)(&v151, v35, v135, &v149, v113, v139, v39, v41, v40, AssociatedConformanceWitness, v37, v36);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v35, v41);
LABEL_10:
    result = swift_unknownObjectRelease();
    goto LABEL_11;
  }
  if ((uint64_t)v26 >= v60)
  {
    v82 = 0;
    v126 = ~v44 + v20;
    v127 = 8 * v60 + 32;
    v125 = v44 + 1;
    v114 = v107 + 8 * v44;
    while (v60 + v82 < (uint64_t)v26)
    {
      v83 = v44 + v82;
      if (v130)
      {
        v84 = (id)MEMORY[0x18D75E3BC](v83, v17);
      }
      else
      {
        if (v83 >= *(_QWORD *)(v128 + 16))
          goto LABEL_116;
        v84 = *(id *)(v114 + 8 * v82);
      }
      v85 = v84;
      v86 = *(_QWORD *)v144;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized _ArrayBuffer._consumeAndCreateNew()();
      if (v60 < 0)
        goto LABEL_113;
      if ((unint64_t)(v60 + v82) >= *(_QWORD *)(v86 + 16))
        goto LABEL_112;
      v87 = *(void **)(v86 + v127 + 8 * v82);
      *(_QWORD *)(v86 + v127 + 8 * v82) = v85;

      specialized Array._endMutation()();
      if (v126 == v82)
        goto LABEL_9;
      if (v125 + v82 < v44 || v125 + v82 >= v20)
        goto LABEL_114;
      if (v131 == (char *)++v82)
        goto LABEL_9;
    }
    goto LABEL_111;
  }
LABEL_133:
  __break(1u);
  return result;
}

uint64_t specialized TabViewCoordinator_Phone.tabBarController(_:shouldSelect:)(void *a1)
{
  id v1;

  v1 = objc_msgSend(a1, sel_selectedViewController);
  swift_unknownObjectWeakAssign();

  return 1;
}

uint64_t specialized TabViewCoordinator_Phone._uip_tabBarController(_:tab:operationForAcceptingItemsFrom:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v5 = *MEMORY[0x1E0DEEDD8] & *v2;
  v6 = *(_QWORD *)((char *)v2 + direct field offset for TabViewCoordinator_Phone.tabCache);
  v7 = *(_QWORD *)(v5 + 0x50);
  v8 = *(_QWORD *)(v5 + 88);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 80);
  swift_bridgeObjectRetain();
  v10 = v9(a2, a1, v6, v7, v8);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized TabViewCoordinator_Phone._uip_tabBarController(_:tab:acceptItemsFrom:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v5 = *MEMORY[0x1E0DEEDD8] & *v2;
  v6 = *(_QWORD *)((char *)v2 + direct field offset for TabViewCoordinator_Phone.tabCache);
  v7 = *(_QWORD *)(v5 + 0x50);
  v8 = *(_QWORD *)(v5 + 88);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 88);
  swift_bridgeObjectRetain();
  v9(a2, a1, v6, v7, v8);
  return swift_bridgeObjectRelease();
}

void specialized TabViewCoordinator_Phone._uip_tabBarController(_:dropSessionDidEnter:withDestination:)(uint64_t a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void (*v23)(void);
  id v24;
  void (*v25)(void);
  id v26;
  void *v27;
  id v28;

  v3 = v2;
  v4 = a2;
  v5 = *v3;
  v6 = *MEMORY[0x1E0DEEDD8];
  if (a2)
  {
    objc_opt_self();
    v7 = swift_dynamicCastObjCClass();
    if (v7)
    {
      v28 = (id)v7;
      v8 = v4;
      v9 = objc_msgSend(v28, sel__identifier);
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v4 = v11;

      goto LABEL_7;
    }
    v10 = 0;
    v4 = 0;
  }
  else
  {
    v10 = 0;
  }
  v28 = 0;
LABEL_7:
  v12 = direct field offset for TabViewCoordinator_Phone.currentTabDropTarget;
  v13 = *(void **)((char *)v3 + direct field offset for TabViewCoordinator_Phone.currentTabDropTarget);
  if (v13)
  {
    v14 = objc_msgSend(v13, sel__identifier);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v16;

    if (v4)
    {
      if (v17)
      {
        if (v10 != v15 || v4 != v17)
        {
          v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v20 = v28;
          if ((v19 & 1) != 0)
            goto LABEL_27;
          goto LABEL_20;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_26:
        v20 = v28;
        goto LABEL_27;
      }
    }
    else if (!v17)
    {
      goto LABEL_26;
    }
  }
  else if (!v4)
  {
    goto LABEL_26;
  }
  swift_bridgeObjectRelease();
  v20 = v28;
LABEL_20:
  v21 = v6 & v5;
  v22 = *(void **)((char *)v3 + v12);
  if (v22)
  {
    v23 = *(void (**)(void))(*(_QWORD *)((v6 & v5) + 0x58) + 104);
    swift_bridgeObjectRetain();
    v24 = v22;
    v23();

    swift_bridgeObjectRelease();
    v20 = v28;
  }
  if (v20)
  {
    v25 = *(void (**)(void))(*(_QWORD *)(v21 + 88) + 96);
    swift_bridgeObjectRetain();
    v26 = v28;
    v25();

    swift_bridgeObjectRelease();
    v20 = v28;
  }
  v27 = *(void **)((char *)v3 + v12);
  *(uint64_t *)((char *)v3 + v12) = (uint64_t)v20;
  v20 = v27;
LABEL_27:

}

id specialized TabViewCoordinator_Phone._tabBarController(_:sidebarVisibilityDidChange:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint8_t *v15;
  id result;
  unint64_t v17;
  char v18;
  uint64_t v19;
  _DWORD v20[3];
  char v21;

  v2 = v1;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2258], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v20 - v6;
  static Log.tabView.getter();
  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = &selRef_documentBrowser_failedToImportDocumentAtURL_error_;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of Logger?((uint64_t)v7);
  }
  else
  {
    v11 = a1;
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v14 = 67109120;
      v20[2] = objc_msgSend(v11, sel__isVisible);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_186E48000, v12, v13, "tabBarController: sidebarVisibilityDidChange:\nisVisible:%{BOOL}d", v14, 8u);
      v15 = v14;
      v10 = &selRef_documentBrowser_failedToImportDocumentAtURL_error_;
      MEMORY[0x18D760108](v15, -1, -1);
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  }
  result = objc_msgSend(a1, v10[427]);
  v17 = *(_QWORD *)(v2 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration + 16);
  if (v17 >= 2)
  {
    if ((_DWORD)result)
      v18 = 1;
    else
      v18 = 2;
    v19 = *(_QWORD *)(v2 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration + 8);
    v21 = v18;
    outlined copy of Binding<NavigationSplitViewColumn>?(v19, v17);
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release_n();
    return (id)swift_release_n();
  }
  return result;
}

uint64_t specialized TabViewCoordinator_Phone._tabBarController(_:sidebar:visibilityDidChangeFor:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v3 + 80);
  v9 = (uint64_t)v1 + direct field offset for TabViewCoordinator_Phone.customization;
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v9, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
  v10 = *(_QWORD *)((char *)v1 + direct field offset for TabViewCoordinator_Phone.tabCache);
  v11 = *(_QWORD *)(v3 + 88);
  v12 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(v11 + 120);
  swift_bridgeObjectRetain();
  v12(a1, v7, v10, v8, v11);
  swift_bridgeObjectRelease();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
}

uint64_t specialized TabViewCoordinator_Phone._tabBarController(_:sidebar:leadingSwipeActionsConfigurationFor:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v5 = *MEMORY[0x1E0DEEDD8] & *v2;
  v6 = *(_QWORD *)((char *)v2 + direct field offset for TabViewCoordinator_Phone.tabCache);
  v7 = *(_QWORD *)(v5 + 0x50);
  v8 = *(_QWORD *)(v5 + 88);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 64);
  swift_bridgeObjectRetain();
  v10 = v9(a1, a2, v6, v7, v8);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized TabViewCoordinator_Phone._tabBarController(_:sidebar:contextMenuConfigurationFor:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  v4 = *(_QWORD *)((char *)v1 + direct field offset for TabViewCoordinator_Phone.tabCache);
  v5 = *(_QWORD *)(v3 + 0x50);
  v6 = *(_QWORD *)(v3 + 88);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 72);
  swift_bridgeObjectRetain();
  v8 = v7(a1, v4, v5, v6);
  swift_bridgeObjectRelease();
  return v8;
}

void specialized TabViewCoordinator_Phone.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type _UITab and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UITab and conformance NSObject;
  if (!lazy protocol witness table cache variable for type _UITab and conformance NSObject)
  {
    v1 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for _UITab);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UITab and conformance NSObject);
  }
  return result;
}

uint64_t partial apply for closure #1 in TabViewCoordinator_Phone._tabElementGroup(_:didSelect:)()
{
  return closure #2 in TabViewCoordinator_Phone.tabBarController(_:didSelect:)();
}

uint64_t partial apply for closure #1 in TabViewCoordinator_Phone.tabBarController(_:didSelect:)()
{
  return closure #1 in TabViewCoordinator_Phone.tabBarController(_:didSelect:)();
}

void type metadata accessor for UIHostingController<TabItem.RootView>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for UIHostingController<TabItem.RootView>)
  {
    v2 = lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView();
    v4 = type metadata accessor for UIHostingController(a1, (uint64_t)&type metadata for TabItem.RootView, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>);
  }
}

void outlined consume of TabSidebarConfiguration?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != 1)
  {
    outlined consume of Binding<NavigationSplitViewColumn>?(a2, a3);
    outlined consume of TabSidebarAccessoryViewConfiguration?(a5);
  }
}

uint64_t outlined consume of TabSidebarAccessoryViewConfiguration?(uint64_t result)
{
  if (result != 1)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

void type metadata accessor for (offset: Int, element: TabEntry)?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for (offset: Int, element: TabEntry)?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: TabEntry), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for (offset: Int, element: TabEntry)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (offset: Int, element: TabEntry))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: TabEntry));
  }
}

void *outlined init with take of TabEntry(const void *a1, void *a2)
{
  __swift_memcpy265_8(a2, a1);
  return a2;
}

uint64_t outlined destroy of TabEntry(uint64_t a1)
{
  destroy for TabEntry(a1);
  return a1;
}

uint64_t outlined consume of TabCustomizationID?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 != 255)
    return outlined consume of TabCustomizationID.Base();
  return result;
}

uint64_t outlined destroy of TabItem(uint64_t a1)
{
  destroy for StyleApplicator.EnumeratedView(a1);
  return a1;
}

uint64_t outlined init with copy of TabEntry(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TabEntry(a2, a1);
  return a2;
}

uint64_t outlined destroy of TabItemGroup(uint64_t a1)
{
  destroy for TabItemGroup(a1);
  return a1;
}

void type metadata accessor for ArraySlice<UIViewController>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ArraySlice<UIViewController>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    v0 = type metadata accessor for ArraySlice();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArraySlice<UIViewController>);
  }
}

unint64_t lazy protocol witness table accessor for type ArraySlice<UIViewController> and conformance ArraySlice<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ArraySlice<UIViewController> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<UIViewController> and conformance ArraySlice<A>)
  {
    type metadata accessor for ArraySlice<UIViewController>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEBF80], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<UIViewController> and conformance ArraySlice<A>);
  }
  return result;
}

void CellHostingView.__allocating_init(rootView:)()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  specialized CellHostingView.init(rootView:)();
}

uint64_t sub_1870C5450(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 2472) - 8) + 8))(v2);
  return a1;
}

void @objc CellHostingView.init(coder:)()
{
  specialized CellHostingView.init(coder:)();
}

uint64_t sub_1870C54AC(uint64_t a1)
{
  void *v1;
  id v3;

  v3 = v1;
  return a1;
}

uint64_t @objc CellHostingView._accessibilityIsSwiftUIHostingCellView.getter()
{
  return 1;
}

void specialized CellHostingView.init(rootView:)()
{
  specialized UIItemHostingView.init(rootView:)();
}

id sub_1870C54DC(void *a1)
{
  id v1;

  v1 = a1;
  _UIHostingView.isHiddenForReuse.setter(1);

  return v1;
}

void specialized CellHostingView.init(coder:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void type metadata accessor for ImageProviderBox<UIImage>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ImageProviderBox<UIImage>)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIImage);
    lazy protocol witness table accessor for type UIImage and conformance UIImage(&lazy protocol witness table cache variable for type UIImage and conformance UIImage, (uint64_t)&protocol conformance descriptor for UIImage);
    v0 = type metadata accessor for ImageProviderBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<UIImage>);
  }
}

void UIImage.resolve(in:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  unsigned int v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;

  v3 = v2;
  v6 = objc_msgSend(v2, sel__hasImageAsset);
  if ((objc_msgSend(v3, sel_isSymbolImage) & 1) != 0)
    goto LABEL_5;
  if (!v6)
    goto LABEL_5;
  v7 = objc_msgSend(v3, sel_imageAsset);
  if (!v7)
    goto LABEL_5;
  v8 = v7;
  v9 = objc_msgSend(v3, sel_traitCollection);
  swift_retain();
  swift_retain();
  v10 = objc_msgSend(v9, sel__environmentWrapper);
  MEMORY[0x1E0C80A78](v10, v11);
  v12 = (void *)UITraitCollection._modifyingTraits(environmentWrapper:mutations:)();
  swift_release();
  swift_release();

  v13 = objc_msgSend(v8, sel_imageWithTraitCollection_, v12);
  if (!v13)
LABEL_5:
    v13 = v3;
  UIImage._resolve(in:)(a1, a2);

}

double UIImage._resolve(in:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  id v6;
  void *v7;
  id v8;
  id v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char v26;
  id v27;
  _QWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  double result;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[32];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[19];
  char v53;
  void *v54;
  char v55;
  __int128 v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  char v60;
  __int128 v61;
  __int128 v62;
  int v63;

  v3 = v2;
  objc_msgSend(v2, sel_imageOrientation);
  v6 = objc_msgSend(v2, sel_CGImage);
  if (v6)
  {
    v7 = v6;
    v42 = 0;
  }
  else
  {
    v8 = objc_msgSend(objc_retainAutorelease(v2), sel_ioSurface);
    v7 = v8;
    if (v8)
    {
      v9 = v8;
      v10 = 1;
    }
    else
    {
      v10 = -1;
    }
    v42 = v10;
  }
  objc_msgSend(v2, sel_scale);
  objc_msgSend(v2, sel_size);
  v11 = 0;
  v41 = objc_msgSend(v2, sel_isSymbolImage);
  if (v41)
  {
    objc_msgSend(v2, sel_contentInsets);
    UIImage.baselineOffsetFromBottom.getter();
    Image.LayoutMetrics.init(baselineOffset:capHeight:contentSize:alignmentOrigin:)();
    v11 = v43;
    v37 = *(_QWORD *)&v45[16];
    v39 = *(_QWORD *)&v45[8];
    v35 = *(_QWORD *)&v45[24];
    v12 = *(_QWORD *)v45;
    v14 = *((_QWORD *)&v44 + 1);
    v13 = v44;
    v15 = *((_QWORD *)&v43 + 1);
  }
  else
  {
    v15 = 0;
    v13 = 0;
    v14 = 0;
    v12 = 0;
    v37 = 0;
    v39 = 0;
    v35 = 0;
  }
  CGSize.unapply(_:)();
  v16 = *a1;
  v17 = a1[1];
  *(_QWORD *)&v43 = *a1;
  *((_QWORD *)&v43 + 1) = v17;
  swift_retain();
  swift_retain();
  v18 = objc_msgSend(v2, sel_renderingMode);
  if (v18 == (id)1)
    v19 = 1;
  else
    v19 = 2;
  if (v18 == (id)2)
    v19 = 0;
  LOBYTE(v54) = v19;
  EnvironmentValues.imageIsTemplate(renderingMode:)();
  swift_release();
  swift_release();
  outlined copy of GraphicsImage.Contents?(v7, v42);
  UIImage.resizingInfo.getter((uint64_t)&v43);
  v53 = 1;
  GraphicsImage.init(contents:scale:unrotatedPixelSize:orientation:isTemplate:resizingInfo:antialiased:interpolation:)();
  *(_QWORD *)&v43 = v54;
  BYTE8(v43) = v55;
  v44 = v56;
  *(_QWORD *)v45 = v57;
  v45[8] = v58;
  *(_OWORD *)&v45[12] = v59;
  v45[28] = v60;
  v46 = v61;
  v47 = v62;
  LODWORD(v48) = v63;
  ImageResolutionContext.effectiveAllowedDynamicRange(for:)();
  *(_QWORD *)&v43 = v16;
  *((_QWORD *)&v43 + 1) = v17;
  if ((EnvironmentValues.shouldRedactContent.getter() & 1) != 0)
  {
    *(_QWORD *)&v43 = v16;
    *((_QWORD *)&v43 + 1) = v17;
    GraphicsImage.redact(in:)();
  }
  v20 = objc_msgSend(v2, sel_accessibilityLabel, v35, v37, v39);
  if (v20)
  {
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v23 = v22;

    v24 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v21 = 0;
    v23 = 0;
    v24 = 0;
  }
  v25 = v54;
  v26 = v55;
  v53 = 3;
  v27 = v3;
  outlined copy of GraphicsImage.Contents?(v25, v26);
  outlined copy of Text?(v21, v23, 0, v24);
  Image.Resolved.init(image:decorative:label:basePlatformItemImage:backgroundShape:backgroundCornerRadius:)();
  if (v41)
  {
    swift_release();
    v28 = (_QWORD *)swift_allocObject();
    v28[2] = v11;
    v28[3] = v15;
    v28[4] = v13;
    v28[5] = v14;
    v28[6] = v12;
    v28[7] = v40;
    v28[8] = v38;
    v28[9] = v36;
    outlined consume of Text?(v21, v23, 0, v24);
    outlined consume of GraphicsImage.Contents?(v7, v42);
    outlined consume of GraphicsImage.Contents?(v25, v26);
    *(_QWORD *)&v51 = v28;
  }
  else
  {
    outlined consume of GraphicsImage.Contents?(v25, v26);
    outlined consume of GraphicsImage.Contents?(v7, v42);
    outlined consume of Text?(v21, v23, 0, v24);
  }
  v29 = v51;
  *(_OWORD *)(a2 + 128) = v50;
  *(_OWORD *)(a2 + 144) = v29;
  *(_OWORD *)(a2 + 160) = *(_OWORD *)v52;
  *(_DWORD *)(a2 + 175) = *(_DWORD *)&v52[15];
  v30 = v47;
  *(_OWORD *)(a2 + 64) = v46;
  *(_OWORD *)(a2 + 80) = v30;
  v31 = v49;
  *(_OWORD *)(a2 + 96) = v48;
  *(_OWORD *)(a2 + 112) = v31;
  v32 = v44;
  *(_OWORD *)a2 = v43;
  *(_OWORD *)(a2 + 16) = v32;
  result = *(double *)v45;
  v34 = *(_OWORD *)&v45[16];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)v45;
  *(_OWORD *)(a2 + 48) = v34;
  return result;
}

double UIImage.resolveNamedImage(in:)@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void protocol witness for ImageProvider.resolve(in:) in conformance UIImage(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  UIImage.resolve(in:)(a1, a2);
}

double protocol witness for ImageProvider.resolveNamedImage(in:) in conformance UIImage@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(char a1, int a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  int v6;
  void *v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)();
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  int v24;
  id v25;
  int v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  double v34;
  double v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  CGImageRef v47;
  id v48;
  int v49;
  char v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  CGImageRef_optional v54;
  double v55;
  id v56;
  void *v57;
  uint64_t v58;
  id v59;
  id v60;
  void *v61;
  char v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  int v64;
  char v65;
  char v66;
  CGImage *v67;
  uint64_t v68;
  void *v69;
  id v70;
  id v71;
  _QWORD v73[4];
  char v74;
  uint64_t (*v75)(uint64_t, uint64_t);
  int v76;
  char v77;
  char v78;
  _QWORD v79[2];
  id v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t (*v88)(uint64_t, uint64_t);
  CGImageRef value;
  id v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t (*v100)(uint64_t, uint64_t);
  char v101;
  uint64_t (*v102)(uint64_t, uint64_t);
  void *v103;
  uint64_t (*v104)();
  char v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  char v114;
  char v115;
  char v116;
  CGImageRef aBlock;
  uint64_t v118;
  uint64_t (*v119)(uint64_t, uint64_t);
  void *v120;
  uint64_t (*v121)();
  _BYTE v122[12];
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  char v130;
  char v131;
  char v132;

  LODWORD(v90) = a2;
  v5 = *v3;
  v6 = *((unsigned __int8 *)v3 + 8);
  v8 = (uint64_t (*)(uint64_t, uint64_t))v3[2];
  v7 = (void *)v3[3];
  v9 = (uint64_t (*)())v3[4];
  v10 = *((unsigned __int8 *)v3 + 40);
  v11 = *(uint64_t *)((char *)v3 + 44);
  v12 = *(uint64_t *)((char *)v3 + 52);
  v13 = *((unsigned __int8 *)v3 + 60);
  v15 = v3[8];
  v14 = v3[9];
  v16 = v3[10];
  v17 = v3[11];
  v18 = *((unsigned __int8 *)v3 + 96);
  v19 = *((unsigned __int8 *)v3 + 97);
  v20 = *((unsigned __int8 *)v3 + 98);
  v21 = *((unsigned __int8 *)v3 + 99);
  v96 = v11;
  v97 = v12;
  v92 = v18;
  v93 = v21;
  v99 = v19;
  v91 = v17;
  v98 = v16;
  v94 = v15;
  v95 = v14;
  if (v6 != 2)
  {
LABEL_17:
    aBlock = (CGImageRef)v5;
    LOBYTE(v118) = v6;
    v119 = v8;
    v120 = v7;
    v121 = v9;
    v122[0] = v10;
    *(_QWORD *)&v122[4] = v11;
    v123 = v12;
    v124 = v13;
    v125 = v15;
    v126 = v14;
    v127 = v16;
    v128 = v17;
    v129 = v18;
    v130 = v19;
    v131 = v20;
    v132 = v21;
    v100 = (uint64_t (*)(uint64_t, uint64_t))v5;
    v101 = v6;
    v102 = v8;
    v103 = v7;
    v104 = v9;
    v105 = v10;
    v106 = v11;
    v107 = v12;
    v108 = v13;
    v109 = v15;
    v110 = v14;
    v111 = v16;
    v112 = v17;
    v113 = v18;
    v114 = v19;
    v115 = v20;
    v116 = v21;
    v49 = v20;
    v50 = v18;
    v51 = v10;
    GraphicsImage.size.getter();
    v54.value = GraphicsImage.render(at:prefersMask:)((CGSize)__PAIR128__(v53, v52), 0).value;
    if (!v54.value)
      return 0;
    aBlock = (CGImageRef)v5;
    LOBYTE(v118) = v6;
    v119 = v8;
    v120 = v7;
    v121 = v9;
    v122[0] = v51;
    v87 = v13;
    LODWORD(v88) = v49;
    *(_QWORD *)&v122[4] = v96;
    v123 = v97;
    v124 = v13;
    v125 = v94;
    v126 = v95;
    v127 = v98;
    v128 = v17;
    v129 = v50;
    v130 = v99;
    v131 = v49;
    v132 = v93;
    value = v54.value;
    GraphicsImage.scale.getter();
    v86 = v5;
    aBlock = (CGImageRef)v5;
    LOBYTE(v118) = v6;
    v119 = v8;
    v120 = v7;
    v121 = v9;
    v122[0] = v51;
    *(_QWORD *)&v122[4] = v96;
    v123 = v97;
    v124 = v13;
    v125 = v94;
    v126 = v95;
    v127 = v98;
    v128 = v91;
    v129 = v92;
    v130 = v99;
    v131 = v49;
    v132 = v93;
    v56 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_initWithCGImage_scale_orientation_, value, qword_187C079B8[(char)GraphicsImage.bitmapOrientation.getter()], v55);
    v57 = v56;
    if (v13)
      v58 = 1;
    else
      v58 = 2;
    v59 = objc_msgSend(v56, sel_imageWithRenderingMode_, v58);

    if (v13 & 1 | ((v90 & 1) == 0))
    {
      if (v6 == 255)
        goto LABEL_30;
    }
    else
    {
      v60 = v59;
      v61 = (void *)Color.Resolved.kitColor.getter();
      objc_opt_self();
      v59 = objc_msgSend(v60, sel_imageWithTintColor_, swift_dynamicCastObjCClassUnconditional());

      if (v6 == 255)
        goto LABEL_30;
    }
    if (v6 == 2)
    {
      v62 = *(_BYTE *)(v86 + 24);
      v63 = *(uint64_t (**)(uint64_t, uint64_t))(v86 + 32);
      v64 = *(_DWORD *)(v86 + 40);
      v65 = *(_BYTE *)(v86 + 44);
      v66 = *(_BYTE *)(v86 + 45);
      aBlock = *(CGImageRef *)(v86 + 16);
      LOBYTE(v118) = v62;
      v119 = v63;
      LODWORD(v120) = v64;
      BYTE4(v120) = v65;
      BYTE5(v120) = v66;
      v67 = aBlock;
      outlined copy of Image.Location(v63);
      v68 = ResolvedVectorGlyph.glyph.getter();
      if (v68)
      {
        v69 = (void *)v68;
        v70 = objc_msgSend(v59, sel__imageWithSymbolMetricsFromNamedVectorGlyph_, v68);
        if (!v70)
        {
          __break(1u);
          JUMPOUT(0x1870C6C08);
        }
        v71 = v70;

        outlined consume of Image.Location(v63);
        return (uint64_t)v71;
      }
      else
      {

        outlined consume of Image.Location(v63);
      }
      return (uint64_t)v59;
    }
LABEL_30:

    return (uint64_t)v59;
  }
  v84 = 2;
  v82 = a3;
  v22 = *(_BYTE *)(v5 + 24);
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 32);
  v24 = *(_DWORD *)(v5 + 40);
  LODWORD(v25) = *(unsigned __int8 *)(v5 + 44);
  v26 = *(unsigned __int8 *)(v5 + 45);
  aBlock = *(CGImageRef *)(v5 + 16);
  LOBYTE(v118) = v22;
  v119 = v23;
  LODWORD(v120) = v24;
  BYTE4(v120) = (_BYTE)v25;
  v85 = v26;
  LODWORD(v86) = v10;
  BYTE5(v120) = v26;
  value = aBlock;
  outlined copy of Image.Location(v23);
  v27 = (void *)ResolvedVectorGlyph.glyph.getter();
  if (!v27)
  {
    v48 = value;
    goto LABEL_16;
  }
  v83 = v27;
  v28 = objc_msgSend(v27, sel_name);
  if (!v28)
    goto LABEL_14;
  v29 = v28;
  v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v88 = v23;
  v31 = v30;

  aBlock = value;
  LOBYTE(v118) = v22;
  v119 = v88;
  LODWORD(v120) = v24;
  BYTE4(v120) = (_BYTE)v25;
  BYTE5(v120) = v85;
  v32 = ResolvedVectorGlyph.value.getter();
  v100 = v88;
  outlined copy of Image.Location(v88);
  v33 = GraphicsImage.image(with:variableValue:at:)(v81, v31, v32 | ((HIDWORD(v32) & 1) << 32), (void **)&v100);
  v23 = v88;
  swift_bridgeObjectRelease();
  outlined consume of Image.Location(v88);
  v81 = v33;
  if (!v33)
  {
LABEL_14:

    v48 = v83;
LABEL_16:

    outlined consume of Image.Location(v23);
    v11 = v96;
    v12 = v97;
    LOBYTE(v18) = v92;
    LOBYTE(v21) = v93;
    LOBYTE(v19) = v99;
    v17 = v91;
    v16 = v98;
    v15 = v94;
    v14 = v95;
    LOBYTE(v10) = v86;
    v6 = v84;
    goto LABEL_17;
  }
  if ((a1 & 1) != 0)
  {
    v84 = (int)v25;
    v25 = v83;
    objc_msgSend(v83, sel_pointSize);
    v35 = v34;
    v36 = (char *)objc_msgSend(v83, sel_glyphWeight);
    if ((unint64_t)(v36 - 1) >= 9)
      v37 = 4;
    else
      v37 = (uint64_t)v36;
    v38 = (char *)objc_msgSend(v83, sel_glyphSize);
    if ((unint64_t)(v38 - 1) >= 3)
      v39 = -1;
    else
      v39 = (uint64_t)v38;
    v90 = objc_msgSend((id)objc_opt_self(), sel_configurationWithPointSize_weight_scale_, v37, v39, v35);
    v79[1] = v79;
    MEMORY[0x1E0C80A78](v90, v40);
    v73[2] = v25;
    LOBYTE(v25) = v84;
    v73[3] = value;
    v74 = v22;
    v75 = v88;
    v76 = v24;
    v77 = v84;
    v78 = v85;
    v41 = swift_allocObject();
    *(_QWORD *)(v41 + 16) = partial apply for closure #1 in GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:);
    *(_QWORD *)(v41 + 24) = v73;
    v121 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
    *(_QWORD *)v122 = v41;
    aBlock = (CGImageRef)MEMORY[0x1E0C809B0];
    v118 = 1107296256;
    v119 = thunk for @escaping @callee_guaranteed (@guaranteed UIMutableTraits) -> ();
    v120 = &block_descriptor_4;
    v42 = _Block_copy(&aBlock);
    v43 = (void *)objc_opt_self();
    v80 = v90;
    swift_retain();
    v44 = objc_msgSend(v43, sel_traitCollectionWithTraits_, v42);
    _Block_release(v42);
    swift_release();
    LOBYTE(v42) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v42 & 1) != 0)
    {
      __break(1u);
      JUMPOUT(0x1870C6BECLL);
    }
    v45 = v44;
    v46 = v80;
    v90 = objc_msgSend(v80, sel_configurationWithTraitCollection_, v45);

    v23 = v88;
    v47 = value;
LABEL_34:
    aBlock = v47;
    LOBYTE(v118) = v22;
    v119 = v23;
    LODWORD(v120) = v24;
    BYTE4(v120) = (_BYTE)v25;
    BYTE5(v120) = v85;
    ResolvedVectorGlyph.resolvedRenderingMode.getter();
    __asm { BR              X10 }
  }
  v47 = value;
  aBlock = value;
  LOBYTE(v118) = v22;
  v119 = v88;
  LODWORD(v120) = v24;
  BYTE4(v120) = (_BYTE)v25;
  BYTE5(v120) = v85;
  ResolvedVectorGlyph.resolvedRenderingMode.getter();
  if (v100 == 3)
  {
    v90 = objc_msgSend((id)objc_opt_self(), sel_unspecifiedConfiguration);
    goto LABEL_34;
  }

  outlined consume of Image.Location(v88);
  return v81;
}

unint64_t GraphicsImage.image(with:variableValue:at:)(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  void *v6;
  float v7;
  void *v8;
  id v9;
  Swift::String v10;
  Swift::String v12;
  id v13;
  void *v14;
  UIImageConfiguration_optional v15;
  NSBundle_optional v16;
  UIImageConfiguration_optional v17;

  v6 = *a4;
  if ((a3 & 0x100000000) != 0)
  {
    if (v6)
    {
      if (v6 != (void *)1)
      {
        swift_bridgeObjectRetain();
        outlined copy of Image.Location(v6);
        v14 = (void *)MEMORY[0x18D75CC88](a1, a2);
        swift_bridgeObjectRelease();
        v13 = objc_msgSend((id)objc_opt_self(), sel_imageNamed_inBundle_, v14, v6);

        outlined consume of Image.Location(v6);
        return (unint64_t)v13;
      }
      swift_bridgeObjectRetain();
      v8 = (void *)MEMORY[0x18D75CC88](a1, a2);
      swift_bridgeObjectRelease();
      v9 = objc_msgSend((id)objc_opt_self(), sel__systemImageNamed_, v8);
    }
    else
    {
      swift_bridgeObjectRetain();
      v8 = (void *)MEMORY[0x18D75CC88](a1, a2);
      swift_bridgeObjectRelease();
      v9 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v8);
    }
  }
  else
  {
    v7 = *(float *)&a3;
    if (!v6)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
      swift_bridgeObjectRetain();
      v10._countAndFlagsBits = a1;
      v10._object = a2;
      v15.value.super.isa = 0;
      return (unint64_t)UIImage.init(systemName:variableValue:configuration:)(v10, v7, v15);
    }
    if (v6 != (void *)1)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
      swift_bridgeObjectRetain();
      outlined copy of Image.Location(v6);
      v12._countAndFlagsBits = a1;
      v12._object = a2;
      v16.value.super.isa = (Class)v6;
      v16.is_nil = 0;
      return (unint64_t)UIImage.init(named:in:variableValue:configuration:)(v12, v16, v7, v17);
    }
    swift_bridgeObjectRetain();
    v8 = (void *)MEMORY[0x18D75CC88](a1, a2);
    swift_bridgeObjectRelease();
    v9 = objc_msgSend((id)objc_opt_self(), sel__systemImageNamed_variableValue_withConfiguration_, v8, 0, v7);
  }
  v13 = v9;

  return (unint64_t)v13;
}

uint64_t base witness table accessor for Equatable in UIImage()
{
  return lazy protocol witness table accessor for type UIImage and conformance UIImage(&lazy protocol witness table cache variable for type UIImage and conformance NSObject, MEMORY[0x1E0DEFD00]);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_So7UIColorCs5NeverOTg50121_s7SwiftUI13GraphicsImageVAAE012makePlatformD024fixedSymbolConfiguration16flattenMaskColor13colorResolverSo7UIImageCSgSb_v31AA0F8ItemListV0P0V0dlN0VSgtFSo7D9CSiXEfU0_0G2UI0lyZ0V0Y0V0j5ColorR0VAL17EnvironmentValuesVAL0iJ0VTf1cn_nTf4ngnd_n(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;

  v2 = a2 - result;
  if (__OFSUB__(a2, result))
    goto LABEL_19;
  v3 = result;
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (a2 < v3 || v2 < 0)
      goto LABEL_20;
    while (a2 != v3)
    {
      swift_retain();
      swift_retain();
      if (ShapeStyle.fallbackColor(in:level:)())
      {
        dispatch thunk of AnyColorBox.resolve(in:)();
        v5 = (void *)Color.Resolved.cgColor.getter();
        swift_release();
        swift_release();
        swift_release();
        objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v5);

      }
      else
      {
        swift_release();
        swift_release();
        if (v3)
        {
          if (v3 == 1)
            v6 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
          else
            v6 = objc_msgSend((id)objc_opt_self(), sel_tertiaryLabelColor);
        }
        else
        {
          v6 = objc_msgSend((id)objc_opt_self(), sel_labelColor);
        }
        v7 = v6;
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized ContiguousArray._endMutation()();
      if (a2 == ++v3)
        return v8;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  return result;
}

id partial apply for closure #1 in GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(void *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v1 + 16);
  v4 = *(unsigned __int8 *)(v1 + 32);
  objc_msgSend(v3, sel_scale);
  objc_msgSend(a1, sel_setDisplayScale_);
  return objc_msgSend(a1, sel_setLayoutDirection_, v4);
}

uint64_t sub_1870C70BC()
{
  return swift_deallocObject();
}

uint64_t sub_1870C70CC()
{
  return swift_deallocObject();
}

Swift::Void __swiftcall EnvironmentValues.configureForPlatform(traitCollection:)(UITraitCollection_optional traitCollection)
{
  uint64_t *v1;
  Class isa;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  isa = traitCollection.value.super.isa;
  v3 = *v1;
  v4 = one-time initialization token for configuredForPlatform;
  swift_retain();
  if (v4 != -1)
    swift_once();
  v5 = static EnvironmentValues.configuredForPlatform;
  if (!v3)
  {
    if (static EnvironmentValues.configuredForPlatform)
      goto LABEL_12;
LABEL_9:
    if (!isa)
      return;
    EnvironmentValues.plist.setter();
    goto LABEL_14;
  }
  swift_release();
  if (v5)
    v6 = v3 == v5;
  else
    v6 = 0;
  if (v6)
    goto LABEL_9;
LABEL_12:
  if (!(*v1 | (unint64_t)isa))
  {
    swift_retain();
    EnvironmentValues.plist.setter();
    return;
  }
LABEL_14:
  EnvironmentValues._configureForPlatform(traitCollection:)(isa);
}

uint64_t one-time initialization function for configuredForPlatform()
{
  static EnvironmentValues.configuredForPlatform = 0;
  unk_1ECE20280 = 0;
  return EnvironmentValues._configureForPlatform(traitCollection:)(0);
}

uint64_t EnvironmentValues._configureForPlatform(traitCollection:)(void *a1)
{
  id v2;
  id v3;

  lazy protocol witness table accessor for type SwiftUIDefaultAccentColorProvider and conformance SwiftUIDefaultAccentColorProvider();
  EnvironmentValues.defaultAccentColorProvider.setter();
  lazy protocol witness table accessor for type KitCoreUINamedColorProvider and conformance KitCoreUINamedColorProvider();
  EnvironmentValues.cuiNamedColorProvider.setter();
  lazy protocol witness table accessor for type SwiftUIAccessibilityTextResolver and conformance SwiftUIAccessibilityTextResolver();
  EnvironmentValues.accessibilityTextAttributeResolver.setter();
  lazy protocol witness table accessor for type SwiftUIResolvedTextProvider and conformance SwiftUIResolvedTextProvider();
  EnvironmentValues.resolvedTextProvider.setter();
  EnvironmentValues.hasSystemOpenURLAction.setter();
  lazy protocol witness table accessor for type UITraitBridgedEnvironmentResolver and conformance UITraitBridgedEnvironmentResolver();
  EnvironmentValues.bridgedEnvironmentResolver.setter();
  if (a1)
  {
    v2 = objc_msgSend(a1, sel_userInterfaceIdiom);
  }
  else
  {
    v3 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
    v2 = objc_msgSend(v3, sel_userInterfaceIdiom);

  }
  _CUIIdiomForIdiom((unint64_t)v2);
  EnvironmentValues.cuiAssetIdiom.setter();
  _CUISubtypeForIdiom((uint64_t)v2);
  EnvironmentValues.cuiAssetSubtype.setter();
  _CUIIdiomForIdiom((unint64_t)v2);
  static CatalogAssetMatchType.defaultValue(idiom:)();
  return EnvironmentValues.cuiAssetMatchTypes.setter();
}

unint64_t lazy protocol witness table accessor for type SwiftUIDefaultAccentColorProvider and conformance SwiftUIDefaultAccentColorProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwiftUIDefaultAccentColorProvider and conformance SwiftUIDefaultAccentColorProvider;
  if (!lazy protocol witness table cache variable for type SwiftUIDefaultAccentColorProvider and conformance SwiftUIDefaultAccentColorProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwiftUIDefaultAccentColorProvider, &type metadata for SwiftUIDefaultAccentColorProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIDefaultAccentColorProvider and conformance SwiftUIDefaultAccentColorProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type KitCoreUINamedColorProvider and conformance KitCoreUINamedColorProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KitCoreUINamedColorProvider and conformance KitCoreUINamedColorProvider;
  if (!lazy protocol witness table cache variable for type KitCoreUINamedColorProvider and conformance KitCoreUINamedColorProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for KitCoreUINamedColorProvider, &type metadata for KitCoreUINamedColorProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KitCoreUINamedColorProvider and conformance KitCoreUINamedColorProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwiftUIAccessibilityTextResolver and conformance SwiftUIAccessibilityTextResolver()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwiftUIAccessibilityTextResolver and conformance SwiftUIAccessibilityTextResolver;
  if (!lazy protocol witness table cache variable for type SwiftUIAccessibilityTextResolver and conformance SwiftUIAccessibilityTextResolver)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwiftUIAccessibilityTextResolver, &type metadata for SwiftUIAccessibilityTextResolver);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIAccessibilityTextResolver and conformance SwiftUIAccessibilityTextResolver);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwiftUIResolvedTextProvider and conformance SwiftUIResolvedTextProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwiftUIResolvedTextProvider and conformance SwiftUIResolvedTextProvider;
  if (!lazy protocol witness table cache variable for type SwiftUIResolvedTextProvider and conformance SwiftUIResolvedTextProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwiftUIResolvedTextProvider, &type metadata for SwiftUIResolvedTextProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIResolvedTextProvider and conformance SwiftUIResolvedTextProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UITraitBridgedEnvironmentResolver and conformance UITraitBridgedEnvironmentResolver()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UITraitBridgedEnvironmentResolver and conformance UITraitBridgedEnvironmentResolver;
  if (!lazy protocol witness table cache variable for type UITraitBridgedEnvironmentResolver and conformance UITraitBridgedEnvironmentResolver)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UITraitBridgedEnvironmentResolver, &type metadata for UITraitBridgedEnvironmentResolver);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UITraitBridgedEnvironmentResolver and conformance UITraitBridgedEnvironmentResolver);
  }
  return result;
}

uint64_t View.allowsWindowActivationEvents(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

void EnvironmentValues.allowsWindowActivationEvents.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.acceptsActivatingEvents(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues.acceptsActivatingEvents.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_1870C7490()
{
  swift_retain();
  swift_retain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_1870C74B4()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t initializeWithCopy for TouchEvent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TouchEvent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

__n128 __swift_memcpy105_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for TouchEvent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for TouchEvent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 105))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TouchEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 105) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TouchEvent()
{
  return &type metadata for TouchEvent;
}

void protocol witness for SpatialEventType.globalLocation.setter in conformance TouchEvent(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 40) = a1;
  *(double *)(v2 + 48) = a2;
}

uint64_t (*protocol witness for SpatialEventType.globalLocation.modify in conformance TouchEvent())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void protocol witness for SpatialEventType.location.setter in conformance TouchEvent(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*protocol witness for SpatialEventType.location.modify in conformance TouchEvent())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double protocol witness for SpatialEventType.radius.getter in conformance TouchEvent()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

double protocol witness for PanEventType.translation.getter in conformance TouchEvent()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

double protocol witness for PanEventType.globalTranslation.getter in conformance TouchEvent()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void protocol witness for TouchTypeProviding.touchType.getter in conformance TouchEvent(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 104);
}

uint64_t protocol witness for ModifiersEventType.modifiers.getter in conformance TouchEvent()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t protocol witness for ModifiersEventType.modifiers.setter in conformance TouchEvent(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = result;
  return result;
}

uint64_t (*protocol witness for ModifiersEventType.modifiers.modify in conformance TouchEvent())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

unint64_t lazy protocol witness table accessor for type TouchEvent and conformance TouchEvent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TouchEvent and conformance TouchEvent;
  if (!lazy protocol witness table cache variable for type TouchEvent and conformance TouchEvent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TouchEvent, &type metadata for TouchEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TouchEvent and conformance TouchEvent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TouchEvent and conformance TouchEvent;
  if (!lazy protocol witness table cache variable for type TouchEvent and conformance TouchEvent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TouchEvent, &type metadata for TouchEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TouchEvent and conformance TouchEvent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TouchEvent and conformance TouchEvent;
  if (!lazy protocol witness table cache variable for type TouchEvent and conformance TouchEvent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TouchEvent, &type metadata for TouchEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TouchEvent and conformance TouchEvent);
  }
  return result;
}

void protocol witness for EventType.phase.getter in conformance TouchEvent(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

uint64_t protocol witness for EventType.binding.getter in conformance TouchEvent@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_retain();
}

uint64_t protocol witness for EventType.binding.setter in conformance TouchEvent(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 16) = v2;
  return result;
}

uint64_t (*protocol witness for EventType.binding.modify in conformance TouchEvent())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double protocol witness for EventType.init(_:) in conformance TouchEvent@<D0>(uint64_t a1@<X8>)
{
  double result;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  char v12;

  type metadata accessor for EventType();
  if (swift_dynamicCast())
  {
    *(_QWORD *)a1 = v3;
    *(_BYTE *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 40) = v7;
    *(_OWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 72) = v9;
    *(_QWORD *)(a1 + 80) = v10;
    result = *(double *)&v11;
    *(_OWORD *)(a1 + 88) = v11;
    *(_BYTE *)(a1 + 104) = v12;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 1;
    result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_BYTE *)(a1 + 104) = 0;
  }
  return result;
}

uint64_t protocol witness for HitTestableEventType.hitTestLocation.getter in conformance TouchEvent()
{
  lazy protocol witness table accessor for type TouchEvent and conformance TouchEvent();
  return HitTestableEventType<>.hitTestLocation.getter();
}

uint64_t protocol witness for HitTestableEventType.hitTestRadius.getter in conformance TouchEvent()
{
  lazy protocol witness table accessor for type TouchEvent and conformance TouchEvent();
  return HitTestableEventType<>.hitTestRadius.getter();
}

BOOL specialized static TouchEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  uint64_t v9;
  double v10;
  float64_t v11;
  int v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  double v18;

  result = 0;
  if (*(double *)a1 == *(double *)a2 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8))
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(float64x2_t *)(a1 + 24);
    v6 = *(float64x2_t *)(a1 + 56);
    v7 = *(float64x2_t *)(a1 + 40);
    v8.f64[0] = *(float64_t *)(a1 + 72);
    v9 = *(_QWORD *)(a1 + 80);
    v11 = *(double *)(a1 + 88);
    v10 = *(double *)(a1 + 96);
    v12 = *(unsigned __int8 *)(a1 + 104);
    v13 = *(_QWORD *)(a2 + 16);
    v14 = *(float64x2_t *)(a2 + 24);
    v15 = *(float64x2_t *)(a2 + 56);
    v16 = *(float64x2_t *)(a2 + 40);
    v17.f64[0] = *(float64_t *)(a2 + 72);
    v18 = *(double *)(a2 + 96);
    if (v4)
    {
      if (v13)
      {
        result = 0;
        v8.f64[1] = v11;
        v17.f64[1] = *(float64_t *)(a2 + 88);
        if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v5, v14), (int32x4_t)vceqq_f64(v7, v16)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v6, v15), (int32x4_t)vceqq_f64(v8, v17)))), 7uLL))) & 1) == 0|| v10 != v18|| v4 != v13)
        {
          return result;
        }
LABEL_15:
        if (v9 == *(_QWORD *)(a2 + 80))
          return v12 == *(unsigned __int8 *)(a2 + 104);
        return result;
      }
      swift_retain();
LABEL_12:
      swift_release();
      return 0;
    }
    if (v13)
      goto LABEL_12;
    result = 0;
    v8.f64[1] = v11;
    v17.f64[1] = *(float64_t *)(a2 + 88);
    if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), (float64x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL)), (int32x4_t)vceqq_f64(v7, v16)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v6, v15), (int32x4_t)vceqq_f64(v8, v17)))), 7uLL))) & 1) != 0&& v10 == v18)
    {
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t outlined copy of ScrollViewBehavior.Phase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t result;

  if ((a9 & 0xC00000) == 0x400000)
  {
    outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a6, a7);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for ScrollViewBehavior(uint64_t a1)
{
  outlined consume of ScrollViewBehavior.Phase(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16));
  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of ScrollViewBehavior.Phase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t result;

  if ((a9 & 0xC00000) == 0x400000)
  {
    outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a6, a7);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ScrollViewBehavior(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int v14;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v13 = *(unsigned __int8 *)(a2 + 66);
  v14 = *(unsigned __int16 *)(a2 + 64);
  outlined copy of ScrollViewBehavior.Phase(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v14 | (v13 << 16));
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 66) = v13;
  *(_WORD *)(a1 + 64) = v14;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ScrollViewBehavior(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  int v23;

  v4 = *(_QWORD *)(a2 + 8);
  v22 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v23 = *(unsigned __int8 *)(a2 + 66);
  v11 = *(unsigned __int16 *)(a2 + 64);
  outlined copy of ScrollViewBehavior.Phase(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11 | (v23 << 16));
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16);
  *(_QWORD *)a1 = v22;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_WORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 66) = v23;
  outlined consume of ScrollViewBehavior.Phase(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ScrollViewBehavior(uint64_t a1, uint64_t a2)
{
  char v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;

  v4 = *(_BYTE *)(a2 + 66);
  v5 = *(_WORD *)(a2 + 64);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_WORD *)(a1 + 64) = v5;
  *(_BYTE *)(a1 + 66) = v4;
  outlined consume of ScrollViewBehavior.Phase(v6, v7, v8, v9, v10, v11, v12, v13, v14);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewBehavior(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewBehavior(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewBehavior()
{
  return &type metadata for ScrollViewBehavior;
}

double _ScrollLayout.init(_:)@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  swift_beginAccess();
  swift_beginAccess();
  CGSize.inset(by:)();
  _ScrollLayout.init(contentOffset:size:visibleRect:)();
  swift_release();
  result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  return result;
}

CGFloat ScrollViewBehavior.overflowContentOffset(_:node:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  CGPoint v15;
  double v16;
  double v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  double v24;
  double v25;
  int v26;
  int v27;
  int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  CGPoint v37;
  double v38;
  double v39;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v47;
  CGPoint v48;
  double v49;
  double v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v7 = *(double *)(a1 + 336);
  v8 = *(double *)(a1 + 344);
  swift_beginAccess();
  CGSize.inset(by:)();
  v10 = v7 - v9;
  CGSize.inset(by:)();
  v12 = v8 - v11;
  if (v10 < 0.0)
    v13 = 0.0;
  else
    v13 = v10;
  if (v12 < 0.0)
    v14 = 0.0;
  else
    v14 = v12;
  v15 = CGPoint.clamp(min:max:)((CGPoint)0, (CGPoint)__PAIR128__(*(unint64_t *)&v14, *(unint64_t *)&v13));
  v16 = v15.x - a2;
  v17 = v15.y - a3;
  v18 = (*(unsigned __int8 *)(v3 + 66) << 16) & 0xFFC1FFFF;
  if (v18)
  {
    if (v13 > 0.0)
      goto LABEL_9;
LABEL_34:
    if (!*(_BYTE *)(a1 + 249))
      v16 = 0.0;
    if (v14 > 0.0)
      goto LABEL_12;
    goto LABEL_10;
  }
  CGSize.inset(by:)();
  v44 = v43;
  v16 = specialized static ScrollViewSupport.addRubberBandingToResidue(_:range:)(v16, v45);
  v17 = specialized static ScrollViewSupport.addRubberBandingToResidue(_:range:)(v17, v44);
  if (v13 <= 0.0)
    goto LABEL_34;
LABEL_9:
  if (v14 <= 0.0)
  {
LABEL_10:
    if (!*(_BYTE *)(a1 + 248))
      v17 = 0.0;
  }
LABEL_12:
  v19 = *(char **)(v3 + 72);
  v20 = *((_QWORD *)v19 + 2);
  if (!v20)
    return v15.x - v16;
  v47 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_44:
    v19 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v19);
  v21 = 0;
  v22 = v19 + 32;
  while (1)
  {
    if (v20 == v21)
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v21 >= *((_QWORD *)v19 + 2))
      goto LABEL_42;
    v23 = *(_QWORD *)v22;
    v25 = *((double *)v22 + 1);
    v24 = *((double *)v22 + 2);
    v26 = *((_DWORD *)v22 + 6);
    swift_unownedRetainStrong();
    swift_beginAccess();
    v27 = *(_DWORD *)(v23 + 148);
    swift_unownedRetain();
    swift_release();
    if (v26 != v27)
      break;
LABEL_22:
    swift_unownedRetainStrong();
    swift_release();
    swift_unownedRetainStrong();
    v29 = *(double *)(v23 + 336);
    v30 = *(double *)(v23 + 344);
    swift_beginAccess();
    CGSize.inset(by:)();
    v32 = v29 - v31;
    CGSize.inset(by:)();
    v34 = v33;
    swift_release();
    if (v32 < 0.0)
      v35 = 0.0;
    else
      v35 = v32;
    if (v30 - v34 < 0.0)
      v36 = 0.0;
    else
      v36 = v30 - v34;
    v37 = CGPoint.clamp(min:max:)((CGPoint)0, (CGPoint)__PAIR128__(*(unint64_t *)&v36, *(unint64_t *)&v35));
    swift_unownedRetainStrong();
    swift_beginAccess();
    v38 = *(double *)(v23 + 64);
    v39 = *(double *)(v23 + 72);
    swift_release();
    if (v38 != v37.x || v39 != v37.y)
    {
      swift_unownedRetainStrong();
      ScrollViewNode.bindingSafeOffset(_:)(v37.x, v37.y);
      v48 = v37;
      v49 = v41;
      v50 = v42;
      v51 = 0u;
      v52 = 0u;
      v53 = 0u;
      ScrollViewNode.commitScrollTransaction(_:value:)(&v48, v41, v42);
      swift_release();
    }
    ++v21;
    v16 = v16 - (v25 - v37.x);
    v17 = v17 - (v24 - v37.y);
    swift_unownedRelease();
    v22 += 32;
    if (v20 == v21)
      goto LABEL_39;
  }
  if (!v18)
  {
    swift_unownedRetainStrong();
    swift_beginAccess();
    v28 = *(_DWORD *)(v23 + 148);
    swift_release();
    swift_unownedRetainStrong();
    swift_beginAccess();
    v25 = *(double *)(v23 + 64);
    v24 = *(double *)(v23 + 72);
    swift_release();
    swift_unownedRetain();
    if (v21 >= *((_QWORD *)v19 + 2))
      goto LABEL_43;
    *(_QWORD *)v22 = v23;
    *((double *)v22 + 1) = v25;
    *((double *)v22 + 2) = v24;
    *((_DWORD *)v22 + 6) = v28;
    swift_unownedRelease();
    goto LABEL_22;
  }
  swift_unownedRelease();
LABEL_39:
  *(_QWORD *)(v47 + 72) = v19;
  return v15.x - v16;
}

void ScrollViewBehavior.dispatchPhase(_:node:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1870C848C()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned __int16 v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if ((unint64_t)v4 >> 2 == 0xFFFFFFFF)
  {
    if (((*((unsigned __int8 *)v2 + 66) << 16) & 0xFFC1FFFF) == 0)
    {
      result = swift_beginAccess();
      if (*(_BYTE *)(v1 + 296) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = 0x3FFFFFFFCLL;
        v21 = 0;
        v22 = 0;
        return ScrollViewBehavior.stopDragging(value:node:)((uint64_t)&v17, v1);
      }
    }
  }
  else
  {
    v9 = *((unsigned __int8 *)v2 + 66);
    if (!(v9 >> 6))
    {
      v16 = v0;
      v14 = v2[1];
      v15 = *v2;
      v10 = *((unsigned __int16 *)v2 + 32);
      result = swift_beginAccess();
      if (*(_BYTE *)(v1 + 296) == 1)
      {
        v17 = v6;
        v18 = v5;
        v19 = v16;
        v20 = v4;
        v21 = v7;
        v22 = v3;
        return ScrollViewBehavior.stopDragging(value:node:)((uint64_t)&v17, v1);
      }
      v11 = v10 & 0xFF00FFFF | (v9 << 16);
      if (v4 < 0)
        v12 = v6;
      else
        v12 = v5;
      v13 = v16;
      if (v4 < 0)
        v13 = v5;
      *v2 = v15;
      v2[1] = v14;
      *((_QWORD *)v2 + 4) = v12;
      *((_QWORD *)v2 + 5) = v13;
      *((_QWORD *)v2 + 6) = v7 & ~(v4 >> 63);
      *((_QWORD *)v2 + 7) = v3 & ~(v4 >> 63);
      *((_WORD *)v2 + 32) = v11 & 0x101;
      *((_BYTE *)v2 + 66) = (v11 & 0x1010101) >> 16;
      ++*((_DWORD *)v2 + 17);
    }
  }
  return result;
}

uint64_t ScrollViewBehavior.stopDragging(value:node:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  double v4;
  double v5;
  unint64_t v6;
  int v7;
  double v8;
  double v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  void (*v14)(uint64_t, double, double, double, double, double, double, double, double);
  uint64_t v15;
  double v16;
  double v17;
  char v18;
  char v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  CGFloat x;
  CGFloat y;
  CGPoint v29;
  CGFloat v30;
  CGFloat v31;
  double v32;
  double v33;
  unint64_t v34;
  double v35;
  double v36;
  double v37;
  int v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  CGFloat v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;

  if (!(*(unsigned __int8 *)(v2 + 66) >> 6))
  {
    v4 = *(double *)v2;
    v5 = *(double *)(v2 + 48);
    v45 = *(double *)(v2 + 40);
    v46 = *(double *)(v2 + 32);
    v6 = *(_QWORD *)(v2 + 56);
    v7 = *(unsigned __int16 *)(v2 + 64) | (*(unsigned __int8 *)(v2 + 66) << 16);
    v9 = *(double *)(result + 32);
    v8 = *(double *)(result + 40);
    v10 = *(_QWORD *)(result + 24);
    v43 = *(double *)(v2 + 8);
    v44 = *(double *)v2;
    v47 = *(double *)(v2 + 16);
    v42 = *(double *)(v2 + 24);
    v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    if (v10 < 0)
    {
      v9 = 0.0;
      v8 = 0.0;
    }
    if (v11 == 0x3FFFFFFFCLL)
      v12 = *(double *)(v2 + 48);
    else
      v12 = v9;
    if (v11 == 0x3FFFFFFFCLL)
      v13 = *(double *)(v2 + 56);
    else
      v13 = v8;
    v14 = *(void (**)(uint64_t, double, double, double, double, double, double, double, double))(a2 + 368);
    swift_beginAccess();
    swift_retain();
    v15 = CGSize.inset(by:)();
    v14(v15, v44, v43, v47, v42, v12, v13, v16, v17);
    v19 = v18;
    swift_release();
    if ((v19 & 1) != 0)
    {
      v38 = *(_DWORD *)(v2 + 68);
      v39 = *(_QWORD *)(v2 + 72);
      v48 = v4;
      v49 = v43;
      v50 = v47;
      v51 = v42;
      v34 = v6;
      v52 = v46;
      v53 = v45;
      v54 = v5;
      v55 = v6;
      BYTE2(v56) = BYTE2(v7);
      LOWORD(v56) = v7;
      HIDWORD(v56) = v38;
      v57 = v39;
      swift_beginAccess();
      ScrollViewBehavior.estimatedDeceleration(from:node:)();
      v31 = 0.0;
      v32 = v46;
      v33 = v45;
      v35 = v43;
      v36 = v47;
      v37 = v42;
      v30 = 0.0;
    }
    else
    {
      v20 = *(double *)(a2 + 336);
      v21 = *(double *)(a2 + 344);
      CGSize.inset(by:)();
      v23 = v20 - v22;
      CGSize.inset(by:)();
      if (v23 < 0.0)
        v25 = 0.0;
      else
        v25 = v23;
      if (v21 - v24 < 0.0)
        v26 = 0.0;
      else
        v26 = v21 - v24;
      v29 = CGPoint.clamp(min:max:)((CGPoint)0, (CGPoint)__PAIR128__(*(unint64_t *)&v26, *(unint64_t *)&v25));
      y = v29.y;
      x = v29.x;
      v30 = v29.x;
      v31 = v29.y;
      v33 = v45;
      v32 = v46;
      v34 = v6;
      v36 = v47;
      v35 = v43;
      v37 = v42;
    }
    *(double *)v2 = v4;
    *(double *)(v2 + 8) = v35;
    *(double *)(v2 + 16) = v36;
    *(double *)(v2 + 24) = v37;
    *(double *)(v2 + 32) = v32;
    *(double *)(v2 + 40) = v33;
    *(double *)(v2 + 48) = v5;
    *(_QWORD *)(v2 + 56) = v34;
    *(_WORD *)(v2 + 64) = v7 & 0x101;
    *(_BYTE *)(v2 + 66) = (v7 & 0x1000101 | 0x10000u) >> 16;
    ScrollViewNode.bindingSafeOffset(_:)(x, y);
    v48 = v30;
    v49 = v31;
    *(_QWORD *)&v50 = v19 & 1;
    v51 = v40;
    v52 = v41;
    v53 = -v12;
    v54 = -v13;
    v56 = 0;
    v57 = 0;
    v55 = 0x8000000000000000;
    return ScrollViewNode.commitScrollTransaction(_:value:)(&v48, v40, v41);
  }
  return result;
}

uint64_t ScrollViewBehavior.estimatedDeceleration(from:node:)()
{
  uint64_t v0;
  uint64_t result;

  if (!(*(unsigned __int8 *)(v0 + 66) >> 6))
    return swift_beginAccess();
  if (*(unsigned __int8 *)(v0 + 66) >> 6 == 1 && (*(_BYTE *)(v0 + 16) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v0 + 56) + 16) < 2uLL)
    {
      __break(1u);
      return result;
    }
    return swift_beginAccess();
  }
  return result;
}

uint64_t ScrollViewBehavior.updateDeceleration(node:target:velocity:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  double *v9;
  double v10;
  uint64_t *v11;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  char *v42;
  uint64_t Strong;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  double v65;
  double v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v70;
  uint64_t v71;
  double v72;
  unsigned __int8 v75;

  v11 = (uint64_t *)v9;
  v16 = a4 & 1;
  v18 = *v9;
  v17 = v9[1];
  v20 = *((_QWORD *)v9 + 3);
  v19 = *((_QWORD *)v9 + 4);
  v22 = *((_QWORD *)v9 + 5);
  v21 = *((_QWORD *)v9 + 6);
  v23 = *((_QWORD *)v9 + 7);
  v24 = *((unsigned __int8 *)v11 + 66) >> 6;
  if (v24 == 2)
  {
    v25 = *(_QWORD *)&v18 | v11[2] | *(_QWORD *)&v17 | v20 | v19 | v22 | v21 | v23;
    if ((*((unsigned __int16 *)v11 + 32) | (*((unsigned __int8 *)v11 + 66) << 16)) == 0x800000 && v25 == 0)
    {
      if ((a4 & 1) != 0
        || ((v27 = a6, swift_beginAccess(), a6 = v27, *(double *)(a1 + 64) == *(double *)&a2)
          ? (v28 = *(double *)(a1 + 72) == *(double *)&a3)
          : (v28 = 0),
            v28))
      {
        if ((a7 & 1) != 0 || ((a5 | a6) & 0x7FFFFFFFFFFFFFFFLL) == 0)
        {
          if (a8)
          {
            v29 = swift_allocObject();
            *(_QWORD *)(v29 + 16) = a8;
            *(_QWORD *)(v29 + 24) = a9;
            v30 = swift_allocObject();
            *(_QWORD *)(v30 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
            *(_QWORD *)(v30 + 24) = v29;
            v31 = swift_allocObject();
            *(_QWORD *)(v31 + 16) = thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())partial apply;
            *(_QWORD *)(v31 + 24) = v30;
            v32 = swift_allocObject();
            *(_QWORD *)(v32 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
            *(_QWORD *)(v32 + 24) = v31;
            *(_BYTE *)(v32 + 32) = 1;
            swift_retain_n();
            outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a8, a9);
            swift_retain();
            static Update.enqueueAction(_:)();
            swift_release_n();
            swift_release();
            swift_release();
          }
          return 0;
        }
      }
    }
    v71 = a3;
    v72 = *(double *)&a6;
    swift_beginAccess();
    v10 = *(double *)(a1 + 64);
    v41 = *(double *)(a1 + 72);
    swift_bridgeObjectRelease();
    v42 = (char *)MEMORY[0x1E0DEE9D8];
    v11[9] = MEMORY[0x1E0DEE9D8];
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v44 = Strong;
      while (1)
      {
        swift_beginAccess();
        if (*(_BYTE *)(v44 + 297) != 1)
          break;
        swift_retain();
        ScrollViewNode.resetBehavior(completed:)(0);
        swift_beginAccess();
        v45 = *(_QWORD *)(v44 + 64);
        v46 = *(_QWORD *)(v44 + 72);
        swift_beginAccess();
        v47 = *(_DWORD *)(v44 + 148);
        swift_unownedRetain();
        swift_unownedRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v42 + 2) + 1, 1, v42);
        v49 = *((_QWORD *)v42 + 2);
        v48 = *((_QWORD *)v42 + 3);
        if (v49 >= v48 >> 1)
          v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v48 > 1), v49 + 1, 1, v42);
        *((_QWORD *)v42 + 2) = v49 + 1;
        v50 = &v42[32 * v49];
        *((_QWORD *)v50 + 4) = v44;
        *((_QWORD *)v50 + 5) = v45;
        *((_QWORD *)v50 + 6) = v46;
        *((_DWORD *)v50 + 14) = v47;
        v51 = swift_weakLoadStrong();
        swift_release();
        swift_unownedRelease();
        swift_release();
        v44 = v51;
        if (!v51)
          goto LABEL_33;
      }
      swift_release();
    }
LABEL_33:
    v11[9] = (uint64_t)v42;
    v52 = 0.0;
    v53 = 0.0;
    a3 = v71;
LABEL_34:
    swift_beginAccess();
    v63 = (1.0 - pow(*(long double *)(a1 + 240), 8.33333333)) / 0.00833333333;
    if (v63 > 1.0)
      v64 = v63;
    else
      v64 = 1.0;
    if ((a7 & 1) != 0)
      v65 = v52;
    else
      v65 = *(double *)&a5;
    if ((a7 & 1) != 0)
      v66 = v53;
    else
      v66 = v72;
    specialized Deceleration2D.init(time:offset:velocity:drag:bounceStiffness:bounceDrag:stoppedVelocity:)(0.0, v10, v41, v65, v66, v64, 100.0, 17.0, v55, v56, v57, v58, v59, v60, v61, v62, 0x4004000000000000);
    v23 = v67;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v75 = 1;
    v40 = *(double *)&a2;
    v34 = a8;
    if (!a8)
      goto LABEL_46;
    goto LABEL_44;
  }
  if (v24 != 1)
  {
    v72 = *(double *)&a6;
    *(_QWORD *)&v52 = v21 ^ 0x8000000000000000;
    *(_QWORD *)&v53 = v23 ^ 0x8000000000000000;
    v10 = ScrollViewNode.removeRubberBanding(_:)((void (*)(double, double))specialized static ScrollViewSupport.addRubberBandingToResidue(_:range:), v18, v17);
    v41 = v54;
    goto LABEL_34;
  }
  v75 = v19 & 1;
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v22, v21);
  swift_bridgeObjectRetain();
  v34 = a8;
  if (!a8)
    goto LABEL_66;
  if (!v22)
  {
    v40 = *(double *)&a2;
LABEL_44:
    v39 = a9;
    swift_retain();
    v22 = 0;
    goto LABEL_45;
  }
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = v22;
  *(_QWORD *)(v35 + 24) = v21;
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
  *(_QWORD *)(v36 + 24) = v35;
  v37 = swift_allocObject();
  *(_QWORD *)(v37 + 16) = thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())partial apply;
  *(_QWORD *)(v37 + 24) = v36;
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
  *(_QWORD *)(v38 + 24) = v37;
  *(_BYTE *)(v38 + 32) = 0;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a8, a9);
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v22, v21);
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release_n();
  swift_release();
  v39 = a9;
  v34 = a8;
  swift_release();
  v40 = *(double *)&a2;
LABEL_45:
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v22, v21);
  v22 = v34;
  v21 = v39;
LABEL_46:
  if ((_DWORD)v16)
    goto LABEL_67;
LABEL_47:
  if (*(_QWORD *)(v23 + 16) < 2uLL)
  {
    __break(1u);
    goto LABEL_75;
  }
  v10 = *(double *)(v23 + 128);
  v34 = *(_QWORD *)(v23 + 136);
  if (*(double *)(v23 + 40) != v40 || (*(_QWORD *)(v23 + 48) & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_78;
    v68 = *(_QWORD *)(v23 + 16);
    if (!v68)
      goto LABEL_79;
    goto LABEL_52;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    v68 = *(_QWORD *)(v23 + 16);
    if (v68)
      goto LABEL_56;
LABEL_82:
    __break(1u);
    return result;
  }
  while (1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
    v23 = result;
    v68 = *(_QWORD *)(result + 16);
    if (!v68)
      goto LABEL_82;
LABEL_56:
    *(_QWORD *)(v23 + 88) = 0;
    *(_BYTE *)(v23 + 112) = 0;
    while (2)
    {
      if (v10 == *(double *)&a3 && (v34 & 0x7FFFFFFFFFFFFFFFLL) == 0)
      {
        if (v68 >= 2)
          goto LABEL_70;
        __break(1u);
LABEL_66:
        v40 = *(double *)&a2;
        if ((_DWORD)v16)
        {
LABEL_67:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v70 = *(_QWORD *)(v23 + 16);
            if (v70)
            {
LABEL_69:
              *(_QWORD *)(v23 + 88) = 0;
              *(_BYTE *)(v23 + 112) = 0;
              if (v70 != 1)
              {
LABEL_70:
                *(_QWORD *)(v23 + 176) = 0;
                *(_BYTE *)(v23 + 200) = 0;
                goto LABEL_71;
              }
LABEL_77:
              __break(1u);
LABEL_78:
              v23 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
              v68 = *(_QWORD *)(v23 + 16);
              if (!v68)
              {
LABEL_79:
                __break(1u);
                goto LABEL_80;
              }
LABEL_52:
              if ((*(_BYTE *)(v23 + 112) & 1) == 0)
              {
                *(_QWORD *)(v23 + 88) = 0x4059000000000000;
                *(double *)(v23 + 96) = v40;
                *(_QWORD *)(v23 + 56) = 0x4031000000000000;
              }
              continue;
            }
LABEL_76:
            __break(1u);
            goto LABEL_77;
          }
LABEL_75:
          v23 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
          v70 = *(_QWORD *)(v23 + 16);
          if (v70)
            goto LABEL_69;
          goto LABEL_76;
        }
        goto LABEL_47;
      }
      break;
    }
    if (v68 >= 2)
      break;
LABEL_80:
    __break(1u);
  }
  if ((*(_BYTE *)(v23 + 200) & 1) == 0)
  {
    *(_QWORD *)(v23 + 176) = 0x4059000000000000;
    *(double *)(v23 + 184) = *(double *)&a3;
    *(_QWORD *)(v23 + 144) = 0x4031000000000000;
  }
LABEL_71:
  outlined consume of ScrollViewBehavior.Phase(*v11, v11[1], v11[2], v11[3], v11[4], v11[5], v11[6], v11[7], *((unsigned __int16 *)v11 + 32) | (*((unsigned __int8 *)v11 + 66) << 16));
  *(double *)v11 = v40;
  v11[1] = a3;
  v11[2] = v16;
  v11[3] = v20;
  v11[4] = v75;
  v11[5] = v22;
  v11[6] = v21;
  v11[7] = v23;
  *((_BYTE *)v11 + 66) = 64;
  *((_WORD *)v11 + 32) = 0;
  ++*((_DWORD *)v11 + 17);
  return 1;
}

CGFloat ScrollViewNode.removeRubberBanding(_:)(void (*a1)(double, double), double a2, double a3)
{
  uint64_t v3;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CGPoint v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;

  v7 = *(double *)(v3 + 336);
  v8 = *(double *)(v3 + 344);
  swift_beginAccess();
  CGSize.inset(by:)();
  v10 = v7 - v9;
  CGSize.inset(by:)();
  if (v10 < 0.0)
    v12 = 0.0;
  else
    v12 = v10;
  if (v8 - v11 < 0.0)
    v13 = 0.0;
  else
    v13 = v8 - v11;
  v14 = CGPoint.clamp(min:max:)((CGPoint)0, (CGPoint)__PAIR128__(*(unint64_t *)&v13, *(unint64_t *)&v12));
  v15 = CGSize.inset(by:)();
  v17 = v16;
  v19 = ((double (*)(uint64_t, double, double))a1)(v15, v14.x - a2, v18);
  a1(v14.y - a3, v17);
  return v14.x - v19;
}

uint64_t ScrollViewBehavior.iterateDeceleration(node:time:offset:estimatedTarget:)(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  char *v25;
  int v26;
  int v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  double v35;
  double v36;
  int v37;
  int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  CGFloat v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[4];
  __int128 v63;
  __int128 v64;
  __int128 v65;

  if (((*(unsigned __int16 *)(v6 + 64) | (*(unsigned __int8 *)(v6 + 66) << 16)) & 0xC00000) != 0x400000)
    return 1;
  v7 = v6;
  v58 = *(unsigned __int16 *)(v6 + 64) | (*(unsigned __int8 *)(v6 + 66) << 16);
  v11 = *(_QWORD *)v6;
  v57 = *(_QWORD *)(v6 + 8);
  v12 = *(double *)(v6 + 24);
  v61 = *(_QWORD *)(v6 + 16);
  v13 = *(_QWORD *)(v6 + 32);
  v14 = *(_QWORD *)(v6 + 40);
  v15 = *(_QWORD *)(v6 + 48);
  v16 = *(_QWORD *)(v7 + 56);
  v17 = *a2 + -0.0166666667;
  v18 = *a2 - v12;
  v59 = v11;
  v60 = v13;
  if ((v13 & 1) != 0)
    v18 = 0.0166666667;
  v55 = v18;
  v54 = *(_QWORD *)&v12;
  if ((v13 & 1) == 0)
    v17 = v12;
  v52 = v17;
  v20 = *(double *)(a1 + 336);
  v19 = *(double *)(a1 + 344);
  swift_beginAccess();
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v14, v15);
  swift_bridgeObjectRetain();
  CGSize.inset(by:)();
  v22 = v20 - v21;
  CGSize.inset(by:)();
  if (v22 < 0.0)
    v22 = 0.0;
  if (v19 - v23 < 0.0)
    v24 = 0.0;
  else
    v24 = v19 - v23;
  v25 = (char *)v16;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_39;
  while (1)
  {
    if (*((_QWORD *)v25 + 2))
    {
      v26 = ScalarDeceleration.iter(_:minValue:maxValue:)(0, 0, *(uint64_t *)&v22, 0, v55);
      if (*((_QWORD *)v25 + 2) >= 2uLL)
        break;
    }
    __break(1u);
LABEL_39:
    v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
  }
  v27 = v26;
  v53 = v16;
  result = ScalarDeceleration.iter(_:minValue:maxValue:)(0, 0, *(uint64_t *)&v24, 0, v55);
  if ((v27 & result & 1) != 0)
  {
    v29 = v15;
    if ((v61 & 1) == 0)
      *(CGPoint *)a3 = CGPoint.clamp(min:max:)((CGPoint)0, (CGPoint)__PAIR128__(*(unint64_t *)&v24, *(unint64_t *)&v22));
    v30 = *(_QWORD *)(v7 + 72);
    v31 = *(_QWORD *)(v30 + 16);
    v32 = v60;
    if (v31)
    {
      v56 = v15;
      swift_bridgeObjectRetain();
      v33 = (_DWORD *)(v30 + 56);
      do
      {
        v34 = *((_QWORD *)v33 - 3);
        v35 = *((double *)v33 - 2);
        v36 = *((double *)v33 - 1);
        v37 = *v33;
        swift_unownedRetainStrong();
        swift_beginAccess();
        v38 = *(_DWORD *)(v34 + 148);
        swift_unownedRetain();
        swift_release();
        if (v38 == v37)
        {
          swift_unownedRetainStrong();
          ScrollViewNode.bindingSafeOffset(_:)(v35, v36);
          *(double *)v62 = v35;
          *(double *)&v62[1] = v36;
          *(double *)&v62[2] = v39;
          *(double *)&v62[3] = v40;
          v63 = 0u;
          v64 = 0u;
          v65 = 0u;
          ScrollViewNode.commitScrollTransaction(_:value:)(v62, v39, v40);
          swift_release();
        }
        swift_unownedRelease();
        v33 += 8;
        --v31;
      }
      while (v31);
      swift_bridgeObjectRelease();
      v29 = v56;
      v32 = v60;
    }
    if (v14)
    {
      v46 = swift_allocObject();
      *(_QWORD *)(v46 + 16) = v14;
      *(_QWORD *)(v46 + 24) = v29;
      v47 = swift_allocObject();
      *(_QWORD *)(v47 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      *(_QWORD *)(v47 + 24) = v46;
      v48 = swift_allocObject();
      *(_QWORD *)(v48 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ());
      *(_QWORD *)(v48 + 24) = v47;
      v49 = swift_allocObject();
      *(_QWORD *)(v49 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      *(_QWORD *)(v49 + 24) = v48;
      *(_BYTE *)(v49 + 32) = 1;
      swift_retain();
      outlined copy of ScrollViewBehavior.Phase(v59, v57, v61, v54, v32, v14, v29, v53, v58);
      swift_retain();
      outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v14, v29);
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of ScrollViewBehavior.Phase(v59, v57, v61, v54, v60, v14, v29, v53, v58);
      swift_release();
    }
    outlined consume of ScrollViewBehavior.Phase(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56), *(unsigned __int16 *)(v7 + 64) | (*(unsigned __int8 *)(v7 + 66) << 16));
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_BYTE *)(v7 + 66) = 0x80;
    *(_WORD *)(v7 + 64) = 0;
    ++*(_DWORD *)(v7 + 68);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v7 + 72) = MEMORY[0x1E0DEE9D8];
    outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v14, v29);
    swift_bridgeObjectRelease();
    return 1;
  }
  if ((v61 & 1) == 0 || (a6 & 1) != 0)
    goto LABEL_31;
  if (*((_QWORD *)v25 + 2) >= 2uLL)
  {
    v41 = fabs(*((double *)v25 + 6));
    v42 = fabs(*((double *)v25 + 17));
    if (v41 < 50.0 && (v25[112] & 1) == 0)
    {
      *((_QWORD *)v25 + 12) = a4;
      *((double *)v25 + 11) = (v41 / -50.0 + 1.0) * 30.0;
      *((_QWORD *)v25 + 7) = 0x4024000000000000;
    }
    if (v42 < 50.0 && (v25[200] & 1) == 0)
    {
      *((_QWORD *)v25 + 23) = a5;
      *((double *)v25 + 22) = (v42 / -50.0 + 1.0) * 30.0;
      *((_QWORD *)v25 + 18) = 0x4024000000000000;
    }
LABEL_31:
    outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v14, v15);
    swift_bridgeObjectRetain();
    result = outlined consume of ScrollViewBehavior.Phase(v59, v57, v61, v54, v60, v14, v15, v16, v58);
    *(_QWORD *)v7 = v59;
    *(_QWORD *)(v7 + 8) = v57;
    *(_QWORD *)(v7 + 16) = v61 & 1;
    *(double *)(v7 + 24) = v52;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = v14;
    *(_QWORD *)(v7 + 48) = v15;
    *(_QWORD *)(v7 + 56) = v25;
    *(_BYTE *)(v7 + 66) = 64;
    *(_WORD *)(v7 + 64) = 0;
    ++*(_DWORD *)(v7 + 68);
    if (*((_QWORD *)v25 + 2) >= 2uLL)
    {
      v43 = ScrollViewBehavior.overflowContentOffset(_:node:)(a1, *((double *)v25 + 5), *((double *)v25 + 16));
      v45 = v44;
      outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v14, v15);
      swift_bridgeObjectRelease();
      result = 0;
      *(CGFloat *)a3 = v43;
      *(_QWORD *)(a3 + 8) = v45;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1870C9C8C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(unsigned __int8 *a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())(char a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())(a1, *(uint64_t (**)(char *))(v1 + 16));
}

{
  uint64_t v1;
  uint64_t (*v2)(char *);
  char v4;

  v2 = *(uint64_t (**)(char *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for specialized closure #1 in ScrollViewNode.dispatchAction<A>(_:_:)()
{
  uint64_t v0;

  return specialized closure #1 in ScrollViewNode.dispatchAction<A>(_:_:)(*(uint64_t (**)(char *))(v0 + 16), *(_QWORD *)(v0 + 24), (char *)(v0 + 32));
}

{
  uint64_t v0;
  uint64_t (*v1)(char *);
  char v3;

  v1 = *(uint64_t (**)(char *))(v0 + 16);
  v3 = *(_BYTE *)(v0 + 32);
  return v1(&v3);
}

uint64_t sub_1870C9CCC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t destroy for ScrollViewBehavior.ContainerInfo()
{
  return swift_unownedRelease();
}

uint64_t initializeWithCopy for ScrollViewBehavior.ContainerInfo(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = swift_unownedRetain();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for ScrollViewBehavior.ContainerInfo(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = swift_unownedRetain();
  swift_unownedRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for ScrollViewBehavior.ContainerInfo(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unownedRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewBehavior.ContainerInfo(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 28))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewBehavior.ContainerInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 28) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewBehavior.ContainerInfo()
{
  return &type metadata for ScrollViewBehavior.ContainerInfo;
}

uint64_t destroy for ScrollViewBehavior.Phase(uint64_t a1)
{
  return outlined consume of ScrollViewBehavior.Phase(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16));
}

uint64_t initializeWithCopy for ScrollViewBehavior.Phase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v13;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(unsigned __int8 *)(a2 + 66);
  v13 = *(unsigned __int16 *)(a2 + 64);
  outlined copy of ScrollViewBehavior.Phase(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v13 | (v11 << 16));
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 66) = v11;
  *(_WORD *)(a1 + 64) = v13;
  return a1;
}

uint64_t assignWithCopy for ScrollViewBehavior.Phase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v22;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v22 = *(unsigned __int8 *)(a2 + 66);
  v11 = *(unsigned __int16 *)(a2 + 64);
  outlined copy of ScrollViewBehavior.Phase(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11 | (v22 << 16));
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_WORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 66) = v22;
  outlined consume of ScrollViewBehavior.Phase(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for ScrollViewBehavior.Phase(uint64_t a1, uint64_t a2)
{
  char v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;

  v3 = *(_BYTE *)(a2 + 66);
  v4 = *(_WORD *)(a2 + 64);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16);
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  *(_WORD *)(a1 + 64) = v4;
  *(_BYTE *)(a1 + 66) = v3;
  outlined consume of ScrollViewBehavior.Phase(v5, v7, v6, v8, v9, v10, v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewBehavior.Phase(uint64_t a1, unsigned int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 > 0x1FFFFD && *(_BYTE *)(a1 + 67))
    return (*(_DWORD *)a1 + 2097150);
  if ((((*(unsigned __int8 *)(a1 + 66) >> 6) | (4
                                               * ((*(unsigned __int16 *)(a1 + 64) >> 2) & 0x3F80 | (*(_WORD *)(a1 + 64) >> 1) | (((*(unsigned __int8 *)(a1 + 66) >> 1) & 0x1F) << 14)))) ^ 0x1FFFFFu) >= 0x1FFFFD)
    v3 = -1;
  else
    v3 = ((*(unsigned __int8 *)(a1 + 66) >> 6) | (4
                                                * ((*(unsigned __int16 *)(a1 + 64) >> 2) & 0x3F80 | (*(_WORD *)(a1 + 64) >> 1) | (((*(unsigned __int8 *)(a1 + 66) >> 1) & 0x1F) << 14)))) ^ 0x1FFFFF;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewBehavior.Phase(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3;

  if (a2 > 0x1FFFFD)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 66) = 0;
    *(_WORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 2097150;
    if (a3 >= 0x1FFFFE)
      *(_BYTE *)(result + 67) = 1;
  }
  else
  {
    if (a3 >= 0x1FFFFE)
      *(_BYTE *)(result + 67) = 0;
    if (a2)
    {
      v3 = ((-a2 >> 2) & 0x7FFFF) - (a2 << 19);
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 66) = (v3 >> 13) & 0xFE;
      *(_WORD *)(result + 64) = (4 * v3) & 0xFE00 | (2 * (v3 & 0x7F));
    }
  }
  return result;
}

uint64_t getEnumTag for ScrollViewBehavior.Phase(uint64_t a1)
{
  if ((*(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16)) << 8 >> 8 >= 0)
    return *(unsigned __int8 *)(a1 + 66) >> 6;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveProjectEnumData for ScrollViewBehavior.Phase(uint64_t a1)
{
  uint64_t result;
  int v2;

  v2 = *(unsigned __int16 *)(a1 + 64);
  result = a1 + 64;
  *(_BYTE *)(result + 2) = ((v2 | (*(unsigned __int8 *)(result + 2) << 16)) >> 16) & 0x3F;
  *(_WORD *)result = v2;
  return result;
}

uint64_t destructiveInjectEnumTag for ScrollViewBehavior.Phase(uint64_t result, unsigned int a2)
{
  int v2;
  int v3;

  if (a2 < 2)
  {
    v2 = *(unsigned __int16 *)(result + 64);
    result += 64;
    v3 = (v2 | (*(unsigned __int8 *)(result + 2) << 16)) & 0x1010101 | (a2 << 22);
    *(_WORD *)result = v2 & 0x101;
    *(_BYTE *)(result + 2) = BYTE2(v3);
  }
  else
  {
    *(_QWORD *)result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_QWORD *)(result + 56) = 0;
    *(_BYTE *)(result + 66) = 0x80;
    *(_WORD *)(result + 64) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewBehavior.Phase()
{
  return &type metadata for ScrollViewBehavior.Phase;
}

uint64_t destroy for ScrollViewBehavior.DecelerationState(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 40))
    swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ScrollViewBehavior.DecelerationState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ScrollViewBehavior.DecelerationState(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v4;
  v5 = *((_QWORD *)a2 + 3);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = (_OWORD *)(a1 + 40);
  v8 = (__int128 *)((char *)a2 + 40);
  v7 = *((_QWORD *)a2 + 5);
  if (!*(_QWORD *)(a1 + 40))
  {
    if (v7)
    {
      v10 = *((_QWORD *)a2 + 6);
      *(_QWORD *)(a1 + 40) = v7;
      *(_QWORD *)(a1 + 48) = v10;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *v6 = *v8;
    goto LABEL_8;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_7;
  }
  v9 = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v9;
  swift_retain();
  swift_release();
LABEL_8:
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ScrollViewBehavior.DecelerationState(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = (_OWORD *)(a1 + 40);
  v6 = (_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 40);
  if (!*(_QWORD *)(a1 + 40))
  {
    if (v5)
    {
      v8 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v5;
      *(_QWORD *)(a1 + 48) = v8;
      goto LABEL_8;
    }
LABEL_7:
    *v4 = *v6;
    goto LABEL_8;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v7;
  swift_release();
LABEL_8:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewBehavior.DecelerationState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewBehavior.DecelerationState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewBehavior.DecelerationState()
{
  return &type metadata for ScrollViewBehavior.DecelerationState;
}

uint64_t getEnumTagSinglePayload for ScrollViewBehavior.DragState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 67))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 64);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewBehavior.DragState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 66) = 0;
    *(_WORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 67) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 67) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewBehavior.DragState()
{
  return &type metadata for ScrollViewBehavior.DragState;
}

char *initializeBufferWithCopyOfBuffer for CellConfiguration(char *a1, uint64_t *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = (char *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UICellConfigurationState();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for UICellConfigurationState?, (void (*)(uint64_t))MEMORY[0x1E0DC2020]);
      memcpy(v4, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 16))(v4, a2, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
    }
    v11 = a3[6];
    v4[a3[5]] = *((_BYTE *)a2 + a3[5]);
    v4[v11] = *((_BYTE *)a2 + v11);
    v12 = a3[8];
    v4[a3[7]] = *((_BYTE *)a2 + a3[7]);
    *(_QWORD *)&v4[v12] = *(uint64_t *)((char *)a2 + v12);
    v13 = a3[9];
    v14 = &v4[v13];
    v15 = (char *)a2 + v13;
    v16 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_QWORD *)v14 + 1) = v16;
    *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
    *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
    *(_OWORD *)(v14 + 40) = *(_OWORD *)(v15 + 40);
    *((_QWORD *)v14 + 7) = *((_QWORD *)v15 + 7);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for CellConfiguration(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for UICellConfigurationState();
  v3 = *(_QWORD *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  swift_release();
  swift_release();
  return swift_release();
}

char *initializeWithCopy for CellConfiguration(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v6 = type metadata accessor for UICellConfigurationState();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for UICellConfigurationState?, (void (*)(uint64_t))MEMORY[0x1E0DC2020]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  a1[v9] = a2[v9];
  v10 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  v11 = a3[9];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = *((_QWORD *)v13 + 1);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *((_QWORD *)v12 + 1) = v14;
  *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
  *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

char *assignWithCopy for CellConfiguration(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = type metadata accessor for UICellConfigurationState();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for UICellConfigurationState?, (void (*)(uint64_t))MEMORY[0x1E0DC2020]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  a1[a3[5]] = a2[a3[5]];
  a1[a3[6]] = a2[a3[6]];
  a1[a3[7]] = a2[a3[7]];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v12 = a3[9];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  swift_retain();
  swift_release();
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_retain();
  swift_release();
  *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
  swift_retain();
  swift_release();
  *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
  *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
  *((_QWORD *)v13 + 5) = *((_QWORD *)v14 + 5);
  *((_QWORD *)v13 + 6) = *((_QWORD *)v14 + 6);
  *((_QWORD *)v13 + 7) = *((_QWORD *)v14 + 7);
  return a1;
}

char *initializeWithTake for CellConfiguration(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;

  v6 = type metadata accessor for UICellConfigurationState();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for UICellConfigurationState?, (void (*)(uint64_t))MEMORY[0x1E0DC2020]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  a1[v9] = a2[v9];
  v10 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  v11 = a3[9];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  v15 = *((_OWORD *)v13 + 3);
  *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
  *((_OWORD *)v12 + 3) = v15;
  return a1;
}

char *assignWithTake for CellConfiguration(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v6 = type metadata accessor for UICellConfigurationState();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for UICellConfigurationState?, (void (*)(uint64_t))MEMORY[0x1E0DC2020]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  a1[v12] = a2[v12];
  v13 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  v14 = a3[9];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_QWORD *)&a1[v14] = *(_QWORD *)v16;
  swift_release();
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  swift_release();
  *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
  swift_release();
  *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(v16 + 40);
  *((_QWORD *)v15 + 7) = *((_QWORD *)v16 + 7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CellConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870CAD50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for UICellConfigurationState?, (void (*)(uint64_t))MEMORY[0x1E0DC2020]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for CellConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1870CADE8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for UICellConfigurationState?, (void (*)(uint64_t))MEMORY[0x1E0DC2020]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
}

uint64_t type metadata accessor for CellConfiguration()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CellConfiguration;
  if (!type metadata singleton initialization cache for CellConfiguration)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for CellConfiguration()
{
  unint64_t v0;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(319, &lazy cache variable for type metadata for UICellConfigurationState?, (void (*)(uint64_t))MEMORY[0x1E0DC2020]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t CellConfiguration.effectiveState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;

  v2 = v1;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for UICellConfigurationState?, (void (*)(uint64_t))MEMORY[0x1E0DC2020]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v16 - v6;
  v8 = type metadata accessor for UICellConfigurationState();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(unsigned __int8 *)(v2 + *(int *)(type metadata accessor for CellConfiguration() + 28));
  if (v13 == 2)
    return outlined init with copy of UICellConfigurationState?(v2, a1);
  outlined init with copy of UICellConfigurationState?(v2, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of IntelligenceElement?((uint64_t)v7, &lazy cache variable for type metadata for UICellConfigurationState?, (void (*)(uint64_t))MEMORY[0x1E0DC2020]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, 1, 1, v8);
  }
  else
  {
    v15 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v15(v12, v7, v8);
    if ((v13 & 1) != 0)
    {
      UICellConfigurationState.isDisabled.setter();
    }
    else if ((UICellConfigurationState.isHighlighted.getter() & 1) != 0)
    {
      UICellConfigurationState.isHighlighted.setter();
      UICellConfigurationState.isSelected.setter();
    }
    v15((char *)a1, v12, v8);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
  }
}

uint64_t CellConfiguration.backgroundConfiguration()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  int *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void (*v30)(_BYTE *, uint64_t);
  _BYTE v31[16];

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for UICellConfigurationState?, (void (*)(uint64_t))MEMORY[0x1E0DC2020]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = &v31[-v5];
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (void (*)(uint64_t))MEMORY[0x1E0DC2130]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v31[-v9];
  v11 = type metadata accessor for UIBackgroundConfiguration();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = &v31[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = &v31[-v18];
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = &v31[-v22];
  v24 = (int *)type metadata accessor for CellConfiguration();
  v26 = *(unsigned __int8 *)(v1 + v24[5]);
  if (v26 == 3)
  {
    static UIBackgroundConfiguration.listAccompaniedSidebarCell()();
  }
  else if (v26 == 1)
  {
    if (*(_BYTE *)(v1 + v24[6]) == 1)
      static UIBackgroundConfiguration.listHeader()();
    else
      static UIBackgroundConfiguration.listCell()();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v23, v19, v11);
  }
  else
  {
    if (*(_QWORD *)(v1 + v24[8]) > 2uLL)
    {
      MEMORY[0x1E0C80A78](v24, v25);
      *(_QWORD *)&v31[-16] = v1;
      static Log.internalWarning(_:)();
    }
    static UIBackgroundConfiguration.listCell()();
  }
  v27 = CellConfiguration.effectiveState.getter((uint64_t)v6);
  MEMORY[0x1E0C80A78](v27, v28);
  *(_QWORD *)&v31[-16] = v23;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF5UIKit24UICellConfigurationStateV_s5NeverOAD012UIBackgroundE0VTg5((void (*)(char *))partial apply for closure #1 in CellConfiguration.backgroundConfiguration(), (uint64_t)&v31[-32], (uint64_t)v10);
  outlined destroy of IntelligenceElement?((uint64_t)v6, &lazy cache variable for type metadata for UICellConfigurationState?, (void (*)(uint64_t))MEMORY[0x1E0DC2020]);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 16))(v15, v23, v11);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v12 + 32))(a1, v15, v11);
    outlined destroy of IntelligenceElement?((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (void (*)(uint64_t))MEMORY[0x1E0DC2130]);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v23, v11);
  }
  else
  {
    v30 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
    v30(v15, v11);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v12 + 32))(a1, v10, v11);
    return ((uint64_t (*)(_BYTE *, uint64_t))v30)(v23, v11);
  }
}

uint64_t implicit closure #1 in CellConfiguration.backgroundConfiguration()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(67);
  v0._object = (void *)0x8000000187BD7120;
  v0._countAndFlagsBits = 0xD000000000000041;
  String.append(_:)(v0);
  type metadata accessor for CellConfiguration();
  type metadata accessor for UITableViewStyle(0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t closure #1 in CellConfiguration.backgroundConfiguration()(uint64_t a1)
{
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v5[5];

  v2 = type metadata accessor for UICellConfigurationState();
  v5[3] = v2;
  v5[4] = MEMORY[0x1E0DC2018];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(boxed_opaque_existential_1, a1, v2);
  UIBackgroundConfiguration.updated(for:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance CellConfigurationKey@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = type metadata accessor for CellConfiguration();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static CellConfigurationKey.defaultValue);
  return outlined init with copy of CellConfiguration(v3, a1);
}

uint64_t EnvironmentValues.cellConfiguration.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.cellConfiguration.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = type metadata accessor for CellConfiguration();
  MEMORY[0x1E0C80A78](v3, v4);
  outlined init with copy of CellConfiguration(a1, (uint64_t)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of CellConfiguration(a1);
}

uint64_t specialized CellConfiguration.Values.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;

  v31 = type metadata accessor for UIListContentConfiguration.ImageProperties();
  v4 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UIListContentConfiguration.TextProperties();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  UIListContentConfiguration.textProperties.getter();
  v13 = UIListContentConfiguration.TextProperties.color.getter();
  v32 = *(void (**)(char *, uint64_t))(v9 + 8);
  v32(v12, v8);
  v33 = v13;
  type metadata accessor for UIColor();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (uint64_t (*)(uint64_t))type metadata accessor for UIColor, (uint64_t)&protocol conformance descriptor for UIColor);
  v14 = Color.init<A>(provider:)();
  swift_retain();
  UIListContentConfiguration.imageProperties.getter();
  v15 = UIListContentConfiguration.ImageProperties.tintColor.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v31);
  if (v15)
  {
    v33 = v15;
    v16 = Color.init<A>(provider:)();
  }
  else
  {
    v16 = 0;
  }
  swift_retain();
  UIListContentConfiguration.textProperties.getter();
  UIListContentConfiguration.TextProperties.font.getter();
  v32(v12, v8);
  v17 = Font.init(_:)();
  swift_retain();
  UIListContentConfiguration.directionalLayoutMargins.getter();
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v25 = v24;
  UIListContentConfiguration.imageToTextPadding.getter();
  v27 = v26;
  v28 = type metadata accessor for UIListContentConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(a1, v28);
  swift_release();
  swift_release();
  result = swift_release();
  *a2 = v14;
  a2[1] = v16;
  a2[2] = v17;
  a2[3] = v19;
  a2[4] = v21;
  a2[5] = v23;
  a2[6] = v25;
  a2[7] = v27;
  return result;
}

uint64_t outlined init with copy of UICellConfigurationState?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for UICellConfigurationState?, (void (*)(uint64_t))MEMORY[0x1E0DC2020]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CellConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CellConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<CellConfigurationKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<CellConfigurationKey>);
  }
}

uint64_t outlined destroy of CellConfiguration(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CellConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for implicit closure #1 in CellConfiguration.backgroundConfiguration()()
{
  return implicit closure #1 in CellConfiguration.backgroundConfiguration()();
}

uint64_t partial apply for closure #1 in CellConfiguration.backgroundConfiguration()(uint64_t a1)
{
  return closure #1 in CellConfiguration.backgroundConfiguration()(a1);
}

ValueMetadata *type metadata accessor for CellConfigurationKey()
{
  return &type metadata for CellConfigurationKey;
}

uint64_t destroy for CellConfiguration.Values()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for CellConfiguration.Values(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for CellConfiguration.Values(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

uint64_t assignWithTake for CellConfiguration.Values(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for CellConfiguration.Values(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CellConfiguration.Values(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CellConfiguration.Values()
{
  return &type metadata for CellConfiguration.Values;
}

uint64_t outlined init with take of CellConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CellConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t DefaultTextFieldStyle._body(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of TextField<_TextFieldStyleLabel>(a1, a2);
}

uint64_t DefaultTextFieldStyle._Body.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  type metadata accessor for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TextField<_TextFieldStyleLabel>(v1, (uint64_t)v6);
  outlined init with copy of ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>((uint64_t)v6, a1);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>);
}

void type metadata accessor for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
    type metadata accessor for StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>);
  }
}

uint64_t type metadata accessor for StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>)
  {
    type metadata accessor for TextFieldStyleModifier<PlatformItemListTextFieldStyle>(255, &lazy cache variable for type metadata for TextFieldStyleModifier<PlatformItemListTextFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListTextFieldStyle and conformance PlatformItemListTextFieldStyle, (uint64_t)&type metadata for PlatformItemListTextFieldStyle);
    lazy protocol witness table accessor for type IsPlatformItemListSourcePredicate and conformance IsPlatformItemListSourcePredicate();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemListTextFieldStyle and conformance PlatformItemListTextFieldStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListTextFieldStyle and conformance PlatformItemListTextFieldStyle;
  if (!lazy protocol witness table cache variable for type PlatformItemListTextFieldStyle and conformance PlatformItemListTextFieldStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListTextFieldStyle, &type metadata for PlatformItemListTextFieldStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListTextFieldStyle and conformance PlatformItemListTextFieldStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IsPlatformItemListSourcePredicate and conformance IsPlatformItemListSourcePredicate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsPlatformItemListSourcePredicate and conformance IsPlatformItemListSourcePredicate;
  if (!lazy protocol witness table cache variable for type IsPlatformItemListSourcePredicate and conformance IsPlatformItemListSourcePredicate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsPlatformItemListSourcePredicate, &type metadata for IsPlatformItemListSourcePredicate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsPlatformItemListSourcePredicate and conformance IsPlatformItemListSourcePredicate);
  }
  return result;
}

uint64_t outlined init with copy of ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t associated type witness table accessor for View.Body : View in DefaultTextFieldStyle._Body()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DefaultTextFieldStyle._Body()
{
  type metadata accessor for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>();
  type metadata accessor for TextFieldStyleModifier<PlatformItemListTextFieldStyle>(0, &lazy cache variable for type metadata for TextFieldStyleModifier<PlainTextFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainTextFieldStyle and conformance PlainTextFieldStyle, (uint64_t)&type metadata for PlainTextFieldStyle);
  lazy protocol witness table accessor for type ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance DefaultTextFieldStyle._Body@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  type metadata accessor for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TextField<_TextFieldStyleLabel>(v1, (uint64_t)v6);
  outlined init with copy of ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>((uint64_t)v6, a1);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>);
}

unint64_t lazy protocol witness table accessor for type DefaultTextFieldStyle._Body and conformance DefaultTextFieldStyle._Body()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DefaultTextFieldStyle._Body and conformance DefaultTextFieldStyle._Body;
  if (!lazy protocol witness table cache variable for type DefaultTextFieldStyle._Body and conformance DefaultTextFieldStyle._Body)
  {
    v1 = type metadata accessor for DefaultTextFieldStyle._Body();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultTextFieldStyle._Body, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultTextFieldStyle._Body and conformance DefaultTextFieldStyle._Body);
  }
  return result;
}

uint64_t type metadata accessor for DefaultTextFieldStyle._Body()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DefaultTextFieldStyle._Body;
  if (!type metadata singleton initialization cache for DefaultTextFieldStyle._Body)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t protocol witness for TextFieldStyle._body(configuration:) in conformance DefaultTextFieldStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of TextField<_TextFieldStyleLabel>(a1, a2);
}

ValueMetadata *type metadata accessor for DefaultTextFieldStyle()
{
  return &type metadata for DefaultTextFieldStyle;
}

uint64_t initializeBufferWithCopyOfBuffer for DefaultTextFieldStyle._Body(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unsigned __int8 v45;
  int v46;
  uint64_t v47;
  char *v48;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v5 = v4;
  v6 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v7 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v6 & 0x20000) != 0)
  {
    a1 = v7 + ((v6 + 16) & ~(unint64_t)v6);
    swift_retain();
  }
  else
  {
    v47 = v5;
    v8 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
    v9 = a2[8];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v9)
    {
      v10 = a2[5];
      v11 = a2[6];
      v12 = *((_BYTE *)a2 + 56);
      outlined copy of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 40) = v10;
      *(_QWORD *)(a1 + 48) = v11;
      *(_BYTE *)(a1 + 56) = v12;
      *(_QWORD *)(a1 + 64) = v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      v13 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v13;
    }
    v14 = a2[9];
    v15 = a2[10];
    v16 = a2[11];
    v17 = a2[12];
    v18 = a2[13];
    v19 = a2[14];
    v20 = a2[15];
    v21 = a2[16];
    v39 = a2[17];
    v40 = a2[18];
    v41 = a2[19];
    v42 = a2[20];
    v43 = a2[21];
    v45 = *((_BYTE *)a2 + 178);
    v46 = *((unsigned __int16 *)a2 + 88);
    v44 = *((_BYTE *)a2 + 179);
    outlined copy of StateOrBinding<TextFieldState>(v14, v15, v16, v17, v18, v19, v20, v21, v39, v40, v41, v42, v43, v46 | (v45 << 16), v44);
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 88) = v16;
    *(_QWORD *)(a1 + 96) = v17;
    *(_QWORD *)(a1 + 104) = v18;
    *(_QWORD *)(a1 + 112) = v19;
    *(_QWORD *)(a1 + 120) = v20;
    *(_QWORD *)(a1 + 128) = v21;
    *(_QWORD *)(a1 + 136) = v39;
    *(_QWORD *)(a1 + 144) = v40;
    *(_QWORD *)(a1 + 152) = v41;
    *(_QWORD *)(a1 + 160) = v42;
    *(_QWORD *)(a1 + 168) = v43;
    *(_BYTE *)(a1 + 178) = v45;
    *(_WORD *)(a1 + 176) = v46;
    *(_BYTE *)(a1 + 179) = v44;
    v22 = *(int *)(v47 + 56);
    v23 = (_QWORD *)(a1 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    type metadata accessor for Binding<TextSelection?>(0);
    v26 = v25;
    v27 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v29 = v24[1];
      *v23 = *v24;
      v23[1] = v29;
      v30 = *(int *)(v26 + 32);
      v48 = (char *)v23 + v30;
      v31 = (char *)v24 + v30;
      v32 = type metadata accessor for TextSelection(0);
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
      swift_retain();
      swift_retain();
      if (v34(v31, 1, v32))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v48, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        v36 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v48, v31, v37);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v48, v31, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        v48[*(int *)(v32 + 20)] = v31[*(int *)(v32 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v48, 0, 1, v32);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v23, 0, 1, v26);
    }
  }
  return a1;
}

uint64_t outlined copy of StateOrBinding<TextFieldState>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15)
{
  if ((a15 & 1) != 0)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of TextFieldState.FormatActions?(a5);
    return outlined copy of TextFieldState.FormatActions?(a9);
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined copy of TextFieldState.FormatActions?(a3);
    outlined copy of TextFieldState.FormatActions?(a7);
    return swift_retain();
  }
}

void type metadata accessor for Binding<TextSelection?>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Binding<TextSelection?>, (uint64_t (*)(uint64_t))type metadata accessor for TextSelection?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
}

void type metadata accessor for TextSelection?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TextSelection?, type metadata accessor for TextSelection, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t destroy for DefaultTextFieldStyle._Body(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 64))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
    swift_bridgeObjectRelease();
  }
  outlined consume of StateOrBinding<TextFieldState>(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16), *(_BYTE *)(a1 + 179));
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v3 = a1 + *(int *)(v2 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  v5 = v4;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4);
  if (!(_DWORD)result)
  {
    swift_release();
    swift_release();
    v7 = v3 + *(int *)(v5 + 32);
    v8 = type metadata accessor for TextSelection(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
    if (!(_DWORD)result)
    {
      type metadata accessor for TextSelection.Indices(0);
      result = swift_getEnumCaseMultiPayload();
      if ((_DWORD)result == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
      }
    }
  }
  return result;
}

uint64_t outlined consume of StateOrBinding<TextFieldState>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15)
{
  if ((a15 & 1) != 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of TextFieldState.FormatActions?(a5);
    return outlined consume of TextFieldState.FormatActions?(a9);
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined consume of TextFieldState.FormatActions?(a3);
    outlined consume of TextFieldState.FormatActions?(a7);
    return swift_release();
  }
}

uint64_t initializeWithCopy for DefaultTextFieldStyle._Body(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  int v43;
  int v44;
  char *v45;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v6 = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 40);
    v8 = *(_QWORD *)(a2 + 48);
    v9 = *(_BYTE *)(a2 + 56);
    outlined copy of Text.Storage(v7, v8, v9);
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v8;
    *(_BYTE *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v10;
  }
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a2 + 128);
  v37 = *(_QWORD *)(a2 + 136);
  v38 = *(_QWORD *)(a2 + 144);
  v39 = *(_QWORD *)(a2 + 152);
  v40 = *(_QWORD *)(a2 + 160);
  v41 = *(_QWORD *)(a2 + 168);
  v43 = *(unsigned __int8 *)(a2 + 178);
  v44 = *(unsigned __int16 *)(a2 + 176);
  v42 = *(_BYTE *)(a2 + 179);
  outlined copy of StateOrBinding<TextFieldState>(v11, v12, v13, v14, v15, v16, v18, v17, v37, v38, v39, v40, v41, v44 | (v43 << 16), v42);
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v14;
  *(_QWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 112) = v16;
  *(_QWORD *)(a1 + 120) = v18;
  *(_QWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 136) = v37;
  *(_QWORD *)(a1 + 144) = v38;
  *(_QWORD *)(a1 + 152) = v39;
  *(_QWORD *)(a1 + 160) = v40;
  *(_QWORD *)(a1 + 168) = v41;
  *(_BYTE *)(a1 + 178) = v43;
  *(_WORD *)(a1 + 176) = v44;
  *(_BYTE *)(a1 + 179) = v42;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v20 = *(int *)(v19 + 56);
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  type metadata accessor for Binding<TextSelection?>(0);
  v24 = v23;
  v25 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v23))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = v22[1];
    *v21 = *v22;
    v21[1] = v27;
    v28 = *(int *)(v24 + 32);
    v45 = (char *)v21 + v28;
    v29 = (char *)v22 + v28;
    v30 = type metadata accessor for TextSelection(0);
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_retain();
    swift_retain();
    if (v32(v29, 1, v30))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v45, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v34 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v45, v29, v35);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v45, v29, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      v45[*(int *)(v30 + 20)] = v29[*(int *)(v30 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v45, 0, 1, v30);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
  }
  return a1;
}

uint64_t assignWithCopy for DefaultTextFieldStyle._Body(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  size_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  int v83;
  int v84;
  char *v85;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v4 = (_OWORD *)(a1 + 40);
  v5 = (_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 40);
      v8 = *(_QWORD *)(a2 + 48);
      v9 = *(_BYTE *)(a2 + 56);
      outlined copy of Text.Storage(v7, v8, v9);
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(_QWORD *)(a1 + 48);
      v12 = *(_BYTE *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = v7;
      *(_QWORD *)(a1 + 48) = v8;
      *(_BYTE *)(a1 + 56) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 40);
      v16 = *(_OWORD *)(a2 + 56);
      *v4 = *v5;
      *(_OWORD *)(a1 + 56) = v16;
    }
  }
  else if (v6)
  {
    v13 = *(_QWORD *)(a2 + 40);
    v14 = *(_QWORD *)(a2 + 48);
    v15 = *(_BYTE *)(a2 + 56);
    outlined copy of Text.Storage(v13, v14, v15);
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v14;
    *(_BYTE *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 56);
    *v4 = *v5;
    *(_OWORD *)(a1 + 56) = v17;
  }
  v18 = *(_QWORD *)(a2 + 72);
  v19 = *(_QWORD *)(a2 + 80);
  v20 = *(_QWORD *)(a2 + 88);
  v21 = *(_QWORD *)(a2 + 96);
  v22 = *(_QWORD *)(a2 + 104);
  v23 = *(_QWORD *)(a2 + 112);
  v24 = *(_QWORD *)(a2 + 120);
  v25 = *(_QWORD *)(a2 + 128);
  v77 = *(_QWORD *)(a2 + 136);
  v78 = *(_QWORD *)(a2 + 144);
  v79 = *(_QWORD *)(a2 + 152);
  v80 = *(_QWORD *)(a2 + 160);
  v81 = *(_QWORD *)(a2 + 168);
  v83 = *(unsigned __int16 *)(a2 + 176);
  v84 = *(unsigned __int8 *)(a2 + 178);
  v82 = *(_BYTE *)(a2 + 179);
  outlined copy of StateOrBinding<TextFieldState>(v18, v19, v20, v21, v22, v23, v24, v25, v77, v78, v79, v80, v81, v83 | (v84 << 16), v82);
  v26 = *(_QWORD *)(a1 + 72);
  v27 = *(_QWORD *)(a1 + 80);
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_QWORD *)(a1 + 96);
  v30 = *(_QWORD *)(a1 + 104);
  v31 = *(_QWORD *)(a1 + 112);
  v32 = *(_QWORD *)(a1 + 120);
  v33 = *(_QWORD *)(a1 + 128);
  v34 = *(_OWORD *)(a1 + 136);
  v35 = *(_OWORD *)(a1 + 152);
  v36 = *(_QWORD *)(a1 + 168);
  v37 = *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16);
  v38 = *(_BYTE *)(a1 + 179);
  *(_QWORD *)(a1 + 72) = v18;
  *(_QWORD *)(a1 + 80) = v19;
  *(_QWORD *)(a1 + 88) = v20;
  *(_QWORD *)(a1 + 96) = v21;
  *(_QWORD *)(a1 + 104) = v22;
  *(_QWORD *)(a1 + 112) = v23;
  *(_QWORD *)(a1 + 120) = v24;
  *(_QWORD *)(a1 + 128) = v25;
  *(_QWORD *)(a1 + 136) = v77;
  *(_QWORD *)(a1 + 144) = v78;
  *(_QWORD *)(a1 + 152) = v79;
  *(_QWORD *)(a1 + 160) = v80;
  *(_QWORD *)(a1 + 168) = v81;
  *(_WORD *)(a1 + 176) = v83;
  *(_BYTE *)(a1 + 178) = v84;
  *(_BYTE *)(a1 + 179) = v82;
  outlined consume of StateOrBinding<TextFieldState>(v26, v27, v28, v29, v30, v31, v32, v33, v34, *((uint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1), v36, v37, v38);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v40 = *(int *)(v39 + 56);
  v41 = (char *)(a1 + v40);
  v42 = (char *)(a2 + v40);
  type metadata accessor for Binding<TextSelection?>(0);
  v44 = v43;
  v45 = *(_QWORD *)(v43 - 8);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  LODWORD(v19) = v46(v41, 1, v43);
  v47 = v46(v42, 1, v44);
  if (!(_DWORD)v19)
  {
    if (v47)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
      v48 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_13;
    }
    *(_QWORD *)v41 = *(_QWORD *)v42;
    swift_retain();
    swift_release();
    *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
    swift_retain();
    swift_release();
    v59 = *(int *)(v44 + 32);
    v60 = &v41[v59];
    v61 = &v42[v59];
    v62 = type metadata accessor for TextSelection(0);
    v63 = *(_QWORD *)(v62 - 8);
    v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
    v65 = v64(v60, 1, v62);
    v66 = v64(v61, 1, v62);
    if (v65)
    {
      if (!v66)
      {
        v67 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v60, v61, v68);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
        }
        v60[*(int *)(v62 + 20)] = v61[*(int *)(v62 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
        return a1;
      }
    }
    else
    {
      if (!v66)
      {
        if (a1 != a2)
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v60, type metadata accessor for TextSelection.Indices);
          v75 = type metadata accessor for TextSelection.Indices(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v60, v61, v76);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
          }
        }
        v60[*(int *)(v62 + 20)] = v61[*(int *)(v62 + 20)];
        return a1;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v60, type metadata accessor for TextSelection);
    }
    type metadata accessor for TextSelection?(0);
    v50 = *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64);
    v51 = v60;
    v52 = v61;
    goto LABEL_14;
  }
  if (v47)
  {
    v48 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_13:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, v48);
    v50 = *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64);
    v51 = v41;
    v52 = v42;
LABEL_14:
    memcpy(v51, v52, v50);
    return a1;
  }
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
  v53 = *(int *)(v44 + 32);
  v85 = &v41[v53];
  v54 = &v42[v53];
  v55 = type metadata accessor for TextSelection(0);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
  swift_retain();
  swift_retain();
  if (v57(v54, 1, v55))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(v85, v54, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v69 = v56;
    v70 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      v72 = v85;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v85, v54, v71);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v72 = v85;
      memcpy(v85, v54, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    }
    v72[*(int *)(v55 + 20)] = v54[*(int *)(v55 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v72, 0, 1, v55);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v41, 0, 1, v44);
  return a1;
}

uint64_t initializeWithTake for DefaultTextFieldStyle._Body(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 164) = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v6 = *(int *)(v5 + 56);
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  type metadata accessor for Binding<TextSelection?>(0);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = v8[1];
    *v7 = *v8;
    v7[1] = v13;
    v14 = *(int *)(v10 + 32);
    v15 = (char *)v7 + v14;
    v16 = (char *)v8 + v14;
    v17 = type metadata accessor for TextSelection(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v20 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v15, v16, v21);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      v15[*(int *)(v17 + 20)] = v16[*(int *)(v17 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithTake for DefaultTextFieldStyle._Body(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  __int16 v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  if (*(_QWORD *)(a1 + 64))
  {
    v5 = *(_QWORD *)(a2 + 64);
    if (v5)
    {
      v6 = *(_BYTE *)(a2 + 56);
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *(_QWORD *)(a1 + 48);
      v9 = *(_BYTE *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 56) = v6;
      outlined consume of Text.Storage(v7, v8, v9);
      *(_QWORD *)(a1 + 64) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v10;
LABEL_6:
  v11 = *(_QWORD *)(a2 + 168);
  v12 = *(_WORD *)(a2 + 176);
  v13 = *(_BYTE *)(a2 + 178);
  v14 = *(_BYTE *)(a2 + 179);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  v17 = *(_QWORD *)(a1 + 88);
  v18 = *(_QWORD *)(a1 + 96);
  v19 = *(_QWORD *)(a1 + 104);
  v20 = *(_QWORD *)(a1 + 112);
  v21 = *(_QWORD *)(a1 + 120);
  v22 = *(_QWORD *)(a1 + 128);
  v23 = *(_OWORD *)(a1 + 136);
  v24 = *(_OWORD *)(a1 + 152);
  v25 = *(_QWORD *)(a1 + 168);
  v26 = *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16);
  v27 = *(_BYTE *)(a1 + 179);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = v11;
  *(_BYTE *)(a1 + 178) = v13;
  *(_WORD *)(a1 + 176) = v12;
  *(_BYTE *)(a1 + 179) = v14;
  outlined consume of StateOrBinding<TextFieldState>(v15, v16, v17, v18, v19, v20, v21, v22, v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25, v26, v27);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v29 = *(int *)(v28 + 56);
  v30 = (char *)(a1 + v29);
  v31 = (char *)(a2 + v29);
  type metadata accessor for Binding<TextSelection?>(0);
  v33 = v32;
  v34 = *(_QWORD *)(v32 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v30, 1, v32);
  v37 = v35(v31, 1, v33);
  if (!v36)
  {
    if (v37)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
      v38 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_11;
    }
    *(_QWORD *)v30 = *(_QWORD *)v31;
    swift_release();
    *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
    swift_release();
    v50 = *(int *)(v33 + 32);
    v51 = &v30[v50];
    v52 = &v31[v50];
    v53 = type metadata accessor for TextSelection(0);
    v54 = *(_QWORD *)(v53 - 8);
    v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    v56 = v55(v51, 1, v53);
    v57 = v55(v52, 1, v53);
    if (v56)
    {
      if (!v57)
      {
        v58 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v51, v52, v59);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
        }
        v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
        return a1;
      }
    }
    else
    {
      if (!v57)
      {
        if (a1 != a2)
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, type metadata accessor for TextSelection.Indices);
          v64 = type metadata accessor for TextSelection.Indices(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v51, v52, v65);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
          }
        }
        v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
        return a1;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, type metadata accessor for TextSelection);
    }
    type metadata accessor for TextSelection?(0);
    v40 = *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64);
    v41 = v51;
    v42 = v52;
    goto LABEL_12;
  }
  if (v37)
  {
    v38 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_11:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, v38);
    v40 = *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64);
    v41 = v30;
    v42 = v31;
LABEL_12:
    memcpy(v41, v42, v40);
    return a1;
  }
  v43 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *((_QWORD *)v30 + 1) = v43;
  v44 = *(int *)(v33 + 32);
  v45 = &v30[v44];
  v46 = &v31[v44];
  v47 = type metadata accessor for TextSelection(0);
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    v60 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v45, v46, v61);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    v45[*(int *)(v47 + 20)] = v46[*(int *)(v47 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v30, 0, 1, v33);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultTextFieldStyle._Body()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870CDC60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for DefaultTextFieldStyle._Body()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870CDCC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void type metadata completion function for DefaultTextFieldStyle._Body()
{
  unint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(319, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>, TextFieldStyleModifier<PlainTextFieldStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>, TextFieldStyleModifier<PlainTextFieldStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>, TextFieldStyleModifier<PlainTextFieldStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>, TextFieldStyleModifier<PlainTextFieldStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for TextFieldStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>, TextFieldStyleModifier<PlainTextFieldStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>, TextFieldStyleModifier<PlainTextFieldStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>, TextFieldStyleModifier<PlainTextFieldStyle>>)
  {
    type metadata accessor for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>();
    type metadata accessor for TextFieldStyleModifier<PlatformItemListTextFieldStyle>(255, &lazy cache variable for type metadata for TextFieldStyleModifier<PlainTextFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainTextFieldStyle and conformance PlainTextFieldStyle, (uint64_t)&type metadata for PlainTextFieldStyle);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>, TextFieldStyleModifier<PlainTextFieldStyle>>);
  }
}

void type metadata accessor for TextFieldStyleModifier<PlatformItemListTextFieldStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for TextFieldStyleModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type PlainTextFieldStyle and conformance PlainTextFieldStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainTextFieldStyle and conformance PlainTextFieldStyle;
  if (!lazy protocol witness table cache variable for type PlainTextFieldStyle and conformance PlainTextFieldStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainTextFieldStyle, &type metadata for PlainTextFieldStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainTextFieldStyle and conformance PlainTextFieldStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type TextField<_TextFieldStyleLabel> and conformance TextField<A>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TextField<_TextFieldStyleLabel>, StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextField<_TextFieldStyleLabel> and conformance TextField<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TextField<_TextFieldStyleLabel> and conformance TextField<A>;
  if (!lazy protocol witness table cache variable for type TextField<_TextFieldStyleLabel> and conformance TextField<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextField<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextField<_TextFieldStyleLabel> and conformance TextField<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t IsPlatformItemListSource;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    IsPlatformItemListSource = type metadata accessor for StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier>();
    v2[0] = &protocol witness table for TextFieldStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, IsPlatformItemListSource, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<IsPlatformItemListSourcePredicate, TextFieldStyleModifier<PlatformItemListTextFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t _NSSwiftAttributedStringStorage.attributedSubstring(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  objc_class *v27;
  char *v28;
  char *v29;
  char *v30;
  id v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, double);
  uint64_t v34;
  uint64_t v35;
  objc_super v36;

  v35 = a2;
  v3 = type metadata accessor for AttributedSubstring();
  MEMORY[0x1E0C80A78](v3, v4);
  v5 = type metadata accessor for AttributedString();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  v18 = MEMORY[0x1E0C80A78](v14, v17);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v34 = v6;
  v33(v9, v2, v5, v18);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
  Range<>.init<A>(_:in:)();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v13, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
    AttributedString.subscript.getter();
    AttributedString.init(_:)();
    v22 = type metadata accessor for _NSSwiftAttributedStringStorage(0);
    v23 = (uint64_t *)(v2 + *(int *)(v22 + 20));
    v24 = *v23;
    v25 = v23[1];
    v26 = v23[2];
    v27 = (objc_class *)type metadata accessor for NSSwiftAttributedString(0);
    v28 = (char *)objc_allocWithZone(v27);
    v29 = &v28[OBJC_IVAR____TtC7SwiftUI23NSSwiftAttributedString__storage];
    ((void (*)(char *, char *, uint64_t))v33)(&v28[OBJC_IVAR____TtC7SwiftUI23NSSwiftAttributedString__storage], v9, v5);
    v30 = &v29[*(int *)(v22 + 20)];
    *(_QWORD *)v30 = v24;
    *((_QWORD *)v30 + 1) = v25;
    *((_QWORD *)v30 + 2) = v26;
    v36.receiver = v28;
    v36.super_class = v27;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v31 = objc_msgSendSuper2(&v36, sel_init);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v5);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    return (uint64_t)v31;
  }
  return result;
}

unint64_t _NSSwiftAttributedStringStorage.attributes(at:effectiveRange:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t, double);
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v3 = v2;
  v45 = a2;
  v51 = (char *)a1;
  v4 = type metadata accessor for AttributeContainer();
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v44 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttributedString.Runs();
  v42 = *(_QWORD *)(v7 - 8);
  v43 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AttributedString.Runs.Run();
  v47 = *(_QWORD *)(v11 - 8);
  v48 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v46 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AttributedString();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  v24 = v23;
  v25 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v26);
  v29 = MEMORY[0x1E0C80A78](v27, v28);
  v31 = (char *)&v42 - v30;
  v32 = *(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16);
  v52 = v3;
  v32(v18, v3, v14, v29);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
  Range<>.init<A>(_:in:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>?);
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v22, (uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    AttributedString.runs.getter();
    v34 = v46;
    v51 = v31;
    AttributedString.Runs.subscript.getter();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v10, v43);
    v35 = v45;
    if (v45)
    {
      AttributedString.Runs.Run.range.getter();
      ((void (*)(char *, uint64_t, uint64_t))v32)(v18, v52, v14);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
      *v35 = _NSRange.init<A, B>(_:in:)();
      v35[1] = v36;
    }
    v37 = (uint64_t *)(v52 + *(int *)(type metadata accessor for _NSSwiftAttributedStringStorage(0) + 20));
    v38 = v37[1];
    v39 = v37[2];
    v53 = *v37;
    v54 = v38;
    v55 = v39;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v40 = v44;
    AttributedString.Runs.Run.attributes.getter();
    v33 = RichTextAttributeResolver.nsAttributes(for:)();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v40, v50);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v34, v48);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
  }
  return v33;
}

uint64_t _NSSwiftAttributedStringStorage.attribute(_:at:effectiveRange:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  unint64_t v6;
  id v7;
  uint64_t v8;
  char v9;

  v6 = _NSSwiftAttributedStringStorage.attributes(at:effectiveRange:)(a2, a3);
  if (*(_QWORD *)(v6 + 16))
  {
    v7 = a1;
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
    if ((v9 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v8, (uint64_t)a4);
    }
    else
    {
      *a4 = 0u;
      a4[1] = 0u;
    }

  }
  else
  {
    *a4 = 0u;
    a4[1] = 0u;
  }
  return swift_bridgeObjectRelease();
}

uint64_t _NSSwiftAttributedStringStorage.attribute(_:at:longestEffectiveRange:in:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, NSRange *a3@<X2>, NSUInteger a4@<X3>, NSUInteger a5@<X4>, _OWORD *a6@<X8>)
{
  unint64_t v11;
  id v12;
  uint64_t v13;
  char v14;
  NSRange v16;

  v11 = _NSSwiftAttributedStringStorage.attributes(at:effectiveRange:)(a2, (uint64_t *)a3);
  if (a3)
  {
    v16.location = a4;
    v16.length = a5;
    *a3 = NSIntersectionRange(*a3, v16);
  }
  if (*(_QWORD *)(v11 + 16))
  {
    v12 = a1;
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
    if ((v14 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v11 + 56) + 32 * v13, (uint64_t)a6);
    }
    else
    {
      *a6 = 0u;
      a6[1] = 0u;
    }

  }
  else
  {
    *a6 = 0u;
    a6[1] = 0u;
  }
  return swift_bridgeObjectRelease();
}

uint64_t _NSSwiftAttributedStringStorage.isEqual(to:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  char v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char isEscapingClosureAtFileLocation;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD aBlock[6];
  char v42;

  v2 = type metadata accessor for _NSSwiftAttributedStringStorage(0);
  v39 = *(_QWORD *)(v2 - 8);
  v3 = *(_QWORD *)(v39 + 64);
  MEMORY[0x1E0C80A78](v2, v4);
  v5 = type metadata accessor for AttributedString.CharacterView();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AttributedString();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSSwiftAttributedString(0);
  if (swift_dynamicCastClass())
  {
    v15 = a1;
    v16 = static AttributedString.== infix(_:_:)();

    return v16 & 1;
  }
  v37 = v3;
  v38 = (uint64_t)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v40;
  type metadata accessor for NSSwiftMutableAttributedString(0);
  v19 = swift_dynamicCastClass();
  if (v19)
  {
    v20 = v19 + OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v20, v10);
    v21 = static AttributedString.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  else
  {
    v22 = v9;
    AttributedString.characters.getter();
    v23 = objc_msgSend(a1, sel_string);
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v26 = v25;

    LOBYTE(v23) = specialized Sequence<>.elementsEqual<A>(_:)(v24, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v22, v5);
    if ((v23 & 1) != 0)
    {
      v42 = 1;
      v27 = objc_msgSend(a1, sel_length);
      v28 = v18;
      v29 = v38;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v28, v38, type metadata accessor for _NSSwiftAttributedStringStorage);
      v30 = (*(unsigned __int8 *)(v39 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      v31 = (v37 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
      v32 = swift_allocObject();
      outlined init with take of TableCellFormula(v29, v32 + v30, type metadata accessor for _NSSwiftAttributedStringStorage);
      *(_QWORD *)(v32 + v31) = &v42;
      v33 = swift_allocObject();
      *(_QWORD *)(v33 + 16) = partial apply for closure #1 in _NSSwiftAttributedStringStorage.isEqual(to:);
      *(_QWORD *)(v33 + 24) = v32;
      aBlock[4] = partial apply for thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
      aBlock[5] = v33;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
      aBlock[3] = &block_descriptor_5;
      v34 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(a1, sel_enumerateAttributesInRange_options_usingBlock_, 0, v27, 0, v34);
      _Block_release(v34);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      result = swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
      {
        __break(1u);
        return result;
      }
      v21 = v42;
      swift_release();
    }
    else
    {
      v21 = 0;
    }
  }
  return v21 & 1;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  void (*v28)(_BYTE *, _QWORD);
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  Swift::String_optional v32;
  void *object;
  char v35;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, double);
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  uint64_t v42;
  _BYTE v43[32];
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v4 = type metadata accessor for AttributedString.Index();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v41 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v37 - v10;
  v12 = type metadata accessor for AttributedString.CharacterView();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<AttributedString.CharacterView>();
  v18 = v17;
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
  v39 = v13;
  v38(v16, v42, v12, v20);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEF10], MEMORY[0x1E0CAEF28]);
  dispatch thunk of Sequence.makeIterator()();
  v23 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v23 = a1 & 0xFFFFFFFFFFFFLL;
  v44 = a1;
  v45 = a2;
  v46 = 0;
  v47 = v23;
  v24 = &v22[*(int *)(v18 + 36)];
  v42 = v5;
  v40 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  swift_bridgeObjectRetain();
  while (1)
  {
    v40(v11, v24, v4);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEF10], MEMORY[0x1E0CAEF30]);
    v25 = v41;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF1B0], MEMORY[0x1E0CAF1C8]);
    v26 = dispatch thunk of static Equatable.== infix(_:_:)();
    v27 = *(void (**)(char *, uint64_t))(v42 + 8);
    v27(v25, v4);
    v27(v11, v4);
    if ((v26 & 1) != 0)
      break;
    v28 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
    v30 = *v29;
    v31 = (void *)v29[1];
    swift_bridgeObjectRetain();
    v28(v43, 0);
    ((void (*)(char *, char *, uint64_t))v38)(v16, v22, v12);
    dispatch thunk of Collection.formIndex(after:)();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v16, v12);
    v32 = String.Iterator.next()();
    object = v32.value._object;
    if (!v31)
      goto LABEL_15;
    if (!v32.value._object)
    {
      swift_bridgeObjectRelease();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.CharacterView>);
      goto LABEL_18;
    }
    if (v30 == v32.value._countAndFlagsBits && v32.value._object == v31)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v35 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.CharacterView>);
        return 0;
      }
    }
  }
  object = String.Iterator.next()().value._object;
LABEL_15:
  swift_bridgeObjectRelease();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.CharacterView>);
  if (object)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  return 1;
}

uint64_t closure #1 in _NSSwiftAttributedStringStorage.isEqual(to:)(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  char *v48;
  void (*v49)(uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  Class isa;
  id v70;
  Class v71;
  unsigned __int8 v72;
  _BYTE *v73;
  uint64_t result;
  _BYTE *v75;
  _QWORD v76[2];
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  char *v91;
  char *v92;

  v88 = a6;
  v89 = a4;
  v90 = a5;
  v91 = (char *)a2;
  v92 = (char *)a3;
  v77 = a1;
  v6 = type metadata accessor for AttributeContainer();
  MEMORY[0x1E0C80A78](v6, v7);
  v76[1] = (char *)v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributedString.Runs.Run?(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v85 = (uint64_t)v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AttributedString.Runs();
  v83 = *(_QWORD *)(v12 - 8);
  v84 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v82 = (char *)v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AttributedSubstring();
  v80 = *(_QWORD *)(v15 - 8);
  v81 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v79 = (char *)v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AttributedString.Runs.Run();
  v86 = *(_QWORD *)(v18 - 8);
  v87 = v18;
  MEMORY[0x1E0C80A78](v18, v19);
  v78 = (char *)v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for AttributedString();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (char *)v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)v76 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  v31 = v30;
  v32 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v33);
  v35 = (char *)v76 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)v76 - v38;
  MEMORY[0x1E0C80A78](v40, v41);
  v43 = (char *)v76 - v42;
  v46 = MEMORY[0x1E0C80A78](v44, v45);
  v48 = (char *)v76 - v47;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))(v25, v90, v21, v46);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
  Range<>.init<A>(_:in:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v29, 1, v31) == 1)
  {
    v49 = type metadata accessor for Range<AttributedString.Index>?;
    v50 = (uint64_t)v29;
LABEL_13:
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v50, (uint64_t (*)(_QWORD))v49);
    v75 = v89;
    *v88 = 0;
    *v75 = 1;
    return result;
  }
  v91 = v35;
  v92 = v39;
  v51 = v78;
  outlined init with take of TableCellFormula((uint64_t)v29, (uint64_t)v48, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
  v52 = v79;
  AttributedString.subscript.getter();
  v53 = v82;
  AttributedSubstring.runs.getter();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v52, v81);
  v54 = v85;
  specialized Collection.first.getter(v85);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v53, v84);
  v56 = v86;
  v55 = v87;
  v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v54, 1, v87);
  v58 = v55;
  v59 = (uint64_t)v48;
  if (v57 == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v48, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    v49 = type metadata accessor for AttributedString.Runs.Run?;
    v50 = v54;
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v51, v54, v58);
  v60 = (uint64_t)v43;
  AttributedString.Runs.Run.range.getter();
  type metadata accessor for AttributedString.Index();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF1B0], MEMORY[0x1E0CAF1C8]);
  v61 = dispatch thunk of static Equatable.== infix(_:_:)();
  v62 = (uint64_t)v43;
  v63 = (uint64_t)v92;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v62, (uint64_t)v92, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
  v64 = (uint64_t)v91;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v59, (uint64_t)v91, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
  if ((v61 & 1) == 0)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v64, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v63, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v60, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    goto LABEL_12;
  }
  v65 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v64, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v63, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v60, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
  if ((v65 & 1) == 0)
  {
LABEL_12:
    (*(void (**)(char *, uint64_t))(v86 + 8))(v51, v87);
    v49 = type metadata accessor for Range<AttributedString.Index>;
    v50 = v59;
    goto LABEL_13;
  }
  v66 = v59;
  AttributedString.Runs.Run.attributes.getter();
  v67 = Dictionary<>.init(_:)();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v67);
  swift_bridgeObjectRelease();
  v68 = objc_allocWithZone(MEMORY[0x1E0C99D80]);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v70 = objc_msgSend(v68, sel_initWithDictionary_, isa);

  if (*(_QWORD *)(v77 + 16))
  {
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v77);
    v71 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v72 = objc_msgSend(v70, sel_isEqualToDictionary_, v71);

    if ((v72 & 1) == 0)
    {
      v73 = v89;
      *v88 = 0;
      *v73 = 1;
    }
  }

  (*(void (**)(char *, uint64_t))(v86 + 8))(v51, v87);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v66, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
}

uint64_t _NSSwiftAttributedStringStorage.remove(key:in:)(uint64_t a1, void (*a2)(char *, char *, uint64_t), void (*a3)(char *, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  char *v46;
  uint64_t result;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  void (*v64)(_OWORD *, _QWORD);
  char *v65;
  uint64_t v66;
  char *v67;
  char v68;
  void (*v69)(char *, uint64_t);
  char *v70;
  void (*v71)(_OWORD *, _QWORD);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  void (*v96)(char *, char *, uint64_t);
  void (*v97)(char *, uint64_t, uint64_t);
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _OWORD v111[2];

  v96 = a2;
  v97 = a3;
  v94 = a1;
  v93 = type metadata accessor for AttributeContainer();
  v92 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93, v3);
  v106 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttributedString.Runs.Run();
  v108 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v107 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributedString.Runs.Run?(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v99 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AttributedString.Runs.Index();
  v100 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v98 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v105 = (char *)&v83 - v16;
  v101 = type metadata accessor for AttributedString.Runs();
  v17 = *(_QWORD *)(v101 - 8);
  MEMORY[0x1E0C80A78](v101, v18);
  v104 = (char *)&v83 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = (void (*)(char *, uint64_t))type metadata accessor for AttributedSubstring();
  v88 = *((_QWORD *)v95 - 1);
  MEMORY[0x1E0C80A78](v95, v20);
  v85 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  v87 = v22;
  MEMORY[0x1E0C80A78](v22, v23);
  v86 = (char *)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v102 = (uint64_t)&v83 - v27;
  v28 = type metadata accessor for AttributedString();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v30);
  v32 = (char *)&v83 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)&v83 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  v38 = v37;
  v39 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37, v40);
  v90 = (char *)&v83 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = MEMORY[0x1E0C80A78](v42, v43);
  v46 = (char *)&v83 - v45;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v29 + 16))(v32, v103, v28, v44);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
  Range<>.init<A>(_:in:)();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48))(v36, 1, v38);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v36, (uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    v48 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
    v49 = v85;
    v84 = v46;
    v91 = v38;
    v89 = v48;
    AttributedString.subscript.getter();
    v50 = v104;
    AttributedSubstring.runs.getter();
    (*(void (**)(char *, _QWORD *))(v88 + 8))(v49, v95);
    v51 = (uint64_t)v86;
    v52 = v101;
    v96 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    v96(v86, v50, v101);
    v53 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], MEMORY[0x1E0CAF180]);
    v54 = v17;
    v55 = v105;
    dispatch thunk of Collection.startIndex.getter();
    v95 = *(void (**)(char *, uint64_t))(v54 + 8);
    v95(v50, v52);
    v56 = v87;
    v57 = v100;
    (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))(v51 + *(int *)(v87 + 36), v55, v11);
    v58 = v102;
    outlined init with take of TableCellFormula(v51, v102, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>);
    v59 = v58 + *(int *)(v56 + 36);
    v97 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
    v87 = MEMORY[0x1E0DEE9B8] + 8;
    v109 = v5;
    v60 = v57;
    v88 = v53;
    while (1)
    {
      v65 = v105;
      v97(v105, v59, v11);
      v66 = v11;
      v67 = v98;
      dispatch thunk of Collection.endIndex.getter();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF150], MEMORY[0x1E0CAF158]);
      v68 = dispatch thunk of static Equatable.== infix(_:_:)();
      v69 = *(void (**)(char *, uint64_t))(v60 + 8);
      v70 = v67;
      v11 = v66;
      v69(v70, v66);
      v69(v65, v66);
      if ((v68 & 1) != 0)
        break;
      v71 = (void (*)(_OWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
      v73 = v108;
      v72 = v109;
      v74 = v99;
      (*(void (**)(char *))(v108 + 16))(v99);
      v71(v111, 0);
      v75 = v104;
      v96(v104, (char *)v58, v52);
      v76 = v59;
      dispatch thunk of Collection.formIndex(after:)();
      v95(v75, v52);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v74, 0, 1, v72);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v74, 1, v72) == 1)
        goto LABEL_12;
      v77 = v100;
      (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v107, v74, v72);
      AttributedString.Runs.Run.attributes.getter();
      v78 = Dictionary<>.init(_:)();
      swift_bridgeObjectRetain();
      v79 = specialized __RawDictionaryStorage.find<A>(_:)(v94);
      v81 = v80;
      swift_bridgeObjectRelease();
      if ((v81 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v110 = v78;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v78 = v110;
        }

        outlined init with take of Any((_OWORD *)(*(_QWORD *)(v78 + 56) + 32 * v79), v111);
        specialized _NativeDictionary._delete(at:)(v79, v78);
        swift_bridgeObjectRelease();
      }
      else
      {
        memset(v111, 0, sizeof(v111));
      }
      outlined destroy of AccessibilityTableContext?((uint64_t)v111, (unint64_t *)&lazy cache variable for type metadata for Any?, v87);
      v61 = (uint64_t)v90;
      v62 = v107;
      AttributedString.Runs.Run.range.getter();
      v63 = v106;
      AttributeContainer.init(_:)();
      v64 = (void (*)(_OWORD *, _QWORD))AttributedString.subscript.modify();
      AttributedSubstring.setAttributes(_:)();
      (*(void (**)(char *, uint64_t))(v92 + 8))(v63, v93);
      v64(v111, 0);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v61, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      (*(void (**)(char *, uint64_t))(v108 + 8))(v62, v109);
      v60 = v77;
      v52 = v101;
      v58 = v102;
      v59 = v76;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56))(v99, 1, 1, v109);
LABEL_12:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v58, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v84, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
  }
  return result;
}

id NSSwiftAttributedString.__deallocating_deinit()
{
  return NSSwiftAttributedString.__deallocating_deinit(type metadata accessor for NSSwiftAttributedString);
}

uint64_t ObjC metadata update function for NSSwiftAttributedString()
{
  return type metadata accessor for NSSwiftAttributedString(0);
}

uint64_t type metadata accessor for NSSwiftAttributedString(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for NSSwiftAttributedString);
}

uint64_t type metadata accessor for _NSSwiftAttributedStringStorage(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for _NSSwiftAttributedStringStorage);
}

void @objc NSSwiftAttributedString.init(itemProviderData:typeIdentifier:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = a4;
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t NSSwiftMutableAttributedString.length.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t result;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;

  type metadata accessor for (lower: AttributedString.Index, upper: AttributedString.Index)();
  v56 = v1;
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v52 = (char *)&v47 - v7;
  v8 = type metadata accessor for AttributedString.Index();
  v53 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v57 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v47 - v13;
  v15 = type metadata accessor for AttributedString();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v47 - v22;
  type metadata accessor for Range<AttributedString.Index>(0);
  v55 = v24;
  MEMORY[0x1E0C80A78](v24, v25);
  v49 = (char *)&v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v54 = (uint64_t)&v47 - v29;
  v30 = v0 + OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage;
  swift_beginAccess();
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v31(v23, v30, v15);
  AttributedString.startIndex.getter();
  v32 = *(void (**)(char *, uint64_t))(v16 + 8);
  v32(v23, v15);
  v50 = v30;
  v33 = v30;
  v34 = v57;
  v48 = v31;
  v31(v19, v33, v15);
  AttributedString.endIndex.getter();
  v51 = v15;
  v32(v19, v15);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF1B0], MEMORY[0x1E0CAF1C0]);
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v36 = v56;
    v37 = v52;
    v38 = &v52[*(int *)(v56 + 48)];
    v47 = v23;
    v39 = v53;
    v40 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
    v40(v52, v14, v8);
    v40(v38, v34, v8);
    v41 = &v4[*(int *)(v36 + 48)];
    v42 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
    v42(v4, v37, v8);
    v42(v41, v38, v8);
    v43 = (uint64_t)v49;
    v40(v49, v4, v8);
    v44 = *(void (**)(char *, uint64_t))(v39 + 8);
    v44(v41, v8);
    v45 = &v4[*(int *)(v36 + 48)];
    v40(v4, v37, v8);
    v40(v45, v38, v8);
    v40((char *)(v43 + *(int *)(v55 + 36)), v45, v8);
    v44(v4, v8);
    outlined init with take of TableCellFormula(v43, v54, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    v48(v47, v50, v51);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
    _NSRange.init<A, B>(_:in:)();
    return v46;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t NSSwiftMutableAttributedString.attributes(at:longestEffectiveRange:in:)(uint64_t a1, NSRange *a2, NSUInteger a3, NSUInteger a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  NSRange v17;

  v9 = type metadata accessor for _NSSwiftAttributedStringStorage(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (NSNotFound.getter() == a1 || (uint64_t)objc_msgSend(v4, sel_length) < 1)
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v13 = (uint64_t)v4 + OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage;
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v13, (uint64_t)v12, type metadata accessor for _NSSwiftAttributedStringStorage);
  v14 = _NSSwiftAttributedStringStorage.attributes(at:effectiveRange:)(a1, (uint64_t *)a2);
  if (a2)
  {
    v17.location = a3;
    v17.length = a4;
    *a2 = NSIntersectionRange(*a2, v17);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, type metadata accessor for _NSSwiftAttributedStringStorage);
  return v14;
}

Swift::Void __swiftcall NSSwiftMutableAttributedString.replaceCharacters(in:with:)(__C::_NSRange in, NSAttributedString with)
{
  char *v2;
  Swift::Int length;
  Swift::Int location;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  int v24;
  Class v25;
  char *v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  Class isa;
  Swift::Int v33;
  uint64_t v34;

  length = in.length;
  location = in.location;
  v34 = type metadata accessor for AttributedString();
  v6 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34, v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (NSNotFound.getter() != location)
  {
    isa = with.super.isa;
    v30 = v2;
    v20 = &v2[OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage];
    swift_beginAccess();
    v29 = v6;
    v21 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    v22 = v34;
    v21(v9, v20, v34);
    v23 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
    v33 = length;
    v31 = v23;
    Range<>.init<A>(_:in:)();
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15);
    v28 = location;
    if (v24 != 1)
    {
      outlined init with take of TableCellFormula((uint64_t)v13, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      type metadata accessor for _NSSwiftAttributedStringStorage(0);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      v25 = isa;
      RichTextAttributeResolver.swiftUIAttributedString(for:)(isa, (uint64_t)v9);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_beginAccess();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
      AttributedString.replaceSubrange<A, B>(_:with:)();
      swift_endAccess();
      v26 = (char *)-[objc_class length](v25, sel_length);
      if (!__OFSUB__(v26, v33))
      {
        objc_msgSend(v30, sel_edited_range_changeInLength_, 3, v28, v33, &v26[-v33]);
        (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v22);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        return;
      }
      __break(1u);
    }
    __break(1u);
  }
}

Swift::Void __swiftcall NSSwiftMutableAttributedString.replaceCharacters(in:with:)(__C::_NSRange in, Swift::String with)
{
  char *v2;
  void *object;
  Swift::Int location;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  Swift::Int v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  Swift::Int v24;
  id v25;
  uint64_t countAndFlagsBits;
  Swift::Int length;
  char v28[32];
  uint64_t v29;
  void *v30;

  object = with._object;
  countAndFlagsBits = with._countAndFlagsBits;
  length = in.length;
  location = in.location;
  v5 = type metadata accessor for AttributedString();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (NSNotFound.getter() != location)
  {
    v25 = v2;
    v20 = &v2[OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage];
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v20, v5);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
    v24 = location;
    v21 = length;
    Range<>.init<A>(_:in:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15) == 1)
    {
      __break(1u);
    }
    else
    {
      outlined init with take of TableCellFormula((uint64_t)v13, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      v29 = countAndFlagsBits;
      v30 = object;
      swift_beginAccess();
      v22 = (void (*)(char *, _QWORD))AttributedString.characters.modify();
      lazy protocol witness table accessor for type String and conformance String();
      AttributedString.CharacterView.replaceSubrange<A>(_:with:)();
      v22(v28, 0);
      swift_endAccess();
      swift_bridgeObjectRetain();
      v23 = String.UTF16View.count.getter();
      swift_bridgeObjectRelease();
      objc_msgSend(v25, sel_edited_range_changeInLength_, 2, v24, v21, v23);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    }
  }
}

Swift::Void __swiftcall NSSwiftMutableAttributedString.setAttributes(_:range:)(Swift::OpaquePointer_optional _, __C::_NSRange range)
{
  void *v2;
  void *v3;
  Swift::Int location;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, _QWORD);
  uint64_t v30;
  void *v31;
  uint64_t v32;
  Swift::Int v33;
  void *rawValue;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38[32];

  v3 = v2;
  location = range.location;
  v5 = *(_QWORD *)&_.is_nil;
  rawValue = _.value._rawValue;
  v6 = type metadata accessor for AttributeContainer();
  v36 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v35 = (uint64_t)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AttributedString();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  v19 = v18;
  v20 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v21);
  v37 = (uint64_t)&v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (NSNotFound.getter() != v5)
  {
    v31 = v3;
    v32 = v6;
    v23 = (uint64_t)v3 + OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v23, v9);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
    v33 = location;
    Range<>.init<A>(_:in:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19) == 1)
    {
      __break(1u);
    }
    else
    {
      v30 = v5;
      outlined init with take of TableCellFormula((uint64_t)v17, v37, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      type metadata accessor for _NSSwiftAttributedStringStorage(0);
      v24 = (unint64_t)rawValue;
      if (rawValue)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        v25 = v24;
      }
      else
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        v25 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      }
      v26 = v31;
      swift_bridgeObjectRetain();
      v27 = v35;
      RichTextAttributeResolver.swiftUIAttributes(for:)(v25, v35);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
      v28 = v37;
      v29 = (void (*)(char *, _QWORD))AttributedString.subscript.modify();
      AttributedSubstring.setAttributes(_:)();
      v29(v38, 0);
      swift_endAccess();
      objc_msgSend(v26, sel_edited_range_changeInLength_, 1, v30, v33, 0);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v27, v32);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v28, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    }
  }
}

Swift::Void __swiftcall NSSwiftMutableAttributedString.addAttributes(_:range:)(Swift::OpaquePointer _, __C::_NSRange range)
{
  char *v2;
  Swift::Int length;
  Swift::Int location;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, _QWORD);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  Swift::Int v38;
  Swift::Int v39;
  void *rawValue;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48[32];

  length = range.length;
  location = range.location;
  rawValue = _._rawValue;
  v5 = type metadata accessor for AttributedString.AttributeMergePolicy();
  v43 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v42 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttributeContainer();
  v46 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v45 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AttributedString();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  v47 = v20;
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v41 = (uint64_t)&v35 - v27;
  if (NSNotFound.getter() != location)
  {
    v36 = v8;
    v37 = v2;
    v28 = &v2[OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage];
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v28, v11);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
    v38 = location;
    v39 = length;
    Range<>.init<A>(_:in:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v47) == 1)
    {
      __break(1u);
    }
    else
    {
      v29 = v41;
      outlined init with take of TableCellFormula((uint64_t)v19, v41, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      type metadata accessor for _NSSwiftAttributedStringStorage(0);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      v30 = v45;
      RichTextAttributeResolver.swiftUIAttributes(for:)((uint64_t)rawValue, v45);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v29, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      swift_beginAccess();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
      v31 = (void (*)(char *, _QWORD))AttributedString.subscript.modify();
      v33 = v42;
      v32 = v43;
      v34 = v44;
      (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v42, *MEMORY[0x1E0CAEFE0], v44);
      AttributedSubstring.mergeAttributes(_:mergePolicy:)();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v34);
      v31(v48, 0);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      swift_endAccess();
      objc_msgSend(v37, sel_edited_range_changeInLength_, 1, v38, v39, 0);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v30, v36);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v29, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    }
  }
}

Swift::Void __swiftcall NSSwiftMutableAttributedString.insert(_:at:)(NSAttributedString _, Swift::Int at)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  id v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  uint64_t v24;
  Class v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  Class isa;
  id v34;
  Swift::Int v35;
  uint64_t v36;
  uint64_t v37;

  isa = _.super.isa;
  v4 = type metadata accessor for AttributedString();
  v5 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  v37 = v5;
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for AttributedString.Index?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF1B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v28 - v11;
  v13 = type metadata accessor for AttributedString.Index();
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v31 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = objc_msgSend(v2, sel_string, v16);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v35 = at;
  String.UTF16View.index(_:offsetBy:)();
  swift_bridgeObjectRelease();
  v34 = v2;
  v19 = &v2[OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage];
  swift_beginAccess();
  v20 = v36;
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v8, v19, v36);
  v21 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
  v32 = v8;
  v30 = v21;
  AttributedString.Index.init<A>(_:within:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    __break(1u);
  }
  else
  {
    v29 = v14;
    v22 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v23 = v31;
    v22(v31, v12, v13);
    type metadata accessor for _NSSwiftAttributedStringStorage(0);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v24 = (uint64_t)v32;
    v25 = isa;
    RichTextAttributeResolver.swiftUIAttributedString(for:)(isa, (uint64_t)v32);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_beginAccess();
    AttributedString.insert<A>(_:at:)();
    swift_endAccess();
    v26 = -[objc_class length](v25, sel_length);
    v27 = -[objc_class length](v25, sel_length);
    objc_msgSend(v34, sel_edited_range_changeInLength_, 3, v35, v26, v27);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v24, v20);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v23, v13);
  }
}

Swift::Void __swiftcall NSSwiftMutableAttributedString.append(_:)(NSAttributedString a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v3 = type metadata accessor for AttributedString();
  v4 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v3, v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(v1, sel_length, v6);
  swift_beginAccess();
  type metadata accessor for _NSSwiftAttributedStringStorage(0);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  RichTextAttributeResolver.swiftUIAttributedString(for:)(a1.super.isa, (uint64_t)v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_beginAccess();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
  AttributedString.append<A>(_:)();
  swift_endAccess();
  NSAttributedString.range.getter();
  v10 = v9;
  NSAttributedString.range.getter();
  objc_msgSend(v1, sel_edited_range_changeInLength_, 3, v13, v10, v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
}

Swift::Void __swiftcall NSSwiftMutableAttributedString.deleteCharacters(in:)(__C::_NSRange in)
{
  char *v1;
  Swift::Int location;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  char *v19;
  Swift::Int v20;
  void (*v21)(char *, _QWORD);
  uint64_t v22;
  id v23;
  id v24;
  Swift::Int length;
  char v26[32];

  length = in.length;
  location = in.location;
  v3 = type metadata accessor for AttributedString();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v15);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (NSNotFound.getter() != location)
  {
    v18 = objc_msgSend(v1, sel_length);
    v23 = v1;
    v24 = v18;
    v19 = &v1[OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage];
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v19, v3);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
    v20 = length;
    Range<>.init<A>(_:in:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13) != 1)
    {
      outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      swift_beginAccess();
      v21 = (void (*)(char *, _QWORD))AttributedString.characters.modify();
      type metadata accessor for AttributedString.CharacterView();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEF10], MEMORY[0x1E0CAEF38]);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for EmptyCollection<Character>, MEMORY[0x1E0DEA2D0], MEMORY[0x1E0DEC758]);
      lazy protocol witness table accessor for type EmptyCollection<Character> and conformance EmptyCollection<A>();
      dispatch thunk of RangeReplaceableCollection.replaceSubrange<A>(_:with:)();
      v21(v26, 0);
      swift_endAccess();
      if (!__OFSUB__(v20, v24))
      {
        objc_msgSend(v23, sel_edited_range_changeInLength_, 2, location, v20, v20 - (_QWORD)v24);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        return;
      }
      __break(1u);
    }
    __break(1u);
  }
}

NSAttributedString_optional __swiftcall NSSwiftMutableAttributedString._nsAttributedSubstring(from:)(__C::_NSRange from)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  Swift::Bool v24;
  objc_class *v25;
  uint64_t v26;
  uint64_t v27;
  objc_class *v28;
  _QWORD v29[2];
  __C::_NSRange v30;
  __int128 v31;
  uint64_t v32;
  NSAttributedString_optional result;

  v30 = from;
  v2 = type metadata accessor for AttributedSubstring();
  MEMORY[0x1E0C80A78](v2, v3);
  v29[1] = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[0] = type metadata accessor for _NSSwiftAttributedStringStorage(0);
  MEMORY[0x1E0C80A78](v29[0], v5);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttributedString();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  v18 = v17;
  v19 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v20);
  v22 = (char *)v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v1 + OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v23, v8);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
  Range<>.init<A>(_:in:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>?);
    v25 = 0;
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v16, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v23, (uint64_t)v7, type metadata accessor for _NSSwiftAttributedStringStorage);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
    AttributedString.subscript.getter();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for _NSSwiftAttributedStringStorage);
    AttributedString.init(_:)();
    v26 = v23 + *(int *)(v29[0] + 20);
    v27 = *(_QWORD *)(v26 + 16);
    v31 = *(_OWORD *)v26;
    v32 = v27;
    v25 = (objc_class *)RichTextAttributeResolver.nsAttributedString(for:)((uint64_t)v12);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
  }
  v28 = v25;
  result.value.super.isa = v28;
  result.is_nil = v24;
  return result;
}

void @objc NSSwiftAttributedString.init(html:options:documentAttributes:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5;
  id v6;

  if (a3)
  {
    v5 = a4;
    v6 = a3;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

  }
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void @objc NSSwiftAttributedString.init(fileURL:options:documentAttributes:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for URL();
  MEMORY[0x1E0C80A78](v0, v1);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void @objc NSSwiftAttributedString.init(data:options:documentAttributes:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = a4;
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void @objc NSSwiftAttributedString.init(__contentsOfMarkdownFileAt:options:baseURL:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v16 - v9;
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  if (a5)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = 0;
  }
  else
  {
    v14 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v14, 1, v11);
  v15 = a4;
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void @objc NSSwiftAttributedString.init(__markdown:options:baseURL:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v17 - v10;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  if (v14)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v15 = type metadata accessor for URL();
    v16 = 0;
  }
  else
  {
    v15 = type metadata accessor for URL();
    v16 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v11, v16, 1);
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void @objc NSSwiftAttributedString.init(__markdownString:options:baseURL:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v14 - v9;
  if (a5)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = type metadata accessor for URL();
    v12 = 0;
  }
  else
  {
    v11 = type metadata accessor for URL();
    v12 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, v12, 1);
  v13 = a4;
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void @objc NSSwiftAttributedString.init(attributedString:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id NSSwiftMutableAttributedString.__deallocating_deinit()
{
  return NSSwiftAttributedString.__deallocating_deinit(type metadata accessor for NSSwiftMutableAttributedString);
}

id NSSwiftAttributedString.__deallocating_deinit(uint64_t (*a1)(_QWORD))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t ObjC metadata update function for NSSwiftMutableAttributedString()
{
  return type metadata accessor for NSSwiftMutableAttributedString(0);
}

uint64_t type metadata accessor for NSSwiftMutableAttributedString(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for NSSwiftMutableAttributedString);
}

uint64_t type metadata completion function for NSSwiftAttributedString()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for _NSSwiftAttributedStringStorage(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _NSSwiftAttributedStringStorage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    v9[2] = v10[2];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for _NSSwiftAttributedStringStorage(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _NSSwiftAttributedStringStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v8[2] = v9[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _NSSwiftAttributedStringStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = *v9;
  swift_retain();
  swift_release();
  *(_QWORD *)(v8 + 8) = v9[1];
  swift_retain();
  swift_release();
  *(_QWORD *)(v8 + 16) = v9[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for _NSSwiftAttributedStringStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  return a1;
}

uint64_t assignWithTake for _NSSwiftAttributedStringStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = *v9;
  swift_release();
  *(_QWORD *)(v8 + 8) = v9[1];
  swift_release();
  *(_QWORD *)(v8 + 16) = v9[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _NSSwiftAttributedStringStorage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870D3E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for AttributedString();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 16);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for _NSSwiftAttributedStringStorage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1870D3EC0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for AttributedString();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 16) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for _NSSwiftAttributedStringStorage()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AttributedString();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for Range<AttributedString.Index>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Range<AttributedString.Index>?, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

unint64_t lazy protocol witness table accessor for type EmptyCollection<Character> and conformance EmptyCollection<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EmptyCollection<Character> and conformance EmptyCollection<A>;
  if (!lazy protocol witness table cache variable for type EmptyCollection<Character> and conformance EmptyCollection<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for EmptyCollection<Character>, MEMORY[0x1E0DEA2D0], MEMORY[0x1E0DEC758]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC788], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyCollection<Character> and conformance EmptyCollection<A>);
  }
  return result;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)()
{
  uint64_t v0;

  v0 = static name in Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:);
  swift_bridgeObjectRetain();
  return v0;
}

void type metadata accessor for AttributedString.Runs.Run?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for AttributedString.Runs.Run?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF138], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for (NSAttributedStringKey, Any)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (NSAttributedStringKey, Any))
  {
    type metadata accessor for NSAttributedStringKey(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (NSAttributedStringKey, Any));
  }
}

uint64_t specialized _NSSwiftAttributedStringStorage.enumerateAttributes(in:options:using:)(char *a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  void (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t);
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  void (*v90)(char *, _QWORD);
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  Class v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char v113;
  void (*v114)(char *, uint64_t);
  void (*v115)(char *, _QWORD);
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  Class isa;
  uint64_t (*v128)(_QWORD);
  void (*v129)(_QWORD, _QWORD, _QWORD);
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  void (*v140)(char *, uint64_t);
  char *v141;
  char *v142;
  void (*v143)(char *, uint64_t, uint64_t);
  char *v144;
  char *v145;
  char *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(char *, uint64_t, uint64_t, double);
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163[8];
  uint64_t v164;

  v155 = a5;
  v159 = a4;
  v140 = a3;
  v152 = a1;
  v153 = a2;
  v164 = *MEMORY[0x1E0C80C00];
  v5 = type metadata accessor for AttributeContainer();
  MEMORY[0x1E0C80A78](v5, v6);
  v154 = (char *)&v131 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttributedString.Runs.Run();
  v160 = *(_QWORD *)(v8 - 8);
  v161 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v141 = (char *)&v131 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v145 = (char *)&v131 - v13;
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  v137 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v136 = (char *)&v131 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v143 = (void (*)(char *, uint64_t, uint64_t))((char *)&v131 - v19);
  type metadata accessor for AttributedString.Runs.Run?(0);
  MEMORY[0x1E0C80A78](v20, v21);
  v142 = (char *)&v131 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v146 = (char *)&v131 - v25;
  v26 = type metadata accessor for AttributedString.Runs.Index();
  v158 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v156 = (char *)&v131 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v157 = (char *)&v131 - v31;
  v162 = type metadata accessor for AttributedString.Runs();
  v138 = *(_QWORD *)(v162 - 8);
  MEMORY[0x1E0C80A78](v162, v32);
  v144 = (char *)&v131 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for AttributedSubstring();
  v35 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34, v36);
  v139 = (char *)&v131 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReversedCollection<AttributedString.Runs>();
  MEMORY[0x1E0C80A78](v38, v39);
  v135 = (char *)&v131 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReversedCollection<AttributedString.Runs>.Iterator();
  v133 = v41;
  MEMORY[0x1E0C80A78](v41, v42);
  v134 = (char *)&v131 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v44, v45);
  v147 = (uint64_t *)((char *)&v131 - v46);
  v47 = type metadata accessor for AttributedString();
  v48 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47, v49);
  v51 = (char *)&v131 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1E0C80A78](v52, v53);
  v55 = (char *)&v131 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  v57 = v56;
  v58 = *((_QWORD *)v56 - 1);
  MEMORY[0x1E0C80A78](v56, v59);
  v151 = (char *)&v131 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = MEMORY[0x1E0C80A78](v61, v62);
  v65 = (char *)&v131 - v64;
  v150 = *(void (**)(char *, uint64_t, uint64_t, double))(v48 + 16);
  v150(v51, v159, v47, v63);
  v66 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
  v152 = v51;
  v153 = v47;
  v67 = v57;
  v149 = v66;
  Range<>.init<A>(_:in:)();
  if ((*(unsigned int (**)(char *, uint64_t, char *))(v58 + 48))(v55, 1, v57) == 1)
  {
    v68 = type metadata accessor for Range<AttributedString.Index>?;
    v69 = (uint64_t)v55;
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v55, (uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    v70 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
    v71 = v139;
    v132 = v65;
    v148 = v70;
    AttributedString.subscript.getter();
    v72 = v144;
    AttributedSubstring.runs.getter();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v71, v34);
    v73 = v72;
    if ((v140 & 2) != 0)
    {
      v101 = v138;
      v102 = v135;
      v103 = v162;
      (*(void (**)(char *, char *, uint64_t))(v138 + 32))(v135, v72, v162);
      v104 = (uint64_t)v134;
      (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v134, v102, v103);
      v105 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], MEMORY[0x1E0CAF180]);
      v106 = v157;
      v144 = (char *)v105;
      dispatch thunk of Collection.endIndex.getter();
      (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v103);
      v107 = v133;
      v108 = v158;
      (*(void (**)(uint64_t, char *, uint64_t))(v158 + 32))(v104 + *(int *)(v133 + 36), v106, v26);
      v109 = (uint64_t)v147;
      outlined init with take of TableCellFormula(v104, (uint64_t)v147, (uint64_t (*)(_QWORD))type metadata accessor for ReversedCollection<AttributedString.Runs>.Iterator);
      v110 = v109 + *(int *)(v107 + 36);
      v143 = *(void (**)(char *, uint64_t, uint64_t))(v108 + 16);
      v142 = (char *)(MEMORY[0x1E0DEE9B8] + 8);
      while (1)
      {
        v111 = v157;
        v143(v157, v110, v26);
        v112 = v156;
        dispatch thunk of Collection.startIndex.getter();
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF150], MEMORY[0x1E0CAF158]);
        v113 = dispatch thunk of static Equatable.== infix(_:_:)();
        v114 = *(void (**)(char *, uint64_t))(v158 + 8);
        v114(v112, v26);
        v114(v111, v26);
        if ((v113 & 1) != 0)
          break;
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], MEMORY[0x1E0CAF170]);
        dispatch thunk of BidirectionalCollection.formIndex(before:)();
        v115 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
        v117 = v160;
        v116 = v161;
        v118 = v146;
        (*(void (**)(char *))(v160 + 16))(v146);
        v115(v163, 0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v118, 0, 1, v116);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v118, 1, v116) == 1)
          goto LABEL_19;
        v119 = v110;
        v120 = v26;
        v121 = v160;
        v122 = v161;
        v123 = v145;
        (*(void (**)(char *, char *, uint64_t))(v160 + 32))(v145, v118, v161);
        v163[0] = 0;
        AttributedString.Runs.Run.attributes.getter();
        Dictionary<>.init(_:)();
        AttributedString.Runs.Run.range.getter();
        ((void (*)(char *, uint64_t, uint64_t))v150)(v152, v159, v153);
        v124 = _NSRange.init<A, B>(_:in:)();
        v126 = v125;
        type metadata accessor for NSAttributedStringKey(0);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, Class, uint64_t, uint64_t, char *))(v155 + 16))(v155, isa, v124, v126, v163);
        swift_bridgeObjectRelease();

        (*(void (**)(char *, uint64_t))(v121 + 8))(v123, v122);
        if (v163[0] == 1)
        {
          v128 = (uint64_t (*)(_QWORD))type metadata accessor for ReversedCollection<AttributedString.Runs>.Iterator;
          v129 = (void (*)(_QWORD, _QWORD, _QWORD))v147;
          goto LABEL_20;
        }
        v26 = v120;
        v109 = (uint64_t)v147;
        v110 = v119;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v160 + 56))(v146, 1, 1, v161);
LABEL_19:
      v128 = (uint64_t (*)(_QWORD))type metadata accessor for ReversedCollection<AttributedString.Runs>.Iterator;
      v129 = (void (*)(_QWORD, _QWORD, _QWORD))v109;
    }
    else
    {
      v139 = v67;
      v74 = v138;
      v75 = v136;
      v76 = v162;
      v145 = *(char **)(v138 + 16);
      ((void (*)(char *, char *, uint64_t))v145)(v136, v73, v162);
      v77 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], MEMORY[0x1E0CAF180]);
      v78 = v157;
      v147 = (uint64_t *)v77;
      dispatch thunk of Collection.startIndex.getter();
      v140 = *(void (**)(char *, uint64_t))(v74 + 8);
      v140(v73, v76);
      v79 = v137;
      v80 = v158;
      (*(void (**)(char *, char *, uint64_t))(v158 + 32))(&v75[*(int *)(v137 + 36)], v78, v26);
      v81 = (uint64_t)v75;
      v82 = v143;
      outlined init with take of TableCellFormula(v81, (uint64_t)v143, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>);
      v83 = (char *)v82 + *(int *)(v79 + 36);
      v146 = *(char **)(v80 + 16);
      v138 = MEMORY[0x1E0DEE9B8] + 8;
      v84 = v160;
      while (1)
      {
        v85 = v157;
        ((void (*)(char *, char *, uint64_t))v146)(v157, v83, v26);
        v86 = v156;
        dispatch thunk of Collection.endIndex.getter();
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF150], MEMORY[0x1E0CAF158]);
        v87 = dispatch thunk of static Equatable.== infix(_:_:)();
        v88 = *(void (**)(char *, uint64_t))(v158 + 8);
        v88(v86, v26);
        v88(v85, v26);
        if ((v87 & 1) != 0)
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v160 + 56))(v142, 1, 1, v161);
LABEL_16:
          v128 = (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>;
          v129 = (void (*)(_QWORD, _QWORD, _QWORD))v82;
          goto LABEL_20;
        }
        v89 = v162;
        v90 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
        v91 = v142;
        v92 = v161;
        (*(void (**)(char *))(v84 + 16))(v142);
        v90(v163, 0);
        v93 = v144;
        ((void (*)(char *, _QWORD, uint64_t))v145)(v144, v82, v89);
        dispatch thunk of Collection.formIndex(after:)();
        v140(v93, v89);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v91, 0, 1, v92);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v91, 1, v92) == 1)
          goto LABEL_16;
        v95 = v160;
        v94 = v161;
        v96 = v141;
        (*(void (**)(char *, char *, uint64_t))(v160 + 32))(v141, v91, v161);
        v163[0] = 0;
        AttributedString.Runs.Run.attributes.getter();
        Dictionary<>.init(_:)();
        AttributedString.Runs.Run.range.getter();
        ((void (*)(char *, uint64_t, uint64_t))v150)(v152, v159, v153);
        v97 = _NSRange.init<A, B>(_:in:)();
        v99 = v98;
        type metadata accessor for NSAttributedStringKey(0);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
        v100 = Dictionary._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, Class, uint64_t, uint64_t, char *))(v155 + 16))(v155, v100, v97, v99, v163);
        swift_bridgeObjectRelease();

        (*(void (**)(char *, uint64_t))(v95 + 8))(v96, v94);
        if (v163[0] == 1)
          break;
        v82 = v143;
      }
      v128 = (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>;
      v129 = (void (*)(_QWORD, _QWORD, _QWORD))v143;
    }
LABEL_20:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v129, v128);
    v68 = type metadata accessor for Range<AttributedString.Index>;
    v69 = (uint64_t)v132;
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v69, (uint64_t (*)(_QWORD))v68);
}

uint64_t specialized _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  void (*v72)(_QWORD, _QWORD, _QWORD);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  void (*v92)(char *, _QWORD);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t);
  uint64_t v114;
  char *v115;
  uint64_t (*v116)(uint64_t, uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  char v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  char v125;
  uint64_t (*v126)(uint64_t, uint64_t, uint64_t);
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  double v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  __int128 *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  double v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  void (*v153)(char *, uint64_t);
  uint64_t v154;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  double v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  char v176;
  void *v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  __int128 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  double v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  double v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t i;
  _QWORD *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void (*v234)(char *, uint64_t, uint64_t);
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t (*v239)(uint64_t, uint64_t, uint64_t);
  char v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  char v253[8];
  uint64_t v254;

  v216 = a4;
  v237 = a3;
  v236 = a2;
  v230 = a1;
  v254 = *MEMORY[0x1E0C80C00];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for (AnyHashable?, Range<AttributedString.Index>)?, (uint64_t (*)(uint64_t))type metadata accessor for (AnyHashable?, Range<AttributedString.Index>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v217 = (char *)&v203 - v10;
  type metadata accessor for AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>.Iterator(0, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>.Iterator, MEMORY[0x1E0CAF0D8]);
  i = v11;
  v204 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v218 = (char *)&v203 - v13;
  type metadata accessor for (AnyHashable?, Range<AttributedString.Index>)();
  v238 = v14;
  v208 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v222 = (uint64_t)&v203 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v225 = type metadata accessor for AttributedString.Index();
  v227 = *(_QWORD *)(v225 - 8);
  MEMORY[0x1E0C80A78](v225, v17);
  v223 = (char *)&v203 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v226 = (char *)&v203 - v21;
  type metadata accessor for AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>.Iterator(0, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>, MEMORY[0x1E0CAF0F0]);
  v228 = v22;
  v215 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v214 = (char *)&v203 - v24;
  v219 = type metadata accessor for AttributedString.Runs();
  v213 = *(_QWORD *)(v219 - 8);
  MEMORY[0x1E0C80A78](v219, v25);
  v211 = (char *)&v203 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = type metadata accessor for AttributedSubstring();
  v210 = *(_QWORD *)(v212 - 8);
  MEMORY[0x1E0C80A78](v212, v27);
  v29 = (char *)&v203 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator(0, &lazy cache variable for type metadata for ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DECCE0]);
  MEMORY[0x1E0C80A78](v30, v31);
  v206 = (char *)&v203 - v32;
  type metadata accessor for ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator(0, &lazy cache variable for type metadata for ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DECCD0]);
  v207 = v33;
  MEMORY[0x1E0C80A78](v33, v34);
  v205 = (char *)&v203 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36, v37);
  v224 = (uint64_t)&v203 - v38;
  v39 = type metadata accessor for AttributedString();
  v40 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v41);
  v43 = (char *)&v203 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  MEMORY[0x1E0C80A78](v44, v45);
  v47 = (char *)&v203 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  v49 = v48;
  v50 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v51);
  v221 = (uint64_t *)((char *)&v203 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v53, v54);
  v235 = (uint64_t)&v203 - v55;
  MEMORY[0x1E0C80A78](v56, v57);
  v239 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&v203 - v58);
  MEMORY[0x1E0C80A78](v59, v60);
  v62 = (char *)&v203 - v61;
  static name in Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1EDE1AAD8 = v63;
  swift_bridgeObjectRelease();
  v234 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
  v234(v43, a5, v39);
  v64 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
  v236 = v43;
  v237 = v39;
  v233 = v64;
  Range<>.init<A>(_:in:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v47, 1, v49) == 1)
    __break(1u);
  outlined init with take of TableCellFormula((uint64_t)v47, (uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
  v65 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
  v209 = v62;
  v232 = v65;
  AttributedString.subscript.getter();
  v66 = v211;
  AttributedSubstring.runs.getter();
  (*(void (**)(char *, uint64_t))(v210 + 8))(v29, v212);
  lazy protocol witness table accessor for type Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:) and conformance Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)();
  v67 = v214;
  AttributedString.Runs.subscript.getter();
  (*(void (**)(char *, uint64_t))(v213 + 8))(v66, v219);
  v229 = a6;
  v219 = a5;
  v231 = v49;
  if ((v216 & 2) == 0)
  {
    v68 = v228;
    MEMORY[0x18D754420](v228);
    (*(void (**)(char *, uint64_t))(v215 + 8))(v67, v68);
    v69 = (uint64_t)v217;
    AttributedString.Runs.AttributesSlice1.Iterator.next()();
    v70 = v238;
    v239 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v208 + 48);
    v71 = v239(v69, 1, v238);
    v72 = (void (*)(_QWORD, _QWORD, _QWORD))v221;
    if (v71 == 1)
    {
LABEL_4:
      (*(void (**)(char *, uint64_t))(v204 + 8))(v218, i);
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v209, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    }
    v228 = v219 + 16;
    v156 = MEMORY[0x1E0DEC198];
    v227 = MEMORY[0x1E0DEE9B8] + 8;
    while (1)
    {
      v157 = v69 + *(int *)(v70 + 48);
      outlined init with take of AnyHashable?(v69, (uint64_t)v253);
      outlined init with take of TableCellFormula(v157, (uint64_t)v72, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      v240 = 0;
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v253, (uint64_t)&v247, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v156);
      if (*((_QWORD *)&v248 + 1))
      {
        v250 = v247;
        v251 = v248;
        v252 = v249;
        v158 = type metadata accessor for _NSSwiftAttributedStringStorage(0);
        v159 = v219;
        v160 = (uint64_t *)(v219 + *(int *)(v158 + 20));
        v161 = v160[1];
        v162 = v160[2];
        v241 = *v160;
        v242 = v161;
        v243 = v162;
        v246 = v156;
        v245 = swift_allocObject();
        outlined init with copy of AnyHashable((uint64_t)&v250, v245 + 16);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        RichTextAttributeResolver.nsValueFromSwiftValue(nsKey:value:)(v230, (uint64_t)&v245, (uint64_t *)&v247);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v245);
        outlined init with copy of Any((uint64_t)&v247, (uint64_t)&v245);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v72, v235, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        v234(v236, v159, v237);
        v163 = _NSRange.init<A, B>(_:in:)();
        v165 = v164;
        v166 = MEMORY[0x1E0DEE9B8] + 8;
        outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v245, (uint64_t)&v241, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
        v167 = v244;
        if (v244)
        {
          v168 = __swift_project_boxed_opaque_existential_1(&v241, v244);
          v169 = *(_QWORD *)(v167 - 8);
          v170 = MEMORY[0x1E0C80A78](v168, v168);
          v172 = (char *)&v203 - ((v171 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, double))(v169 + 16))(v172, v170);
          v173 = _bridgeAnythingToObjectiveC<A>(_:)();
          (*(void (**)(char *, uint64_t))(v169 + 8))(v172, v167);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v241);
        }
        else
        {
          v173 = 0;
        }
        a6 = v229;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(v229 + 16))(v229, v173, v163, v165, &v240);
        swift_unknownObjectRelease();
        outlined destroy of AccessibilityTableContext?((uint64_t)&v245, (unint64_t *)&lazy cache variable for type metadata for Any?, v166);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v247);
        outlined destroy of AnyHashable((uint64_t)&v250);
        v72 = (void (*)(_QWORD, _QWORD, _QWORD))v221;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v221, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        outlined destroy of AccessibilityTableContext?((uint64_t)v253, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v156);
        v70 = v238;
      }
      else
      {
        outlined destroy of AccessibilityTableContext?((uint64_t)&v247, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v156);
        v174 = *(_QWORD *)(v228 + *(int *)(type metadata accessor for _NSSwiftAttributedStringStorage(0) + 20));
        if (!*(_QWORD *)(v174 + 16)
          || (swift_bridgeObjectRetain(),
              specialized __RawDictionaryStorage.find<A>(_:)(v230),
              v176 = v175,
              swift_bridgeObjectRelease(),
              (v176 & 1) == 0))
        {
          outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v253, (uint64_t)&v250, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v156);
          if (*((_QWORD *)&v251 + 1))
          {
            *((_QWORD *)&v248 + 1) = v156;
            v180 = swift_allocObject();
            *(_QWORD *)&v247 = v180;
            v181 = v251;
            *(_OWORD *)(v180 + 16) = v250;
            *(_OWORD *)(v180 + 32) = v181;
            *(_QWORD *)(v180 + 48) = v252;
          }
          else
          {
            outlined destroy of AccessibilityTableContext?((uint64_t)&v250, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v156);
            v247 = 0u;
            v248 = 0u;
          }
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v221, v235, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
          v234(v236, v219, v237);
          v182 = _NSRange.init<A, B>(_:in:)();
          v184 = v183;
          outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v247, (uint64_t)&v250, (unint64_t *)&lazy cache variable for type metadata for Any?, v227);
          v185 = *((_QWORD *)&v251 + 1);
          if (*((_QWORD *)&v251 + 1))
          {
            v186 = __swift_project_boxed_opaque_existential_1(&v250, *((uint64_t *)&v251 + 1));
            v187 = *(_QWORD *)(v185 - 8);
            v188 = MEMORY[0x1E0C80A78](v186, v186);
            v190 = (char *)&v203 - ((v189 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *, double))(v187 + 16))(v190, v188);
            v191 = _bridgeAnythingToObjectiveC<A>(_:)();
            (*(void (**)(char *, uint64_t))(v187 + 8))(v190, v185);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v250);
          }
          else
          {
            v191 = 0;
          }
          v70 = v238;
          v69 = (uint64_t)v217;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a6 + 16))(a6, v191, v182, v184, &v240);
          swift_unknownObjectRelease();
          v72 = (void (*)(_QWORD, _QWORD, _QWORD))v221;
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v221, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
          outlined destroy of AccessibilityTableContext?((uint64_t)v253, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v156);
          outlined destroy of AccessibilityTableContext?((uint64_t)&v247, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
          goto LABEL_56;
        }
        if (*(_QWORD *)(v174 + 16))
        {
          v177 = v230;
          v178 = specialized __RawDictionaryStorage.find<A>(_:)(v177);
          if ((v179 & 1) != 0)
          {
            outlined init with copy of Any(*(_QWORD *)(v174 + 56) + 32 * v178, (uint64_t)&v250);
          }
          else
          {
            v251 = 0u;
            v250 = 0u;
          }

        }
        else
        {
          v251 = 0u;
          v250 = 0u;
        }
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v221, v235, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        v234(v236, v219, v237);
        v192 = _NSRange.init<A, B>(_:in:)();
        v194 = v193;
        v195 = MEMORY[0x1E0DEE9B8] + 8;
        outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v250, (uint64_t)&v247, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
        v196 = *((_QWORD *)&v248 + 1);
        if (*((_QWORD *)&v248 + 1))
        {
          v197 = __swift_project_boxed_opaque_existential_1(&v247, *((uint64_t *)&v248 + 1));
          v198 = *(_QWORD *)(v196 - 8);
          v199 = MEMORY[0x1E0C80A78](v197, v197);
          v201 = (char *)&v203 - ((v200 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, double))(v198 + 16))(v201, v199);
          v202 = _bridgeAnythingToObjectiveC<A>(_:)();
          (*(void (**)(char *, uint64_t))(v198 + 8))(v201, v196);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v247);
        }
        else
        {
          v202 = 0;
        }
        a6 = v229;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(v229 + 16))(v229, v202, v192, v194, &v240);
        swift_unknownObjectRelease();
        outlined destroy of AccessibilityTableContext?((uint64_t)&v250, (unint64_t *)&lazy cache variable for type metadata for Any?, v195);
        v72 = (void (*)(_QWORD, _QWORD, _QWORD))v221;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v221, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        outlined destroy of AccessibilityTableContext?((uint64_t)v253, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v156);
        v70 = v238;
      }
      v69 = (uint64_t)v217;
LABEL_56:
      if (v240 != 1)
      {
        AttributedString.Runs.AttributesSlice1.Iterator.next()();
        if (v239(v69, 1, v70) != 1)
          continue;
      }
      goto LABEL_4;
    }
  }
  v73 = v215;
  v74 = v206;
  v75 = v228;
  (*(void (**)(char *, char *, uint64_t))(v215 + 32))(v206, v67, v228);
  v76 = (uint64_t)v205;
  (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v205, v74, v75);
  v77 = lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)> and conformance AttributedString.Runs.AttributesSlice1<A>(&lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)> and conformance AttributedString.Runs.AttributesSlice1<A>, MEMORY[0x1E0CAF110]);
  v78 = a5;
  v79 = v226;
  dispatch thunk of Collection.endIndex.getter();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v75);
  v80 = v207;
  v81 = v227;
  (*(void (**)(uint64_t, char *, uint64_t))(v227 + 32))(v76 + *(int *)(v207 + 36), v79, v225);
  v82 = v224;
  outlined init with take of ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator(v76, v224);
  v83 = v82 + *(int *)(v80 + 36);
  v221 = *(_QWORD **)(v81 + 16);
  v84 = v78;
  v217 = (char *)(v78 + 16);
  v216 = MEMORY[0x1E0DEE9B8] + 8;
  v218 = (char *)v77;
  for (i = v83; ; v83 = i)
  {
    v85 = v226;
    v86 = v225;
    ((void (*)(char *, uint64_t, uint64_t))v221)(v226, v83, v225);
    v87 = v223;
    dispatch thunk of Collection.startIndex.getter();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF1B0], MEMORY[0x1E0CAF1C8]);
    v88 = v77;
    v89 = dispatch thunk of static Equatable.== infix(_:_:)();
    v90 = v82;
    v91 = *(void (**)(char *, uint64_t))(v227 + 8);
    v91(v87, v86);
    v91(v85, v86);
    if ((v89 & 1) != 0)
      break;
    lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)> and conformance AttributedString.Runs.AttributesSlice1<A>(&lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)> and conformance AttributedString.Runs.AttributesSlice1<A>, MEMORY[0x1E0CAF100]);
    dispatch thunk of BidirectionalCollection.formIndex(before:)();
    v92 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
    v93 = v222;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v94, v222, (uint64_t (*)(_QWORD))type metadata accessor for (AnyHashable?, Range<AttributedString.Index>));
    v92(v253, 0);
    v95 = v93 + *(int *)(v238 + 48);
    outlined init with take of AnyHashable?(v93, (uint64_t)v253);
    v96 = v239;
    outlined init with take of TableCellFormula(v95, (uint64_t)v239, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    v240 = 0;
    v97 = MEMORY[0x1E0DEC198];
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v253, (uint64_t)&v247, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
    if (*((_QWORD *)&v248 + 1))
    {
      v250 = v247;
      v251 = v248;
      v252 = v249;
      v98 = v84;
      v99 = (uint64_t *)(v84 + *(int *)(type metadata accessor for _NSSwiftAttributedStringStorage(0) + 20));
      v100 = v99[1];
      v101 = v99[2];
      v241 = *v99;
      v242 = v100;
      v243 = v101;
      v246 = v97;
      v245 = swift_allocObject();
      outlined init with copy of AnyHashable((uint64_t)&v250, v245 + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      RichTextAttributeResolver.nsValueFromSwiftValue(nsKey:value:)(v230, (uint64_t)&v245, (uint64_t *)&v247);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v245);
      outlined init with copy of Any((uint64_t)&v247, (uint64_t)&v245);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v96, v235, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      v234(v236, v84, v237);
      v102 = _NSRange.init<A, B>(_:in:)();
      v104 = v103;
      v105 = MEMORY[0x1E0DEE9B8] + 8;
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v245, (uint64_t)&v241, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
      v106 = v244;
      if (v244)
      {
        v107 = __swift_project_boxed_opaque_existential_1(&v241, v244);
        v108 = *(_QWORD *)(v106 - 8);
        v109 = MEMORY[0x1E0C80A78](v107, v107);
        v111 = (char *)&v203 - ((v110 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v108 + 16))(v111, v109);
        v112 = _bridgeAnythingToObjectiveC<A>(_:)();
        v113 = *(void (**)(char *, uint64_t))(v108 + 8);
        v114 = v229;
        v115 = v111;
        v116 = v239;
        v113(v115, v106);
        v98 = v219;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v241);
      }
      else
      {
        v112 = 0;
        v114 = v229;
        v116 = v96;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(v114 + 16))(v114, v112, v102, v104, &v240);
      swift_unknownObjectRelease();
      outlined destroy of AccessibilityTableContext?((uint64_t)&v245, (unint64_t *)&lazy cache variable for type metadata for Any?, v105);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v247);
      outlined destroy of AnyHashable((uint64_t)&v250);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v116, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      outlined destroy of AccessibilityTableContext?((uint64_t)v253, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
      v77 = (uint64_t)v218;
    }
    else
    {
      v77 = v88;
      outlined destroy of AccessibilityTableContext?((uint64_t)&v247, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v97);
      v117 = *(_QWORD *)&v217[*(int *)(type metadata accessor for _NSSwiftAttributedStringStorage(0) + 20)];
      v98 = v84;
      v118 = v97;
      if (*(_QWORD *)(v117 + 16)
        && (swift_bridgeObjectRetain(),
            specialized __RawDictionaryStorage.find<A>(_:)(v230),
            v120 = v119,
            swift_bridgeObjectRelease(),
            (v120 & 1) != 0))
      {
        v121 = v229;
        v122 = (uint64_t)v96;
        if (*(_QWORD *)(v117 + 16))
        {
          v123 = v230;
          v124 = specialized __RawDictionaryStorage.find<A>(_:)(v123);
          if ((v125 & 1) != 0)
          {
            outlined init with copy of Any(*(_QWORD *)(v117 + 56) + 32 * v124, (uint64_t)&v250);
          }
          else
          {
            v251 = 0u;
            v250 = 0u;
          }

        }
        else
        {
          v251 = 0u;
          v250 = 0u;
        }
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v96, v235, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        v234(v236, v98, v237);
        v143 = _NSRange.init<A, B>(_:in:)();
        v215 = v144;
        v145 = MEMORY[0x1E0DEE9B8] + 8;
        outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v250, (uint64_t)&v247, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
        v146 = *((_QWORD *)&v248 + 1);
        if (*((_QWORD *)&v248 + 1))
        {
          v147 = __swift_project_boxed_opaque_existential_1(&v247, *((uint64_t *)&v248 + 1));
          v148 = *(_QWORD *)(v146 - 8);
          v149 = MEMORY[0x1E0C80A78](v147, v147);
          v151 = (char *)&v203 - ((v150 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, double))(v148 + 16))(v151, v149);
          v152 = _bridgeAnythingToObjectiveC<A>(_:)();
          v153 = *(void (**)(char *, uint64_t))(v148 + 8);
          v77 = (uint64_t)v218;
          v153(v151, v146);
          v98 = v219;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v247);
        }
        else
        {
          v152 = 0;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(v121 + 16))(v121, v152, v143, v215, &v240);
        swift_unknownObjectRelease();
        outlined destroy of AccessibilityTableContext?((uint64_t)&v250, (unint64_t *)&lazy cache variable for type metadata for Any?, v145);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v122, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        v141 = (__int128 *)v253;
        v142 = &lazy cache variable for type metadata for AnyHashable?;
        v140 = MEMORY[0x1E0DEC198];
      }
      else
      {
        outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v253, (uint64_t)&v250, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v97);
        v126 = v96;
        if (*((_QWORD *)&v251 + 1))
        {
          *((_QWORD *)&v248 + 1) = v118;
          v127 = swift_allocObject();
          *(_QWORD *)&v247 = v127;
          v128 = v251;
          *(_OWORD *)(v127 + 16) = v250;
          *(_OWORD *)(v127 + 32) = v128;
          *(_QWORD *)(v127 + 48) = v252;
        }
        else
        {
          outlined destroy of AccessibilityTableContext?((uint64_t)&v250, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v118);
          v247 = 0u;
          v248 = 0u;
        }
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v96, v235, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        v234(v236, v84, v237);
        v129 = _NSRange.init<A, B>(_:in:)();
        v131 = v130;
        outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v247, (uint64_t)&v250, (unint64_t *)&lazy cache variable for type metadata for Any?, v216);
        v132 = *((_QWORD *)&v251 + 1);
        if (*((_QWORD *)&v251 + 1))
        {
          v133 = __swift_project_boxed_opaque_existential_1(&v250, *((uint64_t *)&v251 + 1));
          v134 = *(_QWORD *)(v132 - 8);
          v135 = MEMORY[0x1E0C80A78](v133, v133);
          v137 = (char *)&v203 - ((v136 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, double))(v134 + 16))(v137, v135);
          v138 = _bridgeAnythingToObjectiveC<A>(_:)();
          v126 = v239;
          v139 = v137;
          v77 = (uint64_t)v218;
          (*(void (**)(char *, uint64_t))(v134 + 8))(v139, v132);
          v98 = v219;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v250);
        }
        else
        {
          v138 = 0;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(v229 + 16))(v229, v138, v129, v131, &v240);
        swift_unknownObjectRelease();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v126, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        outlined destroy of AccessibilityTableContext?((uint64_t)v253, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
        v140 = MEMORY[0x1E0DEE9B8] + 8;
        v141 = &v247;
        v142 = &lazy cache variable for type metadata for Any?;
      }
      outlined destroy of AccessibilityTableContext?((uint64_t)v141, (unint64_t *)v142, v140);
    }
    if (v240 == 1)
    {
      v154 = v224;
      goto LABEL_35;
    }
    v84 = v98;
    v82 = v224;
  }
  v154 = v90;
LABEL_35:
  outlined destroy of ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator(v154);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v209, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
}

void type metadata accessor for (AnyHashable?, Range<AttributedString.Index>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (AnyHashable?, Range<AttributedString.Index>))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for Range<AttributedString.Index>(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyHashable?, Range<AttributedString.Index>));
  }
}

unint64_t lazy protocol witness table accessor for type Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:) and conformance Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:) and conformance Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:);
  if (!lazy protocol witness table cache variable for type Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:) and conformance Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:))
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:), &unk_1E1B00720);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:) and conformance Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:));
  }
  return result;
}

void type metadata accessor for AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>.Iterator(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:) and conformance Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)();
    v7 = a3(a1, &unk_1E1B00720, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void type metadata accessor for ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>.Iterator(255, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>, MEMORY[0x1E0CAF0F0]);
    v7 = v6;
    v8 = lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)> and conformance AttributedString.Runs.AttributesSlice1<A>(&lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)> and conformance AttributedString.Runs.AttributesSlice1<A>, MEMORY[0x1E0CAF100]);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)> and conformance AttributedString.Runs.AttributesSlice1<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>.Iterator(255, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>, MEMORY[0x1E0CAF0F0]);
    result = MEMORY[0x18D75FFDC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of AnyHashable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1870D6900()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t outlined init with take of ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator(0, &lazy cache variable for type metadata for ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DECCD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator(0, &lazy cache variable for type metadata for ReversedCollection<AttributedString.Runs.AttributesSlice1<Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)>>.Iterator, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DECCD0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for ReversedCollection<AttributedString.Runs>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ReversedCollection<AttributedString.Runs>)
  {
    type metadata accessor for AttributedString.Runs();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], MEMORY[0x1E0CAF170]);
    v0 = type metadata accessor for ReversedCollection();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ReversedCollection<AttributedString.Runs>);
  }
}

void type metadata accessor for ReversedCollection<AttributedString.Runs>.Iterator()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ReversedCollection<AttributedString.Runs>.Iterator)
  {
    type metadata accessor for AttributedString.Runs();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], MEMORY[0x1E0CAF170]);
    v0 = type metadata accessor for ReversedCollection.Iterator();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ReversedCollection<AttributedString.Runs>.Iterator);
  }
}

uint64_t sub_1870D6AB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for _NSSwiftAttributedStringStorage(0) - 8) + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  v3 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in _NSSwiftAttributedStringStorage.isEqual(to:)(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;

  v9 = *(_QWORD *)(type metadata accessor for _NSSwiftAttributedStringStorage(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  return closure #1 in _NSSwiftAttributedStringStorage.isEqual(to:)(a1, a2, a3, a4, v4 + v10, *(_BYTE **)(v4 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1870D6BD4()
{
  return swift_deallocObject();
}

void type metadata accessor for IndexingIterator<AttributedString.CharacterView>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for IndexingIterator<AttributedString.CharacterView>)
  {
    type metadata accessor for AttributedString.CharacterView();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEF10], MEMORY[0x1E0CAEF30]);
    v0 = type metadata accessor for IndexingIterator();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<AttributedString.CharacterView>);
  }
}

void type metadata accessor for (lower: AttributedString.Index, upper: AttributedString.Index)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (lower: AttributedString.Index, upper: AttributedString.Index))
  {
    type metadata accessor for AttributedString.Index();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (lower: AttributedString.Index, upper: AttributedString.Index));
  }
}

void *type metadata accessor for Key #1 in _NSSwiftAttributedStringStorage.enumerateAttribute(_:in:options:using:)()
{
  return &unk_1E1B00720;
}

uint64_t WindowGroup.init(id:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  int *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v13 = (int *)type metadata accessor for WindowGroup(0, a5, a6, a4);
  *a7 = 0u;
  a7[1] = 0u;
  v14 = (_QWORD *)((char *)a7 + v13[10]);
  *(_QWORD *)((char *)a7 + v13[11]) = 0;
  v15 = (_QWORD *)((char *)a7 + v13[12]);
  *v15 = 0;
  v15[1] = 0;
  *v14 = a1;
  v14[1] = a2;
  a3();
  type metadata accessor for WindowGroupRootContent(0, a5, a6, v16);
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for WindowGroupRootContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WindowGroupRootContent);
}

uint64_t WindowGroup.init(_:id:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t *a8@<X8>, uint64_t a9, uint64_t a10)
{
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v15 = (int *)type metadata accessor for WindowGroup(0, a9, a10, a4);
  v16 = v15[10];
  *(uint64_t *)((char *)a8 + v15[11]) = 0;
  v17 = (uint64_t *)((char *)a8 + v16);
  v18 = (uint64_t *)((char *)a8 + v15[12]);
  *v18 = 0;
  v18[1] = 0;
  Text.assertUnstyled(_:options:)();
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3 & 1;
  a8[3] = a4;
  *v17 = a5;
  v17[1] = a6;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  v19 = swift_bridgeObjectRetain();
  a7(v19);
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRelease();
  type metadata accessor for WindowGroupRootContent(0, a9, a10, v20);
  return swift_storeEnumTagMultiPayload();
}

uint64_t WindowGroup.init(_:id:content:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, void (*a3)(uint64_t)@<X6>, uint64_t *a4@<X8>, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v10 = Text.init(_:tableName:bundle:comment:)();
  return WindowGroup.init(_:id:content:)(v10, v12, v11 & 1, v13, a1, a2, a3, a4, a5, a6);
}

uint64_t WindowGroup.init<A>(_:id:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;

  v26 = a4;
  v27 = a5;
  v16 = *(_QWORD *)(a7 - 8);
  v17 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v19, v17);
  v20 = Text.init<A>(_:)();
  WindowGroup.init(_:id:content:)(v20, v22, v21 & 1, v23, a2, a3, v26, a9, a6, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a1, a7);
}

uint64_t WindowGroup.init(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  int *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v15 = (int *)type metadata accessor for WindowGroup(0, a6, a7, a4);
  v16 = (uint64_t *)((char *)a8 + v15[10]);
  *v16 = 0;
  v16[1] = 0;
  *(uint64_t *)((char *)a8 + v15[11]) = 0;
  v17 = (uint64_t *)((char *)a8 + v15[12]);
  *v17 = 0;
  v17[1] = 0;
  Text.assertUnstyled(_:options:)();
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3 & 1;
  a8[3] = a4;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  v18 = swift_bridgeObjectRetain();
  a5(v18);
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRelease();
  type metadata accessor for WindowGroupRootContent(0, a6, a7, v19);
  return swift_storeEnumTagMultiPayload();
}

uint64_t WindowGroup.init(_:content:)@<X0>(void (*a1)(uint64_t)@<X4>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v8 = Text.init(_:tableName:bundle:comment:)();
  return WindowGroup.init(_:content:)(v8, v10, v9 & 1, v11, a1, a2, a3, a4);
}

uint64_t WindowGroup.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v12 = *(_QWORD *)(a4 - 8);
  v13 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15, v13);
  v16 = Text.init<A>(_:)();
  WindowGroup.init(_:content:)(v16, v18, v17 & 1, v19, a2, a3, a5, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, a4);
}

uint64_t WindowGroupRootContent.makeContent()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, v2);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v24 - v10;
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (_QWORD *)((char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, double))(v17 + 16))(v16, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v18 = *(_QWORD *)(a1 + 24);
    v24[0] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*v16);
    v24[1] = v19;
    v21 = type metadata accessor for LazyView(0, v4, v18, v20);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyView<A>, v21);
    return AnyView.init<A>(_:)();
  }
  else
  {
    (*(void (**)(char *, _QWORD *, uint64_t))(v5 + 32))(v11, v16, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v11, v4);
    v22 = AnyView.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
  }
  return v22;
}

_OWORD *initializeBufferWithCopyOfBuffer for WindowGroup(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7 & 0xF8 | 7;
  v9 = ~v8;
  if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
    v10 = 16;
  else
    v10 = *(_QWORD *)(v6 + 64);
  v11 = v10 + 8;
  if ((v7 & 0x1000F8) != 0
    || ((((((v10 + 8 + (((v7 & 0xF8) + 39) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (_OWORD *)(v13 + ((v8 + 16) & v9));
  }
  else
  {
    v14 = *(_QWORD *)(a2 + 24);
    if (v14 < 0xFFFFFFFF)
    {
      v18 = *(_OWORD *)(a2 + 16);
      *a1 = *(_OWORD *)a2;
      a1[1] = v18;
    }
    else
    {
      v15 = *(_QWORD *)a2;
      v16 = *(_QWORD *)(a2 + 8);
      v17 = *(_BYTE *)(a2 + 16);
      v34 = v5;
      outlined copy of Text.Storage(*(_QWORD *)a2, v16, v17);
      *(_QWORD *)v4 = v15;
      *((_QWORD *)v4 + 1) = v16;
      *((_BYTE *)v4 + 16) = v17;
      *((_QWORD *)v4 + 3) = v14;
      swift_bridgeObjectRetain();
      v5 = v34;
    }
    v19 = (_QWORD *)(((unint64_t)v4 + 39) & v9);
    v20 = (_QWORD *)((a2 + 39) & v9);
    v21 = *((unsigned __int8 *)v20 + v10);
    if (v21 >= 2)
    {
      if (v10 <= 3)
        v22 = v10;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    if (v21 == 1)
    {
      v23 = v20[1];
      *v19 = *v20;
      *(_QWORD *)((((unint64_t)v4 + 39) & v9) + 8) = v23;
      swift_retain();
      v24 = 1;
    }
    else
    {
      (*(void (**)(unint64_t, _QWORD *, uint64_t))(v6 + 16))(((unint64_t)v4 + 39) & v9, v20, v5);
      v24 = 0;
    }
    *((_BYTE *)v19 + v10) = v24;
    v25 = (_QWORD *)(((unint64_t)v19 + v11) & 0xFFFFFFFFFFFFFFF8);
    v26 = (_QWORD *)(((unint64_t)v20 + v11) & 0xFFFFFFFFFFFFFFF8);
    *v25 = *v26;
    v25[1] = v26[1];
    v27 = (_QWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFF8);
    v28 = (_QWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFF8);
    *v28 = *v27;
    v29 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
    v30 = (unint64_t *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    v31 = *v30;
    swift_bridgeObjectRetain();
    if (v31 < 0xFFFFFFFF)
    {
      *(_OWORD *)v29 = *(_OWORD *)v30;
      return v4;
    }
    v32 = v30[1];
    *(_QWORD *)v29 = v31;
    *(_QWORD *)(v29 + 8) = v32;
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for WindowGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;

  v6 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v6 >= 0xFFFFFFFF)
    {
      v13 = *(_QWORD *)a2;
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(_BYTE *)(a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v14, v15);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v14;
      *(_BYTE *)(a1 + 16) = v15;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v6 >= 0xFFFFFFFF)
    {
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(_BYTE *)(a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v8, v9);
      v10 = *(_QWORD *)a1;
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(_BYTE *)(a1 + 16);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      *(_BYTE *)(a1 + 16) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
LABEL_8:
  v17 = *(_QWORD *)(a3 + 16);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_DWORD *)(v18 + 80) & 0xF8;
  v20 = v19 + 39;
  v21 = v19 + 39 + a1;
  v22 = ~v19 & 0xFFFFFFFFFFFFFFF8;
  v23 = v21 & v22;
  v24 = (v20 + a2) & v22;
  if (*(_QWORD *)(v18 + 64) <= 0x10uLL)
    v25 = 16;
  else
    v25 = *(_QWORD *)(v18 + 64);
  if (v23 != v24)
  {
    v26 = *(unsigned __int8 *)(v23 + v25);
    if (v26 >= 2)
    {
      if (v25 <= 3)
        v27 = v25;
      else
        v27 = 4;
      __asm { BR              X12 }
    }
    if (v26 == 1)
      swift_release();
    else
      (*(void (**)(unint64_t, uint64_t))(v18 + 8))(v23, v17);
    v28 = *(unsigned __int8 *)(v24 + v25);
    if (v28 >= 2)
    {
      if (v25 <= 3)
        v29 = v25;
      else
        v29 = 4;
      __asm { BR              X12 }
    }
    if (v28 == 1)
    {
      v30 = *(_QWORD *)(v24 + 8);
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *(_QWORD *)(v23 + 8) = v30;
      *(_BYTE *)(v23 + v25) = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v18 + 16))(v23, v24, v17);
      *(_BYTE *)(v23 + v25) = 0;
    }
  }
  v31 = (_QWORD *)(((v23 | 7) + v25 + 1) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)(((v24 | 7) + v25 + 1) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = (_QWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFF8);
  v34 = (_QWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFF8);
  *v33 = *v34;
  v35 = (_QWORD *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  v36 = (unint64_t *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
  v37 = *v36;
  if (*v35 < 0xFFFFFFFFuLL)
  {
    if (v37 >= 0xFFFFFFFF)
    {
      v39 = v36[1];
      *v35 = v37;
      v35[1] = v39;
      swift_retain();
      return a1;
    }
LABEL_34:
    *(_OWORD *)v35 = *(_OWORD *)v36;
    return a1;
  }
  if (v37 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_34;
  }
  v38 = v36[1];
  *v35 = v37;
  v35[1] = v38;
  swift_retain();
  swift_release();
  return a1;
}

